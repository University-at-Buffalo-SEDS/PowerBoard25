
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006330  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006510  08006510  00007510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006598  08006598  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006598  08006598  00007598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065a0  080065a0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a0  080065a0  000075a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065a4  080065a4  000075a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080065a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f74  20000060  08006608  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fd4  08006608  00008fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020250  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ebf  00000000  00000000  000282e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  0002c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134e  00000000  00000000  0002da98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000419b  00000000  00000000  0002ede6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d67d  00000000  00000000  00032f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2976  00000000  00000000  000505fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d30  00000000  00000000  00122fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00129ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080064f8 	.word	0x080064f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080064f8 	.word	0x080064f8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fb8b 	bl	8000c2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f81e 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f956 	bl	80007cc <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000520:	f000 f85c 	bl	80005dc <MX_FDCAN2_Init>
  MX_USB_PCD_Init();
 8000524:	f000 f92a 	bl	800077c <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8000528:	f000 f89e 	bl	8000668 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800052c:	f000 f8dc 	bl	80006e8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f003 f94c 	bl	80037cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000534:	4a05      	ldr	r2, [pc, #20]	@ (800054c <main+0x3c>)
 8000536:	2100      	movs	r1, #0
 8000538:	4805      	ldr	r0, [pc, #20]	@ (8000550 <main+0x40>)
 800053a:	f003 f991 	bl	8003860 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a04      	ldr	r2, [pc, #16]	@ (8000554 <main+0x44>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f003 f966 	bl	8003814 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <main+0x38>
 800054c:	08006534 	.word	0x08006534
 8000550:	08000879 	.word	0x08000879
 8000554:	200004a4 	.word	0x200004a4

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0318 	add.w	r3, r7, #24
 8000562:	2238      	movs	r2, #56	@ 0x38
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fede 	bl	8006328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800057e:	f001 fa2b 	bl	80019d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000582:	2322      	movs	r3, #34	@ 0x22
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800058a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2340      	movs	r3, #64	@ 0x40
 800058e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	4618      	mov	r0, r3
 800059e:	f001 facf 	bl	8001b40 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005a8:	f000 f96e 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b0:	2301      	movs	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fdcd 	bl	8002164 <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005d0:	f000 f95a 	bl	8000888 <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	@ 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 80005e2:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <MX_FDCAN2_Init+0x88>)
 80005e4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80005f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80005fe:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 8000600:	2200      	movs	r2, #0
 8000602:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000604:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 8000606:	2200      	movs	r2, #0
 8000608:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800060a:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 800060c:	2210      	movs	r2, #16
 800060e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000610:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 8000612:	2201      	movs	r2, #1
 8000614:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8000616:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 8000618:	2201      	movs	r2, #1
 800061a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 800061c:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 800061e:	2201      	movs	r2, #1
 8000620:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 8000624:	2201      	movs	r2, #1
 8000626:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 800062a:	2201      	movs	r2, #1
 800062c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 8000630:	2201      	movs	r2, #1
 8000632:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 8000636:	2201      	movs	r2, #1
 8000638:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 800063c:	2200      	movs	r2, #0
 800063e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 8000642:	2200      	movs	r2, #0
 8000644:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 8000648:	2200      	movs	r2, #0
 800064a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_FDCAN2_Init+0x84>)
 800064e:	f000 fc43 	bl	8000ed8 <HAL_FDCAN_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000658:	f000 f916 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000007c 	.word	0x2000007c
 8000664:	40006800 	.word	0x40006800

08000668 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_I2C2_Init+0x74>)
 800066e:	4a1c      	ldr	r2, [pc, #112]	@ (80006e0 <MX_I2C2_Init+0x78>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_I2C2_Init+0x74>)
 8000674:	4a1b      	ldr	r2, [pc, #108]	@ (80006e4 <MX_I2C2_Init+0x7c>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <MX_I2C2_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_I2C2_Init+0x74>)
 8000680:	2201      	movs	r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_I2C2_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_I2C2_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_I2C2_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_I2C2_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_I2C2_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006a2:	480e      	ldr	r0, [pc, #56]	@ (80006dc <MX_I2C2_Init+0x74>)
 80006a4:	f000 ff6e 	bl	8001584 <HAL_I2C_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006ae:	f000 f8eb 	bl	8000888 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <MX_I2C2_Init+0x74>)
 80006b6:	f001 f800 	bl	80016ba <HAL_I2CEx_ConfigAnalogFilter>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006c0:	f000 f8e2 	bl	8000888 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006c4:	2100      	movs	r1, #0
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_I2C2_Init+0x74>)
 80006c8:	f001 f842 	bl	8001750 <HAL_I2CEx_ConfigDigitalFilter>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 f8d9 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000e0 	.word	0x200000e0
 80006e0:	40005800 	.word	0x40005800
 80006e4:	00503d58 	.word	0x00503d58

080006e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 80006ee:	4a21      	ldr	r2, [pc, #132]	@ (8000774 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 80006f4:	4a20      	ldr	r2, [pc, #128]	@ (8000778 <MX_LPUART1_UART_Init+0x90>)
 80006f6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 800070c:	220c      	movs	r2, #12
 800070e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000710:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 8000724:	2200      	movs	r2, #0
 8000726:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000728:	4811      	ldr	r0, [pc, #68]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 800072a:	f002 f973 	bl	8002a14 <HAL_UART_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000734:	f000 f8a8 	bl	8000888 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000738:	2100      	movs	r1, #0
 800073a:	480d      	ldr	r0, [pc, #52]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 800073c:	f002 ff0e 	bl	800355c <HAL_UARTEx_SetTxFifoThreshold>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000746:	f000 f89f 	bl	8000888 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	4808      	ldr	r0, [pc, #32]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 800074e:	f002 ff43 	bl	80035d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000758:	f000 f896 	bl	8000888 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_LPUART1_UART_Init+0x88>)
 800075e:	f002 fec4 	bl	80034ea <HAL_UARTEx_DisableFifoMode>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000768:	f000 f88e 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000134 	.word	0x20000134
 8000774:	40008000 	.word	0x40008000
 8000778:	00033324 	.word	0x00033324

0800077c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_USB_PCD_Init+0x48>)
 8000782:	4a11      	ldr	r2, [pc, #68]	@ (80007c8 <MX_USB_PCD_Init+0x4c>)
 8000784:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_USB_PCD_Init+0x48>)
 8000788:	2208      	movs	r2, #8
 800078a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_USB_PCD_Init+0x48>)
 800078e:	2202      	movs	r2, #2
 8000790:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_USB_PCD_Init+0x48>)
 8000794:	2202      	movs	r2, #2
 8000796:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_USB_PCD_Init+0x48>)
 800079a:	2200      	movs	r2, #0
 800079c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_USB_PCD_Init+0x48>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_USB_PCD_Init+0x48>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_USB_PCD_Init+0x48>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_USB_PCD_Init+0x48>)
 80007b2:	f001 f819 	bl	80017e8 <HAL_PCD_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80007bc:	f000 f864 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200001c8 	.word	0x200001c8
 80007c8:	40005c00 	.word	0x40005c00

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <MX_GPIO_Init+0xa4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a22      	ldr	r2, [pc, #136]	@ (8000870 <MX_GPIO_Init+0xa4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <MX_GPIO_Init+0xa4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_GPIO_Init+0xa4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <MX_GPIO_Init+0xa4>)
 8000800:	f043 0320 	orr.w	r3, r3, #32
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_GPIO_Init+0xa4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0320 	and.w	r3, r3, #32
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_GPIO_Init+0xa4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a16      	ldr	r2, [pc, #88]	@ (8000870 <MX_GPIO_Init+0xa4>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_GPIO_Init+0xa4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_GPIO_Init+0xa4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <MX_GPIO_Init+0xa4>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_GPIO_Init+0xa4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	480b      	ldr	r0, [pc, #44]	@ (8000874 <MX_GPIO_Init+0xa8>)
 8000848:	f000 fe84 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800084c:	2320      	movs	r3, #32
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_GPIO_Init+0xa8>)
 8000864:	f000 fcf4 	bl	8001250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	@ 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40021000 	.word	0x40021000
 8000874:	48000400 	.word	0x48000400

08000878 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f003 f87f 	bl	8003984 <osDelay>
 8000886:	e7fb      	b.n	8000880 <StartDefaultTask+0x8>

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_MspInit+0x50>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089e:	4a11      	ldr	r2, [pc, #68]	@ (80008e4 <HAL_MspInit+0x50>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <HAL_MspInit+0x50>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <HAL_MspInit+0x50>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b6:	4a0b      	ldr	r2, [pc, #44]	@ (80008e4 <HAL_MspInit+0x50>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <HAL_MspInit+0x50>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	210f      	movs	r1, #15
 80008ce:	f06f 0001 	mvn.w	r0, #1
 80008d2:	f000 fada 	bl	8000e8a <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008d6:	f001 f923 	bl	8001b20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09e      	sub	sp, #120	@ 0x78
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2250      	movs	r2, #80	@ 0x50
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f005 fd0d 	bl	8006328 <memset>
  if(hfdcan->Instance==FDCAN2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a20      	ldr	r2, [pc, #128]	@ (8000994 <HAL_FDCAN_MspInit+0xac>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d138      	bne.n	800098a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800091c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800091e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000922:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fe37 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000934:	f7ff ffa8 	bl	8000888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000938:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <HAL_FDCAN_MspInit+0xb0>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093c:	4a16      	ldr	r2, [pc, #88]	@ (8000998 <HAL_FDCAN_MspInit+0xb0>)
 800093e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000942:	6593      	str	r3, [r2, #88]	@ 0x58
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <HAL_FDCAN_MspInit+0xb0>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <HAL_FDCAN_MspInit+0xb0>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000954:	4a10      	ldr	r2, [pc, #64]	@ (8000998 <HAL_FDCAN_MspInit+0xb0>)
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095c:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <HAL_FDCAN_MspInit+0xb0>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000968:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800096c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800097a:	2309      	movs	r3, #9
 800097c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <HAL_FDCAN_MspInit+0xb4>)
 8000986:	f000 fc63 	bl	8001250 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 800098a:	bf00      	nop
 800098c:	3778      	adds	r7, #120	@ 0x78
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40006800 	.word	0x40006800
 8000998:	40021000 	.word	0x40021000
 800099c:	48000400 	.word	0x48000400

080009a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b09e      	sub	sp, #120	@ 0x78
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2250      	movs	r2, #80	@ 0x50
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f005 fcb1 	bl	8006328 <memset>
  if(hi2c->Instance==I2C2)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000a48 <HAL_I2C_MspInit+0xa8>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d137      	bne.n	8000a40 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fddd 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009e8:	f7ff ff4e 	bl	8000888 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <HAL_I2C_MspInit+0xac>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f0:	4a16      	ldr	r2, [pc, #88]	@ (8000a4c <HAL_I2C_MspInit+0xac>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <HAL_I2C_MspInit+0xac>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a08:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0a:	2312      	movs	r3, #18
 8000a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a16:	2304      	movs	r3, #4
 8000a18:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a24:	f000 fc14 	bl	8001250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_I2C_MspInit+0xac>)
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2c:	4a07      	ldr	r2, [pc, #28]	@ (8000a4c <HAL_I2C_MspInit+0xac>)
 8000a2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <HAL_I2C_MspInit+0xac>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000a40:	bf00      	nop
 8000a42:	3778      	adds	r7, #120	@ 0x78
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40005800 	.word	0x40005800
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09e      	sub	sp, #120	@ 0x78
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2250      	movs	r2, #80	@ 0x50
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 fc59 	bl	8006328 <memset>
  if(huart->Instance==LPUART1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000af8 <HAL_UART_MspInit+0xa8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d136      	bne.n	8000aee <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a80:	2320      	movs	r3, #32
 8000a82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fd85 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a98:	f7ff fef6 	bl	8000888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a9c:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aa0:	4a16      	ldr	r2, [pc, #88]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab8:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <HAL_UART_MspInit+0xac>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000acc:	230c      	movs	r3, #12
 8000ace:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000adc:	230c      	movs	r3, #12
 8000ade:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aea:	f000 fbb1 	bl	8001250 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000aee:	bf00      	nop
 8000af0:	3778      	adds	r7, #120	@ 0x78
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40008000 	.word	0x40008000
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b098      	sub	sp, #96	@ 0x60
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	2250      	movs	r2, #80	@ 0x50
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f005 fc09 	bl	8006328 <memset>
  if(hpcd->Instance==USB)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a11      	ldr	r2, [pc, #68]	@ (8000b60 <HAL_PCD_MspInit+0x60>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d11a      	bne.n	8000b56 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b24:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000b26:	2300      	movs	r3, #0
 8000b28:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fd34 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8000b3a:	f7ff fea5 	bl	8000888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <HAL_PCD_MspInit+0x64>)
 8000b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b42:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_PCD_MspInit+0x64>)
 8000b44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_PCD_MspInit+0x64>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000b56:	bf00      	nop
 8000b58:	3760      	adds	r7, #96	@ 0x60
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40005c00 	.word	0x40005c00
 8000b64:	40021000 	.word	0x40021000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba2:	f000 f897 	bl	8000cd4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ba6:	f004 fb43 	bl	8005230 <xTaskGetSchedulerState>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d001      	beq.n	8000bb4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bb0:	f005 f93a 	bl	8005e28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bdc:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bde:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f005 fbeb 	bl	80063e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0e:	f7ff fc7f 	bl	8000510 <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   r0, =_estack
 8000c14:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c20:	080065a8 	.word	0x080065a8
  ldr r2, =_sbss
 8000c24:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c28:	20001fd4 	.word	0x20001fd4

08000c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_2_IRQHandler>

08000c2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f91b 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f000 f80e 	bl	8000c60 <HAL_InitTick>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	e001      	b.n	8000c54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c50:	f7ff fe20 	bl	8000894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c54:	79fb      	ldrb	r3, [r7, #7]

}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c6c:	4b16      	ldr	r3, [pc, #88]	@ (8000cc8 <HAL_InitTick+0x68>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d022      	beq.n	8000cba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <HAL_InitTick+0x6c>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <HAL_InitTick+0x68>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f918 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10f      	bne.n	8000cb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	d809      	bhi.n	8000cae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca2:	f000 f8f2 	bl	8000e8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_InitTick+0x70>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	e007      	b.n	8000cbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	e004      	b.n	8000cbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e001      	b.n	8000cbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <HAL_IncTick+0x1c>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <HAL_IncTick+0x20>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a03      	ldr	r2, [pc, #12]	@ (8000cf0 <HAL_IncTick+0x1c>)
 8000ce4:	6013      	str	r3, [r2, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	200004a8 	.word	0x200004a8
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	200004a8 	.word	0x200004a8

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	@ (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	@ (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	@ 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f7ff ff8e 	bl	8000d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff47 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e98:	f7ff ff5e 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000e9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f7ff ff90 	bl	8000dc8 <NVIC_EncodePriority>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff5f 	bl	8000d74 <__NVIC_SetPriority>
}
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffb2 	bl	8000e30 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e147      	b.n	800117a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d106      	bne.n	8000f04 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fcf2 	bl	80008e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	699a      	ldr	r2, [r3, #24]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0210 	bic.w	r2, r2, #16
 8000f12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f14:	f7ff fef0 	bl	8000cf8 <HAL_GetTick>
 8000f18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f1a:	e012      	b.n	8000f42 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f1c:	f7ff feec 	bl	8000cf8 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b0a      	cmp	r3, #10
 8000f28:	d90b      	bls.n	8000f42 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2203      	movs	r2, #3
 8000f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e11b      	b.n	800117a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d0e5      	beq.n	8000f1c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	699a      	ldr	r2, [r3, #24]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0201 	orr.w	r2, r2, #1
 8000f5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f60:	f7ff feca 	bl	8000cf8 <HAL_GetTick>
 8000f64:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f66:	e012      	b.n	8000f8e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f68:	f7ff fec6 	bl	8000cf8 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b0a      	cmp	r3, #10
 8000f74:	d90b      	bls.n	8000f8e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7a:	f043 0201 	orr.w	r2, r3, #1
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2203      	movs	r2, #3
 8000f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e0f5      	b.n	800117a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0e5      	beq.n	8000f68 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0202 	orr.w	r2, r2, #2
 8000faa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a74      	ldr	r2, [pc, #464]	@ (8001184 <HAL_FDCAN_Init+0x2ac>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d103      	bne.n	8000fbe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000fb6:	4a74      	ldr	r2, [pc, #464]	@ (8001188 <HAL_FDCAN_Init+0x2b0>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7c1b      	ldrb	r3, [r3, #16]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d108      	bne.n	8000fd8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	699a      	ldr	r2, [r3, #24]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fd4:	619a      	str	r2, [r3, #24]
 8000fd6:	e007      	b.n	8000fe8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	699a      	ldr	r2, [r3, #24]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fe6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7c5b      	ldrb	r3, [r3, #17]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d108      	bne.n	8001002 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000ffe:	619a      	str	r2, [r3, #24]
 8001000:	e007      	b.n	8001012 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	699a      	ldr	r2, [r3, #24]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001010:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7c9b      	ldrb	r3, [r3, #18]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d108      	bne.n	800102c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	699a      	ldr	r2, [r3, #24]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001028:	619a      	str	r2, [r3, #24]
 800102a:	e007      	b.n	800103c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800103a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	699a      	ldr	r2, [r3, #24]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001060:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0210 	bic.w	r2, r2, #16
 8001070:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	699a      	ldr	r2, [r3, #24]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0204 	orr.w	r2, r2, #4
 8001088:	619a      	str	r2, [r3, #24]
 800108a:	e02c      	b.n	80010e6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d028      	beq.n	80010e6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d01c      	beq.n	80010d6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	699a      	ldr	r2, [r3, #24]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010aa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0210 	orr.w	r2, r2, #16
 80010ba:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d110      	bne.n	80010e6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	699a      	ldr	r2, [r3, #24]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0220 	orr.w	r2, r2, #32
 80010d2:	619a      	str	r2, [r3, #24]
 80010d4:	e007      	b.n	80010e6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	699a      	ldr	r2, [r3, #24]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0220 	orr.w	r2, r2, #32
 80010e4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010f6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010fe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	3b01      	subs	r3, #1
 8001108:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800110e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001110:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800111a:	d115      	bne.n	8001148 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001120:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001126:	3b01      	subs	r3, #1
 8001128:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800112a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	3b01      	subs	r3, #1
 8001132:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001134:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113c:	3b01      	subs	r3, #1
 800113e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001144:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001146:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f814 	bl	800118c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40006400 	.word	0x40006400
 8001188:	40006500 	.word	0x40006500

0800118c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001194:	4b2c      	ldr	r3, [pc, #176]	@ (8001248 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001196:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a2b      	ldr	r2, [pc, #172]	@ (800124c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d103      	bne.n	80011aa <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80011a8:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011b8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011de:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e6:	061a      	lsls	r2, r3, #24
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e005      	b.n	800122c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3304      	adds	r3, #4
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d3f3      	bcc.n	8001220 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	4000a400 	.word	0x4000a400
 800124c:	40006800 	.word	0x40006800

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800125e:	e15a      	b.n	8001516 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2101      	movs	r1, #1
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	4013      	ands	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 814c 	beq.w	8001510 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b01      	cmp	r3, #1
 8001282:	d005      	beq.n	8001290 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800128c:	2b02      	cmp	r3, #2
 800128e:	d130      	bne.n	80012f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012c6:	2201      	movs	r2, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f003 0201 	and.w	r2, r3, #1
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d017      	beq.n	800132e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d123      	bne.n	8001382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	6939      	ldr	r1, [r7, #16]
 800137e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0203 	and.w	r2, r3, #3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80a6 	beq.w	8001510 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001534 <HAL_GPIO_Init+0x2e4>)
 80013c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001534 <HAL_GPIO_Init+0x2e4>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80013d0:	4b58      	ldr	r3, [pc, #352]	@ (8001534 <HAL_GPIO_Init+0x2e4>)
 80013d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013dc:	4a56      	ldr	r2, [pc, #344]	@ (8001538 <HAL_GPIO_Init+0x2e8>)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001406:	d01f      	beq.n	8001448 <HAL_GPIO_Init+0x1f8>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a4c      	ldr	r2, [pc, #304]	@ (800153c <HAL_GPIO_Init+0x2ec>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d019      	beq.n	8001444 <HAL_GPIO_Init+0x1f4>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a4b      	ldr	r2, [pc, #300]	@ (8001540 <HAL_GPIO_Init+0x2f0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d013      	beq.n	8001440 <HAL_GPIO_Init+0x1f0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a4a      	ldr	r2, [pc, #296]	@ (8001544 <HAL_GPIO_Init+0x2f4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00d      	beq.n	800143c <HAL_GPIO_Init+0x1ec>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a49      	ldr	r2, [pc, #292]	@ (8001548 <HAL_GPIO_Init+0x2f8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x1e8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a48      	ldr	r2, [pc, #288]	@ (800154c <HAL_GPIO_Init+0x2fc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_GPIO_Init+0x1e4>
 8001430:	2305      	movs	r3, #5
 8001432:	e00a      	b.n	800144a <HAL_GPIO_Init+0x1fa>
 8001434:	2306      	movs	r3, #6
 8001436:	e008      	b.n	800144a <HAL_GPIO_Init+0x1fa>
 8001438:	2304      	movs	r3, #4
 800143a:	e006      	b.n	800144a <HAL_GPIO_Init+0x1fa>
 800143c:	2303      	movs	r3, #3
 800143e:	e004      	b.n	800144a <HAL_GPIO_Init+0x1fa>
 8001440:	2302      	movs	r3, #2
 8001442:	e002      	b.n	800144a <HAL_GPIO_Init+0x1fa>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_GPIO_Init+0x1fa>
 8001448:	2300      	movs	r3, #0
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	f002 0203 	and.w	r2, r2, #3
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	4093      	lsls	r3, r2
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800145a:	4937      	ldr	r1, [pc, #220]	@ (8001538 <HAL_GPIO_Init+0x2e8>)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001468:	4b39      	ldr	r3, [pc, #228]	@ (8001550 <HAL_GPIO_Init+0x300>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800148c:	4a30      	ldr	r2, [pc, #192]	@ (8001550 <HAL_GPIO_Init+0x300>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001492:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <HAL_GPIO_Init+0x300>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b6:	4a26      	ldr	r2, [pc, #152]	@ (8001550 <HAL_GPIO_Init+0x300>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <HAL_GPIO_Init+0x300>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <HAL_GPIO_Init+0x300>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <HAL_GPIO_Init+0x300>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800150a:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <HAL_GPIO_Init+0x300>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3301      	adds	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	f47f ae9d 	bne.w	8001260 <HAL_GPIO_Init+0x10>
  }
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	371c      	adds	r7, #28
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000
 800153c:	48000400 	.word	0x48000400
 8001540:	48000800 	.word	0x48000800
 8001544:	48000c00 	.word	0x48000c00
 8001548:	48001000 	.word	0x48001000
 800154c:	48001400 	.word	0x48001400
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001570:	e002      	b.n	8001578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e08d      	b.n	80016b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff f9f8 	bl	80009a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2224      	movs	r2, #36	@ 0x24
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	e006      	b.n	800160c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800160a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d108      	bne.n	8001626 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	e007      	b.n	8001636 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001634:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001648:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001658:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69d9      	ldr	r1, [r3, #28]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1a      	ldr	r2, [r3, #32]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2220      	movs	r2, #32
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d138      	bne.n	8001742 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016da:	2302      	movs	r3, #2
 80016dc:	e032      	b.n	8001744 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2224      	movs	r2, #36	@ 0x24
 80016ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800170c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6819      	ldr	r1, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2220      	movs	r2, #32
 8001732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e000      	b.n	8001744 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001742:	2302      	movs	r3, #2
  }
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b20      	cmp	r3, #32
 8001764:	d139      	bne.n	80017da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001770:	2302      	movs	r3, #2
 8001772:	e033      	b.n	80017dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2224      	movs	r2, #36	@ 0x24
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0201 	orr.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2220      	movs	r2, #32
 80017ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017da:	2302      	movs	r3, #2
  }
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0c0      	b.n	800197c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff f976 	bl	8000b00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2203      	movs	r2, #3
 8001818:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f001 ff65 	bl	80036f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e03e      	b.n	80018aa <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3311      	adds	r3, #17
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3310      	adds	r3, #16
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3313      	adds	r3, #19
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	3320      	adds	r3, #32
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3324      	adds	r3, #36	@ 0x24
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	3301      	adds	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	791b      	ldrb	r3, [r3, #4]
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3bb      	bcc.n	800182c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e044      	b.n	8001944 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	440b      	add	r3, r1
 80018c8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	440b      	add	r3, r1
 8001920:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	3301      	adds	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	791b      	ldrb	r3, [r3, #4]
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	429a      	cmp	r2, r3
 800194c:	d3b5      	bcc.n	80018ba <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3304      	adds	r3, #4
 8001956:	e893 0006 	ldmia.w	r3, {r1, r2}
 800195a:	f001 fee4 	bl	8003726 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7a9b      	ldrb	r3, [r3, #10]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d102      	bne.n	800197a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f805 	bl	8001984 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80019bc:	b29b      	uxth	r3, r3
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d141      	bne.n	8001a6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019f2:	d131      	bne.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019f4:	4b47      	ldr	r3, [pc, #284]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019fa:	4a46      	ldr	r2, [pc, #280]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a04:	4b43      	ldr	r3, [pc, #268]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a0c:	4a41      	ldr	r2, [pc, #260]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a14:	4b40      	ldr	r3, [pc, #256]	@ (8001b18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2232      	movs	r2, #50	@ 0x32
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a20:	fba2 2303 	umull	r2, r3, r2, r3
 8001a24:	0c9b      	lsrs	r3, r3, #18
 8001a26:	3301      	adds	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a2a:	e002      	b.n	8001a32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a32:	4b38      	ldr	r3, [pc, #224]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a3e:	d102      	bne.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f2      	bne.n	8001a2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a46:	4b33      	ldr	r3, [pc, #204]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a52:	d158      	bne.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e057      	b.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a58:	4b2e      	ldr	r3, [pc, #184]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a68:	e04d      	b.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a70:	d141      	bne.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a72:	4b28      	ldr	r3, [pc, #160]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a7e:	d131      	bne.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a80:	4b24      	ldr	r3, [pc, #144]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a86:	4a23      	ldr	r2, [pc, #140]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a90:	4b20      	ldr	r3, [pc, #128]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a98:	4a1e      	ldr	r2, [pc, #120]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2232      	movs	r2, #50	@ 0x32
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	0c9b      	lsrs	r3, r3, #18
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab6:	e002      	b.n	8001abe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aca:	d102      	bne.n	8001ad2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f2      	bne.n	8001ab8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ade:	d112      	bne.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e011      	b.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aea:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001af4:	e007      	b.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40007000 	.word	0x40007000
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	431bde83 	.word	0x431bde83

08001b20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b2e:	6093      	str	r3, [r2, #8]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40007000 	.word	0x40007000

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e2fe      	b.n	8002150 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d075      	beq.n	8001c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5e:	4b97      	ldr	r3, [pc, #604]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b68:	4b94      	ldr	r3, [pc, #592]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b0c      	cmp	r3, #12
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3e>
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d002      	beq.n	8001b84 <HAL_RCC_OscConfig+0x44>
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d10b      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	4b8d      	ldr	r3, [pc, #564]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d05b      	beq.n	8001c48 <HAL_RCC_OscConfig+0x108>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d157      	bne.n	8001c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e2d9      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba4:	d106      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x74>
 8001ba6:	4b85      	ldr	r3, [pc, #532]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a84      	ldr	r2, [pc, #528]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e01d      	b.n	8001bf0 <HAL_RCC_OscConfig+0xb0>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x98>
 8001bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7e      	ldr	r2, [pc, #504]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b7c      	ldr	r3, [pc, #496]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a7b      	ldr	r2, [pc, #492]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e00b      	b.n	8001bf0 <HAL_RCC_OscConfig+0xb0>
 8001bd8:	4b78      	ldr	r3, [pc, #480]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a77      	ldr	r2, [pc, #476]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b75      	ldr	r3, [pc, #468]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a74      	ldr	r2, [pc, #464]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f87e 	bl	8000cf8 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff f87a 	bl	8000cf8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	@ 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e29e      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c12:	4b6a      	ldr	r3, [pc, #424]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0xc0>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f86a 	bl	8000cf8 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff f866 	bl	8000cf8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	@ 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e28a      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3a:	4b60      	ldr	r3, [pc, #384]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0xe8>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d075      	beq.n	8001d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c56:	4b59      	ldr	r3, [pc, #356]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c60:	4b56      	ldr	r3, [pc, #344]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d102      	bne.n	8001c76 <HAL_RCC_OscConfig+0x136>
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d002      	beq.n	8001c7c <HAL_RCC_OscConfig+0x13c>
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d11f      	bne.n	8001cbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_OscConfig+0x154>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e25d      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b49      	ldr	r3, [pc, #292]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	4946      	ldr	r1, [pc, #280]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ca8:	4b45      	ldr	r3, [pc, #276]	@ (8001dc0 <HAL_RCC_OscConfig+0x280>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe ffd7 	bl	8000c60 <HAL_InitTick>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d043      	beq.n	8001d40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e249      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d023      	beq.n	8001d0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f812 	bl	8000cf8 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7ff f80e 	bl	8000cf8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e232      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cea:	4b34      	ldr	r3, [pc, #208]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf6:	4b31      	ldr	r3, [pc, #196]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	061b      	lsls	r3, r3, #24
 8001d04:	492d      	ldr	r1, [pc, #180]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
 8001d0a:	e01a      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2a      	ldr	r2, [pc, #168]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001d12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7fe ffee 	bl	8000cf8 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d20:	f7fe ffea 	bl	8000cf8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e20e      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x1e0>
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d041      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d01c      	beq.n	8001d90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d56:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5c:	4a17      	ldr	r2, [pc, #92]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d66:	f7fe ffc7 	bl	8000cf8 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7fe ffc3 	bl	8000cf8 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1e7      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d80:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0ef      	beq.n	8001d6e <HAL_RCC_OscConfig+0x22e>
 8001d8e:	e020      	b.n	8001dd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d90:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d96:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7fe ffaa 	bl	8000cf8 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da6:	e00d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da8:	f7fe ffa6 	bl	8000cf8 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d906      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1ca      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ea      	bne.n	8001da8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a6 	beq.w	8001f2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001de4:	4b84      	ldr	r3, [pc, #528]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_OscConfig+0x2b4>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x2b6>
 8001df4:	2300      	movs	r3, #0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00d      	beq.n	8001e16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	4a7e      	ldr	r2, [pc, #504]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e06:	4b7c      	ldr	r3, [pc, #496]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e12:	2301      	movs	r3, #1
 8001e14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e16:	4b79      	ldr	r3, [pc, #484]	@ (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e22:	4b76      	ldr	r3, [pc, #472]	@ (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a75      	ldr	r2, [pc, #468]	@ (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2e:	f7fe ff63 	bl	8000cf8 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e36:	f7fe ff5f 	bl	8000cf8 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e183      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e48:	4b6c      	ldr	r3, [pc, #432]	@ (8001ffc <HAL_RCC_OscConfig+0x4bc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d108      	bne.n	8001e6e <HAL_RCC_OscConfig+0x32e>
 8001e5c:	4b66      	ldr	r3, [pc, #408]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e62:	4a65      	ldr	r2, [pc, #404]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e6c:	e024      	b.n	8001eb8 <HAL_RCC_OscConfig+0x378>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d110      	bne.n	8001e98 <HAL_RCC_OscConfig+0x358>
 8001e76:	4b60      	ldr	r3, [pc, #384]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e86:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e96:	e00f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x378>
 8001e98:	4b57      	ldr	r3, [pc, #348]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9e:	4a56      	ldr	r2, [pc, #344]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ea8:	4b53      	ldr	r3, [pc, #332]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eae:	4a52      	ldr	r2, [pc, #328]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d016      	beq.n	8001eee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7fe ff1a 	bl	8000cf8 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7fe ff16 	bl	8000cf8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e138      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ede:	4b46      	ldr	r3, [pc, #280]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0ed      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x388>
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7fe ff03 	bl	8000cf8 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7fe feff 	bl	8000cf8 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e121      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ed      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4b35      	ldr	r3, [pc, #212]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f24:	4a34      	ldr	r2, [pc, #208]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d03c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f46:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7fe fed2 	bl	8000cf8 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f58:	f7fe fece 	bl	8000cf8 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e0f2      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f6a:	4b23      	ldr	r3, [pc, #140]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ef      	beq.n	8001f58 <HAL_RCC_OscConfig+0x418>
 8001f78:	e01b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f80:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7fe feb5 	bl	8000cf8 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f92:	f7fe feb1 	bl	8000cf8 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0d5      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fa4:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ef      	bne.n	8001f92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80c9 	beq.w	800214e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b0c      	cmp	r3, #12
 8001fc6:	f000 8083 	beq.w	80020d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d15e      	bne.n	8002090 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a08      	ldr	r2, [pc, #32]	@ (8001ff8 <HAL_RCC_OscConfig+0x4b8>)
 8001fd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7fe fe8b 	bl	8000cf8 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe4:	e00c      	b.n	8002000 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7fe fe87 	bl	8000cf8 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d905      	bls.n	8002000 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0ab      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002000:	4b55      	ldr	r3, [pc, #340]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ec      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200c:	4b52      	ldr	r3, [pc, #328]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	4b52      	ldr	r3, [pc, #328]	@ (800215c <HAL_RCC_OscConfig+0x61c>)
 8002012:	4013      	ands	r3, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6a11      	ldr	r1, [r2, #32]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800201c:	3a01      	subs	r2, #1
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	4311      	orrs	r1, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002026:	0212      	lsls	r2, r2, #8
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800202e:	0852      	lsrs	r2, r2, #1
 8002030:	3a01      	subs	r2, #1
 8002032:	0552      	lsls	r2, r2, #21
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800203a:	0852      	lsrs	r2, r2, #1
 800203c:	3a01      	subs	r2, #1
 800203e:	0652      	lsls	r2, r2, #25
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002046:	06d2      	lsls	r2, r2, #27
 8002048:	430a      	orrs	r2, r1
 800204a:	4943      	ldr	r1, [pc, #268]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 800204c:	4313      	orrs	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b41      	ldr	r3, [pc, #260]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a40      	ldr	r2, [pc, #256]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 8002056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800205a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800205c:	4b3e      	ldr	r3, [pc, #248]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a3d      	ldr	r2, [pc, #244]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002066:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe fe46 	bl	8000cf8 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7fe fe42 	bl	8000cf8 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e066      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002082:	4b35      	ldr	r3, [pc, #212]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x530>
 800208e:	e05e      	b.n	800214e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b31      	ldr	r3, [pc, #196]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a30      	ldr	r2, [pc, #192]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 8002096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800209a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe fe2c 	bl	8000cf8 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe fe28 	bl	8000cf8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e04c      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b6:	4b28      	ldr	r3, [pc, #160]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020c2:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	4924      	ldr	r1, [pc, #144]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 80020c8:	4b25      	ldr	r3, [pc, #148]	@ (8002160 <HAL_RCC_OscConfig+0x620>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	60cb      	str	r3, [r1, #12]
 80020ce:	e03e      	b.n	800214e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e039      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <HAL_RCC_OscConfig+0x618>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0203 	and.w	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d12c      	bne.n	800214a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	3b01      	subs	r3, #1
 80020fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d123      	bne.n	800214a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d11b      	bne.n	800214a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d113      	bne.n	800214a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	085b      	lsrs	r3, r3, #1
 800212e:	3b01      	subs	r3, #1
 8002130:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d109      	bne.n	800214a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	019f800c 	.word	0x019f800c
 8002160:	feeefffc 	.word	0xfeeefffc

08002164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e11e      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800217c:	4b91      	ldr	r3, [pc, #580]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d910      	bls.n	80021ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b8e      	ldr	r3, [pc, #568]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 020f 	bic.w	r2, r3, #15
 8002192:	498c      	ldr	r1, [pc, #560]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b8a      	ldr	r3, [pc, #552]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e106      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d073      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d129      	bne.n	8002214 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c0:	4b81      	ldr	r3, [pc, #516]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0f4      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021d0:	f000 f99e 	bl	8002510 <RCC_GetSysClockFreqFromPLLSource>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4a7c      	ldr	r2, [pc, #496]	@ (80023cc <HAL_RCC_ClockConfig+0x268>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d93f      	bls.n	800225e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021de:	4b7a      	ldr	r3, [pc, #488]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d033      	beq.n	800225e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d12f      	bne.n	800225e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021fe:	4b72      	ldr	r3, [pc, #456]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002206:	4a70      	ldr	r2, [pc, #448]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800220c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e024      	b.n	800225e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d107      	bne.n	800222c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800221c:	4b6a      	ldr	r3, [pc, #424]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0c6      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222c:	4b66      	ldr	r3, [pc, #408]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0be      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800223c:	f000 f8ce 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002240:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4a61      	ldr	r2, [pc, #388]	@ (80023cc <HAL_RCC_ClockConfig+0x268>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d909      	bls.n	800225e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800224a:	4b5f      	ldr	r3, [pc, #380]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002252:	4a5d      	ldr	r2, [pc, #372]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002258:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800225a:	2380      	movs	r3, #128	@ 0x80
 800225c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b5a      	ldr	r3, [pc, #360]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4957      	ldr	r1, [pc, #348]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002270:	f7fe fd42 	bl	8000cf8 <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	e00a      	b.n	800228e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7fe fd3e 	bl	8000cf8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e095      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	4b4e      	ldr	r3, [pc, #312]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 020c 	and.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	429a      	cmp	r2, r3
 800229e:	d1eb      	bne.n	8002278 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d023      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b8:	4b43      	ldr	r3, [pc, #268]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a42      	ldr	r2, [pc, #264]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022d0:	4b3d      	ldr	r3, [pc, #244]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80022d8:	4a3b      	ldr	r2, [pc, #236]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b39      	ldr	r3, [pc, #228]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4936      	ldr	r1, [pc, #216]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
 80022f2:	e008      	b.n	8002306 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b80      	cmp	r3, #128	@ 0x80
 80022f8:	d105      	bne.n	8002306 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022fa:	4b33      	ldr	r3, [pc, #204]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4a32      	ldr	r2, [pc, #200]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002300:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002304:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002306:	4b2f      	ldr	r3, [pc, #188]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d21d      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002314:	4b2b      	ldr	r3, [pc, #172]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 020f 	bic.w	r2, r3, #15
 800231c:	4929      	ldr	r1, [pc, #164]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002324:	f7fe fce8 	bl	8000cf8 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232c:	f7fe fce4 	bl	8000cf8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e03b      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d1ed      	bne.n	800232c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235c:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4917      	ldr	r1, [pc, #92]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800237a:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	490f      	ldr	r1, [pc, #60]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800238e:	f000 f825 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002392:	4602      	mov	r2, r0
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	490c      	ldr	r1, [pc, #48]	@ (80023d0 <HAL_RCC_ClockConfig+0x26c>)
 80023a0:	5ccb      	ldrb	r3, [r1, r3]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <HAL_RCC_ClockConfig+0x270>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_RCC_ClockConfig+0x274>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fc54 	bl	8000c60 <HAL_InitTick>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	04c4b400 	.word	0x04c4b400
 80023d0:	08006558 	.word	0x08006558
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000004 	.word	0x20000004

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d102      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	e047      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023f4:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002400:	4b26      	ldr	r3, [pc, #152]	@ (800249c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e03e      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002406:	4b23      	ldr	r3, [pc, #140]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d136      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002412:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800241c:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3301      	adds	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d10c      	bne.n	800244a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002430:	4a1a      	ldr	r2, [pc, #104]	@ (800249c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	fbb2 f3f3 	udiv	r3, r2, r3
 8002438:	4a16      	ldr	r2, [pc, #88]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 800243a:	68d2      	ldr	r2, [r2, #12]
 800243c:	0a12      	lsrs	r2, r2, #8
 800243e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	617b      	str	r3, [r7, #20]
      break;
 8002448:	e00c      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800244a:	4a13      	ldr	r2, [pc, #76]	@ (8002498 <HAL_RCC_GetSysClockFreq+0xbc>)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4a10      	ldr	r2, [pc, #64]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	0a12      	lsrs	r2, r2, #8
 8002458:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
      break;
 8002462:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002464:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0e5b      	lsrs	r3, r3, #25
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	3301      	adds	r3, #1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	e001      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002484:	693b      	ldr	r3, [r7, #16]
}
 8002486:	4618      	mov	r0, r3
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	00f42400 	.word	0x00f42400
 800249c:	007a1200 	.word	0x007a1200

080024a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a4:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000000 	.word	0x20000000

080024b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024bc:	f7ff fff0 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4904      	ldr	r1, [pc, #16]	@ (80024e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	08006568 	.word	0x08006568

080024e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024e8:	f7ff ffda 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0adb      	lsrs	r3, r3, #11
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4904      	ldr	r1, [pc, #16]	@ (800250c <HAL_RCC_GetPCLK2Freq+0x28>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	08006568 	.word	0x08006568

08002510 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002516:	4b1e      	ldr	r3, [pc, #120]	@ (8002590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002520:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	3301      	adds	r3, #1
 800252c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d10c      	bne.n	800254e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002534:	4a17      	ldr	r2, [pc, #92]	@ (8002594 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	4a14      	ldr	r2, [pc, #80]	@ (8002590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800253e:	68d2      	ldr	r2, [r2, #12]
 8002540:	0a12      	lsrs	r2, r2, #8
 8002542:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	617b      	str	r3, [r7, #20]
    break;
 800254c:	e00c      	b.n	8002568 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800254e:	4a12      	ldr	r2, [pc, #72]	@ (8002598 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002558:	68d2      	ldr	r2, [r2, #12]
 800255a:	0a12      	lsrs	r2, r2, #8
 800255c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    break;
 8002566:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002568:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0e5b      	lsrs	r3, r3, #25
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	3301      	adds	r3, #1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002582:	687b      	ldr	r3, [r7, #4]
}
 8002584:	4618      	mov	r0, r3
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40021000 	.word	0x40021000
 8002594:	007a1200 	.word	0x007a1200
 8002598:	00f42400 	.word	0x00f42400

0800259c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025a4:	2300      	movs	r3, #0
 80025a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025a8:	2300      	movs	r3, #0
 80025aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8098 	beq.w	80026ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b43      	ldr	r3, [pc, #268]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4b40      	ldr	r3, [pc, #256]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	4a3f      	ldr	r2, [pc, #252]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025d6:	4b3d      	ldr	r3, [pc, #244]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e2:	2301      	movs	r3, #1
 80025e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e6:	4b3a      	ldr	r3, [pc, #232]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a39      	ldr	r2, [pc, #228]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025f2:	f7fe fb81 	bl	8000cf8 <HAL_GetTick>
 80025f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025f8:	e009      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7fe fb7d 	bl	8000cf8 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d902      	bls.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	74fb      	strb	r3, [r7, #19]
        break;
 800260c:	e005      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800260e:	4b30      	ldr	r3, [pc, #192]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0ef      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d159      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002620:	4b2a      	ldr	r3, [pc, #168]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800262a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01e      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	d019      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800263c:	4b23      	ldr	r3, [pc, #140]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002646:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002648:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264e:	4a1f      	ldr	r2, [pc, #124]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002658:	4b1c      	ldr	r3, [pc, #112]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265e:	4a1b      	ldr	r2, [pc, #108]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002668:	4a18      	ldr	r2, [pc, #96]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d016      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe fb3d 	bl	8000cf8 <HAL_GetTick>
 800267e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002680:	e00b      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fb39 	bl	8000cf8 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d902      	bls.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	74fb      	strb	r3, [r7, #19]
            break;
 8002698:	e006      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269a:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ec      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10b      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ae:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026bc:	4903      	ldr	r1, [pc, #12]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026c4:	e008      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	74bb      	strb	r3, [r7, #18]
 80026ca:	e005      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d8:	7c7b      	ldrb	r3, [r7, #17]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d105      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026de:	4ba7      	ldr	r3, [pc, #668]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e2:	4aa6      	ldr	r2, [pc, #664]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026f6:	4ba1      	ldr	r3, [pc, #644]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fc:	f023 0203 	bic.w	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	499d      	ldr	r1, [pc, #628]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002718:	4b98      	ldr	r3, [pc, #608]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271e:	f023 020c 	bic.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4995      	ldr	r1, [pc, #596]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800273a:	4b90      	ldr	r3, [pc, #576]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002740:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	498c      	ldr	r1, [pc, #560]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800275c:	4b87      	ldr	r3, [pc, #540]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	4984      	ldr	r1, [pc, #528]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800277e:	4b7f      	ldr	r3, [pc, #508]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	497b      	ldr	r1, [pc, #492]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027a0:	4b76      	ldr	r3, [pc, #472]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	4973      	ldr	r1, [pc, #460]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c2:	4b6e      	ldr	r3, [pc, #440]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	496a      	ldr	r1, [pc, #424]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027e4:	4b65      	ldr	r3, [pc, #404]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4962      	ldr	r1, [pc, #392]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002806:	4b5d      	ldr	r3, [pc, #372]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	4959      	ldr	r1, [pc, #356]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002828:	4b54      	ldr	r3, [pc, #336]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002836:	4951      	ldr	r1, [pc, #324]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002846:	2b00      	cmp	r3, #0
 8002848:	d015      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800284a:	4b4c      	ldr	r3, [pc, #304]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002850:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	4948      	ldr	r1, [pc, #288]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002868:	d105      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800286a:	4b44      	ldr	r3, [pc, #272]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4a43      	ldr	r2, [pc, #268]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002870:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002874:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800287e:	2b00      	cmp	r3, #0
 8002880:	d015      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002882:	4b3e      	ldr	r3, [pc, #248]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002888:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	493a      	ldr	r1, [pc, #232]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028a0:	d105      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a2:	4b36      	ldr	r3, [pc, #216]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4a35      	ldr	r2, [pc, #212]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ac:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d015      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028ba:	4b30      	ldr	r3, [pc, #192]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c8:	492c      	ldr	r1, [pc, #176]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d8:	d105      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028da:	4b28      	ldr	r3, [pc, #160]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	4a27      	ldr	r2, [pc, #156]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028e4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d015      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f2:	4b22      	ldr	r3, [pc, #136]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002900:	491e      	ldr	r1, [pc, #120]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002910:	d105      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002912:	4b1a      	ldr	r3, [pc, #104]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4a19      	ldr	r2, [pc, #100]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002918:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800291c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d015      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800292a:	4b14      	ldr	r3, [pc, #80]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002930:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002938:	4910      	ldr	r1, [pc, #64]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002944:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002948:	d105      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294a:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4a0b      	ldr	r2, [pc, #44]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002950:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002954:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d018      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002968:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	4902      	ldr	r1, [pc, #8]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	e001      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800297c:	40021000 	.word	0x40021000
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002986:	d105      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002988:	4b21      	ldr	r3, [pc, #132]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a20      	ldr	r2, [pc, #128]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800298e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002992:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ae:	4918      	ldr	r1, [pc, #96]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029be:	d105      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029c0:	4b13      	ldr	r3, [pc, #76]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a12      	ldr	r2, [pc, #72]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80029da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029e6:	490a      	ldr	r1, [pc, #40]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029f6:	d105      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f8:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a04      	ldr	r2, [pc, #16]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80029fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a04:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000

08002a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e042      	b.n	8002aac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7fe f809 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2224      	movs	r2, #36	@ 0x24
 8002a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fb24 	bl	80030ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f825 	bl	8002ab4 <UART_SetConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e01b      	b.n	8002aac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fba3 	bl	80031f0 <UART_CheckIdleState>
 8002aaa:	4603      	mov	r3, r0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab8:	b08c      	sub	sp, #48	@ 0x30
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4baa      	ldr	r3, [pc, #680]	@ (8002d8c <UART_SetConfig+0x2d8>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a9f      	ldr	r2, [pc, #636]	@ (8002d90 <UART_SetConfig+0x2dc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d004      	beq.n	8002b20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002b2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3e:	f023 010f 	bic.w	r1, r3, #15
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a90      	ldr	r2, [pc, #576]	@ (8002d94 <UART_SetConfig+0x2e0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d125      	bne.n	8002ba4 <UART_SetConfig+0xf0>
 8002b58:	4b8f      	ldr	r3, [pc, #572]	@ (8002d98 <UART_SetConfig+0x2e4>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d81a      	bhi.n	8002b9c <UART_SetConfig+0xe8>
 8002b66:	a201      	add	r2, pc, #4	@ (adr r2, 8002b6c <UART_SetConfig+0xb8>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b8d 	.word	0x08002b8d
 8002b74:	08002b85 	.word	0x08002b85
 8002b78:	08002b95 	.word	0x08002b95
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b82:	e116      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002b84:	2302      	movs	r3, #2
 8002b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b8a:	e112      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b92:	e10e      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002b94:	2308      	movs	r3, #8
 8002b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b9a:	e10a      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ba2:	e106      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7c      	ldr	r2, [pc, #496]	@ (8002d9c <UART_SetConfig+0x2e8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d138      	bne.n	8002c20 <UART_SetConfig+0x16c>
 8002bae:	4b7a      	ldr	r3, [pc, #488]	@ (8002d98 <UART_SetConfig+0x2e4>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	d82d      	bhi.n	8002c18 <UART_SetConfig+0x164>
 8002bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc4 <UART_SetConfig+0x110>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002bf9 	.word	0x08002bf9
 8002bc8:	08002c19 	.word	0x08002c19
 8002bcc:	08002c19 	.word	0x08002c19
 8002bd0:	08002c19 	.word	0x08002c19
 8002bd4:	08002c09 	.word	0x08002c09
 8002bd8:	08002c19 	.word	0x08002c19
 8002bdc:	08002c19 	.word	0x08002c19
 8002be0:	08002c19 	.word	0x08002c19
 8002be4:	08002c01 	.word	0x08002c01
 8002be8:	08002c19 	.word	0x08002c19
 8002bec:	08002c19 	.word	0x08002c19
 8002bf0:	08002c19 	.word	0x08002c19
 8002bf4:	08002c11 	.word	0x08002c11
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bfe:	e0d8      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002c00:	2302      	movs	r3, #2
 8002c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c06:	e0d4      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c0e:	e0d0      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002c10:	2308      	movs	r3, #8
 8002c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c16:	e0cc      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002c18:	2310      	movs	r3, #16
 8002c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c1e:	e0c8      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a5e      	ldr	r2, [pc, #376]	@ (8002da0 <UART_SetConfig+0x2ec>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d125      	bne.n	8002c76 <UART_SetConfig+0x1c2>
 8002c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8002d98 <UART_SetConfig+0x2e4>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002c34:	2b30      	cmp	r3, #48	@ 0x30
 8002c36:	d016      	beq.n	8002c66 <UART_SetConfig+0x1b2>
 8002c38:	2b30      	cmp	r3, #48	@ 0x30
 8002c3a:	d818      	bhi.n	8002c6e <UART_SetConfig+0x1ba>
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d00a      	beq.n	8002c56 <UART_SetConfig+0x1a2>
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d814      	bhi.n	8002c6e <UART_SetConfig+0x1ba>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <UART_SetConfig+0x19a>
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d008      	beq.n	8002c5e <UART_SetConfig+0x1aa>
 8002c4c:	e00f      	b.n	8002c6e <UART_SetConfig+0x1ba>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c54:	e0ad      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002c56:	2302      	movs	r3, #2
 8002c58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c5c:	e0a9      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002c5e:	2304      	movs	r3, #4
 8002c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c64:	e0a5      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002c66:	2308      	movs	r3, #8
 8002c68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c6c:	e0a1      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002c6e:	2310      	movs	r3, #16
 8002c70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c74:	e09d      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002da4 <UART_SetConfig+0x2f0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d125      	bne.n	8002ccc <UART_SetConfig+0x218>
 8002c80:	4b45      	ldr	r3, [pc, #276]	@ (8002d98 <UART_SetConfig+0x2e4>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002c8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c8c:	d016      	beq.n	8002cbc <UART_SetConfig+0x208>
 8002c8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c90:	d818      	bhi.n	8002cc4 <UART_SetConfig+0x210>
 8002c92:	2b80      	cmp	r3, #128	@ 0x80
 8002c94:	d00a      	beq.n	8002cac <UART_SetConfig+0x1f8>
 8002c96:	2b80      	cmp	r3, #128	@ 0x80
 8002c98:	d814      	bhi.n	8002cc4 <UART_SetConfig+0x210>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <UART_SetConfig+0x1f0>
 8002c9e:	2b40      	cmp	r3, #64	@ 0x40
 8002ca0:	d008      	beq.n	8002cb4 <UART_SetConfig+0x200>
 8002ca2:	e00f      	b.n	8002cc4 <UART_SetConfig+0x210>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002caa:	e082      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002cac:	2302      	movs	r3, #2
 8002cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cb2:	e07e      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cba:	e07a      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cc2:	e076      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cca:	e072      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a35      	ldr	r2, [pc, #212]	@ (8002da8 <UART_SetConfig+0x2f4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d12a      	bne.n	8002d2c <UART_SetConfig+0x278>
 8002cd6:	4b30      	ldr	r3, [pc, #192]	@ (8002d98 <UART_SetConfig+0x2e4>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ce0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ce4:	d01a      	beq.n	8002d1c <UART_SetConfig+0x268>
 8002ce6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cea:	d81b      	bhi.n	8002d24 <UART_SetConfig+0x270>
 8002cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf0:	d00c      	beq.n	8002d0c <UART_SetConfig+0x258>
 8002cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf6:	d815      	bhi.n	8002d24 <UART_SetConfig+0x270>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <UART_SetConfig+0x250>
 8002cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d00:	d008      	beq.n	8002d14 <UART_SetConfig+0x260>
 8002d02:	e00f      	b.n	8002d24 <UART_SetConfig+0x270>
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d0a:	e052      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d12:	e04e      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002d14:	2304      	movs	r3, #4
 8002d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d1a:	e04a      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d22:	e046      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002d24:	2310      	movs	r3, #16
 8002d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d2a:	e042      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a17      	ldr	r2, [pc, #92]	@ (8002d90 <UART_SetConfig+0x2dc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d13a      	bne.n	8002dac <UART_SetConfig+0x2f8>
 8002d36:	4b18      	ldr	r3, [pc, #96]	@ (8002d98 <UART_SetConfig+0x2e4>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d44:	d01a      	beq.n	8002d7c <UART_SetConfig+0x2c8>
 8002d46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d4a:	d81b      	bhi.n	8002d84 <UART_SetConfig+0x2d0>
 8002d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d50:	d00c      	beq.n	8002d6c <UART_SetConfig+0x2b8>
 8002d52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d56:	d815      	bhi.n	8002d84 <UART_SetConfig+0x2d0>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <UART_SetConfig+0x2b0>
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d60:	d008      	beq.n	8002d74 <UART_SetConfig+0x2c0>
 8002d62:	e00f      	b.n	8002d84 <UART_SetConfig+0x2d0>
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d6a:	e022      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d72:	e01e      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002d74:	2304      	movs	r3, #4
 8002d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d7a:	e01a      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d82:	e016      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002d84:	2310      	movs	r3, #16
 8002d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d8a:	e012      	b.n	8002db2 <UART_SetConfig+0x2fe>
 8002d8c:	cfff69f3 	.word	0xcfff69f3
 8002d90:	40008000 	.word	0x40008000
 8002d94:	40013800 	.word	0x40013800
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40004400 	.word	0x40004400
 8002da0:	40004800 	.word	0x40004800
 8002da4:	40004c00 	.word	0x40004c00
 8002da8:	40005000 	.word	0x40005000
 8002dac:	2310      	movs	r3, #16
 8002dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4aae      	ldr	r2, [pc, #696]	@ (8003070 <UART_SetConfig+0x5bc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	f040 8097 	bne.w	8002eec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d823      	bhi.n	8002e0e <UART_SetConfig+0x35a>
 8002dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dcc <UART_SetConfig+0x318>)
 8002dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dcc:	08002df1 	.word	0x08002df1
 8002dd0:	08002e0f 	.word	0x08002e0f
 8002dd4:	08002df9 	.word	0x08002df9
 8002dd8:	08002e0f 	.word	0x08002e0f
 8002ddc:	08002dff 	.word	0x08002dff
 8002de0:	08002e0f 	.word	0x08002e0f
 8002de4:	08002e0f 	.word	0x08002e0f
 8002de8:	08002e0f 	.word	0x08002e0f
 8002dec:	08002e07 	.word	0x08002e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df0:	f7ff fb62 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8002df4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002df6:	e010      	b.n	8002e1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002df8:	4b9e      	ldr	r3, [pc, #632]	@ (8003074 <UART_SetConfig+0x5c0>)
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dfc:	e00d      	b.n	8002e1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dfe:	f7ff faed 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002e02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e04:	e009      	b.n	8002e1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e0c:	e005      	b.n	8002e1a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8130 	beq.w	8003082 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	4a94      	ldr	r2, [pc, #592]	@ (8003078 <UART_SetConfig+0x5c4>)
 8002e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d305      	bcc.n	8002e52 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d903      	bls.n	8002e5a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e58:	e113      	b.n	8003082 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	60fa      	str	r2, [r7, #12]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	4a84      	ldr	r2, [pc, #528]	@ (8003078 <UART_SetConfig+0x5c4>)
 8002e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2200      	movs	r2, #0
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e7c:	f7fd f9d0 	bl	8000220 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	020b      	lsls	r3, r1, #8
 8002e92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e96:	0202      	lsls	r2, r0, #8
 8002e98:	6979      	ldr	r1, [r7, #20]
 8002e9a:	6849      	ldr	r1, [r1, #4]
 8002e9c:	0849      	lsrs	r1, r1, #1
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	4605      	mov	r5, r0
 8002ea4:	eb12 0804 	adds.w	r8, r2, r4
 8002ea8:	eb43 0905 	adc.w	r9, r3, r5
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	469a      	mov	sl, r3
 8002eb4:	4693      	mov	fp, r2
 8002eb6:	4652      	mov	r2, sl
 8002eb8:	465b      	mov	r3, fp
 8002eba:	4640      	mov	r0, r8
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	f7fd f9af 	bl	8000220 <__aeabi_uldivmod>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ed0:	d308      	bcc.n	8002ee4 <UART_SetConfig+0x430>
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ed8:	d204      	bcs.n	8002ee4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a3a      	ldr	r2, [r7, #32]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	e0ce      	b.n	8003082 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002eea:	e0ca      	b.n	8003082 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ef4:	d166      	bne.n	8002fc4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d827      	bhi.n	8002f4e <UART_SetConfig+0x49a>
 8002efe:	a201      	add	r2, pc, #4	@ (adr r2, 8002f04 <UART_SetConfig+0x450>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f29 	.word	0x08002f29
 8002f08:	08002f31 	.word	0x08002f31
 8002f0c:	08002f39 	.word	0x08002f39
 8002f10:	08002f4f 	.word	0x08002f4f
 8002f14:	08002f3f 	.word	0x08002f3f
 8002f18:	08002f4f 	.word	0x08002f4f
 8002f1c:	08002f4f 	.word	0x08002f4f
 8002f20:	08002f4f 	.word	0x08002f4f
 8002f24:	08002f47 	.word	0x08002f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f28:	f7ff fac6 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8002f2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f2e:	e014      	b.n	8002f5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f30:	f7ff fad8 	bl	80024e4 <HAL_RCC_GetPCLK2Freq>
 8002f34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f36:	e010      	b.n	8002f5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f38:	4b4e      	ldr	r3, [pc, #312]	@ (8003074 <UART_SetConfig+0x5c0>)
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f3c:	e00d      	b.n	8002f5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f3e:	f7ff fa4d 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002f42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f44:	e009      	b.n	8002f5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f4c:	e005      	b.n	8002f5a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8090 	beq.w	8003082 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	4a44      	ldr	r2, [pc, #272]	@ (8003078 <UART_SetConfig+0x5c4>)
 8002f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f74:	005a      	lsls	r2, r3, #1
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	441a      	add	r2, r3
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d916      	bls.n	8002fbc <UART_SetConfig+0x508>
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f94:	d212      	bcs.n	8002fbc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f023 030f 	bic.w	r3, r3, #15
 8002f9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	8bfb      	ldrh	r3, [r7, #30]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	8bfa      	ldrh	r2, [r7, #30]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	e062      	b.n	8003082 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002fc2:	e05e      	b.n	8003082 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fc4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d828      	bhi.n	800301e <UART_SetConfig+0x56a>
 8002fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd4 <UART_SetConfig+0x520>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08002ff9 	.word	0x08002ff9
 8002fd8:	08003001 	.word	0x08003001
 8002fdc:	08003009 	.word	0x08003009
 8002fe0:	0800301f 	.word	0x0800301f
 8002fe4:	0800300f 	.word	0x0800300f
 8002fe8:	0800301f 	.word	0x0800301f
 8002fec:	0800301f 	.word	0x0800301f
 8002ff0:	0800301f 	.word	0x0800301f
 8002ff4:	08003017 	.word	0x08003017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff8:	f7ff fa5e 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8002ffc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ffe:	e014      	b.n	800302a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003000:	f7ff fa70 	bl	80024e4 <HAL_RCC_GetPCLK2Freq>
 8003004:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003006:	e010      	b.n	800302a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003008:	4b1a      	ldr	r3, [pc, #104]	@ (8003074 <UART_SetConfig+0x5c0>)
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800300c:	e00d      	b.n	800302a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300e:	f7ff f9e5 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8003012:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003014:	e009      	b.n	800302a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800301c:	e005      	b.n	800302a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003028:	bf00      	nop
    }

    if (pclk != 0U)
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	d028      	beq.n	8003082 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	4a10      	ldr	r2, [pc, #64]	@ (8003078 <UART_SetConfig+0x5c4>)
 8003036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800303a:	461a      	mov	r2, r3
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	441a      	add	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	2b0f      	cmp	r3, #15
 8003058:	d910      	bls.n	800307c <UART_SetConfig+0x5c8>
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003060:	d20c      	bcs.n	800307c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	b29a      	uxth	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60da      	str	r2, [r3, #12]
 800306c:	e009      	b.n	8003082 <UART_SetConfig+0x5ce>
 800306e:	bf00      	nop
 8003070:	40008000 	.word	0x40008000
 8003074:	00f42400 	.word	0x00f42400
 8003078:	08006570 	.word	0x08006570
      }
      else
      {
        ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2201      	movs	r2, #1
 8003086:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2201      	movs	r2, #1
 800308e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2200      	movs	r2, #0
 8003096:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2200      	movs	r2, #0
 800309c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800309e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3730      	adds	r7, #48	@ 0x30
 80030a6:	46bd      	mov	sp, r7
 80030a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080030ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01a      	beq.n	80031c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031aa:	d10a      	bne.n	80031c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
  }
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b098      	sub	sp, #96	@ 0x60
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003200:	f7fd fd7a 	bl	8000cf8 <HAL_GetTick>
 8003204:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b08      	cmp	r3, #8
 8003212:	d12f      	bne.n	8003274 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003214:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321c:	2200      	movs	r2, #0
 800321e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f88e 	bl	8003344 <UART_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d022      	beq.n	8003274 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800323c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003242:	653b      	str	r3, [r7, #80]	@ 0x50
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800324c:	647b      	str	r3, [r7, #68]	@ 0x44
 800324e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003252:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800325a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e6      	bne.n	800322e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e063      	b.n	800333c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b04      	cmp	r3, #4
 8003280:	d149      	bne.n	8003316 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003282:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800328a:	2200      	movs	r2, #0
 800328c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f857 	bl	8003344 <UART_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d03c      	beq.n	8003316 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	623b      	str	r3, [r7, #32]
   return(result);
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80032bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e6      	bne.n	800329c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3308      	adds	r3, #8
 80032d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3308      	adds	r3, #8
 80032ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032ee:	61fa      	str	r2, [r7, #28]
 80032f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	69b9      	ldr	r1, [r7, #24]
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	617b      	str	r3, [r7, #20]
   return(result);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e5      	bne.n	80032ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e012      	b.n	800333c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3758      	adds	r7, #88	@ 0x58
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003354:	e04f      	b.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d04b      	beq.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335e:	f7fd fccb 	bl	8000cf8 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	429a      	cmp	r2, r3
 800336c:	d302      	bcc.n	8003374 <UART_WaitOnFlagUntilTimeout+0x30>
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e04e      	b.n	8003416 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d037      	beq.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b80      	cmp	r3, #128	@ 0x80
 800338a:	d034      	beq.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b40      	cmp	r3, #64	@ 0x40
 8003390:	d031      	beq.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d110      	bne.n	80033c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2208      	movs	r2, #8
 80033a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f838 	bl	800341e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2208      	movs	r2, #8
 80033b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e029      	b.n	8003416 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033d0:	d111      	bne.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f81e 	bl	800341e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e00f      	b.n	8003416 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4013      	ands	r3, r2
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	429a      	cmp	r2, r3
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	429a      	cmp	r2, r3
 8003412:	d0a0      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800341e:	b480      	push	{r7}
 8003420:	b095      	sub	sp, #84	@ 0x54
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003436:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800343a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003444:	643b      	str	r3, [r7, #64]	@ 0x40
 8003446:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800344a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e6      	bne.n	8003426 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3308      	adds	r3, #8
 800345e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	61fb      	str	r3, [r7, #28]
   return(result);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3308      	adds	r3, #8
 800347a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800347c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e3      	bne.n	8003458 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d118      	bne.n	80034ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f023 0310 	bic.w	r3, r3, #16
 80034ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6979      	ldr	r1, [r7, #20]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	613b      	str	r3, [r7, #16]
   return(result);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e6      	bne.n	8003498 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80034de:	bf00      	nop
 80034e0:	3754      	adds	r7, #84	@ 0x54
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_UARTEx_DisableFifoMode+0x16>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e027      	b.n	8003550 <HAL_UARTEx_DisableFifoMode+0x66>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	@ 0x24
 800350c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800352e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003570:	2302      	movs	r3, #2
 8003572:	e02d      	b.n	80035d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2224      	movs	r2, #36	@ 0x24
 8003580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f84f 	bl	8003654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e02d      	b.n	800364c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	@ 0x24
 80035fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f811 	bl	8003654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003660:	2b00      	cmp	r3, #0
 8003662:	d108      	bne.n	8003676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003674:	e031      	b.n	80036da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003676:	2308      	movs	r3, #8
 8003678:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800367a:	2308      	movs	r3, #8
 800367c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	0e5b      	lsrs	r3, r3, #25
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	0f5b      	lsrs	r3, r3, #29
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800369e:	7bbb      	ldrb	r3, [r7, #14]
 80036a0:	7b3a      	ldrb	r2, [r7, #12]
 80036a2:	4911      	ldr	r1, [pc, #68]	@ (80036e8 <UARTEx_SetNbDataToProcess+0x94>)
 80036a4:	5c8a      	ldrb	r2, [r1, r2]
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80036aa:	7b3a      	ldrb	r2, [r7, #12]
 80036ac:	490f      	ldr	r1, [pc, #60]	@ (80036ec <UARTEx_SetNbDataToProcess+0x98>)
 80036ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	7b7a      	ldrb	r2, [r7, #13]
 80036c0:	4909      	ldr	r1, [pc, #36]	@ (80036e8 <UARTEx_SetNbDataToProcess+0x94>)
 80036c2:	5c8a      	ldrb	r2, [r1, r2]
 80036c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80036c8:	7b7a      	ldrb	r2, [r7, #13]
 80036ca:	4908      	ldr	r1, [pc, #32]	@ (80036ec <UARTEx_SetNbDataToProcess+0x98>)
 80036cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	08006588 	.word	0x08006588
 80036ec:	08006590 	.word	0x08006590

080036f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80036f8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80036fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	b29b      	uxth	r3, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	b29b      	uxth	r3, r3
 800370e:	4013      	ands	r3, r2
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <__NVIC_SetPriority>:
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	6039      	str	r1, [r7, #0]
 800376e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003774:	2b00      	cmp	r3, #0
 8003776:	db0a      	blt.n	800378e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	b2da      	uxtb	r2, r3
 800377c:	490c      	ldr	r1, [pc, #48]	@ (80037b0 <__NVIC_SetPriority+0x4c>)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	0112      	lsls	r2, r2, #4
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	440b      	add	r3, r1
 8003788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800378c:	e00a      	b.n	80037a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	4908      	ldr	r1, [pc, #32]	@ (80037b4 <__NVIC_SetPriority+0x50>)
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	3b04      	subs	r3, #4
 800379c:	0112      	lsls	r2, r2, #4
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	440b      	add	r3, r1
 80037a2:	761a      	strb	r2, [r3, #24]
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000e100 	.word	0xe000e100
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80037bc:	2100      	movs	r1, #0
 80037be:	f06f 0004 	mvn.w	r0, #4
 80037c2:	f7ff ffcf 	bl	8003764 <__NVIC_SetPriority>
#endif
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d2:	f3ef 8305 	mrs	r3, IPSR
 80037d6:	603b      	str	r3, [r7, #0]
  return(result);
 80037d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80037de:	f06f 0305 	mvn.w	r3, #5
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	e00c      	b.n	8003800 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <osKernelInitialize+0x44>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d105      	bne.n	80037fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037ee:	4b08      	ldr	r3, [pc, #32]	@ (8003810 <osKernelInitialize+0x44>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	e002      	b.n	8003800 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003800:	687b      	ldr	r3, [r7, #4]
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	200004ac 	.word	0x200004ac

08003814 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800381a:	f3ef 8305 	mrs	r3, IPSR
 800381e:	603b      	str	r3, [r7, #0]
  return(result);
 8003820:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003826:	f06f 0305 	mvn.w	r3, #5
 800382a:	607b      	str	r3, [r7, #4]
 800382c:	e010      	b.n	8003850 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800382e:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <osKernelStart+0x48>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d109      	bne.n	800384a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003836:	f7ff ffbf 	bl	80037b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800383a:	4b08      	ldr	r3, [pc, #32]	@ (800385c <osKernelStart+0x48>)
 800383c:	2202      	movs	r2, #2
 800383e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003840:	f001 f892 	bl	8004968 <vTaskStartScheduler>
      stat = osOK;
 8003844:	2300      	movs	r3, #0
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	e002      	b.n	8003850 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003850:	687b      	ldr	r3, [r7, #4]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	200004ac 	.word	0x200004ac

08003860 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b08e      	sub	sp, #56	@ 0x38
 8003864:	af04      	add	r7, sp, #16
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003870:	f3ef 8305 	mrs	r3, IPSR
 8003874:	617b      	str	r3, [r7, #20]
  return(result);
 8003876:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003878:	2b00      	cmp	r3, #0
 800387a:	d17e      	bne.n	800397a <osThreadNew+0x11a>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d07b      	beq.n	800397a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003882:	2380      	movs	r3, #128	@ 0x80
 8003884:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003886:	2318      	movs	r3, #24
 8003888:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
 8003892:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d045      	beq.n	8003926 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <osThreadNew+0x48>
        name = attr->name;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <osThreadNew+0x6e>
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2b38      	cmp	r3, #56	@ 0x38
 80038c0:	d805      	bhi.n	80038ce <osThreadNew+0x6e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <osThreadNew+0x72>
        return (NULL);
 80038ce:	2300      	movs	r3, #0
 80038d0:	e054      	b.n	800397c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00e      	beq.n	8003908 <osThreadNew+0xa8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2ba7      	cmp	r3, #167	@ 0xa7
 80038f0:	d90a      	bls.n	8003908 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d006      	beq.n	8003908 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <osThreadNew+0xa8>
        mem = 1;
 8003902:	2301      	movs	r3, #1
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	e010      	b.n	800392a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10c      	bne.n	800392a <osThreadNew+0xca>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d108      	bne.n	800392a <osThreadNew+0xca>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <osThreadNew+0xca>
          mem = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	e001      	b.n	800392a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d110      	bne.n	8003952 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003938:	9202      	str	r2, [sp, #8]
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	6a3a      	ldr	r2, [r7, #32]
 8003944:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fe1a 	bl	8004580 <xTaskCreateStatic>
 800394c:	4603      	mov	r3, r0
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	e013      	b.n	800397a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d110      	bne.n	800397a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	b29a      	uxth	r2, r3
 800395c:	f107 0310 	add.w	r3, r7, #16
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fe68 	bl	8004640 <xTaskCreate>
 8003970:	4603      	mov	r3, r0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d001      	beq.n	800397a <osThreadNew+0x11a>
            hTask = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800397a:	693b      	ldr	r3, [r7, #16]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3728      	adds	r7, #40	@ 0x28
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800398c:	f3ef 8305 	mrs	r3, IPSR
 8003990:	60bb      	str	r3, [r7, #8]
  return(result);
 8003992:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <osDelay+0x1c>
    stat = osErrorISR;
 8003998:	f06f 0305 	mvn.w	r3, #5
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	e007      	b.n	80039b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 ffa6 	bl	80048fc <vTaskDelay>
    }
  }

  return (stat);
 80039b0:	68fb      	ldr	r3, [r7, #12]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a07      	ldr	r2, [pc, #28]	@ (80039e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80039cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4a06      	ldr	r2, [pc, #24]	@ (80039ec <vApplicationGetIdleTaskMemory+0x30>)
 80039d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2280      	movs	r2, #128	@ 0x80
 80039d8:	601a      	str	r2, [r3, #0]
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	200004b0 	.word	0x200004b0
 80039ec:	20000558 	.word	0x20000558

080039f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a07      	ldr	r2, [pc, #28]	@ (8003a1c <vApplicationGetTimerTaskMemory+0x2c>)
 8003a00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4a06      	ldr	r2, [pc, #24]	@ (8003a20 <vApplicationGetTimerTaskMemory+0x30>)
 8003a06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a0e:	601a      	str	r2, [r3, #0]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	20000758 	.word	0x20000758
 8003a20:	20000800 	.word	0x20000800

08003a24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f103 0208 	add.w	r2, r3, #8
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f103 0208 	add.w	r2, r3, #8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f103 0208 	add.w	r2, r3, #8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d103      	bne.n	8003ae6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e00c      	b.n	8003b00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e002      	b.n	8003af4 <vListInsert+0x2e>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d2f6      	bcs.n	8003aee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	601a      	str	r2, [r3, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6892      	ldr	r2, [r2, #8]
 8003b4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6852      	ldr	r2, [r2, #4]
 8003b58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d103      	bne.n	8003b6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	1e5a      	subs	r2, r3, #1
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003bb8:	f002 f8a6 	bl	8005d08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	441a      	add	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be8:	3b01      	subs	r3, #1
 8003bea:	68f9      	ldr	r1, [r7, #12]
 8003bec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	441a      	add	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	22ff      	movs	r2, #255	@ 0xff
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	22ff      	movs	r2, #255	@ 0xff
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d114      	bne.n	8003c38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01a      	beq.n	8003c4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3310      	adds	r3, #16
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 f942 	bl	8004ea4 <xTaskRemoveFromEventList>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d012      	beq.n	8003c4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <xQueueGenericReset+0xd0>)
 8003c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	e009      	b.n	8003c4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fef1 	bl	8003a24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3324      	adds	r3, #36	@ 0x24
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff feec 	bl	8003a24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c4c:	f002 f88e 	bl	8005d6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c50:	2301      	movs	r3, #1
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	e000ed04 	.word	0xe000ed04

08003c60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08e      	sub	sp, #56	@ 0x38
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10b      	bne.n	8003c8c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	e7fd      	b.n	8003ca6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <xQueueGenericCreateStatic+0x56>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <xQueueGenericCreateStatic+0x5a>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <xQueueGenericCreateStatic+0x5c>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	623b      	str	r3, [r7, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <xQueueGenericCreateStatic+0x84>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <xQueueGenericCreateStatic+0x88>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <xQueueGenericCreateStatic+0x8a>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10b      	bne.n	8003d06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	61fb      	str	r3, [r7, #28]
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	e7fd      	b.n	8003d02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d06:	2350      	movs	r3, #80	@ 0x50
 8003d08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b50      	cmp	r3, #80	@ 0x50
 8003d0e:	d00b      	beq.n	8003d28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	61bb      	str	r3, [r7, #24]
}
 8003d22:	bf00      	nop
 8003d24:	bf00      	nop
 8003d26:	e7fd      	b.n	8003d24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f805 	bl	8003d5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3730      	adds	r7, #48	@ 0x30
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	e002      	b.n	8003d7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d88:	2101      	movs	r1, #1
 8003d8a:	69b8      	ldr	r0, [r7, #24]
 8003d8c:	f7ff fefe 	bl	8003b8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08e      	sub	sp, #56	@ 0x38
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10b      	bne.n	8003dd4 <xQueueGenericSend+0x34>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003dce:	bf00      	nop
 8003dd0:	bf00      	nop
 8003dd2:	e7fd      	b.n	8003dd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <xQueueGenericSend+0x42>
 8003dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <xQueueGenericSend+0x46>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <xQueueGenericSend+0x48>
 8003de6:	2300      	movs	r3, #0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10b      	bne.n	8003e04 <xQueueGenericSend+0x64>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d103      	bne.n	8003e12 <xQueueGenericSend+0x72>
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <xQueueGenericSend+0x76>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <xQueueGenericSend+0x78>
 8003e16:	2300      	movs	r3, #0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <xQueueGenericSend+0x94>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	623b      	str	r3, [r7, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
 8003e32:	e7fd      	b.n	8003e30 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e34:	f001 f9fc 	bl	8005230 <xTaskGetSchedulerState>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d102      	bne.n	8003e44 <xQueueGenericSend+0xa4>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <xQueueGenericSend+0xa8>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <xQueueGenericSend+0xaa>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <xQueueGenericSend+0xc6>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	61fb      	str	r3, [r7, #28]
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	e7fd      	b.n	8003e62 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e66:	f001 ff4f 	bl	8005d08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d302      	bcc.n	8003e7c <xQueueGenericSend+0xdc>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d129      	bne.n	8003ed0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e82:	f000 fa0f 	bl	80042a4 <prvCopyDataToQueue>
 8003e86:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d010      	beq.n	8003eb2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e92:	3324      	adds	r3, #36	@ 0x24
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 f805 	bl	8004ea4 <xTaskRemoveFromEventList>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d013      	beq.n	8003ec8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8003fa0 <xQueueGenericSend+0x200>)
 8003ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	e00a      	b.n	8003ec8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d007      	beq.n	8003ec8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003eb8:	4b39      	ldr	r3, [pc, #228]	@ (8003fa0 <xQueueGenericSend+0x200>)
 8003eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ec8:	f001 ff50 	bl	8005d6c <vPortExitCritical>
				return pdPASS;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e063      	b.n	8003f98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ed6:	f001 ff49 	bl	8005d6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e05c      	b.n	8003f98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ee4:	f107 0314 	add.w	r3, r7, #20
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f001 f83f 	bl	8004f6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ef2:	f001 ff3b 	bl	8005d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ef6:	f000 fda7 	bl	8004a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003efa:	f001 ff05 	bl	8005d08 <vPortEnterCritical>
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d103      	bne.n	8003f14 <xQueueGenericSend+0x174>
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f1a:	b25b      	sxtb	r3, r3
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d103      	bne.n	8003f2a <xQueueGenericSend+0x18a>
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f2a:	f001 ff1f 	bl	8005d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f2e:	1d3a      	adds	r2, r7, #4
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 f82e 	bl	8004f98 <xTaskCheckForTimeOut>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d124      	bne.n	8003f8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f44:	f000 faa6 	bl	8004494 <prvIsQueueFull>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d018      	beq.n	8003f80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f50:	3310      	adds	r3, #16
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 ff52 	bl	8004e00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f5e:	f000 fa31 	bl	80043c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f62:	f000 fd7f 	bl	8004a64 <xTaskResumeAll>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f47f af7c 	bne.w	8003e66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa0 <xQueueGenericSend+0x200>)
 8003f70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	e772      	b.n	8003e66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f82:	f000 fa1f 	bl	80043c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f86:	f000 fd6d 	bl	8004a64 <xTaskResumeAll>
 8003f8a:	e76c      	b.n	8003e66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f8e:	f000 fa19 	bl	80043c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f92:	f000 fd67 	bl	8004a64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3738      	adds	r7, #56	@ 0x38
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b090      	sub	sp, #64	@ 0x40
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <xQueueGenericSendFromISR+0x3e>
 8003fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <xQueueGenericSendFromISR+0x42>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <xQueueGenericSendFromISR+0x44>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d103      	bne.n	8004012 <xQueueGenericSendFromISR+0x6e>
 800400a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <xQueueGenericSendFromISR+0x72>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <xQueueGenericSendFromISR+0x74>
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	623b      	str	r3, [r7, #32]
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004034:	f001 ff48 	bl	8005ec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004038:	f3ef 8211 	mrs	r2, BASEPRI
 800403c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	61fa      	str	r2, [r7, #28]
 800404e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004050:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004052:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405c:	429a      	cmp	r2, r3
 800405e:	d302      	bcc.n	8004066 <xQueueGenericSendFromISR+0xc2>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d12f      	bne.n	80040c6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004068:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800406c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004074:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800407c:	f000 f912 	bl	80042a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004080:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d112      	bne.n	80040b0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004094:	3324      	adds	r3, #36	@ 0x24
 8004096:	4618      	mov	r0, r3
 8004098:	f000 ff04 	bl	8004ea4 <xTaskRemoveFromEventList>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00e      	beq.n	80040c0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e007      	b.n	80040c0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80040b4:	3301      	adds	r3, #1
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	b25a      	sxtb	r2, r3
 80040ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80040c0:	2301      	movs	r3, #1
 80040c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80040c4:	e001      	b.n	80040ca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040cc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3740      	adds	r7, #64	@ 0x40
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	@ 0x30
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <xQueueReceive+0x32>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	623b      	str	r3, [r7, #32]
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	e7fd      	b.n	800410e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d103      	bne.n	8004120 <xQueueReceive+0x40>
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <xQueueReceive+0x44>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <xQueueReceive+0x46>
 8004124:	2300      	movs	r3, #0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <xQueueReceive+0x62>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	61fb      	str	r3, [r7, #28]
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	e7fd      	b.n	800413e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004142:	f001 f875 	bl	8005230 <xTaskGetSchedulerState>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <xQueueReceive+0x72>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <xQueueReceive+0x76>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <xQueueReceive+0x78>
 8004156:	2300      	movs	r3, #0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <xQueueReceive+0x94>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	61bb      	str	r3, [r7, #24]
}
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004174:	f001 fdc8 	bl	8005d08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01f      	beq.n	80041c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004188:	f000 f8f6 	bl	8004378 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	1e5a      	subs	r2, r3, #1
 8004190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004192:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00f      	beq.n	80041bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800419c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419e:	3310      	adds	r3, #16
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fe7f 	bl	8004ea4 <xTaskRemoveFromEventList>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041ac:	4b3c      	ldr	r3, [pc, #240]	@ (80042a0 <xQueueReceive+0x1c0>)
 80041ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041bc:	f001 fdd6 	bl	8005d6c <vPortExitCritical>
				return pdPASS;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e069      	b.n	8004298 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d103      	bne.n	80041d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041ca:	f001 fdcf 	bl	8005d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e062      	b.n	8004298 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041d8:	f107 0310 	add.w	r3, r7, #16
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fec5 	bl	8004f6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041e2:	2301      	movs	r3, #1
 80041e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041e6:	f001 fdc1 	bl	8005d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ea:	f000 fc2d 	bl	8004a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041ee:	f001 fd8b 	bl	8005d08 <vPortEnterCritical>
 80041f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041f8:	b25b      	sxtb	r3, r3
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d103      	bne.n	8004208 <xQueueReceive+0x128>
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800420e:	b25b      	sxtb	r3, r3
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d103      	bne.n	800421e <xQueueReceive+0x13e>
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800421e:	f001 fda5 	bl	8005d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004222:	1d3a      	adds	r2, r7, #4
 8004224:	f107 0310 	add.w	r3, r7, #16
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f000 feb4 	bl	8004f98 <xTaskCheckForTimeOut>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d123      	bne.n	800427e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004238:	f000 f916 	bl	8004468 <prvIsQueueEmpty>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	3324      	adds	r3, #36	@ 0x24
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fdd8 	bl	8004e00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004250:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004252:	f000 f8b7 	bl	80043c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004256:	f000 fc05 	bl	8004a64 <xTaskResumeAll>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d189      	bne.n	8004174 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004260:	4b0f      	ldr	r3, [pc, #60]	@ (80042a0 <xQueueReceive+0x1c0>)
 8004262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	e780      	b.n	8004174 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004274:	f000 f8a6 	bl	80043c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004278:	f000 fbf4 	bl	8004a64 <xTaskResumeAll>
 800427c:	e77a      	b.n	8004174 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800427e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004280:	f000 f8a0 	bl	80043c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004284:	f000 fbee 	bl	8004a64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004288:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800428a:	f000 f8ed 	bl	8004468 <prvIsQueueEmpty>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	f43f af6f 	beq.w	8004174 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004296:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004298:	4618      	mov	r0, r3
 800429a:	3730      	adds	r7, #48	@ 0x30
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	e000ed04 	.word	0xe000ed04

080042a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10d      	bne.n	80042de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d14d      	bne.n	8004366 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 ffcc 	bl	800526c <xTaskPriorityDisinherit>
 80042d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	e043      	b.n	8004366 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d119      	bne.n	8004318 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6858      	ldr	r0, [r3, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	461a      	mov	r2, r3
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	f002 f89e 	bl	8006430 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	441a      	add	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	d32b      	bcc.n	8004366 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	605a      	str	r2, [r3, #4]
 8004316:	e026      	b.n	8004366 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68d8      	ldr	r0, [r3, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	461a      	mov	r2, r3
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	f002 f884 	bl	8006430 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	425b      	negs	r3, r3
 8004332:	441a      	add	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d207      	bcs.n	8004354 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	425b      	negs	r3, r3
 800434e:	441a      	add	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d105      	bne.n	8004366 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	3b01      	subs	r3, #1
 8004364:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800436e:	697b      	ldr	r3, [r7, #20]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d018      	beq.n	80043bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	441a      	add	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d303      	bcc.n	80043ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68d9      	ldr	r1, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	461a      	mov	r2, r3
 80043b6:	6838      	ldr	r0, [r7, #0]
 80043b8:	f002 f83a 	bl	8006430 <memcpy>
	}
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043cc:	f001 fc9c 	bl	8005d08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043d8:	e011      	b.n	80043fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d012      	beq.n	8004408 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3324      	adds	r3, #36	@ 0x24
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fd5c 	bl	8004ea4 <xTaskRemoveFromEventList>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043f2:	f000 fe35 	bl	8005060 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004402:	2b00      	cmp	r3, #0
 8004404:	dce9      	bgt.n	80043da <prvUnlockQueue+0x16>
 8004406:	e000      	b.n	800440a <prvUnlockQueue+0x46>
					break;
 8004408:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	22ff      	movs	r2, #255	@ 0xff
 800440e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004412:	f001 fcab 	bl	8005d6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004416:	f001 fc77 	bl	8005d08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004420:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004422:	e011      	b.n	8004448 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3310      	adds	r3, #16
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fd37 	bl	8004ea4 <xTaskRemoveFromEventList>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800443c:	f000 fe10 	bl	8005060 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004440:	7bbb      	ldrb	r3, [r7, #14]
 8004442:	3b01      	subs	r3, #1
 8004444:	b2db      	uxtb	r3, r3
 8004446:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800444c:	2b00      	cmp	r3, #0
 800444e:	dce9      	bgt.n	8004424 <prvUnlockQueue+0x60>
 8004450:	e000      	b.n	8004454 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004452:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	22ff      	movs	r2, #255	@ 0xff
 8004458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800445c:	f001 fc86 	bl	8005d6c <vPortExitCritical>
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004470:	f001 fc4a 	bl	8005d08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800447c:	2301      	movs	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e001      	b.n	8004486 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004486:	f001 fc71 	bl	8005d6c <vPortExitCritical>

	return xReturn;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800449c:	f001 fc34 	bl	8005d08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d102      	bne.n	80044b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044ac:	2301      	movs	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e001      	b.n	80044b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044b6:	f001 fc59 	bl	8005d6c <vPortExitCritical>

	return xReturn;
 80044ba:	68fb      	ldr	r3, [r7, #12]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e014      	b.n	80044fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004514 <vQueueAddToRegistry+0x50>)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044e0:	490c      	ldr	r1, [pc, #48]	@ (8004514 <vQueueAddToRegistry+0x50>)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004514 <vQueueAddToRegistry+0x50>)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80044f6:	e006      	b.n	8004506 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3301      	adds	r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b07      	cmp	r3, #7
 8004502:	d9e7      	bls.n	80044d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000c00 	.word	0x20000c00

08004518 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004528:	f001 fbee 	bl	8005d08 <vPortEnterCritical>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004532:	b25b      	sxtb	r3, r3
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d103      	bne.n	8004542 <vQueueWaitForMessageRestricted+0x2a>
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004548:	b25b      	sxtb	r3, r3
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d103      	bne.n	8004558 <vQueueWaitForMessageRestricted+0x40>
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004558:	f001 fc08 	bl	8005d6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	2b00      	cmp	r3, #0
 8004562:	d106      	bne.n	8004572 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	3324      	adds	r3, #36	@ 0x24
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fc6d 	bl	8004e4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004572:	6978      	ldr	r0, [r7, #20]
 8004574:	f7ff ff26 	bl	80043c4 <prvUnlockQueue>
	}
 8004578:	bf00      	nop
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08e      	sub	sp, #56	@ 0x38
 8004584:	af04      	add	r7, sp, #16
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800458e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	623b      	str	r3, [r7, #32]
}
 80045a6:	bf00      	nop
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80045ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10b      	bne.n	80045ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	61fb      	str	r3, [r7, #28]
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	e7fd      	b.n	80045c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045ca:	23a8      	movs	r3, #168	@ 0xa8
 80045cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2ba8      	cmp	r3, #168	@ 0xa8
 80045d2:	d00b      	beq.n	80045ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	61bb      	str	r3, [r7, #24]
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01e      	beq.n	8004632 <xTaskCreateStatic+0xb2>
 80045f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01b      	beq.n	8004632 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	2202      	movs	r2, #2
 8004608:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800460c:	2300      	movs	r3, #0
 800460e:	9303      	str	r3, [sp, #12]
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	9302      	str	r3, [sp, #8]
 8004614:	f107 0314 	add.w	r3, r7, #20
 8004618:	9301      	str	r3, [sp, #4]
 800461a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f851 	bl	80046cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800462a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800462c:	f000 f8f6 	bl	800481c <prvAddNewTaskToReadyList>
 8004630:	e001      	b.n	8004636 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004636:	697b      	ldr	r3, [r7, #20]
	}
 8004638:	4618      	mov	r0, r3
 800463a:	3728      	adds	r7, #40	@ 0x28
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	@ 0x30
 8004644:	af04      	add	r7, sp, #16
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004650:	88fb      	ldrh	r3, [r7, #6]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4618      	mov	r0, r3
 8004656:	f001 fc79 	bl	8005f4c <pvPortMalloc>
 800465a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00e      	beq.n	8004680 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004662:	20a8      	movs	r0, #168	@ 0xa8
 8004664:	f001 fc72 	bl	8005f4c <pvPortMalloc>
 8004668:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	631a      	str	r2, [r3, #48]	@ 0x30
 8004676:	e005      	b.n	8004684 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004678:	6978      	ldr	r0, [r7, #20]
 800467a:	f001 fd35 	bl	80060e8 <vPortFree>
 800467e:	e001      	b.n	8004684 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d017      	beq.n	80046ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004692:	88fa      	ldrh	r2, [r7, #6]
 8004694:	2300      	movs	r3, #0
 8004696:	9303      	str	r3, [sp, #12]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	9302      	str	r3, [sp, #8]
 800469c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f80f 	bl	80046cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046ae:	69f8      	ldr	r0, [r7, #28]
 80046b0:	f000 f8b4 	bl	800481c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046b4:	2301      	movs	r3, #1
 80046b6:	61bb      	str	r3, [r7, #24]
 80046b8:	e002      	b.n	80046c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046ba:	f04f 33ff 	mov.w	r3, #4294967295
 80046be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046c0:	69bb      	ldr	r3, [r7, #24]
	}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3720      	adds	r7, #32
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046dc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	461a      	mov	r2, r3
 80046e4:	21a5      	movs	r1, #165	@ 0xa5
 80046e6:	f001 fe1f 	bl	8006328 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046f4:	3b01      	subs	r3, #1
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f023 0307 	bic.w	r3, r3, #7
 8004702:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	617b      	str	r3, [r7, #20]
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	e7fd      	b.n	8004722 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01f      	beq.n	800476c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800472c:	2300      	movs	r3, #0
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	e012      	b.n	8004758 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	4413      	add	r3, r2
 8004738:	7819      	ldrb	r1, [r3, #0]
 800473a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	4413      	add	r3, r2
 8004740:	3334      	adds	r3, #52	@ 0x34
 8004742:	460a      	mov	r2, r1
 8004744:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	4413      	add	r3, r2
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d006      	beq.n	8004760 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3301      	adds	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b0f      	cmp	r3, #15
 800475c:	d9e9      	bls.n	8004732 <prvInitialiseNewTask+0x66>
 800475e:	e000      	b.n	8004762 <prvInitialiseNewTask+0x96>
			{
				break;
 8004760:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800476a:	e003      	b.n	8004774 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	2b37      	cmp	r3, #55	@ 0x37
 8004778:	d901      	bls.n	800477e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800477a:	2337      	movs	r3, #55	@ 0x37
 800477c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004782:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004788:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478c:	2200      	movs	r2, #0
 800478e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004792:	3304      	adds	r3, #4
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff f965 	bl	8003a64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800479a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479c:	3318      	adds	r3, #24
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff f960 	bl	8003a64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80047b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	3354      	adds	r3, #84	@ 0x54
 80047ce:	224c      	movs	r2, #76	@ 0x4c
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 fda8 	bl	8006328 <memset>
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	4a0d      	ldr	r2, [pc, #52]	@ (8004810 <prvInitialiseNewTask+0x144>)
 80047dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80047de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004814 <prvInitialiseNewTask+0x148>)
 80047e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004818 <prvInitialiseNewTask+0x14c>)
 80047e8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	68f9      	ldr	r1, [r7, #12]
 80047ee:	69b8      	ldr	r0, [r7, #24]
 80047f0:	f001 f95a 	bl	8005aa8 <pxPortInitialiseStack>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004806:	bf00      	nop
 8004808:	3720      	adds	r7, #32
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20001e94 	.word	0x20001e94
 8004814:	20001efc 	.word	0x20001efc
 8004818:	20001f64 	.word	0x20001f64

0800481c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004824:	f001 fa70 	bl	8005d08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004828:	4b2d      	ldr	r3, [pc, #180]	@ (80048e0 <prvAddNewTaskToReadyList+0xc4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	4a2c      	ldr	r2, [pc, #176]	@ (80048e0 <prvAddNewTaskToReadyList+0xc4>)
 8004830:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004832:	4b2c      	ldr	r3, [pc, #176]	@ (80048e4 <prvAddNewTaskToReadyList+0xc8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800483a:	4a2a      	ldr	r2, [pc, #168]	@ (80048e4 <prvAddNewTaskToReadyList+0xc8>)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004840:	4b27      	ldr	r3, [pc, #156]	@ (80048e0 <prvAddNewTaskToReadyList+0xc4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d110      	bne.n	800486a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004848:	f000 fc2e 	bl	80050a8 <prvInitialiseTaskLists>
 800484c:	e00d      	b.n	800486a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800484e:	4b26      	ldr	r3, [pc, #152]	@ (80048e8 <prvAddNewTaskToReadyList+0xcc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004856:	4b23      	ldr	r3, [pc, #140]	@ (80048e4 <prvAddNewTaskToReadyList+0xc8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	429a      	cmp	r2, r3
 8004862:	d802      	bhi.n	800486a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004864:	4a1f      	ldr	r2, [pc, #124]	@ (80048e4 <prvAddNewTaskToReadyList+0xc8>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800486a:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <prvAddNewTaskToReadyList+0xd0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	4a1e      	ldr	r2, [pc, #120]	@ (80048ec <prvAddNewTaskToReadyList+0xd0>)
 8004872:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004874:	4b1d      	ldr	r3, [pc, #116]	@ (80048ec <prvAddNewTaskToReadyList+0xd0>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004880:	4b1b      	ldr	r3, [pc, #108]	@ (80048f0 <prvAddNewTaskToReadyList+0xd4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d903      	bls.n	8004890 <prvAddNewTaskToReadyList+0x74>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	4a18      	ldr	r2, [pc, #96]	@ (80048f0 <prvAddNewTaskToReadyList+0xd4>)
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <prvAddNewTaskToReadyList+0xd8>)
 800489e:	441a      	add	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f7ff f8e9 	bl	8003a7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048ac:	f001 fa5e 	bl	8005d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048b0:	4b0d      	ldr	r3, [pc, #52]	@ (80048e8 <prvAddNewTaskToReadyList+0xcc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00e      	beq.n	80048d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048b8:	4b0a      	ldr	r3, [pc, #40]	@ (80048e4 <prvAddNewTaskToReadyList+0xc8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d207      	bcs.n	80048d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048c6:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <prvAddNewTaskToReadyList+0xdc>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048d6:	bf00      	nop
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20001114 	.word	0x20001114
 80048e4:	20000c40 	.word	0x20000c40
 80048e8:	20001120 	.word	0x20001120
 80048ec:	20001130 	.word	0x20001130
 80048f0:	2000111c 	.word	0x2000111c
 80048f4:	20000c44 	.word	0x20000c44
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d018      	beq.n	8004940 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800490e:	4b14      	ldr	r3, [pc, #80]	@ (8004960 <vTaskDelay+0x64>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <vTaskDelay+0x32>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	60bb      	str	r3, [r7, #8]
}
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	e7fd      	b.n	800492a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800492e:	f000 f88b 	bl	8004a48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004932:	2100      	movs	r1, #0
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fd09 	bl	800534c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800493a:	f000 f893 	bl	8004a64 <xTaskResumeAll>
 800493e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d107      	bne.n	8004956 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004946:	4b07      	ldr	r3, [pc, #28]	@ (8004964 <vTaskDelay+0x68>)
 8004948:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	2000113c 	.word	0x2000113c
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	@ 0x28
 800496c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004976:	463a      	mov	r2, r7
 8004978:	1d39      	adds	r1, r7, #4
 800497a:	f107 0308 	add.w	r3, r7, #8
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff f81c 	bl	80039bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	9202      	str	r2, [sp, #8]
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	2300      	movs	r3, #0
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	2300      	movs	r3, #0
 8004994:	460a      	mov	r2, r1
 8004996:	4924      	ldr	r1, [pc, #144]	@ (8004a28 <vTaskStartScheduler+0xc0>)
 8004998:	4824      	ldr	r0, [pc, #144]	@ (8004a2c <vTaskStartScheduler+0xc4>)
 800499a:	f7ff fdf1 	bl	8004580 <xTaskCreateStatic>
 800499e:	4603      	mov	r3, r0
 80049a0:	4a23      	ldr	r2, [pc, #140]	@ (8004a30 <vTaskStartScheduler+0xc8>)
 80049a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049a4:	4b22      	ldr	r3, [pc, #136]	@ (8004a30 <vTaskStartScheduler+0xc8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049ac:	2301      	movs	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e001      	b.n	80049b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d102      	bne.n	80049c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80049bc:	f000 fd1a 	bl	80053f4 <xTimerCreateTimerTask>
 80049c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d11b      	bne.n	8004a00 <vTaskStartScheduler+0x98>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	613b      	str	r3, [r7, #16]
}
 80049da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049dc:	4b15      	ldr	r3, [pc, #84]	@ (8004a34 <vTaskStartScheduler+0xcc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3354      	adds	r3, #84	@ 0x54
 80049e2:	4a15      	ldr	r2, [pc, #84]	@ (8004a38 <vTaskStartScheduler+0xd0>)
 80049e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049e6:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <vTaskStartScheduler+0xd4>)
 80049e8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049ee:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <vTaskStartScheduler+0xd8>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049f4:	4b13      	ldr	r3, [pc, #76]	@ (8004a44 <vTaskStartScheduler+0xdc>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049fa:	f001 f8e1 	bl	8005bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049fe:	e00f      	b.n	8004a20 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a06:	d10b      	bne.n	8004a20 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60fb      	str	r3, [r7, #12]
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <vTaskStartScheduler+0xb4>
}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	0800651c 	.word	0x0800651c
 8004a2c:	08005079 	.word	0x08005079
 8004a30:	20001138 	.word	0x20001138
 8004a34:	20000c40 	.word	0x20000c40
 8004a38:	20000010 	.word	0x20000010
 8004a3c:	20001134 	.word	0x20001134
 8004a40:	20001120 	.word	0x20001120
 8004a44:	20001118 	.word	0x20001118

08004a48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a4c:	4b04      	ldr	r3, [pc, #16]	@ (8004a60 <vTaskSuspendAll+0x18>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3301      	adds	r3, #1
 8004a52:	4a03      	ldr	r2, [pc, #12]	@ (8004a60 <vTaskSuspendAll+0x18>)
 8004a54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a56:	bf00      	nop
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	2000113c 	.word	0x2000113c

08004a64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a72:	4b42      	ldr	r3, [pc, #264]	@ (8004b7c <xTaskResumeAll+0x118>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <xTaskResumeAll+0x2e>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	603b      	str	r3, [r7, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a92:	f001 f939 	bl	8005d08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a96:	4b39      	ldr	r3, [pc, #228]	@ (8004b7c <xTaskResumeAll+0x118>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	4a37      	ldr	r2, [pc, #220]	@ (8004b7c <xTaskResumeAll+0x118>)
 8004a9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aa0:	4b36      	ldr	r3, [pc, #216]	@ (8004b7c <xTaskResumeAll+0x118>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d162      	bne.n	8004b6e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004aa8:	4b35      	ldr	r3, [pc, #212]	@ (8004b80 <xTaskResumeAll+0x11c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d05e      	beq.n	8004b6e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ab0:	e02f      	b.n	8004b12 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab2:	4b34      	ldr	r3, [pc, #208]	@ (8004b84 <xTaskResumeAll+0x120>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3318      	adds	r3, #24
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff f83a 	bl	8003b38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff f835 	bl	8003b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8004b88 <xTaskResumeAll+0x124>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d903      	bls.n	8004ae2 <xTaskResumeAll+0x7e>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	4a2a      	ldr	r2, [pc, #168]	@ (8004b88 <xTaskResumeAll+0x124>)
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4a27      	ldr	r2, [pc, #156]	@ (8004b8c <xTaskResumeAll+0x128>)
 8004af0:	441a      	add	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3304      	adds	r3, #4
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f7fe ffc0 	bl	8003a7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b02:	4b23      	ldr	r3, [pc, #140]	@ (8004b90 <xTaskResumeAll+0x12c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d302      	bcc.n	8004b12 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004b0c:	4b21      	ldr	r3, [pc, #132]	@ (8004b94 <xTaskResumeAll+0x130>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b12:	4b1c      	ldr	r3, [pc, #112]	@ (8004b84 <xTaskResumeAll+0x120>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1cb      	bne.n	8004ab2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b20:	f000 fb66 	bl	80051f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b24:	4b1c      	ldr	r3, [pc, #112]	@ (8004b98 <xTaskResumeAll+0x134>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d010      	beq.n	8004b52 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b30:	f000 f846 	bl	8004bc0 <xTaskIncrementTick>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004b3a:	4b16      	ldr	r3, [pc, #88]	@ (8004b94 <xTaskResumeAll+0x130>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f1      	bne.n	8004b30 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004b4c:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <xTaskResumeAll+0x134>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b52:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <xTaskResumeAll+0x130>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b9c <xTaskResumeAll+0x138>)
 8004b60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b6e:	f001 f8fd 	bl	8005d6c <vPortExitCritical>

	return xAlreadyYielded;
 8004b72:	68bb      	ldr	r3, [r7, #8]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	2000113c 	.word	0x2000113c
 8004b80:	20001114 	.word	0x20001114
 8004b84:	200010d4 	.word	0x200010d4
 8004b88:	2000111c 	.word	0x2000111c
 8004b8c:	20000c44 	.word	0x20000c44
 8004b90:	20000c40 	.word	0x20000c40
 8004b94:	20001128 	.word	0x20001128
 8004b98:	20001124 	.word	0x20001124
 8004b9c:	e000ed04 	.word	0xe000ed04

08004ba0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004ba6:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <xTaskGetTickCount+0x1c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004bac:	687b      	ldr	r3, [r7, #4]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20001118 	.word	0x20001118

08004bc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bca:	4b4f      	ldr	r3, [pc, #316]	@ (8004d08 <xTaskIncrementTick+0x148>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f040 8090 	bne.w	8004cf4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8004d0c <xTaskIncrementTick+0x14c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bdc:	4a4b      	ldr	r2, [pc, #300]	@ (8004d0c <xTaskIncrementTick+0x14c>)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d121      	bne.n	8004c2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004be8:	4b49      	ldr	r3, [pc, #292]	@ (8004d10 <xTaskIncrementTick+0x150>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	603b      	str	r3, [r7, #0]
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	e7fd      	b.n	8004c06 <xTaskIncrementTick+0x46>
 8004c0a:	4b41      	ldr	r3, [pc, #260]	@ (8004d10 <xTaskIncrementTick+0x150>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	4b40      	ldr	r3, [pc, #256]	@ (8004d14 <xTaskIncrementTick+0x154>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a3e      	ldr	r2, [pc, #248]	@ (8004d10 <xTaskIncrementTick+0x150>)
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	4a3e      	ldr	r2, [pc, #248]	@ (8004d14 <xTaskIncrementTick+0x154>)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d18 <xTaskIncrementTick+0x158>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3301      	adds	r3, #1
 8004c24:	4a3c      	ldr	r2, [pc, #240]	@ (8004d18 <xTaskIncrementTick+0x158>)
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	f000 fae2 	bl	80051f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d1c <xTaskIncrementTick+0x15c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d349      	bcc.n	8004cca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c36:	4b36      	ldr	r3, [pc, #216]	@ (8004d10 <xTaskIncrementTick+0x150>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c40:	4b36      	ldr	r3, [pc, #216]	@ (8004d1c <xTaskIncrementTick+0x15c>)
 8004c42:	f04f 32ff 	mov.w	r2, #4294967295
 8004c46:	601a      	str	r2, [r3, #0]
					break;
 8004c48:	e03f      	b.n	8004cca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c4a:	4b31      	ldr	r3, [pc, #196]	@ (8004d10 <xTaskIncrementTick+0x150>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d203      	bcs.n	8004c6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c62:	4a2e      	ldr	r2, [pc, #184]	@ (8004d1c <xTaskIncrementTick+0x15c>)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c68:	e02f      	b.n	8004cca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe ff62 	bl	8003b38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	3318      	adds	r3, #24
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe ff59 	bl	8003b38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c8a:	4b25      	ldr	r3, [pc, #148]	@ (8004d20 <xTaskIncrementTick+0x160>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d903      	bls.n	8004c9a <xTaskIncrementTick+0xda>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	4a22      	ldr	r2, [pc, #136]	@ (8004d20 <xTaskIncrementTick+0x160>)
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d24 <xTaskIncrementTick+0x164>)
 8004ca8:	441a      	add	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f7fe fee4 	bl	8003a7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cba:	4b1b      	ldr	r3, [pc, #108]	@ (8004d28 <xTaskIncrementTick+0x168>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d3b8      	bcc.n	8004c36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cc8:	e7b5      	b.n	8004c36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cca:	4b17      	ldr	r3, [pc, #92]	@ (8004d28 <xTaskIncrementTick+0x168>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd0:	4914      	ldr	r1, [pc, #80]	@ (8004d24 <xTaskIncrementTick+0x164>)
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d901      	bls.n	8004ce6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ce6:	4b11      	ldr	r3, [pc, #68]	@ (8004d2c <xTaskIncrementTick+0x16c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	e004      	b.n	8004cfe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d30 <xTaskIncrementTick+0x170>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8004d30 <xTaskIncrementTick+0x170>)
 8004cfc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cfe:	697b      	ldr	r3, [r7, #20]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	2000113c 	.word	0x2000113c
 8004d0c:	20001118 	.word	0x20001118
 8004d10:	200010cc 	.word	0x200010cc
 8004d14:	200010d0 	.word	0x200010d0
 8004d18:	2000112c 	.word	0x2000112c
 8004d1c:	20001134 	.word	0x20001134
 8004d20:	2000111c 	.word	0x2000111c
 8004d24:	20000c44 	.word	0x20000c44
 8004d28:	20000c40 	.word	0x20000c40
 8004d2c:	20001128 	.word	0x20001128
 8004d30:	20001124 	.word	0x20001124

08004d34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004de8 <vTaskSwitchContext+0xb4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d42:	4b2a      	ldr	r3, [pc, #168]	@ (8004dec <vTaskSwitchContext+0xb8>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d48:	e047      	b.n	8004dda <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004d4a:	4b28      	ldr	r3, [pc, #160]	@ (8004dec <vTaskSwitchContext+0xb8>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d50:	4b27      	ldr	r3, [pc, #156]	@ (8004df0 <vTaskSwitchContext+0xbc>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e011      	b.n	8004d7c <vTaskSwitchContext+0x48>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10b      	bne.n	8004d76 <vTaskSwitchContext+0x42>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	607b      	str	r3, [r7, #4]
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	e7fd      	b.n	8004d72 <vTaskSwitchContext+0x3e>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	491d      	ldr	r1, [pc, #116]	@ (8004df4 <vTaskSwitchContext+0xc0>)
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0e3      	beq.n	8004d58 <vTaskSwitchContext+0x24>
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4a16      	ldr	r2, [pc, #88]	@ (8004df4 <vTaskSwitchContext+0xc0>)
 8004d9c:	4413      	add	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	3308      	adds	r3, #8
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d104      	bne.n	8004dc0 <vTaskSwitchContext+0x8c>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	605a      	str	r2, [r3, #4]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8004df8 <vTaskSwitchContext+0xc4>)
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4a09      	ldr	r2, [pc, #36]	@ (8004df0 <vTaskSwitchContext+0xbc>)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dd0:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <vTaskSwitchContext+0xc4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3354      	adds	r3, #84	@ 0x54
 8004dd6:	4a09      	ldr	r2, [pc, #36]	@ (8004dfc <vTaskSwitchContext+0xc8>)
 8004dd8:	6013      	str	r3, [r2, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2000113c 	.word	0x2000113c
 8004dec:	20001128 	.word	0x20001128
 8004df0:	2000111c 	.word	0x2000111c
 8004df4:	20000c44 	.word	0x20000c44
 8004df8:	20000c40 	.word	0x20000c40
 8004dfc:	20000010 	.word	0x20000010

08004e00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60fb      	str	r3, [r7, #12]
}
 8004e22:	bf00      	nop
 8004e24:	bf00      	nop
 8004e26:	e7fd      	b.n	8004e24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e28:	4b07      	ldr	r3, [pc, #28]	@ (8004e48 <vTaskPlaceOnEventList+0x48>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3318      	adds	r3, #24
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fe fe48 	bl	8003ac6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e36:	2101      	movs	r1, #1
 8004e38:	6838      	ldr	r0, [r7, #0]
 8004e3a:	f000 fa87 	bl	800534c <prvAddCurrentTaskToDelayedList>
}
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000c40 	.word	0x20000c40

08004e4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10b      	bne.n	8004e76 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	617b      	str	r3, [r7, #20]
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	e7fd      	b.n	8004e72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3318      	adds	r3, #24
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7fe fdfd 	bl	8003a7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	68b8      	ldr	r0, [r7, #8]
 8004e94:	f000 fa5a 	bl	800534c <prvAddCurrentTaskToDelayedList>
	}
 8004e98:	bf00      	nop
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000c40 	.word	0x20000c40

08004ea4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	60fb      	str	r3, [r7, #12]
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	e7fd      	b.n	8004ece <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	3318      	adds	r3, #24
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe fe2e 	bl	8003b38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004edc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f54 <xTaskRemoveFromEventList+0xb0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d11d      	bne.n	8004f20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe fe25 	bl	8003b38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef2:	4b19      	ldr	r3, [pc, #100]	@ (8004f58 <xTaskRemoveFromEventList+0xb4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d903      	bls.n	8004f02 <xTaskRemoveFromEventList+0x5e>
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	4a16      	ldr	r2, [pc, #88]	@ (8004f58 <xTaskRemoveFromEventList+0xb4>)
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4a13      	ldr	r2, [pc, #76]	@ (8004f5c <xTaskRemoveFromEventList+0xb8>)
 8004f10:	441a      	add	r2, r3
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f7fe fdb0 	bl	8003a7e <vListInsertEnd>
 8004f1e:	e005      	b.n	8004f2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	3318      	adds	r3, #24
 8004f24:	4619      	mov	r1, r3
 8004f26:	480e      	ldr	r0, [pc, #56]	@ (8004f60 <xTaskRemoveFromEventList+0xbc>)
 8004f28:	f7fe fda9 	bl	8003a7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f30:	4b0c      	ldr	r3, [pc, #48]	@ (8004f64 <xTaskRemoveFromEventList+0xc0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d905      	bls.n	8004f46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <xTaskRemoveFromEventList+0xc4>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e001      	b.n	8004f4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f4a:	697b      	ldr	r3, [r7, #20]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	2000113c 	.word	0x2000113c
 8004f58:	2000111c 	.word	0x2000111c
 8004f5c:	20000c44 	.word	0x20000c44
 8004f60:	200010d4 	.word	0x200010d4
 8004f64:	20000c40 	.word	0x20000c40
 8004f68:	20001128 	.word	0x20001128

08004f6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f74:	4b06      	ldr	r3, [pc, #24]	@ (8004f90 <vTaskInternalSetTimeOutState+0x24>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f7c:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <vTaskInternalSetTimeOutState+0x28>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	605a      	str	r2, [r3, #4]
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	2000112c 	.word	0x2000112c
 8004f94:	20001118 	.word	0x20001118

08004f98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	613b      	str	r3, [r7, #16]
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10b      	bne.n	8004fde <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	60fb      	str	r3, [r7, #12]
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	e7fd      	b.n	8004fda <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004fde:	f000 fe93 	bl	8005d08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8005058 <xTaskCheckForTimeOut+0xc0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d102      	bne.n	8005002 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	e023      	b.n	800504a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4b15      	ldr	r3, [pc, #84]	@ (800505c <xTaskCheckForTimeOut+0xc4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d007      	beq.n	800501e <xTaskCheckForTimeOut+0x86>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	429a      	cmp	r2, r3
 8005016:	d302      	bcc.n	800501e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005018:	2301      	movs	r3, #1
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	e015      	b.n	800504a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	429a      	cmp	r2, r3
 8005026:	d20b      	bcs.n	8005040 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	1ad2      	subs	r2, r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff ff99 	bl	8004f6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	e004      	b.n	800504a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005046:	2301      	movs	r3, #1
 8005048:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800504a:	f000 fe8f 	bl	8005d6c <vPortExitCritical>

	return xReturn;
 800504e:	69fb      	ldr	r3, [r7, #28]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20001118 	.word	0x20001118
 800505c:	2000112c 	.word	0x2000112c

08005060 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005064:	4b03      	ldr	r3, [pc, #12]	@ (8005074 <vTaskMissedYield+0x14>)
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]
}
 800506a:	bf00      	nop
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	20001128 	.word	0x20001128

08005078 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005080:	f000 f852 	bl	8005128 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005084:	4b06      	ldr	r3, [pc, #24]	@ (80050a0 <prvIdleTask+0x28>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d9f9      	bls.n	8005080 <prvIdleTask+0x8>
			{
				taskYIELD();
 800508c:	4b05      	ldr	r3, [pc, #20]	@ (80050a4 <prvIdleTask+0x2c>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800509c:	e7f0      	b.n	8005080 <prvIdleTask+0x8>
 800509e:	bf00      	nop
 80050a0:	20000c44 	.word	0x20000c44
 80050a4:	e000ed04 	.word	0xe000ed04

080050a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
 80050b2:	e00c      	b.n	80050ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4a12      	ldr	r2, [pc, #72]	@ (8005108 <prvInitialiseTaskLists+0x60>)
 80050c0:	4413      	add	r3, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe fcae 	bl	8003a24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3301      	adds	r3, #1
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b37      	cmp	r3, #55	@ 0x37
 80050d2:	d9ef      	bls.n	80050b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050d4:	480d      	ldr	r0, [pc, #52]	@ (800510c <prvInitialiseTaskLists+0x64>)
 80050d6:	f7fe fca5 	bl	8003a24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050da:	480d      	ldr	r0, [pc, #52]	@ (8005110 <prvInitialiseTaskLists+0x68>)
 80050dc:	f7fe fca2 	bl	8003a24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050e0:	480c      	ldr	r0, [pc, #48]	@ (8005114 <prvInitialiseTaskLists+0x6c>)
 80050e2:	f7fe fc9f 	bl	8003a24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050e6:	480c      	ldr	r0, [pc, #48]	@ (8005118 <prvInitialiseTaskLists+0x70>)
 80050e8:	f7fe fc9c 	bl	8003a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050ec:	480b      	ldr	r0, [pc, #44]	@ (800511c <prvInitialiseTaskLists+0x74>)
 80050ee:	f7fe fc99 	bl	8003a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <prvInitialiseTaskLists+0x78>)
 80050f4:	4a05      	ldr	r2, [pc, #20]	@ (800510c <prvInitialiseTaskLists+0x64>)
 80050f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005124 <prvInitialiseTaskLists+0x7c>)
 80050fa:	4a05      	ldr	r2, [pc, #20]	@ (8005110 <prvInitialiseTaskLists+0x68>)
 80050fc:	601a      	str	r2, [r3, #0]
}
 80050fe:	bf00      	nop
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000c44 	.word	0x20000c44
 800510c:	200010a4 	.word	0x200010a4
 8005110:	200010b8 	.word	0x200010b8
 8005114:	200010d4 	.word	0x200010d4
 8005118:	200010e8 	.word	0x200010e8
 800511c:	20001100 	.word	0x20001100
 8005120:	200010cc 	.word	0x200010cc
 8005124:	200010d0 	.word	0x200010d0

08005128 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800512e:	e019      	b.n	8005164 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005130:	f000 fdea 	bl	8005d08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005134:	4b10      	ldr	r3, [pc, #64]	@ (8005178 <prvCheckTasksWaitingTermination+0x50>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe fcf9 	bl	8003b38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005146:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <prvCheckTasksWaitingTermination+0x54>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3b01      	subs	r3, #1
 800514c:	4a0b      	ldr	r2, [pc, #44]	@ (800517c <prvCheckTasksWaitingTermination+0x54>)
 800514e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005150:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <prvCheckTasksWaitingTermination+0x58>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3b01      	subs	r3, #1
 8005156:	4a0a      	ldr	r2, [pc, #40]	@ (8005180 <prvCheckTasksWaitingTermination+0x58>)
 8005158:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800515a:	f000 fe07 	bl	8005d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f810 	bl	8005184 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005164:	4b06      	ldr	r3, [pc, #24]	@ (8005180 <prvCheckTasksWaitingTermination+0x58>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e1      	bne.n	8005130 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200010e8 	.word	0x200010e8
 800517c:	20001114 	.word	0x20001114
 8005180:	200010fc 	.word	0x200010fc

08005184 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3354      	adds	r3, #84	@ 0x54
 8005190:	4618      	mov	r0, r3
 8005192:	f001 f8d1 	bl	8006338 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800519c:	2b00      	cmp	r3, #0
 800519e:	d108      	bne.n	80051b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 ff9f 	bl	80060e8 <vPortFree>
				vPortFree( pxTCB );
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 ff9c 	bl	80060e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051b0:	e019      	b.n	80051e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d103      	bne.n	80051c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 ff93 	bl	80060e8 <vPortFree>
	}
 80051c2:	e010      	b.n	80051e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d00b      	beq.n	80051e6 <prvDeleteTCB+0x62>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	60fb      	str	r3, [r7, #12]
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	e7fd      	b.n	80051e2 <prvDeleteTCB+0x5e>
	}
 80051e6:	bf00      	nop
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005228 <prvResetNextTaskUnblockTime+0x38>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d104      	bne.n	800520a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005200:	4b0a      	ldr	r3, [pc, #40]	@ (800522c <prvResetNextTaskUnblockTime+0x3c>)
 8005202:	f04f 32ff 	mov.w	r2, #4294967295
 8005206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005208:	e008      	b.n	800521c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800520a:	4b07      	ldr	r3, [pc, #28]	@ (8005228 <prvResetNextTaskUnblockTime+0x38>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	4a04      	ldr	r2, [pc, #16]	@ (800522c <prvResetNextTaskUnblockTime+0x3c>)
 800521a:	6013      	str	r3, [r2, #0]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	200010cc 	.word	0x200010cc
 800522c:	20001134 	.word	0x20001134

08005230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005236:	4b0b      	ldr	r3, [pc, #44]	@ (8005264 <xTaskGetSchedulerState+0x34>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800523e:	2301      	movs	r3, #1
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	e008      	b.n	8005256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005244:	4b08      	ldr	r3, [pc, #32]	@ (8005268 <xTaskGetSchedulerState+0x38>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800524c:	2302      	movs	r3, #2
 800524e:	607b      	str	r3, [r7, #4]
 8005250:	e001      	b.n	8005256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005252:	2300      	movs	r3, #0
 8005254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005256:	687b      	ldr	r3, [r7, #4]
	}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	20001120 	.word	0x20001120
 8005268:	2000113c 	.word	0x2000113c

0800526c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d058      	beq.n	8005334 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005282:	4b2f      	ldr	r3, [pc, #188]	@ (8005340 <xTaskPriorityDisinherit+0xd4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	429a      	cmp	r2, r3
 800528a:	d00b      	beq.n	80052a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	60fb      	str	r3, [r7, #12]
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	e7fd      	b.n	80052a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10b      	bne.n	80052c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	60bb      	str	r3, [r7, #8]
}
 80052be:	bf00      	nop
 80052c0:	bf00      	nop
 80052c2:	e7fd      	b.n	80052c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c8:	1e5a      	subs	r2, r3, #1
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d02c      	beq.n	8005334 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d128      	bne.n	8005334 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fc26 	bl	8003b38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005304:	4b0f      	ldr	r3, [pc, #60]	@ (8005344 <xTaskPriorityDisinherit+0xd8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d903      	bls.n	8005314 <xTaskPriorityDisinherit+0xa8>
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	4a0c      	ldr	r2, [pc, #48]	@ (8005344 <xTaskPriorityDisinherit+0xd8>)
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4a09      	ldr	r2, [pc, #36]	@ (8005348 <xTaskPriorityDisinherit+0xdc>)
 8005322:	441a      	add	r2, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f7fe fba7 	bl	8003a7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005330:	2301      	movs	r3, #1
 8005332:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005334:	697b      	ldr	r3, [r7, #20]
	}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000c40 	.word	0x20000c40
 8005344:	2000111c 	.word	0x2000111c
 8005348:	20000c44 	.word	0x20000c44

0800534c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005356:	4b21      	ldr	r3, [pc, #132]	@ (80053dc <prvAddCurrentTaskToDelayedList+0x90>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800535c:	4b20      	ldr	r3, [pc, #128]	@ (80053e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3304      	adds	r3, #4
 8005362:	4618      	mov	r0, r3
 8005364:	f7fe fbe8 	bl	8003b38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d10a      	bne.n	8005386 <prvAddCurrentTaskToDelayedList+0x3a>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005376:	4b1a      	ldr	r3, [pc, #104]	@ (80053e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4819      	ldr	r0, [pc, #100]	@ (80053e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005380:	f7fe fb7d 	bl	8003a7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005384:	e026      	b.n	80053d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4413      	add	r3, r2
 800538c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800538e:	4b14      	ldr	r3, [pc, #80]	@ (80053e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	429a      	cmp	r2, r3
 800539c:	d209      	bcs.n	80053b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800539e:	4b12      	ldr	r3, [pc, #72]	@ (80053e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b0f      	ldr	r3, [pc, #60]	@ (80053e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f7fe fb8b 	bl	8003ac6 <vListInsert>
}
 80053b0:	e010      	b.n	80053d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053b2:	4b0e      	ldr	r3, [pc, #56]	@ (80053ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b0a      	ldr	r3, [pc, #40]	@ (80053e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3304      	adds	r3, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f7fe fb81 	bl	8003ac6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053c4:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d202      	bcs.n	80053d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80053ce:	4a08      	ldr	r2, [pc, #32]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	6013      	str	r3, [r2, #0]
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20001118 	.word	0x20001118
 80053e0:	20000c40 	.word	0x20000c40
 80053e4:	20001100 	.word	0x20001100
 80053e8:	200010d0 	.word	0x200010d0
 80053ec:	200010cc 	.word	0x200010cc
 80053f0:	20001134 	.word	0x20001134

080053f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	@ 0x28
 80053f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053fe:	f000 fb13 	bl	8005a28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005402:	4b1d      	ldr	r3, [pc, #116]	@ (8005478 <xTimerCreateTimerTask+0x84>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d021      	beq.n	800544e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800540e:	2300      	movs	r3, #0
 8005410:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005412:	1d3a      	adds	r2, r7, #4
 8005414:	f107 0108 	add.w	r1, r7, #8
 8005418:	f107 030c 	add.w	r3, r7, #12
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe fae7 	bl	80039f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	9202      	str	r2, [sp, #8]
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	2302      	movs	r3, #2
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	2300      	movs	r3, #0
 8005432:	460a      	mov	r2, r1
 8005434:	4911      	ldr	r1, [pc, #68]	@ (800547c <xTimerCreateTimerTask+0x88>)
 8005436:	4812      	ldr	r0, [pc, #72]	@ (8005480 <xTimerCreateTimerTask+0x8c>)
 8005438:	f7ff f8a2 	bl	8004580 <xTaskCreateStatic>
 800543c:	4603      	mov	r3, r0
 800543e:	4a11      	ldr	r2, [pc, #68]	@ (8005484 <xTimerCreateTimerTask+0x90>)
 8005440:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005442:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <xTimerCreateTimerTask+0x90>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800544a:	2301      	movs	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10b      	bne.n	800546c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	613b      	str	r3, [r7, #16]
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	e7fd      	b.n	8005468 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800546c:	697b      	ldr	r3, [r7, #20]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20001170 	.word	0x20001170
 800547c:	08006524 	.word	0x08006524
 8005480:	080055c1 	.word	0x080055c1
 8005484:	20001174 	.word	0x20001174

08005488 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	@ 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005496:	2300      	movs	r3, #0
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10b      	bne.n	80054b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	623b      	str	r3, [r7, #32]
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	e7fd      	b.n	80054b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80054b8:	4b19      	ldr	r3, [pc, #100]	@ (8005520 <xTimerGenericCommand+0x98>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d02a      	beq.n	8005516 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b05      	cmp	r3, #5
 80054d0:	dc18      	bgt.n	8005504 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054d2:	f7ff fead 	bl	8005230 <xTaskGetSchedulerState>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d109      	bne.n	80054f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054dc:	4b10      	ldr	r3, [pc, #64]	@ (8005520 <xTimerGenericCommand+0x98>)
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	f107 0110 	add.w	r1, r7, #16
 80054e4:	2300      	movs	r3, #0
 80054e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054e8:	f7fe fc5a 	bl	8003da0 <xQueueGenericSend>
 80054ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80054ee:	e012      	b.n	8005516 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005520 <xTimerGenericCommand+0x98>)
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	f107 0110 	add.w	r1, r7, #16
 80054f8:	2300      	movs	r3, #0
 80054fa:	2200      	movs	r2, #0
 80054fc:	f7fe fc50 	bl	8003da0 <xQueueGenericSend>
 8005500:	6278      	str	r0, [r7, #36]	@ 0x24
 8005502:	e008      	b.n	8005516 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005504:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <xTimerGenericCommand+0x98>)
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	f107 0110 	add.w	r1, r7, #16
 800550c:	2300      	movs	r3, #0
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	f7fe fd48 	bl	8003fa4 <xQueueGenericSendFromISR>
 8005514:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005518:	4618      	mov	r0, r3
 800551a:	3728      	adds	r7, #40	@ 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20001170 	.word	0x20001170

08005524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af02      	add	r7, sp, #8
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552e:	4b23      	ldr	r3, [pc, #140]	@ (80055bc <prvProcessExpiredTimer+0x98>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	3304      	adds	r3, #4
 800553c:	4618      	mov	r0, r3
 800553e:	f7fe fafb 	bl	8003b38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d023      	beq.n	8005598 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	18d1      	adds	r1, r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	6978      	ldr	r0, [r7, #20]
 800555e:	f000 f8d5 	bl	800570c <prvInsertTimerInActiveList>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d020      	beq.n	80055aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005568:	2300      	movs	r3, #0
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	2300      	movs	r3, #0
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	2100      	movs	r1, #0
 8005572:	6978      	ldr	r0, [r7, #20]
 8005574:	f7ff ff88 	bl	8005488 <xTimerGenericCommand>
 8005578:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d114      	bne.n	80055aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	60fb      	str	r3, [r7, #12]
}
 8005592:	bf00      	nop
 8005594:	bf00      	nop
 8005596:	e7fd      	b.n	8005594 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	6978      	ldr	r0, [r7, #20]
 80055b0:	4798      	blx	r3
}
 80055b2:	bf00      	nop
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20001168 	.word	0x20001168

080055c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055c8:	f107 0308 	add.w	r3, r7, #8
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 f859 	bl	8005684 <prvGetNextExpireTime>
 80055d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4619      	mov	r1, r3
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f805 	bl	80055e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055de:	f000 f8d7 	bl	8005790 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055e2:	bf00      	nop
 80055e4:	e7f0      	b.n	80055c8 <prvTimerTask+0x8>
	...

080055e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055f2:	f7ff fa29 	bl	8004a48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055f6:	f107 0308 	add.w	r3, r7, #8
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f866 	bl	80056cc <prvSampleTimeNow>
 8005600:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d130      	bne.n	800566a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <prvProcessTimerOrBlockTask+0x3c>
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	429a      	cmp	r2, r3
 8005614:	d806      	bhi.n	8005624 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005616:	f7ff fa25 	bl	8004a64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff ff81 	bl	8005524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005622:	e024      	b.n	800566e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800562a:	4b13      	ldr	r3, [pc, #76]	@ (8005678 <prvProcessTimerOrBlockTask+0x90>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <prvProcessTimerOrBlockTask+0x50>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <prvProcessTimerOrBlockTask+0x52>
 8005638:	2300      	movs	r3, #0
 800563a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800563c:	4b0f      	ldr	r3, [pc, #60]	@ (800567c <prvProcessTimerOrBlockTask+0x94>)
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	f7fe ff65 	bl	8004518 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800564e:	f7ff fa09 	bl	8004a64 <xTaskResumeAll>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005658:	4b09      	ldr	r3, [pc, #36]	@ (8005680 <prvProcessTimerOrBlockTask+0x98>)
 800565a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	f3bf 8f6f 	isb	sy
}
 8005668:	e001      	b.n	800566e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800566a:	f7ff f9fb 	bl	8004a64 <xTaskResumeAll>
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	2000116c 	.word	0x2000116c
 800567c:	20001170 	.word	0x20001170
 8005680:	e000ed04 	.word	0xe000ed04

08005684 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800568c:	4b0e      	ldr	r3, [pc, #56]	@ (80056c8 <prvGetNextExpireTime+0x44>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <prvGetNextExpireTime+0x16>
 8005696:	2201      	movs	r2, #1
 8005698:	e000      	b.n	800569c <prvGetNextExpireTime+0x18>
 800569a:	2200      	movs	r2, #0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056a8:	4b07      	ldr	r3, [pc, #28]	@ (80056c8 <prvGetNextExpireTime+0x44>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	e001      	b.n	80056b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80056b8:	68fb      	ldr	r3, [r7, #12]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20001168 	.word	0x20001168

080056cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80056d4:	f7ff fa64 	bl	8004ba0 <xTaskGetTickCount>
 80056d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80056da:	4b0b      	ldr	r3, [pc, #44]	@ (8005708 <prvSampleTimeNow+0x3c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d205      	bcs.n	80056f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056e4:	f000 f93a 	bl	800595c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e002      	b.n	80056f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056f6:	4a04      	ldr	r2, [pc, #16]	@ (8005708 <prvSampleTimeNow+0x3c>)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80056fc:	68fb      	ldr	r3, [r7, #12]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20001178 	.word	0x20001178

0800570c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	429a      	cmp	r2, r3
 8005730:	d812      	bhi.n	8005758 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	1ad2      	subs	r2, r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	429a      	cmp	r2, r3
 800573e:	d302      	bcc.n	8005746 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e01b      	b.n	800577e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005746:	4b10      	ldr	r3, [pc, #64]	@ (8005788 <prvInsertTimerInActiveList+0x7c>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3304      	adds	r3, #4
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f7fe f9b8 	bl	8003ac6 <vListInsert>
 8005756:	e012      	b.n	800577e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d206      	bcs.n	800576e <prvInsertTimerInActiveList+0x62>
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d302      	bcc.n	800576e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005768:	2301      	movs	r3, #1
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e007      	b.n	800577e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800576e:	4b07      	ldr	r3, [pc, #28]	@ (800578c <prvInsertTimerInActiveList+0x80>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3304      	adds	r3, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f7fe f9a4 	bl	8003ac6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800577e:	697b      	ldr	r3, [r7, #20]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	2000116c 	.word	0x2000116c
 800578c:	20001168 	.word	0x20001168

08005790 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08e      	sub	sp, #56	@ 0x38
 8005794:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005796:	e0ce      	b.n	8005936 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	da19      	bge.n	80057d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	3304      	adds	r3, #4
 80057a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80057a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	61fb      	str	r3, [r7, #28]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80057c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057c8:	6850      	ldr	r0, [r2, #4]
 80057ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057cc:	6892      	ldr	r2, [r2, #8]
 80057ce:	4611      	mov	r1, r2
 80057d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f2c0 80ae 	blt.w	8005936 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d004      	beq.n	80057f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe f9a4 	bl	8003b38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057f0:	463b      	mov	r3, r7
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff ff6a 	bl	80056cc <prvSampleTimeNow>
 80057f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b09      	cmp	r3, #9
 80057fe:	f200 8097 	bhi.w	8005930 <prvProcessReceivedCommands+0x1a0>
 8005802:	a201      	add	r2, pc, #4	@ (adr r2, 8005808 <prvProcessReceivedCommands+0x78>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	08005831 	.word	0x08005831
 800580c:	08005831 	.word	0x08005831
 8005810:	08005831 	.word	0x08005831
 8005814:	080058a7 	.word	0x080058a7
 8005818:	080058bb 	.word	0x080058bb
 800581c:	08005907 	.word	0x08005907
 8005820:	08005831 	.word	0x08005831
 8005824:	08005831 	.word	0x08005831
 8005828:	080058a7 	.word	0x080058a7
 800582c:	080058bb 	.word	0x080058bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005832:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	b2da      	uxtb	r2, r3
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	18d1      	adds	r1, r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800584e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005850:	f7ff ff5c 	bl	800570c <prvInsertTimerInActiveList>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d06c      	beq.n	8005934 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005860:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d061      	beq.n	8005934 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	441a      	add	r2, r3
 8005878:	2300      	movs	r3, #0
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	2300      	movs	r3, #0
 800587e:	2100      	movs	r1, #0
 8005880:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005882:	f7ff fe01 	bl	8005488 <xTimerGenericCommand>
 8005886:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d152      	bne.n	8005934 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	61bb      	str	r3, [r7, #24]
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	e7fd      	b.n	80058a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80058b8:	e03d      	b.n	8005936 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	617b      	str	r3, [r7, #20]
}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	e7fd      	b.n	80058ee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	18d1      	adds	r1, r2, r3
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005900:	f7ff ff04 	bl	800570c <prvInsertTimerInActiveList>
					break;
 8005904:	e017      	b.n	8005936 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d103      	bne.n	800591c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005916:	f000 fbe7 	bl	80060e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800591a:	e00c      	b.n	8005936 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	b2da      	uxtb	r2, r3
 8005928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800592e:	e002      	b.n	8005936 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005930:	bf00      	nop
 8005932:	e000      	b.n	8005936 <prvProcessReceivedCommands+0x1a6>
					break;
 8005934:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005936:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <prvProcessReceivedCommands+0x1c8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	1d39      	adds	r1, r7, #4
 800593c:	2200      	movs	r2, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe fbce 	bl	80040e0 <xQueueReceive>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	f47f af26 	bne.w	8005798 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800594c:	bf00      	nop
 800594e:	bf00      	nop
 8005950:	3730      	adds	r7, #48	@ 0x30
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20001170 	.word	0x20001170

0800595c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005962:	e049      	b.n	80059f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005964:	4b2e      	ldr	r3, [pc, #184]	@ (8005a20 <prvSwitchTimerLists+0xc4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a20 <prvSwitchTimerLists+0xc4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3304      	adds	r3, #4
 800597c:	4618      	mov	r0, r3
 800597e:	f7fe f8db 	bl	8003b38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d02f      	beq.n	80059f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4413      	add	r3, r2
 80059a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d90e      	bls.n	80059c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a20 <prvSwitchTimerLists+0xc4>)
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3304      	adds	r3, #4
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f7fe f880 	bl	8003ac6 <vListInsert>
 80059c6:	e017      	b.n	80059f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059c8:	2300      	movs	r3, #0
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	2300      	movs	r3, #0
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	2100      	movs	r1, #0
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff fd58 	bl	8005488 <xTimerGenericCommand>
 80059d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10b      	bne.n	80059f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	603b      	str	r3, [r7, #0]
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059f8:	4b09      	ldr	r3, [pc, #36]	@ (8005a20 <prvSwitchTimerLists+0xc4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1b0      	bne.n	8005964 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a02:	4b07      	ldr	r3, [pc, #28]	@ (8005a20 <prvSwitchTimerLists+0xc4>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a08:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <prvSwitchTimerLists+0xc8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a04      	ldr	r2, [pc, #16]	@ (8005a20 <prvSwitchTimerLists+0xc4>)
 8005a0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a10:	4a04      	ldr	r2, [pc, #16]	@ (8005a24 <prvSwitchTimerLists+0xc8>)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	6013      	str	r3, [r2, #0]
}
 8005a16:	bf00      	nop
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20001168 	.word	0x20001168
 8005a24:	2000116c 	.word	0x2000116c

08005a28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a2e:	f000 f96b 	bl	8005d08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a32:	4b15      	ldr	r3, [pc, #84]	@ (8005a88 <prvCheckForValidListAndQueue+0x60>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d120      	bne.n	8005a7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a3a:	4814      	ldr	r0, [pc, #80]	@ (8005a8c <prvCheckForValidListAndQueue+0x64>)
 8005a3c:	f7fd fff2 	bl	8003a24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a40:	4813      	ldr	r0, [pc, #76]	@ (8005a90 <prvCheckForValidListAndQueue+0x68>)
 8005a42:	f7fd ffef 	bl	8003a24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a46:	4b13      	ldr	r3, [pc, #76]	@ (8005a94 <prvCheckForValidListAndQueue+0x6c>)
 8005a48:	4a10      	ldr	r2, [pc, #64]	@ (8005a8c <prvCheckForValidListAndQueue+0x64>)
 8005a4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a4c:	4b12      	ldr	r3, [pc, #72]	@ (8005a98 <prvCheckForValidListAndQueue+0x70>)
 8005a4e:	4a10      	ldr	r2, [pc, #64]	@ (8005a90 <prvCheckForValidListAndQueue+0x68>)
 8005a50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a52:	2300      	movs	r3, #0
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	4b11      	ldr	r3, [pc, #68]	@ (8005a9c <prvCheckForValidListAndQueue+0x74>)
 8005a58:	4a11      	ldr	r2, [pc, #68]	@ (8005aa0 <prvCheckForValidListAndQueue+0x78>)
 8005a5a:	2110      	movs	r1, #16
 8005a5c:	200a      	movs	r0, #10
 8005a5e:	f7fe f8ff 	bl	8003c60 <xQueueGenericCreateStatic>
 8005a62:	4603      	mov	r3, r0
 8005a64:	4a08      	ldr	r2, [pc, #32]	@ (8005a88 <prvCheckForValidListAndQueue+0x60>)
 8005a66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a68:	4b07      	ldr	r3, [pc, #28]	@ (8005a88 <prvCheckForValidListAndQueue+0x60>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a70:	4b05      	ldr	r3, [pc, #20]	@ (8005a88 <prvCheckForValidListAndQueue+0x60>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	490b      	ldr	r1, [pc, #44]	@ (8005aa4 <prvCheckForValidListAndQueue+0x7c>)
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fe fd24 	bl	80044c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a7c:	f000 f976 	bl	8005d6c <vPortExitCritical>
}
 8005a80:	bf00      	nop
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20001170 	.word	0x20001170
 8005a8c:	20001140 	.word	0x20001140
 8005a90:	20001154 	.word	0x20001154
 8005a94:	20001168 	.word	0x20001168
 8005a98:	2000116c 	.word	0x2000116c
 8005a9c:	2000121c 	.word	0x2000121c
 8005aa0:	2000117c 	.word	0x2000117c
 8005aa4:	0800652c 	.word	0x0800652c

08005aa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3b04      	subs	r3, #4
 8005ab8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f023 0201 	bic.w	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3b04      	subs	r3, #4
 8005ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8005b0c <pxPortInitialiseStack+0x64>)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3b14      	subs	r3, #20
 8005ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3b04      	subs	r3, #4
 8005aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f06f 0202 	mvn.w	r2, #2
 8005af6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3b20      	subs	r3, #32
 8005afc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005afe:	68fb      	ldr	r3, [r7, #12]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	08005b11 	.word	0x08005b11

08005b10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b1a:	4b13      	ldr	r3, [pc, #76]	@ (8005b68 <prvTaskExitError+0x58>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d00b      	beq.n	8005b3c <prvTaskExitError+0x2c>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	60fb      	str	r3, [r7, #12]
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <prvTaskExitError+0x28>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60bb      	str	r3, [r7, #8]
}
 8005b4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b50:	bf00      	nop
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0fc      	beq.n	8005b52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	2000000c 	.word	0x2000000c
 8005b6c:	00000000 	.word	0x00000000

08005b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b70:	4b07      	ldr	r3, [pc, #28]	@ (8005b90 <pxCurrentTCBConst2>)
 8005b72:	6819      	ldr	r1, [r3, #0]
 8005b74:	6808      	ldr	r0, [r1, #0]
 8005b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7a:	f380 8809 	msr	PSP, r0
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f380 8811 	msr	BASEPRI, r0
 8005b8a:	4770      	bx	lr
 8005b8c:	f3af 8000 	nop.w

08005b90 <pxCurrentTCBConst2>:
 8005b90:	20000c40 	.word	0x20000c40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop

08005b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b98:	4808      	ldr	r0, [pc, #32]	@ (8005bbc <prvPortStartFirstTask+0x24>)
 8005b9a:	6800      	ldr	r0, [r0, #0]
 8005b9c:	6800      	ldr	r0, [r0, #0]
 8005b9e:	f380 8808 	msr	MSP, r0
 8005ba2:	f04f 0000 	mov.w	r0, #0
 8005ba6:	f380 8814 	msr	CONTROL, r0
 8005baa:	b662      	cpsie	i
 8005bac:	b661      	cpsie	f
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	df00      	svc	0
 8005bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bba:	bf00      	nop
 8005bbc:	e000ed08 	.word	0xe000ed08

08005bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005bc6:	4b47      	ldr	r3, [pc, #284]	@ (8005ce4 <xPortStartScheduler+0x124>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a47      	ldr	r2, [pc, #284]	@ (8005ce8 <xPortStartScheduler+0x128>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d10b      	bne.n	8005be8 <xPortStartScheduler+0x28>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	613b      	str	r3, [r7, #16]
}
 8005be2:	bf00      	nop
 8005be4:	bf00      	nop
 8005be6:	e7fd      	b.n	8005be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005be8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ce4 <xPortStartScheduler+0x124>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a3f      	ldr	r2, [pc, #252]	@ (8005cec <xPortStartScheduler+0x12c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d10b      	bne.n	8005c0a <xPortStartScheduler+0x4a>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	60fb      	str	r3, [r7, #12]
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	e7fd      	b.n	8005c06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c0a:	4b39      	ldr	r3, [pc, #228]	@ (8005cf0 <xPortStartScheduler+0x130>)
 8005c0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	22ff      	movs	r2, #255	@ 0xff
 8005c1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	4b31      	ldr	r3, [pc, #196]	@ (8005cf4 <xPortStartScheduler+0x134>)
 8005c30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c32:	4b31      	ldr	r3, [pc, #196]	@ (8005cf8 <xPortStartScheduler+0x138>)
 8005c34:	2207      	movs	r2, #7
 8005c36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c38:	e009      	b.n	8005c4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8005cf8 <xPortStartScheduler+0x138>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	4a2d      	ldr	r2, [pc, #180]	@ (8005cf8 <xPortStartScheduler+0x138>)
 8005c42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c56:	2b80      	cmp	r3, #128	@ 0x80
 8005c58:	d0ef      	beq.n	8005c3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c5a:	4b27      	ldr	r3, [pc, #156]	@ (8005cf8 <xPortStartScheduler+0x138>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f1c3 0307 	rsb	r3, r3, #7
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d00b      	beq.n	8005c7e <xPortStartScheduler+0xbe>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	60bb      	str	r3, [r7, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	e7fd      	b.n	8005c7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf8 <xPortStartScheduler+0x138>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf8 <xPortStartScheduler+0x138>)
 8005c86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c88:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf8 <xPortStartScheduler+0x138>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c90:	4a19      	ldr	r2, [pc, #100]	@ (8005cf8 <xPortStartScheduler+0x138>)
 8005c92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c9c:	4b17      	ldr	r3, [pc, #92]	@ (8005cfc <xPortStartScheduler+0x13c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a16      	ldr	r2, [pc, #88]	@ (8005cfc <xPortStartScheduler+0x13c>)
 8005ca2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ca6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ca8:	4b14      	ldr	r3, [pc, #80]	@ (8005cfc <xPortStartScheduler+0x13c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a13      	ldr	r2, [pc, #76]	@ (8005cfc <xPortStartScheduler+0x13c>)
 8005cae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005cb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cb4:	f000 f8da 	bl	8005e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cb8:	4b11      	ldr	r3, [pc, #68]	@ (8005d00 <xPortStartScheduler+0x140>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cbe:	f000 f8f9 	bl	8005eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cc2:	4b10      	ldr	r3, [pc, #64]	@ (8005d04 <xPortStartScheduler+0x144>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8005d04 <xPortStartScheduler+0x144>)
 8005cc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005ccc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005cce:	f7ff ff63 	bl	8005b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cd2:	f7ff f82f 	bl	8004d34 <vTaskSwitchContext>
	prvTaskExitError();
 8005cd6:	f7ff ff1b 	bl	8005b10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	e000ed00 	.word	0xe000ed00
 8005ce8:	410fc271 	.word	0x410fc271
 8005cec:	410fc270 	.word	0x410fc270
 8005cf0:	e000e400 	.word	0xe000e400
 8005cf4:	2000126c 	.word	0x2000126c
 8005cf8:	20001270 	.word	0x20001270
 8005cfc:	e000ed20 	.word	0xe000ed20
 8005d00:	2000000c 	.word	0x2000000c
 8005d04:	e000ef34 	.word	0xe000ef34

08005d08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	607b      	str	r3, [r7, #4]
}
 8005d20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d22:	4b10      	ldr	r3, [pc, #64]	@ (8005d64 <vPortEnterCritical+0x5c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3301      	adds	r3, #1
 8005d28:	4a0e      	ldr	r2, [pc, #56]	@ (8005d64 <vPortEnterCritical+0x5c>)
 8005d2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d64 <vPortEnterCritical+0x5c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d110      	bne.n	8005d56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d34:	4b0c      	ldr	r3, [pc, #48]	@ (8005d68 <vPortEnterCritical+0x60>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00b      	beq.n	8005d56 <vPortEnterCritical+0x4e>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	603b      	str	r3, [r7, #0]
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	e7fd      	b.n	8005d52 <vPortEnterCritical+0x4a>
	}
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	2000000c 	.word	0x2000000c
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d72:	4b12      	ldr	r3, [pc, #72]	@ (8005dbc <vPortExitCritical+0x50>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10b      	bne.n	8005d92 <vPortExitCritical+0x26>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	607b      	str	r3, [r7, #4]
}
 8005d8c:	bf00      	nop
 8005d8e:	bf00      	nop
 8005d90:	e7fd      	b.n	8005d8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d92:	4b0a      	ldr	r3, [pc, #40]	@ (8005dbc <vPortExitCritical+0x50>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	4a08      	ldr	r2, [pc, #32]	@ (8005dbc <vPortExitCritical+0x50>)
 8005d9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d9c:	4b07      	ldr	r3, [pc, #28]	@ (8005dbc <vPortExitCritical+0x50>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <vPortExitCritical+0x44>
 8005da4:	2300      	movs	r3, #0
 8005da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f383 8811 	msr	BASEPRI, r3
}
 8005dae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	2000000c 	.word	0x2000000c

08005dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005dc0:	f3ef 8009 	mrs	r0, PSP
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	4b15      	ldr	r3, [pc, #84]	@ (8005e20 <pxCurrentTCBConst>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	f01e 0f10 	tst.w	lr, #16
 8005dd0:	bf08      	it	eq
 8005dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dda:	6010      	str	r0, [r2, #0]
 8005ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005de0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005de4:	f380 8811 	msr	BASEPRI, r0
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f7fe ffa0 	bl	8004d34 <vTaskSwitchContext>
 8005df4:	f04f 0000 	mov.w	r0, #0
 8005df8:	f380 8811 	msr	BASEPRI, r0
 8005dfc:	bc09      	pop	{r0, r3}
 8005dfe:	6819      	ldr	r1, [r3, #0]
 8005e00:	6808      	ldr	r0, [r1, #0]
 8005e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e06:	f01e 0f10 	tst.w	lr, #16
 8005e0a:	bf08      	it	eq
 8005e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e10:	f380 8809 	msr	PSP, r0
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	f3af 8000 	nop.w

08005e20 <pxCurrentTCBConst>:
 8005e20:	20000c40 	.word	0x20000c40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop

08005e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	607b      	str	r3, [r7, #4]
}
 8005e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e42:	f7fe febd 	bl	8004bc0 <xTaskIncrementTick>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e4c:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <xPortSysTickHandler+0x40>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	2300      	movs	r3, #0
 8005e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	f383 8811 	msr	BASEPRI, r3
}
 8005e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea0 <vPortSetupTimerInterrupt+0x34>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea4 <vPortSetupTimerInterrupt+0x38>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <vPortSetupTimerInterrupt+0x3c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a0a      	ldr	r2, [pc, #40]	@ (8005eac <vPortSetupTimerInterrupt+0x40>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	099b      	lsrs	r3, r3, #6
 8005e88:	4a09      	ldr	r2, [pc, #36]	@ (8005eb0 <vPortSetupTimerInterrupt+0x44>)
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e8e:	4b04      	ldr	r3, [pc, #16]	@ (8005ea0 <vPortSetupTimerInterrupt+0x34>)
 8005e90:	2207      	movs	r2, #7
 8005e92:	601a      	str	r2, [r3, #0]
}
 8005e94:	bf00      	nop
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	e000e010 	.word	0xe000e010
 8005ea4:	e000e018 	.word	0xe000e018
 8005ea8:	20000000 	.word	0x20000000
 8005eac:	10624dd3 	.word	0x10624dd3
 8005eb0:	e000e014 	.word	0xe000e014

08005eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ec4 <vPortEnableVFP+0x10>
 8005eb8:	6801      	ldr	r1, [r0, #0]
 8005eba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005ebe:	6001      	str	r1, [r0, #0]
 8005ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ec2:	bf00      	nop
 8005ec4:	e000ed88 	.word	0xe000ed88

08005ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ece:	f3ef 8305 	mrs	r3, IPSR
 8005ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b0f      	cmp	r3, #15
 8005ed8:	d915      	bls.n	8005f06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005eda:	4a18      	ldr	r2, [pc, #96]	@ (8005f3c <vPortValidateInterruptPriority+0x74>)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ee4:	4b16      	ldr	r3, [pc, #88]	@ (8005f40 <vPortValidateInterruptPriority+0x78>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	7afa      	ldrb	r2, [r7, #11]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d20b      	bcs.n	8005f06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	607b      	str	r3, [r7, #4]
}
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	e7fd      	b.n	8005f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f06:	4b0f      	ldr	r3, [pc, #60]	@ (8005f44 <vPortValidateInterruptPriority+0x7c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f48 <vPortValidateInterruptPriority+0x80>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d90b      	bls.n	8005f2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	603b      	str	r3, [r7, #0]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <vPortValidateInterruptPriority+0x62>
	}
 8005f2e:	bf00      	nop
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	e000e3f0 	.word	0xe000e3f0
 8005f40:	2000126c 	.word	0x2000126c
 8005f44:	e000ed0c 	.word	0xe000ed0c
 8005f48:	20001270 	.word	0x20001270

08005f4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	@ 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f58:	f7fe fd76 	bl	8004a48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80060d0 <pvPortMalloc+0x184>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f64:	f000 f924 	bl	80061b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f68:	4b5a      	ldr	r3, [pc, #360]	@ (80060d4 <pvPortMalloc+0x188>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f040 8095 	bne.w	80060a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01e      	beq.n	8005fba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f7c:	2208      	movs	r2, #8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4413      	add	r3, r2
 8005f82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d015      	beq.n	8005fba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f023 0307 	bic.w	r3, r3, #7
 8005f94:	3308      	adds	r3, #8
 8005f96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00b      	beq.n	8005fba <pvPortMalloc+0x6e>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	617b      	str	r3, [r7, #20]
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	e7fd      	b.n	8005fb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d06f      	beq.n	80060a0 <pvPortMalloc+0x154>
 8005fc0:	4b45      	ldr	r3, [pc, #276]	@ (80060d8 <pvPortMalloc+0x18c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d86a      	bhi.n	80060a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fca:	4b44      	ldr	r3, [pc, #272]	@ (80060dc <pvPortMalloc+0x190>)
 8005fcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fce:	4b43      	ldr	r3, [pc, #268]	@ (80060dc <pvPortMalloc+0x190>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fd4:	e004      	b.n	8005fe0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d903      	bls.n	8005ff2 <pvPortMalloc+0xa6>
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f1      	bne.n	8005fd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ff2:	4b37      	ldr	r3, [pc, #220]	@ (80060d0 <pvPortMalloc+0x184>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d051      	beq.n	80060a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2208      	movs	r2, #8
 8006002:	4413      	add	r3, r2
 8006004:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	1ad2      	subs	r2, r2, r3
 8006016:	2308      	movs	r3, #8
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	429a      	cmp	r2, r3
 800601c:	d920      	bls.n	8006060 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800601e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00b      	beq.n	8006048 <pvPortMalloc+0xfc>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	613b      	str	r3, [r7, #16]
}
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	e7fd      	b.n	8006044 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800605a:	69b8      	ldr	r0, [r7, #24]
 800605c:	f000 f90a 	bl	8006274 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006060:	4b1d      	ldr	r3, [pc, #116]	@ (80060d8 <pvPortMalloc+0x18c>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	4a1b      	ldr	r2, [pc, #108]	@ (80060d8 <pvPortMalloc+0x18c>)
 800606c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800606e:	4b1a      	ldr	r3, [pc, #104]	@ (80060d8 <pvPortMalloc+0x18c>)
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4b1b      	ldr	r3, [pc, #108]	@ (80060e0 <pvPortMalloc+0x194>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d203      	bcs.n	8006082 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800607a:	4b17      	ldr	r3, [pc, #92]	@ (80060d8 <pvPortMalloc+0x18c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a18      	ldr	r2, [pc, #96]	@ (80060e0 <pvPortMalloc+0x194>)
 8006080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	4b13      	ldr	r3, [pc, #76]	@ (80060d4 <pvPortMalloc+0x188>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	431a      	orrs	r2, r3
 800608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006096:	4b13      	ldr	r3, [pc, #76]	@ (80060e4 <pvPortMalloc+0x198>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3301      	adds	r3, #1
 800609c:	4a11      	ldr	r2, [pc, #68]	@ (80060e4 <pvPortMalloc+0x198>)
 800609e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060a0:	f7fe fce0 	bl	8004a64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <pvPortMalloc+0x17a>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	60fb      	str	r3, [r7, #12]
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	e7fd      	b.n	80060c2 <pvPortMalloc+0x176>
	return pvReturn;
 80060c6:	69fb      	ldr	r3, [r7, #28]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3728      	adds	r7, #40	@ 0x28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20001e7c 	.word	0x20001e7c
 80060d4:	20001e90 	.word	0x20001e90
 80060d8:	20001e80 	.word	0x20001e80
 80060dc:	20001e74 	.word	0x20001e74
 80060e0:	20001e84 	.word	0x20001e84
 80060e4:	20001e88 	.word	0x20001e88

080060e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d04f      	beq.n	800619a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060fa:	2308      	movs	r3, #8
 80060fc:	425b      	negs	r3, r3
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4413      	add	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	4b25      	ldr	r3, [pc, #148]	@ (80061a4 <vPortFree+0xbc>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4013      	ands	r3, r2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10b      	bne.n	800612e <vPortFree+0x46>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60fb      	str	r3, [r7, #12]
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	e7fd      	b.n	800612a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <vPortFree+0x66>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	60bb      	str	r3, [r7, #8]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	4b14      	ldr	r3, [pc, #80]	@ (80061a4 <vPortFree+0xbc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01e      	beq.n	800619a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d11a      	bne.n	800619a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	4b0e      	ldr	r3, [pc, #56]	@ (80061a4 <vPortFree+0xbc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	43db      	mvns	r3, r3
 800616e:	401a      	ands	r2, r3
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006174:	f7fe fc68 	bl	8004a48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	4b0a      	ldr	r3, [pc, #40]	@ (80061a8 <vPortFree+0xc0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4413      	add	r3, r2
 8006182:	4a09      	ldr	r2, [pc, #36]	@ (80061a8 <vPortFree+0xc0>)
 8006184:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006186:	6938      	ldr	r0, [r7, #16]
 8006188:	f000 f874 	bl	8006274 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800618c:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <vPortFree+0xc4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3301      	adds	r3, #1
 8006192:	4a06      	ldr	r2, [pc, #24]	@ (80061ac <vPortFree+0xc4>)
 8006194:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006196:	f7fe fc65 	bl	8004a64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800619a:	bf00      	nop
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20001e90 	.word	0x20001e90
 80061a8:	20001e80 	.word	0x20001e80
 80061ac:	20001e8c 	.word	0x20001e8c

080061b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80061ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061bc:	4b27      	ldr	r3, [pc, #156]	@ (800625c <prvHeapInit+0xac>)
 80061be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00c      	beq.n	80061e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3307      	adds	r3, #7
 80061ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0307 	bic.w	r3, r3, #7
 80061d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	4a1f      	ldr	r2, [pc, #124]	@ (800625c <prvHeapInit+0xac>)
 80061e0:	4413      	add	r3, r2
 80061e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006260 <prvHeapInit+0xb0>)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006260 <prvHeapInit+0xb0>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	4413      	add	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061fc:	2208      	movs	r2, #8
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1a9b      	subs	r3, r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0307 	bic.w	r3, r3, #7
 800620a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a15      	ldr	r2, [pc, #84]	@ (8006264 <prvHeapInit+0xb4>)
 8006210:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006212:	4b14      	ldr	r3, [pc, #80]	@ (8006264 <prvHeapInit+0xb4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2200      	movs	r2, #0
 8006218:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800621a:	4b12      	ldr	r3, [pc, #72]	@ (8006264 <prvHeapInit+0xb4>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	1ad2      	subs	r2, r2, r3
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006230:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <prvHeapInit+0xb4>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	4a0a      	ldr	r2, [pc, #40]	@ (8006268 <prvHeapInit+0xb8>)
 800623e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4a09      	ldr	r2, [pc, #36]	@ (800626c <prvHeapInit+0xbc>)
 8006246:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006248:	4b09      	ldr	r3, [pc, #36]	@ (8006270 <prvHeapInit+0xc0>)
 800624a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800624e:	601a      	str	r2, [r3, #0]
}
 8006250:	bf00      	nop
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	20001274 	.word	0x20001274
 8006260:	20001e74 	.word	0x20001e74
 8006264:	20001e7c 	.word	0x20001e7c
 8006268:	20001e84 	.word	0x20001e84
 800626c:	20001e80 	.word	0x20001e80
 8006270:	20001e90 	.word	0x20001e90

08006274 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800627c:	4b28      	ldr	r3, [pc, #160]	@ (8006320 <prvInsertBlockIntoFreeList+0xac>)
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	e002      	b.n	8006288 <prvInsertBlockIntoFreeList+0x14>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	429a      	cmp	r2, r3
 8006290:	d8f7      	bhi.n	8006282 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4413      	add	r3, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d108      	bne.n	80062b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	441a      	add	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	441a      	add	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d118      	bne.n	80062fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4b15      	ldr	r3, [pc, #84]	@ (8006324 <prvInsertBlockIntoFreeList+0xb0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d00d      	beq.n	80062f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	441a      	add	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	e008      	b.n	8006304 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006324 <prvInsertBlockIntoFreeList+0xb0>)
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	e003      	b.n	8006304 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	429a      	cmp	r2, r3
 800630a:	d002      	beq.n	8006312 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006312:	bf00      	nop
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20001e74 	.word	0x20001e74
 8006324:	20001e7c 	.word	0x20001e7c

08006328 <memset>:
 8006328:	4402      	add	r2, r0
 800632a:	4603      	mov	r3, r0
 800632c:	4293      	cmp	r3, r2
 800632e:	d100      	bne.n	8006332 <memset+0xa>
 8006330:	4770      	bx	lr
 8006332:	f803 1b01 	strb.w	r1, [r3], #1
 8006336:	e7f9      	b.n	800632c <memset+0x4>

08006338 <_reclaim_reent>:
 8006338:	4b29      	ldr	r3, [pc, #164]	@ (80063e0 <_reclaim_reent+0xa8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4283      	cmp	r3, r0
 800633e:	b570      	push	{r4, r5, r6, lr}
 8006340:	4604      	mov	r4, r0
 8006342:	d04b      	beq.n	80063dc <_reclaim_reent+0xa4>
 8006344:	69c3      	ldr	r3, [r0, #28]
 8006346:	b1ab      	cbz	r3, 8006374 <_reclaim_reent+0x3c>
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	b16b      	cbz	r3, 8006368 <_reclaim_reent+0x30>
 800634c:	2500      	movs	r5, #0
 800634e:	69e3      	ldr	r3, [r4, #28]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	5959      	ldr	r1, [r3, r5]
 8006354:	2900      	cmp	r1, #0
 8006356:	d13b      	bne.n	80063d0 <_reclaim_reent+0x98>
 8006358:	3504      	adds	r5, #4
 800635a:	2d80      	cmp	r5, #128	@ 0x80
 800635c:	d1f7      	bne.n	800634e <_reclaim_reent+0x16>
 800635e:	69e3      	ldr	r3, [r4, #28]
 8006360:	4620      	mov	r0, r4
 8006362:	68d9      	ldr	r1, [r3, #12]
 8006364:	f000 f872 	bl	800644c <_free_r>
 8006368:	69e3      	ldr	r3, [r4, #28]
 800636a:	6819      	ldr	r1, [r3, #0]
 800636c:	b111      	cbz	r1, 8006374 <_reclaim_reent+0x3c>
 800636e:	4620      	mov	r0, r4
 8006370:	f000 f86c 	bl	800644c <_free_r>
 8006374:	6961      	ldr	r1, [r4, #20]
 8006376:	b111      	cbz	r1, 800637e <_reclaim_reent+0x46>
 8006378:	4620      	mov	r0, r4
 800637a:	f000 f867 	bl	800644c <_free_r>
 800637e:	69e1      	ldr	r1, [r4, #28]
 8006380:	b111      	cbz	r1, 8006388 <_reclaim_reent+0x50>
 8006382:	4620      	mov	r0, r4
 8006384:	f000 f862 	bl	800644c <_free_r>
 8006388:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800638a:	b111      	cbz	r1, 8006392 <_reclaim_reent+0x5a>
 800638c:	4620      	mov	r0, r4
 800638e:	f000 f85d 	bl	800644c <_free_r>
 8006392:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006394:	b111      	cbz	r1, 800639c <_reclaim_reent+0x64>
 8006396:	4620      	mov	r0, r4
 8006398:	f000 f858 	bl	800644c <_free_r>
 800639c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800639e:	b111      	cbz	r1, 80063a6 <_reclaim_reent+0x6e>
 80063a0:	4620      	mov	r0, r4
 80063a2:	f000 f853 	bl	800644c <_free_r>
 80063a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80063a8:	b111      	cbz	r1, 80063b0 <_reclaim_reent+0x78>
 80063aa:	4620      	mov	r0, r4
 80063ac:	f000 f84e 	bl	800644c <_free_r>
 80063b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80063b2:	b111      	cbz	r1, 80063ba <_reclaim_reent+0x82>
 80063b4:	4620      	mov	r0, r4
 80063b6:	f000 f849 	bl	800644c <_free_r>
 80063ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80063bc:	b111      	cbz	r1, 80063c4 <_reclaim_reent+0x8c>
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 f844 	bl	800644c <_free_r>
 80063c4:	6a23      	ldr	r3, [r4, #32]
 80063c6:	b14b      	cbz	r3, 80063dc <_reclaim_reent+0xa4>
 80063c8:	4620      	mov	r0, r4
 80063ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063ce:	4718      	bx	r3
 80063d0:	680e      	ldr	r6, [r1, #0]
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 f83a 	bl	800644c <_free_r>
 80063d8:	4631      	mov	r1, r6
 80063da:	e7bb      	b.n	8006354 <_reclaim_reent+0x1c>
 80063dc:	bd70      	pop	{r4, r5, r6, pc}
 80063de:	bf00      	nop
 80063e0:	20000010 	.word	0x20000010

080063e4 <__libc_init_array>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	4d0d      	ldr	r5, [pc, #52]	@ (800641c <__libc_init_array+0x38>)
 80063e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006420 <__libc_init_array+0x3c>)
 80063ea:	1b64      	subs	r4, r4, r5
 80063ec:	10a4      	asrs	r4, r4, #2
 80063ee:	2600      	movs	r6, #0
 80063f0:	42a6      	cmp	r6, r4
 80063f2:	d109      	bne.n	8006408 <__libc_init_array+0x24>
 80063f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006424 <__libc_init_array+0x40>)
 80063f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006428 <__libc_init_array+0x44>)
 80063f8:	f000 f87e 	bl	80064f8 <_init>
 80063fc:	1b64      	subs	r4, r4, r5
 80063fe:	10a4      	asrs	r4, r4, #2
 8006400:	2600      	movs	r6, #0
 8006402:	42a6      	cmp	r6, r4
 8006404:	d105      	bne.n	8006412 <__libc_init_array+0x2e>
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	f855 3b04 	ldr.w	r3, [r5], #4
 800640c:	4798      	blx	r3
 800640e:	3601      	adds	r6, #1
 8006410:	e7ee      	b.n	80063f0 <__libc_init_array+0xc>
 8006412:	f855 3b04 	ldr.w	r3, [r5], #4
 8006416:	4798      	blx	r3
 8006418:	3601      	adds	r6, #1
 800641a:	e7f2      	b.n	8006402 <__libc_init_array+0x1e>
 800641c:	080065a0 	.word	0x080065a0
 8006420:	080065a0 	.word	0x080065a0
 8006424:	080065a0 	.word	0x080065a0
 8006428:	080065a4 	.word	0x080065a4

0800642c <__retarget_lock_acquire_recursive>:
 800642c:	4770      	bx	lr

0800642e <__retarget_lock_release_recursive>:
 800642e:	4770      	bx	lr

08006430 <memcpy>:
 8006430:	440a      	add	r2, r1
 8006432:	4291      	cmp	r1, r2
 8006434:	f100 33ff 	add.w	r3, r0, #4294967295
 8006438:	d100      	bne.n	800643c <memcpy+0xc>
 800643a:	4770      	bx	lr
 800643c:	b510      	push	{r4, lr}
 800643e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006446:	4291      	cmp	r1, r2
 8006448:	d1f9      	bne.n	800643e <memcpy+0xe>
 800644a:	bd10      	pop	{r4, pc}

0800644c <_free_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4605      	mov	r5, r0
 8006450:	2900      	cmp	r1, #0
 8006452:	d041      	beq.n	80064d8 <_free_r+0x8c>
 8006454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006458:	1f0c      	subs	r4, r1, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	bfb8      	it	lt
 800645e:	18e4      	addlt	r4, r4, r3
 8006460:	f000 f83e 	bl	80064e0 <__malloc_lock>
 8006464:	4a1d      	ldr	r2, [pc, #116]	@ (80064dc <_free_r+0x90>)
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	b933      	cbnz	r3, 8006478 <_free_r+0x2c>
 800646a:	6063      	str	r3, [r4, #4]
 800646c:	6014      	str	r4, [r2, #0]
 800646e:	4628      	mov	r0, r5
 8006470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006474:	f000 b83a 	b.w	80064ec <__malloc_unlock>
 8006478:	42a3      	cmp	r3, r4
 800647a:	d908      	bls.n	800648e <_free_r+0x42>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	1821      	adds	r1, r4, r0
 8006480:	428b      	cmp	r3, r1
 8006482:	bf01      	itttt	eq
 8006484:	6819      	ldreq	r1, [r3, #0]
 8006486:	685b      	ldreq	r3, [r3, #4]
 8006488:	1809      	addeq	r1, r1, r0
 800648a:	6021      	streq	r1, [r4, #0]
 800648c:	e7ed      	b.n	800646a <_free_r+0x1e>
 800648e:	461a      	mov	r2, r3
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	b10b      	cbz	r3, 8006498 <_free_r+0x4c>
 8006494:	42a3      	cmp	r3, r4
 8006496:	d9fa      	bls.n	800648e <_free_r+0x42>
 8006498:	6811      	ldr	r1, [r2, #0]
 800649a:	1850      	adds	r0, r2, r1
 800649c:	42a0      	cmp	r0, r4
 800649e:	d10b      	bne.n	80064b8 <_free_r+0x6c>
 80064a0:	6820      	ldr	r0, [r4, #0]
 80064a2:	4401      	add	r1, r0
 80064a4:	1850      	adds	r0, r2, r1
 80064a6:	4283      	cmp	r3, r0
 80064a8:	6011      	str	r1, [r2, #0]
 80064aa:	d1e0      	bne.n	800646e <_free_r+0x22>
 80064ac:	6818      	ldr	r0, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	6053      	str	r3, [r2, #4]
 80064b2:	4408      	add	r0, r1
 80064b4:	6010      	str	r0, [r2, #0]
 80064b6:	e7da      	b.n	800646e <_free_r+0x22>
 80064b8:	d902      	bls.n	80064c0 <_free_r+0x74>
 80064ba:	230c      	movs	r3, #12
 80064bc:	602b      	str	r3, [r5, #0]
 80064be:	e7d6      	b.n	800646e <_free_r+0x22>
 80064c0:	6820      	ldr	r0, [r4, #0]
 80064c2:	1821      	adds	r1, r4, r0
 80064c4:	428b      	cmp	r3, r1
 80064c6:	bf04      	itt	eq
 80064c8:	6819      	ldreq	r1, [r3, #0]
 80064ca:	685b      	ldreq	r3, [r3, #4]
 80064cc:	6063      	str	r3, [r4, #4]
 80064ce:	bf04      	itt	eq
 80064d0:	1809      	addeq	r1, r1, r0
 80064d2:	6021      	streq	r1, [r4, #0]
 80064d4:	6054      	str	r4, [r2, #4]
 80064d6:	e7ca      	b.n	800646e <_free_r+0x22>
 80064d8:	bd38      	pop	{r3, r4, r5, pc}
 80064da:	bf00      	nop
 80064dc:	20001fd0 	.word	0x20001fd0

080064e0 <__malloc_lock>:
 80064e0:	4801      	ldr	r0, [pc, #4]	@ (80064e8 <__malloc_lock+0x8>)
 80064e2:	f7ff bfa3 	b.w	800642c <__retarget_lock_acquire_recursive>
 80064e6:	bf00      	nop
 80064e8:	20001fcc 	.word	0x20001fcc

080064ec <__malloc_unlock>:
 80064ec:	4801      	ldr	r0, [pc, #4]	@ (80064f4 <__malloc_unlock+0x8>)
 80064ee:	f7ff bf9e 	b.w	800642e <__retarget_lock_release_recursive>
 80064f2:	bf00      	nop
 80064f4:	20001fcc 	.word	0x20001fcc

080064f8 <_init>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	bf00      	nop
 80064fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fe:	bc08      	pop	{r3}
 8006500:	469e      	mov	lr, r3
 8006502:	4770      	bx	lr

08006504 <_fini>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	bf00      	nop
 8006508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650a:	bc08      	pop	{r3}
 800650c:	469e      	mov	lr, r3
 800650e:	4770      	bx	lr
