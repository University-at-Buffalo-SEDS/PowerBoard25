
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005390  08005390  00006390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  080053e8  080053e8  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053e8  080053e8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e8  080053e8  000063e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053ec  080053ec  000063ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080053f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee0  20000060  08005450  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f40  08005450  00007f40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a30a  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003940  00000000  00000000  0002139a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00024ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c7  00000000  00000000  000262d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003caa  00000000  00000000  0002739f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018838  00000000  00000000  0002b049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd050  00000000  00000000  00043881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001108d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f50  00000000  00000000  00110914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00116864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005378 	.word	0x08005378

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08005378 	.word	0x08005378

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fae7 	bl	80007f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81c 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f90a 	bl	8000444 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000230:	f000 f85a 	bl	80002e8 <MX_FDCAN2_Init>
  MX_USB_PCD_Init();
 8000234:	f000 f8de 	bl	80003f4 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8000238:	f000 f89c 	bl	8000374 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800023c:	f002 fa04 	bl	8002648 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000240:	4a05      	ldr	r2, [pc, #20]	@ (8000258 <main+0x38>)
 8000242:	2100      	movs	r1, #0
 8000244:	4805      	ldr	r0, [pc, #20]	@ (800025c <main+0x3c>)
 8000246:	f002 fa49 	bl	80026dc <osThreadNew>
 800024a:	4603      	mov	r3, r0
 800024c:	4a04      	ldr	r2, [pc, #16]	@ (8000260 <main+0x40>)
 800024e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000250:	f002 fa1e 	bl	8002690 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000254:	bf00      	nop
 8000256:	e7fd      	b.n	8000254 <main+0x34>
 8000258:	080053b4 	.word	0x080053b4
 800025c:	080004f1 	.word	0x080004f1
 8000260:	20000410 	.word	0x20000410

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b094      	sub	sp, #80	@ 0x50
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	2238      	movs	r2, #56	@ 0x38
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f004 ff98 	bl	80051a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000286:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800028a:	f001 f989 	bl	80015a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800028e:	2322      	movs	r3, #34	@ 0x22
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000296:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000298:	2340      	movs	r3, #64	@ 0x40
 800029a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800029c:	2301      	movs	r3, #1
 800029e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a0:	2300      	movs	r3, #0
 80002a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fa2d 	bl	8001708 <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002b4:	f000 f924 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002bc:	2301      	movs	r3, #1
 80002be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 fd2b 	bl	8001d2c <HAL_RCC_ClockConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80002dc:	f000 f910 	bl	8000500 <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3750      	adds	r7, #80	@ 0x50
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80002ec:	4b1f      	ldr	r3, [pc, #124]	@ (800036c <MX_FDCAN2_Init+0x84>)
 80002ee:	4a20      	ldr	r2, [pc, #128]	@ (8000370 <MX_FDCAN2_Init+0x88>)
 80002f0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002f2:	4b1e      	ldr	r3, [pc, #120]	@ (800036c <MX_FDCAN2_Init+0x84>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002f8:	4b1c      	ldr	r3, [pc, #112]	@ (800036c <MX_FDCAN2_Init+0x84>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80002fe:	4b1b      	ldr	r3, [pc, #108]	@ (800036c <MX_FDCAN2_Init+0x84>)
 8000300:	2200      	movs	r2, #0
 8000302:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000304:	4b19      	ldr	r3, [pc, #100]	@ (800036c <MX_FDCAN2_Init+0x84>)
 8000306:	2200      	movs	r2, #0
 8000308:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800030a:	4b18      	ldr	r3, [pc, #96]	@ (800036c <MX_FDCAN2_Init+0x84>)
 800030c:	2200      	movs	r2, #0
 800030e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000310:	4b16      	ldr	r3, [pc, #88]	@ (800036c <MX_FDCAN2_Init+0x84>)
 8000312:	2200      	movs	r2, #0
 8000314:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000316:	4b15      	ldr	r3, [pc, #84]	@ (800036c <MX_FDCAN2_Init+0x84>)
 8000318:	2210      	movs	r2, #16
 800031a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800031c:	4b13      	ldr	r3, [pc, #76]	@ (800036c <MX_FDCAN2_Init+0x84>)
 800031e:	2201      	movs	r2, #1
 8000320:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8000322:	4b12      	ldr	r3, [pc, #72]	@ (800036c <MX_FDCAN2_Init+0x84>)
 8000324:	2201      	movs	r2, #1
 8000326:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8000328:	4b10      	ldr	r3, [pc, #64]	@ (800036c <MX_FDCAN2_Init+0x84>)
 800032a:	2201      	movs	r2, #1
 800032c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800032e:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <MX_FDCAN2_Init+0x84>)
 8000330:	2201      	movs	r2, #1
 8000332:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000334:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <MX_FDCAN2_Init+0x84>)
 8000336:	2201      	movs	r2, #1
 8000338:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800033a:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <MX_FDCAN2_Init+0x84>)
 800033c:	2201      	movs	r2, #1
 800033e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000340:	4b0a      	ldr	r3, [pc, #40]	@ (800036c <MX_FDCAN2_Init+0x84>)
 8000342:	2201      	movs	r2, #1
 8000344:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000346:	4b09      	ldr	r3, [pc, #36]	@ (800036c <MX_FDCAN2_Init+0x84>)
 8000348:	2200      	movs	r2, #0
 800034a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800034c:	4b07      	ldr	r3, [pc, #28]	@ (800036c <MX_FDCAN2_Init+0x84>)
 800034e:	2200      	movs	r2, #0
 8000350:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000352:	4b06      	ldr	r3, [pc, #24]	@ (800036c <MX_FDCAN2_Init+0x84>)
 8000354:	2200      	movs	r2, #0
 8000356:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000358:	4804      	ldr	r0, [pc, #16]	@ (800036c <MX_FDCAN2_Init+0x84>)
 800035a:	f000 fba1 	bl	8000aa0 <HAL_FDCAN_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000364:	f000 f8cc 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	2000007c 	.word	0x2000007c
 8000370:	40006800 	.word	0x40006800

08000374 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000378:	4b1b      	ldr	r3, [pc, #108]	@ (80003e8 <MX_I2C2_Init+0x74>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <MX_I2C2_Init+0x78>)
 800037c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800037e:	4b1a      	ldr	r3, [pc, #104]	@ (80003e8 <MX_I2C2_Init+0x74>)
 8000380:	4a1b      	ldr	r2, [pc, #108]	@ (80003f0 <MX_I2C2_Init+0x7c>)
 8000382:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000384:	4b18      	ldr	r3, [pc, #96]	@ (80003e8 <MX_I2C2_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800038a:	4b17      	ldr	r3, [pc, #92]	@ (80003e8 <MX_I2C2_Init+0x74>)
 800038c:	2201      	movs	r2, #1
 800038e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000390:	4b15      	ldr	r3, [pc, #84]	@ (80003e8 <MX_I2C2_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000396:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <MX_I2C2_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800039c:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <MX_I2C2_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a2:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <MX_I2C2_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <MX_I2C2_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003ae:	480e      	ldr	r0, [pc, #56]	@ (80003e8 <MX_I2C2_Init+0x74>)
 80003b0:	f000 fecc 	bl	800114c <HAL_I2C_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003ba:	f000 f8a1 	bl	8000500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003be:	2100      	movs	r1, #0
 80003c0:	4809      	ldr	r0, [pc, #36]	@ (80003e8 <MX_I2C2_Init+0x74>)
 80003c2:	f000 ff5e 	bl	8001282 <HAL_I2CEx_ConfigAnalogFilter>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003cc:	f000 f898 	bl	8000500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003d0:	2100      	movs	r1, #0
 80003d2:	4805      	ldr	r0, [pc, #20]	@ (80003e8 <MX_I2C2_Init+0x74>)
 80003d4:	f000 ffa0 	bl	8001318 <HAL_I2CEx_ConfigDigitalFilter>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003de:	f000 f88f 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	200000e0 	.word	0x200000e0
 80003ec:	40005800 	.word	0x40005800
 80003f0:	00503d58 	.word	0x00503d58

080003f4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80003f8:	4b10      	ldr	r3, [pc, #64]	@ (800043c <MX_USB_PCD_Init+0x48>)
 80003fa:	4a11      	ldr	r2, [pc, #68]	@ (8000440 <MX_USB_PCD_Init+0x4c>)
 80003fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80003fe:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <MX_USB_PCD_Init+0x48>)
 8000400:	2208      	movs	r2, #8
 8000402:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000404:	4b0d      	ldr	r3, [pc, #52]	@ (800043c <MX_USB_PCD_Init+0x48>)
 8000406:	2202      	movs	r2, #2
 8000408:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800040a:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <MX_USB_PCD_Init+0x48>)
 800040c:	2202      	movs	r2, #2
 800040e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000410:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <MX_USB_PCD_Init+0x48>)
 8000412:	2200      	movs	r2, #0
 8000414:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000416:	4b09      	ldr	r3, [pc, #36]	@ (800043c <MX_USB_PCD_Init+0x48>)
 8000418:	2200      	movs	r2, #0
 800041a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800041c:	4b07      	ldr	r3, [pc, #28]	@ (800043c <MX_USB_PCD_Init+0x48>)
 800041e:	2200      	movs	r2, #0
 8000420:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <MX_USB_PCD_Init+0x48>)
 8000424:	2200      	movs	r2, #0
 8000426:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000428:	4804      	ldr	r0, [pc, #16]	@ (800043c <MX_USB_PCD_Init+0x48>)
 800042a:	f000 ffc1 	bl	80013b0 <HAL_PCD_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000434:	f000 f864 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000134 	.word	0x20000134
 8000440:	40005c00 	.word	0x40005c00

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	@ 0x28
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045a:	4b23      	ldr	r3, [pc, #140]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	4a22      	ldr	r2, [pc, #136]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 8000460:	f043 0304 	orr.w	r3, r3, #4
 8000464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000466:	4b20      	ldr	r3, [pc, #128]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	613b      	str	r3, [r7, #16]
 8000470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000472:	4b1d      	ldr	r3, [pc, #116]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000476:	4a1c      	ldr	r2, [pc, #112]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 8000478:	f043 0320 	orr.w	r3, r3, #32
 800047c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800047e:	4b1a      	ldr	r3, [pc, #104]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000482:	f003 0320 	and.w	r3, r3, #32
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	4a16      	ldr	r2, [pc, #88]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049a:	f003 0302 	and.w	r3, r3, #2
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a6:	4a10      	ldr	r2, [pc, #64]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ae:	4b0e      	ldr	r3, [pc, #56]	@ (80004e8 <MX_GPIO_Init+0xa4>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2120      	movs	r1, #32
 80004be:	480b      	ldr	r0, [pc, #44]	@ (80004ec <MX_GPIO_Init+0xa8>)
 80004c0:	f000 fe2c 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004c4:	2320      	movs	r3, #32
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	2300      	movs	r3, #0
 80004d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	4619      	mov	r1, r3
 80004da:	4804      	ldr	r0, [pc, #16]	@ (80004ec <MX_GPIO_Init+0xa8>)
 80004dc:	f000 fc9c 	bl	8000e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e0:	bf00      	nop
 80004e2:	3728      	adds	r7, #40	@ 0x28
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	48000400 	.word	0x48000400

080004f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f002 f981 	bl	8002800 <osDelay>
 80004fe:	e7fb      	b.n	80004f8 <StartDefaultTask+0x8>

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <Error_Handler+0x8>

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <HAL_MspInit+0x50>)
 8000514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000516:	4a11      	ldr	r2, [pc, #68]	@ (800055c <HAL_MspInit+0x50>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6613      	str	r3, [r2, #96]	@ 0x60
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <HAL_MspInit+0x50>)
 8000520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <HAL_MspInit+0x50>)
 800052c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800052e:	4a0b      	ldr	r2, [pc, #44]	@ (800055c <HAL_MspInit+0x50>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000534:	6593      	str	r3, [r2, #88]	@ 0x58
 8000536:	4b09      	ldr	r3, [pc, #36]	@ (800055c <HAL_MspInit+0x50>)
 8000538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800053a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	210f      	movs	r1, #15
 8000546:	f06f 0001 	mvn.w	r0, #1
 800054a:	f000 fa82 	bl	8000a52 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800054e:	f001 f8cb 	bl	80016e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000

08000560 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b09e      	sub	sp, #120	@ 0x78
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2250      	movs	r2, #80	@ 0x50
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f004 fe11 	bl	80051a8 <memset>
  if(hfdcan->Instance==FDCAN2)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a20      	ldr	r2, [pc, #128]	@ (800060c <HAL_FDCAN_MspInit+0xac>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d138      	bne.n	8000602 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000594:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000596:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800059a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fda7 	bl	80020f4 <HAL_RCCEx_PeriphCLKConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80005ac:	f7ff ffa8 	bl	8000500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <HAL_FDCAN_MspInit+0xb0>)
 80005b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b4:	4a16      	ldr	r2, [pc, #88]	@ (8000610 <HAL_FDCAN_MspInit+0xb0>)
 80005b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80005bc:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <HAL_FDCAN_MspInit+0xb0>)
 80005be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <HAL_FDCAN_MspInit+0xb0>)
 80005ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005cc:	4a10      	ldr	r2, [pc, #64]	@ (8000610 <HAL_FDCAN_MspInit+0xb0>)
 80005ce:	f043 0302 	orr.w	r3, r3, #2
 80005d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <HAL_FDCAN_MspInit+0xb0>)
 80005d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d8:	f003 0302 	and.w	r3, r3, #2
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80005e0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80005e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80005f2:	2309      	movs	r3, #9
 80005f4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <HAL_FDCAN_MspInit+0xb4>)
 80005fe:	f000 fc0b 	bl	8000e18 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8000602:	bf00      	nop
 8000604:	3778      	adds	r7, #120	@ 0x78
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40006800 	.word	0x40006800
 8000610:	40021000 	.word	0x40021000
 8000614:	48000400 	.word	0x48000400

08000618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b09e      	sub	sp, #120	@ 0x78
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2250      	movs	r2, #80	@ 0x50
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f004 fdb5 	bl	80051a8 <memset>
  if(hi2c->Instance==I2C2)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a1f      	ldr	r2, [pc, #124]	@ (80006c0 <HAL_I2C_MspInit+0xa8>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d137      	bne.n	80006b8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000648:	2380      	movs	r3, #128	@ 0x80
 800064a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800064c:	2300      	movs	r3, #0
 800064e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fd4d 	bl	80020f4 <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000660:	f7ff ff4e 	bl	8000500 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <HAL_I2C_MspInit+0xac>)
 8000666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000668:	4a16      	ldr	r2, [pc, #88]	@ (80006c4 <HAL_I2C_MspInit+0xac>)
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <HAL_I2C_MspInit+0xac>)
 8000672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800067c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000680:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000682:	2312      	movs	r3, #18
 8000684:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800068e:	2304      	movs	r3, #4
 8000690:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069c:	f000 fbbc 	bl	8000e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <HAL_I2C_MspInit+0xac>)
 80006a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a4:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <HAL_I2C_MspInit+0xac>)
 80006a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <HAL_I2C_MspInit+0xac>)
 80006ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80006b8:	bf00      	nop
 80006ba:	3778      	adds	r7, #120	@ 0x78
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40005800 	.word	0x40005800
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b098      	sub	sp, #96	@ 0x60
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2250      	movs	r2, #80	@ 0x50
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 fd65 	bl	80051a8 <memset>
  if(hpcd->Instance==USB)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a11      	ldr	r2, [pc, #68]	@ (8000728 <HAL_PCD_MspInit+0x60>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d11a      	bne.n	800071e <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006ee:	2300      	movs	r3, #0
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fcfc 	bl	80020f4 <HAL_RCCEx_PeriphCLKConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8000702:	f7ff fefd 	bl	8000500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <HAL_PCD_MspInit+0x64>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070a:	4a08      	ldr	r2, [pc, #32]	@ (800072c <HAL_PCD_MspInit+0x64>)
 800070c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000710:	6593      	str	r3, [r2, #88]	@ 0x58
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <HAL_PCD_MspInit+0x64>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 800071e:	bf00      	nop
 8000720:	3760      	adds	r7, #96	@ 0x60
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40005c00 	.word	0x40005c00
 800072c:	40021000 	.word	0x40021000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <MemManage_Handler+0x4>

08000748 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <UsageFault_Handler+0x4>

08000758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076a:	f000 f897 	bl	800089c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800076e:	f003 fc9d 	bl	80040ac <xTaskGetSchedulerState>
 8000772:	4603      	mov	r3, r0
 8000774:	2b01      	cmp	r3, #1
 8000776:	d001      	beq.n	800077c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000778:	f004 fa96 	bl	8004ca8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <SystemInit+0x20>)
 8000786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800078a:	4a05      	ldr	r2, [pc, #20]	@ (80007a0 <SystemInit+0x20>)
 800078c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000790:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a4:	480d      	ldr	r0, [pc, #52]	@ (80007dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a8:	f7ff ffea 	bl	8000780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ae:	490d      	ldr	r1, [pc, #52]	@ (80007e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b0:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <LoopForever+0xe>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c4:	4c0a      	ldr	r4, [pc, #40]	@ (80007f0 <LoopForever+0x16>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d2:	f004 fd47 	bl	8005264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007d6:	f7ff fd23 	bl	8000220 <main>

080007da <LoopForever>:

LoopForever:
    b LoopForever
 80007da:	e7fe      	b.n	80007da <LoopForever>
  ldr   r0, =_estack
 80007dc:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007e8:	080053f0 	.word	0x080053f0
  ldr r2, =_sbss
 80007ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007f0:	20001f40 	.word	0x20001f40

080007f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_2_IRQHandler>

080007f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007fc:	2300      	movs	r3, #0
 80007fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000800:	2003      	movs	r0, #3
 8000802:	f000 f91b 	bl	8000a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000806:	200f      	movs	r0, #15
 8000808:	f000 f80e 	bl	8000828 <HAL_InitTick>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e001      	b.n	800081c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000818:	f7ff fe78 	bl	800050c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800081c:	79fb      	ldrb	r3, [r7, #7]

}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <HAL_InitTick+0x68>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d022      	beq.n	8000882 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800083c:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <HAL_InitTick+0x6c>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <HAL_InitTick+0x68>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000848:	fbb1 f3f3 	udiv	r3, r1, r3
 800084c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f918 	bl	8000a86 <HAL_SYSTICK_Config>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d10f      	bne.n	800087c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b0f      	cmp	r3, #15
 8000860:	d809      	bhi.n	8000876 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000862:	2200      	movs	r2, #0
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	f04f 30ff 	mov.w	r0, #4294967295
 800086a:	f000 f8f2 	bl	8000a52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800086e:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <HAL_InitTick+0x70>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	e007      	b.n	8000886 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	e004      	b.n	8000886 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e001      	b.n	8000886 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000008 	.word	0x20000008
 8000894:	20000000 	.word	0x20000000
 8000898:	20000004 	.word	0x20000004

0800089c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a0:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <HAL_IncTick+0x1c>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <HAL_IncTick+0x20>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a03      	ldr	r2, [pc, #12]	@ (80008b8 <HAL_IncTick+0x1c>)
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	20000414 	.word	0x20000414
 80008bc:	20000008 	.word	0x20000008

080008c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;
 80008c4:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <HAL_GetTick+0x14>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000414 	.word	0x20000414

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	db0a      	blt.n	8000966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	490c      	ldr	r1, [pc, #48]	@ (8000988 <__NVIC_SetPriority+0x4c>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	440b      	add	r3, r1
 8000960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000964:	e00a      	b.n	800097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4908      	ldr	r1, [pc, #32]	@ (800098c <__NVIC_SetPriority+0x50>)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	3b04      	subs	r3, #4
 8000974:	0112      	lsls	r2, r2, #4
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	440b      	add	r3, r1
 800097a:	761a      	strb	r2, [r3, #24]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	@ 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f1c3 0307 	rsb	r3, r3, #7
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	bf28      	it	cs
 80009ae:	2304      	movcs	r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3304      	adds	r3, #4
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d902      	bls.n	80009c0 <NVIC_EncodePriority+0x30>
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3b03      	subs	r3, #3
 80009be:	e000      	b.n	80009c2 <NVIC_EncodePriority+0x32>
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43da      	mvns	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43d9      	mvns	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	4313      	orrs	r3, r2
         );
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3724      	adds	r7, #36	@ 0x24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a08:	d301      	bcc.n	8000a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00f      	b.n	8000a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <SysTick_Config+0x40>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a16:	210f      	movs	r1, #15
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f7ff ff8e 	bl	800093c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <SysTick_Config+0x40>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <SysTick_Config+0x40>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ff47 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a60:	f7ff ff5e 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000a64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff ff90 	bl	8000990 <NVIC_EncodePriority>
 8000a70:	4602      	mov	r2, r0
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff5f 	bl	800093c <__NVIC_SetPriority>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffb2 	bl	80009f8 <SysTick_Config>
 8000a94:	4603      	mov	r3, r0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e147      	b.n	8000d42 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d106      	bne.n	8000acc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fd4a 	bl	8000560 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	699a      	ldr	r2, [r3, #24]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 0210 	bic.w	r2, r2, #16
 8000ada:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000adc:	f7ff fef0 	bl	80008c0 <HAL_GetTick>
 8000ae0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ae2:	e012      	b.n	8000b0a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ae4:	f7ff feec 	bl	80008c0 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b0a      	cmp	r3, #10
 8000af0:	d90b      	bls.n	8000b0a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af6:	f043 0201 	orr.w	r2, r3, #1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2203      	movs	r2, #3
 8000b02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e11b      	b.n	8000d42 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	2b08      	cmp	r3, #8
 8000b16:	d0e5      	beq.n	8000ae4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	699a      	ldr	r2, [r3, #24]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f042 0201 	orr.w	r2, r2, #1
 8000b26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b28:	f7ff feca 	bl	80008c0 <HAL_GetTick>
 8000b2c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000b2e:	e012      	b.n	8000b56 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000b30:	f7ff fec6 	bl	80008c0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	2b0a      	cmp	r3, #10
 8000b3c:	d90b      	bls.n	8000b56 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b42:	f043 0201 	orr.w	r2, r3, #1
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e0f5      	b.n	8000d42 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0e5      	beq.n	8000b30 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	699a      	ldr	r2, [r3, #24]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f042 0202 	orr.w	r2, r2, #2
 8000b72:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a74      	ldr	r2, [pc, #464]	@ (8000d4c <HAL_FDCAN_Init+0x2ac>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d103      	bne.n	8000b86 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000b7e:	4a74      	ldr	r2, [pc, #464]	@ (8000d50 <HAL_FDCAN_Init+0x2b0>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	7c1b      	ldrb	r3, [r3, #16]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d108      	bne.n	8000ba0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	699a      	ldr	r2, [r3, #24]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b9c:	619a      	str	r2, [r3, #24]
 8000b9e:	e007      	b.n	8000bb0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	699a      	ldr	r2, [r3, #24]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bae:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7c5b      	ldrb	r3, [r3, #17]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d108      	bne.n	8000bca <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	699a      	ldr	r2, [r3, #24]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000bc6:	619a      	str	r2, [r3, #24]
 8000bc8:	e007      	b.n	8000bda <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	699a      	ldr	r2, [r3, #24]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000bd8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7c9b      	ldrb	r3, [r3, #18]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d108      	bne.n	8000bf4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	699a      	ldr	r2, [r3, #24]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000bf0:	619a      	str	r2, [r3, #24]
 8000bf2:	e007      	b.n	8000c04 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	699a      	ldr	r2, [r3, #24]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000c02:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	430a      	orrs	r2, r1
 8000c18:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	699a      	ldr	r2, [r3, #24]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000c28:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	691a      	ldr	r2, [r3, #16]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0210 	bic.w	r2, r2, #16
 8000c38:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d108      	bne.n	8000c54 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	699a      	ldr	r2, [r3, #24]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f042 0204 	orr.w	r2, r2, #4
 8000c50:	619a      	str	r2, [r3, #24]
 8000c52:	e02c      	b.n	8000cae <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d028      	beq.n	8000cae <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d01c      	beq.n	8000c9e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	699a      	ldr	r2, [r3, #24]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c72:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 0210 	orr.w	r2, r2, #16
 8000c82:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d110      	bne.n	8000cae <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	699a      	ldr	r2, [r3, #24]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f042 0220 	orr.w	r2, r2, #32
 8000c9a:	619a      	str	r2, [r3, #24]
 8000c9c:	e007      	b.n	8000cae <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	699a      	ldr	r2, [r3, #24]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0220 	orr.w	r2, r2, #32
 8000cac:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000cbe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000cc6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000cd6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000cd8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000ce2:	d115      	bne.n	8000d10 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000cf2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000cfc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d04:	3b01      	subs	r3, #1
 8000d06:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000d0c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d0e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	430a      	orrs	r2, r1
 8000d22:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f814 	bl	8000d54 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40006400 	.word	0x40006400
 8000d50:	40006500 	.word	0x40006500

08000d54 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8000d5e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a2b      	ldr	r2, [pc, #172]	@ (8000e14 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d103      	bne.n	8000d72 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8000d70:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d80:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d88:	041a      	lsls	r2, r3, #16
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da6:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dae:	061a      	lsls	r2, r3, #24
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	430a      	orrs	r2, r1
 8000db6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e005      	b.n	8000df4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3304      	adds	r3, #4
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d3f3      	bcc.n	8000de8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	4000a400 	.word	0x4000a400
 8000e14:	40006800 	.word	0x40006800

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e26:	e15a      	b.n	80010de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 814c 	beq.w	80010d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d005      	beq.n	8000e58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	f003 0201 	and.w	r2, r3, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d017      	beq.n	8000ef6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d123      	bne.n	8000f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	6939      	ldr	r1, [r7, #16]
 8000f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0203 	and.w	r2, r3, #3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80a6 	beq.w	80010d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	4b5b      	ldr	r3, [pc, #364]	@ (80010fc <HAL_GPIO_Init+0x2e4>)
 8000f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f90:	4a5a      	ldr	r2, [pc, #360]	@ (80010fc <HAL_GPIO_Init+0x2e4>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f98:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <HAL_GPIO_Init+0x2e4>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa4:	4a56      	ldr	r2, [pc, #344]	@ (8001100 <HAL_GPIO_Init+0x2e8>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fce:	d01f      	beq.n	8001010 <HAL_GPIO_Init+0x1f8>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a4c      	ldr	r2, [pc, #304]	@ (8001104 <HAL_GPIO_Init+0x2ec>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d019      	beq.n	800100c <HAL_GPIO_Init+0x1f4>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a4b      	ldr	r2, [pc, #300]	@ (8001108 <HAL_GPIO_Init+0x2f0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d013      	beq.n	8001008 <HAL_GPIO_Init+0x1f0>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800110c <HAL_GPIO_Init+0x2f4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d00d      	beq.n	8001004 <HAL_GPIO_Init+0x1ec>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a49      	ldr	r2, [pc, #292]	@ (8001110 <HAL_GPIO_Init+0x2f8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0x1e8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a48      	ldr	r2, [pc, #288]	@ (8001114 <HAL_GPIO_Init+0x2fc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d101      	bne.n	8000ffc <HAL_GPIO_Init+0x1e4>
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	e00a      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	e008      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001000:	2304      	movs	r3, #4
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001004:	2303      	movs	r3, #3
 8001006:	e004      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001008:	2302      	movs	r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001010:	2300      	movs	r3, #0
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	f002 0203 	and.w	r2, r2, #3
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	4093      	lsls	r3, r2
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001022:	4937      	ldr	r1, [pc, #220]	@ (8001100 <HAL_GPIO_Init+0x2e8>)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001030:	4b39      	ldr	r3, [pc, #228]	@ (8001118 <HAL_GPIO_Init+0x300>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001054:	4a30      	ldr	r2, [pc, #192]	@ (8001118 <HAL_GPIO_Init+0x300>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800105a:	4b2f      	ldr	r3, [pc, #188]	@ (8001118 <HAL_GPIO_Init+0x300>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107e:	4a26      	ldr	r2, [pc, #152]	@ (8001118 <HAL_GPIO_Init+0x300>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001084:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <HAL_GPIO_Init+0x300>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001118 <HAL_GPIO_Init+0x300>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <HAL_GPIO_Init+0x300>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010d2:	4a11      	ldr	r2, [pc, #68]	@ (8001118 <HAL_GPIO_Init+0x300>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f ae9d 	bne.w	8000e28 <HAL_GPIO_Init+0x10>
  }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000
 8001104:	48000400 	.word	0x48000400
 8001108:	48000800 	.word	0x48000800
 800110c:	48000c00 	.word	0x48000c00
 8001110:	48001000 	.word	0x48001000
 8001114:	48001400 	.word	0x48001400
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001138:	e002      	b.n	8001140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e08d      	b.n	800127a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fa50 	bl	8000618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2224      	movs	r2, #36	@ 0x24
 800117c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0201 	bic.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800119c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d107      	bne.n	80011c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	e006      	b.n	80011d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80011d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d108      	bne.n	80011ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	e007      	b.n	80011fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800120c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001210:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001220:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69d9      	ldr	r1, [r3, #28]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1a      	ldr	r2, [r3, #32]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2220      	movs	r2, #32
 8001266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b20      	cmp	r3, #32
 8001296:	d138      	bne.n	800130a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e032      	b.n	800130c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2224      	movs	r2, #36	@ 0x24
 80012b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0201 	bic.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80012d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6819      	ldr	r1, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0201 	orr.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2220      	movs	r2, #32
 80012fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800130a:	2302      	movs	r3, #2
  }
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b20      	cmp	r3, #32
 800132c:	d139      	bne.n	80013a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001338:	2302      	movs	r3, #2
 800133a:	e033      	b.n	80013a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2224      	movs	r2, #36	@ 0x24
 8001348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800136a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2220      	movs	r2, #32
 8001392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80013a2:	2302      	movs	r3, #2
  }
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e0c0      	b.n	8001544 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d106      	bne.n	80013dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff f976 	bl	80006c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2203      	movs	r2, #3
 80013e0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 f8bf 	bl	800256c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	e03e      	b.n	8001472 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	3311      	adds	r3, #17
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	3310      	adds	r3, #16
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	3313      	adds	r3, #19
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	3320      	adds	r3, #32
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3324      	adds	r3, #36	@ 0x24
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	440b      	add	r3, r1
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	3301      	adds	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	791b      	ldrb	r3, [r3, #4]
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	429a      	cmp	r2, r3
 800147a:	d3bb      	bcc.n	80013f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e044      	b.n	800150c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	3301      	adds	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	791b      	ldrb	r3, [r3, #4]
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	429a      	cmp	r2, r3
 8001514:	d3b5      	bcc.n	8001482 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3304      	adds	r3, #4
 800151e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001522:	f001 f83e 	bl	80025a2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7a9b      	ldrb	r3, [r3, #10]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d102      	bne.n	8001542 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f805 	bl	800154c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001570:	b29b      	uxth	r3, r3
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	b29a      	uxth	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001584:	b29b      	uxth	r3, r3
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d141      	bne.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ae:	4b4b      	ldr	r3, [pc, #300]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ba:	d131      	bne.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015bc:	4b47      	ldr	r3, [pc, #284]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015c2:	4a46      	ldr	r2, [pc, #280]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015cc:	4b43      	ldr	r3, [pc, #268]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015d4:	4a41      	ldr	r2, [pc, #260]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015dc:	4b40      	ldr	r3, [pc, #256]	@ (80016e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2232      	movs	r2, #50	@ 0x32
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	4a3f      	ldr	r2, [pc, #252]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	0c9b      	lsrs	r3, r3, #18
 80015ee:	3301      	adds	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f2:	e002      	b.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015fa:	4b38      	ldr	r3, [pc, #224]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001606:	d102      	bne.n	800160e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f2      	bne.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800160e:	4b33      	ldr	r3, [pc, #204]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800161a:	d158      	bne.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e057      	b.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001620:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001626:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800162c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001630:	e04d      	b.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001638:	d141      	bne.n	80016be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800163a:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001646:	d131      	bne.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800164e:	4a23      	ldr	r2, [pc, #140]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001654:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001658:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001660:	4a1e      	ldr	r2, [pc, #120]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001662:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001666:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001668:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2232      	movs	r2, #50	@ 0x32
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	4a1c      	ldr	r2, [pc, #112]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	0c9b      	lsrs	r3, r3, #18
 800167a:	3301      	adds	r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800167e:	e002      	b.n	8001686 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3b01      	subs	r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800168e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001692:	d102      	bne.n	800169a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f2      	bne.n	8001680 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016a6:	d112      	bne.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e011      	b.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80016bc:	e007      	b.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40007000 	.word	0x40007000
 80016e0:	20000000 	.word	0x20000000
 80016e4:	431bde83 	.word	0x431bde83

080016e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a04      	ldr	r2, [pc, #16]	@ (8001704 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f6:	6093      	str	r3, [r2, #8]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40007000 	.word	0x40007000

08001708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e2fe      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d075      	beq.n	8001812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	4b97      	ldr	r3, [pc, #604]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001730:	4b94      	ldr	r3, [pc, #592]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b0c      	cmp	r3, #12
 800173e:	d102      	bne.n	8001746 <HAL_RCC_OscConfig+0x3e>
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d002      	beq.n	800174c <HAL_RCC_OscConfig+0x44>
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b08      	cmp	r3, #8
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b8d      	ldr	r3, [pc, #564]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d05b      	beq.n	8001810 <HAL_RCC_OscConfig+0x108>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d157      	bne.n	8001810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e2d9      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x74>
 800176e:	4b85      	ldr	r3, [pc, #532]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a84      	ldr	r2, [pc, #528]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xb0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x98>
 8001786:	4b7f      	ldr	r3, [pc, #508]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7e      	ldr	r2, [pc, #504]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b7c      	ldr	r3, [pc, #496]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a7b      	ldr	r2, [pc, #492]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xb0>
 80017a0:	4b78      	ldr	r3, [pc, #480]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a77      	ldr	r2, [pc, #476]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b75      	ldr	r3, [pc, #468]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a74      	ldr	r2, [pc, #464]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff f87e 	bl	80008c0 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff f87a 	bl	80008c0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	@ 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e29e      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017da:	4b6a      	ldr	r3, [pc, #424]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xc0>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff f86a 	bl	80008c0 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff f866 	bl	80008c0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	@ 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e28a      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001802:	4b60      	ldr	r3, [pc, #384]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0xe8>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d075      	beq.n	800190a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181e:	4b59      	ldr	r3, [pc, #356]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001828:	4b56      	ldr	r3, [pc, #344]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b0c      	cmp	r3, #12
 8001836:	d102      	bne.n	800183e <HAL_RCC_OscConfig+0x136>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d002      	beq.n	8001844 <HAL_RCC_OscConfig+0x13c>
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d11f      	bne.n	8001884 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001844:	4b4f      	ldr	r3, [pc, #316]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_OscConfig+0x154>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e25d      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b49      	ldr	r3, [pc, #292]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	061b      	lsls	r3, r3, #24
 800186a:	4946      	ldr	r1, [pc, #280]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001870:	4b45      	ldr	r3, [pc, #276]	@ (8001988 <HAL_RCC_OscConfig+0x280>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe ffd7 	bl	8000828 <HAL_InitTick>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d043      	beq.n	8001908 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e249      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d023      	beq.n	80018d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188c:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a3c      	ldr	r2, [pc, #240]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f812 	bl	80008c0 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff f80e 	bl	80008c0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e232      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b2:	4b34      	ldr	r3, [pc, #208]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4b31      	ldr	r3, [pc, #196]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	061b      	lsls	r3, r3, #24
 80018cc:	492d      	ldr	r1, [pc, #180]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
 80018d2:	e01a      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7fe ffee 	bl	80008c0 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e8:	f7fe ffea 	bl	80008c0 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e20e      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018fa:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x1e0>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d041      	beq.n	800199a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d01c      	beq.n	8001958 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191e:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001924:	4a17      	ldr	r2, [pc, #92]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7fe ffc7 	bl	80008c0 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001936:	f7fe ffc3 	bl	80008c0 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1e7      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0ef      	beq.n	8001936 <HAL_RCC_OscConfig+0x22e>
 8001956:	e020      	b.n	800199a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 800195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800195e:	4a09      	ldr	r2, [pc, #36]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7fe ffaa 	bl	80008c0 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800196e:	e00d      	b.n	800198c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001970:	f7fe ffa6 	bl	80008c0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d906      	bls.n	800198c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1ca      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198c:	4b8c      	ldr	r3, [pc, #560]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ea      	bne.n	8001970 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80a6 	beq.w	8001af4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019ac:	4b84      	ldr	r3, [pc, #528]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_OscConfig+0x2b4>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x2b6>
 80019bc:	2300      	movs	r3, #0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00d      	beq.n	80019de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c6:	4a7e      	ldr	r2, [pc, #504]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ce:	4b7c      	ldr	r3, [pc, #496]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019da:	2301      	movs	r3, #1
 80019dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019de:	4b79      	ldr	r3, [pc, #484]	@ (8001bc4 <HAL_RCC_OscConfig+0x4bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ea:	4b76      	ldr	r3, [pc, #472]	@ (8001bc4 <HAL_RCC_OscConfig+0x4bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a75      	ldr	r2, [pc, #468]	@ (8001bc4 <HAL_RCC_OscConfig+0x4bc>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f6:	f7fe ff63 	bl	80008c0 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fe:	f7fe ff5f 	bl	80008c0 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e183      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a10:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc4 <HAL_RCC_OscConfig+0x4bc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d108      	bne.n	8001a36 <HAL_RCC_OscConfig+0x32e>
 8001a24:	4b66      	ldr	r3, [pc, #408]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a2a:	4a65      	ldr	r2, [pc, #404]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a34:	e024      	b.n	8001a80 <HAL_RCC_OscConfig+0x378>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d110      	bne.n	8001a60 <HAL_RCC_OscConfig+0x358>
 8001a3e:	4b60      	ldr	r3, [pc, #384]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a44:	4a5e      	ldr	r2, [pc, #376]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a54:	4a5a      	ldr	r2, [pc, #360]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a5e:	e00f      	b.n	8001a80 <HAL_RCC_OscConfig+0x378>
 8001a60:	4b57      	ldr	r3, [pc, #348]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a66:	4a56      	ldr	r2, [pc, #344]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a70:	4b53      	ldr	r3, [pc, #332]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a76:	4a52      	ldr	r2, [pc, #328]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d016      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7fe ff1a 	bl	80008c0 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a90:	f7fe ff16 	bl	80008c0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e138      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa6:	4b46      	ldr	r3, [pc, #280]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ed      	beq.n	8001a90 <HAL_RCC_OscConfig+0x388>
 8001ab4:	e015      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab6:	f7fe ff03 	bl	80008c0 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7fe feff 	bl	80008c0 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e121      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ed      	bne.n	8001abe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae8:	4b35      	ldr	r3, [pc, #212]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aec:	4a34      	ldr	r2, [pc, #208]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001af2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0320 	and.w	r3, r3, #32
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d03c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01c      	beq.n	8001b42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b08:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7fe fed2 	bl	80008c0 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b20:	f7fe fece 	bl	80008c0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e0f2      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b32:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ef      	beq.n	8001b20 <HAL_RCC_OscConfig+0x418>
 8001b40:	e01b      	b.n	8001b7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b42:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b48:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b52:	f7fe feb5 	bl	80008c0 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b5a:	f7fe feb1 	bl	80008c0 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e0d5      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b6c:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ef      	bne.n	8001b5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80c9 	beq.w	8001d16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b84:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b0c      	cmp	r3, #12
 8001b8e:	f000 8083 	beq.w	8001c98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d15e      	bne.n	8001c58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_RCC_OscConfig+0x4b8>)
 8001ba0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7fe fe8b 	bl	80008c0 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bac:	e00c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7fe fe87 	bl	80008c0 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d905      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0ab      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc8:	4b55      	ldr	r3, [pc, #340]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ec      	bne.n	8001bae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd4:	4b52      	ldr	r3, [pc, #328]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b52      	ldr	r3, [pc, #328]	@ (8001d24 <HAL_RCC_OscConfig+0x61c>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6a11      	ldr	r1, [r2, #32]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001be4:	3a01      	subs	r2, #1
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	4311      	orrs	r1, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001bee:	0212      	lsls	r2, r2, #8
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bf6:	0852      	lsrs	r2, r2, #1
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	0552      	lsls	r2, r2, #21
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c02:	0852      	lsrs	r2, r2, #1
 8001c04:	3a01      	subs	r2, #1
 8001c06:	0652      	lsls	r2, r2, #25
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c0e:	06d2      	lsls	r2, r2, #27
 8001c10:	430a      	orrs	r2, r1
 8001c12:	4943      	ldr	r1, [pc, #268]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a40      	ldr	r2, [pc, #256]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c24:	4b3e      	ldr	r3, [pc, #248]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4a3d      	ldr	r2, [pc, #244]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7fe fe46 	bl	80008c0 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7fe fe42 	bl	80008c0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e066      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4a:	4b35      	ldr	r3, [pc, #212]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x530>
 8001c56:	e05e      	b.n	8001d16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c58:	4b31      	ldr	r3, [pc, #196]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a30      	ldr	r2, [pc, #192]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7fe fe2c 	bl	80008c0 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7fe fe28 	bl	80008c0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e04c      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7e:	4b28      	ldr	r3, [pc, #160]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c8a:	4b25      	ldr	r3, [pc, #148]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	4924      	ldr	r1, [pc, #144]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001c90:	4b25      	ldr	r3, [pc, #148]	@ (8001d28 <HAL_RCC_OscConfig+0x620>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	60cb      	str	r3, [r1, #12]
 8001c96:	e03e      	b.n	8001d16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e039      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d12c      	bne.n	8001d12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d123      	bne.n	8001d12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d11b      	bne.n	8001d12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d113      	bne.n	8001d12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d109      	bne.n	8001d12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	019f800c 	.word	0x019f800c
 8001d28:	feeefffc 	.word	0xfeeefffc

08001d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e11e      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d44:	4b91      	ldr	r3, [pc, #580]	@ (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d910      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b8e      	ldr	r3, [pc, #568]	@ (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 020f 	bic.w	r2, r3, #15
 8001d5a:	498c      	ldr	r1, [pc, #560]	@ (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b8a      	ldr	r3, [pc, #552]	@ (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e106      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d073      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d129      	bne.n	8001ddc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d88:	4b81      	ldr	r3, [pc, #516]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0f4      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d98:	f000 f966 	bl	8002068 <RCC_GetSysClockFreqFromPLLSource>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4a7c      	ldr	r2, [pc, #496]	@ (8001f94 <HAL_RCC_ClockConfig+0x268>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d93f      	bls.n	8001e26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001da6:	4b7a      	ldr	r3, [pc, #488]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d033      	beq.n	8001e26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d12f      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dc6:	4b72      	ldr	r3, [pc, #456]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dce:	4a70      	ldr	r2, [pc, #448]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dd6:	2380      	movs	r3, #128	@ 0x80
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e024      	b.n	8001e26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0c6      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df4:	4b66      	ldr	r3, [pc, #408]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0be      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e04:	f000 f8ce 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4a61      	ldr	r2, [pc, #388]	@ (8001f94 <HAL_RCC_ClockConfig+0x268>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d909      	bls.n	8001e26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e12:	4b5f      	ldr	r3, [pc, #380]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e1a:	4a5d      	ldr	r2, [pc, #372]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e22:	2380      	movs	r3, #128	@ 0x80
 8001e24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e26:	4b5a      	ldr	r3, [pc, #360]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 0203 	bic.w	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4957      	ldr	r1, [pc, #348]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e38:	f7fe fd42 	bl	80008c0 <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e40:	f7fe fd3e 	bl	80008c0 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e095      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	4b4e      	ldr	r3, [pc, #312]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 020c 	and.w	r2, r3, #12
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1eb      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d023      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e80:	4b43      	ldr	r3, [pc, #268]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a42      	ldr	r2, [pc, #264]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e98:	4b3d      	ldr	r3, [pc, #244]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001ea0:	4a3b      	ldr	r2, [pc, #236]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ea6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea8:	4b39      	ldr	r3, [pc, #228]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4936      	ldr	r1, [pc, #216]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
 8001eba:	e008      	b.n	8001ece <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b80      	cmp	r3, #128	@ 0x80
 8001ec0:	d105      	bne.n	8001ece <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ec2:	4b33      	ldr	r3, [pc, #204]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4a32      	ldr	r2, [pc, #200]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001ec8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ecc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ece:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d21d      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 020f 	bic.w	r2, r3, #15
 8001ee4:	4929      	ldr	r1, [pc, #164]	@ (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eec:	f7fe fce8 	bl	80008c0 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef4:	f7fe fce4 	bl	80008c0 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e03b      	b.n	8001f82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1ed      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f24:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4917      	ldr	r1, [pc, #92]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f42:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	490f      	ldr	r1, [pc, #60]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f56:	f000 f825 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	490c      	ldr	r1, [pc, #48]	@ (8001f98 <HAL_RCC_ClockConfig+0x26c>)
 8001f68:	5ccb      	ldrb	r3, [r1, r3]
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <HAL_RCC_ClockConfig+0x270>)
 8001f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <HAL_RCC_ClockConfig+0x274>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fc54 	bl	8000828 <HAL_InitTick>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	04c4b400 	.word	0x04c4b400
 8001f98:	080053d8 	.word	0x080053d8
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001faa:	4b2c      	ldr	r3, [pc, #176]	@ (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d102      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002060 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e047      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fbc:	4b27      	ldr	r3, [pc, #156]	@ (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fc8:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e03e      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fce:	4b23      	ldr	r3, [pc, #140]	@ (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d136      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fda:	4b20      	ldr	r3, [pc, #128]	@ (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3301      	adds	r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d10c      	bne.n	8002012 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8002064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	4a16      	ldr	r2, [pc, #88]	@ (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002002:	68d2      	ldr	r2, [r2, #12]
 8002004:	0a12      	lsrs	r2, r2, #8
 8002006:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
      break;
 8002010:	e00c      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002012:	4a13      	ldr	r2, [pc, #76]	@ (8002060 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	4a10      	ldr	r2, [pc, #64]	@ (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 800201c:	68d2      	ldr	r2, [r2, #12]
 800201e:	0a12      	lsrs	r2, r2, #8
 8002020:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	617b      	str	r3, [r7, #20]
      break;
 800202a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0e5b      	lsrs	r3, r3, #25
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	3301      	adds	r3, #1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e001      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800204c:	693b      	ldr	r3, [r7, #16]
}
 800204e:	4618      	mov	r0, r3
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	00f42400 	.word	0x00f42400
 8002064:	007a1200 	.word	0x007a1200

08002068 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800206e:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3301      	adds	r3, #1
 8002084:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d10c      	bne.n	80020a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800208c:	4a17      	ldr	r2, [pc, #92]	@ (80020ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002096:	68d2      	ldr	r2, [r2, #12]
 8002098:	0a12      	lsrs	r2, r2, #8
 800209a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
    break;
 80020a4:	e00c      	b.n	80020c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020b0:	68d2      	ldr	r2, [r2, #12]
 80020b2:	0a12      	lsrs	r2, r2, #8
 80020b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	617b      	str	r3, [r7, #20]
    break;
 80020be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c0:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0e5b      	lsrs	r3, r3, #25
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	3301      	adds	r3, #1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020da:	687b      	ldr	r3, [r7, #4]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000
 80020ec:	007a1200 	.word	0x007a1200
 80020f0:	00f42400 	.word	0x00f42400

080020f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020fc:	2300      	movs	r3, #0
 80020fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002100:	2300      	movs	r3, #0
 8002102:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8098 	beq.w	8002242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002116:	4b43      	ldr	r3, [pc, #268]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10d      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b40      	ldr	r3, [pc, #256]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	4a3f      	ldr	r2, [pc, #252]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212c:	6593      	str	r3, [r2, #88]	@ 0x58
 800212e:	4b3d      	ldr	r3, [pc, #244]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800213e:	4b3a      	ldr	r3, [pc, #232]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a39      	ldr	r2, [pc, #228]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002148:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800214a:	f7fe fbb9 	bl	80008c0 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002150:	e009      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7fe fbb5 	bl	80008c0 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d902      	bls.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	74fb      	strb	r3, [r7, #19]
        break;
 8002164:	e005      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002166:	4b30      	ldr	r3, [pc, #192]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0ef      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002172:	7cfb      	ldrb	r3, [r7, #19]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d159      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002178:	4b2a      	ldr	r3, [pc, #168]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002182:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d01e      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	d019      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002194:	4b23      	ldr	r3, [pc, #140]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800219e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021a0:	4b20      	ldr	r3, [pc, #128]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021c0:	4a18      	ldr	r2, [pc, #96]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d016      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7fe fb75 	bl	80008c0 <HAL_GetTick>
 80021d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d8:	e00b      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7fe fb71 	bl	80008c0 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d902      	bls.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	74fb      	strb	r3, [r7, #19]
            break;
 80021f0:	e006      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ec      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10b      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002206:	4b07      	ldr	r3, [pc, #28]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002214:	4903      	ldr	r1, [pc, #12]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800221c:	e008      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	74bb      	strb	r3, [r7, #18]
 8002222:	e005      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002224:	40021000 	.word	0x40021000
 8002228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002230:	7c7b      	ldrb	r3, [r7, #17]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4ba7      	ldr	r3, [pc, #668]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	4aa6      	ldr	r2, [pc, #664]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002240:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800224e:	4ba1      	ldr	r3, [pc, #644]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002254:	f023 0203 	bic.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	499d      	ldr	r1, [pc, #628]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002270:	4b98      	ldr	r3, [pc, #608]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002276:	f023 020c 	bic.w	r2, r3, #12
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	4995      	ldr	r1, [pc, #596]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002292:	4b90      	ldr	r3, [pc, #576]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002298:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	498c      	ldr	r1, [pc, #560]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b4:	4b87      	ldr	r3, [pc, #540]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	4984      	ldr	r1, [pc, #528]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022d6:	4b7f      	ldr	r3, [pc, #508]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	497b      	ldr	r1, [pc, #492]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022f8:	4b76      	ldr	r3, [pc, #472]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	4973      	ldr	r1, [pc, #460]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800231a:	4b6e      	ldr	r3, [pc, #440]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002320:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	496a      	ldr	r1, [pc, #424]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800233c:	4b65      	ldr	r3, [pc, #404]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002342:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4962      	ldr	r1, [pc, #392]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800235e:	4b5d      	ldr	r3, [pc, #372]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002364:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	4959      	ldr	r1, [pc, #356]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002380:	4b54      	ldr	r3, [pc, #336]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002386:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	4951      	ldr	r1, [pc, #324]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d015      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a2:	4b4c      	ldr	r3, [pc, #304]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	4948      	ldr	r1, [pc, #288]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023c0:	d105      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c2:	4b44      	ldr	r3, [pc, #272]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4a43      	ldr	r2, [pc, #268]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023cc:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d015      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023da:	4b3e      	ldr	r3, [pc, #248]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	493a      	ldr	r1, [pc, #232]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023f8:	d105      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023fa:	4b36      	ldr	r3, [pc, #216]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a35      	ldr	r2, [pc, #212]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002400:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002404:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d015      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002412:	4b30      	ldr	r3, [pc, #192]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002418:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002420:	492c      	ldr	r1, [pc, #176]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002430:	d105      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002432:	4b28      	ldr	r3, [pc, #160]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4a27      	ldr	r2, [pc, #156]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002438:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800243c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d015      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800244a:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002450:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002458:	491e      	ldr	r1, [pc, #120]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002468:	d105      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800246a:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a19      	ldr	r2, [pc, #100]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002470:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002474:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d015      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002488:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002490:	4910      	ldr	r1, [pc, #64]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024a0:	d105      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a2:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4a0b      	ldr	r2, [pc, #44]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d018      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	4902      	ldr	r1, [pc, #8]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	e001      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80024d4:	40021000 	.word	0x40021000
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024de:	d105      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024e0:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a20      	ldr	r2, [pc, #128]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d015      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80024f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	4918      	ldr	r1, [pc, #96]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002516:	d105      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002518:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4a12      	ldr	r2, [pc, #72]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800251e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002522:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d015      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002530:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002536:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253e:	490a      	ldr	r1, [pc, #40]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800254a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800254e:	d105      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002550:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800255a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800255c:	7cbb      	ldrb	r3, [r7, #18]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000

0800256c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002574:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8002578:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	b29b      	uxth	r3, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	b29b      	uxth	r3, r3
 800258a:	4013      	ands	r3, r2
 800258c:	b29a      	uxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <__NVIC_SetPriority>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db0a      	blt.n	800260a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	490c      	ldr	r1, [pc, #48]	@ (800262c <__NVIC_SetPriority+0x4c>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	440b      	add	r3, r1
 8002604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002608:	e00a      	b.n	8002620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4908      	ldr	r1, [pc, #32]	@ (8002630 <__NVIC_SetPriority+0x50>)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3b04      	subs	r3, #4
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	440b      	add	r3, r1
 800261e:	761a      	strb	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002638:	2100      	movs	r1, #0
 800263a:	f06f 0004 	mvn.w	r0, #4
 800263e:	f7ff ffcf 	bl	80025e0 <__NVIC_SetPriority>
#endif
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800264e:	f3ef 8305 	mrs	r3, IPSR
 8002652:	603b      	str	r3, [r7, #0]
  return(result);
 8002654:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800265a:	f06f 0305 	mvn.w	r3, #5
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	e00c      	b.n	800267c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002662:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <osKernelInitialize+0x44>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d105      	bne.n	8002676 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800266a:	4b08      	ldr	r3, [pc, #32]	@ (800268c <osKernelInitialize+0x44>)
 800266c:	2201      	movs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002670:	2300      	movs	r3, #0
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	e002      	b.n	800267c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800267c:	687b      	ldr	r3, [r7, #4]
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000418 	.word	0x20000418

08002690 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002696:	f3ef 8305 	mrs	r3, IPSR
 800269a:	603b      	str	r3, [r7, #0]
  return(result);
 800269c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80026a2:	f06f 0305 	mvn.w	r3, #5
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	e010      	b.n	80026cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <osKernelStart+0x48>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d109      	bne.n	80026c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80026b2:	f7ff ffbf 	bl	8002634 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80026b6:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <osKernelStart+0x48>)
 80026b8:	2202      	movs	r2, #2
 80026ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80026bc:	f001 f892 	bl	80037e4 <vTaskStartScheduler>
      stat = osOK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	e002      	b.n	80026cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026cc:	687b      	ldr	r3, [r7, #4]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000418 	.word	0x20000418

080026dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08e      	sub	sp, #56	@ 0x38
 80026e0:	af04      	add	r7, sp, #16
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ec:	f3ef 8305 	mrs	r3, IPSR
 80026f0:	617b      	str	r3, [r7, #20]
  return(result);
 80026f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d17e      	bne.n	80027f6 <osThreadNew+0x11a>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d07b      	beq.n	80027f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002702:	2318      	movs	r3, #24
 8002704:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d045      	beq.n	80027a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <osThreadNew+0x48>
        name = attr->name;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <osThreadNew+0x6e>
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b38      	cmp	r3, #56	@ 0x38
 800273c:	d805      	bhi.n	800274a <osThreadNew+0x6e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <osThreadNew+0x72>
        return (NULL);
 800274a:	2300      	movs	r3, #0
 800274c:	e054      	b.n	80027f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00e      	beq.n	8002784 <osThreadNew+0xa8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2ba7      	cmp	r3, #167	@ 0xa7
 800276c:	d90a      	bls.n	8002784 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002772:	2b00      	cmp	r3, #0
 8002774:	d006      	beq.n	8002784 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <osThreadNew+0xa8>
        mem = 1;
 800277e:	2301      	movs	r3, #1
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	e010      	b.n	80027a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10c      	bne.n	80027a6 <osThreadNew+0xca>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d108      	bne.n	80027a6 <osThreadNew+0xca>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <osThreadNew+0xca>
          mem = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	e001      	b.n	80027a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d110      	bne.n	80027ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027b4:	9202      	str	r2, [sp, #8]
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6a3a      	ldr	r2, [r7, #32]
 80027c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fe1a 	bl	80033fc <xTaskCreateStatic>
 80027c8:	4603      	mov	r3, r0
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	e013      	b.n	80027f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d110      	bne.n	80027f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fe68 	bl	80034bc <xTaskCreate>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d001      	beq.n	80027f6 <osThreadNew+0x11a>
            hTask = NULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027f6:	693b      	ldr	r3, [r7, #16]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3728      	adds	r7, #40	@ 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002808:	f3ef 8305 	mrs	r3, IPSR
 800280c:	60bb      	str	r3, [r7, #8]
  return(result);
 800280e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <osDelay+0x1c>
    stat = osErrorISR;
 8002814:	f06f 0305 	mvn.w	r3, #5
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e007      	b.n	800282c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 ffa6 	bl	8003778 <vTaskDelay>
    }
  }

  return (stat);
 800282c:	68fb      	ldr	r3, [r7, #12]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a07      	ldr	r2, [pc, #28]	@ (8002864 <vApplicationGetIdleTaskMemory+0x2c>)
 8002848:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4a06      	ldr	r2, [pc, #24]	@ (8002868 <vApplicationGetIdleTaskMemory+0x30>)
 800284e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2280      	movs	r2, #128	@ 0x80
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	2000041c 	.word	0x2000041c
 8002868:	200004c4 	.word	0x200004c4

0800286c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a07      	ldr	r2, [pc, #28]	@ (8002898 <vApplicationGetTimerTaskMemory+0x2c>)
 800287c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4a06      	ldr	r2, [pc, #24]	@ (800289c <vApplicationGetTimerTaskMemory+0x30>)
 8002882:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	200006c4 	.word	0x200006c4
 800289c:	2000076c 	.word	0x2000076c

080028a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f103 0208 	add.w	r2, r3, #8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f103 0208 	add.w	r2, r3, #8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f103 0208 	add.w	r2, r3, #8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	601a      	str	r2, [r3, #0]
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002942:	b480      	push	{r7}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d103      	bne.n	8002962 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e00c      	b.n	800297c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3308      	adds	r3, #8
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e002      	b.n	8002970 <vListInsert+0x2e>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d2f6      	bcs.n	800296a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	601a      	str	r2, [r3, #0]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6892      	ldr	r2, [r2, #8]
 80029ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6852      	ldr	r2, [r2, #4]
 80029d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d103      	bne.n	80029e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1e5a      	subs	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10b      	bne.n	8002a34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a2e:	bf00      	nop
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a34:	f002 f8a8 	bl	8004b88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	441a      	add	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	3b01      	subs	r3, #1
 8002a66:	68f9      	ldr	r1, [r7, #12]
 8002a68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	441a      	add	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	22ff      	movs	r2, #255	@ 0xff
 8002a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	22ff      	movs	r2, #255	@ 0xff
 8002a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d114      	bne.n	8002ab4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01a      	beq.n	8002ac8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3310      	adds	r3, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 f942 	bl	8003d20 <xTaskRemoveFromEventList>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad8 <xQueueGenericReset+0xd0>)
 8002aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	e009      	b.n	8002ac8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fef1 	bl	80028a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3324      	adds	r3, #36	@ 0x24
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff feec 	bl	80028a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ac8:	f002 f890 	bl	8004bec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002acc:	2301      	movs	r3, #1
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	@ 0x38
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10b      	bne.n	8002b26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	e7fd      	b.n	8002b22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <xQueueGenericCreateStatic+0x56>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <xQueueGenericCreateStatic+0x5a>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <xQueueGenericCreateStatic+0x5c>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10b      	bne.n	8002b54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	623b      	str	r3, [r7, #32]
}
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <xQueueGenericCreateStatic+0x84>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <xQueueGenericCreateStatic+0x88>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <xQueueGenericCreateStatic+0x8a>
 8002b64:	2300      	movs	r3, #0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10b      	bne.n	8002b82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	61fb      	str	r3, [r7, #28]
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	e7fd      	b.n	8002b7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b82:	2350      	movs	r3, #80	@ 0x50
 8002b84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b50      	cmp	r3, #80	@ 0x50
 8002b8a:	d00b      	beq.n	8002ba4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	61bb      	str	r3, [r7, #24]
}
 8002b9e:	bf00      	nop
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ba4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00d      	beq.n	8002bcc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f805 	bl	8002bd6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3730      	adds	r7, #48	@ 0x30
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e002      	b.n	8002bf8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c04:	2101      	movs	r1, #1
 8002c06:	69b8      	ldr	r0, [r7, #24]
 8002c08:	f7ff fefe 	bl	8002a08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08e      	sub	sp, #56	@ 0x38
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10b      	bne.n	8002c50 <xQueueGenericSend+0x34>
	__asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c4a:	bf00      	nop
 8002c4c:	bf00      	nop
 8002c4e:	e7fd      	b.n	8002c4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <xQueueGenericSend+0x42>
 8002c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <xQueueGenericSend+0x46>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <xQueueGenericSend+0x48>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <xQueueGenericSend+0x64>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d103      	bne.n	8002c8e <xQueueGenericSend+0x72>
 8002c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <xQueueGenericSend+0x76>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <xQueueGenericSend+0x78>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10b      	bne.n	8002cb0 <xQueueGenericSend+0x94>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	623b      	str	r3, [r7, #32]
}
 8002caa:	bf00      	nop
 8002cac:	bf00      	nop
 8002cae:	e7fd      	b.n	8002cac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cb0:	f001 f9fc 	bl	80040ac <xTaskGetSchedulerState>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <xQueueGenericSend+0xa4>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <xQueueGenericSend+0xa8>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <xQueueGenericSend+0xaa>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10b      	bne.n	8002ce2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	61fb      	str	r3, [r7, #28]
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	e7fd      	b.n	8002cde <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ce2:	f001 ff51 	bl	8004b88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d302      	bcc.n	8002cf8 <xQueueGenericSend+0xdc>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d129      	bne.n	8002d4c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cfe:	f000 fa0f 	bl	8003120 <prvCopyDataToQueue>
 8002d02:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0e:	3324      	adds	r3, #36	@ 0x24
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 f805 	bl	8003d20 <xTaskRemoveFromEventList>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d013      	beq.n	8002d44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e1c <xQueueGenericSend+0x200>)
 8002d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	e00a      	b.n	8002d44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d34:	4b39      	ldr	r3, [pc, #228]	@ (8002e1c <xQueueGenericSend+0x200>)
 8002d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d44:	f001 ff52 	bl	8004bec <vPortExitCritical>
				return pdPASS;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e063      	b.n	8002e14 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d103      	bne.n	8002d5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d52:	f001 ff4b 	bl	8004bec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e05c      	b.n	8002e14 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d106      	bne.n	8002d6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 f83f 	bl	8003de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d6e:	f001 ff3d 	bl	8004bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d72:	f000 fda7 	bl	80038c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d76:	f001 ff07 	bl	8004b88 <vPortEnterCritical>
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d80:	b25b      	sxtb	r3, r3
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d103      	bne.n	8002d90 <xQueueGenericSend+0x174>
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d103      	bne.n	8002da6 <xQueueGenericSend+0x18a>
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002da6:	f001 ff21 	bl	8004bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002daa:	1d3a      	adds	r2, r7, #4
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 f82e 	bl	8003e14 <xTaskCheckForTimeOut>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d124      	bne.n	8002e08 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dc0:	f000 faa6 	bl	8003310 <prvIsQueueFull>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d018      	beq.n	8002dfc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dcc:	3310      	adds	r3, #16
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 ff52 	bl	8003c7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dda:	f000 fa31 	bl	8003240 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dde:	f000 fd7f 	bl	80038e0 <xTaskResumeAll>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f47f af7c 	bne.w	8002ce2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002dea:	4b0c      	ldr	r3, [pc, #48]	@ (8002e1c <xQueueGenericSend+0x200>)
 8002dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	e772      	b.n	8002ce2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dfe:	f000 fa1f 	bl	8003240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e02:	f000 fd6d 	bl	80038e0 <xTaskResumeAll>
 8002e06:	e76c      	b.n	8002ce2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e0a:	f000 fa19 	bl	8003240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e0e:	f000 fd67 	bl	80038e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3738      	adds	r7, #56	@ 0x38
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	e000ed04 	.word	0xe000ed04

08002e20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b090      	sub	sp, #64	@ 0x40
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10b      	bne.n	8002e50 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <xQueueGenericSendFromISR+0x3e>
 8002e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <xQueueGenericSendFromISR+0x42>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <xQueueGenericSendFromISR+0x44>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e7a:	bf00      	nop
 8002e7c:	bf00      	nop
 8002e7e:	e7fd      	b.n	8002e7c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d103      	bne.n	8002e8e <xQueueGenericSendFromISR+0x6e>
 8002e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <xQueueGenericSendFromISR+0x72>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <xQueueGenericSendFromISR+0x74>
 8002e92:	2300      	movs	r3, #0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	623b      	str	r3, [r7, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	bf00      	nop
 8002eae:	e7fd      	b.n	8002eac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eb0:	f001 ff4a 	bl	8004d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002eb4:	f3ef 8211 	mrs	r2, BASEPRI
 8002eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	61fa      	str	r2, [r7, #28]
 8002eca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ece:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d302      	bcc.n	8002ee2 <xQueueGenericSendFromISR+0xc2>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d12f      	bne.n	8002f42 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ee8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ef8:	f000 f912 	bl	8003120 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002efc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d112      	bne.n	8002f2c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f10:	3324      	adds	r3, #36	@ 0x24
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 ff04 	bl	8003d20 <xTaskRemoveFromEventList>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00e      	beq.n	8002f3c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00b      	beq.n	8002f3c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e007      	b.n	8002f3c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f30:	3301      	adds	r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	b25a      	sxtb	r2, r3
 8002f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002f40:	e001      	b.n	8002f46 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f48:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3740      	adds	r7, #64	@ 0x40
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08c      	sub	sp, #48	@ 0x30
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10b      	bne.n	8002f8e <xQueueReceive+0x32>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	623b      	str	r3, [r7, #32]
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	e7fd      	b.n	8002f8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d103      	bne.n	8002f9c <xQueueReceive+0x40>
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <xQueueReceive+0x44>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <xQueueReceive+0x46>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <xQueueReceive+0x62>
	__asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	61fb      	str	r3, [r7, #28]
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	e7fd      	b.n	8002fba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fbe:	f001 f875 	bl	80040ac <xTaskGetSchedulerState>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <xQueueReceive+0x72>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <xQueueReceive+0x76>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <xQueueReceive+0x78>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10b      	bne.n	8002ff0 <xQueueReceive+0x94>
	__asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	61bb      	str	r3, [r7, #24]
}
 8002fea:	bf00      	nop
 8002fec:	bf00      	nop
 8002fee:	e7fd      	b.n	8002fec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ff0:	f001 fdca 	bl	8004b88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01f      	beq.n	8003040 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003004:	f000 f8f6 	bl	80031f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	1e5a      	subs	r2, r3, #1
 800300c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00f      	beq.n	8003038 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301a:	3310      	adds	r3, #16
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fe7f 	bl	8003d20 <xTaskRemoveFromEventList>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003028:	4b3c      	ldr	r3, [pc, #240]	@ (800311c <xQueueReceive+0x1c0>)
 800302a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003038:	f001 fdd8 	bl	8004bec <vPortExitCritical>
				return pdPASS;
 800303c:	2301      	movs	r3, #1
 800303e:	e069      	b.n	8003114 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003046:	f001 fdd1 	bl	8004bec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800304a:	2300      	movs	r3, #0
 800304c:	e062      	b.n	8003114 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003054:	f107 0310 	add.w	r3, r7, #16
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fec5 	bl	8003de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800305e:	2301      	movs	r3, #1
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003062:	f001 fdc3 	bl	8004bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003066:	f000 fc2d 	bl	80038c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800306a:	f001 fd8d 	bl	8004b88 <vPortEnterCritical>
 800306e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003070:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003074:	b25b      	sxtb	r3, r3
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d103      	bne.n	8003084 <xQueueReceive+0x128>
 800307c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003086:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800308a:	b25b      	sxtb	r3, r3
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d103      	bne.n	800309a <xQueueReceive+0x13e>
 8003092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800309a:	f001 fda7 	bl	8004bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800309e:	1d3a      	adds	r2, r7, #4
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 feb4 	bl	8003e14 <xTaskCheckForTimeOut>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d123      	bne.n	80030fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030b4:	f000 f916 	bl	80032e4 <prvIsQueueEmpty>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d017      	beq.n	80030ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c0:	3324      	adds	r3, #36	@ 0x24
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fdd8 	bl	8003c7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030ce:	f000 f8b7 	bl	8003240 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030d2:	f000 fc05 	bl	80038e0 <xTaskResumeAll>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d189      	bne.n	8002ff0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80030dc:	4b0f      	ldr	r3, [pc, #60]	@ (800311c <xQueueReceive+0x1c0>)
 80030de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	e780      	b.n	8002ff0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030f0:	f000 f8a6 	bl	8003240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030f4:	f000 fbf4 	bl	80038e0 <xTaskResumeAll>
 80030f8:	e77a      	b.n	8002ff0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030fc:	f000 f8a0 	bl	8003240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003100:	f000 fbee 	bl	80038e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003104:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003106:	f000 f8ed 	bl	80032e4 <prvIsQueueEmpty>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	f43f af6f 	beq.w	8002ff0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003112:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003114:	4618      	mov	r0, r3
 8003116:	3730      	adds	r7, #48	@ 0x30
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	e000ed04 	.word	0xe000ed04

08003120 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003134:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10d      	bne.n	800315a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d14d      	bne.n	80031e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 ffcc 	bl	80040e8 <xTaskPriorityDisinherit>
 8003150:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	e043      	b.n	80031e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d119      	bne.n	8003194 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6858      	ldr	r0, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	461a      	mov	r2, r3
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	f002 f8a0 	bl	80052b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	441a      	add	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d32b      	bcc.n	80031e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	e026      	b.n	80031e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68d8      	ldr	r0, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	461a      	mov	r2, r3
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	f002 f886 	bl	80052b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	425b      	negs	r3, r3
 80031ae:	441a      	add	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d207      	bcs.n	80031d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	425b      	negs	r3, r3
 80031ca:	441a      	add	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d105      	bne.n	80031e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	3b01      	subs	r3, #1
 80031e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80031ea:	697b      	ldr	r3, [r7, #20]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d018      	beq.n	8003238 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	441a      	add	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	429a      	cmp	r2, r3
 800321e:	d303      	bcc.n	8003228 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68d9      	ldr	r1, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	461a      	mov	r2, r3
 8003232:	6838      	ldr	r0, [r7, #0]
 8003234:	f002 f83c 	bl	80052b0 <memcpy>
	}
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003248:	f001 fc9e 	bl	8004b88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003252:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003254:	e011      	b.n	800327a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	d012      	beq.n	8003284 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3324      	adds	r3, #36	@ 0x24
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fd5c 	bl	8003d20 <xTaskRemoveFromEventList>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800326e:	f000 fe35 	bl	8003edc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	3b01      	subs	r3, #1
 8003276:	b2db      	uxtb	r3, r3
 8003278:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	2b00      	cmp	r3, #0
 8003280:	dce9      	bgt.n	8003256 <prvUnlockQueue+0x16>
 8003282:	e000      	b.n	8003286 <prvUnlockQueue+0x46>
					break;
 8003284:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	22ff      	movs	r2, #255	@ 0xff
 800328a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800328e:	f001 fcad 	bl	8004bec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003292:	f001 fc79 	bl	8004b88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800329c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800329e:	e011      	b.n	80032c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d012      	beq.n	80032ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3310      	adds	r3, #16
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fd37 	bl	8003d20 <xTaskRemoveFromEventList>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032b8:	f000 fe10 	bl	8003edc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032bc:	7bbb      	ldrb	r3, [r7, #14]
 80032be:	3b01      	subs	r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	dce9      	bgt.n	80032a0 <prvUnlockQueue+0x60>
 80032cc:	e000      	b.n	80032d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	22ff      	movs	r2, #255	@ 0xff
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80032d8:	f001 fc88 	bl	8004bec <vPortExitCritical>
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032ec:	f001 fc4c 	bl	8004b88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e001      	b.n	8003302 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003302:	f001 fc73 	bl	8004bec <vPortExitCritical>

	return xReturn;
 8003306:	68fb      	ldr	r3, [r7, #12]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003318:	f001 fc36 	bl	8004b88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003324:	429a      	cmp	r2, r3
 8003326:	d102      	bne.n	800332e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003328:	2301      	movs	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e001      	b.n	8003332 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003332:	f001 fc5b 	bl	8004bec <vPortExitCritical>

	return xReturn;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e014      	b.n	800337a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003350:	4a0f      	ldr	r2, [pc, #60]	@ (8003390 <vQueueAddToRegistry+0x50>)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800335c:	490c      	ldr	r1, [pc, #48]	@ (8003390 <vQueueAddToRegistry+0x50>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003366:	4a0a      	ldr	r2, [pc, #40]	@ (8003390 <vQueueAddToRegistry+0x50>)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003372:	e006      	b.n	8003382 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3301      	adds	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b07      	cmp	r3, #7
 800337e:	d9e7      	bls.n	8003350 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000b6c 	.word	0x20000b6c

08003394 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033a4:	f001 fbf0 	bl	8004b88 <vPortEnterCritical>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d103      	bne.n	80033be <vQueueWaitForMessageRestricted+0x2a>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033c4:	b25b      	sxtb	r3, r3
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d103      	bne.n	80033d4 <vQueueWaitForMessageRestricted+0x40>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033d4:	f001 fc0a 	bl	8004bec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d106      	bne.n	80033ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3324      	adds	r3, #36	@ 0x24
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fc6d 	bl	8003cc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033ee:	6978      	ldr	r0, [r7, #20]
 80033f0:	f7ff ff26 	bl	8003240 <prvUnlockQueue>
	}
 80033f4:	bf00      	nop
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08e      	sub	sp, #56	@ 0x38
 8003400:	af04      	add	r7, sp, #16
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800340a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	623b      	str	r3, [r7, #32]
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10b      	bne.n	8003446 <xTaskCreateStatic+0x4a>
	__asm volatile
 800342e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	61fb      	str	r3, [r7, #28]
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	e7fd      	b.n	8003442 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003446:	23a8      	movs	r3, #168	@ 0xa8
 8003448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2ba8      	cmp	r3, #168	@ 0xa8
 800344e:	d00b      	beq.n	8003468 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	61bb      	str	r3, [r7, #24]
}
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003468:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800346a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01e      	beq.n	80034ae <xTaskCreateStatic+0xb2>
 8003470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01b      	beq.n	80034ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	2202      	movs	r2, #2
 8003484:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003488:	2300      	movs	r3, #0
 800348a:	9303      	str	r3, [sp, #12]
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	9302      	str	r3, [sp, #8]
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f851 	bl	8003548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034a8:	f000 f8f6 	bl	8003698 <prvAddNewTaskToReadyList>
 80034ac:	e001      	b.n	80034b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034b2:	697b      	ldr	r3, [r7, #20]
	}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3728      	adds	r7, #40	@ 0x28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	@ 0x30
 80034c0:	af04      	add	r7, sp, #16
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f001 fc7b 	bl	8004dcc <pvPortMalloc>
 80034d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00e      	beq.n	80034fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034de:	20a8      	movs	r0, #168	@ 0xa8
 80034e0:	f001 fc74 	bl	8004dcc <pvPortMalloc>
 80034e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80034f2:	e005      	b.n	8003500 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034f4:	6978      	ldr	r0, [r7, #20]
 80034f6:	f001 fd37 	bl	8004f68 <vPortFree>
 80034fa:	e001      	b.n	8003500 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d017      	beq.n	8003536 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	2300      	movs	r3, #0
 8003512:	9303      	str	r3, [sp, #12]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	9302      	str	r3, [sp, #8]
 8003518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800351a:	9301      	str	r3, [sp, #4]
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f80f 	bl	8003548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800352a:	69f8      	ldr	r0, [r7, #28]
 800352c:	f000 f8b4 	bl	8003698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003530:	2301      	movs	r3, #1
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	e002      	b.n	800353c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
 800353a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800353c:	69bb      	ldr	r3, [r7, #24]
	}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	461a      	mov	r2, r3
 8003560:	21a5      	movs	r1, #165	@ 0xa5
 8003562:	f001 fe21 	bl	80051a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003570:	3b01      	subs	r3, #1
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f023 0307 	bic.w	r3, r3, #7
 800357e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	617b      	str	r3, [r7, #20]
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	e7fd      	b.n	800359e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01f      	beq.n	80035e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	e012      	b.n	80035d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4413      	add	r3, r2
 80035b4:	7819      	ldrb	r1, [r3, #0]
 80035b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	3334      	adds	r3, #52	@ 0x34
 80035be:	460a      	mov	r2, r1
 80035c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	d9e9      	bls.n	80035ae <prvInitialiseNewTask+0x66>
 80035da:	e000      	b.n	80035de <prvInitialiseNewTask+0x96>
			{
				break;
 80035dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035e6:	e003      	b.n	80035f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f2:	2b37      	cmp	r3, #55	@ 0x37
 80035f4:	d901      	bls.n	80035fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035f6:	2337      	movs	r3, #55	@ 0x37
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003604:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003608:	2200      	movs	r2, #0
 800360a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360e:	3304      	adds	r3, #4
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff f965 	bl	80028e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003618:	3318      	adds	r3, #24
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f960 	bl	80028e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003624:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003628:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003634:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003638:	2200      	movs	r2, #0
 800363a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	2200      	movs	r2, #0
 8003642:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003648:	3354      	adds	r3, #84	@ 0x54
 800364a:	224c      	movs	r2, #76	@ 0x4c
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f001 fdaa 	bl	80051a8 <memset>
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	4a0d      	ldr	r2, [pc, #52]	@ (800368c <prvInitialiseNewTask+0x144>)
 8003658:	659a      	str	r2, [r3, #88]	@ 0x58
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	4a0c      	ldr	r2, [pc, #48]	@ (8003690 <prvInitialiseNewTask+0x148>)
 800365e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	4a0c      	ldr	r2, [pc, #48]	@ (8003694 <prvInitialiseNewTask+0x14c>)
 8003664:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	68f9      	ldr	r1, [r7, #12]
 800366a:	69b8      	ldr	r0, [r7, #24]
 800366c:	f001 f95a 	bl	8004924 <pxPortInitialiseStack>
 8003670:	4602      	mov	r2, r0
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800367c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003682:	bf00      	nop
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20001e00 	.word	0x20001e00
 8003690:	20001e68 	.word	0x20001e68
 8003694:	20001ed0 	.word	0x20001ed0

08003698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036a0:	f001 fa72 	bl	8004b88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036a4:	4b2d      	ldr	r3, [pc, #180]	@ (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	4a2c      	ldr	r2, [pc, #176]	@ (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036bc:	4b27      	ldr	r3, [pc, #156]	@ (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d110      	bne.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036c4:	f000 fc2e 	bl	8003f24 <prvInitialiseTaskLists>
 80036c8:	e00d      	b.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036ca:	4b26      	ldr	r3, [pc, #152]	@ (8003764 <prvAddNewTaskToReadyList+0xcc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036d2:	4b23      	ldr	r3, [pc, #140]	@ (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d802      	bhi.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036e6:	4b20      	ldr	r3, [pc, #128]	@ (8003768 <prvAddNewTaskToReadyList+0xd0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003768 <prvAddNewTaskToReadyList+0xd0>)
 80036ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003768 <prvAddNewTaskToReadyList+0xd0>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036fc:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <prvAddNewTaskToReadyList+0xd4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d903      	bls.n	800370c <prvAddNewTaskToReadyList+0x74>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	4a18      	ldr	r2, [pc, #96]	@ (800376c <prvAddNewTaskToReadyList+0xd4>)
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4a15      	ldr	r2, [pc, #84]	@ (8003770 <prvAddNewTaskToReadyList+0xd8>)
 800371a:	441a      	add	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f7ff f8e9 	bl	80028fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003728:	f001 fa60 	bl	8004bec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800372c:	4b0d      	ldr	r3, [pc, #52]	@ (8003764 <prvAddNewTaskToReadyList+0xcc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00e      	beq.n	8003752 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003734:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <prvAddNewTaskToReadyList+0xc8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	429a      	cmp	r2, r3
 8003740:	d207      	bcs.n	8003752 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003742:	4b0c      	ldr	r3, [pc, #48]	@ (8003774 <prvAddNewTaskToReadyList+0xdc>)
 8003744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20001080 	.word	0x20001080
 8003760:	20000bac 	.word	0x20000bac
 8003764:	2000108c 	.word	0x2000108c
 8003768:	2000109c 	.word	0x2000109c
 800376c:	20001088 	.word	0x20001088
 8003770:	20000bb0 	.word	0x20000bb0
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d018      	beq.n	80037bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800378a:	4b14      	ldr	r3, [pc, #80]	@ (80037dc <vTaskDelay+0x64>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <vTaskDelay+0x32>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	60bb      	str	r3, [r7, #8]
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	e7fd      	b.n	80037a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037aa:	f000 f88b 	bl	80038c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037ae:	2100      	movs	r1, #0
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fd09 	bl	80041c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037b6:	f000 f893 	bl	80038e0 <xTaskResumeAll>
 80037ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d107      	bne.n	80037d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80037c2:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <vTaskDelay+0x68>)
 80037c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200010a8 	.word	0x200010a8
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	@ 0x28
 80037e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037f2:	463a      	mov	r2, r7
 80037f4:	1d39      	adds	r1, r7, #4
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f81c 	bl	8002838 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003800:	6839      	ldr	r1, [r7, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	9202      	str	r2, [sp, #8]
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	460a      	mov	r2, r1
 8003812:	4924      	ldr	r1, [pc, #144]	@ (80038a4 <vTaskStartScheduler+0xc0>)
 8003814:	4824      	ldr	r0, [pc, #144]	@ (80038a8 <vTaskStartScheduler+0xc4>)
 8003816:	f7ff fdf1 	bl	80033fc <xTaskCreateStatic>
 800381a:	4603      	mov	r3, r0
 800381c:	4a23      	ldr	r2, [pc, #140]	@ (80038ac <vTaskStartScheduler+0xc8>)
 800381e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003820:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <vTaskStartScheduler+0xc8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003828:	2301      	movs	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e001      	b.n	8003832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d102      	bne.n	800383e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003838:	f000 fd1a 	bl	8004270 <xTimerCreateTimerTask>
 800383c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d11b      	bne.n	800387c <vTaskStartScheduler+0x98>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	613b      	str	r3, [r7, #16]
}
 8003856:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003858:	4b15      	ldr	r3, [pc, #84]	@ (80038b0 <vTaskStartScheduler+0xcc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3354      	adds	r3, #84	@ 0x54
 800385e:	4a15      	ldr	r2, [pc, #84]	@ (80038b4 <vTaskStartScheduler+0xd0>)
 8003860:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003862:	4b15      	ldr	r3, [pc, #84]	@ (80038b8 <vTaskStartScheduler+0xd4>)
 8003864:	f04f 32ff 	mov.w	r2, #4294967295
 8003868:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800386a:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <vTaskStartScheduler+0xd8>)
 800386c:	2201      	movs	r2, #1
 800386e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003870:	4b13      	ldr	r3, [pc, #76]	@ (80038c0 <vTaskStartScheduler+0xdc>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003876:	f001 f8e3 	bl	8004a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800387a:	e00f      	b.n	800389c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d10b      	bne.n	800389c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	60fb      	str	r3, [r7, #12]
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <vTaskStartScheduler+0xb4>
}
 800389c:	bf00      	nop
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	0800539c 	.word	0x0800539c
 80038a8:	08003ef5 	.word	0x08003ef5
 80038ac:	200010a4 	.word	0x200010a4
 80038b0:	20000bac 	.word	0x20000bac
 80038b4:	20000010 	.word	0x20000010
 80038b8:	200010a0 	.word	0x200010a0
 80038bc:	2000108c 	.word	0x2000108c
 80038c0:	20001084 	.word	0x20001084

080038c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038c8:	4b04      	ldr	r3, [pc, #16]	@ (80038dc <vTaskSuspendAll+0x18>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	4a03      	ldr	r2, [pc, #12]	@ (80038dc <vTaskSuspendAll+0x18>)
 80038d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	200010a8 	.word	0x200010a8

080038e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038ee:	4b42      	ldr	r3, [pc, #264]	@ (80039f8 <xTaskResumeAll+0x118>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <xTaskResumeAll+0x2e>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	603b      	str	r3, [r7, #0]
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	e7fd      	b.n	800390a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800390e:	f001 f93b 	bl	8004b88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003912:	4b39      	ldr	r3, [pc, #228]	@ (80039f8 <xTaskResumeAll+0x118>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3b01      	subs	r3, #1
 8003918:	4a37      	ldr	r2, [pc, #220]	@ (80039f8 <xTaskResumeAll+0x118>)
 800391a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800391c:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <xTaskResumeAll+0x118>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d162      	bne.n	80039ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003924:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <xTaskResumeAll+0x11c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d05e      	beq.n	80039ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800392c:	e02f      	b.n	800398e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800392e:	4b34      	ldr	r3, [pc, #208]	@ (8003a00 <xTaskResumeAll+0x120>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3318      	adds	r3, #24
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff f83a 	bl	80029b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3304      	adds	r3, #4
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff f835 	bl	80029b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800394e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a04 <xTaskResumeAll+0x124>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d903      	bls.n	800395e <xTaskResumeAll+0x7e>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a04 <xTaskResumeAll+0x124>)
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4a27      	ldr	r2, [pc, #156]	@ (8003a08 <xTaskResumeAll+0x128>)
 800396c:	441a      	add	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	3304      	adds	r3, #4
 8003972:	4619      	mov	r1, r3
 8003974:	4610      	mov	r0, r2
 8003976:	f7fe ffc0 	bl	80028fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800397e:	4b23      	ldr	r3, [pc, #140]	@ (8003a0c <xTaskResumeAll+0x12c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	429a      	cmp	r2, r3
 8003986:	d302      	bcc.n	800398e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003988:	4b21      	ldr	r3, [pc, #132]	@ (8003a10 <xTaskResumeAll+0x130>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800398e:	4b1c      	ldr	r3, [pc, #112]	@ (8003a00 <xTaskResumeAll+0x120>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1cb      	bne.n	800392e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800399c:	f000 fb66 	bl	800406c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a14 <xTaskResumeAll+0x134>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d010      	beq.n	80039ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039ac:	f000 f846 	bl	8003a3c <xTaskIncrementTick>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80039b6:	4b16      	ldr	r3, [pc, #88]	@ (8003a10 <xTaskResumeAll+0x130>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3b01      	subs	r3, #1
 80039c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f1      	bne.n	80039ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80039c8:	4b12      	ldr	r3, [pc, #72]	@ (8003a14 <xTaskResumeAll+0x134>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039ce:	4b10      	ldr	r3, [pc, #64]	@ (8003a10 <xTaskResumeAll+0x130>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039da:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <xTaskResumeAll+0x138>)
 80039dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039ea:	f001 f8ff 	bl	8004bec <vPortExitCritical>

	return xAlreadyYielded;
 80039ee:	68bb      	ldr	r3, [r7, #8]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200010a8 	.word	0x200010a8
 80039fc:	20001080 	.word	0x20001080
 8003a00:	20001040 	.word	0x20001040
 8003a04:	20001088 	.word	0x20001088
 8003a08:	20000bb0 	.word	0x20000bb0
 8003a0c:	20000bac 	.word	0x20000bac
 8003a10:	20001094 	.word	0x20001094
 8003a14:	20001090 	.word	0x20001090
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a22:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <xTaskGetTickCount+0x1c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a28:	687b      	ldr	r3, [r7, #4]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	20001084 	.word	0x20001084

08003a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a46:	4b4f      	ldr	r3, [pc, #316]	@ (8003b84 <xTaskIncrementTick+0x148>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f040 8090 	bne.w	8003b70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a50:	4b4d      	ldr	r3, [pc, #308]	@ (8003b88 <xTaskIncrementTick+0x14c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a58:	4a4b      	ldr	r2, [pc, #300]	@ (8003b88 <xTaskIncrementTick+0x14c>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d121      	bne.n	8003aa8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a64:	4b49      	ldr	r3, [pc, #292]	@ (8003b8c <xTaskIncrementTick+0x150>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	603b      	str	r3, [r7, #0]
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	e7fd      	b.n	8003a82 <xTaskIncrementTick+0x46>
 8003a86:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <xTaskIncrementTick+0x150>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	4b40      	ldr	r3, [pc, #256]	@ (8003b90 <xTaskIncrementTick+0x154>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a3e      	ldr	r2, [pc, #248]	@ (8003b8c <xTaskIncrementTick+0x150>)
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4a3e      	ldr	r2, [pc, #248]	@ (8003b90 <xTaskIncrementTick+0x154>)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b94 <xTaskIncrementTick+0x158>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8003b94 <xTaskIncrementTick+0x158>)
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	f000 fae2 	bl	800406c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <xTaskIncrementTick+0x15c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d349      	bcc.n	8003b46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ab2:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <xTaskIncrementTick+0x150>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003abc:	4b36      	ldr	r3, [pc, #216]	@ (8003b98 <xTaskIncrementTick+0x15c>)
 8003abe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac2:	601a      	str	r2, [r3, #0]
					break;
 8003ac4:	e03f      	b.n	8003b46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac6:	4b31      	ldr	r3, [pc, #196]	@ (8003b8c <xTaskIncrementTick+0x150>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d203      	bcs.n	8003ae6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ade:	4a2e      	ldr	r2, [pc, #184]	@ (8003b98 <xTaskIncrementTick+0x15c>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ae4:	e02f      	b.n	8003b46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe ff62 	bl	80029b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	3318      	adds	r3, #24
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe ff59 	bl	80029b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b06:	4b25      	ldr	r3, [pc, #148]	@ (8003b9c <xTaskIncrementTick+0x160>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d903      	bls.n	8003b16 <xTaskIncrementTick+0xda>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b12:	4a22      	ldr	r2, [pc, #136]	@ (8003b9c <xTaskIncrementTick+0x160>)
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba0 <xTaskIncrementTick+0x164>)
 8003b24:	441a      	add	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f7fe fee4 	bl	80028fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b36:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <xTaskIncrementTick+0x168>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d3b8      	bcc.n	8003ab2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b44:	e7b5      	b.n	8003ab2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b46:	4b17      	ldr	r3, [pc, #92]	@ (8003ba4 <xTaskIncrementTick+0x168>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4c:	4914      	ldr	r1, [pc, #80]	@ (8003ba0 <xTaskIncrementTick+0x164>)
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d901      	bls.n	8003b62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b62:	4b11      	ldr	r3, [pc, #68]	@ (8003ba8 <xTaskIncrementTick+0x16c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e004      	b.n	8003b7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b70:	4b0e      	ldr	r3, [pc, #56]	@ (8003bac <xTaskIncrementTick+0x170>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	4a0d      	ldr	r2, [pc, #52]	@ (8003bac <xTaskIncrementTick+0x170>)
 8003b78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b7a:	697b      	ldr	r3, [r7, #20]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	200010a8 	.word	0x200010a8
 8003b88:	20001084 	.word	0x20001084
 8003b8c:	20001038 	.word	0x20001038
 8003b90:	2000103c 	.word	0x2000103c
 8003b94:	20001098 	.word	0x20001098
 8003b98:	200010a0 	.word	0x200010a0
 8003b9c:	20001088 	.word	0x20001088
 8003ba0:	20000bb0 	.word	0x20000bb0
 8003ba4:	20000bac 	.word	0x20000bac
 8003ba8:	20001094 	.word	0x20001094
 8003bac:	20001090 	.word	0x20001090

08003bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c64 <vTaskSwitchContext+0xb4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8003c68 <vTaskSwitchContext+0xb8>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bc4:	e047      	b.n	8003c56 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003bc6:	4b28      	ldr	r3, [pc, #160]	@ (8003c68 <vTaskSwitchContext+0xb8>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bcc:	4b27      	ldr	r3, [pc, #156]	@ (8003c6c <vTaskSwitchContext+0xbc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	e011      	b.n	8003bf8 <vTaskSwitchContext+0x48>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <vTaskSwitchContext+0x42>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	607b      	str	r3, [r7, #4]
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	e7fd      	b.n	8003bee <vTaskSwitchContext+0x3e>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	491d      	ldr	r1, [pc, #116]	@ (8003c70 <vTaskSwitchContext+0xc0>)
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0e3      	beq.n	8003bd4 <vTaskSwitchContext+0x24>
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4a16      	ldr	r2, [pc, #88]	@ (8003c70 <vTaskSwitchContext+0xc0>)
 8003c18:	4413      	add	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d104      	bne.n	8003c3c <vTaskSwitchContext+0x8c>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4a0c      	ldr	r2, [pc, #48]	@ (8003c74 <vTaskSwitchContext+0xc4>)
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4a09      	ldr	r2, [pc, #36]	@ (8003c6c <vTaskSwitchContext+0xbc>)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c4c:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <vTaskSwitchContext+0xc4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3354      	adds	r3, #84	@ 0x54
 8003c52:	4a09      	ldr	r2, [pc, #36]	@ (8003c78 <vTaskSwitchContext+0xc8>)
 8003c54:	6013      	str	r3, [r2, #0]
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	200010a8 	.word	0x200010a8
 8003c68:	20001094 	.word	0x20001094
 8003c6c:	20001088 	.word	0x20001088
 8003c70:	20000bb0 	.word	0x20000bb0
 8003c74:	20000bac 	.word	0x20000bac
 8003c78:	20000010 	.word	0x20000010

08003c7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10b      	bne.n	8003ca4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	60fb      	str	r3, [r7, #12]
}
 8003c9e:	bf00      	nop
 8003ca0:	bf00      	nop
 8003ca2:	e7fd      	b.n	8003ca0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ca4:	4b07      	ldr	r3, [pc, #28]	@ (8003cc4 <vTaskPlaceOnEventList+0x48>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3318      	adds	r3, #24
 8003caa:	4619      	mov	r1, r3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7fe fe48 	bl	8002942 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	6838      	ldr	r0, [r7, #0]
 8003cb6:	f000 fa87 	bl	80041c8 <prvAddCurrentTaskToDelayedList>
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000bac 	.word	0x20000bac

08003cc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10b      	bne.n	8003cf2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	617b      	str	r3, [r7, #20]
}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	e7fd      	b.n	8003cee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d1c <vTaskPlaceOnEventListRestricted+0x54>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3318      	adds	r3, #24
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7fe fdfd 	bl	80028fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	68b8      	ldr	r0, [r7, #8]
 8003d10:	f000 fa5a 	bl	80041c8 <prvAddCurrentTaskToDelayedList>
	}
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000bac 	.word	0x20000bac

08003d20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	60fb      	str	r3, [r7, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	e7fd      	b.n	8003d4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	3318      	adds	r3, #24
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe fe2e 	bl	80029b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d58:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <xTaskRemoveFromEventList+0xb0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11d      	bne.n	8003d9c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe fe25 	bl	80029b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d6e:	4b19      	ldr	r3, [pc, #100]	@ (8003dd4 <xTaskRemoveFromEventList+0xb4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d903      	bls.n	8003d7e <xTaskRemoveFromEventList+0x5e>
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	4a16      	ldr	r2, [pc, #88]	@ (8003dd4 <xTaskRemoveFromEventList+0xb4>)
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4a13      	ldr	r2, [pc, #76]	@ (8003dd8 <xTaskRemoveFromEventList+0xb8>)
 8003d8c:	441a      	add	r2, r3
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	3304      	adds	r3, #4
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f7fe fdb0 	bl	80028fa <vListInsertEnd>
 8003d9a:	e005      	b.n	8003da8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	3318      	adds	r3, #24
 8003da0:	4619      	mov	r1, r3
 8003da2:	480e      	ldr	r0, [pc, #56]	@ (8003ddc <xTaskRemoveFromEventList+0xbc>)
 8003da4:	f7fe fda9 	bl	80028fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dac:	4b0c      	ldr	r3, [pc, #48]	@ (8003de0 <xTaskRemoveFromEventList+0xc0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d905      	bls.n	8003dc2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003db6:	2301      	movs	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003dba:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <xTaskRemoveFromEventList+0xc4>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e001      	b.n	8003dc6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003dc6:	697b      	ldr	r3, [r7, #20]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	200010a8 	.word	0x200010a8
 8003dd4:	20001088 	.word	0x20001088
 8003dd8:	20000bb0 	.word	0x20000bb0
 8003ddc:	20001040 	.word	0x20001040
 8003de0:	20000bac 	.word	0x20000bac
 8003de4:	20001094 	.word	0x20001094

08003de8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003df0:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <vTaskInternalSetTimeOutState+0x24>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <vTaskInternalSetTimeOutState+0x28>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	605a      	str	r2, [r3, #4]
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	20001098 	.word	0x20001098
 8003e10:	20001084 	.word	0x20001084

08003e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	613b      	str	r3, [r7, #16]
}
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
 8003e3a:	e7fd      	b.n	8003e38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10b      	bne.n	8003e5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	60fb      	str	r3, [r7, #12]
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	e7fd      	b.n	8003e56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003e5a:	f000 fe95 	bl	8004b88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <xTaskCheckForTimeOut+0xc0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d102      	bne.n	8003e7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	e023      	b.n	8003ec6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b15      	ldr	r3, [pc, #84]	@ (8003ed8 <xTaskCheckForTimeOut+0xc4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d007      	beq.n	8003e9a <xTaskCheckForTimeOut+0x86>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d302      	bcc.n	8003e9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	e015      	b.n	8003ec6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d20b      	bcs.n	8003ebc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	1ad2      	subs	r2, r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff99 	bl	8003de8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	e004      	b.n	8003ec6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ec6:	f000 fe91 	bl	8004bec <vPortExitCritical>

	return xReturn;
 8003eca:	69fb      	ldr	r3, [r7, #28]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3720      	adds	r7, #32
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20001084 	.word	0x20001084
 8003ed8:	20001098 	.word	0x20001098

08003edc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ee0:	4b03      	ldr	r3, [pc, #12]	@ (8003ef0 <vTaskMissedYield+0x14>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	20001094 	.word	0x20001094

08003ef4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003efc:	f000 f852 	bl	8003fa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <prvIdleTask+0x28>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d9f9      	bls.n	8003efc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f08:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <prvIdleTask+0x2c>)
 8003f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f18:	e7f0      	b.n	8003efc <prvIdleTask+0x8>
 8003f1a:	bf00      	nop
 8003f1c:	20000bb0 	.word	0x20000bb0
 8003f20:	e000ed04 	.word	0xe000ed04

08003f24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
 8003f2e:	e00c      	b.n	8003f4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4a12      	ldr	r2, [pc, #72]	@ (8003f84 <prvInitialiseTaskLists+0x60>)
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe fcae 	bl	80028a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3301      	adds	r3, #1
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b37      	cmp	r3, #55	@ 0x37
 8003f4e:	d9ef      	bls.n	8003f30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f50:	480d      	ldr	r0, [pc, #52]	@ (8003f88 <prvInitialiseTaskLists+0x64>)
 8003f52:	f7fe fca5 	bl	80028a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f56:	480d      	ldr	r0, [pc, #52]	@ (8003f8c <prvInitialiseTaskLists+0x68>)
 8003f58:	f7fe fca2 	bl	80028a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f5c:	480c      	ldr	r0, [pc, #48]	@ (8003f90 <prvInitialiseTaskLists+0x6c>)
 8003f5e:	f7fe fc9f 	bl	80028a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f62:	480c      	ldr	r0, [pc, #48]	@ (8003f94 <prvInitialiseTaskLists+0x70>)
 8003f64:	f7fe fc9c 	bl	80028a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f68:	480b      	ldr	r0, [pc, #44]	@ (8003f98 <prvInitialiseTaskLists+0x74>)
 8003f6a:	f7fe fc99 	bl	80028a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <prvInitialiseTaskLists+0x78>)
 8003f70:	4a05      	ldr	r2, [pc, #20]	@ (8003f88 <prvInitialiseTaskLists+0x64>)
 8003f72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <prvInitialiseTaskLists+0x7c>)
 8003f76:	4a05      	ldr	r2, [pc, #20]	@ (8003f8c <prvInitialiseTaskLists+0x68>)
 8003f78:	601a      	str	r2, [r3, #0]
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000bb0 	.word	0x20000bb0
 8003f88:	20001010 	.word	0x20001010
 8003f8c:	20001024 	.word	0x20001024
 8003f90:	20001040 	.word	0x20001040
 8003f94:	20001054 	.word	0x20001054
 8003f98:	2000106c 	.word	0x2000106c
 8003f9c:	20001038 	.word	0x20001038
 8003fa0:	2000103c 	.word	0x2000103c

08003fa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003faa:	e019      	b.n	8003fe0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fac:	f000 fdec 	bl	8004b88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb0:	4b10      	ldr	r3, [pc, #64]	@ (8003ff4 <prvCheckTasksWaitingTermination+0x50>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fe fcf9 	bl	80029b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <prvCheckTasksWaitingTermination+0x54>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ff8 <prvCheckTasksWaitingTermination+0x54>)
 8003fca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <prvCheckTasksWaitingTermination+0x58>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ffc <prvCheckTasksWaitingTermination+0x58>)
 8003fd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fd6:	f000 fe09 	bl	8004bec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f810 	bl	8004000 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fe0:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <prvCheckTasksWaitingTermination+0x58>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e1      	bne.n	8003fac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20001054 	.word	0x20001054
 8003ff8:	20001080 	.word	0x20001080
 8003ffc:	20001068 	.word	0x20001068

08004000 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3354      	adds	r3, #84	@ 0x54
 800400c:	4618      	mov	r0, r3
 800400e:	f001 f8d3 	bl	80051b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004018:	2b00      	cmp	r3, #0
 800401a:	d108      	bne.n	800402e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004020:	4618      	mov	r0, r3
 8004022:	f000 ffa1 	bl	8004f68 <vPortFree>
				vPortFree( pxTCB );
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 ff9e 	bl	8004f68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800402c:	e019      	b.n	8004062 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004034:	2b01      	cmp	r3, #1
 8004036:	d103      	bne.n	8004040 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 ff95 	bl	8004f68 <vPortFree>
	}
 800403e:	e010      	b.n	8004062 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004046:	2b02      	cmp	r3, #2
 8004048:	d00b      	beq.n	8004062 <prvDeleteTCB+0x62>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	60fb      	str	r3, [r7, #12]
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	e7fd      	b.n	800405e <prvDeleteTCB+0x5e>
	}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004072:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <prvResetNextTaskUnblockTime+0x38>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d104      	bne.n	8004086 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800407c:	4b0a      	ldr	r3, [pc, #40]	@ (80040a8 <prvResetNextTaskUnblockTime+0x3c>)
 800407e:	f04f 32ff 	mov.w	r2, #4294967295
 8004082:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004084:	e008      	b.n	8004098 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004086:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <prvResetNextTaskUnblockTime+0x38>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4a04      	ldr	r2, [pc, #16]	@ (80040a8 <prvResetNextTaskUnblockTime+0x3c>)
 8004096:	6013      	str	r3, [r2, #0]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	20001038 	.word	0x20001038
 80040a8:	200010a0 	.word	0x200010a0

080040ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040b2:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <xTaskGetSchedulerState+0x34>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040ba:	2301      	movs	r3, #1
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	e008      	b.n	80040d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c0:	4b08      	ldr	r3, [pc, #32]	@ (80040e4 <xTaskGetSchedulerState+0x38>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040c8:	2302      	movs	r3, #2
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	e001      	b.n	80040d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040d2:	687b      	ldr	r3, [r7, #4]
	}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	2000108c 	.word	0x2000108c
 80040e4:	200010a8 	.word	0x200010a8

080040e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d058      	beq.n	80041b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80040fe:	4b2f      	ldr	r3, [pc, #188]	@ (80041bc <xTaskPriorityDisinherit+0xd4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	429a      	cmp	r2, r3
 8004106:	d00b      	beq.n	8004120 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	60fb      	str	r3, [r7, #12]
}
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60bb      	str	r3, [r7, #8]
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004144:	1e5a      	subs	r2, r3, #1
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004152:	429a      	cmp	r2, r3
 8004154:	d02c      	beq.n	80041b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415a:	2b00      	cmp	r3, #0
 800415c:	d128      	bne.n	80041b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3304      	adds	r3, #4
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fc26 	bl	80029b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004180:	4b0f      	ldr	r3, [pc, #60]	@ (80041c0 <xTaskPriorityDisinherit+0xd8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d903      	bls.n	8004190 <xTaskPriorityDisinherit+0xa8>
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	4a0c      	ldr	r2, [pc, #48]	@ (80041c0 <xTaskPriorityDisinherit+0xd8>)
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4a09      	ldr	r2, [pc, #36]	@ (80041c4 <xTaskPriorityDisinherit+0xdc>)
 800419e:	441a      	add	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f7fe fba7 	bl	80028fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041ac:	2301      	movs	r3, #1
 80041ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041b0:	697b      	ldr	r3, [r7, #20]
	}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000bac 	.word	0x20000bac
 80041c0:	20001088 	.word	0x20001088
 80041c4:	20000bb0 	.word	0x20000bb0

080041c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041d2:	4b21      	ldr	r3, [pc, #132]	@ (8004258 <prvAddCurrentTaskToDelayedList+0x90>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041d8:	4b20      	ldr	r3, [pc, #128]	@ (800425c <prvAddCurrentTaskToDelayedList+0x94>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3304      	adds	r3, #4
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe fbe8 	bl	80029b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d10a      	bne.n	8004202 <prvAddCurrentTaskToDelayedList+0x3a>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041f2:	4b1a      	ldr	r3, [pc, #104]	@ (800425c <prvAddCurrentTaskToDelayedList+0x94>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4819      	ldr	r0, [pc, #100]	@ (8004260 <prvAddCurrentTaskToDelayedList+0x98>)
 80041fc:	f7fe fb7d 	bl	80028fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004200:	e026      	b.n	8004250 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4413      	add	r3, r2
 8004208:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800420a:	4b14      	ldr	r3, [pc, #80]	@ (800425c <prvAddCurrentTaskToDelayedList+0x94>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	429a      	cmp	r2, r3
 8004218:	d209      	bcs.n	800422e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800421a:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <prvAddCurrentTaskToDelayedList+0x9c>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b0f      	ldr	r3, [pc, #60]	@ (800425c <prvAddCurrentTaskToDelayedList+0x94>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f7fe fb8b 	bl	8002942 <vListInsert>
}
 800422c:	e010      	b.n	8004250 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800422e:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <prvAddCurrentTaskToDelayedList+0x94>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3304      	adds	r3, #4
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f7fe fb81 	bl	8002942 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004240:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	d202      	bcs.n	8004250 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800424a:	4a08      	ldr	r2, [pc, #32]	@ (800426c <prvAddCurrentTaskToDelayedList+0xa4>)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20001084 	.word	0x20001084
 800425c:	20000bac 	.word	0x20000bac
 8004260:	2000106c 	.word	0x2000106c
 8004264:	2000103c 	.word	0x2000103c
 8004268:	20001038 	.word	0x20001038
 800426c:	200010a0 	.word	0x200010a0

08004270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	@ 0x28
 8004274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800427a:	f000 fb13 	bl	80048a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800427e:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <xTimerCreateTimerTask+0x84>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d021      	beq.n	80042ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800428e:	1d3a      	adds	r2, r7, #4
 8004290:	f107 0108 	add.w	r1, r7, #8
 8004294:	f107 030c 	add.w	r3, r7, #12
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe fae7 	bl	800286c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	9202      	str	r2, [sp, #8]
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	2302      	movs	r3, #2
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2300      	movs	r3, #0
 80042ae:	460a      	mov	r2, r1
 80042b0:	4911      	ldr	r1, [pc, #68]	@ (80042f8 <xTimerCreateTimerTask+0x88>)
 80042b2:	4812      	ldr	r0, [pc, #72]	@ (80042fc <xTimerCreateTimerTask+0x8c>)
 80042b4:	f7ff f8a2 	bl	80033fc <xTaskCreateStatic>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4a11      	ldr	r2, [pc, #68]	@ (8004300 <xTimerCreateTimerTask+0x90>)
 80042bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042be:	4b10      	ldr	r3, [pc, #64]	@ (8004300 <xTimerCreateTimerTask+0x90>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042c6:	2301      	movs	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	613b      	str	r3, [r7, #16]
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80042e8:	697b      	ldr	r3, [r7, #20]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200010dc 	.word	0x200010dc
 80042f8:	080053a4 	.word	0x080053a4
 80042fc:	0800443d 	.word	0x0800443d
 8004300:	200010e0 	.word	0x200010e0

08004304 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	@ 0x28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10b      	bne.n	8004334 <xTimerGenericCommand+0x30>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	623b      	str	r3, [r7, #32]
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	e7fd      	b.n	8004330 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004334:	4b19      	ldr	r3, [pc, #100]	@ (800439c <xTimerGenericCommand+0x98>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02a      	beq.n	8004392 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b05      	cmp	r3, #5
 800434c:	dc18      	bgt.n	8004380 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800434e:	f7ff fead 	bl	80040ac <xTaskGetSchedulerState>
 8004352:	4603      	mov	r3, r0
 8004354:	2b02      	cmp	r3, #2
 8004356:	d109      	bne.n	800436c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004358:	4b10      	ldr	r3, [pc, #64]	@ (800439c <xTimerGenericCommand+0x98>)
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	f107 0110 	add.w	r1, r7, #16
 8004360:	2300      	movs	r3, #0
 8004362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004364:	f7fe fc5a 	bl	8002c1c <xQueueGenericSend>
 8004368:	6278      	str	r0, [r7, #36]	@ 0x24
 800436a:	e012      	b.n	8004392 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800436c:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <xTimerGenericCommand+0x98>)
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	f107 0110 	add.w	r1, r7, #16
 8004374:	2300      	movs	r3, #0
 8004376:	2200      	movs	r2, #0
 8004378:	f7fe fc50 	bl	8002c1c <xQueueGenericSend>
 800437c:	6278      	str	r0, [r7, #36]	@ 0x24
 800437e:	e008      	b.n	8004392 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <xTimerGenericCommand+0x98>)
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	f107 0110 	add.w	r1, r7, #16
 8004388:	2300      	movs	r3, #0
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	f7fe fd48 	bl	8002e20 <xQueueGenericSendFromISR>
 8004390:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004394:	4618      	mov	r0, r3
 8004396:	3728      	adds	r7, #40	@ 0x28
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	200010dc 	.word	0x200010dc

080043a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043aa:	4b23      	ldr	r3, [pc, #140]	@ (8004438 <prvProcessExpiredTimer+0x98>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fafb 	bl	80029b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d023      	beq.n	8004414 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	18d1      	adds	r1, r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	6978      	ldr	r0, [r7, #20]
 80043da:	f000 f8d5 	bl	8004588 <prvInsertTimerInActiveList>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d020      	beq.n	8004426 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	2100      	movs	r1, #0
 80043ee:	6978      	ldr	r0, [r7, #20]
 80043f0:	f7ff ff88 	bl	8004304 <xTimerGenericCommand>
 80043f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d114      	bne.n	8004426 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	60fb      	str	r3, [r7, #12]
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	e7fd      	b.n	8004410 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	b2da      	uxtb	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	4798      	blx	r3
}
 800442e:	bf00      	nop
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	200010d4 	.word	0x200010d4

0800443c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004444:	f107 0308 	add.w	r3, r7, #8
 8004448:	4618      	mov	r0, r3
 800444a:	f000 f859 	bl	8004500 <prvGetNextExpireTime>
 800444e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4619      	mov	r1, r3
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f805 	bl	8004464 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800445a:	f000 f8d7 	bl	800460c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800445e:	bf00      	nop
 8004460:	e7f0      	b.n	8004444 <prvTimerTask+0x8>
	...

08004464 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800446e:	f7ff fa29 	bl	80038c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004472:	f107 0308 	add.w	r3, r7, #8
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f866 	bl	8004548 <prvSampleTimeNow>
 800447c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d130      	bne.n	80044e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <prvProcessTimerOrBlockTask+0x3c>
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	429a      	cmp	r2, r3
 8004490:	d806      	bhi.n	80044a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004492:	f7ff fa25 	bl	80038e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004496:	68f9      	ldr	r1, [r7, #12]
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff81 	bl	80043a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800449e:	e024      	b.n	80044ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044a6:	4b13      	ldr	r3, [pc, #76]	@ (80044f4 <prvProcessTimerOrBlockTask+0x90>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <prvProcessTimerOrBlockTask+0x50>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <prvProcessTimerOrBlockTask+0x52>
 80044b4:	2300      	movs	r3, #0
 80044b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044b8:	4b0f      	ldr	r3, [pc, #60]	@ (80044f8 <prvProcessTimerOrBlockTask+0x94>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	4619      	mov	r1, r3
 80044c6:	f7fe ff65 	bl	8003394 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044ca:	f7ff fa09 	bl	80038e0 <xTaskResumeAll>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044d4:	4b09      	ldr	r3, [pc, #36]	@ (80044fc <prvProcessTimerOrBlockTask+0x98>)
 80044d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	f3bf 8f6f 	isb	sy
}
 80044e4:	e001      	b.n	80044ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80044e6:	f7ff f9fb 	bl	80038e0 <xTaskResumeAll>
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	200010d8 	.word	0x200010d8
 80044f8:	200010dc 	.word	0x200010dc
 80044fc:	e000ed04 	.word	0xe000ed04

08004500 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004508:	4b0e      	ldr	r3, [pc, #56]	@ (8004544 <prvGetNextExpireTime+0x44>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <prvGetNextExpireTime+0x16>
 8004512:	2201      	movs	r2, #1
 8004514:	e000      	b.n	8004518 <prvGetNextExpireTime+0x18>
 8004516:	2200      	movs	r2, #0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004524:	4b07      	ldr	r3, [pc, #28]	@ (8004544 <prvGetNextExpireTime+0x44>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	e001      	b.n	8004534 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004534:	68fb      	ldr	r3, [r7, #12]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	200010d4 	.word	0x200010d4

08004548 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004550:	f7ff fa64 	bl	8003a1c <xTaskGetTickCount>
 8004554:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004556:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <prvSampleTimeNow+0x3c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	429a      	cmp	r2, r3
 800455e:	d205      	bcs.n	800456c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004560:	f000 f93a 	bl	80047d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e002      	b.n	8004572 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004572:	4a04      	ldr	r2, [pc, #16]	@ (8004584 <prvSampleTimeNow+0x3c>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004578:	68fb      	ldr	r3, [r7, #12]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	200010e4 	.word	0x200010e4

08004588 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d812      	bhi.n	80045d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	1ad2      	subs	r2, r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d302      	bcc.n	80045c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045bc:	2301      	movs	r3, #1
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e01b      	b.n	80045fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045c2:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <prvInsertTimerInActiveList+0x7c>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f7fe f9b8 	bl	8002942 <vListInsert>
 80045d2:	e012      	b.n	80045fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d206      	bcs.n	80045ea <prvInsertTimerInActiveList+0x62>
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d302      	bcc.n	80045ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80045e4:	2301      	movs	r3, #1
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	e007      	b.n	80045fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045ea:	4b07      	ldr	r3, [pc, #28]	@ (8004608 <prvInsertTimerInActiveList+0x80>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f7fe f9a4 	bl	8002942 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80045fa:	697b      	ldr	r3, [r7, #20]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	200010d8 	.word	0x200010d8
 8004608:	200010d4 	.word	0x200010d4

0800460c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08e      	sub	sp, #56	@ 0x38
 8004610:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004612:	e0ce      	b.n	80047b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	da19      	bge.n	800464e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800461a:	1d3b      	adds	r3, r7, #4
 800461c:	3304      	adds	r3, #4
 800461e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	61fb      	str	r3, [r7, #28]
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	e7fd      	b.n	800463a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004644:	6850      	ldr	r0, [r2, #4]
 8004646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004648:	6892      	ldr	r2, [r2, #8]
 800464a:	4611      	mov	r1, r2
 800464c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f2c0 80ae 	blt.w	80047b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800465a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004664:	3304      	adds	r3, #4
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe f9a4 	bl	80029b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800466c:	463b      	mov	r3, r7
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff ff6a 	bl	8004548 <prvSampleTimeNow>
 8004674:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b09      	cmp	r3, #9
 800467a:	f200 8097 	bhi.w	80047ac <prvProcessReceivedCommands+0x1a0>
 800467e:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <prvProcessReceivedCommands+0x78>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046ad 	.word	0x080046ad
 800468c:	080046ad 	.word	0x080046ad
 8004690:	08004723 	.word	0x08004723
 8004694:	08004737 	.word	0x08004737
 8004698:	08004783 	.word	0x08004783
 800469c:	080046ad 	.word	0x080046ad
 80046a0:	080046ad 	.word	0x080046ad
 80046a4:	08004723 	.word	0x08004723
 80046a8:	08004737 	.word	0x08004737
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	18d1      	adds	r1, r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046cc:	f7ff ff5c 	bl	8004588 <prvInsertTimerInActiveList>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d06c      	beq.n	80047b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d061      	beq.n	80047b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	441a      	add	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	2300      	movs	r3, #0
 80046fa:	2100      	movs	r1, #0
 80046fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046fe:	f7ff fe01 	bl	8004304 <xTimerGenericCommand>
 8004702:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d152      	bne.n	80047b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	61bb      	str	r3, [r7, #24]
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	e7fd      	b.n	800471e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	b2da      	uxtb	r2, r3
 800472e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004730:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004734:	e03d      	b.n	80047b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	b2da      	uxtb	r2, r3
 8004742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004744:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	617b      	str	r3, [r7, #20]
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	e7fd      	b.n	800476a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	18d1      	adds	r1, r2, r3
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800477c:	f7ff ff04 	bl	8004588 <prvInsertTimerInActiveList>
					break;
 8004780:	e017      	b.n	80047b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004784:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004790:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004792:	f000 fbe9 	bl	8004f68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004796:	e00c      	b.n	80047b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80047aa:	e002      	b.n	80047b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <prvProcessReceivedCommands+0x1a6>
					break;
 80047b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047b2:	4b08      	ldr	r3, [pc, #32]	@ (80047d4 <prvProcessReceivedCommands+0x1c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	1d39      	adds	r1, r7, #4
 80047b8:	2200      	movs	r2, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe fbce 	bl	8002f5c <xQueueReceive>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f47f af26 	bne.w	8004614 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	3730      	adds	r7, #48	@ 0x30
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	200010dc 	.word	0x200010dc

080047d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047de:	e049      	b.n	8004874 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047e0:	4b2e      	ldr	r3, [pc, #184]	@ (800489c <prvSwitchTimerLists+0xc4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ea:	4b2c      	ldr	r3, [pc, #176]	@ (800489c <prvSwitchTimerLists+0xc4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe f8db 	bl	80029b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d02f      	beq.n	8004874 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4413      	add	r3, r2
 800481c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	429a      	cmp	r2, r3
 8004824:	d90e      	bls.n	8004844 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004832:	4b1a      	ldr	r3, [pc, #104]	@ (800489c <prvSwitchTimerLists+0xc4>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f7fe f880 	bl	8002942 <vListInsert>
 8004842:	e017      	b.n	8004874 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004844:	2300      	movs	r3, #0
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2300      	movs	r3, #0
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	2100      	movs	r1, #0
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7ff fd58 	bl	8004304 <xTimerGenericCommand>
 8004854:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10b      	bne.n	8004874 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	603b      	str	r3, [r7, #0]
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004874:	4b09      	ldr	r3, [pc, #36]	@ (800489c <prvSwitchTimerLists+0xc4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1b0      	bne.n	80047e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800487e:	4b07      	ldr	r3, [pc, #28]	@ (800489c <prvSwitchTimerLists+0xc4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004884:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <prvSwitchTimerLists+0xc8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a04      	ldr	r2, [pc, #16]	@ (800489c <prvSwitchTimerLists+0xc4>)
 800488a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800488c:	4a04      	ldr	r2, [pc, #16]	@ (80048a0 <prvSwitchTimerLists+0xc8>)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	6013      	str	r3, [r2, #0]
}
 8004892:	bf00      	nop
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	200010d4 	.word	0x200010d4
 80048a0:	200010d8 	.word	0x200010d8

080048a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048aa:	f000 f96d 	bl	8004b88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048ae:	4b15      	ldr	r3, [pc, #84]	@ (8004904 <prvCheckForValidListAndQueue+0x60>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d120      	bne.n	80048f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80048b6:	4814      	ldr	r0, [pc, #80]	@ (8004908 <prvCheckForValidListAndQueue+0x64>)
 80048b8:	f7fd fff2 	bl	80028a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048bc:	4813      	ldr	r0, [pc, #76]	@ (800490c <prvCheckForValidListAndQueue+0x68>)
 80048be:	f7fd ffef 	bl	80028a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048c2:	4b13      	ldr	r3, [pc, #76]	@ (8004910 <prvCheckForValidListAndQueue+0x6c>)
 80048c4:	4a10      	ldr	r2, [pc, #64]	@ (8004908 <prvCheckForValidListAndQueue+0x64>)
 80048c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80048c8:	4b12      	ldr	r3, [pc, #72]	@ (8004914 <prvCheckForValidListAndQueue+0x70>)
 80048ca:	4a10      	ldr	r2, [pc, #64]	@ (800490c <prvCheckForValidListAndQueue+0x68>)
 80048cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048ce:	2300      	movs	r3, #0
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	4b11      	ldr	r3, [pc, #68]	@ (8004918 <prvCheckForValidListAndQueue+0x74>)
 80048d4:	4a11      	ldr	r2, [pc, #68]	@ (800491c <prvCheckForValidListAndQueue+0x78>)
 80048d6:	2110      	movs	r1, #16
 80048d8:	200a      	movs	r0, #10
 80048da:	f7fe f8ff 	bl	8002adc <xQueueGenericCreateStatic>
 80048de:	4603      	mov	r3, r0
 80048e0:	4a08      	ldr	r2, [pc, #32]	@ (8004904 <prvCheckForValidListAndQueue+0x60>)
 80048e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80048e4:	4b07      	ldr	r3, [pc, #28]	@ (8004904 <prvCheckForValidListAndQueue+0x60>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <prvCheckForValidListAndQueue+0x60>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	490b      	ldr	r1, [pc, #44]	@ (8004920 <prvCheckForValidListAndQueue+0x7c>)
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe fd24 	bl	8003340 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048f8:	f000 f978 	bl	8004bec <vPortExitCritical>
}
 80048fc:	bf00      	nop
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200010dc 	.word	0x200010dc
 8004908:	200010ac 	.word	0x200010ac
 800490c:	200010c0 	.word	0x200010c0
 8004910:	200010d4 	.word	0x200010d4
 8004914:	200010d8 	.word	0x200010d8
 8004918:	20001188 	.word	0x20001188
 800491c:	200010e8 	.word	0x200010e8
 8004920:	080053ac 	.word	0x080053ac

08004924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3b04      	subs	r3, #4
 8004934:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800493c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3b04      	subs	r3, #4
 8004942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3b04      	subs	r3, #4
 8004952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004954:	4a0c      	ldr	r2, [pc, #48]	@ (8004988 <pxPortInitialiseStack+0x64>)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3b14      	subs	r3, #20
 800495e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3b04      	subs	r3, #4
 800496a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f06f 0202 	mvn.w	r2, #2
 8004972:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3b20      	subs	r3, #32
 8004978:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800497a:	68fb      	ldr	r3, [r7, #12]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	0800498d 	.word	0x0800498d

0800498c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004996:	4b13      	ldr	r3, [pc, #76]	@ (80049e4 <prvTaskExitError+0x58>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d00b      	beq.n	80049b8 <prvTaskExitError+0x2c>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	60fb      	str	r3, [r7, #12]
}
 80049b2:	bf00      	nop
 80049b4:	bf00      	nop
 80049b6:	e7fd      	b.n	80049b4 <prvTaskExitError+0x28>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	60bb      	str	r3, [r7, #8]
}
 80049ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049cc:	bf00      	nop
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0fc      	beq.n	80049ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	2000000c 	.word	0x2000000c
	...

080049f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049f0:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <pxCurrentTCBConst2>)
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	6808      	ldr	r0, [r1, #0]
 80049f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fa:	f380 8809 	msr	PSP, r0
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f380 8811 	msr	BASEPRI, r0
 8004a0a:	4770      	bx	lr
 8004a0c:	f3af 8000 	nop.w

08004a10 <pxCurrentTCBConst2>:
 8004a10:	20000bac 	.word	0x20000bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop

08004a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a18:	4808      	ldr	r0, [pc, #32]	@ (8004a3c <prvPortStartFirstTask+0x24>)
 8004a1a:	6800      	ldr	r0, [r0, #0]
 8004a1c:	6800      	ldr	r0, [r0, #0]
 8004a1e:	f380 8808 	msr	MSP, r0
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f380 8814 	msr	CONTROL, r0
 8004a2a:	b662      	cpsie	i
 8004a2c:	b661      	cpsie	f
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	df00      	svc	0
 8004a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a3a:	bf00      	nop
 8004a3c:	e000ed08 	.word	0xe000ed08

08004a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a46:	4b47      	ldr	r3, [pc, #284]	@ (8004b64 <xPortStartScheduler+0x124>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a47      	ldr	r2, [pc, #284]	@ (8004b68 <xPortStartScheduler+0x128>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10b      	bne.n	8004a68 <xPortStartScheduler+0x28>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	613b      	str	r3, [r7, #16]
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	e7fd      	b.n	8004a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a68:	4b3e      	ldr	r3, [pc, #248]	@ (8004b64 <xPortStartScheduler+0x124>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b6c <xPortStartScheduler+0x12c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d10b      	bne.n	8004a8a <xPortStartScheduler+0x4a>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	60fb      	str	r3, [r7, #12]
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	e7fd      	b.n	8004a86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a8a:	4b39      	ldr	r3, [pc, #228]	@ (8004b70 <xPortStartScheduler+0x130>)
 8004a8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	22ff      	movs	r2, #255	@ 0xff
 8004a9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	4b31      	ldr	r3, [pc, #196]	@ (8004b74 <xPortStartScheduler+0x134>)
 8004ab0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ab2:	4b31      	ldr	r3, [pc, #196]	@ (8004b78 <xPortStartScheduler+0x138>)
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ab8:	e009      	b.n	8004ace <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004aba:	4b2f      	ldr	r3, [pc, #188]	@ (8004b78 <xPortStartScheduler+0x138>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b78 <xPortStartScheduler+0x138>)
 8004ac2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad6:	2b80      	cmp	r3, #128	@ 0x80
 8004ad8:	d0ef      	beq.n	8004aba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ada:	4b27      	ldr	r3, [pc, #156]	@ (8004b78 <xPortStartScheduler+0x138>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f1c3 0307 	rsb	r3, r3, #7
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d00b      	beq.n	8004afe <xPortStartScheduler+0xbe>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	60bb      	str	r3, [r7, #8]
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	e7fd      	b.n	8004afa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004afe:	4b1e      	ldr	r3, [pc, #120]	@ (8004b78 <xPortStartScheduler+0x138>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	4a1c      	ldr	r2, [pc, #112]	@ (8004b78 <xPortStartScheduler+0x138>)
 8004b06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b08:	4b1b      	ldr	r3, [pc, #108]	@ (8004b78 <xPortStartScheduler+0x138>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b10:	4a19      	ldr	r2, [pc, #100]	@ (8004b78 <xPortStartScheduler+0x138>)
 8004b12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b1c:	4b17      	ldr	r3, [pc, #92]	@ (8004b7c <xPortStartScheduler+0x13c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a16      	ldr	r2, [pc, #88]	@ (8004b7c <xPortStartScheduler+0x13c>)
 8004b22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b28:	4b14      	ldr	r3, [pc, #80]	@ (8004b7c <xPortStartScheduler+0x13c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a13      	ldr	r2, [pc, #76]	@ (8004b7c <xPortStartScheduler+0x13c>)
 8004b2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b34:	f000 f8da 	bl	8004cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b38:	4b11      	ldr	r3, [pc, #68]	@ (8004b80 <xPortStartScheduler+0x140>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b3e:	f000 f8f9 	bl	8004d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b42:	4b10      	ldr	r3, [pc, #64]	@ (8004b84 <xPortStartScheduler+0x144>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a0f      	ldr	r2, [pc, #60]	@ (8004b84 <xPortStartScheduler+0x144>)
 8004b48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004b4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b4e:	f7ff ff63 	bl	8004a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b52:	f7ff f82d 	bl	8003bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8004b56:	f7ff ff19 	bl	800498c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	e000ed00 	.word	0xe000ed00
 8004b68:	410fc271 	.word	0x410fc271
 8004b6c:	410fc270 	.word	0x410fc270
 8004b70:	e000e400 	.word	0xe000e400
 8004b74:	200011d8 	.word	0x200011d8
 8004b78:	200011dc 	.word	0x200011dc
 8004b7c:	e000ed20 	.word	0xe000ed20
 8004b80:	2000000c 	.word	0x2000000c
 8004b84:	e000ef34 	.word	0xe000ef34

08004b88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	607b      	str	r3, [r7, #4]
}
 8004ba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ba2:	4b10      	ldr	r3, [pc, #64]	@ (8004be4 <vPortEnterCritical+0x5c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8004be4 <vPortEnterCritical+0x5c>)
 8004baa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bac:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <vPortEnterCritical+0x5c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d110      	bne.n	8004bd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004be8 <vPortEnterCritical+0x60>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	603b      	str	r3, [r7, #0]
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <vPortEnterCritical+0x4a>
	}
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	2000000c 	.word	0x2000000c
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bf2:	4b12      	ldr	r3, [pc, #72]	@ (8004c3c <vPortExitCritical+0x50>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10b      	bne.n	8004c12 <vPortExitCritical+0x26>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	607b      	str	r3, [r7, #4]
}
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	e7fd      	b.n	8004c0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c12:	4b0a      	ldr	r3, [pc, #40]	@ (8004c3c <vPortExitCritical+0x50>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	4a08      	ldr	r2, [pc, #32]	@ (8004c3c <vPortExitCritical+0x50>)
 8004c1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c1c:	4b07      	ldr	r3, [pc, #28]	@ (8004c3c <vPortExitCritical+0x50>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <vPortExitCritical+0x44>
 8004c24:	2300      	movs	r3, #0
 8004c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f383 8811 	msr	BASEPRI, r3
}
 8004c2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	2000000c 	.word	0x2000000c

08004c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c40:	f3ef 8009 	mrs	r0, PSP
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	4b15      	ldr	r3, [pc, #84]	@ (8004ca0 <pxCurrentTCBConst>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	f01e 0f10 	tst.w	lr, #16
 8004c50:	bf08      	it	eq
 8004c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5a:	6010      	str	r0, [r2, #0]
 8004c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c64:	f380 8811 	msr	BASEPRI, r0
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f7fe ff9e 	bl	8003bb0 <vTaskSwitchContext>
 8004c74:	f04f 0000 	mov.w	r0, #0
 8004c78:	f380 8811 	msr	BASEPRI, r0
 8004c7c:	bc09      	pop	{r0, r3}
 8004c7e:	6819      	ldr	r1, [r3, #0]
 8004c80:	6808      	ldr	r0, [r1, #0]
 8004c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c86:	f01e 0f10 	tst.w	lr, #16
 8004c8a:	bf08      	it	eq
 8004c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c90:	f380 8809 	msr	PSP, r0
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	f3af 8000 	nop.w

08004ca0 <pxCurrentTCBConst>:
 8004ca0:	20000bac 	.word	0x20000bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop

08004ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	607b      	str	r3, [r7, #4]
}
 8004cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cc2:	f7fe febb 	bl	8003a3c <xTaskIncrementTick>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	@ (8004ce8 <xPortSysTickHandler+0x40>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f383 8811 	msr	BASEPRI, r3
}
 8004cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <vPortSetupTimerInterrupt+0x34>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <vPortSetupTimerInterrupt+0x38>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <vPortSetupTimerInterrupt+0x3c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	@ (8004d2c <vPortSetupTimerInterrupt+0x40>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	4a09      	ldr	r2, [pc, #36]	@ (8004d30 <vPortSetupTimerInterrupt+0x44>)
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d0e:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <vPortSetupTimerInterrupt+0x34>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	e000e010 	.word	0xe000e010
 8004d24:	e000e018 	.word	0xe000e018
 8004d28:	20000000 	.word	0x20000000
 8004d2c:	10624dd3 	.word	0x10624dd3
 8004d30:	e000e014 	.word	0xe000e014

08004d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004d44 <vPortEnableVFP+0x10>
 8004d38:	6801      	ldr	r1, [r0, #0]
 8004d3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004d3e:	6001      	str	r1, [r0, #0]
 8004d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d42:	bf00      	nop
 8004d44:	e000ed88 	.word	0xe000ed88

08004d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d4e:	f3ef 8305 	mrs	r3, IPSR
 8004d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b0f      	cmp	r3, #15
 8004d58:	d915      	bls.n	8004d86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d5a:	4a18      	ldr	r2, [pc, #96]	@ (8004dbc <vPortValidateInterruptPriority+0x74>)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d64:	4b16      	ldr	r3, [pc, #88]	@ (8004dc0 <vPortValidateInterruptPriority+0x78>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	7afa      	ldrb	r2, [r7, #11]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d20b      	bcs.n	8004d86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	607b      	str	r3, [r7, #4]
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	e7fd      	b.n	8004d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d86:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <vPortValidateInterruptPriority+0x7c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc8 <vPortValidateInterruptPriority+0x80>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d90b      	bls.n	8004dae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	603b      	str	r3, [r7, #0]
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	e7fd      	b.n	8004daa <vPortValidateInterruptPriority+0x62>
	}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	e000e3f0 	.word	0xe000e3f0
 8004dc0:	200011d8 	.word	0x200011d8
 8004dc4:	e000ed0c 	.word	0xe000ed0c
 8004dc8:	200011dc 	.word	0x200011dc

08004dcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	@ 0x28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004dd8:	f7fe fd74 	bl	80038c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8004f50 <pvPortMalloc+0x184>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004de4:	f000 f924 	bl	8005030 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004de8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f54 <pvPortMalloc+0x188>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f040 8095 	bne.w	8004f20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01e      	beq.n	8004e3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d015      	beq.n	8004e3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f023 0307 	bic.w	r3, r3, #7
 8004e14:	3308      	adds	r3, #8
 8004e16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <pvPortMalloc+0x6e>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	617b      	str	r3, [r7, #20]
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d06f      	beq.n	8004f20 <pvPortMalloc+0x154>
 8004e40:	4b45      	ldr	r3, [pc, #276]	@ (8004f58 <pvPortMalloc+0x18c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d86a      	bhi.n	8004f20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e4a:	4b44      	ldr	r3, [pc, #272]	@ (8004f5c <pvPortMalloc+0x190>)
 8004e4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e4e:	4b43      	ldr	r3, [pc, #268]	@ (8004f5c <pvPortMalloc+0x190>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e54:	e004      	b.n	8004e60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d903      	bls.n	8004e72 <pvPortMalloc+0xa6>
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f1      	bne.n	8004e56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e72:	4b37      	ldr	r3, [pc, #220]	@ (8004f50 <pvPortMalloc+0x184>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d051      	beq.n	8004f20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2208      	movs	r2, #8
 8004e82:	4413      	add	r3, r2
 8004e84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	1ad2      	subs	r2, r2, r3
 8004e96:	2308      	movs	r3, #8
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d920      	bls.n	8004ee0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00b      	beq.n	8004ec8 <pvPortMalloc+0xfc>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	613b      	str	r3, [r7, #16]
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	1ad2      	subs	r2, r2, r3
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004eda:	69b8      	ldr	r0, [r7, #24]
 8004edc:	f000 f90a 	bl	80050f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f58 <pvPortMalloc+0x18c>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	4a1b      	ldr	r2, [pc, #108]	@ (8004f58 <pvPortMalloc+0x18c>)
 8004eec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004eee:	4b1a      	ldr	r3, [pc, #104]	@ (8004f58 <pvPortMalloc+0x18c>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f60 <pvPortMalloc+0x194>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d203      	bcs.n	8004f02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004efa:	4b17      	ldr	r3, [pc, #92]	@ (8004f58 <pvPortMalloc+0x18c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a18      	ldr	r2, [pc, #96]	@ (8004f60 <pvPortMalloc+0x194>)
 8004f00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	4b13      	ldr	r3, [pc, #76]	@ (8004f54 <pvPortMalloc+0x188>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f16:	4b13      	ldr	r3, [pc, #76]	@ (8004f64 <pvPortMalloc+0x198>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	4a11      	ldr	r2, [pc, #68]	@ (8004f64 <pvPortMalloc+0x198>)
 8004f1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f20:	f7fe fcde 	bl	80038e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <pvPortMalloc+0x17a>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	60fb      	str	r3, [r7, #12]
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	e7fd      	b.n	8004f42 <pvPortMalloc+0x176>
	return pvReturn;
 8004f46:	69fb      	ldr	r3, [r7, #28]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3728      	adds	r7, #40	@ 0x28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20001de8 	.word	0x20001de8
 8004f54:	20001dfc 	.word	0x20001dfc
 8004f58:	20001dec 	.word	0x20001dec
 8004f5c:	20001de0 	.word	0x20001de0
 8004f60:	20001df0 	.word	0x20001df0
 8004f64:	20001df4 	.word	0x20001df4

08004f68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d04f      	beq.n	800501a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	425b      	negs	r3, r3
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4413      	add	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	4b25      	ldr	r3, [pc, #148]	@ (8005024 <vPortFree+0xbc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <vPortFree+0x46>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60fb      	str	r3, [r7, #12]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00b      	beq.n	8004fce <vPortFree+0x66>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60bb      	str	r3, [r7, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	e7fd      	b.n	8004fca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	4b14      	ldr	r3, [pc, #80]	@ (8005024 <vPortFree+0xbc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01e      	beq.n	800501a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11a      	bne.n	800501a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8005024 <vPortFree+0xbc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	401a      	ands	r2, r3
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ff4:	f7fe fc66 	bl	80038c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8005028 <vPortFree+0xc0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4413      	add	r3, r2
 8005002:	4a09      	ldr	r2, [pc, #36]	@ (8005028 <vPortFree+0xc0>)
 8005004:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005006:	6938      	ldr	r0, [r7, #16]
 8005008:	f000 f874 	bl	80050f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800500c:	4b07      	ldr	r3, [pc, #28]	@ (800502c <vPortFree+0xc4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3301      	adds	r3, #1
 8005012:	4a06      	ldr	r2, [pc, #24]	@ (800502c <vPortFree+0xc4>)
 8005014:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005016:	f7fe fc63 	bl	80038e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800501a:	bf00      	nop
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20001dfc 	.word	0x20001dfc
 8005028:	20001dec 	.word	0x20001dec
 800502c:	20001df8 	.word	0x20001df8

08005030 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005036:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800503a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800503c:	4b27      	ldr	r3, [pc, #156]	@ (80050dc <prvHeapInit+0xac>)
 800503e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00c      	beq.n	8005064 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3307      	adds	r3, #7
 800504e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0307 	bic.w	r3, r3, #7
 8005056:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	4a1f      	ldr	r2, [pc, #124]	@ (80050dc <prvHeapInit+0xac>)
 8005060:	4413      	add	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005068:	4a1d      	ldr	r2, [pc, #116]	@ (80050e0 <prvHeapInit+0xb0>)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800506e:	4b1c      	ldr	r3, [pc, #112]	@ (80050e0 <prvHeapInit+0xb0>)
 8005070:	2200      	movs	r2, #0
 8005072:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	4413      	add	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800507c:	2208      	movs	r2, #8
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0307 	bic.w	r3, r3, #7
 800508a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a15      	ldr	r2, [pc, #84]	@ (80050e4 <prvHeapInit+0xb4>)
 8005090:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005092:	4b14      	ldr	r3, [pc, #80]	@ (80050e4 <prvHeapInit+0xb4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2200      	movs	r2, #0
 8005098:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800509a:	4b12      	ldr	r3, [pc, #72]	@ (80050e4 <prvHeapInit+0xb4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	1ad2      	subs	r2, r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050b0:	4b0c      	ldr	r3, [pc, #48]	@ (80050e4 <prvHeapInit+0xb4>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4a0a      	ldr	r2, [pc, #40]	@ (80050e8 <prvHeapInit+0xb8>)
 80050be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4a09      	ldr	r2, [pc, #36]	@ (80050ec <prvHeapInit+0xbc>)
 80050c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050c8:	4b09      	ldr	r3, [pc, #36]	@ (80050f0 <prvHeapInit+0xc0>)
 80050ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80050ce:	601a      	str	r2, [r3, #0]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	200011e0 	.word	0x200011e0
 80050e0:	20001de0 	.word	0x20001de0
 80050e4:	20001de8 	.word	0x20001de8
 80050e8:	20001df0 	.word	0x20001df0
 80050ec:	20001dec 	.word	0x20001dec
 80050f0:	20001dfc 	.word	0x20001dfc

080050f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050fc:	4b28      	ldr	r3, [pc, #160]	@ (80051a0 <prvInsertBlockIntoFreeList+0xac>)
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e002      	b.n	8005108 <prvInsertBlockIntoFreeList+0x14>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	429a      	cmp	r2, r3
 8005110:	d8f7      	bhi.n	8005102 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4413      	add	r3, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	d108      	bne.n	8005136 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	441a      	add	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	441a      	add	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d118      	bne.n	800517c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	4b15      	ldr	r3, [pc, #84]	@ (80051a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d00d      	beq.n	8005172 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	441a      	add	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e008      	b.n	8005184 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005172:	4b0c      	ldr	r3, [pc, #48]	@ (80051a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e003      	b.n	8005184 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	d002      	beq.n	8005192 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	20001de0 	.word	0x20001de0
 80051a4:	20001de8 	.word	0x20001de8

080051a8 <memset>:
 80051a8:	4402      	add	r2, r0
 80051aa:	4603      	mov	r3, r0
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d100      	bne.n	80051b2 <memset+0xa>
 80051b0:	4770      	bx	lr
 80051b2:	f803 1b01 	strb.w	r1, [r3], #1
 80051b6:	e7f9      	b.n	80051ac <memset+0x4>

080051b8 <_reclaim_reent>:
 80051b8:	4b29      	ldr	r3, [pc, #164]	@ (8005260 <_reclaim_reent+0xa8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4283      	cmp	r3, r0
 80051be:	b570      	push	{r4, r5, r6, lr}
 80051c0:	4604      	mov	r4, r0
 80051c2:	d04b      	beq.n	800525c <_reclaim_reent+0xa4>
 80051c4:	69c3      	ldr	r3, [r0, #28]
 80051c6:	b1ab      	cbz	r3, 80051f4 <_reclaim_reent+0x3c>
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	b16b      	cbz	r3, 80051e8 <_reclaim_reent+0x30>
 80051cc:	2500      	movs	r5, #0
 80051ce:	69e3      	ldr	r3, [r4, #28]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	5959      	ldr	r1, [r3, r5]
 80051d4:	2900      	cmp	r1, #0
 80051d6:	d13b      	bne.n	8005250 <_reclaim_reent+0x98>
 80051d8:	3504      	adds	r5, #4
 80051da:	2d80      	cmp	r5, #128	@ 0x80
 80051dc:	d1f7      	bne.n	80051ce <_reclaim_reent+0x16>
 80051de:	69e3      	ldr	r3, [r4, #28]
 80051e0:	4620      	mov	r0, r4
 80051e2:	68d9      	ldr	r1, [r3, #12]
 80051e4:	f000 f872 	bl	80052cc <_free_r>
 80051e8:	69e3      	ldr	r3, [r4, #28]
 80051ea:	6819      	ldr	r1, [r3, #0]
 80051ec:	b111      	cbz	r1, 80051f4 <_reclaim_reent+0x3c>
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 f86c 	bl	80052cc <_free_r>
 80051f4:	6961      	ldr	r1, [r4, #20]
 80051f6:	b111      	cbz	r1, 80051fe <_reclaim_reent+0x46>
 80051f8:	4620      	mov	r0, r4
 80051fa:	f000 f867 	bl	80052cc <_free_r>
 80051fe:	69e1      	ldr	r1, [r4, #28]
 8005200:	b111      	cbz	r1, 8005208 <_reclaim_reent+0x50>
 8005202:	4620      	mov	r0, r4
 8005204:	f000 f862 	bl	80052cc <_free_r>
 8005208:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800520a:	b111      	cbz	r1, 8005212 <_reclaim_reent+0x5a>
 800520c:	4620      	mov	r0, r4
 800520e:	f000 f85d 	bl	80052cc <_free_r>
 8005212:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005214:	b111      	cbz	r1, 800521c <_reclaim_reent+0x64>
 8005216:	4620      	mov	r0, r4
 8005218:	f000 f858 	bl	80052cc <_free_r>
 800521c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800521e:	b111      	cbz	r1, 8005226 <_reclaim_reent+0x6e>
 8005220:	4620      	mov	r0, r4
 8005222:	f000 f853 	bl	80052cc <_free_r>
 8005226:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005228:	b111      	cbz	r1, 8005230 <_reclaim_reent+0x78>
 800522a:	4620      	mov	r0, r4
 800522c:	f000 f84e 	bl	80052cc <_free_r>
 8005230:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005232:	b111      	cbz	r1, 800523a <_reclaim_reent+0x82>
 8005234:	4620      	mov	r0, r4
 8005236:	f000 f849 	bl	80052cc <_free_r>
 800523a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800523c:	b111      	cbz	r1, 8005244 <_reclaim_reent+0x8c>
 800523e:	4620      	mov	r0, r4
 8005240:	f000 f844 	bl	80052cc <_free_r>
 8005244:	6a23      	ldr	r3, [r4, #32]
 8005246:	b14b      	cbz	r3, 800525c <_reclaim_reent+0xa4>
 8005248:	4620      	mov	r0, r4
 800524a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800524e:	4718      	bx	r3
 8005250:	680e      	ldr	r6, [r1, #0]
 8005252:	4620      	mov	r0, r4
 8005254:	f000 f83a 	bl	80052cc <_free_r>
 8005258:	4631      	mov	r1, r6
 800525a:	e7bb      	b.n	80051d4 <_reclaim_reent+0x1c>
 800525c:	bd70      	pop	{r4, r5, r6, pc}
 800525e:	bf00      	nop
 8005260:	20000010 	.word	0x20000010

08005264 <__libc_init_array>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	4d0d      	ldr	r5, [pc, #52]	@ (800529c <__libc_init_array+0x38>)
 8005268:	4c0d      	ldr	r4, [pc, #52]	@ (80052a0 <__libc_init_array+0x3c>)
 800526a:	1b64      	subs	r4, r4, r5
 800526c:	10a4      	asrs	r4, r4, #2
 800526e:	2600      	movs	r6, #0
 8005270:	42a6      	cmp	r6, r4
 8005272:	d109      	bne.n	8005288 <__libc_init_array+0x24>
 8005274:	4d0b      	ldr	r5, [pc, #44]	@ (80052a4 <__libc_init_array+0x40>)
 8005276:	4c0c      	ldr	r4, [pc, #48]	@ (80052a8 <__libc_init_array+0x44>)
 8005278:	f000 f87e 	bl	8005378 <_init>
 800527c:	1b64      	subs	r4, r4, r5
 800527e:	10a4      	asrs	r4, r4, #2
 8005280:	2600      	movs	r6, #0
 8005282:	42a6      	cmp	r6, r4
 8005284:	d105      	bne.n	8005292 <__libc_init_array+0x2e>
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	f855 3b04 	ldr.w	r3, [r5], #4
 800528c:	4798      	blx	r3
 800528e:	3601      	adds	r6, #1
 8005290:	e7ee      	b.n	8005270 <__libc_init_array+0xc>
 8005292:	f855 3b04 	ldr.w	r3, [r5], #4
 8005296:	4798      	blx	r3
 8005298:	3601      	adds	r6, #1
 800529a:	e7f2      	b.n	8005282 <__libc_init_array+0x1e>
 800529c:	080053e8 	.word	0x080053e8
 80052a0:	080053e8 	.word	0x080053e8
 80052a4:	080053e8 	.word	0x080053e8
 80052a8:	080053ec 	.word	0x080053ec

080052ac <__retarget_lock_acquire_recursive>:
 80052ac:	4770      	bx	lr

080052ae <__retarget_lock_release_recursive>:
 80052ae:	4770      	bx	lr

080052b0 <memcpy>:
 80052b0:	440a      	add	r2, r1
 80052b2:	4291      	cmp	r1, r2
 80052b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052b8:	d100      	bne.n	80052bc <memcpy+0xc>
 80052ba:	4770      	bx	lr
 80052bc:	b510      	push	{r4, lr}
 80052be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052c6:	4291      	cmp	r1, r2
 80052c8:	d1f9      	bne.n	80052be <memcpy+0xe>
 80052ca:	bd10      	pop	{r4, pc}

080052cc <_free_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4605      	mov	r5, r0
 80052d0:	2900      	cmp	r1, #0
 80052d2:	d041      	beq.n	8005358 <_free_r+0x8c>
 80052d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d8:	1f0c      	subs	r4, r1, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bfb8      	it	lt
 80052de:	18e4      	addlt	r4, r4, r3
 80052e0:	f000 f83e 	bl	8005360 <__malloc_lock>
 80052e4:	4a1d      	ldr	r2, [pc, #116]	@ (800535c <_free_r+0x90>)
 80052e6:	6813      	ldr	r3, [r2, #0]
 80052e8:	b933      	cbnz	r3, 80052f8 <_free_r+0x2c>
 80052ea:	6063      	str	r3, [r4, #4]
 80052ec:	6014      	str	r4, [r2, #0]
 80052ee:	4628      	mov	r0, r5
 80052f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052f4:	f000 b83a 	b.w	800536c <__malloc_unlock>
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d908      	bls.n	800530e <_free_r+0x42>
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	1821      	adds	r1, r4, r0
 8005300:	428b      	cmp	r3, r1
 8005302:	bf01      	itttt	eq
 8005304:	6819      	ldreq	r1, [r3, #0]
 8005306:	685b      	ldreq	r3, [r3, #4]
 8005308:	1809      	addeq	r1, r1, r0
 800530a:	6021      	streq	r1, [r4, #0]
 800530c:	e7ed      	b.n	80052ea <_free_r+0x1e>
 800530e:	461a      	mov	r2, r3
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	b10b      	cbz	r3, 8005318 <_free_r+0x4c>
 8005314:	42a3      	cmp	r3, r4
 8005316:	d9fa      	bls.n	800530e <_free_r+0x42>
 8005318:	6811      	ldr	r1, [r2, #0]
 800531a:	1850      	adds	r0, r2, r1
 800531c:	42a0      	cmp	r0, r4
 800531e:	d10b      	bne.n	8005338 <_free_r+0x6c>
 8005320:	6820      	ldr	r0, [r4, #0]
 8005322:	4401      	add	r1, r0
 8005324:	1850      	adds	r0, r2, r1
 8005326:	4283      	cmp	r3, r0
 8005328:	6011      	str	r1, [r2, #0]
 800532a:	d1e0      	bne.n	80052ee <_free_r+0x22>
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	6053      	str	r3, [r2, #4]
 8005332:	4408      	add	r0, r1
 8005334:	6010      	str	r0, [r2, #0]
 8005336:	e7da      	b.n	80052ee <_free_r+0x22>
 8005338:	d902      	bls.n	8005340 <_free_r+0x74>
 800533a:	230c      	movs	r3, #12
 800533c:	602b      	str	r3, [r5, #0]
 800533e:	e7d6      	b.n	80052ee <_free_r+0x22>
 8005340:	6820      	ldr	r0, [r4, #0]
 8005342:	1821      	adds	r1, r4, r0
 8005344:	428b      	cmp	r3, r1
 8005346:	bf04      	itt	eq
 8005348:	6819      	ldreq	r1, [r3, #0]
 800534a:	685b      	ldreq	r3, [r3, #4]
 800534c:	6063      	str	r3, [r4, #4]
 800534e:	bf04      	itt	eq
 8005350:	1809      	addeq	r1, r1, r0
 8005352:	6021      	streq	r1, [r4, #0]
 8005354:	6054      	str	r4, [r2, #4]
 8005356:	e7ca      	b.n	80052ee <_free_r+0x22>
 8005358:	bd38      	pop	{r3, r4, r5, pc}
 800535a:	bf00      	nop
 800535c:	20001f3c 	.word	0x20001f3c

08005360 <__malloc_lock>:
 8005360:	4801      	ldr	r0, [pc, #4]	@ (8005368 <__malloc_lock+0x8>)
 8005362:	f7ff bfa3 	b.w	80052ac <__retarget_lock_acquire_recursive>
 8005366:	bf00      	nop
 8005368:	20001f38 	.word	0x20001f38

0800536c <__malloc_unlock>:
 800536c:	4801      	ldr	r0, [pc, #4]	@ (8005374 <__malloc_unlock+0x8>)
 800536e:	f7ff bf9e 	b.w	80052ae <__retarget_lock_release_recursive>
 8005372:	bf00      	nop
 8005374:	20001f38 	.word	0x20001f38

08005378 <_init>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	bf00      	nop
 800537c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537e:	bc08      	pop	{r3}
 8005380:	469e      	mov	lr, r3
 8005382:	4770      	bx	lr

08005384 <_fini>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	bf00      	nop
 8005388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538a:	bc08      	pop	{r3}
 800538c:	469e      	mov	lr, r3
 800538e:	4770      	bx	lr
