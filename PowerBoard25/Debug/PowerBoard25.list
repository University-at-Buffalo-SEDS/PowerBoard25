
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9a8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800bb88  0800bb88  0000cb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc58  0800bc58  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc58  0800bc58  0000cc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc60  0800bc60  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc60  0800bc60  0000cc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc64  0800bc64  0000cc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bc68  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003668  200001d8  0800be40  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003840  0800be40  0000d840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d25  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005281  00000000  00000000  00032f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  000381b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000163c  00000000  00000000  00039eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000068e3  00000000  00000000  0003b4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002400c  00000000  00000000  00041dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d55ca  00000000  00000000  00065ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b3a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cd0  00000000  00000000  0013b3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001430b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bb70 	.word	0x0800bb70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800bb70 	.word	0x0800bb70

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fb39 	bl	8000b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f81c 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f92c 	bl	8000778 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000520:	f000 f85a 	bl	80005d8 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000524:	f000 f89e 	bl	8000664 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f8dc 	bl	80006e4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052c:	f007 ffa2 	bl	8008474 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000530:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <main+0x38>)
 8000532:	2100      	movs	r1, #0
 8000534:	4805      	ldr	r0, [pc, #20]	@ (800054c <main+0x3c>)
 8000536:	f007 ffe7 	bl	8008508 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a04      	ldr	r2, [pc, #16]	@ (8000550 <main+0x40>)
 800053e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f007 ffbc 	bl	80084bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x34>
 8000548:	0800bbf4 	.word	0x0800bbf4
 800054c:	08000825 	.word	0x08000825
 8000550:	20000340 	.word	0x20000340

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	@ 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2238      	movs	r2, #56	@ 0x38
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f00b fa1c 	bl	800b9a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800057a:	f002 fe11 	bl	80031a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800057e:	2322      	movs	r3, #34	@ 0x22
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000586:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2340      	movs	r3, #64	@ 0x40
 800058a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0318 	add.w	r3, r7, #24
 8000598:	4618      	mov	r0, r3
 800059a:	f002 feb5 	bl	8003308 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005a4:	f000 f948 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 f9b3 	bl	800392c <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005cc:	f000 f934 	bl	8000838 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	@ 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <MX_FDCAN2_Init+0x84>)
 80005de:	4a20      	ldr	r2, [pc, #128]	@ (8000660 <MX_FDCAN2_Init+0x88>)
 80005e0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005e2:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <MX_FDCAN2_Init+0x84>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005e8:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <MX_FDCAN2_Init+0x84>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80005ee:	4b1b      	ldr	r3, [pc, #108]	@ (800065c <MX_FDCAN2_Init+0x84>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80005f4:	4b19      	ldr	r3, [pc, #100]	@ (800065c <MX_FDCAN2_Init+0x84>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80005fa:	4b18      	ldr	r3, [pc, #96]	@ (800065c <MX_FDCAN2_Init+0x84>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000600:	4b16      	ldr	r3, [pc, #88]	@ (800065c <MX_FDCAN2_Init+0x84>)
 8000602:	2200      	movs	r2, #0
 8000604:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <MX_FDCAN2_Init+0x84>)
 8000608:	2210      	movs	r2, #16
 800060a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800060c:	4b13      	ldr	r3, [pc, #76]	@ (800065c <MX_FDCAN2_Init+0x84>)
 800060e:	2201      	movs	r2, #1
 8000610:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8000612:	4b12      	ldr	r3, [pc, #72]	@ (800065c <MX_FDCAN2_Init+0x84>)
 8000614:	2201      	movs	r2, #1
 8000616:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8000618:	4b10      	ldr	r3, [pc, #64]	@ (800065c <MX_FDCAN2_Init+0x84>)
 800061a:	2201      	movs	r2, #1
 800061c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <MX_FDCAN2_Init+0x84>)
 8000620:	2201      	movs	r2, #1
 8000622:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000624:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <MX_FDCAN2_Init+0x84>)
 8000626:	2201      	movs	r2, #1
 8000628:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <MX_FDCAN2_Init+0x84>)
 800062c:	2201      	movs	r2, #1
 800062e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_FDCAN2_Init+0x84>)
 8000632:	2201      	movs	r2, #1
 8000634:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_FDCAN2_Init+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_FDCAN2_Init+0x84>)
 800063e:	2200      	movs	r2, #0
 8000640:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <MX_FDCAN2_Init+0x84>)
 8000644:	2200      	movs	r2, #0
 8000646:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <MX_FDCAN2_Init+0x84>)
 800064a:	f000 fc1f 	bl	8000e8c <HAL_FDCAN_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000654:	f000 f8f0 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200001f4 	.word	0x200001f4
 8000660:	40006800 	.word	0x40006800

08000664 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_I2C2_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <MX_I2C2_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_I2C2_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <MX_I2C2_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000674:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_I2C2_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_I2C2_Init+0x74>)
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_I2C2_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_I2C2_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <MX_I2C2_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_I2C2_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_I2C2_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800069e:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <MX_I2C2_Init+0x74>)
 80006a0:	f000 ff4a 	bl	8001538 <HAL_I2C_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006aa:	f000 f8c5 	bl	8000838 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <MX_I2C2_Init+0x74>)
 80006b2:	f000 ffdc 	bl	800166e <HAL_I2CEx_ConfigAnalogFilter>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 f8bc 	bl	8000838 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_I2C2_Init+0x74>)
 80006c4:	f001 f81e 	bl	8001704 <HAL_I2CEx_ConfigDigitalFilter>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 f8b3 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000258 	.word	0x20000258
 80006dc:	40005800 	.word	0x40005800
 80006e0:	00503d58 	.word	0x00503d58

080006e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006e8:	4b20      	ldr	r3, [pc, #128]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 80006ea:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <MX_LPUART1_UART_Init+0x8c>)
 80006ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 80006f0:	4a20      	ldr	r2, [pc, #128]	@ (8000774 <MX_LPUART1_UART_Init+0x90>)
 80006f2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 8000708:	220c      	movs	r2, #12
 800070a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070c:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071e:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000724:	4811      	ldr	r0, [pc, #68]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 8000726:	f003 fd59 	bl	80041dc <HAL_UART_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000730:	f000 f882 	bl	8000838 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	480d      	ldr	r0, [pc, #52]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 8000738:	f004 faf4 	bl	8004d24 <HAL_UARTEx_SetTxFifoThreshold>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000742:	f000 f879 	bl	8000838 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000746:	2100      	movs	r1, #0
 8000748:	4808      	ldr	r0, [pc, #32]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 800074a:	f004 fb29 	bl	8004da0 <HAL_UARTEx_SetRxFifoThreshold>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000754:	f000 f870 	bl	8000838 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	@ (800076c <MX_LPUART1_UART_Init+0x88>)
 800075a:	f004 faaa 	bl	8004cb2 <HAL_UARTEx_DisableFifoMode>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000764:	f000 f868 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200002ac 	.word	0x200002ac
 8000770:	40008000 	.word	0x40008000
 8000774:	00033324 	.word	0x00033324

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	@ 0x28
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b23      	ldr	r3, [pc, #140]	@ (800081c <MX_GPIO_Init+0xa4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a22      	ldr	r2, [pc, #136]	@ (800081c <MX_GPIO_Init+0xa4>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b20      	ldr	r3, [pc, #128]	@ (800081c <MX_GPIO_Init+0xa4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a6:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a1c      	ldr	r2, [pc, #112]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a16      	ldr	r2, [pc, #88]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a10      	ldr	r2, [pc, #64]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	480b      	ldr	r0, [pc, #44]	@ (8000820 <MX_GPIO_Init+0xa8>)
 80007f4:	f000 fe88 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007f8:	2320      	movs	r3, #32
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_GPIO_Init+0xa8>)
 8000810:	f000 fcf8 	bl	8001204 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	@ 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	48000400 	.word	0x48000400

08000824 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 800082c:	f00a fbd4 	bl	800afd8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000830:	2001      	movs	r0, #1
 8000832:	f007 fefb 	bl	800862c <osDelay>
 8000836:	e7fb      	b.n	8000830 <StartDefaultTask+0xc>

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <HAL_MspInit+0x50>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800084e:	4a11      	ldr	r2, [pc, #68]	@ (8000894 <HAL_MspInit+0x50>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6613      	str	r3, [r2, #96]	@ 0x60
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <HAL_MspInit+0x50>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <HAL_MspInit+0x50>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000866:	4a0b      	ldr	r2, [pc, #44]	@ (8000894 <HAL_MspInit+0x50>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086c:	6593      	str	r3, [r2, #88]	@ 0x58
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_MspInit+0x50>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	210f      	movs	r1, #15
 800087e:	f06f 0001 	mvn.w	r0, #1
 8000882:	f000 face 	bl	8000e22 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000886:	f002 fd2f 	bl	80032e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09e      	sub	sp, #120	@ 0x78
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2250      	movs	r2, #80	@ 0x50
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00b f871 	bl	800b9a0 <memset>
  if(hfdcan->Instance==FDCAN2)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a20      	ldr	r2, [pc, #128]	@ (8000944 <HAL_FDCAN_MspInit+0xac>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d138      	bne.n	800093a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80008ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fa43 	bl	8003d64 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80008e4:	f7ff ffa8 	bl	8000838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <HAL_FDCAN_MspInit+0xb0>)
 80008ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ec:	4a16      	ldr	r2, [pc, #88]	@ (8000948 <HAL_FDCAN_MspInit+0xb0>)
 80008ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <HAL_FDCAN_MspInit+0xb0>)
 80008f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <HAL_FDCAN_MspInit+0xb0>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000904:	4a10      	ldr	r2, [pc, #64]	@ (8000948 <HAL_FDCAN_MspInit+0xb0>)
 8000906:	f043 0302 	orr.w	r3, r3, #2
 800090a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090c:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <HAL_FDCAN_MspInit+0xb0>)
 800090e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000918:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800091c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800092a:	2309      	movs	r3, #9
 800092c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	@ (800094c <HAL_FDCAN_MspInit+0xb4>)
 8000936:	f000 fc65 	bl	8001204 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 800093a:	bf00      	nop
 800093c:	3778      	adds	r7, #120	@ 0x78
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40006800 	.word	0x40006800
 8000948:	40021000 	.word	0x40021000
 800094c:	48000400 	.word	0x48000400

08000950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b09e      	sub	sp, #120	@ 0x78
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2250      	movs	r2, #80	@ 0x50
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f00b f815 	bl	800b9a0 <memset>
  if(hi2c->Instance==I2C2)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a1f      	ldr	r2, [pc, #124]	@ (80009f8 <HAL_I2C_MspInit+0xa8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d137      	bne.n	80009f0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4618      	mov	r0, r3
 800098e:	f003 f9e9 	bl	8003d64 <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000998:	f7ff ff4e 	bl	8000838 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <HAL_I2C_MspInit+0xac>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a0:	4a16      	ldr	r2, [pc, #88]	@ (80009fc <HAL_I2C_MspInit+0xac>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <HAL_I2C_MspInit+0xac>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009b8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ba:	2312      	movs	r3, #18
 80009bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009c6:	2304      	movs	r3, #4
 80009c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009ce:	4619      	mov	r1, r3
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d4:	f000 fc16 	bl	8001204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <HAL_I2C_MspInit+0xac>)
 80009da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009dc:	4a07      	ldr	r2, [pc, #28]	@ (80009fc <HAL_I2C_MspInit+0xac>)
 80009de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <HAL_I2C_MspInit+0xac>)
 80009e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80009f0:	bf00      	nop
 80009f2:	3778      	adds	r7, #120	@ 0x78
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40005800 	.word	0x40005800
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b09e      	sub	sp, #120	@ 0x78
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2250      	movs	r2, #80	@ 0x50
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f00a ffbd 	bl	800b9a0 <memset>
  if(huart->Instance==LPUART1)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000aa8 <HAL_UART_MspInit+0xa8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d136      	bne.n	8000a9e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a30:	2320      	movs	r3, #32
 8000a32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 f991 	bl	8003d64 <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a48:	f7ff fef6 	bl	8000838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a4c:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <HAL_UART_MspInit+0xac>)
 8000a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a50:	4a16      	ldr	r2, [pc, #88]	@ (8000aac <HAL_UART_MspInit+0xac>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000a58:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <HAL_UART_MspInit+0xac>)
 8000a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <HAL_UART_MspInit+0xac>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a68:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <HAL_UART_MspInit+0xac>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a70:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <HAL_UART_MspInit+0xac>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9a:	f000 fbb3 	bl	8001204 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3778      	adds	r7, #120	@ 0x78
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40008000 	.word	0x40008000
 8000aac:	40021000 	.word	0x40021000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f8a1 	bl	8000c30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000aee:	f009 f9f3 	bl	8009ed8 <xTaskGetSchedulerState>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d001      	beq.n	8000afc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000af8:	f009 ffee 	bl	800aad8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <USB_LP_IRQHandler+0x10>)
 8000b06:	f000 ff39 	bl	800197c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20003204 	.word	0x20003204

08000b14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b38:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopForever+0xe>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopForever+0x16>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f00a ff79 	bl	800ba5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6a:	f7ff fcd1 	bl	8000510 <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
  ldr   r0, =_estack
 8000b70:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000b7c:	0800bc68 	.word	0x0800bc68
  ldr r2, =_sbss
 8000b80:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000b84:	20003840 	.word	0x20003840

08000b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_2_IRQHandler>

08000b8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f939 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f000 f80e 	bl	8000bbc <HAL_InitTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	e001      	b.n	8000bb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bac:	f7ff fe4a 	bl	8000844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]

}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bc8:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <HAL_InitTick+0x68>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d022      	beq.n	8000c16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bd0:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <HAL_InitTick+0x6c>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <HAL_InitTick+0x68>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f944 	bl	8000e72 <HAL_SYSTICK_Config>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10f      	bne.n	8000c10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b0f      	cmp	r3, #15
 8000bf4:	d809      	bhi.n	8000c0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfe:	f000 f910 	bl	8000e22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_InitTick+0x70>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e007      	b.n	8000c1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e004      	b.n	8000c1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e001      	b.n	8000c1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <HAL_IncTick+0x1c>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a03      	ldr	r2, [pc, #12]	@ (8000c4c <HAL_IncTick+0x1c>)
 8000c40:	6013      	str	r3, [r2, #0]
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	20000344 	.word	0x20000344
 8000c50:	20000008 	.word	0x20000008

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000344 	.word	0x20000344

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	@ (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	@ (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	@ (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	@ 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff29 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e30:	f7ff ff40 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff90 	bl	8000d60 <NVIC_EncodePriority>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff5f 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff33 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffa4 	bl	8000dc8 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e147      	b.n	800112e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d106      	bne.n	8000eb8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fcf0 	bl	8000898 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0210 	bic.w	r2, r2, #16
 8000ec6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec8:	f7ff fec4 	bl	8000c54 <HAL_GetTick>
 8000ecc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ece:	e012      	b.n	8000ef6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ed0:	f7ff fec0 	bl	8000c54 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b0a      	cmp	r3, #10
 8000edc:	d90b      	bls.n	8000ef6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee2:	f043 0201 	orr.w	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2203      	movs	r2, #3
 8000eee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e11b      	b.n	800112e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d0e5      	beq.n	8000ed0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	699a      	ldr	r2, [r3, #24]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f14:	f7ff fe9e 	bl	8000c54 <HAL_GetTick>
 8000f18:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f1a:	e012      	b.n	8000f42 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f1c:	f7ff fe9a 	bl	8000c54 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b0a      	cmp	r3, #10
 8000f28:	d90b      	bls.n	8000f42 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2203      	movs	r2, #3
 8000f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0f5      	b.n	800112e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0e5      	beq.n	8000f1c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	699a      	ldr	r2, [r3, #24]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0202 	orr.w	r2, r2, #2
 8000f5e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a74      	ldr	r2, [pc, #464]	@ (8001138 <HAL_FDCAN_Init+0x2ac>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d103      	bne.n	8000f72 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000f6a:	4a74      	ldr	r2, [pc, #464]	@ (800113c <HAL_FDCAN_Init+0x2b0>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7c1b      	ldrb	r3, [r3, #16]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d108      	bne.n	8000f8c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	699a      	ldr	r2, [r3, #24]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f88:	619a      	str	r2, [r3, #24]
 8000f8a:	e007      	b.n	8000f9c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	699a      	ldr	r2, [r3, #24]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f9a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7c5b      	ldrb	r3, [r3, #17]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d108      	bne.n	8000fb6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	699a      	ldr	r2, [r3, #24]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000fb2:	619a      	str	r2, [r3, #24]
 8000fb4:	e007      	b.n	8000fc6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	699a      	ldr	r2, [r3, #24]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000fc4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7c9b      	ldrb	r3, [r3, #18]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d108      	bne.n	8000fe0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	699a      	ldr	r2, [r3, #24]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000fdc:	619a      	str	r2, [r3, #24]
 8000fde:	e007      	b.n	8000ff0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000fee:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	699a      	ldr	r2, [r3, #24]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001014:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0210 	bic.w	r2, r2, #16
 8001024:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	699a      	ldr	r2, [r3, #24]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f042 0204 	orr.w	r2, r2, #4
 800103c:	619a      	str	r2, [r3, #24]
 800103e:	e02c      	b.n	800109a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d028      	beq.n	800109a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d01c      	beq.n	800108a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800105e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0210 	orr.w	r2, r2, #16
 800106e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d110      	bne.n	800109a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0220 	orr.w	r2, r2, #32
 8001086:	619a      	str	r2, [r3, #24]
 8001088:	e007      	b.n	800109a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	699a      	ldr	r2, [r3, #24]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 0220 	orr.w	r2, r2, #32
 8001098:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	3b01      	subs	r3, #1
 80010a0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010aa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010b2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010c2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010c4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80010ce:	d115      	bne.n	80010fc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010da:	3b01      	subs	r3, #1
 80010dc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010de:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	3b01      	subs	r3, #1
 80010e6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80010e8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f0:	3b01      	subs	r3, #1
 80010f2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80010f8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010fa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f814 	bl	8001140 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40006400 	.word	0x40006400
 800113c:	40006500 	.word	0x40006500

08001140 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001148:	4b2c      	ldr	r3, [pc, #176]	@ (80011fc <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800114a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a2b      	ldr	r2, [pc, #172]	@ (8001200 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d103      	bne.n	800115e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800115c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800116c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001174:	041a      	lsls	r2, r3, #16
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001192:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119a:	061a      	lsls	r2, r3, #24
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	e005      	b.n	80011e0 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3304      	adds	r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d3f3      	bcc.n	80011d4 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	4000a400 	.word	0x4000a400
 8001200:	40006800 	.word	0x40006800

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001212:	e15a      	b.n	80014ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 814c 	beq.w	80014c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d005      	beq.n	8001244 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001240:	2b02      	cmp	r3, #2
 8001242:	d130      	bne.n	80012a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127a:	2201      	movs	r2, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	f003 0201 	and.w	r2, r3, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d017      	beq.n	80012e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d123      	bne.n	8001336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	6939      	ldr	r1, [r7, #16]
 8001332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0203 	and.w	r2, r3, #3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80a6 	beq.w	80014c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001378:	4b5b      	ldr	r3, [pc, #364]	@ (80014e8 <HAL_GPIO_Init+0x2e4>)
 800137a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137c:	4a5a      	ldr	r2, [pc, #360]	@ (80014e8 <HAL_GPIO_Init+0x2e4>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6613      	str	r3, [r2, #96]	@ 0x60
 8001384:	4b58      	ldr	r3, [pc, #352]	@ (80014e8 <HAL_GPIO_Init+0x2e4>)
 8001386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001390:	4a56      	ldr	r2, [pc, #344]	@ (80014ec <HAL_GPIO_Init+0x2e8>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013ba:	d01f      	beq.n	80013fc <HAL_GPIO_Init+0x1f8>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a4c      	ldr	r2, [pc, #304]	@ (80014f0 <HAL_GPIO_Init+0x2ec>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d019      	beq.n	80013f8 <HAL_GPIO_Init+0x1f4>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a4b      	ldr	r2, [pc, #300]	@ (80014f4 <HAL_GPIO_Init+0x2f0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d013      	beq.n	80013f4 <HAL_GPIO_Init+0x1f0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a4a      	ldr	r2, [pc, #296]	@ (80014f8 <HAL_GPIO_Init+0x2f4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d00d      	beq.n	80013f0 <HAL_GPIO_Init+0x1ec>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a49      	ldr	r2, [pc, #292]	@ (80014fc <HAL_GPIO_Init+0x2f8>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d007      	beq.n	80013ec <HAL_GPIO_Init+0x1e8>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a48      	ldr	r2, [pc, #288]	@ (8001500 <HAL_GPIO_Init+0x2fc>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d101      	bne.n	80013e8 <HAL_GPIO_Init+0x1e4>
 80013e4:	2305      	movs	r3, #5
 80013e6:	e00a      	b.n	80013fe <HAL_GPIO_Init+0x1fa>
 80013e8:	2306      	movs	r3, #6
 80013ea:	e008      	b.n	80013fe <HAL_GPIO_Init+0x1fa>
 80013ec:	2304      	movs	r3, #4
 80013ee:	e006      	b.n	80013fe <HAL_GPIO_Init+0x1fa>
 80013f0:	2303      	movs	r3, #3
 80013f2:	e004      	b.n	80013fe <HAL_GPIO_Init+0x1fa>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_Init+0x1fa>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <HAL_GPIO_Init+0x1fa>
 80013fc:	2300      	movs	r3, #0
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	f002 0203 	and.w	r2, r2, #3
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	4093      	lsls	r3, r2
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140e:	4937      	ldr	r1, [pc, #220]	@ (80014ec <HAL_GPIO_Init+0x2e8>)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800141c:	4b39      	ldr	r3, [pc, #228]	@ (8001504 <HAL_GPIO_Init+0x300>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001440:	4a30      	ldr	r2, [pc, #192]	@ (8001504 <HAL_GPIO_Init+0x300>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001446:	4b2f      	ldr	r3, [pc, #188]	@ (8001504 <HAL_GPIO_Init+0x300>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800146a:	4a26      	ldr	r2, [pc, #152]	@ (8001504 <HAL_GPIO_Init+0x300>)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001470:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <HAL_GPIO_Init+0x300>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001494:	4a1b      	ldr	r2, [pc, #108]	@ (8001504 <HAL_GPIO_Init+0x300>)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HAL_GPIO_Init+0x300>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014be:	4a11      	ldr	r2, [pc, #68]	@ (8001504 <HAL_GPIO_Init+0x300>)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f47f ae9d 	bne.w	8001214 <HAL_GPIO_Init+0x10>
  }
}
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010000 	.word	0x40010000
 80014f0:	48000400 	.word	0x48000400
 80014f4:	48000800 	.word	0x48000800
 80014f8:	48000c00 	.word	0x48000c00
 80014fc:	48001000 	.word	0x48001000
 8001500:	48001400 	.word	0x48001400
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001524:	e002      	b.n	800152c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e08d      	b.n	8001666 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff f9f6 	bl	8000950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2224      	movs	r2, #36	@ 0x24
 8001568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001588:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001598:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d107      	bne.n	80015b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e006      	b.n	80015c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80015be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d108      	bne.n	80015da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	e007      	b.n	80015ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800160c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69d9      	ldr	r1, [r3, #28]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1a      	ldr	r2, [r3, #32]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2220      	movs	r2, #32
 8001652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b20      	cmp	r3, #32
 8001682:	d138      	bne.n	80016f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800168e:	2302      	movs	r3, #2
 8001690:	e032      	b.n	80016f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2224      	movs	r2, #36	@ 0x24
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0201 	bic.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6819      	ldr	r1, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0201 	orr.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2220      	movs	r2, #32
 80016e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016f6:	2302      	movs	r3, #2
  }
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b20      	cmp	r3, #32
 8001718:	d139      	bne.n	800178e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001724:	2302      	movs	r3, #2
 8001726:	e033      	b.n	8001790 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2224      	movs	r2, #36	@ 0x24
 8001734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001756:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2220      	movs	r2, #32
 800177e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800178e:	2302      	movs	r3, #2
  }
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0c0      	b.n	8001930 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d106      	bne.n	80017c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f009 fde8 	bl	800b398 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 fb86 	bl	8004ee6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	e03e      	b.n	800185e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	3311      	adds	r3, #17
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3310      	adds	r3, #16
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	440b      	add	r3, r1
 8001816:	3313      	adds	r3, #19
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	3320      	adds	r3, #32
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	3324      	adds	r3, #36	@ 0x24
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	3301      	adds	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	791b      	ldrb	r3, [r3, #4]
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	429a      	cmp	r2, r3
 8001866:	d3bb      	bcc.n	80017e0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	e044      	b.n	80018f8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	440b      	add	r3, r1
 80018a8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	440b      	add	r3, r1
 80018d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	3301      	adds	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	791b      	ldrb	r3, [r3, #4]
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d3b5      	bcc.n	800186e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3304      	adds	r3, #4
 800190a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800190e:	f003 fb05 	bl	8004f1c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7a9b      	ldrb	r3, [r3, #10]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d102      	bne.n	800192e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f001 fc0e 	bl	800314a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_PCD_Start+0x16>
 800194a:	2302      	movs	r3, #2
 800194c:	e012      	b.n	8001974 <HAL_PCD_Start+0x3c>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f003 faac 	bl	8004eb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f005 f889 	bl	8006a7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f005 f88e 	bl	8006aaa <USB_ReadInterrupts>
 800198e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fb06 	bl	8001fac <PCD_EP_ISR_Handler>

    return;
 80019a0:	e110      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d013      	beq.n	80019d4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019be:	b292      	uxth	r2, r2
 80019c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f009 fd78 	bl	800b4ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80019ca:	2100      	movs	r1, #0
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f8fc 	bl	8001bca <HAL_PCD_SetAddress>

    return;
 80019d2:	e0f7      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00c      	beq.n	80019f8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80019f0:	b292      	uxth	r2, r2
 80019f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019f6:	e0e5      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00c      	beq.n	8001a1c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a14:	b292      	uxth	r2, r2
 8001a16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a1a:	e0d3      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d034      	beq.n	8001a90 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0204 	bic.w	r2, r2, #4
 8001a38:	b292      	uxth	r2, r2
 8001a3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0208 	bic.w	r2, r2, #8
 8001a50:	b292      	uxth	r2, r2
 8001a52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a68:	2100      	movs	r1, #0
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f009 ff18 	bl	800b8a0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f009 fd5b 	bl	800b52c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a88:	b292      	uxth	r2, r2
 8001a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a8e:	e099      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d027      	beq.n	8001aea <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0208 	orr.w	r2, r2, #8
 8001aac:	b292      	uxth	r2, r2
 8001aae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0204 	orr.w	r2, r2, #4
 8001adc:	b292      	uxth	r2, r2
 8001ade:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f009 fd08 	bl	800b4f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ae8:	e06c      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d040      	beq.n	8001b76 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b06:	b292      	uxth	r2, r2
 8001b08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d12b      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0204 	orr.w	r2, r2, #4
 8001b28:	b292      	uxth	r2, r2
 8001b2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0208 	orr.w	r2, r2, #8
 8001b40:	b292      	uxth	r2, r2
 8001b42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b64:	2101      	movs	r1, #1
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f009 fe9a 	bl	800b8a0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001b6c:	e02a      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f009 fcc2 	bl	800b4f8 <HAL_PCD_SuspendCallback>
    return;
 8001b74:	e026      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00f      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b92:	b292      	uxth	r2, r2
 8001b94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f009 fc80 	bl	800b49e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b9e:	e011      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00c      	beq.n	8001bc4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001bc2:	bf00      	nop
  }
}
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_PCD_SetAddress+0x1a>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e012      	b.n	8001c0a <HAL_PCD_SetAddress+0x40>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	78fa      	ldrb	r2, [r7, #3]
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 ff2a 	bl	8006a54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	4608      	mov	r0, r1
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4603      	mov	r3, r0
 8001c22:	70fb      	strb	r3, [r7, #3]
 8001c24:	460b      	mov	r3, r1
 8001c26:	803b      	strh	r3, [r7, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da0e      	bge.n	8001c56 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0207 	and.w	r2, r3, #7
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	3310      	adds	r3, #16
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	705a      	strb	r2, [r3, #1]
 8001c54:	e00e      	b.n	8001c74 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 0207 	and.w	r2, r3, #7
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c80:	883b      	ldrh	r3, [r7, #0]
 8001c82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	78ba      	ldrb	r2, [r7, #2]
 8001c8e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c90:	78bb      	ldrb	r3, [r7, #2]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d102      	bne.n	8001c9c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_PCD_EP_Open+0x98>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e00e      	b.n	8001cc8 <HAL_PCD_EP_Open+0xb6>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68f9      	ldr	r1, [r7, #12]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 f94d 	bl	8004f58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001cc6:	7afb      	ldrb	r3, [r7, #11]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	da0e      	bge.n	8001d02 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	f003 0207 	and.w	r2, r3, #7
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	3310      	adds	r3, #16
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	705a      	strb	r2, [r3, #1]
 8001d00:	e00e      	b.n	8001d20 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 0207 	and.w	r2, r3, #7
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_PCD_EP_Close+0x6a>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e00e      	b.n	8001d58 <HAL_PCD_EP_Close+0x88>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68f9      	ldr	r1, [r7, #12]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fded 	bl	8005928 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	f003 0207 	and.w	r2, r3, #7
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4413      	add	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6979      	ldr	r1, [r7, #20]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 ffa5 	bl	8005d02 <USB_EPStartXfer>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 0207 	and.w	r2, r3, #7
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001de4:	681b      	ldr	r3, [r3, #0]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	f003 0207 	and.w	r2, r3, #7
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	3310      	adds	r3, #16
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2200      	movs	r2, #0
 8001e36:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6979      	ldr	r1, [r7, #20]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 ff56 	bl	8005d02 <USB_EPStartXfer>

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	7912      	ldrb	r2, [r2, #4]
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e03e      	b.n	8001efc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	da0e      	bge.n	8001ea4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	f003 0207 	and.w	r2, r3, #7
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	3310      	adds	r3, #16
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	705a      	strb	r2, [r3, #1]
 8001ea2:	e00c      	b.n	8001ebe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ea4:	78fa      	ldrb	r2, [r7, #3]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_EP_SetStall+0x7e>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e00e      	b.n	8001efc <HAL_PCD_EP_SetStall+0x9c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 fcb7 	bl	8006860 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	7912      	ldrb	r2, [r2, #4]
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e040      	b.n	8001fa4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	da0e      	bge.n	8001f48 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 0207 	and.w	r2, r3, #7
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	3310      	adds	r3, #16
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	705a      	strb	r2, [r3, #1]
 8001f46:	e00e      	b.n	8001f66 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 0207 	and.w	r2, r3, #7
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_PCD_EP_ClrStall+0x82>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e00e      	b.n	8001fa4 <HAL_PCD_EP_ClrStall+0xa0>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68f9      	ldr	r1, [r7, #12]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 fcb4 	bl	8006902 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b092      	sub	sp, #72	@ 0x48
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fb4:	e333      	b.n	800261e <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fbe:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001fc0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001fcc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f040 8108 	bne.w	80021e6 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fd6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d14c      	bne.n	800207a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ff0:	813b      	strh	r3, [r7, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	893b      	ldrh	r3, [r7, #8]
 8001ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002000:	b29b      	uxth	r3, r3
 8002002:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3310      	adds	r3, #16
 8002008:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002012:	b29b      	uxth	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	4413      	add	r3, r2
 8002024:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800202e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002030:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	441a      	add	r2, r3
 800203c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800203e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002040:	2100      	movs	r1, #0
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f009 fa11 	bl	800b46a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7b1b      	ldrb	r3, [r3, #12]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 82e5 	beq.w	800261e <PCD_EP_ISR_Handler+0x672>
 8002054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 82e0 	bne.w	800261e <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7b1b      	ldrb	r3, [r3, #12]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002068:	b2da      	uxtb	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	731a      	strb	r2, [r3, #12]
 8002078:	e2d1      	b.n	800261e <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002080:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800208a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800208c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002090:	2b00      	cmp	r3, #0
 8002092:	d032      	beq.n	80020fa <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800209c:	b29b      	uxth	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80020c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020c8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020cc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	f004 fd3d 	bl	8006b4e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020e0:	4013      	ands	r3, r2
 80020e2:	817b      	strh	r3, [r7, #10]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	897a      	ldrh	r2, [r7, #10]
 80020ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020ee:	b292      	uxth	r2, r2
 80020f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f009 f98c 	bl	800b410 <HAL_PCD_SetupStageCallback>
 80020f8:	e291      	b.n	800261e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020fa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f280 828d 	bge.w	800261e <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	b29a      	uxth	r2, r3
 800210c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002110:	4013      	ands	r3, r2
 8002112:	81fb      	strh	r3, [r7, #14]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	89fa      	ldrh	r2, [r7, #14]
 800211a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800211e:	b292      	uxth	r2, r2
 8002120:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800212a:	b29b      	uxth	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	4413      	add	r3, r2
 800213c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002148:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800214a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d019      	beq.n	8002186 <PCD_EP_ISR_Handler+0x1da>
 8002152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d015      	beq.n	8002186 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002160:	6959      	ldr	r1, [r3, #20]
 8002162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002164:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002168:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800216a:	b29b      	uxth	r3, r3
 800216c:	f004 fcef 	bl	8006b4e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	441a      	add	r2, r3
 800217a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800217c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800217e:	2100      	movs	r1, #0
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f009 f957 	bl	800b434 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800218e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002194:	2b00      	cmp	r3, #0
 8002196:	f040 8242 	bne.w	800261e <PCD_EP_ISR_Handler+0x672>
 800219a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800219c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80021a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80021a4:	f000 823b 	beq.w	800261e <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021b8:	81bb      	strh	r3, [r7, #12]
 80021ba:	89bb      	ldrh	r3, [r7, #12]
 80021bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80021c0:	81bb      	strh	r3, [r7, #12]
 80021c2:	89bb      	ldrh	r3, [r7, #12]
 80021c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80021c8:	81bb      	strh	r3, [r7, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	89bb      	ldrh	r3, [r7, #12]
 80021d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	8013      	strh	r3, [r2, #0]
 80021e4:	e21b      	b.n	800261e <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f280 80f1 	bge.w	80023e4 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29a      	uxth	r2, r3
 8002214:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002218:	4013      	ands	r3, r2
 800221a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800222c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002230:	b292      	uxth	r2, r2
 8002232:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002234:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800224a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800224c:	7b1b      	ldrb	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d123      	bne.n	800229a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	4413      	add	r3, r2
 800226c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002276:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800227a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 808b 	beq.w	800239a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800228a:	6959      	ldr	r1, [r3, #20]
 800228c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800228e:	88da      	ldrh	r2, [r3, #6]
 8002290:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002294:	f004 fc5b 	bl	8006b4e <USB_ReadPMA>
 8002298:	e07f      	b.n	800239a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800229a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800229c:	78db      	ldrb	r3, [r3, #3]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d109      	bne.n	80022b6 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80022a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022a4:	461a      	mov	r2, r3
 80022a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f9c6 	bl	800263a <HAL_PCD_EP_DB_Receive>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80022b4:	e071      	b.n	800239a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022d0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	441a      	add	r2, r3
 80022e0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80022e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d022      	beq.n	8002356 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002318:	b29b      	uxth	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	4413      	add	r3, r2
 800232a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002334:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002338:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800233c:	2b00      	cmp	r3, #0
 800233e:	d02c      	beq.n	800239a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002346:	6959      	ldr	r1, [r3, #20]
 8002348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800234a:	891a      	ldrh	r2, [r3, #8]
 800234c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002350:	f004 fbfd 	bl	8006b4e <USB_ReadPMA>
 8002354:	e021      	b.n	800239a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800235e:	b29b      	uxth	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	4413      	add	r3, r2
 8002370:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800237e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800238c:	6959      	ldr	r1, [r3, #20]
 800238e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002390:	895a      	ldrh	r2, [r3, #10]
 8002392:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002396:	f004 fbda 	bl	8006b4e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800239a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80023a2:	441a      	add	r2, r3
 80023a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80023a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80023b0:	441a      	add	r2, r3
 80023b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023b4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <PCD_EP_ISR_Handler+0x41e>
 80023be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80023c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d206      	bcs.n	80023d8 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f009 f82f 	bl	800b434 <HAL_PCD_DataOutStageCallback>
 80023d6:	e005      	b.n	80023e4 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fc8f 	bl	8005d02 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80023e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8117 	beq.w	800261e <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80023f0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	3310      	adds	r3, #16
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800241a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800241e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	441a      	add	r2, r3
 800242e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002438:	b29b      	uxth	r3, r3
 800243a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800243c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800243e:	78db      	ldrb	r3, [r3, #3]
 8002440:	2b01      	cmp	r3, #1
 8002442:	f040 80a1 	bne.w	8002588 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8002446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800244c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800244e:	7b1b      	ldrb	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8092 	beq.w	800257a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002456:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d046      	beq.n	80024ee <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d126      	bne.n	80024b6 <PCD_EP_ISR_Handler+0x50a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002476:	b29b      	uxth	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	4413      	add	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	00da      	lsls	r2, r3, #3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	4413      	add	r3, r2
 800248a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249a:	b29a      	uxth	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	801a      	strh	r2, [r3, #0]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	801a      	strh	r2, [r3, #0]
 80024b4:	e061      	b.n	800257a <PCD_EP_ISR_Handler+0x5ce>
 80024b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024b8:	785b      	ldrb	r3, [r3, #1]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d15d      	bne.n	800257a <PCD_EP_ISR_Handler+0x5ce>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	00da      	lsls	r2, r3, #3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2200      	movs	r2, #0
 80024ea:	801a      	strh	r2, [r3, #0]
 80024ec:	e045      	b.n	800257a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d126      	bne.n	800254a <PCD_EP_ISR_Handler+0x59e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	4413      	add	r3, r2
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
 8002514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	00da      	lsls	r2, r3, #3
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	4413      	add	r3, r2
 800251e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252e:	b29a      	uxth	r2, r3
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	801a      	strh	r2, [r3, #0]
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002542:	b29a      	uxth	r2, r3
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	801a      	strh	r2, [r3, #0]
 8002548:	e017      	b.n	800257a <PCD_EP_ISR_Handler+0x5ce>
 800254a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d113      	bne.n	800257a <PCD_EP_ISR_Handler+0x5ce>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002560:	4413      	add	r3, r2
 8002562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	00da      	lsls	r2, r3, #3
 800256a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800256c:	4413      	add	r3, r2
 800256e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002572:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002576:	2200      	movs	r2, #0
 8002578:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800257a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f008 ff72 	bl	800b46a <HAL_PCD_DataInStageCallback>
 8002586:	e04a      	b.n	800261e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002588:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800258a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d13f      	bne.n	8002612 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b6:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80025b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80025be:	429a      	cmp	r2, r3
 80025c0:	d906      	bls.n	80025d0 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80025c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80025c8:	1ad2      	subs	r2, r2, r3
 80025ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025cc:	619a      	str	r2, [r3, #24]
 80025ce:	e002      	b.n	80025d6 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80025d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d2:	2200      	movs	r2, #0
 80025d4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80025d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	4619      	mov	r1, r3
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f008 ff40 	bl	800b46a <HAL_PCD_DataInStageCallback>
 80025ea:	e018      	b.n	800261e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80025ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80025f2:	441a      	add	r2, r3
 80025f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80025f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025fa:	69da      	ldr	r2, [r3, #28]
 80025fc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80025fe:	441a      	add	r2, r3
 8002600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002602:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fb79 	bl	8005d02 <USB_EPStartXfer>
 8002610:	e005      	b.n	800261e <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002612:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002614:	461a      	mov	r2, r3
 8002616:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f917 	bl	800284c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002626:	b29b      	uxth	r3, r3
 8002628:	b21b      	sxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	f6ff acc3 	blt.w	8001fb6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3748      	adds	r7, #72	@ 0x48
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b088      	sub	sp, #32
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	4613      	mov	r3, r2
 8002646:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d07c      	beq.n	800274c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800265a:	b29b      	uxth	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	4413      	add	r3, r2
 800266c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002676:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	8b7b      	ldrh	r3, [r7, #26]
 800267e:	429a      	cmp	r2, r3
 8002680:	d306      	bcc.n	8002690 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	8b7b      	ldrh	r3, [r7, #26]
 8002688:	1ad2      	subs	r2, r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	619a      	str	r2, [r3, #24]
 800268e:	e002      	b.n	8002696 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d123      	bne.n	80026e6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b8:	833b      	strh	r3, [r7, #24]
 80026ba:	8b3b      	ldrh	r3, [r7, #24]
 80026bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80026c0:	833b      	strh	r3, [r7, #24]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	8b3b      	ldrh	r3, [r7, #24]
 80026d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01f      	beq.n	8002730 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800270a:	82fb      	strh	r3, [r7, #22]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	8afb      	ldrh	r3, [r7, #22]
 800271c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002728:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800272c:	b29b      	uxth	r3, r3
 800272e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002730:	8b7b      	ldrh	r3, [r7, #26]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8085 	beq.w	8002842 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	6959      	ldr	r1, [r3, #20]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	891a      	ldrh	r2, [r3, #8]
 8002744:	8b7b      	ldrh	r3, [r7, #26]
 8002746:	f004 fa02 	bl	8006b4e <USB_ReadPMA>
 800274a:	e07a      	b.n	8002842 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	4413      	add	r3, r2
 8002766:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002770:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	8b7b      	ldrh	r3, [r7, #26]
 8002778:	429a      	cmp	r2, r3
 800277a:	d306      	bcc.n	800278a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	8b7b      	ldrh	r3, [r7, #26]
 8002782:	1ad2      	subs	r2, r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	619a      	str	r2, [r3, #24]
 8002788:	e002      	b.n	8002790 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d123      	bne.n	80027e0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b2:	83fb      	strh	r3, [r7, #30]
 80027b4:	8bfb      	ldrh	r3, [r7, #30]
 80027b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80027ba:	83fb      	strh	r3, [r7, #30]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	441a      	add	r2, r3
 80027ca:	8bfb      	ldrh	r3, [r7, #30]
 80027cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027dc:	b29b      	uxth	r3, r3
 80027de:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d11f      	bne.n	800282a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002804:	83bb      	strh	r3, [r7, #28]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	441a      	add	r2, r3
 8002814:	8bbb      	ldrh	r3, [r7, #28]
 8002816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800281a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800281e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002822:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002826:	b29b      	uxth	r3, r3
 8002828:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800282a:	8b7b      	ldrh	r3, [r7, #26]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	6959      	ldr	r1, [r3, #20]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	895a      	ldrh	r2, [r3, #10]
 800283c:	8b7b      	ldrh	r3, [r7, #26]
 800283e:	f004 f986 	bl	8006b4e <USB_ReadPMA>
    }
  }

  return count;
 8002842:	8b7b      	ldrh	r3, [r7, #26]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b0a6      	sub	sp, #152	@ 0x98
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 81f7 	beq.w	8002c54 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800286e:	b29b      	uxth	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	4413      	add	r3, r2
 8002880:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800288a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002896:	429a      	cmp	r2, r3
 8002898:	d907      	bls.n	80028aa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80028a2:	1ad2      	subs	r2, r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	619a      	str	r2, [r3, #24]
 80028a8:	e002      	b.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f040 80e1 	bne.w	8002a7c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	785b      	ldrb	r3, [r3, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d126      	bne.n	8002910 <HAL_PCD_EP_DB_Transmit+0xc4>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d6:	4413      	add	r3, r2
 80028d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	00da      	lsls	r2, r3, #3
 80028e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e2:	4413      	add	r3, r2
 80028e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002908:	b29a      	uxth	r2, r3
 800290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290c:	801a      	strh	r2, [r3, #0]
 800290e:	e01a      	b.n	8002946 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	785b      	ldrb	r3, [r3, #1]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d116      	bne.n	8002946 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002926:	b29b      	uxth	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292c:	4413      	add	r3, r2
 800292e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	00da      	lsls	r2, r3, #3
 8002936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002938:	4413      	add	r3, r2
 800293a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800293e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002942:	2200      	movs	r2, #0
 8002944:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	785b      	ldrb	r3, [r3, #1]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d126      	bne.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x156>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	623b      	str	r3, [r7, #32]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	4413      	add	r3, r2
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	00da      	lsls	r2, r3, #3
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	4413      	add	r3, r2
 8002976:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002986:	b29a      	uxth	r2, r3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299a:	b29a      	uxth	r2, r3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	801a      	strh	r2, [r3, #0]
 80029a0:	e017      	b.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x186>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d113      	bne.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x186>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	4413      	add	r3, r2
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	00da      	lsls	r2, r3, #3
 80029c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c4:	4413      	add	r3, r2
 80029c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	2200      	movs	r2, #0
 80029d0:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	78db      	ldrb	r3, [r3, #3]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d123      	bne.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029f4:	837b      	strh	r3, [r7, #26]
 80029f6:	8b7b      	ldrh	r3, [r7, #26]
 80029f8:	f083 0320 	eor.w	r3, r3, #32
 80029fc:	837b      	strh	r3, [r7, #26]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	441a      	add	r2, r3
 8002a0c:	8b7b      	ldrh	r3, [r7, #26]
 8002a0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	4619      	mov	r1, r3
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f008 fd1e 	bl	800b46a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01f      	beq.n	8002a78 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a52:	833b      	strh	r3, [r7, #24]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	441a      	add	r2, r3
 8002a62:	8b3b      	ldrh	r3, [r7, #24]
 8002a64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e31f      	b.n	80030bc <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d021      	beq.n	8002aca <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aa0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002abe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	f040 82ca 	bne.w	800306a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002ade:	441a      	add	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002aec:	441a      	add	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	6a1a      	ldr	r2, [r3, #32]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d309      	bcc.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6a1a      	ldr	r2, [r3, #32]
 8002b08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b0a:	1ad2      	subs	r2, r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	621a      	str	r2, [r3, #32]
 8002b10:	e015      	b.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d107      	bne.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8002b1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002b28:	e009      	b.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	785b      	ldrb	r3, [r3, #1]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d15f      	bne.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b5a:	4413      	add	r3, r2
 8002b5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	00da      	lsls	r2, r3, #3
 8002b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b66:	4413      	add	r3, r2
 8002b68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b7c:	801a      	strh	r2, [r3, #0]
 8002b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <HAL_PCD_EP_DB_Transmit+0x34e>
 8002b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b96:	801a      	strh	r2, [r3, #0]
 8002b98:	e051      	b.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b9e:	d816      	bhi.n	8002bce <HAL_PCD_EP_DB_Transmit+0x382>
 8002ba0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	029b      	lsls	r3, r3, #10
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bca:	801a      	strh	r2, [r3, #0]
 8002bcc:	e037      	b.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002bce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bd0:	095b      	lsrs	r3, r3, #5
 8002bd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x398>
 8002bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002be0:	3b01      	subs	r3, #1
 8002be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	029b      	lsls	r3, r3, #10
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c02:	801a      	strh	r2, [r3, #0]
 8002c04:	e01b      	b.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d117      	bne.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c22:	4413      	add	r3, r2
 8002c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	00da      	lsls	r2, r3, #3
 8002c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c2e:	4413      	add	r3, r2
 8002c30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c3c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6959      	ldr	r1, [r3, #20]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	891a      	ldrh	r2, [r3, #8]
 8002c4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f003 ff3c 	bl	8006aca <USB_WritePMA>
 8002c52:	e20a      	b.n	800306a <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c78:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d307      	bcc.n	8002c98 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	699a      	ldr	r2, [r3, #24]
 8002c8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c90:	1ad2      	subs	r2, r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	619a      	str	r2, [r3, #24]
 8002c96:	e002      	b.n	8002c9e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f040 80f6 	bne.w	8002e94 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d126      	bne.n	8002cfe <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cc4:	4413      	add	r3, r2
 8002cc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	00da      	lsls	r2, r3, #3
 8002cce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002cd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ce6:	801a      	strh	r2, [r3, #0]
 8002ce8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cfa:	801a      	strh	r2, [r3, #0]
 8002cfc:	e01a      	b.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d116      	bne.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d1a:	4413      	add	r3, r2
 8002d1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	00da      	lsls	r2, r3, #3
 8002d24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d26:	4413      	add	r3, r2
 8002d28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002d2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d30:	2200      	movs	r2, #0
 8002d32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d12f      	bne.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x558>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	00da      	lsls	r2, r3, #3
 8002d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d88:	801a      	strh	r2, [r3, #0]
 8002d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	e01c      	b.n	8002dde <HAL_PCD_EP_DB_Transmit+0x592>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d118      	bne.n	8002dde <HAL_PCD_EP_DB_Transmit+0x592>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	00da      	lsls	r2, r3, #3
 8002dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dcc:	4413      	add	r3, r2
 8002dce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002dd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dda:	2200      	movs	r2, #0
 8002ddc:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	78db      	ldrb	r3, [r3, #3]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d127      	bne.n	8002e36 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e00:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002e04:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002e08:	f083 0320 	eor.w	r3, r3, #32
 8002e0c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	441a      	add	r2, r3
 8002e1e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f008 fb14 	bl	800b46a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d121      	bne.n	8002e90 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e66:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	441a      	add	r2, r3
 8002e78:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e113      	b.n	80030bc <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d121      	bne.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ed6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	f040 80be 	bne.w	800306a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002ef6:	441a      	add	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002f04:	441a      	add	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6a1a      	ldr	r2, [r3, #32]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d309      	bcc.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6a1a      	ldr	r2, [r3, #32]
 8002f20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f22:	1ad2      	subs	r2, r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	621a      	str	r2, [r3, #32]
 8002f28:	e015      	b.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d107      	bne.n	8002f42 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8002f32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002f36:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002f40:	e009      	b.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	785b      	ldrb	r3, [r3, #1]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d15f      	bne.n	8003024 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f78:	4413      	add	r3, r2
 8002f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	00da      	lsls	r2, r3, #3
 8002f82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f84:	4413      	add	r3, r2
 8002f86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0x76c>
 8002fa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fb4:	801a      	strh	r2, [r3, #0]
 8002fb6:	e04e      	b.n	8003056 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002fb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fba:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fbc:	d816      	bhi.n	8002fec <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x788>
 8002fce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	029b      	lsls	r3, r3, #10
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fe8:	801a      	strh	r2, [r3, #0]
 8002fea:	e034      	b.n	8003056 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002fec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8002ffc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ffe:	3b01      	subs	r3, #1
 8003000:	663b      	str	r3, [r7, #96]	@ 0x60
 8003002:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29a      	uxth	r2, r3
 8003008:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800300a:	b29b      	uxth	r3, r3
 800300c:	029b      	lsls	r3, r3, #10
 800300e:	b29b      	uxth	r3, r3
 8003010:	4313      	orrs	r3, r2
 8003012:	b29b      	uxth	r3, r3
 8003014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301c:	b29a      	uxth	r2, r3
 800301e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	e018      	b.n	8003056 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	785b      	ldrb	r3, [r3, #1]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d114      	bne.n	8003056 <HAL_PCD_EP_DB_Transmit+0x80a>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003034:	b29b      	uxth	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800303a:	4413      	add	r3, r2
 800303c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	00da      	lsls	r2, r3, #3
 8003044:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003046:	4413      	add	r3, r2
 8003048:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800304c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800304e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003050:	b29a      	uxth	r2, r3
 8003052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003054:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6959      	ldr	r1, [r3, #20]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	895a      	ldrh	r2, [r3, #10]
 8003062:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003064:	b29b      	uxth	r3, r3
 8003066:	f003 fd30 	bl	8006aca <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003084:	82fb      	strh	r3, [r7, #22]
 8003086:	8afb      	ldrh	r3, [r7, #22]
 8003088:	f083 0310 	eor.w	r3, r3, #16
 800308c:	82fb      	strh	r3, [r7, #22]
 800308e:	8afb      	ldrh	r3, [r7, #22]
 8003090:	f083 0320 	eor.w	r3, r3, #32
 8003094:	82fb      	strh	r3, [r7, #22]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	441a      	add	r2, r3
 80030a4:	8afb      	ldrh	r3, [r7, #22]
 80030a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3798      	adds	r7, #152	@ 0x98
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	817b      	strh	r3, [r7, #10]
 80030d2:	4613      	mov	r3, r2
 80030d4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030d6:	897b      	ldrh	r3, [r7, #10]
 80030d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e2:	897b      	ldrh	r3, [r7, #10]
 80030e4:	f003 0207 	and.w	r2, r3, #7
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	3310      	adds	r3, #16
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	e009      	b.n	800310e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030fa:	897a      	ldrh	r2, [r7, #10]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800310e:	893b      	ldrh	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d107      	bne.n	8003124 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2200      	movs	r2, #0
 8003118:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	b29a      	uxth	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	80da      	strh	r2, [r3, #6]
 8003122:	e00b      	b.n	800313c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2201      	movs	r2, #1
 8003128:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	b29a      	uxth	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	b29a      	uxth	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800316e:	b29b      	uxth	r3, r3
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003182:	b29b      	uxth	r3, r3
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d141      	bne.n	8003232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ae:	4b4b      	ldr	r3, [pc, #300]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ba:	d131      	bne.n	8003220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031bc:	4b47      	ldr	r3, [pc, #284]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031c2:	4a46      	ldr	r2, [pc, #280]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031cc:	4b43      	ldr	r3, [pc, #268]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031d4:	4a41      	ldr	r2, [pc, #260]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031dc:	4b40      	ldr	r3, [pc, #256]	@ (80032e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2232      	movs	r2, #50	@ 0x32
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	4a3f      	ldr	r2, [pc, #252]	@ (80032e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	0c9b      	lsrs	r3, r3, #18
 80031ee:	3301      	adds	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031f2:	e002      	b.n	80031fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fa:	4b38      	ldr	r3, [pc, #224]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003206:	d102      	bne.n	800320e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f2      	bne.n	80031f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800320e:	4b33      	ldr	r3, [pc, #204]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321a:	d158      	bne.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e057      	b.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003220:	4b2e      	ldr	r3, [pc, #184]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003226:	4a2d      	ldr	r2, [pc, #180]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800322c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003230:	e04d      	b.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003238:	d141      	bne.n	80032be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800323a:	4b28      	ldr	r3, [pc, #160]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003246:	d131      	bne.n	80032ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003248:	4b24      	ldr	r3, [pc, #144]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800324e:	4a23      	ldr	r2, [pc, #140]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003254:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003258:	4b20      	ldr	r3, [pc, #128]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003260:	4a1e      	ldr	r2, [pc, #120]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003268:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2232      	movs	r2, #50	@ 0x32
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	4a1c      	ldr	r2, [pc, #112]	@ (80032e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	0c9b      	lsrs	r3, r3, #18
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327e:	e002      	b.n	8003286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3b01      	subs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003286:	4b15      	ldr	r3, [pc, #84]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003292:	d102      	bne.n	800329a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f2      	bne.n	8003280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800329a:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a6:	d112      	bne.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e011      	b.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032ac:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032b2:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032bc:	e007      	b.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032be:	4b07      	ldr	r3, [pc, #28]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032c6:	4a05      	ldr	r2, [pc, #20]	@ (80032dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40007000 	.word	0x40007000
 80032e0:	20000000 	.word	0x20000000
 80032e4:	431bde83 	.word	0x431bde83

080032e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a04      	ldr	r2, [pc, #16]	@ (8003304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f6:	6093      	str	r3, [r2, #8]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40007000 	.word	0x40007000

08003308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e2fe      	b.n	8003918 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d075      	beq.n	8003412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003326:	4b97      	ldr	r3, [pc, #604]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003330:	4b94      	ldr	r3, [pc, #592]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	d102      	bne.n	8003346 <HAL_RCC_OscConfig+0x3e>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d002      	beq.n	800334c <HAL_RCC_OscConfig+0x44>
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d10b      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b8d      	ldr	r3, [pc, #564]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05b      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d157      	bne.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e2d9      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x74>
 800336e:	4b85      	ldr	r3, [pc, #532]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a84      	ldr	r2, [pc, #528]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b7f      	ldr	r3, [pc, #508]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7e      	ldr	r2, [pc, #504]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b7c      	ldr	r3, [pc, #496]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a7b      	ldr	r2, [pc, #492]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 80033a0:	4b78      	ldr	r3, [pc, #480]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a77      	ldr	r2, [pc, #476]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b75      	ldr	r3, [pc, #468]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a74      	ldr	r2, [pc, #464]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fd fc48 	bl	8000c54 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fd fc44 	bl	8000c54 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	@ 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e29e      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033da:	4b6a      	ldr	r3, [pc, #424]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fd fc34 	bl	8000c54 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fd fc30 	bl	8000c54 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	@ 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e28a      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003402:	4b60      	ldr	r3, [pc, #384]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d075      	beq.n	800350a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341e:	4b59      	ldr	r3, [pc, #356]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003428:	4b56      	ldr	r3, [pc, #344]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	d102      	bne.n	800343e <HAL_RCC_OscConfig+0x136>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d002      	beq.n	8003444 <HAL_RCC_OscConfig+0x13c>
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d11f      	bne.n	8003484 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003444:	4b4f      	ldr	r3, [pc, #316]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_OscConfig+0x154>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e25d      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345c:	4b49      	ldr	r3, [pc, #292]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	4946      	ldr	r1, [pc, #280]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003470:	4b45      	ldr	r3, [pc, #276]	@ (8003588 <HAL_RCC_OscConfig+0x280>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd fba1 	bl	8000bbc <HAL_InitTick>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d043      	beq.n	8003508 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e249      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d023      	beq.n	80034d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800348c:	4b3d      	ldr	r3, [pc, #244]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a3c      	ldr	r2, [pc, #240]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fd fbdc 	bl	8000c54 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a0:	f7fd fbd8 	bl	8000c54 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e232      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b2:	4b34      	ldr	r3, [pc, #208]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034be:	4b31      	ldr	r3, [pc, #196]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	061b      	lsls	r3, r3, #24
 80034cc:	492d      	ldr	r1, [pc, #180]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
 80034d2:	e01a      	b.n	800350a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fd fbb8 	bl	8000c54 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e8:	f7fd fbb4 	bl	8000c54 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e20e      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034fa:	4b22      	ldr	r3, [pc, #136]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x1e0>
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003508:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d041      	beq.n	800359a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01c      	beq.n	8003558 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351e:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003524:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fd fb91 	bl	8000c54 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003536:	f7fd fb8d 	bl	8000c54 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1e7      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003548:	4b0e      	ldr	r3, [pc, #56]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ef      	beq.n	8003536 <HAL_RCC_OscConfig+0x22e>
 8003556:	e020      	b.n	800359a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003558:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 800355a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800355e:	4a09      	ldr	r2, [pc, #36]	@ (8003584 <HAL_RCC_OscConfig+0x27c>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fd fb74 	bl	8000c54 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800356e:	e00d      	b.n	800358c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003570:	f7fd fb70 	bl	8000c54 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d906      	bls.n	800358c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1ca      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800358c:	4b8c      	ldr	r3, [pc, #560]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800358e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1ea      	bne.n	8003570 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80a6 	beq.w	80036f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ac:	4b84      	ldr	r3, [pc, #528]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_OscConfig+0x2b4>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x2b6>
 80035bc:	2300      	movs	r3, #0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	4b7f      	ldr	r3, [pc, #508]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	4a7e      	ldr	r2, [pc, #504]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ce:	4b7c      	ldr	r3, [pc, #496]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035de:	4b79      	ldr	r3, [pc, #484]	@ (80037c4 <HAL_RCC_OscConfig+0x4bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d118      	bne.n	800361c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ea:	4b76      	ldr	r3, [pc, #472]	@ (80037c4 <HAL_RCC_OscConfig+0x4bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a75      	ldr	r2, [pc, #468]	@ (80037c4 <HAL_RCC_OscConfig+0x4bc>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f6:	f7fd fb2d 	bl	8000c54 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7fd fb29 	bl	8000c54 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e183      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003610:	4b6c      	ldr	r3, [pc, #432]	@ (80037c4 <HAL_RCC_OscConfig+0x4bc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d108      	bne.n	8003636 <HAL_RCC_OscConfig+0x32e>
 8003624:	4b66      	ldr	r3, [pc, #408]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	4a65      	ldr	r2, [pc, #404]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003634:	e024      	b.n	8003680 <HAL_RCC_OscConfig+0x378>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b05      	cmp	r3, #5
 800363c:	d110      	bne.n	8003660 <HAL_RCC_OscConfig+0x358>
 800363e:	4b60      	ldr	r3, [pc, #384]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003644:	4a5e      	ldr	r2, [pc, #376]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800364e:	4b5c      	ldr	r3, [pc, #368]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003654:	4a5a      	ldr	r2, [pc, #360]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800365e:	e00f      	b.n	8003680 <HAL_RCC_OscConfig+0x378>
 8003660:	4b57      	ldr	r3, [pc, #348]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003666:	4a56      	ldr	r2, [pc, #344]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003670:	4b53      	ldr	r3, [pc, #332]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003676:	4a52      	ldr	r2, [pc, #328]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d016      	beq.n	80036b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fd fae4 	bl	8000c54 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003690:	f7fd fae0 	bl	8000c54 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e138      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a6:	4b46      	ldr	r3, [pc, #280]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ed      	beq.n	8003690 <HAL_RCC_OscConfig+0x388>
 80036b4:	e015      	b.n	80036e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b6:	f7fd facd 	bl	8000c54 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fd fac9 	bl	8000c54 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e121      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d4:	4b3a      	ldr	r3, [pc, #232]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ed      	bne.n	80036be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e2:	7ffb      	ldrb	r3, [r7, #31]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e8:	4b35      	ldr	r3, [pc, #212]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ec:	4a34      	ldr	r2, [pc, #208]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80036ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d03c      	beq.n	800377a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01c      	beq.n	8003742 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003708:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800370a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800370e:	4a2c      	ldr	r2, [pc, #176]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fd fa9c 	bl	8000c54 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003720:	f7fd fa98 	bl	8000c54 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0f2      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003732:	4b23      	ldr	r3, [pc, #140]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003734:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ef      	beq.n	8003720 <HAL_RCC_OscConfig+0x418>
 8003740:	e01b      	b.n	800377a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003742:	4b1f      	ldr	r3, [pc, #124]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003744:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003748:	4a1d      	ldr	r2, [pc, #116]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fd fa7f 	bl	8000c54 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800375a:	f7fd fa7b 	bl	8000c54 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e0d5      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800376c:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800376e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ef      	bne.n	800375a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80c9 	beq.w	8003916 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003784:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b0c      	cmp	r3, #12
 800378e:	f000 8083 	beq.w	8003898 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d15e      	bne.n	8003858 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a08      	ldr	r2, [pc, #32]	@ (80037c0 <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fd fa55 	bl	8000c54 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ac:	e00c      	b.n	80037c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fd fa51 	bl	8000c54 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d905      	bls.n	80037c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e0ab      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c8:	4b55      	ldr	r3, [pc, #340]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ec      	bne.n	80037ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d4:	4b52      	ldr	r3, [pc, #328]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	4b52      	ldr	r3, [pc, #328]	@ (8003924 <HAL_RCC_OscConfig+0x61c>)
 80037da:	4013      	ands	r3, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6a11      	ldr	r1, [r2, #32]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037e4:	3a01      	subs	r2, #1
 80037e6:	0112      	lsls	r2, r2, #4
 80037e8:	4311      	orrs	r1, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80037ee:	0212      	lsls	r2, r2, #8
 80037f0:	4311      	orrs	r1, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80037f6:	0852      	lsrs	r2, r2, #1
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0552      	lsls	r2, r2, #21
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003802:	0852      	lsrs	r2, r2, #1
 8003804:	3a01      	subs	r2, #1
 8003806:	0652      	lsls	r2, r2, #25
 8003808:	4311      	orrs	r1, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800380e:	06d2      	lsls	r2, r2, #27
 8003810:	430a      	orrs	r2, r1
 8003812:	4943      	ldr	r1, [pc, #268]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 8003814:	4313      	orrs	r3, r2
 8003816:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003818:	4b41      	ldr	r3, [pc, #260]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a40      	ldr	r2, [pc, #256]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800381e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003822:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003824:	4b3e      	ldr	r3, [pc, #248]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a3d      	ldr	r2, [pc, #244]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800382e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fd fa10 	bl	8000c54 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fd fa0c 	bl	8000c54 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e066      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384a:	4b35      	ldr	r3, [pc, #212]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x530>
 8003856:	e05e      	b.n	8003916 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003858:	4b31      	ldr	r3, [pc, #196]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a30      	ldr	r2, [pc, #192]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800385e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fd f9f6 	bl	8000c54 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fd f9f2 	bl	8000c54 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e04c      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800387e:	4b28      	ldr	r3, [pc, #160]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800388a:	4b25      	ldr	r3, [pc, #148]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	4924      	ldr	r1, [pc, #144]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 8003890:	4b25      	ldr	r3, [pc, #148]	@ (8003928 <HAL_RCC_OscConfig+0x620>)
 8003892:	4013      	ands	r3, r2
 8003894:	60cb      	str	r3, [r1, #12]
 8003896:	e03e      	b.n	8003916 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e039      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003920 <HAL_RCC_OscConfig+0x618>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0203 	and.w	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d12c      	bne.n	8003912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	3b01      	subs	r3, #1
 80038c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d123      	bne.n	8003912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d11b      	bne.n	8003912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d113      	bne.n	8003912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	3b01      	subs	r3, #1
 80038f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d001      	beq.n	8003916 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3720      	adds	r7, #32
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	019f800c 	.word	0x019f800c
 8003928:	feeefffc 	.word	0xfeeefffc

0800392c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e11e      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	4b91      	ldr	r3, [pc, #580]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d910      	bls.n	8003974 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b8e      	ldr	r3, [pc, #568]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 020f 	bic.w	r2, r3, #15
 800395a:	498c      	ldr	r1, [pc, #560]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b8a      	ldr	r3, [pc, #552]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e106      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d073      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d129      	bne.n	80039dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003988:	4b81      	ldr	r3, [pc, #516]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0f4      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003998:	f000 f99e 	bl	8003cd8 <RCC_GetSysClockFreqFromPLLSource>
 800399c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4a7c      	ldr	r2, [pc, #496]	@ (8003b94 <HAL_RCC_ClockConfig+0x268>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d93f      	bls.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d033      	beq.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d12f      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039c6:	4b72      	ldr	r3, [pc, #456]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ce:	4a70      	ldr	r2, [pc, #448]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039d6:	2380      	movs	r3, #128	@ 0x80
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	e024      	b.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0c6      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f4:	4b66      	ldr	r3, [pc, #408]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0be      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a04:	f000 f8ce 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4a61      	ldr	r2, [pc, #388]	@ (8003b94 <HAL_RCC_ClockConfig+0x268>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d909      	bls.n	8003a26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a12:	4b5f      	ldr	r3, [pc, #380]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a22:	2380      	movs	r3, #128	@ 0x80
 8003a24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a26:	4b5a      	ldr	r3, [pc, #360]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f023 0203 	bic.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	4957      	ldr	r1, [pc, #348]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a38:	f7fd f90c 	bl	8000c54 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a40:	f7fd f908 	bl	8000c54 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e095      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	4b4e      	ldr	r3, [pc, #312]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 020c 	and.w	r2, r3, #12
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d1eb      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d023      	beq.n	8003abc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a80:	4b43      	ldr	r3, [pc, #268]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a42      	ldr	r2, [pc, #264]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a98:	4b3d      	ldr	r3, [pc, #244]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003aa0:	4a3b      	ldr	r2, [pc, #236]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003aa2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b39      	ldr	r3, [pc, #228]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4936      	ldr	r1, [pc, #216]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
 8003aba:	e008      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b80      	cmp	r3, #128	@ 0x80
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ac2:	4b33      	ldr	r3, [pc, #204]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	4a32      	ldr	r2, [pc, #200]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003ac8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003acc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ace:	4b2f      	ldr	r3, [pc, #188]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d21d      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003adc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 020f 	bic.w	r2, r3, #15
 8003ae4:	4929      	ldr	r1, [pc, #164]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003aec:	f7fd f8b2 	bl	8000c54 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7fd f8ae 	bl	8000c54 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e03b      	b.n	8003b82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <HAL_RCC_ClockConfig+0x260>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d1ed      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b24:	4b1a      	ldr	r3, [pc, #104]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4917      	ldr	r1, [pc, #92]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b42:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	490f      	ldr	r1, [pc, #60]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b56:	f000 f825 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <HAL_RCC_ClockConfig+0x264>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	490c      	ldr	r1, [pc, #48]	@ (8003b98 <HAL_RCC_ClockConfig+0x26c>)
 8003b68:	5ccb      	ldrb	r3, [r1, r3]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	4a0a      	ldr	r2, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x270>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <HAL_RCC_ClockConfig+0x274>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd f81e 	bl	8000bbc <HAL_InitTick>
 8003b80:	4603      	mov	r3, r0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40022000 	.word	0x40022000
 8003b90:	40021000 	.word	0x40021000
 8003b94:	04c4b400 	.word	0x04c4b400
 8003b98:	0800bc18 	.word	0x0800bc18
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	20000004 	.word	0x20000004

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003baa:	4b2c      	ldr	r3, [pc, #176]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d102      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	e047      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bbc:	4b27      	ldr	r3, [pc, #156]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d102      	bne.n	8003bce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bc8:	4b26      	ldr	r3, [pc, #152]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	e03e      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003bce:	4b23      	ldr	r3, [pc, #140]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b0c      	cmp	r3, #12
 8003bd8:	d136      	bne.n	8003c48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bda:	4b20      	ldr	r3, [pc, #128]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003be4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	4a16      	ldr	r2, [pc, #88]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c02:	68d2      	ldr	r2, [r2, #12]
 8003c04:	0a12      	lsrs	r2, r2, #8
 8003c06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	617b      	str	r3, [r7, #20]
      break;
 8003c10:	e00c      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c12:	4a13      	ldr	r2, [pc, #76]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	4a10      	ldr	r2, [pc, #64]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1c:	68d2      	ldr	r2, [r2, #12]
 8003c1e:	0a12      	lsrs	r2, r2, #8
 8003c20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]
      break;
 8003c2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	0e5b      	lsrs	r3, r3, #25
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	3301      	adds	r3, #1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	e001      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c4c:	693b      	ldr	r3, [r7, #16]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	00f42400 	.word	0x00f42400
 8003c64:	007a1200 	.word	0x007a1200

08003c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c6c:	4b03      	ldr	r3, [pc, #12]	@ (8003c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000

08003c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c84:	f7ff fff0 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4904      	ldr	r1, [pc, #16]	@ (8003ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	0800bc28 	.word	0x0800bc28

08003cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cb0:	f7ff ffda 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0adb      	lsrs	r3, r3, #11
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4904      	ldr	r1, [pc, #16]	@ (8003cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	0800bc28 	.word	0x0800bc28

08003cd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cde:	4b1e      	ldr	r3, [pc, #120]	@ (8003d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d10c      	bne.n	8003d16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cfc:	4a17      	ldr	r2, [pc, #92]	@ (8003d5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	4a14      	ldr	r2, [pc, #80]	@ (8003d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d06:	68d2      	ldr	r2, [r2, #12]
 8003d08:	0a12      	lsrs	r2, r2, #8
 8003d0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	617b      	str	r3, [r7, #20]
    break;
 8003d14:	e00c      	b.n	8003d30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d16:	4a12      	ldr	r2, [pc, #72]	@ (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d20:	68d2      	ldr	r2, [r2, #12]
 8003d22:	0a12      	lsrs	r2, r2, #8
 8003d24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
    break;
 8003d2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d30:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	0e5b      	lsrs	r3, r3, #25
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d4a:	687b      	ldr	r3, [r7, #4]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	007a1200 	.word	0x007a1200
 8003d60:	00f42400 	.word	0x00f42400

08003d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d70:	2300      	movs	r3, #0
 8003d72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8098 	beq.w	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d82:	2300      	movs	r3, #0
 8003d84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d86:	4b43      	ldr	r3, [pc, #268]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10d      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	4b40      	ldr	r3, [pc, #256]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	4a3f      	ldr	r2, [pc, #252]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003daa:	2301      	movs	r3, #1
 8003dac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dae:	4b3a      	ldr	r3, [pc, #232]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a39      	ldr	r2, [pc, #228]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dba:	f7fc ff4b 	bl	8000c54 <HAL_GetTick>
 8003dbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc0:	e009      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc2:	f7fc ff47 	bl	8000c54 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d902      	bls.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	74fb      	strb	r3, [r7, #19]
        break;
 8003dd4:	e005      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd6:	4b30      	ldr	r3, [pc, #192]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ef      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d159      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003de8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01e      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d019      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e04:	4b23      	ldr	r3, [pc, #140]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e10:	4b20      	ldr	r3, [pc, #128]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	4a1f      	ldr	r2, [pc, #124]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e20:	4b1c      	ldr	r3, [pc, #112]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e26:	4a1b      	ldr	r2, [pc, #108]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e30:	4a18      	ldr	r2, [pc, #96]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d016      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7fc ff07 	bl	8000c54 <HAL_GetTick>
 8003e46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e48:	e00b      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fc ff03 	bl	8000c54 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d902      	bls.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e60:	e006      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e62:	4b0c      	ldr	r3, [pc, #48]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ec      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e76:	4b07      	ldr	r3, [pc, #28]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e84:	4903      	ldr	r1, [pc, #12]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e8e:	7cfb      	ldrb	r3, [r7, #19]
 8003e90:	74bb      	strb	r3, [r7, #18]
 8003e92:	e005      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea0:	7c7b      	ldrb	r3, [r7, #17]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	4ba7      	ldr	r3, [pc, #668]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eaa:	4aa6      	ldr	r2, [pc, #664]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ebe:	4ba1      	ldr	r3, [pc, #644]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec4:	f023 0203 	bic.w	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	499d      	ldr	r1, [pc, #628]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee0:	4b98      	ldr	r3, [pc, #608]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee6:	f023 020c 	bic.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	4995      	ldr	r1, [pc, #596]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f02:	4b90      	ldr	r3, [pc, #576]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	498c      	ldr	r1, [pc, #560]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f24:	4b87      	ldr	r3, [pc, #540]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	4984      	ldr	r1, [pc, #528]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f46:	4b7f      	ldr	r3, [pc, #508]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	497b      	ldr	r1, [pc, #492]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f68:	4b76      	ldr	r3, [pc, #472]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	4973      	ldr	r1, [pc, #460]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	496a      	ldr	r1, [pc, #424]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fac:	4b65      	ldr	r3, [pc, #404]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4962      	ldr	r1, [pc, #392]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fce:	4b5d      	ldr	r3, [pc, #372]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	4959      	ldr	r1, [pc, #356]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ff0:	4b54      	ldr	r3, [pc, #336]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffe:	4951      	ldr	r1, [pc, #324]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400e:	2b00      	cmp	r3, #0
 8004010:	d015      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004012:	4b4c      	ldr	r3, [pc, #304]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004018:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	4948      	ldr	r1, [pc, #288]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004030:	d105      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004032:	4b44      	ldr	r3, [pc, #272]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	4a43      	ldr	r2, [pc, #268]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004038:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800403c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004046:	2b00      	cmp	r3, #0
 8004048:	d015      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800404a:	4b3e      	ldr	r3, [pc, #248]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004050:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004058:	493a      	ldr	r1, [pc, #232]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004068:	d105      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406a:	4b36      	ldr	r3, [pc, #216]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	4a35      	ldr	r2, [pc, #212]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004070:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004074:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d015      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004082:	4b30      	ldr	r3, [pc, #192]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004088:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004090:	492c      	ldr	r1, [pc, #176]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040a0:	d105      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a2:	4b28      	ldr	r3, [pc, #160]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	4a27      	ldr	r2, [pc, #156]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ac:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d015      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ba:	4b22      	ldr	r3, [pc, #136]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c8:	491e      	ldr	r1, [pc, #120]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040d8:	d105      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040da:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	4a19      	ldr	r2, [pc, #100]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040e4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d015      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040f2:	4b14      	ldr	r3, [pc, #80]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004100:	4910      	ldr	r1, [pc, #64]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004110:	d105      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004112:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	4a0b      	ldr	r2, [pc, #44]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800411c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d018      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004130:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004138:	4902      	ldr	r1, [pc, #8]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	e001      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004144:	40021000 	.word	0x40021000
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800414e:	d105      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004150:	4b21      	ldr	r3, [pc, #132]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4a20      	ldr	r2, [pc, #128]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800415a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d015      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	4918      	ldr	r1, [pc, #96]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004186:	d105      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4a12      	ldr	r2, [pc, #72]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800418e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004192:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80041a0:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80041a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ae:	490a      	ldr	r1, [pc, #40]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041be:	d105      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a04      	ldr	r2, [pc, #16]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80041c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e042      	b.n	8004274 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7fc fbfd 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2224      	movs	r2, #36	@ 0x24
 800420a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fb24 	bl	8004874 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f825 	bl	800427c <UART_SetConfig>
 8004232:	4603      	mov	r3, r0
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e01b      	b.n	8004274 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800424a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800425a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fba3 	bl	80049b8 <UART_CheckIdleState>
 8004272:	4603      	mov	r3, r0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800427c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004280:	b08c      	sub	sp, #48	@ 0x30
 8004282:	af00      	add	r7, sp, #0
 8004284:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	431a      	orrs	r2, r3
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	431a      	orrs	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4baa      	ldr	r3, [pc, #680]	@ (8004554 <UART_SetConfig+0x2d8>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a9f      	ldr	r2, [pc, #636]	@ (8004558 <UART_SetConfig+0x2dc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042e4:	4313      	orrs	r3, r2
 80042e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80042f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004306:	f023 010f 	bic.w	r1, r3, #15
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a90      	ldr	r2, [pc, #576]	@ (800455c <UART_SetConfig+0x2e0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d125      	bne.n	800436c <UART_SetConfig+0xf0>
 8004320:	4b8f      	ldr	r3, [pc, #572]	@ (8004560 <UART_SetConfig+0x2e4>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b03      	cmp	r3, #3
 800432c:	d81a      	bhi.n	8004364 <UART_SetConfig+0xe8>
 800432e:	a201      	add	r2, pc, #4	@ (adr r2, 8004334 <UART_SetConfig+0xb8>)
 8004330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004334:	08004345 	.word	0x08004345
 8004338:	08004355 	.word	0x08004355
 800433c:	0800434d 	.word	0x0800434d
 8004340:	0800435d 	.word	0x0800435d
 8004344:	2301      	movs	r3, #1
 8004346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800434a:	e116      	b.n	800457a <UART_SetConfig+0x2fe>
 800434c:	2302      	movs	r3, #2
 800434e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004352:	e112      	b.n	800457a <UART_SetConfig+0x2fe>
 8004354:	2304      	movs	r3, #4
 8004356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435a:	e10e      	b.n	800457a <UART_SetConfig+0x2fe>
 800435c:	2308      	movs	r3, #8
 800435e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004362:	e10a      	b.n	800457a <UART_SetConfig+0x2fe>
 8004364:	2310      	movs	r3, #16
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436a:	e106      	b.n	800457a <UART_SetConfig+0x2fe>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7c      	ldr	r2, [pc, #496]	@ (8004564 <UART_SetConfig+0x2e8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d138      	bne.n	80043e8 <UART_SetConfig+0x16c>
 8004376:	4b7a      	ldr	r3, [pc, #488]	@ (8004560 <UART_SetConfig+0x2e4>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b0c      	cmp	r3, #12
 8004382:	d82d      	bhi.n	80043e0 <UART_SetConfig+0x164>
 8004384:	a201      	add	r2, pc, #4	@ (adr r2, 800438c <UART_SetConfig+0x110>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	080043c1 	.word	0x080043c1
 8004390:	080043e1 	.word	0x080043e1
 8004394:	080043e1 	.word	0x080043e1
 8004398:	080043e1 	.word	0x080043e1
 800439c:	080043d1 	.word	0x080043d1
 80043a0:	080043e1 	.word	0x080043e1
 80043a4:	080043e1 	.word	0x080043e1
 80043a8:	080043e1 	.word	0x080043e1
 80043ac:	080043c9 	.word	0x080043c9
 80043b0:	080043e1 	.word	0x080043e1
 80043b4:	080043e1 	.word	0x080043e1
 80043b8:	080043e1 	.word	0x080043e1
 80043bc:	080043d9 	.word	0x080043d9
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c6:	e0d8      	b.n	800457a <UART_SetConfig+0x2fe>
 80043c8:	2302      	movs	r3, #2
 80043ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ce:	e0d4      	b.n	800457a <UART_SetConfig+0x2fe>
 80043d0:	2304      	movs	r3, #4
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d6:	e0d0      	b.n	800457a <UART_SetConfig+0x2fe>
 80043d8:	2308      	movs	r3, #8
 80043da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043de:	e0cc      	b.n	800457a <UART_SetConfig+0x2fe>
 80043e0:	2310      	movs	r3, #16
 80043e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043e6:	e0c8      	b.n	800457a <UART_SetConfig+0x2fe>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004568 <UART_SetConfig+0x2ec>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d125      	bne.n	800443e <UART_SetConfig+0x1c2>
 80043f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004560 <UART_SetConfig+0x2e4>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043fc:	2b30      	cmp	r3, #48	@ 0x30
 80043fe:	d016      	beq.n	800442e <UART_SetConfig+0x1b2>
 8004400:	2b30      	cmp	r3, #48	@ 0x30
 8004402:	d818      	bhi.n	8004436 <UART_SetConfig+0x1ba>
 8004404:	2b20      	cmp	r3, #32
 8004406:	d00a      	beq.n	800441e <UART_SetConfig+0x1a2>
 8004408:	2b20      	cmp	r3, #32
 800440a:	d814      	bhi.n	8004436 <UART_SetConfig+0x1ba>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <UART_SetConfig+0x19a>
 8004410:	2b10      	cmp	r3, #16
 8004412:	d008      	beq.n	8004426 <UART_SetConfig+0x1aa>
 8004414:	e00f      	b.n	8004436 <UART_SetConfig+0x1ba>
 8004416:	2300      	movs	r3, #0
 8004418:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441c:	e0ad      	b.n	800457a <UART_SetConfig+0x2fe>
 800441e:	2302      	movs	r3, #2
 8004420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004424:	e0a9      	b.n	800457a <UART_SetConfig+0x2fe>
 8004426:	2304      	movs	r3, #4
 8004428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442c:	e0a5      	b.n	800457a <UART_SetConfig+0x2fe>
 800442e:	2308      	movs	r3, #8
 8004430:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004434:	e0a1      	b.n	800457a <UART_SetConfig+0x2fe>
 8004436:	2310      	movs	r3, #16
 8004438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443c:	e09d      	b.n	800457a <UART_SetConfig+0x2fe>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a4a      	ldr	r2, [pc, #296]	@ (800456c <UART_SetConfig+0x2f0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d125      	bne.n	8004494 <UART_SetConfig+0x218>
 8004448:	4b45      	ldr	r3, [pc, #276]	@ (8004560 <UART_SetConfig+0x2e4>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004452:	2bc0      	cmp	r3, #192	@ 0xc0
 8004454:	d016      	beq.n	8004484 <UART_SetConfig+0x208>
 8004456:	2bc0      	cmp	r3, #192	@ 0xc0
 8004458:	d818      	bhi.n	800448c <UART_SetConfig+0x210>
 800445a:	2b80      	cmp	r3, #128	@ 0x80
 800445c:	d00a      	beq.n	8004474 <UART_SetConfig+0x1f8>
 800445e:	2b80      	cmp	r3, #128	@ 0x80
 8004460:	d814      	bhi.n	800448c <UART_SetConfig+0x210>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <UART_SetConfig+0x1f0>
 8004466:	2b40      	cmp	r3, #64	@ 0x40
 8004468:	d008      	beq.n	800447c <UART_SetConfig+0x200>
 800446a:	e00f      	b.n	800448c <UART_SetConfig+0x210>
 800446c:	2300      	movs	r3, #0
 800446e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004472:	e082      	b.n	800457a <UART_SetConfig+0x2fe>
 8004474:	2302      	movs	r3, #2
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447a:	e07e      	b.n	800457a <UART_SetConfig+0x2fe>
 800447c:	2304      	movs	r3, #4
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004482:	e07a      	b.n	800457a <UART_SetConfig+0x2fe>
 8004484:	2308      	movs	r3, #8
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448a:	e076      	b.n	800457a <UART_SetConfig+0x2fe>
 800448c:	2310      	movs	r3, #16
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004492:	e072      	b.n	800457a <UART_SetConfig+0x2fe>
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a35      	ldr	r2, [pc, #212]	@ (8004570 <UART_SetConfig+0x2f4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d12a      	bne.n	80044f4 <UART_SetConfig+0x278>
 800449e:	4b30      	ldr	r3, [pc, #192]	@ (8004560 <UART_SetConfig+0x2e4>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ac:	d01a      	beq.n	80044e4 <UART_SetConfig+0x268>
 80044ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044b2:	d81b      	bhi.n	80044ec <UART_SetConfig+0x270>
 80044b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044b8:	d00c      	beq.n	80044d4 <UART_SetConfig+0x258>
 80044ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044be:	d815      	bhi.n	80044ec <UART_SetConfig+0x270>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <UART_SetConfig+0x250>
 80044c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c8:	d008      	beq.n	80044dc <UART_SetConfig+0x260>
 80044ca:	e00f      	b.n	80044ec <UART_SetConfig+0x270>
 80044cc:	2300      	movs	r3, #0
 80044ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d2:	e052      	b.n	800457a <UART_SetConfig+0x2fe>
 80044d4:	2302      	movs	r3, #2
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044da:	e04e      	b.n	800457a <UART_SetConfig+0x2fe>
 80044dc:	2304      	movs	r3, #4
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e2:	e04a      	b.n	800457a <UART_SetConfig+0x2fe>
 80044e4:	2308      	movs	r3, #8
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ea:	e046      	b.n	800457a <UART_SetConfig+0x2fe>
 80044ec:	2310      	movs	r3, #16
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f2:	e042      	b.n	800457a <UART_SetConfig+0x2fe>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a17      	ldr	r2, [pc, #92]	@ (8004558 <UART_SetConfig+0x2dc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d13a      	bne.n	8004574 <UART_SetConfig+0x2f8>
 80044fe:	4b18      	ldr	r3, [pc, #96]	@ (8004560 <UART_SetConfig+0x2e4>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004508:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800450c:	d01a      	beq.n	8004544 <UART_SetConfig+0x2c8>
 800450e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004512:	d81b      	bhi.n	800454c <UART_SetConfig+0x2d0>
 8004514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004518:	d00c      	beq.n	8004534 <UART_SetConfig+0x2b8>
 800451a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800451e:	d815      	bhi.n	800454c <UART_SetConfig+0x2d0>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <UART_SetConfig+0x2b0>
 8004524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004528:	d008      	beq.n	800453c <UART_SetConfig+0x2c0>
 800452a:	e00f      	b.n	800454c <UART_SetConfig+0x2d0>
 800452c:	2300      	movs	r3, #0
 800452e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004532:	e022      	b.n	800457a <UART_SetConfig+0x2fe>
 8004534:	2302      	movs	r3, #2
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800453a:	e01e      	b.n	800457a <UART_SetConfig+0x2fe>
 800453c:	2304      	movs	r3, #4
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004542:	e01a      	b.n	800457a <UART_SetConfig+0x2fe>
 8004544:	2308      	movs	r3, #8
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800454a:	e016      	b.n	800457a <UART_SetConfig+0x2fe>
 800454c:	2310      	movs	r3, #16
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004552:	e012      	b.n	800457a <UART_SetConfig+0x2fe>
 8004554:	cfff69f3 	.word	0xcfff69f3
 8004558:	40008000 	.word	0x40008000
 800455c:	40013800 	.word	0x40013800
 8004560:	40021000 	.word	0x40021000
 8004564:	40004400 	.word	0x40004400
 8004568:	40004800 	.word	0x40004800
 800456c:	40004c00 	.word	0x40004c00
 8004570:	40005000 	.word	0x40005000
 8004574:	2310      	movs	r3, #16
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4aae      	ldr	r2, [pc, #696]	@ (8004838 <UART_SetConfig+0x5bc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	f040 8097 	bne.w	80046b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004586:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800458a:	2b08      	cmp	r3, #8
 800458c:	d823      	bhi.n	80045d6 <UART_SetConfig+0x35a>
 800458e:	a201      	add	r2, pc, #4	@ (adr r2, 8004594 <UART_SetConfig+0x318>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045b9 	.word	0x080045b9
 8004598:	080045d7 	.word	0x080045d7
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	080045c7 	.word	0x080045c7
 80045a8:	080045d7 	.word	0x080045d7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045d7 	.word	0x080045d7
 80045b4:	080045cf 	.word	0x080045cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b8:	f7ff fb62 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 80045bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045be:	e010      	b.n	80045e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c0:	4b9e      	ldr	r3, [pc, #632]	@ (800483c <UART_SetConfig+0x5c0>)
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045c4:	e00d      	b.n	80045e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c6:	f7ff faed 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 80045ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045cc:	e009      	b.n	80045e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045d4:	e005      	b.n	80045e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8130 	beq.w	800484a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	4a94      	ldr	r2, [pc, #592]	@ (8004840 <UART_SetConfig+0x5c4>)
 80045f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045f4:	461a      	mov	r2, r3
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	429a      	cmp	r2, r3
 800460c:	d305      	bcc.n	800461a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	429a      	cmp	r2, r3
 8004618:	d903      	bls.n	8004622 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004620:	e113      	b.n	800484a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	2200      	movs	r2, #0
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	60fa      	str	r2, [r7, #12]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	4a84      	ldr	r2, [pc, #528]	@ (8004840 <UART_SetConfig+0x5c4>)
 8004630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004634:	b29b      	uxth	r3, r3
 8004636:	2200      	movs	r2, #0
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004640:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004644:	f7fb fdec 	bl	8000220 <__aeabi_uldivmod>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	020b      	lsls	r3, r1, #8
 800465a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800465e:	0202      	lsls	r2, r0, #8
 8004660:	6979      	ldr	r1, [r7, #20]
 8004662:	6849      	ldr	r1, [r1, #4]
 8004664:	0849      	lsrs	r1, r1, #1
 8004666:	2000      	movs	r0, #0
 8004668:	460c      	mov	r4, r1
 800466a:	4605      	mov	r5, r0
 800466c:	eb12 0804 	adds.w	r8, r2, r4
 8004670:	eb43 0905 	adc.w	r9, r3, r5
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	469a      	mov	sl, r3
 800467c:	4693      	mov	fp, r2
 800467e:	4652      	mov	r2, sl
 8004680:	465b      	mov	r3, fp
 8004682:	4640      	mov	r0, r8
 8004684:	4649      	mov	r1, r9
 8004686:	f7fb fdcb 	bl	8000220 <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4613      	mov	r3, r2
 8004690:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004698:	d308      	bcc.n	80046ac <UART_SetConfig+0x430>
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046a0:	d204      	bcs.n	80046ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6a3a      	ldr	r2, [r7, #32]
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	e0ce      	b.n	800484a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046b2:	e0ca      	b.n	800484a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046bc:	d166      	bne.n	800478c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80046be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d827      	bhi.n	8004716 <UART_SetConfig+0x49a>
 80046c6:	a201      	add	r2, pc, #4	@ (adr r2, 80046cc <UART_SetConfig+0x450>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	080046f9 	.word	0x080046f9
 80046d4:	08004701 	.word	0x08004701
 80046d8:	08004717 	.word	0x08004717
 80046dc:	08004707 	.word	0x08004707
 80046e0:	08004717 	.word	0x08004717
 80046e4:	08004717 	.word	0x08004717
 80046e8:	08004717 	.word	0x08004717
 80046ec:	0800470f 	.word	0x0800470f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7ff fac6 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 80046f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046f6:	e014      	b.n	8004722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f8:	f7ff fad8 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 80046fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046fe:	e010      	b.n	8004722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004700:	4b4e      	ldr	r3, [pc, #312]	@ (800483c <UART_SetConfig+0x5c0>)
 8004702:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004704:	e00d      	b.n	8004722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004706:	f7ff fa4d 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 800470a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800470c:	e009      	b.n	8004722 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004714:	e005      	b.n	8004722 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004720:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8090 	beq.w	800484a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	4a44      	ldr	r2, [pc, #272]	@ (8004840 <UART_SetConfig+0x5c4>)
 8004730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004734:	461a      	mov	r2, r3
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	fbb3 f3f2 	udiv	r3, r3, r2
 800473c:	005a      	lsls	r2, r3, #1
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	441a      	add	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	fbb2 f3f3 	udiv	r3, r2, r3
 800474e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	2b0f      	cmp	r3, #15
 8004754:	d916      	bls.n	8004784 <UART_SetConfig+0x508>
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800475c:	d212      	bcs.n	8004784 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f023 030f 	bic.w	r3, r3, #15
 8004766:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	b29b      	uxth	r3, r3
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	b29a      	uxth	r2, r3
 8004774:	8bfb      	ldrh	r3, [r7, #30]
 8004776:	4313      	orrs	r3, r2
 8004778:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	8bfa      	ldrh	r2, [r7, #30]
 8004780:	60da      	str	r2, [r3, #12]
 8004782:	e062      	b.n	800484a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800478a:	e05e      	b.n	800484a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800478c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004790:	2b08      	cmp	r3, #8
 8004792:	d828      	bhi.n	80047e6 <UART_SetConfig+0x56a>
 8004794:	a201      	add	r2, pc, #4	@ (adr r2, 800479c <UART_SetConfig+0x520>)
 8004796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479a:	bf00      	nop
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	080047e7 	.word	0x080047e7
 80047ac:	080047d7 	.word	0x080047d7
 80047b0:	080047e7 	.word	0x080047e7
 80047b4:	080047e7 	.word	0x080047e7
 80047b8:	080047e7 	.word	0x080047e7
 80047bc:	080047df 	.word	0x080047df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c0:	f7ff fa5e 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 80047c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047c6:	e014      	b.n	80047f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047c8:	f7ff fa70 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 80047cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047ce:	e010      	b.n	80047f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d0:	4b1a      	ldr	r3, [pc, #104]	@ (800483c <UART_SetConfig+0x5c0>)
 80047d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047d4:	e00d      	b.n	80047f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d6:	f7ff f9e5 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 80047da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047dc:	e009      	b.n	80047f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047e4:	e005      	b.n	80047f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047f0:	bf00      	nop
    }

    if (pclk != 0U)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d028      	beq.n	800484a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	4a10      	ldr	r2, [pc, #64]	@ (8004840 <UART_SetConfig+0x5c4>)
 80047fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004802:	461a      	mov	r2, r3
 8004804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004806:	fbb3 f2f2 	udiv	r2, r3, r2
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	441a      	add	r2, r3
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	fbb2 f3f3 	udiv	r3, r2, r3
 800481a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	2b0f      	cmp	r3, #15
 8004820:	d910      	bls.n	8004844 <UART_SetConfig+0x5c8>
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004828:	d20c      	bcs.n	8004844 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	b29a      	uxth	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60da      	str	r2, [r3, #12]
 8004834:	e009      	b.n	800484a <UART_SetConfig+0x5ce>
 8004836:	bf00      	nop
 8004838:	40008000 	.word	0x40008000
 800483c:	00f42400 	.word	0x00f42400
 8004840:	0800bc30 	.word	0x0800bc30
      }
      else
      {
        ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2201      	movs	r2, #1
 800484e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2201      	movs	r2, #1
 8004856:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2200      	movs	r2, #0
 8004864:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004866:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800486a:	4618      	mov	r0, r3
 800486c:	3730      	adds	r7, #48	@ 0x30
 800486e:	46bd      	mov	sp, r7
 8004870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01a      	beq.n	800498a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004972:	d10a      	bne.n	800498a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b098      	sub	sp, #96	@ 0x60
 80049bc:	af02      	add	r7, sp, #8
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c8:	f7fc f944 	bl	8000c54 <HAL_GetTick>
 80049cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d12f      	bne.n	8004a3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e4:	2200      	movs	r2, #0
 80049e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f88e 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d022      	beq.n	8004a3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a16:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e6      	bne.n	80049f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e063      	b.n	8004b04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d149      	bne.n	8004ade <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a52:	2200      	movs	r2, #0
 8004a54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f857 	bl	8004b0c <UART_WaitOnFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d03c      	beq.n	8004ade <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	623b      	str	r3, [r7, #32]
   return(result);
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e6      	bne.n	8004a64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ab6:	61fa      	str	r2, [r7, #28]
 8004ab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	69b9      	ldr	r1, [r7, #24]
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e5      	bne.n	8004a96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e012      	b.n	8004b04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3758      	adds	r7, #88	@ 0x58
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1c:	e04f      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d04b      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fc f895 	bl	8000c54 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e04e      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d037      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b80      	cmp	r3, #128	@ 0x80
 8004b52:	d034      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b40      	cmp	r3, #64	@ 0x40
 8004b58:	d031      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d110      	bne.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f838 	bl	8004be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2208      	movs	r2, #8
 8004b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e029      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b98:	d111      	bne.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f81e 	bl	8004be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e00f      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0a0      	beq.n	8004b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b095      	sub	sp, #84	@ 0x54
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e6      	bne.n	8004bee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3308      	adds	r3, #8
 8004c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3308      	adds	r3, #8
 8004c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e3      	bne.n	8004c20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d118      	bne.n	8004c92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f023 0310 	bic.w	r3, r3, #16
 8004c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c7e:	61bb      	str	r3, [r7, #24]
 8004c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6979      	ldr	r1, [r7, #20]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e6      	bne.n	8004c60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004ca6:	bf00      	nop
 8004ca8:	3754      	adds	r7, #84	@ 0x54
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e027      	b.n	8004d18 <HAL_UARTEx_DisableFifoMode+0x66>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2224      	movs	r2, #36	@ 0x24
 8004cd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004cf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e02d      	b.n	8004d98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2224      	movs	r2, #36	@ 0x24
 8004d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f84f 	bl	8004e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e02d      	b.n	8004e14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2224      	movs	r2, #36	@ 0x24
 8004dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f811 	bl	8004e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d108      	bne.n	8004e3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e3c:	e031      	b.n	8004ea2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e3e:	2308      	movs	r3, #8
 8004e40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e42:	2308      	movs	r3, #8
 8004e44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	0e5b      	lsrs	r3, r3, #25
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	0f5b      	lsrs	r3, r3, #29
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e66:	7bbb      	ldrb	r3, [r7, #14]
 8004e68:	7b3a      	ldrb	r2, [r7, #12]
 8004e6a:	4911      	ldr	r1, [pc, #68]	@ (8004eb0 <UARTEx_SetNbDataToProcess+0x94>)
 8004e6c:	5c8a      	ldrb	r2, [r1, r2]
 8004e6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e72:	7b3a      	ldrb	r2, [r7, #12]
 8004e74:	490f      	ldr	r1, [pc, #60]	@ (8004eb4 <UARTEx_SetNbDataToProcess+0x98>)
 8004e76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e78:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	7b7a      	ldrb	r2, [r7, #13]
 8004e88:	4909      	ldr	r1, [pc, #36]	@ (8004eb0 <UARTEx_SetNbDataToProcess+0x94>)
 8004e8a:	5c8a      	ldrb	r2, [r1, r2]
 8004e8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e90:	7b7a      	ldrb	r2, [r7, #13]
 8004e92:	4908      	ldr	r1, [pc, #32]	@ (8004eb4 <UARTEx_SetNbDataToProcess+0x98>)
 8004e94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e96:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004ea2:	bf00      	nop
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	0800bc48 	.word	0x0800bc48
 8004eb4:	0800bc50 	.word	0x0800bc50

08004eb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ec8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004ecc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b085      	sub	sp, #20
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004eee:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004ef2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	43db      	mvns	r3, r3
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	4013      	ands	r3, r2
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	1d3b      	adds	r3, r7, #4
 8004f26:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b0a7      	sub	sp, #156	@ 0x9c
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	78db      	ldrb	r3, [r3, #3]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d81f      	bhi.n	8004fca <USB_ActivateEndpoint+0x72>
 8004f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f90 <USB_ActivateEndpoint+0x38>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fa1 	.word	0x08004fa1
 8004f94:	08004fbd 	.word	0x08004fbd
 8004f98:	08004fd3 	.word	0x08004fd3
 8004f9c:	08004faf 	.word	0x08004faf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004fa0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004fa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fa8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004fac:	e012      	b.n	8004fd4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004fae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004fb2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004fb6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004fba:	e00b      	b.n	8004fd4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004fbc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004fc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fc4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004fc8:	e004      	b.n	8004fd4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8004fd0:	e000      	b.n	8004fd4 <USB_ActivateEndpoint+0x7c>
      break;
 8004fd2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	b21b      	sxth	r3, r3
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	b21a      	sxth	r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b21b      	sxth	r3, r3
 8005016:	4313      	orrs	r3, r2
 8005018:	b21b      	sxth	r3, r3
 800501a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800502c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800503c:	b29b      	uxth	r3, r3
 800503e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	7b1b      	ldrb	r3, [r3, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f040 8180 	bne.w	800534a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8084 	beq.w	800515c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	61bb      	str	r3, [r7, #24]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	4413      	add	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	00da      	lsls	r2, r3, #3
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	88db      	ldrh	r3, [r3, #6]
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	b29b      	uxth	r3, r3
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	827b      	strh	r3, [r7, #18]
 8005096:	8a7b      	ldrh	r3, [r7, #18]
 8005098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01b      	beq.n	80050d8 <USB_ActivateEndpoint+0x180>
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b6:	823b      	strh	r3, [r7, #16]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	441a      	add	r2, r3
 80050c2:	8a3b      	ldrh	r3, [r7, #16]
 80050c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	78db      	ldrb	r3, [r3, #3]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d020      	beq.n	8005122 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050f6:	81bb      	strh	r3, [r7, #12]
 80050f8:	89bb      	ldrh	r3, [r7, #12]
 80050fa:	f083 0320 	eor.w	r3, r3, #32
 80050fe:	81bb      	strh	r3, [r7, #12]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	441a      	add	r2, r3
 800510a:	89bb      	ldrh	r3, [r7, #12]
 800510c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800511c:	b29b      	uxth	r3, r3
 800511e:	8013      	strh	r3, [r2, #0]
 8005120:	e3f9      	b.n	8005916 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005138:	81fb      	strh	r3, [r7, #14]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	89fb      	ldrh	r3, [r7, #14]
 8005146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800514a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800514e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005156:	b29b      	uxth	r3, r3
 8005158:	8013      	strh	r3, [r2, #0]
 800515a:	e3dc      	b.n	8005916 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005166:	b29b      	uxth	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516c:	4413      	add	r3, r2
 800516e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	00da      	lsls	r2, r3, #3
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	4413      	add	r3, r2
 800517a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	88db      	ldrh	r3, [r3, #6]
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	b29b      	uxth	r3, r3
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800519a:	b29b      	uxth	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a0:	4413      	add	r3, r2
 80051a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	00da      	lsls	r2, r3, #3
 80051aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ac:	4413      	add	r3, r2
 80051ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80051b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051be:	b29a      	uxth	r2, r3
 80051c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c2:	801a      	strh	r2, [r3, #0]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <USB_ActivateEndpoint+0x28a>
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	801a      	strh	r2, [r3, #0]
 80051e0:	e041      	b.n	8005266 <USB_ActivateEndpoint+0x30e>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80051e8:	d81c      	bhi.n	8005224 <USB_ActivateEndpoint+0x2cc>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	085b      	lsrs	r3, r3, #1
 80051f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d004      	beq.n	800520a <USB_ActivateEndpoint+0x2b2>
 8005200:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005204:	3301      	adds	r3, #1
 8005206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29a      	uxth	r2, r3
 8005210:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005214:	b29b      	uxth	r3, r3
 8005216:	029b      	lsls	r3, r3, #10
 8005218:	b29b      	uxth	r3, r3
 800521a:	4313      	orrs	r3, r2
 800521c:	b29a      	uxth	r2, r3
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	e020      	b.n	8005266 <USB_ActivateEndpoint+0x30e>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <USB_ActivateEndpoint+0x2ec>
 800523a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800523e:	3b01      	subs	r3, #1
 8005240:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29a      	uxth	r2, r3
 800524a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800524e:	b29b      	uxth	r3, r3
 8005250:	029b      	lsls	r3, r3, #10
 8005252:	b29b      	uxth	r3, r3
 8005254:	4313      	orrs	r3, r2
 8005256:	b29b      	uxth	r3, r3
 8005258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005260:	b29a      	uxth	r2, r3
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005274:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01b      	beq.n	80052b6 <USB_ActivateEndpoint+0x35e>
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005294:	843b      	strh	r3, [r7, #32]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	441a      	add	r2, r3
 80052a0:	8c3b      	ldrh	r3, [r7, #32]
 80052a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d124      	bne.n	8005308 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d4:	83bb      	strh	r3, [r7, #28]
 80052d6:	8bbb      	ldrh	r3, [r7, #28]
 80052d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80052dc:	83bb      	strh	r3, [r7, #28]
 80052de:	8bbb      	ldrh	r3, [r7, #28]
 80052e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80052e4:	83bb      	strh	r3, [r7, #28]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	441a      	add	r2, r3
 80052f0:	8bbb      	ldrh	r3, [r7, #28]
 80052f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005302:	b29b      	uxth	r3, r3
 8005304:	8013      	strh	r3, [r2, #0]
 8005306:	e306      	b.n	8005916 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800531a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531e:	83fb      	strh	r3, [r7, #30]
 8005320:	8bfb      	ldrh	r3, [r7, #30]
 8005322:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005326:	83fb      	strh	r3, [r7, #30]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	441a      	add	r2, r3
 8005332:	8bfb      	ldrh	r3, [r7, #30]
 8005334:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005338:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800533c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005344:	b29b      	uxth	r3, r3
 8005346:	8013      	strh	r3, [r2, #0]
 8005348:	e2e5      	b.n	8005916 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	78db      	ldrb	r3, [r3, #3]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d11e      	bne.n	8005390 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005368:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800537a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800537e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005382:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800538a:	b29b      	uxth	r3, r3
 800538c:	8013      	strh	r3, [r2, #0]
 800538e:	e01d      	b.n	80053cc <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80053a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	441a      	add	r2, r3
 80053b4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80053b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053dc:	4413      	add	r3, r2
 80053de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	00da      	lsls	r2, r3, #3
 80053e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	891b      	ldrh	r3, [r3, #8]
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	677b      	str	r3, [r7, #116]	@ 0x74
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800540a:	b29b      	uxth	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005410:	4413      	add	r3, r2
 8005412:	677b      	str	r3, [r7, #116]	@ 0x74
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	00da      	lsls	r2, r3, #3
 800541a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800541c:	4413      	add	r3, r2
 800541e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005422:	673b      	str	r3, [r7, #112]	@ 0x70
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	895b      	ldrh	r3, [r3, #10]
 8005428:	085b      	lsrs	r3, r3, #1
 800542a:	b29b      	uxth	r3, r3
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005432:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f040 81af 	bne.w	800579c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800544e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8005452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01d      	beq.n	8005496 <USB_ActivateEndpoint+0x53e>
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800546c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005470:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800548a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800548e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80054a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80054aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01d      	beq.n	80054ee <USB_ActivateEndpoint+0x596>
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80054da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d16b      	bne.n	80055ce <USB_ActivateEndpoint+0x676>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005500:	b29b      	uxth	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005506:	4413      	add	r3, r2
 8005508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	00da      	lsls	r2, r3, #3
 8005510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005512:	4413      	add	r3, r2
 8005514:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800551a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005524:	b29a      	uxth	r2, r3
 8005526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005528:	801a      	strh	r2, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <USB_ActivateEndpoint+0x5f0>
 8005532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800553c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005540:	b29a      	uxth	r2, r3
 8005542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	e05d      	b.n	8005604 <USB_ActivateEndpoint+0x6ac>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2b3e      	cmp	r3, #62	@ 0x3e
 800554e:	d81c      	bhi.n	800558a <USB_ActivateEndpoint+0x632>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <USB_ActivateEndpoint+0x618>
 8005566:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800556a:	3301      	adds	r3, #1
 800556c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29a      	uxth	r2, r3
 8005576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800557a:	b29b      	uxth	r3, r3
 800557c:	029b      	lsls	r3, r3, #10
 800557e:	b29b      	uxth	r3, r3
 8005580:	4313      	orrs	r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e03c      	b.n	8005604 <USB_ActivateEndpoint+0x6ac>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2b00      	cmp	r3, #0
 800559e:	d104      	bne.n	80055aa <USB_ActivateEndpoint+0x652>
 80055a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055a4:	3b01      	subs	r3, #1
 80055a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	029b      	lsls	r3, r3, #10
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	4313      	orrs	r3, r2
 80055bc:	b29b      	uxth	r3, r3
 80055be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	e01a      	b.n	8005604 <USB_ActivateEndpoint+0x6ac>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	785b      	ldrb	r3, [r3, #1]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d116      	bne.n	8005604 <USB_ActivateEndpoint+0x6ac>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e6:	4413      	add	r3, r2
 80055e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	00da      	lsls	r2, r3, #3
 80055f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f2:	4413      	add	r3, r2
 80055f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	b29a      	uxth	r2, r3
 8005600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005602:	801a      	strh	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	647b      	str	r3, [r7, #68]	@ 0x44
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d16b      	bne.n	80056e8 <USB_ActivateEndpoint+0x790>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800561a:	b29b      	uxth	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005620:	4413      	add	r3, r2
 8005622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	00da      	lsls	r2, r3, #3
 800562a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800562c:	4413      	add	r3, r2
 800562e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005632:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800563e:	b29a      	uxth	r2, r3
 8005640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <USB_ActivateEndpoint+0x70a>
 800564c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565a:	b29a      	uxth	r2, r3
 800565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e05b      	b.n	800571a <USB_ActivateEndpoint+0x7c2>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b3e      	cmp	r3, #62	@ 0x3e
 8005668:	d81c      	bhi.n	80056a4 <USB_ActivateEndpoint+0x74c>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <USB_ActivateEndpoint+0x732>
 8005680:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005684:	3301      	adds	r3, #1
 8005686:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800568a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29a      	uxth	r2, r3
 8005690:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005694:	b29b      	uxth	r3, r3
 8005696:	029b      	lsls	r3, r3, #10
 8005698:	b29b      	uxth	r3, r3
 800569a:	4313      	orrs	r3, r2
 800569c:	b29a      	uxth	r2, r3
 800569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	e03a      	b.n	800571a <USB_ActivateEndpoint+0x7c2>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <USB_ActivateEndpoint+0x76c>
 80056ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056be:	3b01      	subs	r3, #1
 80056c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	029b      	lsls	r3, r3, #10
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	4313      	orrs	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e018      	b.n	800571a <USB_ActivateEndpoint+0x7c2>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d114      	bne.n	800571a <USB_ActivateEndpoint+0x7c2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056fc:	4413      	add	r3, r2
 80056fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	00da      	lsls	r2, r3, #3
 8005706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005708:	4413      	add	r3, r2
 800570a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800570e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	b29a      	uxth	r2, r3
 8005716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005718:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800572c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005730:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005732:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005734:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005738:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800573a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800573c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005740:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	441a      	add	r2, r3
 800574c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800574e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800575a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800575e:	b29b      	uxth	r3, r3
 8005760:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005778:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	441a      	add	r2, r3
 8005784:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800578a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800578e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005796:	b29b      	uxth	r3, r3
 8005798:	8013      	strh	r3, [r2, #0]
 800579a:	e0bc      	b.n	8005916 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80057ac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80057b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01d      	beq.n	80057f4 <USB_ActivateEndpoint+0x89c>
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	441a      	add	r2, r3
 80057dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8005804:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01d      	beq.n	800584c <USB_ActivateEndpoint+0x8f4>
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005826:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8005838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800583c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005844:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005848:	b29b      	uxth	r3, r3
 800584a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	78db      	ldrb	r3, [r3, #3]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d024      	beq.n	800589e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29b      	uxth	r3, r3
 8005862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800586a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800586e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005872:	f083 0320 	eor.w	r3, r3, #32
 8005876:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	441a      	add	r2, r3
 8005884:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800588c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005898:	b29b      	uxth	r3, r3
 800589a:	8013      	strh	r3, [r2, #0]
 800589c:	e01d      	b.n	80058da <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80058c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800590a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800590e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005912:	b29b      	uxth	r3, r3
 8005914:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005916:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800591a:	4618      	mov	r0, r3
 800591c:	379c      	adds	r7, #156	@ 0x9c
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop

08005928 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005928:	b480      	push	{r7}
 800592a:	b08d      	sub	sp, #52	@ 0x34
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	7b1b      	ldrb	r3, [r3, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f040 808e 	bne.w	8005a58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d044      	beq.n	80059ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	81bb      	strh	r3, [r7, #12]
 8005952:	89bb      	ldrh	r3, [r7, #12]
 8005954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01b      	beq.n	8005994 <USB_DeactivateEndpoint+0x6c>
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800596e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005972:	817b      	strh	r3, [r7, #10]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	441a      	add	r2, r3
 800597e:	897b      	ldrh	r3, [r7, #10]
 8005980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005988:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800598c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005990:	b29b      	uxth	r3, r3
 8005992:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059aa:	813b      	strh	r3, [r7, #8]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	893b      	ldrh	r3, [r7, #8]
 80059b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	8013      	strh	r3, [r2, #0]
 80059cc:	e192      	b.n	8005cf4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	827b      	strh	r3, [r7, #18]
 80059dc:	8a7b      	ldrh	r3, [r7, #18]
 80059de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01b      	beq.n	8005a1e <USB_DeactivateEndpoint+0xf6>
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fc:	823b      	strh	r3, [r7, #16]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	441a      	add	r2, r3
 8005a08:	8a3b      	ldrh	r3, [r7, #16]
 8005a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a34:	81fb      	strh	r3, [r7, #14]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	441a      	add	r2, r3
 8005a40:	89fb      	ldrh	r3, [r7, #14]
 8005a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	8013      	strh	r3, [r2, #0]
 8005a56:	e14d      	b.n	8005cf4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 80a5 	bne.w	8005bac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	843b      	strh	r3, [r7, #32]
 8005a70:	8c3b      	ldrh	r3, [r7, #32]
 8005a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01b      	beq.n	8005ab2 <USB_DeactivateEndpoint+0x18a>
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a90:	83fb      	strh	r3, [r7, #30]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	441a      	add	r2, r3
 8005a9c:	8bfb      	ldrh	r3, [r7, #30]
 8005a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	83bb      	strh	r3, [r7, #28]
 8005ac0:	8bbb      	ldrh	r3, [r7, #28]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01b      	beq.n	8005b02 <USB_DeactivateEndpoint+0x1da>
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae0:	837b      	strh	r3, [r7, #26]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	441a      	add	r2, r3
 8005aec:	8b7b      	ldrh	r3, [r7, #26]
 8005aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005afa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b18:	833b      	strh	r3, [r7, #24]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	441a      	add	r2, r3
 8005b24:	8b3b      	ldrh	r3, [r7, #24]
 8005b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b50:	82fb      	strh	r3, [r7, #22]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	441a      	add	r2, r3
 8005b5c:	8afb      	ldrh	r3, [r7, #22]
 8005b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b88:	82bb      	strh	r3, [r7, #20]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	441a      	add	r2, r3
 8005b94:	8abb      	ldrh	r3, [r7, #20]
 8005b96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	8013      	strh	r3, [r2, #0]
 8005baa:	e0a3      	b.n	8005cf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005bba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01b      	beq.n	8005bfc <USB_DeactivateEndpoint+0x2d4>
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bda:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	441a      	add	r2, r3
 8005be6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005c0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01b      	beq.n	8005c4c <USB_DeactivateEndpoint+0x324>
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	441a      	add	r2, r3
 8005c36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c62:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	441a      	add	r2, r3
 8005c6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3734      	adds	r7, #52	@ 0x34
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b0ac      	sub	sp, #176	@ 0xb0
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	f040 84ca 	bne.w	80066aa <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d904      	bls.n	8005d2c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d2a:	e003      	b.n	8005d34 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	7b1b      	ldrb	r3, [r3, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d122      	bne.n	8005d82 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	6959      	ldr	r1, [r3, #20]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	88da      	ldrh	r2, [r3, #6]
 8005d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 febd 	bl	8006aca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	4413      	add	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	00da      	lsls	r2, r3, #3
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	f000 bc6f 	b.w	8006660 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	78db      	ldrb	r3, [r3, #3]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	f040 831e 	bne.w	80063c8 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	6a1a      	ldr	r2, [r3, #32]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	f240 82cf 	bls.w	8006338 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	441a      	add	r2, r3
 8005dbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	6a1a      	ldr	r2, [r3, #32]
 8005dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dde:	1ad2      	subs	r2, r2, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 814f 	beq.w	800609a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d16b      	bne.n	8005ee0 <USB_EPStartXfer+0x1de>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e18:	4413      	add	r3, r2
 8005e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	00da      	lsls	r2, r3, #3
 8005e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e24:	4413      	add	r3, r2
 8005e26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <USB_EPStartXfer+0x158>
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	e05b      	b.n	8005f12 <USB_EPStartXfer+0x210>
 8005e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e60:	d81c      	bhi.n	8005e9c <USB_EPStartXfer+0x19a>
 8005e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <USB_EPStartXfer+0x180>
 8005e78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	029b      	lsls	r3, r3, #10
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	4313      	orrs	r3, r2
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	801a      	strh	r2, [r3, #0]
 8005e9a:	e03a      	b.n	8005f12 <USB_EPStartXfer+0x210>
 8005e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d104      	bne.n	8005ebc <USB_EPStartXfer+0x1ba>
 8005eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	029b      	lsls	r3, r3, #10
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	e018      	b.n	8005f12 <USB_EPStartXfer+0x210>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d114      	bne.n	8005f12 <USB_EPStartXfer+0x210>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef4:	4413      	add	r3, r2
 8005ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	00da      	lsls	r2, r3, #3
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	4413      	add	r3, r2
 8005f02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	895b      	ldrh	r3, [r3, #10]
 8005f16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6959      	ldr	r1, [r3, #20]
 8005f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fdce 	bl	8006aca <USB_WritePMA>
            ep->xfer_buff += len;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	695a      	ldr	r2, [r3, #20]
 8005f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f36:	441a      	add	r2, r3
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	6a1a      	ldr	r2, [r3, #32]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d907      	bls.n	8005f58 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	6a1a      	ldr	r2, [r3, #32]
 8005f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f50:	1ad2      	subs	r2, r2, r3
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	621a      	str	r2, [r3, #32]
 8005f56:	e006      	b.n	8005f66 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d16b      	bne.n	8006046 <USB_EPStartXfer+0x344>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	4413      	add	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	00da      	lsls	r2, r3, #3
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	801a      	strh	r2, [r3, #0]
 8005fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <USB_EPStartXfer+0x2be>
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	801a      	strh	r2, [r3, #0]
 8005fbe:	e05d      	b.n	800607c <USB_EPStartXfer+0x37a>
 8005fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fc6:	d81c      	bhi.n	8006002 <USB_EPStartXfer+0x300>
 8005fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d004      	beq.n	8005fe8 <USB_EPStartXfer+0x2e6>
 8005fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	029b      	lsls	r3, r3, #10
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	e03c      	b.n	800607c <USB_EPStartXfer+0x37a>
 8006002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800600c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006010:	f003 031f 	and.w	r3, r3, #31
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <USB_EPStartXfer+0x320>
 8006018:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800601c:	3b01      	subs	r3, #1
 800601e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29a      	uxth	r2, r3
 8006028:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800602c:	b29b      	uxth	r3, r3
 800602e:	029b      	lsls	r3, r3, #10
 8006030:	b29b      	uxth	r3, r3
 8006032:	4313      	orrs	r3, r2
 8006034:	b29b      	uxth	r3, r3
 8006036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603e:	b29a      	uxth	r2, r3
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	801a      	strh	r2, [r3, #0]
 8006044:	e01a      	b.n	800607c <USB_EPStartXfer+0x37a>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d116      	bne.n	800607c <USB_EPStartXfer+0x37a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	623b      	str	r3, [r7, #32]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006058:	b29b      	uxth	r3, r3
 800605a:	461a      	mov	r2, r3
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	4413      	add	r3, r2
 8006060:	623b      	str	r3, [r7, #32]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	00da      	lsls	r2, r3, #3
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	4413      	add	r3, r2
 800606c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006076:	b29a      	uxth	r2, r3
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	891b      	ldrh	r3, [r3, #8]
 8006080:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6959      	ldr	r1, [r3, #20]
 8006088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800608c:	b29b      	uxth	r3, r3
 800608e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fd19 	bl	8006aca <USB_WritePMA>
 8006098:	e2e2      	b.n	8006660 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d16b      	bne.n	800617a <USB_EPStartXfer+0x478>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060b2:	4413      	add	r3, r2
 80060b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	00da      	lsls	r2, r3, #3
 80060bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060be:	4413      	add	r3, r2
 80060c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060d4:	801a      	strh	r2, [r3, #0]
 80060d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <USB_EPStartXfer+0x3f2>
 80060de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	e05d      	b.n	80061b0 <USB_EPStartXfer+0x4ae>
 80060f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80060fa:	d81c      	bhi.n	8006136 <USB_EPStartXfer+0x434>
 80060fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006100:	085b      	lsrs	r3, r3, #1
 8006102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d004      	beq.n	800611c <USB_EPStartXfer+0x41a>
 8006112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006116:	3301      	adds	r3, #1
 8006118:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800611c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b29a      	uxth	r2, r3
 8006122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006126:	b29b      	uxth	r3, r3
 8006128:	029b      	lsls	r3, r3, #10
 800612a:	b29b      	uxth	r3, r3
 800612c:	4313      	orrs	r3, r2
 800612e:	b29a      	uxth	r2, r3
 8006130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006132:	801a      	strh	r2, [r3, #0]
 8006134:	e03c      	b.n	80061b0 <USB_EPStartXfer+0x4ae>
 8006136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006144:	f003 031f 	and.w	r3, r3, #31
 8006148:	2b00      	cmp	r3, #0
 800614a:	d104      	bne.n	8006156 <USB_EPStartXfer+0x454>
 800614c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006150:	3b01      	subs	r3, #1
 8006152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29a      	uxth	r2, r3
 800615c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006160:	b29b      	uxth	r3, r3
 8006162:	029b      	lsls	r3, r3, #10
 8006164:	b29b      	uxth	r3, r3
 8006166:	4313      	orrs	r3, r2
 8006168:	b29b      	uxth	r3, r3
 800616a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800616e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006172:	b29a      	uxth	r2, r3
 8006174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006176:	801a      	strh	r2, [r3, #0]
 8006178:	e01a      	b.n	80061b0 <USB_EPStartXfer+0x4ae>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	785b      	ldrb	r3, [r3, #1]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d116      	bne.n	80061b0 <USB_EPStartXfer+0x4ae>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	653b      	str	r3, [r7, #80]	@ 0x50
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006192:	4413      	add	r3, r2
 8006194:	653b      	str	r3, [r7, #80]	@ 0x50
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	00da      	lsls	r2, r3, #3
 800619c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800619e:	4413      	add	r3, r2
 80061a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	891b      	ldrh	r3, [r3, #8]
 80061b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	6959      	ldr	r1, [r3, #20]
 80061bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fc7f 	bl	8006aca <USB_WritePMA>
            ep->xfer_buff += len;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	695a      	ldr	r2, [r3, #20]
 80061d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061d4:	441a      	add	r2, r3
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6a1a      	ldr	r2, [r3, #32]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d907      	bls.n	80061f6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6a1a      	ldr	r2, [r3, #32]
 80061ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061ee:	1ad2      	subs	r2, r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	621a      	str	r2, [r3, #32]
 80061f4:	e006      	b.n	8006204 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2200      	movs	r2, #0
 8006202:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	643b      	str	r3, [r7, #64]	@ 0x40
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d16b      	bne.n	80062e8 <USB_EPStartXfer+0x5e6>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800621a:	b29b      	uxth	r3, r3
 800621c:	461a      	mov	r2, r3
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	4413      	add	r3, r2
 8006222:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	00da      	lsls	r2, r3, #3
 800622a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622c:	4413      	add	r3, r2
 800622e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006232:	637b      	str	r3, [r7, #52]	@ 0x34
 8006234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800623e:	b29a      	uxth	r2, r3
 8006240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006242:	801a      	strh	r2, [r3, #0]
 8006244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <USB_EPStartXfer+0x560>
 800624c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625a:	b29a      	uxth	r2, r3
 800625c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	e05b      	b.n	800631a <USB_EPStartXfer+0x618>
 8006262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006266:	2b3e      	cmp	r3, #62	@ 0x3e
 8006268:	d81c      	bhi.n	80062a4 <USB_EPStartXfer+0x5a2>
 800626a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800626e:	085b      	lsrs	r3, r3, #1
 8006270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <USB_EPStartXfer+0x588>
 8006280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006284:	3301      	adds	r3, #1
 8006286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800628a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29a      	uxth	r2, r3
 8006290:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006294:	b29b      	uxth	r3, r3
 8006296:	029b      	lsls	r3, r3, #10
 8006298:	b29b      	uxth	r3, r3
 800629a:	4313      	orrs	r3, r2
 800629c:	b29a      	uxth	r2, r3
 800629e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	e03a      	b.n	800631a <USB_EPStartXfer+0x618>
 80062a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <USB_EPStartXfer+0x5c2>
 80062ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062be:	3b01      	subs	r3, #1
 80062c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	029b      	lsls	r3, r3, #10
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	4313      	orrs	r3, r2
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	e018      	b.n	800631a <USB_EPStartXfer+0x618>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d114      	bne.n	800631a <USB_EPStartXfer+0x618>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062fc:	4413      	add	r3, r2
 80062fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	00da      	lsls	r2, r3, #3
 8006306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006308:	4413      	add	r3, r2
 800630a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006314:	b29a      	uxth	r2, r3
 8006316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006318:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	895b      	ldrh	r3, [r3, #10]
 800631e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6959      	ldr	r1, [r3, #20]
 8006326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800632a:	b29b      	uxth	r3, r3
 800632c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fbca 	bl	8006aca <USB_WritePMA>
 8006336:	e193      	b.n	8006660 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006356:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	441a      	add	r2, r3
 8006364:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800636c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006378:	b29b      	uxth	r3, r3
 800637a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006386:	b29b      	uxth	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800638c:	4413      	add	r3, r2
 800638e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	00da      	lsls	r2, r3, #3
 8006396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006398:	4413      	add	r3, r2
 800639a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800639e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	891b      	ldrh	r3, [r3, #8]
 80063ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6959      	ldr	r1, [r3, #20]
 80063b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fb82 	bl	8006aca <USB_WritePMA>
 80063c6:	e14b      	b.n	8006660 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063d0:	1ad2      	subs	r2, r2, r3
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 809a 	beq.w	8006522 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d16b      	bne.n	80064d2 <USB_EPStartXfer+0x7d0>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006404:	b29b      	uxth	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800640a:	4413      	add	r3, r2
 800640c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	00da      	lsls	r2, r3, #3
 8006414:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006416:	4413      	add	r3, r2
 8006418:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800641c:	667b      	str	r3, [r7, #100]	@ 0x64
 800641e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006428:	b29a      	uxth	r2, r3
 800642a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10a      	bne.n	800644c <USB_EPStartXfer+0x74a>
 8006436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006444:	b29a      	uxth	r2, r3
 8006446:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	e05b      	b.n	8006504 <USB_EPStartXfer+0x802>
 800644c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006450:	2b3e      	cmp	r3, #62	@ 0x3e
 8006452:	d81c      	bhi.n	800648e <USB_EPStartXfer+0x78c>
 8006454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800645e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <USB_EPStartXfer+0x772>
 800646a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800646e:	3301      	adds	r3, #1
 8006470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29a      	uxth	r2, r3
 800647a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800647e:	b29b      	uxth	r3, r3
 8006480:	029b      	lsls	r3, r3, #10
 8006482:	b29b      	uxth	r3, r3
 8006484:	4313      	orrs	r3, r2
 8006486:	b29a      	uxth	r2, r3
 8006488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	e03a      	b.n	8006504 <USB_EPStartXfer+0x802>
 800648e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <USB_EPStartXfer+0x7ac>
 80064a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064a8:	3b01      	subs	r3, #1
 80064aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	029b      	lsls	r3, r3, #10
 80064bc:	b29b      	uxth	r3, r3
 80064be:	4313      	orrs	r3, r2
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	e018      	b.n	8006504 <USB_EPStartXfer+0x802>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d114      	bne.n	8006504 <USB_EPStartXfer+0x802>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064e6:	4413      	add	r3, r2
 80064e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	00da      	lsls	r2, r3, #3
 80064f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006502:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	895b      	ldrh	r3, [r3, #10]
 8006508:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	6959      	ldr	r1, [r3, #20]
 8006510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006514:	b29b      	uxth	r3, r3
 8006516:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fad5 	bl	8006aca <USB_WritePMA>
 8006520:	e09e      	b.n	8006660 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d16b      	bne.n	8006602 <USB_EPStartXfer+0x900>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006534:	b29b      	uxth	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800653a:	4413      	add	r3, r2
 800653c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	00da      	lsls	r2, r3, #3
 8006544:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006546:	4413      	add	r3, r2
 8006548:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800654c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800654e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006558:	b29a      	uxth	r2, r3
 800655a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800655c:	801a      	strh	r2, [r3, #0]
 800655e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <USB_EPStartXfer+0x87a>
 8006566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006574:	b29a      	uxth	r2, r3
 8006576:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006578:	801a      	strh	r2, [r3, #0]
 800657a:	e063      	b.n	8006644 <USB_EPStartXfer+0x942>
 800657c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006580:	2b3e      	cmp	r3, #62	@ 0x3e
 8006582:	d81c      	bhi.n	80065be <USB_EPStartXfer+0x8bc>
 8006584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800658e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <USB_EPStartXfer+0x8a2>
 800659a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800659e:	3301      	adds	r3, #1
 80065a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	029b      	lsls	r3, r3, #10
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065ba:	801a      	strh	r2, [r3, #0]
 80065bc:	e042      	b.n	8006644 <USB_EPStartXfer+0x942>
 80065be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d104      	bne.n	80065de <USB_EPStartXfer+0x8dc>
 80065d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80065d8:	3b01      	subs	r3, #1
 80065da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	029b      	lsls	r3, r3, #10
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	4313      	orrs	r3, r2
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	e020      	b.n	8006644 <USB_EPStartXfer+0x942>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d11c      	bne.n	8006644 <USB_EPStartXfer+0x942>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006616:	b29b      	uxth	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800661e:	4413      	add	r3, r2
 8006620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	00da      	lsls	r2, r3, #3
 800662a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800662e:	4413      	add	r3, r2
 8006630:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800663c:	b29a      	uxth	r2, r3
 800663e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006642:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	891b      	ldrh	r3, [r3, #8]
 8006648:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	6959      	ldr	r1, [r3, #20]
 8006650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006654:	b29b      	uxth	r3, r3
 8006656:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fa35 	bl	8006aca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006676:	817b      	strh	r3, [r7, #10]
 8006678:	897b      	ldrh	r3, [r7, #10]
 800667a:	f083 0310 	eor.w	r3, r3, #16
 800667e:	817b      	strh	r3, [r7, #10]
 8006680:	897b      	ldrh	r3, [r7, #10]
 8006682:	f083 0320 	eor.w	r3, r3, #32
 8006686:	817b      	strh	r3, [r7, #10]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	441a      	add	r2, r3
 8006692:	897b      	ldrh	r3, [r7, #10]
 8006694:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006698:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800669c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	8013      	strh	r3, [r2, #0]
 80066a8:	e0d5      	b.n	8006856 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	7b1b      	ldrb	r3, [r3, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d156      	bne.n	8006760 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d122      	bne.n	8006700 <USB_EPStartXfer+0x9fe>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	78db      	ldrb	r3, [r3, #3]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d11e      	bne.n	8006700 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	441a      	add	r2, r3
 80066e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80066ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80066f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	8013      	strh	r3, [r2, #0]
 80066fe:	e01d      	b.n	800673c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006716:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	441a      	add	r2, r3
 8006724:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8006728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800672c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006738:	b29b      	uxth	r3, r3
 800673a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	d907      	bls.n	8006758 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	699a      	ldr	r2, [r3, #24]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	1ad2      	subs	r2, r2, r3
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	619a      	str	r2, [r3, #24]
 8006756:	e054      	b.n	8006802 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2200      	movs	r2, #0
 800675c:	619a      	str	r2, [r3, #24]
 800675e:	e050      	b.n	8006802 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	78db      	ldrb	r3, [r3, #3]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d142      	bne.n	80067ee <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d048      	beq.n	8006802 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006780:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <USB_EPStartXfer+0xa96>
 800678c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006798:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800679c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d12e      	bne.n	8006802 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80067a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80067a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d128      	bne.n	8006802 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c6:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	441a      	add	r2, r3
 80067d4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80067d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	8013      	strh	r3, [r2, #0]
 80067ec:	e009      	b.n	8006802 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	78db      	ldrb	r3, [r3, #3]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d103      	bne.n	80067fe <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2200      	movs	r2, #0
 80067fa:	619a      	str	r2, [r3, #24]
 80067fc:	e001      	b.n	8006802 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e02a      	b.n	8006858 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006818:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800681c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006820:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006824:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006828:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800682c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006830:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	441a      	add	r2, r3
 800683e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006842:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800684a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800684e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006852:	b29b      	uxth	r3, r3
 8006854:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	37b0      	adds	r7, #176	@ 0xb0
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d020      	beq.n	80068b4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006888:	81bb      	strh	r3, [r7, #12]
 800688a:	89bb      	ldrh	r3, [r7, #12]
 800688c:	f083 0310 	eor.w	r3, r3, #16
 8006890:	81bb      	strh	r3, [r7, #12]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	441a      	add	r2, r3
 800689c:	89bb      	ldrh	r3, [r7, #12]
 800689e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	8013      	strh	r3, [r2, #0]
 80068b2:	e01f      	b.n	80068f4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ca:	81fb      	strh	r3, [r7, #14]
 80068cc:	89fb      	ldrh	r3, [r7, #14]
 80068ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068d2:	81fb      	strh	r3, [r7, #14]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	89fb      	ldrh	r3, [r7, #14]
 80068e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006902:	b480      	push	{r7}
 8006904:	b087      	sub	sp, #28
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d04c      	beq.n	80069ae <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	823b      	strh	r3, [r7, #16]
 8006922:	8a3b      	ldrh	r3, [r7, #16]
 8006924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01b      	beq.n	8006964 <USB_EPClearStall+0x62>
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800693e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006942:	81fb      	strh	r3, [r7, #14]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	89fb      	ldrh	r3, [r7, #14]
 8006950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800695c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006960:	b29b      	uxth	r3, r3
 8006962:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	78db      	ldrb	r3, [r3, #3]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d06c      	beq.n	8006a46 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800697e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006982:	81bb      	strh	r3, [r7, #12]
 8006984:	89bb      	ldrh	r3, [r7, #12]
 8006986:	f083 0320 	eor.w	r3, r3, #32
 800698a:	81bb      	strh	r3, [r7, #12]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	89bb      	ldrh	r3, [r7, #12]
 8006998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800699c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	8013      	strh	r3, [r2, #0]
 80069ac:	e04b      	b.n	8006a46 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	82fb      	strh	r3, [r7, #22]
 80069bc:	8afb      	ldrh	r3, [r7, #22]
 80069be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d01b      	beq.n	80069fe <USB_EPClearStall+0xfc>
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069dc:	82bb      	strh	r3, [r7, #20]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	8abb      	ldrh	r3, [r7, #20]
 80069ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a14:	827b      	strh	r3, [r7, #18]
 8006a16:	8a7b      	ldrh	r3, [r7, #18]
 8006a18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a1c:	827b      	strh	r3, [r7, #18]
 8006a1e:	8a7b      	ldrh	r3, [r7, #18]
 8006a20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a24:	827b      	strh	r3, [r7, #18]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	441a      	add	r2, r3
 8006a30:	8a7b      	ldrh	r3, [r7, #18]
 8006a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d103      	bne.n	8006a6e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2280      	movs	r2, #128	@ 0x80
 8006a6a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006abc:	68fb      	ldr	r3, [r7, #12]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b08b      	sub	sp, #44	@ 0x2c
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	460b      	mov	r3, r1
 8006ada:	80fb      	strh	r3, [r7, #6]
 8006adc:	4613      	mov	r3, r2
 8006ade:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ae0:	88bb      	ldrh	r3, [r7, #4]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	085b      	lsrs	r3, r3, #1
 8006ae6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006af0:	88fa      	ldrh	r2, [r7, #6]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006afa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b00:	e01b      	b.n	8006b3a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	b21a      	sxth	r2, r3
 8006b12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	b21b      	sxth	r3, r3
 8006b1a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	8a7a      	ldrh	r2, [r7, #18]
 8006b20:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	3302      	adds	r3, #2
 8006b26:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	3301      	adds	r3, #1
 8006b32:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	3b01      	subs	r3, #1
 8006b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e0      	bne.n	8006b02 <USB_WritePMA+0x38>
  }
}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	372c      	adds	r7, #44	@ 0x2c
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b08b      	sub	sp, #44	@ 0x2c
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	80fb      	strh	r3, [r7, #6]
 8006b60:	4613      	mov	r3, r2
 8006b62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b64:	88bb      	ldrh	r3, [r7, #4]
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b74:	88fa      	ldrh	r2, [r7, #6]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b7e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b84:	e018      	b.n	8006bb8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	3302      	adds	r3, #2
 8006b92:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	0a1b      	lsrs	r3, r3, #8
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e3      	bne.n	8006b86 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006bbe:	88bb      	ldrh	r3, [r7, #4]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	701a      	strb	r2, [r3, #0]
  }
}
 8006bda:	bf00      	nop
 8006bdc:	372c      	adds	r7, #44	@ 0x2c
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bf2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006bf6:	f004 fe89 	bl	800b90c <USBD_static_malloc>
 8006bfa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d105      	bne.n	8006c0e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e066      	b.n	8006cdc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7c1b      	ldrb	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d119      	bne.n	8006c52 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c22:	2202      	movs	r2, #2
 8006c24:	2181      	movs	r1, #129	@ 0x81
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f004 fd17 	bl	800b65a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c36:	2202      	movs	r2, #2
 8006c38:	2101      	movs	r1, #1
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f004 fd0d 	bl	800b65a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2210      	movs	r2, #16
 8006c4c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8006c50:	e016      	b.n	8006c80 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c52:	2340      	movs	r3, #64	@ 0x40
 8006c54:	2202      	movs	r2, #2
 8006c56:	2181      	movs	r1, #129	@ 0x81
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f004 fcfe 	bl	800b65a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c64:	2340      	movs	r3, #64	@ 0x40
 8006c66:	2202      	movs	r2, #2
 8006c68:	2101      	movs	r1, #1
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f004 fcf5 	bl	800b65a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2210      	movs	r2, #16
 8006c7c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c80:	2308      	movs	r3, #8
 8006c82:	2203      	movs	r2, #3
 8006c84:	2182      	movs	r1, #130	@ 0x82
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f004 fce7 	bl	800b65a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	7c1b      	ldrb	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d109      	bne.n	8006cca <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f004 fdb8 	bl	800b838 <USBD_LL_PrepareReceive>
 8006cc8:	e007      	b.n	8006cda <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cd0:	2340      	movs	r3, #64	@ 0x40
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f004 fdaf 	bl	800b838 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cf0:	2181      	movs	r1, #129	@ 0x81
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f004 fcd7 	bl	800b6a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cfe:	2101      	movs	r1, #1
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f004 fcd0 	bl	800b6a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d0e:	2182      	movs	r1, #130	@ 0x82
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f004 fcc8 	bl	800b6a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00e      	beq.n	8006d4e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d40:	4618      	mov	r0, r3
 8006d42:	f004 fdf1 	bl	800b928 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e0af      	b.n	8006ee0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d03f      	beq.n	8006e0c <USBD_CDC_Setup+0xb4>
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	f040 809f 	bne.w	8006ed0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	88db      	ldrh	r3, [r3, #6]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d02e      	beq.n	8006df8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da16      	bge.n	8006dd2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006db0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	88d2      	ldrh	r2, [r2, #6]
 8006db6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	88db      	ldrh	r3, [r3, #6]
 8006dbc:	2b07      	cmp	r3, #7
 8006dbe:	bf28      	it	cs
 8006dc0:	2307      	movcs	r3, #7
 8006dc2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	89fa      	ldrh	r2, [r7, #14]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fa9d 	bl	800830a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006dd0:	e085      	b.n	8006ede <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	785a      	ldrb	r2, [r3, #1]
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	88db      	ldrh	r3, [r3, #6]
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006de8:	6939      	ldr	r1, [r7, #16]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	88db      	ldrh	r3, [r3, #6]
 8006dee:	461a      	mov	r2, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 fab6 	bl	8008362 <USBD_CtlPrepareRx>
      break;
 8006df6:	e072      	b.n	8006ede <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	7850      	ldrb	r0, [r2, #1]
 8006e04:	2200      	movs	r2, #0
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	4798      	blx	r3
      break;
 8006e0a:	e068      	b.n	8006ede <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b0b      	cmp	r3, #11
 8006e12:	d852      	bhi.n	8006eba <USBD_CDC_Setup+0x162>
 8006e14:	a201      	add	r2, pc, #4	@ (adr r2, 8006e1c <USBD_CDC_Setup+0xc4>)
 8006e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1a:	bf00      	nop
 8006e1c:	08006e4d 	.word	0x08006e4d
 8006e20:	08006ec9 	.word	0x08006ec9
 8006e24:	08006ebb 	.word	0x08006ebb
 8006e28:	08006ebb 	.word	0x08006ebb
 8006e2c:	08006ebb 	.word	0x08006ebb
 8006e30:	08006ebb 	.word	0x08006ebb
 8006e34:	08006ebb 	.word	0x08006ebb
 8006e38:	08006ebb 	.word	0x08006ebb
 8006e3c:	08006ebb 	.word	0x08006ebb
 8006e40:	08006ebb 	.word	0x08006ebb
 8006e44:	08006e77 	.word	0x08006e77
 8006e48:	08006ea1 	.word	0x08006ea1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d107      	bne.n	8006e68 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e58:	f107 030a 	add.w	r3, r7, #10
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 fa52 	bl	800830a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e66:	e032      	b.n	8006ece <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 f9dc 	bl	8008228 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e70:	2303      	movs	r3, #3
 8006e72:	75fb      	strb	r3, [r7, #23]
          break;
 8006e74:	e02b      	b.n	8006ece <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d107      	bne.n	8006e92 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e82:	f107 030d 	add.w	r3, r7, #13
 8006e86:	2201      	movs	r2, #1
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fa3d 	bl	800830a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e90:	e01d      	b.n	8006ece <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 f9c7 	bl	8008228 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e9e:	e016      	b.n	8006ece <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d00f      	beq.n	8006ecc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 f9ba 	bl	8008228 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006eb8:	e008      	b.n	8006ecc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 f9b3 	bl	8008228 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ec6:	e002      	b.n	8006ece <USBD_CDC_Setup+0x176>
          break;
 8006ec8:	bf00      	nop
 8006eca:	e008      	b.n	8006ede <USBD_CDC_Setup+0x186>
          break;
 8006ecc:	bf00      	nop
      }
      break;
 8006ece:	e006      	b.n	8006ede <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f9a8 	bl	8008228 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	75fb      	strb	r3, [r7, #23]
      break;
 8006edc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8006efa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e04f      	b.n	8006faa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f12:	78fa      	ldrb	r2, [r7, #3]
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	3318      	adds	r3, #24
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d029      	beq.n	8006f7c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	3318      	adds	r3, #24
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	78f9      	ldrb	r1, [r7, #3]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	4403      	add	r3, r0
 8006f48:	3320      	adds	r3, #32
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f50:	fb01 f303 	mul.w	r3, r1, r3
 8006f54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d110      	bne.n	8006f7c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	3318      	adds	r3, #24
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f6e:	78f9      	ldrb	r1, [r7, #3]
 8006f70:	2300      	movs	r3, #0
 8006f72:	2200      	movs	r2, #0
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f004 fc3e 	bl	800b7f6 <USBD_LL_Transmit>
 8006f7a:	e015      	b.n	8006fa8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006fa4:	78fa      	ldrb	r2, [r7, #3]
 8006fa6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e015      	b.n	8007000 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f004 fc4e 	bl	800b87a <USBD_LL_GetRxDataSize>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007016:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800701e:	2303      	movs	r3, #3
 8007020:	e01a      	b.n	8007058 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d014      	beq.n	8007056 <USBD_CDC_EP0_RxReady+0x4e>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007032:	2bff      	cmp	r3, #255	@ 0xff
 8007034:	d00f      	beq.n	8007056 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8007044:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800704c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	22ff      	movs	r2, #255	@ 0xff
 8007052:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2243      	movs	r2, #67	@ 0x43
 800706c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800706e:	4b03      	ldr	r3, [pc, #12]	@ (800707c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	20000094 	.word	0x20000094

08007080 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2243      	movs	r2, #67	@ 0x43
 800708c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800708e:	4b03      	ldr	r3, [pc, #12]	@ (800709c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	20000050 	.word	0x20000050

080070a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2243      	movs	r2, #67	@ 0x43
 80070ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80070ae:	4b03      	ldr	r3, [pc, #12]	@ (80070bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	200000d8 	.word	0x200000d8

080070c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	220a      	movs	r2, #10
 80070cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80070ce:	4b03      	ldr	r3, [pc, #12]	@ (80070dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	2000000c 	.word	0x2000000c

080070e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e004      	b.n	80070fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800710a:	b480      	push	{r7}
 800710c:	b087      	sub	sp, #28
 800710e:	af00      	add	r7, sp, #0
 8007110:	60f8      	str	r0, [r7, #12]
 8007112:	60b9      	str	r1, [r7, #8]
 8007114:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800711c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007124:	2303      	movs	r3, #3
 8007126:	e008      	b.n	800713a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007156:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800715e:	2303      	movs	r3, #3
 8007160:	e004      	b.n	800716c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007186:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007192:	2303      	movs	r3, #3
 8007194:	e016      	b.n	80071c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	7c1b      	ldrb	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d109      	bne.n	80071b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071a8:	2101      	movs	r1, #1
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f004 fb44 	bl	800b838 <USBD_LL_PrepareReceive>
 80071b0:	e007      	b.n	80071c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071b8:	2340      	movs	r3, #64	@ 0x40
 80071ba:	2101      	movs	r1, #1
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f004 fb3b 	bl	800b838 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	4613      	mov	r3, r2
 80071d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e01f      	b.n	8007224 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	79fa      	ldrb	r2, [r7, #7]
 8007216:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f004 f9a3 	bl	800b564 <USBD_LL_Init>
 800721e:	4603      	mov	r3, r0
 8007220:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007222:	7dfb      	ldrb	r3, [r7, #23]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007240:	2303      	movs	r3, #3
 8007242:	e016      	b.n	8007272 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00b      	beq.n	8007270 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800725e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007260:	f107 020e 	add.w	r2, r7, #14
 8007264:	4610      	mov	r0, r2
 8007266:	4798      	blx	r3
 8007268:	4602      	mov	r2, r0
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f004 f9ce 	bl	800b624 <USBD_LL_Start>
 8007288:	4603      	mov	r3, r0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072b4:	2303      	movs	r3, #3
 80072b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d009      	beq.n	80072d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	78fa      	ldrb	r2, [r7, #3]
 80072cc:	4611      	mov	r1, r2
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	4798      	blx	r3
 80072d2:	4603      	mov	r3, r0
 80072d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	4611      	mov	r1, r2
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
  }

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f000 ff46 	bl	80081b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	2b02      	cmp	r3, #2
 800734a:	d01a      	beq.n	8007382 <USBD_LL_SetupStage+0x72>
 800734c:	2b02      	cmp	r3, #2
 800734e:	d822      	bhi.n	8007396 <USBD_LL_SetupStage+0x86>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <USBD_LL_SetupStage+0x4a>
 8007354:	2b01      	cmp	r3, #1
 8007356:	d00a      	beq.n	800736e <USBD_LL_SetupStage+0x5e>
 8007358:	e01d      	b.n	8007396 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9ee 	bl	8007744 <USBD_StdDevReq>
 8007368:	4603      	mov	r3, r0
 800736a:	73fb      	strb	r3, [r7, #15]
      break;
 800736c:	e020      	b.n	80073b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa52 	bl	8007820 <USBD_StdItfReq>
 800737c:	4603      	mov	r3, r0
 800737e:	73fb      	strb	r3, [r7, #15]
      break;
 8007380:	e016      	b.n	80073b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa91 	bl	80078b2 <USBD_StdEPReq>
 8007390:	4603      	mov	r3, r0
 8007392:	73fb      	strb	r3, [r7, #15]
      break;
 8007394:	e00c      	b.n	80073b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800739c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f004 f99d 	bl	800b6e4 <USBD_LL_StallEP>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
      break;
 80073ae:	bf00      	nop
  }

  return ret;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b086      	sub	sp, #24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	460b      	mov	r3, r1
 80073c4:	607a      	str	r2, [r7, #4]
 80073c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073c8:	7afb      	ldrb	r3, [r7, #11]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d138      	bne.n	8007440 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80073d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d14a      	bne.n	8007476 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d913      	bls.n	8007414 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	1ad2      	subs	r2, r2, r3
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	4293      	cmp	r3, r2
 8007404:	bf28      	it	cs
 8007406:	4613      	movcs	r3, r2
 8007408:	461a      	mov	r2, r3
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 ffc5 	bl	800839c <USBD_CtlContinueRx>
 8007412:	e030      	b.n	8007476 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b03      	cmp	r3, #3
 800741e:	d10b      	bne.n	8007438 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d005      	beq.n	8007438 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 ffc0 	bl	80083be <USBD_CtlSendStatus>
 800743e:	e01a      	b.n	8007476 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b03      	cmp	r3, #3
 800744a:	d114      	bne.n	8007476 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00e      	beq.n	8007476 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	7afa      	ldrb	r2, [r7, #11]
 8007462:	4611      	mov	r1, r2
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	4798      	blx	r3
 8007468:	4603      	mov	r3, r0
 800746a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	e000      	b.n	8007478 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	460b      	mov	r3, r1
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800748e:	7afb      	ldrb	r3, [r7, #11]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d16b      	bne.n	800756c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3314      	adds	r3, #20
 8007498:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d156      	bne.n	8007552 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d914      	bls.n	80074da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	1ad2      	subs	r2, r2, r3
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	461a      	mov	r2, r3
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 ff3a 	bl	8008340 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074cc:	2300      	movs	r3, #0
 80074ce:	2200      	movs	r2, #0
 80074d0:	2100      	movs	r1, #0
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f004 f9b0 	bl	800b838 <USBD_LL_PrepareReceive>
 80074d8:	e03b      	b.n	8007552 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d11c      	bne.n	8007520 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d316      	bcc.n	8007520 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d20f      	bcs.n	8007520 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007500:	2200      	movs	r2, #0
 8007502:	2100      	movs	r1, #0
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 ff1b 	bl	8008340 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007512:	2300      	movs	r3, #0
 8007514:	2200      	movs	r2, #0
 8007516:	2100      	movs	r1, #0
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f004 f98d 	bl	800b838 <USBD_LL_PrepareReceive>
 800751e:	e018      	b.n	8007552 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b03      	cmp	r3, #3
 800752a:	d10b      	bne.n	8007544 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007544:	2180      	movs	r1, #128	@ 0x80
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f004 f8cc 	bl	800b6e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 ff49 	bl	80083e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007558:	2b01      	cmp	r3, #1
 800755a:	d122      	bne.n	80075a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7ff fe98 	bl	8007292 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800756a:	e01a      	b.n	80075a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b03      	cmp	r3, #3
 8007576:	d114      	bne.n	80075a2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00e      	beq.n	80075a2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	7afa      	ldrb	r2, [r7, #11]
 800758e:	4611      	mov	r1, r2
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	4798      	blx	r3
 8007594:	4603      	mov	r3, r0
 8007596:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	e000      	b.n	80075a4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80075dc:	2303      	movs	r3, #3
 80075de:	e02f      	b.n	8007640 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00f      	beq.n	800760a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d009      	beq.n	800760a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6852      	ldr	r2, [r2, #4]
 8007602:	b2d2      	uxtb	r2, r2
 8007604:	4611      	mov	r1, r2
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800760a:	2340      	movs	r3, #64	@ 0x40
 800760c:	2200      	movs	r2, #0
 800760e:	2100      	movs	r1, #0
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f004 f822 	bl	800b65a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2240      	movs	r2, #64	@ 0x40
 8007622:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007626:	2340      	movs	r3, #64	@ 0x40
 8007628:	2200      	movs	r2, #0
 800762a:	2180      	movs	r1, #128	@ 0x80
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f004 f814 	bl	800b65a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2240      	movs	r2, #64	@ 0x40
 800763c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	78fa      	ldrb	r2, [r7, #3]
 8007658:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007676:	b2da      	uxtb	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2204      	movs	r2, #4
 8007682:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d106      	bne.n	80076b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e012      	b.n	8007700 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d10b      	bne.n	80076fe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	3301      	adds	r3, #1
 800771e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007726:	8a3b      	ldrh	r3, [r7, #16]
 8007728:	021b      	lsls	r3, r3, #8
 800772a:	b21a      	sxth	r2, r3
 800772c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007730:	4313      	orrs	r3, r2
 8007732:	b21b      	sxth	r3, r3
 8007734:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007736:	89fb      	ldrh	r3, [r7, #14]
}
 8007738:	4618      	mov	r0, r3
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800775a:	2b40      	cmp	r3, #64	@ 0x40
 800775c:	d005      	beq.n	800776a <USBD_StdDevReq+0x26>
 800775e:	2b40      	cmp	r3, #64	@ 0x40
 8007760:	d853      	bhi.n	800780a <USBD_StdDevReq+0xc6>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <USBD_StdDevReq+0x3a>
 8007766:	2b20      	cmp	r3, #32
 8007768:	d14f      	bne.n	800780a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
 8007778:	4603      	mov	r3, r0
 800777a:	73fb      	strb	r3, [r7, #15]
      break;
 800777c:	e04a      	b.n	8007814 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	2b09      	cmp	r3, #9
 8007784:	d83b      	bhi.n	80077fe <USBD_StdDevReq+0xba>
 8007786:	a201      	add	r2, pc, #4	@ (adr r2, 800778c <USBD_StdDevReq+0x48>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	080077e1 	.word	0x080077e1
 8007790:	080077f5 	.word	0x080077f5
 8007794:	080077ff 	.word	0x080077ff
 8007798:	080077eb 	.word	0x080077eb
 800779c:	080077ff 	.word	0x080077ff
 80077a0:	080077bf 	.word	0x080077bf
 80077a4:	080077b5 	.word	0x080077b5
 80077a8:	080077ff 	.word	0x080077ff
 80077ac:	080077d7 	.word	0x080077d7
 80077b0:	080077c9 	.word	0x080077c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f9de 	bl	8007b78 <USBD_GetDescriptor>
          break;
 80077bc:	e024      	b.n	8007808 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fb6d 	bl	8007ea0 <USBD_SetAddress>
          break;
 80077c6:	e01f      	b.n	8007808 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fbac 	bl	8007f28 <USBD_SetConfig>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]
          break;
 80077d4:	e018      	b.n	8007808 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fc4b 	bl	8008074 <USBD_GetConfig>
          break;
 80077de:	e013      	b.n	8007808 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fc7c 	bl	80080e0 <USBD_GetStatus>
          break;
 80077e8:	e00e      	b.n	8007808 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fcab 	bl	8008148 <USBD_SetFeature>
          break;
 80077f2:	e009      	b.n	8007808 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fcba 	bl	8008170 <USBD_ClrFeature>
          break;
 80077fc:	e004      	b.n	8007808 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fd11 	bl	8008228 <USBD_CtlError>
          break;
 8007806:	bf00      	nop
      }
      break;
 8007808:	e004      	b.n	8007814 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fd0b 	bl	8008228 <USBD_CtlError>
      break;
 8007812:	bf00      	nop
  }

  return ret;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop

08007820 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007836:	2b40      	cmp	r3, #64	@ 0x40
 8007838:	d005      	beq.n	8007846 <USBD_StdItfReq+0x26>
 800783a:	2b40      	cmp	r3, #64	@ 0x40
 800783c:	d82f      	bhi.n	800789e <USBD_StdItfReq+0x7e>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <USBD_StdItfReq+0x26>
 8007842:	2b20      	cmp	r3, #32
 8007844:	d12b      	bne.n	800789e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800784c:	b2db      	uxtb	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	2b02      	cmp	r3, #2
 8007852:	d81d      	bhi.n	8007890 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	889b      	ldrh	r3, [r3, #4]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b01      	cmp	r3, #1
 800785c:	d813      	bhi.n	8007886 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	88db      	ldrh	r3, [r3, #6]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d110      	bne.n	800789a <USBD_StdItfReq+0x7a>
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10d      	bne.n	800789a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fd9d 	bl	80083be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007884:	e009      	b.n	800789a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fccd 	bl	8008228 <USBD_CtlError>
          break;
 800788e:	e004      	b.n	800789a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fcc8 	bl	8008228 <USBD_CtlError>
          break;
 8007898:	e000      	b.n	800789c <USBD_StdItfReq+0x7c>
          break;
 800789a:	bf00      	nop
      }
      break;
 800789c:	e004      	b.n	80078a8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fcc1 	bl	8008228 <USBD_CtlError>
      break;
 80078a6:	bf00      	nop
  }

  return ret;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	889b      	ldrh	r3, [r3, #4]
 80078c4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078ce:	2b40      	cmp	r3, #64	@ 0x40
 80078d0:	d007      	beq.n	80078e2 <USBD_StdEPReq+0x30>
 80078d2:	2b40      	cmp	r3, #64	@ 0x40
 80078d4:	f200 8145 	bhi.w	8007b62 <USBD_StdEPReq+0x2b0>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00c      	beq.n	80078f6 <USBD_StdEPReq+0x44>
 80078dc:	2b20      	cmp	r3, #32
 80078de:	f040 8140 	bne.w	8007b62 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]
      break;
 80078f4:	e13a      	b.n	8007b6c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d007      	beq.n	800790e <USBD_StdEPReq+0x5c>
 80078fe:	2b03      	cmp	r3, #3
 8007900:	f300 8129 	bgt.w	8007b56 <USBD_StdEPReq+0x2a4>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d07f      	beq.n	8007a08 <USBD_StdEPReq+0x156>
 8007908:	2b01      	cmp	r3, #1
 800790a:	d03c      	beq.n	8007986 <USBD_StdEPReq+0xd4>
 800790c:	e123      	b.n	8007b56 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b02      	cmp	r3, #2
 8007918:	d002      	beq.n	8007920 <USBD_StdEPReq+0x6e>
 800791a:	2b03      	cmp	r3, #3
 800791c:	d016      	beq.n	800794c <USBD_StdEPReq+0x9a>
 800791e:	e02c      	b.n	800797a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00d      	beq.n	8007942 <USBD_StdEPReq+0x90>
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	2b80      	cmp	r3, #128	@ 0x80
 800792a:	d00a      	beq.n	8007942 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f003 fed7 	bl	800b6e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007936:	2180      	movs	r1, #128	@ 0x80
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f003 fed3 	bl	800b6e4 <USBD_LL_StallEP>
 800793e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007940:	e020      	b.n	8007984 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fc6f 	bl	8008228 <USBD_CtlError>
              break;
 800794a:	e01b      	b.n	8007984 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	885b      	ldrh	r3, [r3, #2]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10e      	bne.n	8007972 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <USBD_StdEPReq+0xc0>
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b80      	cmp	r3, #128	@ 0x80
 800795e:	d008      	beq.n	8007972 <USBD_StdEPReq+0xc0>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	88db      	ldrh	r3, [r3, #6]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d104      	bne.n	8007972 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f003 feb9 	bl	800b6e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fd23 	bl	80083be <USBD_CtlSendStatus>

              break;
 8007978:	e004      	b.n	8007984 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fc53 	bl	8008228 <USBD_CtlError>
              break;
 8007982:	bf00      	nop
          }
          break;
 8007984:	e0ec      	b.n	8007b60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d002      	beq.n	8007998 <USBD_StdEPReq+0xe6>
 8007992:	2b03      	cmp	r3, #3
 8007994:	d016      	beq.n	80079c4 <USBD_StdEPReq+0x112>
 8007996:	e030      	b.n	80079fa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00d      	beq.n	80079ba <USBD_StdEPReq+0x108>
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b80      	cmp	r3, #128	@ 0x80
 80079a2:	d00a      	beq.n	80079ba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f003 fe9b 	bl	800b6e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ae:	2180      	movs	r1, #128	@ 0x80
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f003 fe97 	bl	800b6e4 <USBD_LL_StallEP>
 80079b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079b8:	e025      	b.n	8007a06 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fc33 	bl	8008228 <USBD_CtlError>
              break;
 80079c2:	e020      	b.n	8007a06 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	885b      	ldrh	r3, [r3, #2]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d11b      	bne.n	8007a04 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f003 fea1 	bl	800b722 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fcec 	bl	80083be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	4798      	blx	r3
 80079f4:	4603      	mov	r3, r0
 80079f6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80079f8:	e004      	b.n	8007a04 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc13 	bl	8008228 <USBD_CtlError>
              break;
 8007a02:	e000      	b.n	8007a06 <USBD_StdEPReq+0x154>
              break;
 8007a04:	bf00      	nop
          }
          break;
 8007a06:	e0ab      	b.n	8007b60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d002      	beq.n	8007a1a <USBD_StdEPReq+0x168>
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d032      	beq.n	8007a7e <USBD_StdEPReq+0x1cc>
 8007a18:	e097      	b.n	8007b4a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <USBD_StdEPReq+0x17e>
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b80      	cmp	r3, #128	@ 0x80
 8007a24:	d004      	beq.n	8007a30 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fbfd 	bl	8008228 <USBD_CtlError>
                break;
 8007a2e:	e091      	b.n	8007b54 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da0b      	bge.n	8007a50 <USBD_StdEPReq+0x19e>
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	3310      	adds	r3, #16
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	e00b      	b.n	8007a68 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4413      	add	r3, r2
 8007a66:	3304      	adds	r3, #4
 8007a68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2202      	movs	r2, #2
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fc47 	bl	800830a <USBD_CtlSendData>
              break;
 8007a7c:	e06a      	b.n	8007b54 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	da11      	bge.n	8007aaa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	f003 020f 	and.w	r2, r3, #15
 8007a8c:	6879      	ldr	r1, [r7, #4]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	440b      	add	r3, r1
 8007a98:	3324      	adds	r3, #36	@ 0x24
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d117      	bne.n	8007ad0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fbc0 	bl	8008228 <USBD_CtlError>
                  break;
 8007aa8:	e054      	b.n	8007b54 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	f003 020f 	and.w	r2, r3, #15
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	440b      	add	r3, r1
 8007abc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d104      	bne.n	8007ad0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fbad 	bl	8008228 <USBD_CtlError>
                  break;
 8007ace:	e041      	b.n	8007b54 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	da0b      	bge.n	8007af0 <USBD_StdEPReq+0x23e>
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	3310      	adds	r3, #16
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4413      	add	r3, r2
 8007aec:	3304      	adds	r3, #4
 8007aee:	e00b      	b.n	8007b08 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	4413      	add	r3, r2
 8007b06:	3304      	adds	r3, #4
 8007b08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <USBD_StdEPReq+0x264>
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	2b80      	cmp	r3, #128	@ 0x80
 8007b14:	d103      	bne.n	8007b1e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	e00e      	b.n	8007b3c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f003 fe1c 	bl	800b760 <USBD_LL_IsStallEP>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2201      	movs	r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	e002      	b.n	8007b3c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fbe1 	bl	800830a <USBD_CtlSendData>
              break;
 8007b48:	e004      	b.n	8007b54 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fb6b 	bl	8008228 <USBD_CtlError>
              break;
 8007b52:	bf00      	nop
          }
          break;
 8007b54:	e004      	b.n	8007b60 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fb65 	bl	8008228 <USBD_CtlError>
          break;
 8007b5e:	bf00      	nop
      }
      break;
 8007b60:	e004      	b.n	8007b6c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb5f 	bl	8008228 <USBD_CtlError>
      break;
 8007b6a:	bf00      	nop
  }

  return ret;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	885b      	ldrh	r3, [r3, #2]
 8007b92:	0a1b      	lsrs	r3, r3, #8
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	2b0e      	cmp	r3, #14
 8007b9a:	f200 8152 	bhi.w	8007e42 <USBD_GetDescriptor+0x2ca>
 8007b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <USBD_GetDescriptor+0x2c>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007c15 	.word	0x08007c15
 8007ba8:	08007c2d 	.word	0x08007c2d
 8007bac:	08007c6d 	.word	0x08007c6d
 8007bb0:	08007e43 	.word	0x08007e43
 8007bb4:	08007e43 	.word	0x08007e43
 8007bb8:	08007de3 	.word	0x08007de3
 8007bbc:	08007e0f 	.word	0x08007e0f
 8007bc0:	08007e43 	.word	0x08007e43
 8007bc4:	08007e43 	.word	0x08007e43
 8007bc8:	08007e43 	.word	0x08007e43
 8007bcc:	08007e43 	.word	0x08007e43
 8007bd0:	08007e43 	.word	0x08007e43
 8007bd4:	08007e43 	.word	0x08007e43
 8007bd8:	08007e43 	.word	0x08007e43
 8007bdc:	08007be1 	.word	0x08007be1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00b      	beq.n	8007c04 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	7c12      	ldrb	r2, [r2, #16]
 8007bf8:	f107 0108 	add.w	r1, r7, #8
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
 8007c00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c02:	e126      	b.n	8007e52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fb0e 	bl	8008228 <USBD_CtlError>
        err++;
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	72fb      	strb	r3, [r7, #11]
      break;
 8007c12:	e11e      	b.n	8007e52 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	7c12      	ldrb	r2, [r2, #16]
 8007c20:	f107 0108 	add.w	r1, r7, #8
 8007c24:	4610      	mov	r0, r2
 8007c26:	4798      	blx	r3
 8007c28:	60f8      	str	r0, [r7, #12]
      break;
 8007c2a:	e112      	b.n	8007e52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	7c1b      	ldrb	r3, [r3, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10d      	bne.n	8007c50 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3c:	f107 0208 	add.w	r2, r7, #8
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
 8007c44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c4e:	e100      	b.n	8007e52 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	f107 0208 	add.w	r2, r7, #8
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
 8007c60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3301      	adds	r3, #1
 8007c66:	2202      	movs	r2, #2
 8007c68:	701a      	strb	r2, [r3, #0]
      break;
 8007c6a:	e0f2      	b.n	8007e52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	885b      	ldrh	r3, [r3, #2]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	f200 80ac 	bhi.w	8007dd0 <USBD_GetDescriptor+0x258>
 8007c78:	a201      	add	r2, pc, #4	@ (adr r2, 8007c80 <USBD_GetDescriptor+0x108>)
 8007c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7e:	bf00      	nop
 8007c80:	08007c99 	.word	0x08007c99
 8007c84:	08007ccd 	.word	0x08007ccd
 8007c88:	08007d01 	.word	0x08007d01
 8007c8c:	08007d35 	.word	0x08007d35
 8007c90:	08007d69 	.word	0x08007d69
 8007c94:	08007d9d 	.word	0x08007d9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	7c12      	ldrb	r2, [r2, #16]
 8007cb0:	f107 0108 	add.w	r1, r7, #8
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
 8007cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cba:	e091      	b.n	8007de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fab2 	bl	8008228 <USBD_CtlError>
            err++;
 8007cc4:	7afb      	ldrb	r3, [r7, #11]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cca:	e089      	b.n	8007de0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	7c12      	ldrb	r2, [r2, #16]
 8007ce4:	f107 0108 	add.w	r1, r7, #8
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cee:	e077      	b.n	8007de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fa98 	bl	8008228 <USBD_CtlError>
            err++;
 8007cf8:	7afb      	ldrb	r3, [r7, #11]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cfe:	e06f      	b.n	8007de0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	7c12      	ldrb	r2, [r2, #16]
 8007d18:	f107 0108 	add.w	r1, r7, #8
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4798      	blx	r3
 8007d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d22:	e05d      	b.n	8007de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa7e 	bl	8008228 <USBD_CtlError>
            err++;
 8007d2c:	7afb      	ldrb	r3, [r7, #11]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	72fb      	strb	r3, [r7, #11]
          break;
 8007d32:	e055      	b.n	8007de0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	7c12      	ldrb	r2, [r2, #16]
 8007d4c:	f107 0108 	add.w	r1, r7, #8
 8007d50:	4610      	mov	r0, r2
 8007d52:	4798      	blx	r3
 8007d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d56:	e043      	b.n	8007de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fa64 	bl	8008228 <USBD_CtlError>
            err++;
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	3301      	adds	r3, #1
 8007d64:	72fb      	strb	r3, [r7, #11]
          break;
 8007d66:	e03b      	b.n	8007de0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	7c12      	ldrb	r2, [r2, #16]
 8007d80:	f107 0108 	add.w	r1, r7, #8
 8007d84:	4610      	mov	r0, r2
 8007d86:	4798      	blx	r3
 8007d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d8a:	e029      	b.n	8007de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa4a 	bl	8008228 <USBD_CtlError>
            err++;
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	3301      	adds	r3, #1
 8007d98:	72fb      	strb	r3, [r7, #11]
          break;
 8007d9a:	e021      	b.n	8007de0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	7c12      	ldrb	r2, [r2, #16]
 8007db4:	f107 0108 	add.w	r1, r7, #8
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dbe:	e00f      	b.n	8007de0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa30 	bl	8008228 <USBD_CtlError>
            err++;
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dce:	e007      	b.n	8007de0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fa28 	bl	8008228 <USBD_CtlError>
          err++;
 8007dd8:	7afb      	ldrb	r3, [r7, #11]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007dde:	bf00      	nop
      }
      break;
 8007de0:	e037      	b.n	8007e52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	7c1b      	ldrb	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df2:	f107 0208 	add.w	r2, r7, #8
 8007df6:	4610      	mov	r0, r2
 8007df8:	4798      	blx	r3
 8007dfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dfc:	e029      	b.n	8007e52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fa11 	bl	8008228 <USBD_CtlError>
        err++;
 8007e06:	7afb      	ldrb	r3, [r7, #11]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e0c:	e021      	b.n	8007e52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	7c1b      	ldrb	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10d      	bne.n	8007e32 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1e:	f107 0208 	add.w	r2, r7, #8
 8007e22:	4610      	mov	r0, r2
 8007e24:	4798      	blx	r3
 8007e26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	2207      	movs	r2, #7
 8007e2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e30:	e00f      	b.n	8007e52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f9f7 	bl	8008228 <USBD_CtlError>
        err++;
 8007e3a:	7afb      	ldrb	r3, [r7, #11]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e40:	e007      	b.n	8007e52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f9ef 	bl	8008228 <USBD_CtlError>
      err++;
 8007e4a:	7afb      	ldrb	r3, [r7, #11]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e50:	bf00      	nop
  }

  if (err != 0U)
 8007e52:	7afb      	ldrb	r3, [r7, #11]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d11e      	bne.n	8007e96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	88db      	ldrh	r3, [r3, #6]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d016      	beq.n	8007e8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007e60:	893b      	ldrh	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00e      	beq.n	8007e84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	88da      	ldrh	r2, [r3, #6]
 8007e6a:	893b      	ldrh	r3, [r7, #8]
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	bf28      	it	cs
 8007e70:	4613      	movcs	r3, r2
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e76:	893b      	ldrh	r3, [r7, #8]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	68f9      	ldr	r1, [r7, #12]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fa44 	bl	800830a <USBD_CtlSendData>
 8007e82:	e009      	b.n	8007e98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f9ce 	bl	8008228 <USBD_CtlError>
 8007e8c:	e004      	b.n	8007e98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa95 	bl	80083be <USBD_CtlSendStatus>
 8007e94:	e000      	b.n	8007e98 <USBD_GetDescriptor+0x320>
    return;
 8007e96:	bf00      	nop
  }
}
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop

08007ea0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	889b      	ldrh	r3, [r3, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d131      	bne.n	8007f16 <USBD_SetAddress+0x76>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	88db      	ldrh	r3, [r3, #6]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d12d      	bne.n	8007f16 <USBD_SetAddress+0x76>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	885b      	ldrh	r3, [r3, #2]
 8007ebe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ec0:	d829      	bhi.n	8007f16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	885b      	ldrh	r3, [r3, #2]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ecc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d104      	bne.n	8007ee4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f9a3 	bl	8008228 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee2:	e01d      	b.n	8007f20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	7bfa      	ldrb	r2, [r7, #15]
 8007ee8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f003 fc61 	bl	800b7b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa61 	bl	80083be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d004      	beq.n	8007f0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0a:	e009      	b.n	8007f20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f14:	e004      	b.n	8007f20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f985 	bl	8008228 <USBD_CtlError>
  }
}
 8007f1e:	bf00      	nop
 8007f20:	bf00      	nop
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	885b      	ldrh	r3, [r3, #2]
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	4b4c      	ldr	r3, [pc, #304]	@ (8008070 <USBD_SetConfig+0x148>)
 8007f3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f40:	4b4b      	ldr	r3, [pc, #300]	@ (8008070 <USBD_SetConfig+0x148>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d905      	bls.n	8007f54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f96c 	bl	8008228 <USBD_CtlError>
    return USBD_FAIL;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e088      	b.n	8008066 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d002      	beq.n	8007f66 <USBD_SetConfig+0x3e>
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d025      	beq.n	8007fb0 <USBD_SetConfig+0x88>
 8007f64:	e071      	b.n	800804a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f66:	4b42      	ldr	r3, [pc, #264]	@ (8008070 <USBD_SetConfig+0x148>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d01c      	beq.n	8007fa8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007f6e:	4b40      	ldr	r3, [pc, #256]	@ (8008070 <USBD_SetConfig+0x148>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f78:	4b3d      	ldr	r3, [pc, #244]	@ (8008070 <USBD_SetConfig+0x148>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7ff f992 	bl	80072a8 <USBD_SetClassConfig>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d004      	beq.n	8007f98 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f949 	bl	8008228 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f96:	e065      	b.n	8008064 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa10 	bl	80083be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007fa6:	e05d      	b.n	8008064 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fa08 	bl	80083be <USBD_CtlSendStatus>
      break;
 8007fae:	e059      	b.n	8008064 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8008070 <USBD_SetConfig+0x148>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d112      	bne.n	8007fde <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8008070 <USBD_SetConfig+0x148>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fca:	4b29      	ldr	r3, [pc, #164]	@ (8008070 <USBD_SetConfig+0x148>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff f985 	bl	80072e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f9f1 	bl	80083be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fdc:	e042      	b.n	8008064 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007fde:	4b24      	ldr	r3, [pc, #144]	@ (8008070 <USBD_SetConfig+0x148>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d02a      	beq.n	8008042 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff f973 	bl	80072e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8008070 <USBD_SetConfig+0x148>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	461a      	mov	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008004:	4b1a      	ldr	r3, [pc, #104]	@ (8008070 <USBD_SetConfig+0x148>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff f94c 	bl	80072a8 <USBD_SetClassConfig>
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00f      	beq.n	800803a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f903 	bl	8008228 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff f958 	bl	80072e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008038:	e014      	b.n	8008064 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f9bf 	bl	80083be <USBD_CtlSendStatus>
      break;
 8008040:	e010      	b.n	8008064 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f9bb 	bl	80083be <USBD_CtlSendStatus>
      break;
 8008048:	e00c      	b.n	8008064 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f8eb 	bl	8008228 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008052:	4b07      	ldr	r3, [pc, #28]	@ (8008070 <USBD_SetConfig+0x148>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7ff f941 	bl	80072e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800805e:	2303      	movs	r3, #3
 8008060:	73fb      	strb	r3, [r7, #15]
      break;
 8008062:	bf00      	nop
  }

  return ret;
 8008064:	7bfb      	ldrb	r3, [r7, #15]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000348 	.word	0x20000348

08008074 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	88db      	ldrh	r3, [r3, #6]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d004      	beq.n	8008090 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f8cd 	bl	8008228 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800808e:	e023      	b.n	80080d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b02      	cmp	r3, #2
 800809a:	dc02      	bgt.n	80080a2 <USBD_GetConfig+0x2e>
 800809c:	2b00      	cmp	r3, #0
 800809e:	dc03      	bgt.n	80080a8 <USBD_GetConfig+0x34>
 80080a0:	e015      	b.n	80080ce <USBD_GetConfig+0x5a>
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d00b      	beq.n	80080be <USBD_GetConfig+0x4a>
 80080a6:	e012      	b.n	80080ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3308      	adds	r3, #8
 80080b2:	2201      	movs	r2, #1
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f927 	bl	800830a <USBD_CtlSendData>
        break;
 80080bc:	e00c      	b.n	80080d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3304      	adds	r3, #4
 80080c2:	2201      	movs	r2, #1
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f91f 	bl	800830a <USBD_CtlSendData>
        break;
 80080cc:	e004      	b.n	80080d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f8a9 	bl	8008228 <USBD_CtlError>
        break;
 80080d6:	bf00      	nop
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d81e      	bhi.n	8008136 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	88db      	ldrh	r3, [r3, #6]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d004      	beq.n	800810a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f890 	bl	8008228 <USBD_CtlError>
        break;
 8008108:	e01a      	b.n	8008140 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f043 0202 	orr.w	r2, r3, #2
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	330c      	adds	r3, #12
 800812a:	2202      	movs	r2, #2
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f8eb 	bl	800830a <USBD_CtlSendData>
      break;
 8008134:	e004      	b.n	8008140 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f875 	bl	8008228 <USBD_CtlError>
      break;
 800813e:	bf00      	nop
  }
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d106      	bne.n	8008168 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f92b 	bl	80083be <USBD_CtlSendStatus>
  }
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008180:	b2db      	uxtb	r3, r3
 8008182:	3b01      	subs	r3, #1
 8008184:	2b02      	cmp	r3, #2
 8008186:	d80b      	bhi.n	80081a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	885b      	ldrh	r3, [r3, #2]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d10c      	bne.n	80081aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f910 	bl	80083be <USBD_CtlSendStatus>
      }
      break;
 800819e:	e004      	b.n	80081aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f840 	bl	8008228 <USBD_CtlError>
      break;
 80081a8:	e000      	b.n	80081ac <USBD_ClrFeature+0x3c>
      break;
 80081aa:	bf00      	nop
  }
}
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	781a      	ldrb	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3301      	adds	r3, #1
 80081ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	781a      	ldrb	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3301      	adds	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f7ff fa92 	bl	8007708 <SWAPBYTE>
 80081e4:	4603      	mov	r3, r0
 80081e6:	461a      	mov	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3301      	adds	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7ff fa85 	bl	8007708 <SWAPBYTE>
 80081fe:	4603      	mov	r3, r0
 8008200:	461a      	mov	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3301      	adds	r3, #1
 8008210:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7ff fa78 	bl	8007708 <SWAPBYTE>
 8008218:	4603      	mov	r3, r0
 800821a:	461a      	mov	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	80da      	strh	r2, [r3, #6]
}
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008232:	2180      	movs	r1, #128	@ 0x80
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f003 fa55 	bl	800b6e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800823a:	2100      	movs	r1, #0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f003 fa51 	bl	800b6e4 <USBD_LL_StallEP>
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b086      	sub	sp, #24
 800824e:	af00      	add	r7, sp, #0
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d036      	beq.n	80082ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008264:	6938      	ldr	r0, [r7, #16]
 8008266:	f000 f836 	bl	80082d6 <USBD_GetLen>
 800826a:	4603      	mov	r3, r0
 800826c:	3301      	adds	r3, #1
 800826e:	b29b      	uxth	r3, r3
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008278:	7dfb      	ldrb	r3, [r7, #23]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	4413      	add	r3, r2
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	7812      	ldrb	r2, [r2, #0]
 8008282:	701a      	strb	r2, [r3, #0]
  idx++;
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	3301      	adds	r3, #1
 8008288:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	4413      	add	r3, r2
 8008290:	2203      	movs	r2, #3
 8008292:	701a      	strb	r2, [r3, #0]
  idx++;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	3301      	adds	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800829a:	e013      	b.n	80082c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	4413      	add	r3, r2
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	7812      	ldrb	r2, [r2, #0]
 80082a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	3301      	adds	r3, #1
 80082ac:	613b      	str	r3, [r7, #16]
    idx++;
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	3301      	adds	r3, #1
 80082b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	4413      	add	r3, r2
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	3301      	adds	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e7      	bne.n	800829c <USBD_GetString+0x52>
 80082cc:	e000      	b.n	80082d0 <USBD_GetString+0x86>
    return;
 80082ce:	bf00      	nop
  }
}
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b085      	sub	sp, #20
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80082e6:	e005      	b.n	80082f4 <USBD_GetLen+0x1e>
  {
    len++;
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	3301      	adds	r3, #1
 80082ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	3301      	adds	r3, #1
 80082f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f5      	bne.n	80082e8 <USBD_GetLen+0x12>
  }

  return len;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2202      	movs	r2, #2
 800831a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	2100      	movs	r1, #0
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f003 fa60 	bl	800b7f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	2100      	movs	r1, #0
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f003 fa4f 	bl	800b7f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2203      	movs	r2, #3
 8008372:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	2100      	movs	r1, #0
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f003 fa53 	bl	800b838 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	2100      	movs	r1, #0
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f003 fa42 	bl	800b838 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2204      	movs	r2, #4
 80083ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083ce:	2300      	movs	r3, #0
 80083d0:	2200      	movs	r2, #0
 80083d2:	2100      	movs	r1, #0
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f003 fa0e 	bl	800b7f6 <USBD_LL_Transmit>

  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2205      	movs	r2, #5
 80083f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083f4:	2300      	movs	r3, #0
 80083f6:	2200      	movs	r2, #0
 80083f8:	2100      	movs	r1, #0
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f003 fa1c 	bl	800b838 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <__NVIC_SetPriority>:
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800841c:	2b00      	cmp	r3, #0
 800841e:	db0a      	blt.n	8008436 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	b2da      	uxtb	r2, r3
 8008424:	490c      	ldr	r1, [pc, #48]	@ (8008458 <__NVIC_SetPriority+0x4c>)
 8008426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800842a:	0112      	lsls	r2, r2, #4
 800842c:	b2d2      	uxtb	r2, r2
 800842e:	440b      	add	r3, r1
 8008430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008434:	e00a      	b.n	800844c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	b2da      	uxtb	r2, r3
 800843a:	4908      	ldr	r1, [pc, #32]	@ (800845c <__NVIC_SetPriority+0x50>)
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	f003 030f 	and.w	r3, r3, #15
 8008442:	3b04      	subs	r3, #4
 8008444:	0112      	lsls	r2, r2, #4
 8008446:	b2d2      	uxtb	r2, r2
 8008448:	440b      	add	r3, r1
 800844a:	761a      	strb	r2, [r3, #24]
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	e000e100 	.word	0xe000e100
 800845c:	e000ed00 	.word	0xe000ed00

08008460 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008464:	2100      	movs	r1, #0
 8008466:	f06f 0004 	mvn.w	r0, #4
 800846a:	f7ff ffcf 	bl	800840c <__NVIC_SetPriority>
#endif
}
 800846e:	bf00      	nop
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800847a:	f3ef 8305 	mrs	r3, IPSR
 800847e:	603b      	str	r3, [r7, #0]
  return(result);
 8008480:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008486:	f06f 0305 	mvn.w	r3, #5
 800848a:	607b      	str	r3, [r7, #4]
 800848c:	e00c      	b.n	80084a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800848e:	4b0a      	ldr	r3, [pc, #40]	@ (80084b8 <osKernelInitialize+0x44>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d105      	bne.n	80084a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008496:	4b08      	ldr	r3, [pc, #32]	@ (80084b8 <osKernelInitialize+0x44>)
 8008498:	2201      	movs	r2, #1
 800849a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800849c:	2300      	movs	r3, #0
 800849e:	607b      	str	r3, [r7, #4]
 80084a0:	e002      	b.n	80084a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80084a2:	f04f 33ff 	mov.w	r3, #4294967295
 80084a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084a8:	687b      	ldr	r3, [r7, #4]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	2000034c 	.word	0x2000034c

080084bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084c2:	f3ef 8305 	mrs	r3, IPSR
 80084c6:	603b      	str	r3, [r7, #0]
  return(result);
 80084c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80084ce:	f06f 0305 	mvn.w	r3, #5
 80084d2:	607b      	str	r3, [r7, #4]
 80084d4:	e010      	b.n	80084f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80084d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008504 <osKernelStart+0x48>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d109      	bne.n	80084f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80084de:	f7ff ffbf 	bl	8008460 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80084e2:	4b08      	ldr	r3, [pc, #32]	@ (8008504 <osKernelStart+0x48>)
 80084e4:	2202      	movs	r2, #2
 80084e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80084e8:	f001 f892 	bl	8009610 <vTaskStartScheduler>
      stat = osOK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	607b      	str	r3, [r7, #4]
 80084f0:	e002      	b.n	80084f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80084f2:	f04f 33ff 	mov.w	r3, #4294967295
 80084f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084f8:	687b      	ldr	r3, [r7, #4]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	2000034c 	.word	0x2000034c

08008508 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008508:	b580      	push	{r7, lr}
 800850a:	b08e      	sub	sp, #56	@ 0x38
 800850c:	af04      	add	r7, sp, #16
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008514:	2300      	movs	r3, #0
 8008516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008518:	f3ef 8305 	mrs	r3, IPSR
 800851c:	617b      	str	r3, [r7, #20]
  return(result);
 800851e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008520:	2b00      	cmp	r3, #0
 8008522:	d17e      	bne.n	8008622 <osThreadNew+0x11a>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d07b      	beq.n	8008622 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800852a:	2380      	movs	r3, #128	@ 0x80
 800852c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800852e:	2318      	movs	r3, #24
 8008530:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008536:	f04f 33ff 	mov.w	r3, #4294967295
 800853a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d045      	beq.n	80085ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <osThreadNew+0x48>
        name = attr->name;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d008      	beq.n	8008576 <osThreadNew+0x6e>
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	2b38      	cmp	r3, #56	@ 0x38
 8008568:	d805      	bhi.n	8008576 <osThreadNew+0x6e>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <osThreadNew+0x72>
        return (NULL);
 8008576:	2300      	movs	r3, #0
 8008578:	e054      	b.n	8008624 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	089b      	lsrs	r3, r3, #2
 8008588:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00e      	beq.n	80085b0 <osThreadNew+0xa8>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	2ba7      	cmp	r3, #167	@ 0xa7
 8008598:	d90a      	bls.n	80085b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d006      	beq.n	80085b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <osThreadNew+0xa8>
        mem = 1;
 80085aa:	2301      	movs	r3, #1
 80085ac:	61bb      	str	r3, [r7, #24]
 80085ae:	e010      	b.n	80085d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10c      	bne.n	80085d2 <osThreadNew+0xca>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d108      	bne.n	80085d2 <osThreadNew+0xca>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d104      	bne.n	80085d2 <osThreadNew+0xca>
          mem = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61bb      	str	r3, [r7, #24]
 80085cc:	e001      	b.n	80085d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d110      	bne.n	80085fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085e0:	9202      	str	r2, [sp, #8]
 80085e2:	9301      	str	r3, [sp, #4]
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	6a3a      	ldr	r2, [r7, #32]
 80085ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 fe1a 	bl	8009228 <xTaskCreateStatic>
 80085f4:	4603      	mov	r3, r0
 80085f6:	613b      	str	r3, [r7, #16]
 80085f8:	e013      	b.n	8008622 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d110      	bne.n	8008622 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	b29a      	uxth	r2, r3
 8008604:	f107 0310 	add.w	r3, r7, #16
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 fe68 	bl	80092e8 <xTaskCreate>
 8008618:	4603      	mov	r3, r0
 800861a:	2b01      	cmp	r3, #1
 800861c:	d001      	beq.n	8008622 <osThreadNew+0x11a>
            hTask = NULL;
 800861e:	2300      	movs	r3, #0
 8008620:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008622:	693b      	ldr	r3, [r7, #16]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3728      	adds	r7, #40	@ 0x28
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008634:	f3ef 8305 	mrs	r3, IPSR
 8008638:	60bb      	str	r3, [r7, #8]
  return(result);
 800863a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <osDelay+0x1c>
    stat = osErrorISR;
 8008640:	f06f 0305 	mvn.w	r3, #5
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	e007      	b.n	8008658 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008648:	2300      	movs	r3, #0
 800864a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 ffa6 	bl	80095a4 <vTaskDelay>
    }
  }

  return (stat);
 8008658:	68fb      	ldr	r3, [r7, #12]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4a07      	ldr	r2, [pc, #28]	@ (8008690 <vApplicationGetIdleTaskMemory+0x2c>)
 8008674:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	4a06      	ldr	r2, [pc, #24]	@ (8008694 <vApplicationGetIdleTaskMemory+0x30>)
 800867a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2280      	movs	r2, #128	@ 0x80
 8008680:	601a      	str	r2, [r3, #0]
}
 8008682:	bf00      	nop
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20000350 	.word	0x20000350
 8008694:	200003f8 	.word	0x200003f8

08008698 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4a07      	ldr	r2, [pc, #28]	@ (80086c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80086a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	4a06      	ldr	r2, [pc, #24]	@ (80086c8 <vApplicationGetTimerTaskMemory+0x30>)
 80086ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086b6:	601a      	str	r2, [r3, #0]
}
 80086b8:	bf00      	nop
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	200005f8 	.word	0x200005f8
 80086c8:	200006a0 	.word	0x200006a0

080086cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f103 0208 	add.w	r2, r3, #8
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f04f 32ff 	mov.w	r2, #4294967295
 80086e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f103 0208 	add.w	r2, r3, #8
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f103 0208 	add.w	r2, r3, #8
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800871a:	bf00      	nop
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008726:	b480      	push	{r7}
 8008728:	b085      	sub	sp, #20
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	601a      	str	r2, [r3, #0]
}
 8008762:	bf00      	nop
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800876e:	b480      	push	{r7}
 8008770:	b085      	sub	sp, #20
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008784:	d103      	bne.n	800878e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	e00c      	b.n	80087a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3308      	adds	r3, #8
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e002      	b.n	800879c <vListInsert+0x2e>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d2f6      	bcs.n	8008796 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	601a      	str	r2, [r3, #0]
}
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6892      	ldr	r2, [r2, #8]
 80087f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	6852      	ldr	r2, [r2, #4]
 8008800:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d103      	bne.n	8008814 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	1e5a      	subs	r2, r3, #1
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10b      	bne.n	8008860 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800885a:	bf00      	nop
 800885c:	bf00      	nop
 800885e:	e7fd      	b.n	800885c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008860:	f002 f8aa 	bl	800a9b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800886c:	68f9      	ldr	r1, [r7, #12]
 800886e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008870:	fb01 f303 	mul.w	r3, r1, r3
 8008874:	441a      	add	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008890:	3b01      	subs	r3, #1
 8008892:	68f9      	ldr	r1, [r7, #12]
 8008894:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008896:	fb01 f303 	mul.w	r3, r1, r3
 800889a:	441a      	add	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	22ff      	movs	r2, #255	@ 0xff
 80088a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	22ff      	movs	r2, #255	@ 0xff
 80088ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d114      	bne.n	80088e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d01a      	beq.n	80088f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3310      	adds	r3, #16
 80088c2:	4618      	mov	r0, r3
 80088c4:	f001 f942 	bl	8009b4c <xTaskRemoveFromEventList>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d012      	beq.n	80088f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80088ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008904 <xQueueGenericReset+0xd0>)
 80088d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	e009      	b.n	80088f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3310      	adds	r3, #16
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7ff fef1 	bl	80086cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3324      	adds	r3, #36	@ 0x24
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7ff feec 	bl	80086cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80088f4:	f002 f892 	bl	800aa1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80088f8:	2301      	movs	r3, #1
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	e000ed04 	.word	0xe000ed04

08008908 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08e      	sub	sp, #56	@ 0x38
 800890c:	af02      	add	r7, sp, #8
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10b      	bne.n	8008934 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800892e:	bf00      	nop
 8008930:	bf00      	nop
 8008932:	e7fd      	b.n	8008930 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10b      	bne.n	8008952 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800893a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800894c:	bf00      	nop
 800894e:	bf00      	nop
 8008950:	e7fd      	b.n	800894e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <xQueueGenericCreateStatic+0x56>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <xQueueGenericCreateStatic+0x5a>
 800895e:	2301      	movs	r3, #1
 8008960:	e000      	b.n	8008964 <xQueueGenericCreateStatic+0x5c>
 8008962:	2300      	movs	r3, #0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10b      	bne.n	8008980 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	623b      	str	r3, [r7, #32]
}
 800897a:	bf00      	nop
 800897c:	bf00      	nop
 800897e:	e7fd      	b.n	800897c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d102      	bne.n	800898c <xQueueGenericCreateStatic+0x84>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <xQueueGenericCreateStatic+0x88>
 800898c:	2301      	movs	r3, #1
 800898e:	e000      	b.n	8008992 <xQueueGenericCreateStatic+0x8a>
 8008990:	2300      	movs	r3, #0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10b      	bne.n	80089ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	61fb      	str	r3, [r7, #28]
}
 80089a8:	bf00      	nop
 80089aa:	bf00      	nop
 80089ac:	e7fd      	b.n	80089aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80089ae:	2350      	movs	r3, #80	@ 0x50
 80089b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b50      	cmp	r3, #80	@ 0x50
 80089b6:	d00b      	beq.n	80089d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	61bb      	str	r3, [r7, #24]
}
 80089ca:	bf00      	nop
 80089cc:	bf00      	nop
 80089ce:	e7fd      	b.n	80089cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80089d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00d      	beq.n	80089f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80089dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80089e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	4613      	mov	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 f805 	bl	8008a02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3730      	adds	r7, #48	@ 0x30
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b084      	sub	sp, #16
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	60f8      	str	r0, [r7, #12]
 8008a0a:	60b9      	str	r1, [r7, #8]
 8008a0c:	607a      	str	r2, [r7, #4]
 8008a0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d103      	bne.n	8008a1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	e002      	b.n	8008a24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a30:	2101      	movs	r1, #1
 8008a32:	69b8      	ldr	r0, [r7, #24]
 8008a34:	f7ff fefe 	bl	8008834 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	78fa      	ldrb	r2, [r7, #3]
 8008a3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08e      	sub	sp, #56	@ 0x38
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a56:	2300      	movs	r3, #0
 8008a58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10b      	bne.n	8008a7c <xQueueGenericSend+0x34>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a76:	bf00      	nop
 8008a78:	bf00      	nop
 8008a7a:	e7fd      	b.n	8008a78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d103      	bne.n	8008a8a <xQueueGenericSend+0x42>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <xQueueGenericSend+0x46>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e000      	b.n	8008a90 <xQueueGenericSend+0x48>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10b      	bne.n	8008aac <xQueueGenericSend+0x64>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
 8008aaa:	e7fd      	b.n	8008aa8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d103      	bne.n	8008aba <xQueueGenericSend+0x72>
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d101      	bne.n	8008abe <xQueueGenericSend+0x76>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <xQueueGenericSend+0x78>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10b      	bne.n	8008adc <xQueueGenericSend+0x94>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	623b      	str	r3, [r7, #32]
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	e7fd      	b.n	8008ad8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008adc:	f001 f9fc 	bl	8009ed8 <xTaskGetSchedulerState>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <xQueueGenericSend+0xa4>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <xQueueGenericSend+0xa8>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e000      	b.n	8008af2 <xQueueGenericSend+0xaa>
 8008af0:	2300      	movs	r3, #0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10b      	bne.n	8008b0e <xQueueGenericSend+0xc6>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	61fb      	str	r3, [r7, #28]
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	e7fd      	b.n	8008b0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b0e:	f001 ff53 	bl	800a9b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d302      	bcc.n	8008b24 <xQueueGenericSend+0xdc>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d129      	bne.n	8008b78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b2a:	f000 fa0f 	bl	8008f4c <prvCopyDataToQueue>
 8008b2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d010      	beq.n	8008b5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	3324      	adds	r3, #36	@ 0x24
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 f805 	bl	8009b4c <xTaskRemoveFromEventList>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d013      	beq.n	8008b70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b48:	4b3f      	ldr	r3, [pc, #252]	@ (8008c48 <xQueueGenericSend+0x200>)
 8008b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	e00a      	b.n	8008b70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d007      	beq.n	8008b70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b60:	4b39      	ldr	r3, [pc, #228]	@ (8008c48 <xQueueGenericSend+0x200>)
 8008b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b70:	f001 ff54 	bl	800aa1c <vPortExitCritical>
				return pdPASS;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e063      	b.n	8008c40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d103      	bne.n	8008b86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b7e:	f001 ff4d 	bl	800aa1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e05c      	b.n	8008c40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d106      	bne.n	8008b9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	4618      	mov	r0, r3
 8008b92:	f001 f83f 	bl	8009c14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b96:	2301      	movs	r3, #1
 8008b98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b9a:	f001 ff3f 	bl	800aa1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b9e:	f000 fda7 	bl	80096f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ba2:	f001 ff09 	bl	800a9b8 <vPortEnterCritical>
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bac:	b25b      	sxtb	r3, r3
 8008bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb2:	d103      	bne.n	8008bbc <xQueueGenericSend+0x174>
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bc2:	b25b      	sxtb	r3, r3
 8008bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc8:	d103      	bne.n	8008bd2 <xQueueGenericSend+0x18a>
 8008bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bd2:	f001 ff23 	bl	800aa1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bd6:	1d3a      	adds	r2, r7, #4
 8008bd8:	f107 0314 	add.w	r3, r7, #20
 8008bdc:	4611      	mov	r1, r2
 8008bde:	4618      	mov	r0, r3
 8008be0:	f001 f82e 	bl	8009c40 <xTaskCheckForTimeOut>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d124      	bne.n	8008c34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008bea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bec:	f000 faa6 	bl	800913c <prvIsQueueFull>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d018      	beq.n	8008c28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	3310      	adds	r3, #16
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 ff52 	bl	8009aa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c06:	f000 fa31 	bl	800906c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c0a:	f000 fd7f 	bl	800970c <xTaskResumeAll>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f47f af7c 	bne.w	8008b0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008c16:	4b0c      	ldr	r3, [pc, #48]	@ (8008c48 <xQueueGenericSend+0x200>)
 8008c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c1c:	601a      	str	r2, [r3, #0]
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	e772      	b.n	8008b0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c2a:	f000 fa1f 	bl	800906c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c2e:	f000 fd6d 	bl	800970c <xTaskResumeAll>
 8008c32:	e76c      	b.n	8008b0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c36:	f000 fa19 	bl	800906c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c3a:	f000 fd67 	bl	800970c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3738      	adds	r7, #56	@ 0x38
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b090      	sub	sp, #64	@ 0x40
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10b      	bne.n	8008c7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c76:	bf00      	nop
 8008c78:	bf00      	nop
 8008c7a:	e7fd      	b.n	8008c78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <xQueueGenericSendFromISR+0x3e>
 8008c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <xQueueGenericSendFromISR+0x42>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e000      	b.n	8008c90 <xQueueGenericSendFromISR+0x44>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10b      	bne.n	8008cac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
 8008caa:	e7fd      	b.n	8008ca8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d103      	bne.n	8008cba <xQueueGenericSendFromISR+0x6e>
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d101      	bne.n	8008cbe <xQueueGenericSendFromISR+0x72>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e000      	b.n	8008cc0 <xQueueGenericSendFromISR+0x74>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10b      	bne.n	8008cdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	623b      	str	r3, [r7, #32]
}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	e7fd      	b.n	8008cd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cdc:	f001 ff4c 	bl	800ab78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ce0:	f3ef 8211 	mrs	r2, BASEPRI
 8008ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	61fa      	str	r2, [r7, #28]
 8008cf6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008cf8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cfa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d302      	bcc.n	8008d0e <xQueueGenericSendFromISR+0xc2>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d12f      	bne.n	8008d6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d24:	f000 f912 	bl	8008f4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d30:	d112      	bne.n	8008d58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d016      	beq.n	8008d68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3c:	3324      	adds	r3, #36	@ 0x24
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 ff04 	bl	8009b4c <xTaskRemoveFromEventList>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00e      	beq.n	8008d68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00b      	beq.n	8008d68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	e007      	b.n	8008d68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	b25a      	sxtb	r2, r3
 8008d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008d6c:	e001      	b.n	8008d72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3740      	adds	r7, #64	@ 0x40
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08c      	sub	sp, #48	@ 0x30
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d94:	2300      	movs	r3, #0
 8008d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10b      	bne.n	8008dba <xQueueReceive+0x32>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	623b      	str	r3, [r7, #32]
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop
 8008db8:	e7fd      	b.n	8008db6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d103      	bne.n	8008dc8 <xQueueReceive+0x40>
 8008dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <xQueueReceive+0x44>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e000      	b.n	8008dce <xQueueReceive+0x46>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10b      	bne.n	8008dea <xQueueReceive+0x62>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	61fb      	str	r3, [r7, #28]
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop
 8008de8:	e7fd      	b.n	8008de6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dea:	f001 f875 	bl	8009ed8 <xTaskGetSchedulerState>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d102      	bne.n	8008dfa <xQueueReceive+0x72>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <xQueueReceive+0x76>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e000      	b.n	8008e00 <xQueueReceive+0x78>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10b      	bne.n	8008e1c <xQueueReceive+0x94>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	61bb      	str	r3, [r7, #24]
}
 8008e16:	bf00      	nop
 8008e18:	bf00      	nop
 8008e1a:	e7fd      	b.n	8008e18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e1c:	f001 fdcc 	bl	800a9b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01f      	beq.n	8008e6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e30:	f000 f8f6 	bl	8009020 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e36:	1e5a      	subs	r2, r3, #1
 8008e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00f      	beq.n	8008e64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e46:	3310      	adds	r3, #16
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 fe7f 	bl	8009b4c <xTaskRemoveFromEventList>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d007      	beq.n	8008e64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e54:	4b3c      	ldr	r3, [pc, #240]	@ (8008f48 <xQueueReceive+0x1c0>)
 8008e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e64:	f001 fdda 	bl	800aa1c <vPortExitCritical>
				return pdPASS;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e069      	b.n	8008f40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d103      	bne.n	8008e7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e72:	f001 fdd3 	bl	800aa1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e76:	2300      	movs	r3, #0
 8008e78:	e062      	b.n	8008f40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d106      	bne.n	8008e8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e80:	f107 0310 	add.w	r3, r7, #16
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 fec5 	bl	8009c14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e8e:	f001 fdc5 	bl	800aa1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e92:	f000 fc2d 	bl	80096f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e96:	f001 fd8f 	bl	800a9b8 <vPortEnterCritical>
 8008e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ea0:	b25b      	sxtb	r3, r3
 8008ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea6:	d103      	bne.n	8008eb0 <xQueueReceive+0x128>
 8008ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008eb6:	b25b      	sxtb	r3, r3
 8008eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebc:	d103      	bne.n	8008ec6 <xQueueReceive+0x13e>
 8008ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ec6:	f001 fda9 	bl	800aa1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008eca:	1d3a      	adds	r2, r7, #4
 8008ecc:	f107 0310 	add.w	r3, r7, #16
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 feb4 	bl	8009c40 <xTaskCheckForTimeOut>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d123      	bne.n	8008f26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ee0:	f000 f916 	bl	8009110 <prvIsQueueEmpty>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d017      	beq.n	8008f1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eec:	3324      	adds	r3, #36	@ 0x24
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fdd8 	bl	8009aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ef8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008efa:	f000 f8b7 	bl	800906c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008efe:	f000 fc05 	bl	800970c <xTaskResumeAll>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d189      	bne.n	8008e1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008f08:	4b0f      	ldr	r3, [pc, #60]	@ (8008f48 <xQueueReceive+0x1c0>)
 8008f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	e780      	b.n	8008e1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f1c:	f000 f8a6 	bl	800906c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f20:	f000 fbf4 	bl	800970c <xTaskResumeAll>
 8008f24:	e77a      	b.n	8008e1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f28:	f000 f8a0 	bl	800906c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f2c:	f000 fbee 	bl	800970c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f32:	f000 f8ed 	bl	8009110 <prvIsQueueEmpty>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f43f af6f 	beq.w	8008e1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3730      	adds	r7, #48	@ 0x30
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	e000ed04 	.word	0xe000ed04

08008f4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10d      	bne.n	8008f86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d14d      	bne.n	800900e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 ffcc 	bl	8009f14 <xTaskPriorityDisinherit>
 8008f7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	609a      	str	r2, [r3, #8]
 8008f84:	e043      	b.n	800900e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d119      	bne.n	8008fc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6858      	ldr	r0, [r3, #4]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f94:	461a      	mov	r2, r3
 8008f96:	68b9      	ldr	r1, [r7, #8]
 8008f98:	f002 fd86 	bl	800baa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa4:	441a      	add	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d32b      	bcc.n	800900e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	605a      	str	r2, [r3, #4]
 8008fbe:	e026      	b.n	800900e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	68d8      	ldr	r0, [r3, #12]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc8:	461a      	mov	r2, r3
 8008fca:	68b9      	ldr	r1, [r7, #8]
 8008fcc:	f002 fd6c 	bl	800baa8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	68da      	ldr	r2, [r3, #12]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd8:	425b      	negs	r3, r3
 8008fda:	441a      	add	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d207      	bcs.n	8008ffc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff4:	425b      	negs	r3, r3
 8008ff6:	441a      	add	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d105      	bne.n	800900e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	3b01      	subs	r3, #1
 800900c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009016:	697b      	ldr	r3, [r7, #20]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902e:	2b00      	cmp	r3, #0
 8009030:	d018      	beq.n	8009064 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68da      	ldr	r2, [r3, #12]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903a:	441a      	add	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	429a      	cmp	r2, r3
 800904a:	d303      	bcc.n	8009054 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68d9      	ldr	r1, [r3, #12]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800905c:	461a      	mov	r2, r3
 800905e:	6838      	ldr	r0, [r7, #0]
 8009060:	f002 fd22 	bl	800baa8 <memcpy>
	}
}
 8009064:	bf00      	nop
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009074:	f001 fca0 	bl	800a9b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800907e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009080:	e011      	b.n	80090a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009086:	2b00      	cmp	r3, #0
 8009088:	d012      	beq.n	80090b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	3324      	adds	r3, #36	@ 0x24
 800908e:	4618      	mov	r0, r3
 8009090:	f000 fd5c 	bl	8009b4c <xTaskRemoveFromEventList>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800909a:	f000 fe35 	bl	8009d08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	dce9      	bgt.n	8009082 <prvUnlockQueue+0x16>
 80090ae:	e000      	b.n	80090b2 <prvUnlockQueue+0x46>
					break;
 80090b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	22ff      	movs	r2, #255	@ 0xff
 80090b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80090ba:	f001 fcaf 	bl	800aa1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090be:	f001 fc7b 	bl	800a9b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090ca:	e011      	b.n	80090f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d012      	beq.n	80090fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3310      	adds	r3, #16
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 fd37 	bl	8009b4c <xTaskRemoveFromEventList>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090e4:	f000 fe10 	bl	8009d08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	dce9      	bgt.n	80090cc <prvUnlockQueue+0x60>
 80090f8:	e000      	b.n	80090fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	22ff      	movs	r2, #255	@ 0xff
 8009100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009104:	f001 fc8a 	bl	800aa1c <vPortExitCritical>
}
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009118:	f001 fc4e 	bl	800a9b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009124:	2301      	movs	r3, #1
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	e001      	b.n	800912e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800912a:	2300      	movs	r3, #0
 800912c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800912e:	f001 fc75 	bl	800aa1c <vPortExitCritical>

	return xReturn;
 8009132:	68fb      	ldr	r3, [r7, #12]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009144:	f001 fc38 	bl	800a9b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009150:	429a      	cmp	r2, r3
 8009152:	d102      	bne.n	800915a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009154:	2301      	movs	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	e001      	b.n	800915e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800915a:	2300      	movs	r3, #0
 800915c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800915e:	f001 fc5d 	bl	800aa1c <vPortExitCritical>

	return xReturn;
 8009162:	68fb      	ldr	r3, [r7, #12]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]
 800917a:	e014      	b.n	80091a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800917c:	4a0f      	ldr	r2, [pc, #60]	@ (80091bc <vQueueAddToRegistry+0x50>)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10b      	bne.n	80091a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009188:	490c      	ldr	r1, [pc, #48]	@ (80091bc <vQueueAddToRegistry+0x50>)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009192:	4a0a      	ldr	r2, [pc, #40]	@ (80091bc <vQueueAddToRegistry+0x50>)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	4413      	add	r3, r2
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800919e:	e006      	b.n	80091ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3301      	adds	r3, #1
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2b07      	cmp	r3, #7
 80091aa:	d9e7      	bls.n	800917c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	20000aa0 	.word	0x20000aa0

080091c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80091d0:	f001 fbf2 	bl	800a9b8 <vPortEnterCritical>
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091da:	b25b      	sxtb	r3, r3
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d103      	bne.n	80091ea <vQueueWaitForMessageRestricted+0x2a>
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091f0:	b25b      	sxtb	r3, r3
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f6:	d103      	bne.n	8009200 <vQueueWaitForMessageRestricted+0x40>
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009200:	f001 fc0c 	bl	800aa1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009208:	2b00      	cmp	r3, #0
 800920a:	d106      	bne.n	800921a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	3324      	adds	r3, #36	@ 0x24
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	68b9      	ldr	r1, [r7, #8]
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fc6d 	bl	8009af4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800921a:	6978      	ldr	r0, [r7, #20]
 800921c:	f7ff ff26 	bl	800906c <prvUnlockQueue>
	}
 8009220:	bf00      	nop
 8009222:	3718      	adds	r7, #24
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08e      	sub	sp, #56	@ 0x38
 800922c:	af04      	add	r7, sp, #16
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
 8009234:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10b      	bne.n	8009254 <xTaskCreateStatic+0x2c>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	623b      	str	r3, [r7, #32]
}
 800924e:	bf00      	nop
 8009250:	bf00      	nop
 8009252:	e7fd      	b.n	8009250 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10b      	bne.n	8009272 <xTaskCreateStatic+0x4a>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	61fb      	str	r3, [r7, #28]
}
 800926c:	bf00      	nop
 800926e:	bf00      	nop
 8009270:	e7fd      	b.n	800926e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009272:	23a8      	movs	r3, #168	@ 0xa8
 8009274:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2ba8      	cmp	r3, #168	@ 0xa8
 800927a:	d00b      	beq.n	8009294 <xTaskCreateStatic+0x6c>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	61bb      	str	r3, [r7, #24]
}
 800928e:	bf00      	nop
 8009290:	bf00      	nop
 8009292:	e7fd      	b.n	8009290 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009294:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009298:	2b00      	cmp	r3, #0
 800929a:	d01e      	beq.n	80092da <xTaskCreateStatic+0xb2>
 800929c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d01b      	beq.n	80092da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092b4:	2300      	movs	r3, #0
 80092b6:	9303      	str	r3, [sp, #12]
 80092b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ba:	9302      	str	r3, [sp, #8]
 80092bc:	f107 0314 	add.w	r3, r7, #20
 80092c0:	9301      	str	r3, [sp, #4]
 80092c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	68b9      	ldr	r1, [r7, #8]
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 f851 	bl	8009374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80092d4:	f000 f8f6 	bl	80094c4 <prvAddNewTaskToReadyList>
 80092d8:	e001      	b.n	80092de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092de:	697b      	ldr	r3, [r7, #20]
	}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3728      	adds	r7, #40	@ 0x28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08c      	sub	sp, #48	@ 0x30
 80092ec:	af04      	add	r7, sp, #16
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	603b      	str	r3, [r7, #0]
 80092f4:	4613      	mov	r3, r2
 80092f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092f8:	88fb      	ldrh	r3, [r7, #6]
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f001 fc7d 	bl	800abfc <pvPortMalloc>
 8009302:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00e      	beq.n	8009328 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800930a:	20a8      	movs	r0, #168	@ 0xa8
 800930c:	f001 fc76 	bl	800abfc <pvPortMalloc>
 8009310:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d003      	beq.n	8009320 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	631a      	str	r2, [r3, #48]	@ 0x30
 800931e:	e005      	b.n	800932c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009320:	6978      	ldr	r0, [r7, #20]
 8009322:	f001 fd39 	bl	800ad98 <vPortFree>
 8009326:	e001      	b.n	800932c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009328:	2300      	movs	r3, #0
 800932a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d017      	beq.n	8009362 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800933a:	88fa      	ldrh	r2, [r7, #6]
 800933c:	2300      	movs	r3, #0
 800933e:	9303      	str	r3, [sp, #12]
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	9302      	str	r3, [sp, #8]
 8009344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009346:	9301      	str	r3, [sp, #4]
 8009348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	68b9      	ldr	r1, [r7, #8]
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 f80f 	bl	8009374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009356:	69f8      	ldr	r0, [r7, #28]
 8009358:	f000 f8b4 	bl	80094c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800935c:	2301      	movs	r3, #1
 800935e:	61bb      	str	r3, [r7, #24]
 8009360:	e002      	b.n	8009368 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009362:	f04f 33ff 	mov.w	r3, #4294967295
 8009366:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009368:	69bb      	ldr	r3, [r7, #24]
	}
 800936a:	4618      	mov	r0, r3
 800936c:	3720      	adds	r7, #32
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
	...

08009374 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	461a      	mov	r2, r3
 800938c:	21a5      	movs	r1, #165	@ 0xa5
 800938e:	f002 fb07 	bl	800b9a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800939c:	3b01      	subs	r3, #1
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	f023 0307 	bic.w	r3, r3, #7
 80093aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00b      	beq.n	80093ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	617b      	str	r3, [r7, #20]
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	e7fd      	b.n	80093ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d01f      	beq.n	8009414 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093d4:	2300      	movs	r3, #0
 80093d6:	61fb      	str	r3, [r7, #28]
 80093d8:	e012      	b.n	8009400 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	4413      	add	r3, r2
 80093e0:	7819      	ldrb	r1, [r3, #0]
 80093e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	4413      	add	r3, r2
 80093e8:	3334      	adds	r3, #52	@ 0x34
 80093ea:	460a      	mov	r2, r1
 80093ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	4413      	add	r3, r2
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d006      	beq.n	8009408 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	3301      	adds	r3, #1
 80093fe:	61fb      	str	r3, [r7, #28]
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	2b0f      	cmp	r3, #15
 8009404:	d9e9      	bls.n	80093da <prvInitialiseNewTask+0x66>
 8009406:	e000      	b.n	800940a <prvInitialiseNewTask+0x96>
			{
				break;
 8009408:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009412:	e003      	b.n	800941c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800941c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941e:	2b37      	cmp	r3, #55	@ 0x37
 8009420:	d901      	bls.n	8009426 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009422:	2337      	movs	r3, #55	@ 0x37
 8009424:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800942a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800942c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009430:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009434:	2200      	movs	r2, #0
 8009436:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943a:	3304      	adds	r3, #4
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff f965 	bl	800870c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009444:	3318      	adds	r3, #24
 8009446:	4618      	mov	r0, r3
 8009448:	f7ff f960 	bl	800870c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800944c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009450:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009454:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800945c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009460:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009464:	2200      	movs	r2, #0
 8009466:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800946a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946c:	2200      	movs	r2, #0
 800946e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009474:	3354      	adds	r3, #84	@ 0x54
 8009476:	224c      	movs	r2, #76	@ 0x4c
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f002 fa90 	bl	800b9a0 <memset>
 8009480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009482:	4a0d      	ldr	r2, [pc, #52]	@ (80094b8 <prvInitialiseNewTask+0x144>)
 8009484:	659a      	str	r2, [r3, #88]	@ 0x58
 8009486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009488:	4a0c      	ldr	r2, [pc, #48]	@ (80094bc <prvInitialiseNewTask+0x148>)
 800948a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800948c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948e:	4a0c      	ldr	r2, [pc, #48]	@ (80094c0 <prvInitialiseNewTask+0x14c>)
 8009490:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	68f9      	ldr	r1, [r7, #12]
 8009496:	69b8      	ldr	r0, [r7, #24]
 8009498:	f001 f95a 	bl	800a750 <pxPortInitialiseStack>
 800949c:	4602      	mov	r2, r0
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ae:	bf00      	nop
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20003700 	.word	0x20003700
 80094bc:	20003768 	.word	0x20003768
 80094c0:	200037d0 	.word	0x200037d0

080094c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094cc:	f001 fa74 	bl	800a9b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094d0:	4b2d      	ldr	r3, [pc, #180]	@ (8009588 <prvAddNewTaskToReadyList+0xc4>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	4a2c      	ldr	r2, [pc, #176]	@ (8009588 <prvAddNewTaskToReadyList+0xc4>)
 80094d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094da:	4b2c      	ldr	r3, [pc, #176]	@ (800958c <prvAddNewTaskToReadyList+0xc8>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d109      	bne.n	80094f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094e2:	4a2a      	ldr	r2, [pc, #168]	@ (800958c <prvAddNewTaskToReadyList+0xc8>)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094e8:	4b27      	ldr	r3, [pc, #156]	@ (8009588 <prvAddNewTaskToReadyList+0xc4>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d110      	bne.n	8009512 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094f0:	f000 fc2e 	bl	8009d50 <prvInitialiseTaskLists>
 80094f4:	e00d      	b.n	8009512 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094f6:	4b26      	ldr	r3, [pc, #152]	@ (8009590 <prvAddNewTaskToReadyList+0xcc>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d109      	bne.n	8009512 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094fe:	4b23      	ldr	r3, [pc, #140]	@ (800958c <prvAddNewTaskToReadyList+0xc8>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009508:	429a      	cmp	r2, r3
 800950a:	d802      	bhi.n	8009512 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800950c:	4a1f      	ldr	r2, [pc, #124]	@ (800958c <prvAddNewTaskToReadyList+0xc8>)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009512:	4b20      	ldr	r3, [pc, #128]	@ (8009594 <prvAddNewTaskToReadyList+0xd0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3301      	adds	r3, #1
 8009518:	4a1e      	ldr	r2, [pc, #120]	@ (8009594 <prvAddNewTaskToReadyList+0xd0>)
 800951a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800951c:	4b1d      	ldr	r3, [pc, #116]	@ (8009594 <prvAddNewTaskToReadyList+0xd0>)
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009528:	4b1b      	ldr	r3, [pc, #108]	@ (8009598 <prvAddNewTaskToReadyList+0xd4>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	429a      	cmp	r2, r3
 800952e:	d903      	bls.n	8009538 <prvAddNewTaskToReadyList+0x74>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009534:	4a18      	ldr	r2, [pc, #96]	@ (8009598 <prvAddNewTaskToReadyList+0xd4>)
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4a15      	ldr	r2, [pc, #84]	@ (800959c <prvAddNewTaskToReadyList+0xd8>)
 8009546:	441a      	add	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	3304      	adds	r3, #4
 800954c:	4619      	mov	r1, r3
 800954e:	4610      	mov	r0, r2
 8009550:	f7ff f8e9 	bl	8008726 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009554:	f001 fa62 	bl	800aa1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009558:	4b0d      	ldr	r3, [pc, #52]	@ (8009590 <prvAddNewTaskToReadyList+0xcc>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00e      	beq.n	800957e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009560:	4b0a      	ldr	r3, [pc, #40]	@ (800958c <prvAddNewTaskToReadyList+0xc8>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956a:	429a      	cmp	r2, r3
 800956c:	d207      	bcs.n	800957e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800956e:	4b0c      	ldr	r3, [pc, #48]	@ (80095a0 <prvAddNewTaskToReadyList+0xdc>)
 8009570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800957e:	bf00      	nop
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000fb4 	.word	0x20000fb4
 800958c:	20000ae0 	.word	0x20000ae0
 8009590:	20000fc0 	.word	0x20000fc0
 8009594:	20000fd0 	.word	0x20000fd0
 8009598:	20000fbc 	.word	0x20000fbc
 800959c:	20000ae4 	.word	0x20000ae4
 80095a0:	e000ed04 	.word	0xe000ed04

080095a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d018      	beq.n	80095e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095b6:	4b14      	ldr	r3, [pc, #80]	@ (8009608 <vTaskDelay+0x64>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00b      	beq.n	80095d6 <vTaskDelay+0x32>
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	60bb      	str	r3, [r7, #8]
}
 80095d0:	bf00      	nop
 80095d2:	bf00      	nop
 80095d4:	e7fd      	b.n	80095d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80095d6:	f000 f88b 	bl	80096f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095da:	2100      	movs	r1, #0
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fd09 	bl	8009ff4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095e2:	f000 f893 	bl	800970c <xTaskResumeAll>
 80095e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d107      	bne.n	80095fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80095ee:	4b07      	ldr	r3, [pc, #28]	@ (800960c <vTaskDelay+0x68>)
 80095f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095fe:	bf00      	nop
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	20000fdc 	.word	0x20000fdc
 800960c:	e000ed04 	.word	0xe000ed04

08009610 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08a      	sub	sp, #40	@ 0x28
 8009614:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009616:	2300      	movs	r3, #0
 8009618:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800961e:	463a      	mov	r2, r7
 8009620:	1d39      	adds	r1, r7, #4
 8009622:	f107 0308 	add.w	r3, r7, #8
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff f81c 	bl	8008664 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	9202      	str	r2, [sp, #8]
 8009634:	9301      	str	r3, [sp, #4]
 8009636:	2300      	movs	r3, #0
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	2300      	movs	r3, #0
 800963c:	460a      	mov	r2, r1
 800963e:	4924      	ldr	r1, [pc, #144]	@ (80096d0 <vTaskStartScheduler+0xc0>)
 8009640:	4824      	ldr	r0, [pc, #144]	@ (80096d4 <vTaskStartScheduler+0xc4>)
 8009642:	f7ff fdf1 	bl	8009228 <xTaskCreateStatic>
 8009646:	4603      	mov	r3, r0
 8009648:	4a23      	ldr	r2, [pc, #140]	@ (80096d8 <vTaskStartScheduler+0xc8>)
 800964a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800964c:	4b22      	ldr	r3, [pc, #136]	@ (80096d8 <vTaskStartScheduler+0xc8>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009654:	2301      	movs	r3, #1
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e001      	b.n	800965e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800965a:	2300      	movs	r3, #0
 800965c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d102      	bne.n	800966a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009664:	f000 fd1a 	bl	800a09c <xTimerCreateTimerTask>
 8009668:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d11b      	bne.n	80096a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	613b      	str	r3, [r7, #16]
}
 8009682:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009684:	4b15      	ldr	r3, [pc, #84]	@ (80096dc <vTaskStartScheduler+0xcc>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3354      	adds	r3, #84	@ 0x54
 800968a:	4a15      	ldr	r2, [pc, #84]	@ (80096e0 <vTaskStartScheduler+0xd0>)
 800968c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800968e:	4b15      	ldr	r3, [pc, #84]	@ (80096e4 <vTaskStartScheduler+0xd4>)
 8009690:	f04f 32ff 	mov.w	r2, #4294967295
 8009694:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009696:	4b14      	ldr	r3, [pc, #80]	@ (80096e8 <vTaskStartScheduler+0xd8>)
 8009698:	2201      	movs	r2, #1
 800969a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800969c:	4b13      	ldr	r3, [pc, #76]	@ (80096ec <vTaskStartScheduler+0xdc>)
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096a2:	f001 f8e5 	bl	800a870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096a6:	e00f      	b.n	80096c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ae:	d10b      	bne.n	80096c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	60fb      	str	r3, [r7, #12]
}
 80096c2:	bf00      	nop
 80096c4:	bf00      	nop
 80096c6:	e7fd      	b.n	80096c4 <vTaskStartScheduler+0xb4>
}
 80096c8:	bf00      	nop
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	0800bb94 	.word	0x0800bb94
 80096d4:	08009d21 	.word	0x08009d21
 80096d8:	20000fd8 	.word	0x20000fd8
 80096dc:	20000ae0 	.word	0x20000ae0
 80096e0:	20000188 	.word	0x20000188
 80096e4:	20000fd4 	.word	0x20000fd4
 80096e8:	20000fc0 	.word	0x20000fc0
 80096ec:	20000fb8 	.word	0x20000fb8

080096f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096f4:	4b04      	ldr	r3, [pc, #16]	@ (8009708 <vTaskSuspendAll+0x18>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3301      	adds	r3, #1
 80096fa:	4a03      	ldr	r2, [pc, #12]	@ (8009708 <vTaskSuspendAll+0x18>)
 80096fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096fe:	bf00      	nop
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	20000fdc 	.word	0x20000fdc

0800970c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009716:	2300      	movs	r3, #0
 8009718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800971a:	4b42      	ldr	r3, [pc, #264]	@ (8009824 <xTaskResumeAll+0x118>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10b      	bne.n	800973a <xTaskResumeAll+0x2e>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	603b      	str	r3, [r7, #0]
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	e7fd      	b.n	8009736 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800973a:	f001 f93d 	bl	800a9b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800973e:	4b39      	ldr	r3, [pc, #228]	@ (8009824 <xTaskResumeAll+0x118>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3b01      	subs	r3, #1
 8009744:	4a37      	ldr	r2, [pc, #220]	@ (8009824 <xTaskResumeAll+0x118>)
 8009746:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009748:	4b36      	ldr	r3, [pc, #216]	@ (8009824 <xTaskResumeAll+0x118>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d162      	bne.n	8009816 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009750:	4b35      	ldr	r3, [pc, #212]	@ (8009828 <xTaskResumeAll+0x11c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d05e      	beq.n	8009816 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009758:	e02f      	b.n	80097ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975a:	4b34      	ldr	r3, [pc, #208]	@ (800982c <xTaskResumeAll+0x120>)
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3318      	adds	r3, #24
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff f83a 	bl	80087e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3304      	adds	r3, #4
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff f835 	bl	80087e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800977a:	4b2d      	ldr	r3, [pc, #180]	@ (8009830 <xTaskResumeAll+0x124>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	429a      	cmp	r2, r3
 8009780:	d903      	bls.n	800978a <xTaskResumeAll+0x7e>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009786:	4a2a      	ldr	r2, [pc, #168]	@ (8009830 <xTaskResumeAll+0x124>)
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4a27      	ldr	r2, [pc, #156]	@ (8009834 <xTaskResumeAll+0x128>)
 8009798:	441a      	add	r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3304      	adds	r3, #4
 800979e:	4619      	mov	r1, r3
 80097a0:	4610      	mov	r0, r2
 80097a2:	f7fe ffc0 	bl	8008726 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097aa:	4b23      	ldr	r3, [pc, #140]	@ (8009838 <xTaskResumeAll+0x12c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d302      	bcc.n	80097ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80097b4:	4b21      	ldr	r3, [pc, #132]	@ (800983c <xTaskResumeAll+0x130>)
 80097b6:	2201      	movs	r2, #1
 80097b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097ba:	4b1c      	ldr	r3, [pc, #112]	@ (800982c <xTaskResumeAll+0x120>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1cb      	bne.n	800975a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097c8:	f000 fb66 	bl	8009e98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80097cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009840 <xTaskResumeAll+0x134>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d010      	beq.n	80097fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097d8:	f000 f846 	bl	8009868 <xTaskIncrementTick>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80097e2:	4b16      	ldr	r3, [pc, #88]	@ (800983c <xTaskResumeAll+0x130>)
 80097e4:	2201      	movs	r2, #1
 80097e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1f1      	bne.n	80097d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80097f4:	4b12      	ldr	r3, [pc, #72]	@ (8009840 <xTaskResumeAll+0x134>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097fa:	4b10      	ldr	r3, [pc, #64]	@ (800983c <xTaskResumeAll+0x130>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d009      	beq.n	8009816 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009802:	2301      	movs	r3, #1
 8009804:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009806:	4b0f      	ldr	r3, [pc, #60]	@ (8009844 <xTaskResumeAll+0x138>)
 8009808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009816:	f001 f901 	bl	800aa1c <vPortExitCritical>

	return xAlreadyYielded;
 800981a:	68bb      	ldr	r3, [r7, #8]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20000fdc 	.word	0x20000fdc
 8009828:	20000fb4 	.word	0x20000fb4
 800982c:	20000f74 	.word	0x20000f74
 8009830:	20000fbc 	.word	0x20000fbc
 8009834:	20000ae4 	.word	0x20000ae4
 8009838:	20000ae0 	.word	0x20000ae0
 800983c:	20000fc8 	.word	0x20000fc8
 8009840:	20000fc4 	.word	0x20000fc4
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800984e:	4b05      	ldr	r3, [pc, #20]	@ (8009864 <xTaskGetTickCount+0x1c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009854:	687b      	ldr	r3, [r7, #4]
}
 8009856:	4618      	mov	r0, r3
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	20000fb8 	.word	0x20000fb8

08009868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800986e:	2300      	movs	r3, #0
 8009870:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009872:	4b4f      	ldr	r3, [pc, #316]	@ (80099b0 <xTaskIncrementTick+0x148>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	f040 8090 	bne.w	800999c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800987c:	4b4d      	ldr	r3, [pc, #308]	@ (80099b4 <xTaskIncrementTick+0x14c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3301      	adds	r3, #1
 8009882:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009884:	4a4b      	ldr	r2, [pc, #300]	@ (80099b4 <xTaskIncrementTick+0x14c>)
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d121      	bne.n	80098d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009890:	4b49      	ldr	r3, [pc, #292]	@ (80099b8 <xTaskIncrementTick+0x150>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00b      	beq.n	80098b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800989a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	603b      	str	r3, [r7, #0]
}
 80098ac:	bf00      	nop
 80098ae:	bf00      	nop
 80098b0:	e7fd      	b.n	80098ae <xTaskIncrementTick+0x46>
 80098b2:	4b41      	ldr	r3, [pc, #260]	@ (80099b8 <xTaskIncrementTick+0x150>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	4b40      	ldr	r3, [pc, #256]	@ (80099bc <xTaskIncrementTick+0x154>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a3e      	ldr	r2, [pc, #248]	@ (80099b8 <xTaskIncrementTick+0x150>)
 80098be:	6013      	str	r3, [r2, #0]
 80098c0:	4a3e      	ldr	r2, [pc, #248]	@ (80099bc <xTaskIncrementTick+0x154>)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6013      	str	r3, [r2, #0]
 80098c6:	4b3e      	ldr	r3, [pc, #248]	@ (80099c0 <xTaskIncrementTick+0x158>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3301      	adds	r3, #1
 80098cc:	4a3c      	ldr	r2, [pc, #240]	@ (80099c0 <xTaskIncrementTick+0x158>)
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	f000 fae2 	bl	8009e98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098d4:	4b3b      	ldr	r3, [pc, #236]	@ (80099c4 <xTaskIncrementTick+0x15c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d349      	bcc.n	8009972 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098de:	4b36      	ldr	r3, [pc, #216]	@ (80099b8 <xTaskIncrementTick+0x150>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d104      	bne.n	80098f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098e8:	4b36      	ldr	r3, [pc, #216]	@ (80099c4 <xTaskIncrementTick+0x15c>)
 80098ea:	f04f 32ff 	mov.w	r2, #4294967295
 80098ee:	601a      	str	r2, [r3, #0]
					break;
 80098f0:	e03f      	b.n	8009972 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098f2:	4b31      	ldr	r3, [pc, #196]	@ (80099b8 <xTaskIncrementTick+0x150>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	429a      	cmp	r2, r3
 8009908:	d203      	bcs.n	8009912 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800990a:	4a2e      	ldr	r2, [pc, #184]	@ (80099c4 <xTaskIncrementTick+0x15c>)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009910:	e02f      	b.n	8009972 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	3304      	adds	r3, #4
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe ff62 	bl	80087e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009920:	2b00      	cmp	r3, #0
 8009922:	d004      	beq.n	800992e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	3318      	adds	r3, #24
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe ff59 	bl	80087e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009932:	4b25      	ldr	r3, [pc, #148]	@ (80099c8 <xTaskIncrementTick+0x160>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d903      	bls.n	8009942 <xTaskIncrementTick+0xda>
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993e:	4a22      	ldr	r2, [pc, #136]	@ (80099c8 <xTaskIncrementTick+0x160>)
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4a1f      	ldr	r2, [pc, #124]	@ (80099cc <xTaskIncrementTick+0x164>)
 8009950:	441a      	add	r2, r3
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	3304      	adds	r3, #4
 8009956:	4619      	mov	r1, r3
 8009958:	4610      	mov	r0, r2
 800995a:	f7fe fee4 	bl	8008726 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009962:	4b1b      	ldr	r3, [pc, #108]	@ (80099d0 <xTaskIncrementTick+0x168>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009968:	429a      	cmp	r2, r3
 800996a:	d3b8      	bcc.n	80098de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800996c:	2301      	movs	r3, #1
 800996e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009970:	e7b5      	b.n	80098de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009972:	4b17      	ldr	r3, [pc, #92]	@ (80099d0 <xTaskIncrementTick+0x168>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009978:	4914      	ldr	r1, [pc, #80]	@ (80099cc <xTaskIncrementTick+0x164>)
 800997a:	4613      	mov	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	440b      	add	r3, r1
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d901      	bls.n	800998e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800998a:	2301      	movs	r3, #1
 800998c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800998e:	4b11      	ldr	r3, [pc, #68]	@ (80099d4 <xTaskIncrementTick+0x16c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d007      	beq.n	80099a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009996:	2301      	movs	r3, #1
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e004      	b.n	80099a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800999c:	4b0e      	ldr	r3, [pc, #56]	@ (80099d8 <xTaskIncrementTick+0x170>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3301      	adds	r3, #1
 80099a2:	4a0d      	ldr	r2, [pc, #52]	@ (80099d8 <xTaskIncrementTick+0x170>)
 80099a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099a6:	697b      	ldr	r3, [r7, #20]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20000fdc 	.word	0x20000fdc
 80099b4:	20000fb8 	.word	0x20000fb8
 80099b8:	20000f6c 	.word	0x20000f6c
 80099bc:	20000f70 	.word	0x20000f70
 80099c0:	20000fcc 	.word	0x20000fcc
 80099c4:	20000fd4 	.word	0x20000fd4
 80099c8:	20000fbc 	.word	0x20000fbc
 80099cc:	20000ae4 	.word	0x20000ae4
 80099d0:	20000ae0 	.word	0x20000ae0
 80099d4:	20000fc8 	.word	0x20000fc8
 80099d8:	20000fc4 	.word	0x20000fc4

080099dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099e2:	4b2b      	ldr	r3, [pc, #172]	@ (8009a90 <vTaskSwitchContext+0xb4>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099ea:	4b2a      	ldr	r3, [pc, #168]	@ (8009a94 <vTaskSwitchContext+0xb8>)
 80099ec:	2201      	movs	r2, #1
 80099ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099f0:	e047      	b.n	8009a82 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80099f2:	4b28      	ldr	r3, [pc, #160]	@ (8009a94 <vTaskSwitchContext+0xb8>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099f8:	4b27      	ldr	r3, [pc, #156]	@ (8009a98 <vTaskSwitchContext+0xbc>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	60fb      	str	r3, [r7, #12]
 80099fe:	e011      	b.n	8009a24 <vTaskSwitchContext+0x48>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10b      	bne.n	8009a1e <vTaskSwitchContext+0x42>
	__asm volatile
 8009a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a0a:	f383 8811 	msr	BASEPRI, r3
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f3bf 8f4f 	dsb	sy
 8009a16:	607b      	str	r3, [r7, #4]
}
 8009a18:	bf00      	nop
 8009a1a:	bf00      	nop
 8009a1c:	e7fd      	b.n	8009a1a <vTaskSwitchContext+0x3e>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	491d      	ldr	r1, [pc, #116]	@ (8009a9c <vTaskSwitchContext+0xc0>)
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	440b      	add	r3, r1
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0e3      	beq.n	8009a00 <vTaskSwitchContext+0x24>
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4a16      	ldr	r2, [pc, #88]	@ (8009a9c <vTaskSwitchContext+0xc0>)
 8009a44:	4413      	add	r3, r2
 8009a46:	60bb      	str	r3, [r7, #8]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	605a      	str	r2, [r3, #4]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	3308      	adds	r3, #8
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d104      	bne.n	8009a68 <vTaskSwitchContext+0x8c>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	605a      	str	r2, [r3, #4]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8009aa0 <vTaskSwitchContext+0xc4>)
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	4a09      	ldr	r2, [pc, #36]	@ (8009a98 <vTaskSwitchContext+0xbc>)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a78:	4b09      	ldr	r3, [pc, #36]	@ (8009aa0 <vTaskSwitchContext+0xc4>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3354      	adds	r3, #84	@ 0x54
 8009a7e:	4a09      	ldr	r2, [pc, #36]	@ (8009aa4 <vTaskSwitchContext+0xc8>)
 8009a80:	6013      	str	r3, [r2, #0]
}
 8009a82:	bf00      	nop
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	20000fdc 	.word	0x20000fdc
 8009a94:	20000fc8 	.word	0x20000fc8
 8009a98:	20000fbc 	.word	0x20000fbc
 8009a9c:	20000ae4 	.word	0x20000ae4
 8009aa0:	20000ae0 	.word	0x20000ae0
 8009aa4:	20000188 	.word	0x20000188

08009aa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10b      	bne.n	8009ad0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	60fb      	str	r3, [r7, #12]
}
 8009aca:	bf00      	nop
 8009acc:	bf00      	nop
 8009ace:	e7fd      	b.n	8009acc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ad0:	4b07      	ldr	r3, [pc, #28]	@ (8009af0 <vTaskPlaceOnEventList+0x48>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3318      	adds	r3, #24
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7fe fe48 	bl	800876e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ade:	2101      	movs	r1, #1
 8009ae0:	6838      	ldr	r0, [r7, #0]
 8009ae2:	f000 fa87 	bl	8009ff4 <prvAddCurrentTaskToDelayedList>
}
 8009ae6:	bf00      	nop
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20000ae0 	.word	0x20000ae0

08009af4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10b      	bne.n	8009b1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	617b      	str	r3, [r7, #20]
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	e7fd      	b.n	8009b1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b48 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3318      	adds	r3, #24
 8009b24:	4619      	mov	r1, r3
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7fe fdfd 	bl	8008726 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d002      	beq.n	8009b38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009b32:	f04f 33ff 	mov.w	r3, #4294967295
 8009b36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b38:	6879      	ldr	r1, [r7, #4]
 8009b3a:	68b8      	ldr	r0, [r7, #8]
 8009b3c:	f000 fa5a 	bl	8009ff4 <prvAddCurrentTaskToDelayedList>
	}
 8009b40:	bf00      	nop
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	20000ae0 	.word	0x20000ae0

08009b4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10b      	bne.n	8009b7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	60fb      	str	r3, [r7, #12]
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop
 8009b78:	e7fd      	b.n	8009b76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	3318      	adds	r3, #24
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe fe2e 	bl	80087e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b84:	4b1d      	ldr	r3, [pc, #116]	@ (8009bfc <xTaskRemoveFromEventList+0xb0>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d11d      	bne.n	8009bc8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe fe25 	bl	80087e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b9a:	4b19      	ldr	r3, [pc, #100]	@ (8009c00 <xTaskRemoveFromEventList+0xb4>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d903      	bls.n	8009baa <xTaskRemoveFromEventList+0x5e>
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba6:	4a16      	ldr	r2, [pc, #88]	@ (8009c00 <xTaskRemoveFromEventList+0xb4>)
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bae:	4613      	mov	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	4a13      	ldr	r2, [pc, #76]	@ (8009c04 <xTaskRemoveFromEventList+0xb8>)
 8009bb8:	441a      	add	r2, r3
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	f7fe fdb0 	bl	8008726 <vListInsertEnd>
 8009bc6:	e005      	b.n	8009bd4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	3318      	adds	r3, #24
 8009bcc:	4619      	mov	r1, r3
 8009bce:	480e      	ldr	r0, [pc, #56]	@ (8009c08 <xTaskRemoveFromEventList+0xbc>)
 8009bd0:	f7fe fda9 	bl	8008726 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8009c0c <xTaskRemoveFromEventList+0xc0>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d905      	bls.n	8009bee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009be2:	2301      	movs	r3, #1
 8009be4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009be6:	4b0a      	ldr	r3, [pc, #40]	@ (8009c10 <xTaskRemoveFromEventList+0xc4>)
 8009be8:	2201      	movs	r2, #1
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	e001      	b.n	8009bf2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009bf2:	697b      	ldr	r3, [r7, #20]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20000fdc 	.word	0x20000fdc
 8009c00:	20000fbc 	.word	0x20000fbc
 8009c04:	20000ae4 	.word	0x20000ae4
 8009c08:	20000f74 	.word	0x20000f74
 8009c0c:	20000ae0 	.word	0x20000ae0
 8009c10:	20000fc8 	.word	0x20000fc8

08009c14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c1c:	4b06      	ldr	r3, [pc, #24]	@ (8009c38 <vTaskInternalSetTimeOutState+0x24>)
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c24:	4b05      	ldr	r3, [pc, #20]	@ (8009c3c <vTaskInternalSetTimeOutState+0x28>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	605a      	str	r2, [r3, #4]
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	20000fcc 	.word	0x20000fcc
 8009c3c:	20000fb8 	.word	0x20000fb8

08009c40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10b      	bne.n	8009c68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	613b      	str	r3, [r7, #16]
}
 8009c62:	bf00      	nop
 8009c64:	bf00      	nop
 8009c66:	e7fd      	b.n	8009c64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10b      	bne.n	8009c86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	60fb      	str	r3, [r7, #12]
}
 8009c80:	bf00      	nop
 8009c82:	bf00      	nop
 8009c84:	e7fd      	b.n	8009c82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009c86:	f000 fe97 	bl	800a9b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8009d00 <xTaskCheckForTimeOut+0xc0>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	69ba      	ldr	r2, [r7, #24]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d102      	bne.n	8009caa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	61fb      	str	r3, [r7, #28]
 8009ca8:	e023      	b.n	8009cf2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	4b15      	ldr	r3, [pc, #84]	@ (8009d04 <xTaskCheckForTimeOut+0xc4>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d007      	beq.n	8009cc6 <xTaskCheckForTimeOut+0x86>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	69ba      	ldr	r2, [r7, #24]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d302      	bcc.n	8009cc6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	61fb      	str	r3, [r7, #28]
 8009cc4:	e015      	b.n	8009cf2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d20b      	bcs.n	8009ce8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	1ad2      	subs	r2, r2, r3
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7ff ff99 	bl	8009c14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	61fb      	str	r3, [r7, #28]
 8009ce6:	e004      	b.n	8009cf2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009cf2:	f000 fe93 	bl	800aa1c <vPortExitCritical>

	return xReturn;
 8009cf6:	69fb      	ldr	r3, [r7, #28]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3720      	adds	r7, #32
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	20000fb8 	.word	0x20000fb8
 8009d04:	20000fcc 	.word	0x20000fcc

08009d08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d08:	b480      	push	{r7}
 8009d0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d0c:	4b03      	ldr	r3, [pc, #12]	@ (8009d1c <vTaskMissedYield+0x14>)
 8009d0e:	2201      	movs	r2, #1
 8009d10:	601a      	str	r2, [r3, #0]
}
 8009d12:	bf00      	nop
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	20000fc8 	.word	0x20000fc8

08009d20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d28:	f000 f852 	bl	8009dd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d2c:	4b06      	ldr	r3, [pc, #24]	@ (8009d48 <prvIdleTask+0x28>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d9f9      	bls.n	8009d28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d34:	4b05      	ldr	r3, [pc, #20]	@ (8009d4c <prvIdleTask+0x2c>)
 8009d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d44:	e7f0      	b.n	8009d28 <prvIdleTask+0x8>
 8009d46:	bf00      	nop
 8009d48:	20000ae4 	.word	0x20000ae4
 8009d4c:	e000ed04 	.word	0xe000ed04

08009d50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d56:	2300      	movs	r3, #0
 8009d58:	607b      	str	r3, [r7, #4]
 8009d5a:	e00c      	b.n	8009d76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4a12      	ldr	r2, [pc, #72]	@ (8009db0 <prvInitialiseTaskLists+0x60>)
 8009d68:	4413      	add	r3, r2
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fe fcae 	bl	80086cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3301      	adds	r3, #1
 8009d74:	607b      	str	r3, [r7, #4]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b37      	cmp	r3, #55	@ 0x37
 8009d7a:	d9ef      	bls.n	8009d5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d7c:	480d      	ldr	r0, [pc, #52]	@ (8009db4 <prvInitialiseTaskLists+0x64>)
 8009d7e:	f7fe fca5 	bl	80086cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d82:	480d      	ldr	r0, [pc, #52]	@ (8009db8 <prvInitialiseTaskLists+0x68>)
 8009d84:	f7fe fca2 	bl	80086cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d88:	480c      	ldr	r0, [pc, #48]	@ (8009dbc <prvInitialiseTaskLists+0x6c>)
 8009d8a:	f7fe fc9f 	bl	80086cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d8e:	480c      	ldr	r0, [pc, #48]	@ (8009dc0 <prvInitialiseTaskLists+0x70>)
 8009d90:	f7fe fc9c 	bl	80086cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d94:	480b      	ldr	r0, [pc, #44]	@ (8009dc4 <prvInitialiseTaskLists+0x74>)
 8009d96:	f7fe fc99 	bl	80086cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc8 <prvInitialiseTaskLists+0x78>)
 8009d9c:	4a05      	ldr	r2, [pc, #20]	@ (8009db4 <prvInitialiseTaskLists+0x64>)
 8009d9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009da0:	4b0a      	ldr	r3, [pc, #40]	@ (8009dcc <prvInitialiseTaskLists+0x7c>)
 8009da2:	4a05      	ldr	r2, [pc, #20]	@ (8009db8 <prvInitialiseTaskLists+0x68>)
 8009da4:	601a      	str	r2, [r3, #0]
}
 8009da6:	bf00      	nop
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20000ae4 	.word	0x20000ae4
 8009db4:	20000f44 	.word	0x20000f44
 8009db8:	20000f58 	.word	0x20000f58
 8009dbc:	20000f74 	.word	0x20000f74
 8009dc0:	20000f88 	.word	0x20000f88
 8009dc4:	20000fa0 	.word	0x20000fa0
 8009dc8:	20000f6c 	.word	0x20000f6c
 8009dcc:	20000f70 	.word	0x20000f70

08009dd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dd6:	e019      	b.n	8009e0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009dd8:	f000 fdee 	bl	800a9b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ddc:	4b10      	ldr	r3, [pc, #64]	@ (8009e20 <prvCheckTasksWaitingTermination+0x50>)
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3304      	adds	r3, #4
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fe fcf9 	bl	80087e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009dee:	4b0d      	ldr	r3, [pc, #52]	@ (8009e24 <prvCheckTasksWaitingTermination+0x54>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	4a0b      	ldr	r2, [pc, #44]	@ (8009e24 <prvCheckTasksWaitingTermination+0x54>)
 8009df6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009df8:	4b0b      	ldr	r3, [pc, #44]	@ (8009e28 <prvCheckTasksWaitingTermination+0x58>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8009e28 <prvCheckTasksWaitingTermination+0x58>)
 8009e00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e02:	f000 fe0b 	bl	800aa1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f810 	bl	8009e2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e0c:	4b06      	ldr	r3, [pc, #24]	@ (8009e28 <prvCheckTasksWaitingTermination+0x58>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1e1      	bne.n	8009dd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20000f88 	.word	0x20000f88
 8009e24:	20000fb4 	.word	0x20000fb4
 8009e28:	20000f9c 	.word	0x20000f9c

08009e2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3354      	adds	r3, #84	@ 0x54
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f001 fdb9 	bl	800b9b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d108      	bne.n	8009e5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 ffa3 	bl	800ad98 <vPortFree>
				vPortFree( pxTCB );
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 ffa0 	bl	800ad98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e58:	e019      	b.n	8009e8e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d103      	bne.n	8009e6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 ff97 	bl	800ad98 <vPortFree>
	}
 8009e6a:	e010      	b.n	8009e8e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d00b      	beq.n	8009e8e <prvDeleteTCB+0x62>
	__asm volatile
 8009e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	60fb      	str	r3, [r7, #12]
}
 8009e88:	bf00      	nop
 8009e8a:	bf00      	nop
 8009e8c:	e7fd      	b.n	8009e8a <prvDeleteTCB+0x5e>
	}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
	...

08009e98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed0 <prvResetNextTaskUnblockTime+0x38>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d104      	bne.n	8009eb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed4 <prvResetNextTaskUnblockTime+0x3c>)
 8009eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8009eae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009eb0:	e008      	b.n	8009ec4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eb2:	4b07      	ldr	r3, [pc, #28]	@ (8009ed0 <prvResetNextTaskUnblockTime+0x38>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	4a04      	ldr	r2, [pc, #16]	@ (8009ed4 <prvResetNextTaskUnblockTime+0x3c>)
 8009ec2:	6013      	str	r3, [r2, #0]
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	20000f6c 	.word	0x20000f6c
 8009ed4:	20000fd4 	.word	0x20000fd4

08009ed8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ede:	4b0b      	ldr	r3, [pc, #44]	@ (8009f0c <xTaskGetSchedulerState+0x34>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d102      	bne.n	8009eec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	607b      	str	r3, [r7, #4]
 8009eea:	e008      	b.n	8009efe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eec:	4b08      	ldr	r3, [pc, #32]	@ (8009f10 <xTaskGetSchedulerState+0x38>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d102      	bne.n	8009efa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	607b      	str	r3, [r7, #4]
 8009ef8:	e001      	b.n	8009efe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009efa:	2300      	movs	r3, #0
 8009efc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009efe:	687b      	ldr	r3, [r7, #4]
	}
 8009f00:	4618      	mov	r0, r3
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	20000fc0 	.word	0x20000fc0
 8009f10:	20000fdc 	.word	0x20000fdc

08009f14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f20:	2300      	movs	r3, #0
 8009f22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d058      	beq.n	8009fdc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8009fe8 <xTaskPriorityDisinherit+0xd4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d00b      	beq.n	8009f4c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	60fb      	str	r3, [r7, #12]
}
 8009f46:	bf00      	nop
 8009f48:	bf00      	nop
 8009f4a:	e7fd      	b.n	8009f48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10b      	bne.n	8009f6c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	60bb      	str	r3, [r7, #8]
}
 8009f66:	bf00      	nop
 8009f68:	bf00      	nop
 8009f6a:	e7fd      	b.n	8009f68 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f70:	1e5a      	subs	r2, r3, #1
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d02c      	beq.n	8009fdc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d128      	bne.n	8009fdc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe fc26 	bl	80087e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fac:	4b0f      	ldr	r3, [pc, #60]	@ (8009fec <xTaskPriorityDisinherit+0xd8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d903      	bls.n	8009fbc <xTaskPriorityDisinherit+0xa8>
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8009fec <xTaskPriorityDisinherit+0xd8>)
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4a09      	ldr	r2, [pc, #36]	@ (8009ff0 <xTaskPriorityDisinherit+0xdc>)
 8009fca:	441a      	add	r2, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	f7fe fba7 	bl	8008726 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fdc:	697b      	ldr	r3, [r7, #20]
	}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000ae0 	.word	0x20000ae0
 8009fec:	20000fbc 	.word	0x20000fbc
 8009ff0:	20000ae4 	.word	0x20000ae4

08009ff4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ffe:	4b21      	ldr	r3, [pc, #132]	@ (800a084 <prvAddCurrentTaskToDelayedList+0x90>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a004:	4b20      	ldr	r3, [pc, #128]	@ (800a088 <prvAddCurrentTaskToDelayedList+0x94>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	3304      	adds	r3, #4
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe fbe8 	bl	80087e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a016:	d10a      	bne.n	800a02e <prvAddCurrentTaskToDelayedList+0x3a>
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d007      	beq.n	800a02e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a01e:	4b1a      	ldr	r3, [pc, #104]	@ (800a088 <prvAddCurrentTaskToDelayedList+0x94>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3304      	adds	r3, #4
 800a024:	4619      	mov	r1, r3
 800a026:	4819      	ldr	r0, [pc, #100]	@ (800a08c <prvAddCurrentTaskToDelayedList+0x98>)
 800a028:	f7fe fb7d 	bl	8008726 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a02c:	e026      	b.n	800a07c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4413      	add	r3, r2
 800a034:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a036:	4b14      	ldr	r3, [pc, #80]	@ (800a088 <prvAddCurrentTaskToDelayedList+0x94>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	429a      	cmp	r2, r3
 800a044:	d209      	bcs.n	800a05a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a046:	4b12      	ldr	r3, [pc, #72]	@ (800a090 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	4b0f      	ldr	r3, [pc, #60]	@ (800a088 <prvAddCurrentTaskToDelayedList+0x94>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3304      	adds	r3, #4
 800a050:	4619      	mov	r1, r3
 800a052:	4610      	mov	r0, r2
 800a054:	f7fe fb8b 	bl	800876e <vListInsert>
}
 800a058:	e010      	b.n	800a07c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a05a:	4b0e      	ldr	r3, [pc, #56]	@ (800a094 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	4b0a      	ldr	r3, [pc, #40]	@ (800a088 <prvAddCurrentTaskToDelayedList+0x94>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3304      	adds	r3, #4
 800a064:	4619      	mov	r1, r3
 800a066:	4610      	mov	r0, r2
 800a068:	f7fe fb81 	bl	800876e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a06c:	4b0a      	ldr	r3, [pc, #40]	@ (800a098 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	429a      	cmp	r2, r3
 800a074:	d202      	bcs.n	800a07c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a076:	4a08      	ldr	r2, [pc, #32]	@ (800a098 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	6013      	str	r3, [r2, #0]
}
 800a07c:	bf00      	nop
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	20000fb8 	.word	0x20000fb8
 800a088:	20000ae0 	.word	0x20000ae0
 800a08c:	20000fa0 	.word	0x20000fa0
 800a090:	20000f70 	.word	0x20000f70
 800a094:	20000f6c 	.word	0x20000f6c
 800a098:	20000fd4 	.word	0x20000fd4

0800a09c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b08a      	sub	sp, #40	@ 0x28
 800a0a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a0a6:	f000 fb13 	bl	800a6d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a0aa:	4b1d      	ldr	r3, [pc, #116]	@ (800a120 <xTimerCreateTimerTask+0x84>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d021      	beq.n	800a0f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a0ba:	1d3a      	adds	r2, r7, #4
 800a0bc:	f107 0108 	add.w	r1, r7, #8
 800a0c0:	f107 030c 	add.w	r3, r7, #12
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fe fae7 	bl	8008698 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	9202      	str	r2, [sp, #8]
 800a0d2:	9301      	str	r3, [sp, #4]
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	2300      	movs	r3, #0
 800a0da:	460a      	mov	r2, r1
 800a0dc:	4911      	ldr	r1, [pc, #68]	@ (800a124 <xTimerCreateTimerTask+0x88>)
 800a0de:	4812      	ldr	r0, [pc, #72]	@ (800a128 <xTimerCreateTimerTask+0x8c>)
 800a0e0:	f7ff f8a2 	bl	8009228 <xTaskCreateStatic>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	4a11      	ldr	r2, [pc, #68]	@ (800a12c <xTimerCreateTimerTask+0x90>)
 800a0e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a0ea:	4b10      	ldr	r3, [pc, #64]	@ (800a12c <xTimerCreateTimerTask+0x90>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10b      	bne.n	800a114 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	613b      	str	r3, [r7, #16]
}
 800a10e:	bf00      	nop
 800a110:	bf00      	nop
 800a112:	e7fd      	b.n	800a110 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a114:	697b      	ldr	r3, [r7, #20]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	20001010 	.word	0x20001010
 800a124:	0800bb9c 	.word	0x0800bb9c
 800a128:	0800a269 	.word	0x0800a269
 800a12c:	20001014 	.word	0x20001014

0800a130 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08a      	sub	sp, #40	@ 0x28
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
 800a13c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a13e:	2300      	movs	r3, #0
 800a140:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10b      	bne.n	800a160 <xTimerGenericCommand+0x30>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	623b      	str	r3, [r7, #32]
}
 800a15a:	bf00      	nop
 800a15c:	bf00      	nop
 800a15e:	e7fd      	b.n	800a15c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a160:	4b19      	ldr	r3, [pc, #100]	@ (800a1c8 <xTimerGenericCommand+0x98>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d02a      	beq.n	800a1be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2b05      	cmp	r3, #5
 800a178:	dc18      	bgt.n	800a1ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a17a:	f7ff fead 	bl	8009ed8 <xTaskGetSchedulerState>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b02      	cmp	r3, #2
 800a182:	d109      	bne.n	800a198 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a184:	4b10      	ldr	r3, [pc, #64]	@ (800a1c8 <xTimerGenericCommand+0x98>)
 800a186:	6818      	ldr	r0, [r3, #0]
 800a188:	f107 0110 	add.w	r1, r7, #16
 800a18c:	2300      	movs	r3, #0
 800a18e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a190:	f7fe fc5a 	bl	8008a48 <xQueueGenericSend>
 800a194:	6278      	str	r0, [r7, #36]	@ 0x24
 800a196:	e012      	b.n	800a1be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a198:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c8 <xTimerGenericCommand+0x98>)
 800a19a:	6818      	ldr	r0, [r3, #0]
 800a19c:	f107 0110 	add.w	r1, r7, #16
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f7fe fc50 	bl	8008a48 <xQueueGenericSend>
 800a1a8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a1aa:	e008      	b.n	800a1be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a1ac:	4b06      	ldr	r3, [pc, #24]	@ (800a1c8 <xTimerGenericCommand+0x98>)
 800a1ae:	6818      	ldr	r0, [r3, #0]
 800a1b0:	f107 0110 	add.w	r1, r7, #16
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	f7fe fd48 	bl	8008c4c <xQueueGenericSendFromISR>
 800a1bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3728      	adds	r7, #40	@ 0x28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20001010 	.word	0x20001010

0800a1cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af02      	add	r7, sp, #8
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1d6:	4b23      	ldr	r3, [pc, #140]	@ (800a264 <prvProcessExpiredTimer+0x98>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	3304      	adds	r3, #4
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fe fafb 	bl	80087e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1f0:	f003 0304 	and.w	r3, r3, #4
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d023      	beq.n	800a240 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	699a      	ldr	r2, [r3, #24]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	18d1      	adds	r1, r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	6978      	ldr	r0, [r7, #20]
 800a206:	f000 f8d5 	bl	800a3b4 <prvInsertTimerInActiveList>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d020      	beq.n	800a252 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a210:	2300      	movs	r3, #0
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	2300      	movs	r3, #0
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	2100      	movs	r1, #0
 800a21a:	6978      	ldr	r0, [r7, #20]
 800a21c:	f7ff ff88 	bl	800a130 <xTimerGenericCommand>
 800a220:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d114      	bne.n	800a252 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	60fb      	str	r3, [r7, #12]
}
 800a23a:	bf00      	nop
 800a23c:	bf00      	nop
 800a23e:	e7fd      	b.n	800a23c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a246:	f023 0301 	bic.w	r3, r3, #1
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	6978      	ldr	r0, [r7, #20]
 800a258:	4798      	blx	r3
}
 800a25a:	bf00      	nop
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20001008 	.word	0x20001008

0800a268 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a270:	f107 0308 	add.w	r3, r7, #8
 800a274:	4618      	mov	r0, r3
 800a276:	f000 f859 	bl	800a32c <prvGetNextExpireTime>
 800a27a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	4619      	mov	r1, r3
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 f805 	bl	800a290 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a286:	f000 f8d7 	bl	800a438 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a28a:	bf00      	nop
 800a28c:	e7f0      	b.n	800a270 <prvTimerTask+0x8>
	...

0800a290 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a29a:	f7ff fa29 	bl	80096f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a29e:	f107 0308 	add.w	r3, r7, #8
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f866 	bl	800a374 <prvSampleTimeNow>
 800a2a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d130      	bne.n	800a312 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10a      	bne.n	800a2cc <prvProcessTimerOrBlockTask+0x3c>
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d806      	bhi.n	800a2cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a2be:	f7ff fa25 	bl	800970c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a2c2:	68f9      	ldr	r1, [r7, #12]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff ff81 	bl	800a1cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a2ca:	e024      	b.n	800a316 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d008      	beq.n	800a2e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a2d2:	4b13      	ldr	r3, [pc, #76]	@ (800a320 <prvProcessTimerOrBlockTask+0x90>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <prvProcessTimerOrBlockTask+0x50>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e000      	b.n	800a2e2 <prvProcessTimerOrBlockTask+0x52>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a2e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a324 <prvProcessTimerOrBlockTask+0x94>)
 800a2e6:	6818      	ldr	r0, [r3, #0]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	f7fe ff65 	bl	80091c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a2f6:	f7ff fa09 	bl	800970c <xTaskResumeAll>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10a      	bne.n	800a316 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a300:	4b09      	ldr	r3, [pc, #36]	@ (800a328 <prvProcessTimerOrBlockTask+0x98>)
 800a302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	f3bf 8f6f 	isb	sy
}
 800a310:	e001      	b.n	800a316 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a312:	f7ff f9fb 	bl	800970c <xTaskResumeAll>
}
 800a316:	bf00      	nop
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	2000100c 	.word	0x2000100c
 800a324:	20001010 	.word	0x20001010
 800a328:	e000ed04 	.word	0xe000ed04

0800a32c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a334:	4b0e      	ldr	r3, [pc, #56]	@ (800a370 <prvGetNextExpireTime+0x44>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <prvGetNextExpireTime+0x16>
 800a33e:	2201      	movs	r2, #1
 800a340:	e000      	b.n	800a344 <prvGetNextExpireTime+0x18>
 800a342:	2200      	movs	r2, #0
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d105      	bne.n	800a35c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a350:	4b07      	ldr	r3, [pc, #28]	@ (800a370 <prvGetNextExpireTime+0x44>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	e001      	b.n	800a360 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a360:	68fb      	ldr	r3, [r7, #12]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	20001008 	.word	0x20001008

0800a374 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a37c:	f7ff fa64 	bl	8009848 <xTaskGetTickCount>
 800a380:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a382:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b0 <prvSampleTimeNow+0x3c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d205      	bcs.n	800a398 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a38c:	f000 f93a 	bl	800a604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	601a      	str	r2, [r3, #0]
 800a396:	e002      	b.n	800a39e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a39e:	4a04      	ldr	r2, [pc, #16]	@ (800a3b0 <prvSampleTimeNow+0x3c>)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20001018 	.word	0x20001018

0800a3b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d812      	bhi.n	800a400 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d302      	bcc.n	800a3ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	e01b      	b.n	800a426 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a3ee:	4b10      	ldr	r3, [pc, #64]	@ (800a430 <prvInsertTimerInActiveList+0x7c>)
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	f7fe f9b8 	bl	800876e <vListInsert>
 800a3fe:	e012      	b.n	800a426 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	429a      	cmp	r2, r3
 800a406:	d206      	bcs.n	800a416 <prvInsertTimerInActiveList+0x62>
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d302      	bcc.n	800a416 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a410:	2301      	movs	r3, #1
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	e007      	b.n	800a426 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a416:	4b07      	ldr	r3, [pc, #28]	@ (800a434 <prvInsertTimerInActiveList+0x80>)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	3304      	adds	r3, #4
 800a41e:	4619      	mov	r1, r3
 800a420:	4610      	mov	r0, r2
 800a422:	f7fe f9a4 	bl	800876e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a426:	697b      	ldr	r3, [r7, #20]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	2000100c 	.word	0x2000100c
 800a434:	20001008 	.word	0x20001008

0800a438 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08e      	sub	sp, #56	@ 0x38
 800a43c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a43e:	e0ce      	b.n	800a5de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	da19      	bge.n	800a47a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a446:	1d3b      	adds	r3, r7, #4
 800a448:	3304      	adds	r3, #4
 800a44a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10b      	bne.n	800a46a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	61fb      	str	r3, [r7, #28]
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop
 800a468:	e7fd      	b.n	800a466 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a470:	6850      	ldr	r0, [r2, #4]
 800a472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a474:	6892      	ldr	r2, [r2, #8]
 800a476:	4611      	mov	r1, r2
 800a478:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f2c0 80ae 	blt.w	800a5de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d004      	beq.n	800a498 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a490:	3304      	adds	r3, #4
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe f9a4 	bl	80087e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a498:	463b      	mov	r3, r7
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff ff6a 	bl	800a374 <prvSampleTimeNow>
 800a4a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	f200 8097 	bhi.w	800a5d8 <prvProcessReceivedCommands+0x1a0>
 800a4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b0 <prvProcessReceivedCommands+0x78>)
 800a4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b0:	0800a4d9 	.word	0x0800a4d9
 800a4b4:	0800a4d9 	.word	0x0800a4d9
 800a4b8:	0800a4d9 	.word	0x0800a4d9
 800a4bc:	0800a54f 	.word	0x0800a54f
 800a4c0:	0800a563 	.word	0x0800a563
 800a4c4:	0800a5af 	.word	0x0800a5af
 800a4c8:	0800a4d9 	.word	0x0800a4d9
 800a4cc:	0800a4d9 	.word	0x0800a4d9
 800a4d0:	0800a54f 	.word	0x0800a54f
 800a4d4:	0800a563 	.word	0x0800a563
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4de:	f043 0301 	orr.w	r3, r3, #1
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	18d1      	adds	r1, r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4f8:	f7ff ff5c 	bl	800a3b4 <prvInsertTimerInActiveList>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d06c      	beq.n	800a5dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a508:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a510:	f003 0304 	and.w	r3, r3, #4
 800a514:	2b00      	cmp	r3, #0
 800a516:	d061      	beq.n	800a5dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	441a      	add	r2, r3
 800a520:	2300      	movs	r3, #0
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	2300      	movs	r3, #0
 800a526:	2100      	movs	r1, #0
 800a528:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a52a:	f7ff fe01 	bl	800a130 <xTimerGenericCommand>
 800a52e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d152      	bne.n	800a5dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	61bb      	str	r3, [r7, #24]
}
 800a548:	bf00      	nop
 800a54a:	bf00      	nop
 800a54c:	e7fd      	b.n	800a54a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a554:	f023 0301 	bic.w	r3, r3, #1
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a560:	e03d      	b.n	800a5de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a568:	f043 0301 	orr.w	r3, r3, #1
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a570:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a578:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10b      	bne.n	800a59a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	617b      	str	r3, [r7, #20]
}
 800a594:	bf00      	nop
 800a596:	bf00      	nop
 800a598:	e7fd      	b.n	800a596 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59c:	699a      	ldr	r2, [r3, #24]
 800a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a0:	18d1      	adds	r1, r2, r3
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5a8:	f7ff ff04 	bl	800a3b4 <prvInsertTimerInActiveList>
					break;
 800a5ac:	e017      	b.n	800a5de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5b4:	f003 0302 	and.w	r3, r3, #2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d103      	bne.n	800a5c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a5bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5be:	f000 fbeb 	bl	800ad98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a5c2:	e00c      	b.n	800a5de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5ca:	f023 0301 	bic.w	r3, r3, #1
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a5d6:	e002      	b.n	800a5de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a5d8:	bf00      	nop
 800a5da:	e000      	b.n	800a5de <prvProcessReceivedCommands+0x1a6>
					break;
 800a5dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5de:	4b08      	ldr	r3, [pc, #32]	@ (800a600 <prvProcessReceivedCommands+0x1c8>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	1d39      	adds	r1, r7, #4
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fe fbce 	bl	8008d88 <xQueueReceive>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f47f af26 	bne.w	800a440 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop
 800a5f8:	3730      	adds	r7, #48	@ 0x30
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	20001010 	.word	0x20001010

0800a604 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b088      	sub	sp, #32
 800a608:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a60a:	e049      	b.n	800a6a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a60c:	4b2e      	ldr	r3, [pc, #184]	@ (800a6c8 <prvSwitchTimerLists+0xc4>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a616:	4b2c      	ldr	r3, [pc, #176]	@ (800a6c8 <prvSwitchTimerLists+0xc4>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3304      	adds	r3, #4
 800a624:	4618      	mov	r0, r3
 800a626:	f7fe f8db 	bl	80087e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a638:	f003 0304 	and.w	r3, r3, #4
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d02f      	beq.n	800a6a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	693a      	ldr	r2, [r7, #16]
 800a646:	4413      	add	r3, r2
 800a648:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d90e      	bls.n	800a670 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a65e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6c8 <prvSwitchTimerLists+0xc4>)
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3304      	adds	r3, #4
 800a666:	4619      	mov	r1, r3
 800a668:	4610      	mov	r0, r2
 800a66a:	f7fe f880 	bl	800876e <vListInsert>
 800a66e:	e017      	b.n	800a6a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a670:	2300      	movs	r3, #0
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	2300      	movs	r3, #0
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	2100      	movs	r1, #0
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7ff fd58 	bl	800a130 <xTimerGenericCommand>
 800a680:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10b      	bne.n	800a6a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	603b      	str	r3, [r7, #0]
}
 800a69a:	bf00      	nop
 800a69c:	bf00      	nop
 800a69e:	e7fd      	b.n	800a69c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6a0:	4b09      	ldr	r3, [pc, #36]	@ (800a6c8 <prvSwitchTimerLists+0xc4>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1b0      	bne.n	800a60c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a6aa:	4b07      	ldr	r3, [pc, #28]	@ (800a6c8 <prvSwitchTimerLists+0xc4>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a6b0:	4b06      	ldr	r3, [pc, #24]	@ (800a6cc <prvSwitchTimerLists+0xc8>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a04      	ldr	r2, [pc, #16]	@ (800a6c8 <prvSwitchTimerLists+0xc4>)
 800a6b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a6b8:	4a04      	ldr	r2, [pc, #16]	@ (800a6cc <prvSwitchTimerLists+0xc8>)
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	6013      	str	r3, [r2, #0]
}
 800a6be:	bf00      	nop
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20001008 	.word	0x20001008
 800a6cc:	2000100c 	.word	0x2000100c

0800a6d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6d6:	f000 f96f 	bl	800a9b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6da:	4b15      	ldr	r3, [pc, #84]	@ (800a730 <prvCheckForValidListAndQueue+0x60>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d120      	bne.n	800a724 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a6e2:	4814      	ldr	r0, [pc, #80]	@ (800a734 <prvCheckForValidListAndQueue+0x64>)
 800a6e4:	f7fd fff2 	bl	80086cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a6e8:	4813      	ldr	r0, [pc, #76]	@ (800a738 <prvCheckForValidListAndQueue+0x68>)
 800a6ea:	f7fd ffef 	bl	80086cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a6ee:	4b13      	ldr	r3, [pc, #76]	@ (800a73c <prvCheckForValidListAndQueue+0x6c>)
 800a6f0:	4a10      	ldr	r2, [pc, #64]	@ (800a734 <prvCheckForValidListAndQueue+0x64>)
 800a6f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a6f4:	4b12      	ldr	r3, [pc, #72]	@ (800a740 <prvCheckForValidListAndQueue+0x70>)
 800a6f6:	4a10      	ldr	r2, [pc, #64]	@ (800a738 <prvCheckForValidListAndQueue+0x68>)
 800a6f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	4b11      	ldr	r3, [pc, #68]	@ (800a744 <prvCheckForValidListAndQueue+0x74>)
 800a700:	4a11      	ldr	r2, [pc, #68]	@ (800a748 <prvCheckForValidListAndQueue+0x78>)
 800a702:	2110      	movs	r1, #16
 800a704:	200a      	movs	r0, #10
 800a706:	f7fe f8ff 	bl	8008908 <xQueueGenericCreateStatic>
 800a70a:	4603      	mov	r3, r0
 800a70c:	4a08      	ldr	r2, [pc, #32]	@ (800a730 <prvCheckForValidListAndQueue+0x60>)
 800a70e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a710:	4b07      	ldr	r3, [pc, #28]	@ (800a730 <prvCheckForValidListAndQueue+0x60>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d005      	beq.n	800a724 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a718:	4b05      	ldr	r3, [pc, #20]	@ (800a730 <prvCheckForValidListAndQueue+0x60>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	490b      	ldr	r1, [pc, #44]	@ (800a74c <prvCheckForValidListAndQueue+0x7c>)
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fe fd24 	bl	800916c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a724:	f000 f97a 	bl	800aa1c <vPortExitCritical>
}
 800a728:	bf00      	nop
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20001010 	.word	0x20001010
 800a734:	20000fe0 	.word	0x20000fe0
 800a738:	20000ff4 	.word	0x20000ff4
 800a73c:	20001008 	.word	0x20001008
 800a740:	2000100c 	.word	0x2000100c
 800a744:	200010bc 	.word	0x200010bc
 800a748:	2000101c 	.word	0x2000101c
 800a74c:	0800bba4 	.word	0x0800bba4

0800a750 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	3b04      	subs	r3, #4
 800a760:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3b04      	subs	r3, #4
 800a76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f023 0201 	bic.w	r2, r3, #1
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3b04      	subs	r3, #4
 800a77e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a780:	4a0c      	ldr	r2, [pc, #48]	@ (800a7b4 <pxPortInitialiseStack+0x64>)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3b14      	subs	r3, #20
 800a78a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3b04      	subs	r3, #4
 800a796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f06f 0202 	mvn.w	r2, #2
 800a79e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3b20      	subs	r3, #32
 800a7a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	0800a7b9 	.word	0x0800a7b9

0800a7b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7c2:	4b13      	ldr	r3, [pc, #76]	@ (800a810 <prvTaskExitError+0x58>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ca:	d00b      	beq.n	800a7e4 <prvTaskExitError+0x2c>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	60fb      	str	r3, [r7, #12]
}
 800a7de:	bf00      	nop
 800a7e0:	bf00      	nop
 800a7e2:	e7fd      	b.n	800a7e0 <prvTaskExitError+0x28>
	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	60bb      	str	r3, [r7, #8]
}
 800a7f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7f8:	bf00      	nop
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0fc      	beq.n	800a7fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	2000011c 	.word	0x2000011c
	...

0800a820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a820:	4b07      	ldr	r3, [pc, #28]	@ (800a840 <pxCurrentTCBConst2>)
 800a822:	6819      	ldr	r1, [r3, #0]
 800a824:	6808      	ldr	r0, [r1, #0]
 800a826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82a:	f380 8809 	msr	PSP, r0
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f04f 0000 	mov.w	r0, #0
 800a836:	f380 8811 	msr	BASEPRI, r0
 800a83a:	4770      	bx	lr
 800a83c:	f3af 8000 	nop.w

0800a840 <pxCurrentTCBConst2>:
 800a840:	20000ae0 	.word	0x20000ae0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop

0800a848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a848:	4808      	ldr	r0, [pc, #32]	@ (800a86c <prvPortStartFirstTask+0x24>)
 800a84a:	6800      	ldr	r0, [r0, #0]
 800a84c:	6800      	ldr	r0, [r0, #0]
 800a84e:	f380 8808 	msr	MSP, r0
 800a852:	f04f 0000 	mov.w	r0, #0
 800a856:	f380 8814 	msr	CONTROL, r0
 800a85a:	b662      	cpsie	i
 800a85c:	b661      	cpsie	f
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	df00      	svc	0
 800a868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a86a:	bf00      	nop
 800a86c:	e000ed08 	.word	0xe000ed08

0800a870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a876:	4b47      	ldr	r3, [pc, #284]	@ (800a994 <xPortStartScheduler+0x124>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a47      	ldr	r2, [pc, #284]	@ (800a998 <xPortStartScheduler+0x128>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d10b      	bne.n	800a898 <xPortStartScheduler+0x28>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	613b      	str	r3, [r7, #16]
}
 800a892:	bf00      	nop
 800a894:	bf00      	nop
 800a896:	e7fd      	b.n	800a894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a898:	4b3e      	ldr	r3, [pc, #248]	@ (800a994 <xPortStartScheduler+0x124>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a3f      	ldr	r2, [pc, #252]	@ (800a99c <xPortStartScheduler+0x12c>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d10b      	bne.n	800a8ba <xPortStartScheduler+0x4a>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	60fb      	str	r3, [r7, #12]
}
 800a8b4:	bf00      	nop
 800a8b6:	bf00      	nop
 800a8b8:	e7fd      	b.n	800a8b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8ba:	4b39      	ldr	r3, [pc, #228]	@ (800a9a0 <xPortStartScheduler+0x130>)
 800a8bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	22ff      	movs	r2, #255	@ 0xff
 800a8ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8d4:	78fb      	ldrb	r3, [r7, #3]
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a8dc:	b2da      	uxtb	r2, r3
 800a8de:	4b31      	ldr	r3, [pc, #196]	@ (800a9a4 <xPortStartScheduler+0x134>)
 800a8e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8e2:	4b31      	ldr	r3, [pc, #196]	@ (800a9a8 <xPortStartScheduler+0x138>)
 800a8e4:	2207      	movs	r2, #7
 800a8e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8e8:	e009      	b.n	800a8fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a9a8 <xPortStartScheduler+0x138>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	4a2d      	ldr	r2, [pc, #180]	@ (800a9a8 <xPortStartScheduler+0x138>)
 800a8f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8f4:	78fb      	ldrb	r3, [r7, #3]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8fe:	78fb      	ldrb	r3, [r7, #3]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a906:	2b80      	cmp	r3, #128	@ 0x80
 800a908:	d0ef      	beq.n	800a8ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a90a:	4b27      	ldr	r3, [pc, #156]	@ (800a9a8 <xPortStartScheduler+0x138>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f1c3 0307 	rsb	r3, r3, #7
 800a912:	2b04      	cmp	r3, #4
 800a914:	d00b      	beq.n	800a92e <xPortStartScheduler+0xbe>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	60bb      	str	r3, [r7, #8]
}
 800a928:	bf00      	nop
 800a92a:	bf00      	nop
 800a92c:	e7fd      	b.n	800a92a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a92e:	4b1e      	ldr	r3, [pc, #120]	@ (800a9a8 <xPortStartScheduler+0x138>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	021b      	lsls	r3, r3, #8
 800a934:	4a1c      	ldr	r2, [pc, #112]	@ (800a9a8 <xPortStartScheduler+0x138>)
 800a936:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a938:	4b1b      	ldr	r3, [pc, #108]	@ (800a9a8 <xPortStartScheduler+0x138>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a940:	4a19      	ldr	r2, [pc, #100]	@ (800a9a8 <xPortStartScheduler+0x138>)
 800a942:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	b2da      	uxtb	r2, r3
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a94c:	4b17      	ldr	r3, [pc, #92]	@ (800a9ac <xPortStartScheduler+0x13c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a16      	ldr	r2, [pc, #88]	@ (800a9ac <xPortStartScheduler+0x13c>)
 800a952:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a956:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a958:	4b14      	ldr	r3, [pc, #80]	@ (800a9ac <xPortStartScheduler+0x13c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a13      	ldr	r2, [pc, #76]	@ (800a9ac <xPortStartScheduler+0x13c>)
 800a95e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a962:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a964:	f000 f8da 	bl	800ab1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a968:	4b11      	ldr	r3, [pc, #68]	@ (800a9b0 <xPortStartScheduler+0x140>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a96e:	f000 f8f9 	bl	800ab64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a972:	4b10      	ldr	r3, [pc, #64]	@ (800a9b4 <xPortStartScheduler+0x144>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a0f      	ldr	r2, [pc, #60]	@ (800a9b4 <xPortStartScheduler+0x144>)
 800a978:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a97c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a97e:	f7ff ff63 	bl	800a848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a982:	f7ff f82b 	bl	80099dc <vTaskSwitchContext>
	prvTaskExitError();
 800a986:	f7ff ff17 	bl	800a7b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	e000ed00 	.word	0xe000ed00
 800a998:	410fc271 	.word	0x410fc271
 800a99c:	410fc270 	.word	0x410fc270
 800a9a0:	e000e400 	.word	0xe000e400
 800a9a4:	2000110c 	.word	0x2000110c
 800a9a8:	20001110 	.word	0x20001110
 800a9ac:	e000ed20 	.word	0xe000ed20
 800a9b0:	2000011c 	.word	0x2000011c
 800a9b4:	e000ef34 	.word	0xe000ef34

0800a9b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	607b      	str	r3, [r7, #4]
}
 800a9d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9d2:	4b10      	ldr	r3, [pc, #64]	@ (800aa14 <vPortEnterCritical+0x5c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	4a0e      	ldr	r2, [pc, #56]	@ (800aa14 <vPortEnterCritical+0x5c>)
 800a9da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9dc:	4b0d      	ldr	r3, [pc, #52]	@ (800aa14 <vPortEnterCritical+0x5c>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d110      	bne.n	800aa06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9e4:	4b0c      	ldr	r3, [pc, #48]	@ (800aa18 <vPortEnterCritical+0x60>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00b      	beq.n	800aa06 <vPortEnterCritical+0x4e>
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	603b      	str	r3, [r7, #0]
}
 800aa00:	bf00      	nop
 800aa02:	bf00      	nop
 800aa04:	e7fd      	b.n	800aa02 <vPortEnterCritical+0x4a>
	}
}
 800aa06:	bf00      	nop
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	2000011c 	.word	0x2000011c
 800aa18:	e000ed04 	.word	0xe000ed04

0800aa1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa22:	4b12      	ldr	r3, [pc, #72]	@ (800aa6c <vPortExitCritical+0x50>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10b      	bne.n	800aa42 <vPortExitCritical+0x26>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	607b      	str	r3, [r7, #4]
}
 800aa3c:	bf00      	nop
 800aa3e:	bf00      	nop
 800aa40:	e7fd      	b.n	800aa3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa42:	4b0a      	ldr	r3, [pc, #40]	@ (800aa6c <vPortExitCritical+0x50>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	3b01      	subs	r3, #1
 800aa48:	4a08      	ldr	r2, [pc, #32]	@ (800aa6c <vPortExitCritical+0x50>)
 800aa4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa4c:	4b07      	ldr	r3, [pc, #28]	@ (800aa6c <vPortExitCritical+0x50>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d105      	bne.n	800aa60 <vPortExitCritical+0x44>
 800aa54:	2300      	movs	r3, #0
 800aa56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	f383 8811 	msr	BASEPRI, r3
}
 800aa5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	2000011c 	.word	0x2000011c

0800aa70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa70:	f3ef 8009 	mrs	r0, PSP
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	4b15      	ldr	r3, [pc, #84]	@ (800aad0 <pxCurrentTCBConst>)
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	f01e 0f10 	tst.w	lr, #16
 800aa80:	bf08      	it	eq
 800aa82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8a:	6010      	str	r0, [r2, #0]
 800aa8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aa94:	f380 8811 	msr	BASEPRI, r0
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f7fe ff9c 	bl	80099dc <vTaskSwitchContext>
 800aaa4:	f04f 0000 	mov.w	r0, #0
 800aaa8:	f380 8811 	msr	BASEPRI, r0
 800aaac:	bc09      	pop	{r0, r3}
 800aaae:	6819      	ldr	r1, [r3, #0]
 800aab0:	6808      	ldr	r0, [r1, #0]
 800aab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab6:	f01e 0f10 	tst.w	lr, #16
 800aaba:	bf08      	it	eq
 800aabc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aac0:	f380 8809 	msr	PSP, r0
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	f3af 8000 	nop.w

0800aad0 <pxCurrentTCBConst>:
 800aad0:	20000ae0 	.word	0x20000ae0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop

0800aad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	607b      	str	r3, [r7, #4]
}
 800aaf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aaf2:	f7fe feb9 	bl	8009868 <xTaskIncrementTick>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aafc:	4b06      	ldr	r3, [pc, #24]	@ (800ab18 <xPortSysTickHandler+0x40>)
 800aafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	2300      	movs	r3, #0
 800ab06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	f383 8811 	msr	BASEPRI, r3
}
 800ab0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab10:	bf00      	nop
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	e000ed04 	.word	0xe000ed04

0800ab1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab20:	4b0b      	ldr	r3, [pc, #44]	@ (800ab50 <vPortSetupTimerInterrupt+0x34>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab26:	4b0b      	ldr	r3, [pc, #44]	@ (800ab54 <vPortSetupTimerInterrupt+0x38>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab58 <vPortSetupTimerInterrupt+0x3c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a0a      	ldr	r2, [pc, #40]	@ (800ab5c <vPortSetupTimerInterrupt+0x40>)
 800ab32:	fba2 2303 	umull	r2, r3, r2, r3
 800ab36:	099b      	lsrs	r3, r3, #6
 800ab38:	4a09      	ldr	r2, [pc, #36]	@ (800ab60 <vPortSetupTimerInterrupt+0x44>)
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab3e:	4b04      	ldr	r3, [pc, #16]	@ (800ab50 <vPortSetupTimerInterrupt+0x34>)
 800ab40:	2207      	movs	r2, #7
 800ab42:	601a      	str	r2, [r3, #0]
}
 800ab44:	bf00      	nop
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	e000e010 	.word	0xe000e010
 800ab54:	e000e018 	.word	0xe000e018
 800ab58:	20000000 	.word	0x20000000
 800ab5c:	10624dd3 	.word	0x10624dd3
 800ab60:	e000e014 	.word	0xe000e014

0800ab64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ab74 <vPortEnableVFP+0x10>
 800ab68:	6801      	ldr	r1, [r0, #0]
 800ab6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ab6e:	6001      	str	r1, [r0, #0]
 800ab70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab72:	bf00      	nop
 800ab74:	e000ed88 	.word	0xe000ed88

0800ab78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab7e:	f3ef 8305 	mrs	r3, IPSR
 800ab82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2b0f      	cmp	r3, #15
 800ab88:	d915      	bls.n	800abb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab8a:	4a18      	ldr	r2, [pc, #96]	@ (800abec <vPortValidateInterruptPriority+0x74>)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	4413      	add	r3, r2
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab94:	4b16      	ldr	r3, [pc, #88]	@ (800abf0 <vPortValidateInterruptPriority+0x78>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	7afa      	ldrb	r2, [r7, #11]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d20b      	bcs.n	800abb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	607b      	str	r3, [r7, #4]
}
 800abb0:	bf00      	nop
 800abb2:	bf00      	nop
 800abb4:	e7fd      	b.n	800abb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abb6:	4b0f      	ldr	r3, [pc, #60]	@ (800abf4 <vPortValidateInterruptPriority+0x7c>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800abbe:	4b0e      	ldr	r3, [pc, #56]	@ (800abf8 <vPortValidateInterruptPriority+0x80>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d90b      	bls.n	800abde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	603b      	str	r3, [r7, #0]
}
 800abd8:	bf00      	nop
 800abda:	bf00      	nop
 800abdc:	e7fd      	b.n	800abda <vPortValidateInterruptPriority+0x62>
	}
 800abde:	bf00      	nop
 800abe0:	3714      	adds	r7, #20
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	e000e3f0 	.word	0xe000e3f0
 800abf0:	2000110c 	.word	0x2000110c
 800abf4:	e000ed0c 	.word	0xe000ed0c
 800abf8:	20001110 	.word	0x20001110

0800abfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08a      	sub	sp, #40	@ 0x28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac04:	2300      	movs	r3, #0
 800ac06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac08:	f7fe fd72 	bl	80096f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac0c:	4b5c      	ldr	r3, [pc, #368]	@ (800ad80 <pvPortMalloc+0x184>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac14:	f000 f924 	bl	800ae60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac18:	4b5a      	ldr	r3, [pc, #360]	@ (800ad84 <pvPortMalloc+0x188>)
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4013      	ands	r3, r2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f040 8095 	bne.w	800ad50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d01e      	beq.n	800ac6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ac2c:	2208      	movs	r2, #8
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4413      	add	r3, r2
 800ac32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d015      	beq.n	800ac6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f023 0307 	bic.w	r3, r3, #7
 800ac44:	3308      	adds	r3, #8
 800ac46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f003 0307 	and.w	r3, r3, #7
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00b      	beq.n	800ac6a <pvPortMalloc+0x6e>
	__asm volatile
 800ac52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac56:	f383 8811 	msr	BASEPRI, r3
 800ac5a:	f3bf 8f6f 	isb	sy
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	617b      	str	r3, [r7, #20]
}
 800ac64:	bf00      	nop
 800ac66:	bf00      	nop
 800ac68:	e7fd      	b.n	800ac66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d06f      	beq.n	800ad50 <pvPortMalloc+0x154>
 800ac70:	4b45      	ldr	r3, [pc, #276]	@ (800ad88 <pvPortMalloc+0x18c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d86a      	bhi.n	800ad50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac7a:	4b44      	ldr	r3, [pc, #272]	@ (800ad8c <pvPortMalloc+0x190>)
 800ac7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac7e:	4b43      	ldr	r3, [pc, #268]	@ (800ad8c <pvPortMalloc+0x190>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac84:	e004      	b.n	800ac90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ac86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d903      	bls.n	800aca2 <pvPortMalloc+0xa6>
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1f1      	bne.n	800ac86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aca2:	4b37      	ldr	r3, [pc, #220]	@ (800ad80 <pvPortMalloc+0x184>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d051      	beq.n	800ad50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2208      	movs	r2, #8
 800acb2:	4413      	add	r3, r2
 800acb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	1ad2      	subs	r2, r2, r3
 800acc6:	2308      	movs	r3, #8
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	429a      	cmp	r2, r3
 800accc:	d920      	bls.n	800ad10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4413      	add	r3, r2
 800acd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	f003 0307 	and.w	r3, r3, #7
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00b      	beq.n	800acf8 <pvPortMalloc+0xfc>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	613b      	str	r3, [r7, #16]
}
 800acf2:	bf00      	nop
 800acf4:	bf00      	nop
 800acf6:	e7fd      	b.n	800acf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	1ad2      	subs	r2, r2, r3
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad0a:	69b8      	ldr	r0, [r7, #24]
 800ad0c:	f000 f90a 	bl	800af24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad10:	4b1d      	ldr	r3, [pc, #116]	@ (800ad88 <pvPortMalloc+0x18c>)
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ad88 <pvPortMalloc+0x18c>)
 800ad1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ad88 <pvPortMalloc+0x18c>)
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	4b1b      	ldr	r3, [pc, #108]	@ (800ad90 <pvPortMalloc+0x194>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d203      	bcs.n	800ad32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad2a:	4b17      	ldr	r3, [pc, #92]	@ (800ad88 <pvPortMalloc+0x18c>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a18      	ldr	r2, [pc, #96]	@ (800ad90 <pvPortMalloc+0x194>)
 800ad30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	4b13      	ldr	r3, [pc, #76]	@ (800ad84 <pvPortMalloc+0x188>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad46:	4b13      	ldr	r3, [pc, #76]	@ (800ad94 <pvPortMalloc+0x198>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	4a11      	ldr	r2, [pc, #68]	@ (800ad94 <pvPortMalloc+0x198>)
 800ad4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad50:	f7fe fcdc 	bl	800970c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	f003 0307 	and.w	r3, r3, #7
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00b      	beq.n	800ad76 <pvPortMalloc+0x17a>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	60fb      	str	r3, [r7, #12]
}
 800ad70:	bf00      	nop
 800ad72:	bf00      	nop
 800ad74:	e7fd      	b.n	800ad72 <pvPortMalloc+0x176>
	return pvReturn;
 800ad76:	69fb      	ldr	r3, [r7, #28]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3728      	adds	r7, #40	@ 0x28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	20001d1c 	.word	0x20001d1c
 800ad84:	20001d30 	.word	0x20001d30
 800ad88:	20001d20 	.word	0x20001d20
 800ad8c:	20001d14 	.word	0x20001d14
 800ad90:	20001d24 	.word	0x20001d24
 800ad94:	20001d28 	.word	0x20001d28

0800ad98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d04f      	beq.n	800ae4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800adaa:	2308      	movs	r3, #8
 800adac:	425b      	negs	r3, r3
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	4413      	add	r3, r2
 800adb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	4b25      	ldr	r3, [pc, #148]	@ (800ae54 <vPortFree+0xbc>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4013      	ands	r3, r2
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10b      	bne.n	800adde <vPortFree+0x46>
	__asm volatile
 800adc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adca:	f383 8811 	msr	BASEPRI, r3
 800adce:	f3bf 8f6f 	isb	sy
 800add2:	f3bf 8f4f 	dsb	sy
 800add6:	60fb      	str	r3, [r7, #12]
}
 800add8:	bf00      	nop
 800adda:	bf00      	nop
 800addc:	e7fd      	b.n	800adda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00b      	beq.n	800adfe <vPortFree+0x66>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	60bb      	str	r3, [r7, #8]
}
 800adf8:	bf00      	nop
 800adfa:	bf00      	nop
 800adfc:	e7fd      	b.n	800adfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	4b14      	ldr	r3, [pc, #80]	@ (800ae54 <vPortFree+0xbc>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4013      	ands	r3, r2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d01e      	beq.n	800ae4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d11a      	bne.n	800ae4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	685a      	ldr	r2, [r3, #4]
 800ae18:	4b0e      	ldr	r3, [pc, #56]	@ (800ae54 <vPortFree+0xbc>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	43db      	mvns	r3, r3
 800ae1e:	401a      	ands	r2, r3
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae24:	f7fe fc64 	bl	80096f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae58 <vPortFree+0xc0>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4413      	add	r3, r2
 800ae32:	4a09      	ldr	r2, [pc, #36]	@ (800ae58 <vPortFree+0xc0>)
 800ae34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae36:	6938      	ldr	r0, [r7, #16]
 800ae38:	f000 f874 	bl	800af24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae3c:	4b07      	ldr	r3, [pc, #28]	@ (800ae5c <vPortFree+0xc4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3301      	adds	r3, #1
 800ae42:	4a06      	ldr	r2, [pc, #24]	@ (800ae5c <vPortFree+0xc4>)
 800ae44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae46:	f7fe fc61 	bl	800970c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae4a:	bf00      	nop
 800ae4c:	3718      	adds	r7, #24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	20001d30 	.word	0x20001d30
 800ae58:	20001d20 	.word	0x20001d20
 800ae5c:	20001d2c 	.word	0x20001d2c

0800ae60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae66:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ae6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae6c:	4b27      	ldr	r3, [pc, #156]	@ (800af0c <prvHeapInit+0xac>)
 800ae6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f003 0307 	and.w	r3, r3, #7
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00c      	beq.n	800ae94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	3307      	adds	r3, #7
 800ae7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f023 0307 	bic.w	r3, r3, #7
 800ae86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	4a1f      	ldr	r2, [pc, #124]	@ (800af0c <prvHeapInit+0xac>)
 800ae90:	4413      	add	r3, r2
 800ae92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae98:	4a1d      	ldr	r2, [pc, #116]	@ (800af10 <prvHeapInit+0xb0>)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae9e:	4b1c      	ldr	r3, [pc, #112]	@ (800af10 <prvHeapInit+0xb0>)
 800aea0:	2200      	movs	r2, #0
 800aea2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	4413      	add	r3, r2
 800aeaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aeac:	2208      	movs	r2, #8
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	1a9b      	subs	r3, r3, r2
 800aeb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f023 0307 	bic.w	r3, r3, #7
 800aeba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	4a15      	ldr	r2, [pc, #84]	@ (800af14 <prvHeapInit+0xb4>)
 800aec0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aec2:	4b14      	ldr	r3, [pc, #80]	@ (800af14 <prvHeapInit+0xb4>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2200      	movs	r2, #0
 800aec8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aeca:	4b12      	ldr	r3, [pc, #72]	@ (800af14 <prvHeapInit+0xb4>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2200      	movs	r2, #0
 800aed0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	1ad2      	subs	r2, r2, r3
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aee0:	4b0c      	ldr	r3, [pc, #48]	@ (800af14 <prvHeapInit+0xb4>)
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	4a0a      	ldr	r2, [pc, #40]	@ (800af18 <prvHeapInit+0xb8>)
 800aeee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	4a09      	ldr	r2, [pc, #36]	@ (800af1c <prvHeapInit+0xbc>)
 800aef6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aef8:	4b09      	ldr	r3, [pc, #36]	@ (800af20 <prvHeapInit+0xc0>)
 800aefa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aefe:	601a      	str	r2, [r3, #0]
}
 800af00:	bf00      	nop
 800af02:	3714      	adds	r7, #20
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	20001114 	.word	0x20001114
 800af10:	20001d14 	.word	0x20001d14
 800af14:	20001d1c 	.word	0x20001d1c
 800af18:	20001d24 	.word	0x20001d24
 800af1c:	20001d20 	.word	0x20001d20
 800af20:	20001d30 	.word	0x20001d30

0800af24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af2c:	4b28      	ldr	r3, [pc, #160]	@ (800afd0 <prvInsertBlockIntoFreeList+0xac>)
 800af2e:	60fb      	str	r3, [r7, #12]
 800af30:	e002      	b.n	800af38 <prvInsertBlockIntoFreeList+0x14>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	60fb      	str	r3, [r7, #12]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d8f7      	bhi.n	800af32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	4413      	add	r3, r2
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	429a      	cmp	r2, r3
 800af52:	d108      	bne.n	800af66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	685a      	ldr	r2, [r3, #4]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	441a      	add	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	441a      	add	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	429a      	cmp	r2, r3
 800af78:	d118      	bne.n	800afac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	4b15      	ldr	r3, [pc, #84]	@ (800afd4 <prvInsertBlockIntoFreeList+0xb0>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	429a      	cmp	r2, r3
 800af84:	d00d      	beq.n	800afa2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	685a      	ldr	r2, [r3, #4]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	441a      	add	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	e008      	b.n	800afb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800afa2:	4b0c      	ldr	r3, [pc, #48]	@ (800afd4 <prvInsertBlockIntoFreeList+0xb0>)
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	601a      	str	r2, [r3, #0]
 800afaa:	e003      	b.n	800afb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d002      	beq.n	800afc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afc2:	bf00      	nop
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	20001d14 	.word	0x20001d14
 800afd4:	20001d1c 	.word	0x20001d1c

0800afd8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800afdc:	2200      	movs	r2, #0
 800afde:	4912      	ldr	r1, [pc, #72]	@ (800b028 <MX_USB_Device_Init+0x50>)
 800afe0:	4812      	ldr	r0, [pc, #72]	@ (800b02c <MX_USB_Device_Init+0x54>)
 800afe2:	f7fc f8f3 	bl	80071cc <USBD_Init>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800afec:	f7f5 fc24 	bl	8000838 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800aff0:	490f      	ldr	r1, [pc, #60]	@ (800b030 <MX_USB_Device_Init+0x58>)
 800aff2:	480e      	ldr	r0, [pc, #56]	@ (800b02c <MX_USB_Device_Init+0x54>)
 800aff4:	f7fc f91a 	bl	800722c <USBD_RegisterClass>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d001      	beq.n	800b002 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800affe:	f7f5 fc1b 	bl	8000838 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b002:	490c      	ldr	r1, [pc, #48]	@ (800b034 <MX_USB_Device_Init+0x5c>)
 800b004:	4809      	ldr	r0, [pc, #36]	@ (800b02c <MX_USB_Device_Init+0x54>)
 800b006:	f7fc f86b 	bl	80070e0 <USBD_CDC_RegisterInterface>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d001      	beq.n	800b014 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b010:	f7f5 fc12 	bl	8000838 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b014:	4805      	ldr	r0, [pc, #20]	@ (800b02c <MX_USB_Device_Init+0x54>)
 800b016:	f7fc f930 	bl	800727a <USBD_Start>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b020:	f7f5 fc0a 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b024:	bf00      	nop
 800b026:	bd80      	pop	{r7, pc}
 800b028:	20000134 	.word	0x20000134
 800b02c:	20001d34 	.word	0x20001d34
 800b030:	20000018 	.word	0x20000018
 800b034:	20000120 	.word	0x20000120

0800b038 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b03c:	2200      	movs	r2, #0
 800b03e:	4905      	ldr	r1, [pc, #20]	@ (800b054 <CDC_Init_FS+0x1c>)
 800b040:	4805      	ldr	r0, [pc, #20]	@ (800b058 <CDC_Init_FS+0x20>)
 800b042:	f7fc f862 	bl	800710a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b046:	4905      	ldr	r1, [pc, #20]	@ (800b05c <CDC_Init_FS+0x24>)
 800b048:	4803      	ldr	r0, [pc, #12]	@ (800b058 <CDC_Init_FS+0x20>)
 800b04a:	f7fc f87c 	bl	8007146 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b04e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b050:	4618      	mov	r0, r3
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20002804 	.word	0x20002804
 800b058:	20001d34 	.word	0x20001d34
 800b05c:	20002004 	.word	0x20002004

0800b060 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b060:	b480      	push	{r7}
 800b062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b064:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b066:	4618      	mov	r0, r3
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	4603      	mov	r3, r0
 800b078:	6039      	str	r1, [r7, #0]
 800b07a:	71fb      	strb	r3, [r7, #7]
 800b07c:	4613      	mov	r3, r2
 800b07e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	2b23      	cmp	r3, #35	@ 0x23
 800b084:	d84a      	bhi.n	800b11c <CDC_Control_FS+0xac>
 800b086:	a201      	add	r2, pc, #4	@ (adr r2, 800b08c <CDC_Control_FS+0x1c>)
 800b088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08c:	0800b11d 	.word	0x0800b11d
 800b090:	0800b11d 	.word	0x0800b11d
 800b094:	0800b11d 	.word	0x0800b11d
 800b098:	0800b11d 	.word	0x0800b11d
 800b09c:	0800b11d 	.word	0x0800b11d
 800b0a0:	0800b11d 	.word	0x0800b11d
 800b0a4:	0800b11d 	.word	0x0800b11d
 800b0a8:	0800b11d 	.word	0x0800b11d
 800b0ac:	0800b11d 	.word	0x0800b11d
 800b0b0:	0800b11d 	.word	0x0800b11d
 800b0b4:	0800b11d 	.word	0x0800b11d
 800b0b8:	0800b11d 	.word	0x0800b11d
 800b0bc:	0800b11d 	.word	0x0800b11d
 800b0c0:	0800b11d 	.word	0x0800b11d
 800b0c4:	0800b11d 	.word	0x0800b11d
 800b0c8:	0800b11d 	.word	0x0800b11d
 800b0cc:	0800b11d 	.word	0x0800b11d
 800b0d0:	0800b11d 	.word	0x0800b11d
 800b0d4:	0800b11d 	.word	0x0800b11d
 800b0d8:	0800b11d 	.word	0x0800b11d
 800b0dc:	0800b11d 	.word	0x0800b11d
 800b0e0:	0800b11d 	.word	0x0800b11d
 800b0e4:	0800b11d 	.word	0x0800b11d
 800b0e8:	0800b11d 	.word	0x0800b11d
 800b0ec:	0800b11d 	.word	0x0800b11d
 800b0f0:	0800b11d 	.word	0x0800b11d
 800b0f4:	0800b11d 	.word	0x0800b11d
 800b0f8:	0800b11d 	.word	0x0800b11d
 800b0fc:	0800b11d 	.word	0x0800b11d
 800b100:	0800b11d 	.word	0x0800b11d
 800b104:	0800b11d 	.word	0x0800b11d
 800b108:	0800b11d 	.word	0x0800b11d
 800b10c:	0800b11d 	.word	0x0800b11d
 800b110:	0800b11d 	.word	0x0800b11d
 800b114:	0800b11d 	.word	0x0800b11d
 800b118:	0800b11d 	.word	0x0800b11d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b11c:	bf00      	nop
  }

  return (USBD_OK);
 800b11e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b120:	4618      	mov	r0, r3
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b136:	6879      	ldr	r1, [r7, #4]
 800b138:	4805      	ldr	r0, [pc, #20]	@ (800b150 <CDC_Receive_FS+0x24>)
 800b13a:	f7fc f804 	bl	8007146 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b13e:	4804      	ldr	r0, [pc, #16]	@ (800b150 <CDC_Receive_FS+0x24>)
 800b140:	f7fc f81a 	bl	8007178 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b144:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	20001d34 	.word	0x20001d34

0800b154 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b154:	b480      	push	{r7}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	4613      	mov	r3, r2
 800b160:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b162:	2300      	movs	r3, #0
 800b164:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b166:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	371c      	adds	r7, #28
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
	...

0800b178 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	6039      	str	r1, [r7, #0]
 800b182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2212      	movs	r2, #18
 800b188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b18a:	4b03      	ldr	r3, [pc, #12]	@ (800b198 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr
 800b198:	20000154 	.word	0x20000154

0800b19c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	6039      	str	r1, [r7, #0]
 800b1a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2204      	movs	r2, #4
 800b1ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b1ae:	4b03      	ldr	r3, [pc, #12]	@ (800b1bc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	20000168 	.word	0x20000168

0800b1c0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	6039      	str	r1, [r7, #0]
 800b1ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d105      	bne.n	800b1de <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	4907      	ldr	r1, [pc, #28]	@ (800b1f4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b1d6:	4808      	ldr	r0, [pc, #32]	@ (800b1f8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b1d8:	f7fd f837 	bl	800824a <USBD_GetString>
 800b1dc:	e004      	b.n	800b1e8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	4904      	ldr	r1, [pc, #16]	@ (800b1f4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b1e2:	4805      	ldr	r0, [pc, #20]	@ (800b1f8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b1e4:	f7fd f831 	bl	800824a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1e8:	4b02      	ldr	r3, [pc, #8]	@ (800b1f4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20003004 	.word	0x20003004
 800b1f8:	0800bbac 	.word	0x0800bbac

0800b1fc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	6039      	str	r1, [r7, #0]
 800b206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	4904      	ldr	r1, [pc, #16]	@ (800b21c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b20c:	4804      	ldr	r0, [pc, #16]	@ (800b220 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b20e:	f7fd f81c 	bl	800824a <USBD_GetString>
  return USBD_StrDesc;
 800b212:	4b02      	ldr	r3, [pc, #8]	@ (800b21c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b214:	4618      	mov	r0, r3
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	20003004 	.word	0x20003004
 800b220:	0800bbc4 	.word	0x0800bbc4

0800b224 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	4603      	mov	r3, r0
 800b22c:	6039      	str	r1, [r7, #0]
 800b22e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	221a      	movs	r2, #26
 800b234:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b236:	f000 f843 	bl	800b2c0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b23a:	4b02      	ldr	r3, [pc, #8]	@ (800b244 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	2000016c 	.word	0x2000016c

0800b248 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	6039      	str	r1, [r7, #0]
 800b252:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b254:	79fb      	ldrb	r3, [r7, #7]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d105      	bne.n	800b266 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	4907      	ldr	r1, [pc, #28]	@ (800b27c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b25e:	4808      	ldr	r0, [pc, #32]	@ (800b280 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b260:	f7fc fff3 	bl	800824a <USBD_GetString>
 800b264:	e004      	b.n	800b270 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	4904      	ldr	r1, [pc, #16]	@ (800b27c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b26a:	4805      	ldr	r0, [pc, #20]	@ (800b280 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b26c:	f7fc ffed 	bl	800824a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b270:	4b02      	ldr	r3, [pc, #8]	@ (800b27c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b272:	4618      	mov	r0, r3
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20003004 	.word	0x20003004
 800b280:	0800bbd8 	.word	0x0800bbd8

0800b284 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	6039      	str	r1, [r7, #0]
 800b28e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b290:	79fb      	ldrb	r3, [r7, #7]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d105      	bne.n	800b2a2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	4907      	ldr	r1, [pc, #28]	@ (800b2b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b29a:	4808      	ldr	r0, [pc, #32]	@ (800b2bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b29c:	f7fc ffd5 	bl	800824a <USBD_GetString>
 800b2a0:	e004      	b.n	800b2ac <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	4904      	ldr	r1, [pc, #16]	@ (800b2b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b2a6:	4805      	ldr	r0, [pc, #20]	@ (800b2bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b2a8:	f7fc ffcf 	bl	800824a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2ac:	4b02      	ldr	r3, [pc, #8]	@ (800b2b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20003004 	.word	0x20003004
 800b2bc:	0800bbe4 	.word	0x0800bbe4

0800b2c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b304 <Get_SerialNum+0x44>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b2cc:	4b0e      	ldr	r3, [pc, #56]	@ (800b308 <Get_SerialNum+0x48>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b2d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b30c <Get_SerialNum+0x4c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4413      	add	r3, r2
 800b2de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d009      	beq.n	800b2fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b2e6:	2208      	movs	r2, #8
 800b2e8:	4909      	ldr	r1, [pc, #36]	@ (800b310 <Get_SerialNum+0x50>)
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f000 f814 	bl	800b318 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b2f0:	2204      	movs	r2, #4
 800b2f2:	4908      	ldr	r1, [pc, #32]	@ (800b314 <Get_SerialNum+0x54>)
 800b2f4:	68b8      	ldr	r0, [r7, #8]
 800b2f6:	f000 f80f 	bl	800b318 <IntToUnicode>
  }
}
 800b2fa:	bf00      	nop
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	1fff7590 	.word	0x1fff7590
 800b308:	1fff7594 	.word	0x1fff7594
 800b30c:	1fff7598 	.word	0x1fff7598
 800b310:	2000016e 	.word	0x2000016e
 800b314:	2000017e 	.word	0x2000017e

0800b318 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	4613      	mov	r3, r2
 800b324:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b32a:	2300      	movs	r3, #0
 800b32c:	75fb      	strb	r3, [r7, #23]
 800b32e:	e027      	b.n	800b380 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	0f1b      	lsrs	r3, r3, #28
 800b334:	2b09      	cmp	r3, #9
 800b336:	d80b      	bhi.n	800b350 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	0f1b      	lsrs	r3, r3, #28
 800b33c:	b2da      	uxtb	r2, r3
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	005b      	lsls	r3, r3, #1
 800b342:	4619      	mov	r1, r3
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	440b      	add	r3, r1
 800b348:	3230      	adds	r2, #48	@ 0x30
 800b34a:	b2d2      	uxtb	r2, r2
 800b34c:	701a      	strb	r2, [r3, #0]
 800b34e:	e00a      	b.n	800b366 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	0f1b      	lsrs	r3, r3, #28
 800b354:	b2da      	uxtb	r2, r3
 800b356:	7dfb      	ldrb	r3, [r7, #23]
 800b358:	005b      	lsls	r3, r3, #1
 800b35a:	4619      	mov	r1, r3
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	440b      	add	r3, r1
 800b360:	3237      	adds	r2, #55	@ 0x37
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	011b      	lsls	r3, r3, #4
 800b36a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b36c:	7dfb      	ldrb	r3, [r7, #23]
 800b36e:	005b      	lsls	r3, r3, #1
 800b370:	3301      	adds	r3, #1
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	4413      	add	r3, r2
 800b376:	2200      	movs	r2, #0
 800b378:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b37a:	7dfb      	ldrb	r3, [r7, #23]
 800b37c:	3301      	adds	r3, #1
 800b37e:	75fb      	strb	r3, [r7, #23]
 800b380:	7dfa      	ldrb	r2, [r7, #23]
 800b382:	79fb      	ldrb	r3, [r7, #7]
 800b384:	429a      	cmp	r2, r3
 800b386:	d3d3      	bcc.n	800b330 <IntToUnicode+0x18>
  }
}
 800b388:	bf00      	nop
 800b38a:	bf00      	nop
 800b38c:	371c      	adds	r7, #28
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
	...

0800b398 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b098      	sub	sp, #96	@ 0x60
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b3a0:	f107 0310 	add.w	r3, r7, #16
 800b3a4:	2250      	movs	r2, #80	@ 0x50
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 faf9 	bl	800b9a0 <memset>
  if(pcdHandle->Instance==USB)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a15      	ldr	r2, [pc, #84]	@ (800b408 <HAL_PCD_MspInit+0x70>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d122      	bne.n	800b3fe <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b3b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b3bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b3c2:	f107 0310 	add.w	r3, r7, #16
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7f8 fccc 	bl	8003d64 <HAL_RCCEx_PeriphCLKConfig>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b3d2:	f7f5 fa31 	bl	8000838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b40c <HAL_PCD_MspInit+0x74>)
 800b3d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3da:	4a0c      	ldr	r2, [pc, #48]	@ (800b40c <HAL_PCD_MspInit+0x74>)
 800b3dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b3e0:	6593      	str	r3, [r2, #88]	@ 0x58
 800b3e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b40c <HAL_PCD_MspInit+0x74>)
 800b3e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3ea:	60fb      	str	r3, [r7, #12]
 800b3ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2105      	movs	r1, #5
 800b3f2:	2014      	movs	r0, #20
 800b3f4:	f7f5 fd15 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b3f8:	2014      	movs	r0, #20
 800b3fa:	f7f5 fd2c 	bl	8000e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b3fe:	bf00      	nop
 800b400:	3760      	adds	r7, #96	@ 0x60
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	40005c00 	.word	0x40005c00
 800b40c:	40021000 	.word	0x40021000

0800b410 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b424:	4619      	mov	r1, r3
 800b426:	4610      	mov	r0, r2
 800b428:	f7fb ff72 	bl	8007310 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b42c:	bf00      	nop
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	460b      	mov	r3, r1
 800b43e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b446:	78fa      	ldrb	r2, [r7, #3]
 800b448:	6879      	ldr	r1, [r7, #4]
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	440b      	add	r3, r1
 800b454:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	78fb      	ldrb	r3, [r7, #3]
 800b45c:	4619      	mov	r1, r3
 800b45e:	f7fb ffac 	bl	80073ba <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b462:	bf00      	nop
 800b464:	3708      	adds	r7, #8
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b082      	sub	sp, #8
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	460b      	mov	r3, r1
 800b474:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b47c:	78fa      	ldrb	r2, [r7, #3]
 800b47e:	6879      	ldr	r1, [r7, #4]
 800b480:	4613      	mov	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	00db      	lsls	r3, r3, #3
 800b488:	440b      	add	r3, r1
 800b48a:	3324      	adds	r3, #36	@ 0x24
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	78fb      	ldrb	r3, [r7, #3]
 800b490:	4619      	mov	r1, r3
 800b492:	f7fb fff5 	bl	8007480 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b496:	bf00      	nop
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7fc f909 	bl	80076c4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b4b2:	bf00      	nop
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	795b      	ldrb	r3, [r3, #5]
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d001      	beq.n	800b4d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b4ce:	f7f5 f9b3 	bl	8000838 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b4d8:	7bfa      	ldrb	r2, [r7, #15]
 800b4da:	4611      	mov	r1, r2
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fc f8b3 	bl	8007648 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fc f85f 	bl	80075ac <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b4ee:	bf00      	nop
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
	...

0800b4f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b506:	4618      	mov	r0, r3
 800b508:	f7fc f8ae 	bl	8007668 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	7a5b      	ldrb	r3, [r3, #9]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d005      	beq.n	800b520 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b514:	4b04      	ldr	r3, [pc, #16]	@ (800b528 <HAL_PCD_SuspendCallback+0x30>)
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	4a03      	ldr	r2, [pc, #12]	@ (800b528 <HAL_PCD_SuspendCallback+0x30>)
 800b51a:	f043 0306 	orr.w	r3, r3, #6
 800b51e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	e000ed00 	.word	0xe000ed00

0800b52c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	7a5b      	ldrb	r3, [r3, #9]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d007      	beq.n	800b54c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b53c:	4b08      	ldr	r3, [pc, #32]	@ (800b560 <HAL_PCD_ResumeCallback+0x34>)
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	4a07      	ldr	r2, [pc, #28]	@ (800b560 <HAL_PCD_ResumeCallback+0x34>)
 800b542:	f023 0306 	bic.w	r3, r3, #6
 800b546:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b548:	f000 f9f8 	bl	800b93c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b552:	4618      	mov	r0, r3
 800b554:	f7fc f89e 	bl	8007694 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	e000ed00 	.word	0xe000ed00

0800b564 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b56c:	4a2b      	ldr	r2, [pc, #172]	@ (800b61c <USBD_LL_Init+0xb8>)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a29      	ldr	r2, [pc, #164]	@ (800b61c <USBD_LL_Init+0xb8>)
 800b578:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b57c:	4b27      	ldr	r3, [pc, #156]	@ (800b61c <USBD_LL_Init+0xb8>)
 800b57e:	4a28      	ldr	r2, [pc, #160]	@ (800b620 <USBD_LL_Init+0xbc>)
 800b580:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b582:	4b26      	ldr	r3, [pc, #152]	@ (800b61c <USBD_LL_Init+0xb8>)
 800b584:	2208      	movs	r2, #8
 800b586:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b588:	4b24      	ldr	r3, [pc, #144]	@ (800b61c <USBD_LL_Init+0xb8>)
 800b58a:	2202      	movs	r2, #2
 800b58c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b58e:	4b23      	ldr	r3, [pc, #140]	@ (800b61c <USBD_LL_Init+0xb8>)
 800b590:	2202      	movs	r2, #2
 800b592:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b594:	4b21      	ldr	r3, [pc, #132]	@ (800b61c <USBD_LL_Init+0xb8>)
 800b596:	2200      	movs	r2, #0
 800b598:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b59a:	4b20      	ldr	r3, [pc, #128]	@ (800b61c <USBD_LL_Init+0xb8>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b5a0:	4b1e      	ldr	r3, [pc, #120]	@ (800b61c <USBD_LL_Init+0xb8>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b5a6:	4b1d      	ldr	r3, [pc, #116]	@ (800b61c <USBD_LL_Init+0xb8>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b5ac:	481b      	ldr	r0, [pc, #108]	@ (800b61c <USBD_LL_Init+0xb8>)
 800b5ae:	f7f6 f8f5 	bl	800179c <HAL_PCD_Init>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b5b8:	f7f5 f93e 	bl	8000838 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b5c2:	2318      	movs	r3, #24
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	f7f7 fd7c 	bl	80030c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b5d2:	2358      	movs	r3, #88	@ 0x58
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	2180      	movs	r1, #128	@ 0x80
 800b5d8:	f7f7 fd74 	bl	80030c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b5e2:	23c0      	movs	r3, #192	@ 0xc0
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	2181      	movs	r1, #129	@ 0x81
 800b5e8:	f7f7 fd6c 	bl	80030c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b5f2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	f7f7 fd63 	bl	80030c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b604:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b608:	2200      	movs	r2, #0
 800b60a:	2182      	movs	r1, #130	@ 0x82
 800b60c:	f7f7 fd5a 	bl	80030c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	20003204 	.word	0x20003204
 800b620:	40005c00 	.word	0x40005c00

0800b624 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b630:	2300      	movs	r3, #0
 800b632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7f6 f97c 	bl	8001938 <HAL_PCD_Start>
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b644:	7bfb      	ldrb	r3, [r7, #15]
 800b646:	4618      	mov	r0, r3
 800b648:	f000 f97e 	bl	800b948 <USBD_Get_USB_Status>
 800b64c:	4603      	mov	r3, r0
 800b64e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b650:	7bbb      	ldrb	r3, [r7, #14]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b084      	sub	sp, #16
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	4608      	mov	r0, r1
 800b664:	4611      	mov	r1, r2
 800b666:	461a      	mov	r2, r3
 800b668:	4603      	mov	r3, r0
 800b66a:	70fb      	strb	r3, [r7, #3]
 800b66c:	460b      	mov	r3, r1
 800b66e:	70bb      	strb	r3, [r7, #2]
 800b670:	4613      	mov	r3, r2
 800b672:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b682:	78bb      	ldrb	r3, [r7, #2]
 800b684:	883a      	ldrh	r2, [r7, #0]
 800b686:	78f9      	ldrb	r1, [r7, #3]
 800b688:	f7f6 fac3 	bl	8001c12 <HAL_PCD_EP_Open>
 800b68c:	4603      	mov	r3, r0
 800b68e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b690:	7bfb      	ldrb	r3, [r7, #15]
 800b692:	4618      	mov	r0, r3
 800b694:	f000 f958 	bl	800b948 <USBD_Get_USB_Status>
 800b698:	4603      	mov	r3, r0
 800b69a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b6c0:	78fa      	ldrb	r2, [r7, #3]
 800b6c2:	4611      	mov	r1, r2
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7f6 fb03 	bl	8001cd0 <HAL_PCD_EP_Close>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 f939 	bl	800b948 <USBD_Get_USB_Status>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b6fe:	78fa      	ldrb	r2, [r7, #3]
 800b700:	4611      	mov	r1, r2
 800b702:	4618      	mov	r0, r3
 800b704:	f7f6 fbac 	bl	8001e60 <HAL_PCD_EP_SetStall>
 800b708:	4603      	mov	r3, r0
 800b70a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 f91a 	bl	800b948 <USBD_Get_USB_Status>
 800b714:	4603      	mov	r3, r0
 800b716:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b718:	7bbb      	ldrb	r3, [r7, #14]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	460b      	mov	r3, r1
 800b72c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b73c:	78fa      	ldrb	r2, [r7, #3]
 800b73e:	4611      	mov	r1, r2
 800b740:	4618      	mov	r0, r3
 800b742:	f7f6 fbdf 	bl	8001f04 <HAL_PCD_EP_ClrStall>
 800b746:	4603      	mov	r3, r0
 800b748:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f000 f8fb 	bl	800b948 <USBD_Get_USB_Status>
 800b752:	4603      	mov	r3, r0
 800b754:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b756:	7bbb      	ldrb	r3, [r7, #14]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	460b      	mov	r3, r1
 800b76a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b772:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	da0b      	bge.n	800b794 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b77c:	78fb      	ldrb	r3, [r7, #3]
 800b77e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b782:	68f9      	ldr	r1, [r7, #12]
 800b784:	4613      	mov	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	00db      	lsls	r3, r3, #3
 800b78c:	440b      	add	r3, r1
 800b78e:	3312      	adds	r3, #18
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	e00b      	b.n	800b7ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b794:	78fb      	ldrb	r3, [r7, #3]
 800b796:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b79a:	68f9      	ldr	r1, [r7, #12]
 800b79c:	4613      	mov	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4413      	add	r3, r2
 800b7a2:	00db      	lsls	r3, r3, #3
 800b7a4:	440b      	add	r3, r1
 800b7a6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b7aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3714      	adds	r7, #20
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b7d2:	78fa      	ldrb	r2, [r7, #3]
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7f6 f9f7 	bl	8001bca <HAL_PCD_SetAddress>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 f8b0 	bl	800b948 <USBD_Get_USB_Status>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b086      	sub	sp, #24
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	60f8      	str	r0, [r7, #12]
 800b7fe:	607a      	str	r2, [r7, #4]
 800b800:	603b      	str	r3, [r7, #0]
 800b802:	460b      	mov	r3, r1
 800b804:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b814:	7af9      	ldrb	r1, [r7, #11]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	f7f6 faea 	bl	8001df2 <HAL_PCD_EP_Transmit>
 800b81e:	4603      	mov	r3, r0
 800b820:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b822:	7dfb      	ldrb	r3, [r7, #23]
 800b824:	4618      	mov	r0, r3
 800b826:	f000 f88f 	bl	800b948 <USBD_Get_USB_Status>
 800b82a:	4603      	mov	r3, r0
 800b82c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b82e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3718      	adds	r7, #24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	607a      	str	r2, [r7, #4]
 800b842:	603b      	str	r3, [r7, #0]
 800b844:	460b      	mov	r3, r1
 800b846:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b856:	7af9      	ldrb	r1, [r7, #11]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	f7f6 fa80 	bl	8001d60 <HAL_PCD_EP_Receive>
 800b860:	4603      	mov	r3, r0
 800b862:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b864:	7dfb      	ldrb	r3, [r7, #23]
 800b866:	4618      	mov	r0, r3
 800b868:	f000 f86e 	bl	800b948 <USBD_Get_USB_Status>
 800b86c:	4603      	mov	r3, r0
 800b86e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b870:	7dbb      	ldrb	r3, [r7, #22]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3718      	adds	r7, #24
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b082      	sub	sp, #8
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	460b      	mov	r3, r1
 800b884:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b88c:	78fa      	ldrb	r2, [r7, #3]
 800b88e:	4611      	mov	r1, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f7f6 fa96 	bl	8001dc2 <HAL_PCD_EP_GetRxCount>
 800b896:	4603      	mov	r3, r0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b8ac:	78fb      	ldrb	r3, [r7, #3]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d002      	beq.n	800b8b8 <HAL_PCDEx_LPM_Callback+0x18>
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d013      	beq.n	800b8de <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b8b6:	e023      	b.n	800b900 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	7a5b      	ldrb	r3, [r3, #9]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d007      	beq.n	800b8d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b8c0:	f000 f83c 	bl	800b93c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8c4:	4b10      	ldr	r3, [pc, #64]	@ (800b908 <HAL_PCDEx_LPM_Callback+0x68>)
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	4a0f      	ldr	r2, [pc, #60]	@ (800b908 <HAL_PCDEx_LPM_Callback+0x68>)
 800b8ca:	f023 0306 	bic.w	r3, r3, #6
 800b8ce:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fb fedc 	bl	8007694 <USBD_LL_Resume>
    break;
 800b8dc:	e010      	b.n	800b900 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fb febf 	bl	8007668 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	7a5b      	ldrb	r3, [r3, #9]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d005      	beq.n	800b8fe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8f2:	4b05      	ldr	r3, [pc, #20]	@ (800b908 <HAL_PCDEx_LPM_Callback+0x68>)
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	4a04      	ldr	r2, [pc, #16]	@ (800b908 <HAL_PCDEx_LPM_Callback+0x68>)
 800b8f8:	f043 0306 	orr.w	r3, r3, #6
 800b8fc:	6113      	str	r3, [r2, #16]
    break;
 800b8fe:	bf00      	nop
}
 800b900:	bf00      	nop
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	e000ed00 	.word	0xe000ed00

0800b90c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b914:	4b03      	ldr	r3, [pc, #12]	@ (800b924 <USBD_static_malloc+0x18>)
}
 800b916:	4618      	mov	r0, r3
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	200034e0 	.word	0x200034e0

0800b928 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]

}
 800b930:	bf00      	nop
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b940:	f7f4 fe08 	bl	8000554 <SystemClock_Config>
}
 800b944:	bf00      	nop
 800b946:	bd80      	pop	{r7, pc}

0800b948 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	4603      	mov	r3, r0
 800b950:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b956:	79fb      	ldrb	r3, [r7, #7]
 800b958:	2b03      	cmp	r3, #3
 800b95a:	d817      	bhi.n	800b98c <USBD_Get_USB_Status+0x44>
 800b95c:	a201      	add	r2, pc, #4	@ (adr r2, 800b964 <USBD_Get_USB_Status+0x1c>)
 800b95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b962:	bf00      	nop
 800b964:	0800b975 	.word	0x0800b975
 800b968:	0800b97b 	.word	0x0800b97b
 800b96c:	0800b981 	.word	0x0800b981
 800b970:	0800b987 	.word	0x0800b987
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	73fb      	strb	r3, [r7, #15]
    break;
 800b978:	e00b      	b.n	800b992 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b97a:	2303      	movs	r3, #3
 800b97c:	73fb      	strb	r3, [r7, #15]
    break;
 800b97e:	e008      	b.n	800b992 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b980:	2301      	movs	r3, #1
 800b982:	73fb      	strb	r3, [r7, #15]
    break;
 800b984:	e005      	b.n	800b992 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b986:	2303      	movs	r3, #3
 800b988:	73fb      	strb	r3, [r7, #15]
    break;
 800b98a:	e002      	b.n	800b992 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b98c:	2303      	movs	r3, #3
 800b98e:	73fb      	strb	r3, [r7, #15]
    break;
 800b990:	bf00      	nop
  }
  return usb_status;
 800b992:	7bfb      	ldrb	r3, [r7, #15]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3714      	adds	r7, #20
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <memset>:
 800b9a0:	4402      	add	r2, r0
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d100      	bne.n	800b9aa <memset+0xa>
 800b9a8:	4770      	bx	lr
 800b9aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b9ae:	e7f9      	b.n	800b9a4 <memset+0x4>

0800b9b0 <_reclaim_reent>:
 800b9b0:	4b29      	ldr	r3, [pc, #164]	@ (800ba58 <_reclaim_reent+0xa8>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4283      	cmp	r3, r0
 800b9b6:	b570      	push	{r4, r5, r6, lr}
 800b9b8:	4604      	mov	r4, r0
 800b9ba:	d04b      	beq.n	800ba54 <_reclaim_reent+0xa4>
 800b9bc:	69c3      	ldr	r3, [r0, #28]
 800b9be:	b1ab      	cbz	r3, 800b9ec <_reclaim_reent+0x3c>
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	b16b      	cbz	r3, 800b9e0 <_reclaim_reent+0x30>
 800b9c4:	2500      	movs	r5, #0
 800b9c6:	69e3      	ldr	r3, [r4, #28]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	5959      	ldr	r1, [r3, r5]
 800b9cc:	2900      	cmp	r1, #0
 800b9ce:	d13b      	bne.n	800ba48 <_reclaim_reent+0x98>
 800b9d0:	3504      	adds	r5, #4
 800b9d2:	2d80      	cmp	r5, #128	@ 0x80
 800b9d4:	d1f7      	bne.n	800b9c6 <_reclaim_reent+0x16>
 800b9d6:	69e3      	ldr	r3, [r4, #28]
 800b9d8:	4620      	mov	r0, r4
 800b9da:	68d9      	ldr	r1, [r3, #12]
 800b9dc:	f000 f872 	bl	800bac4 <_free_r>
 800b9e0:	69e3      	ldr	r3, [r4, #28]
 800b9e2:	6819      	ldr	r1, [r3, #0]
 800b9e4:	b111      	cbz	r1, 800b9ec <_reclaim_reent+0x3c>
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 f86c 	bl	800bac4 <_free_r>
 800b9ec:	6961      	ldr	r1, [r4, #20]
 800b9ee:	b111      	cbz	r1, 800b9f6 <_reclaim_reent+0x46>
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f000 f867 	bl	800bac4 <_free_r>
 800b9f6:	69e1      	ldr	r1, [r4, #28]
 800b9f8:	b111      	cbz	r1, 800ba00 <_reclaim_reent+0x50>
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f000 f862 	bl	800bac4 <_free_r>
 800ba00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ba02:	b111      	cbz	r1, 800ba0a <_reclaim_reent+0x5a>
 800ba04:	4620      	mov	r0, r4
 800ba06:	f000 f85d 	bl	800bac4 <_free_r>
 800ba0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba0c:	b111      	cbz	r1, 800ba14 <_reclaim_reent+0x64>
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f000 f858 	bl	800bac4 <_free_r>
 800ba14:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ba16:	b111      	cbz	r1, 800ba1e <_reclaim_reent+0x6e>
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 f853 	bl	800bac4 <_free_r>
 800ba1e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ba20:	b111      	cbz	r1, 800ba28 <_reclaim_reent+0x78>
 800ba22:	4620      	mov	r0, r4
 800ba24:	f000 f84e 	bl	800bac4 <_free_r>
 800ba28:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ba2a:	b111      	cbz	r1, 800ba32 <_reclaim_reent+0x82>
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 f849 	bl	800bac4 <_free_r>
 800ba32:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ba34:	b111      	cbz	r1, 800ba3c <_reclaim_reent+0x8c>
 800ba36:	4620      	mov	r0, r4
 800ba38:	f000 f844 	bl	800bac4 <_free_r>
 800ba3c:	6a23      	ldr	r3, [r4, #32]
 800ba3e:	b14b      	cbz	r3, 800ba54 <_reclaim_reent+0xa4>
 800ba40:	4620      	mov	r0, r4
 800ba42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba46:	4718      	bx	r3
 800ba48:	680e      	ldr	r6, [r1, #0]
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f000 f83a 	bl	800bac4 <_free_r>
 800ba50:	4631      	mov	r1, r6
 800ba52:	e7bb      	b.n	800b9cc <_reclaim_reent+0x1c>
 800ba54:	bd70      	pop	{r4, r5, r6, pc}
 800ba56:	bf00      	nop
 800ba58:	20000188 	.word	0x20000188

0800ba5c <__libc_init_array>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	4d0d      	ldr	r5, [pc, #52]	@ (800ba94 <__libc_init_array+0x38>)
 800ba60:	4c0d      	ldr	r4, [pc, #52]	@ (800ba98 <__libc_init_array+0x3c>)
 800ba62:	1b64      	subs	r4, r4, r5
 800ba64:	10a4      	asrs	r4, r4, #2
 800ba66:	2600      	movs	r6, #0
 800ba68:	42a6      	cmp	r6, r4
 800ba6a:	d109      	bne.n	800ba80 <__libc_init_array+0x24>
 800ba6c:	4d0b      	ldr	r5, [pc, #44]	@ (800ba9c <__libc_init_array+0x40>)
 800ba6e:	4c0c      	ldr	r4, [pc, #48]	@ (800baa0 <__libc_init_array+0x44>)
 800ba70:	f000 f87e 	bl	800bb70 <_init>
 800ba74:	1b64      	subs	r4, r4, r5
 800ba76:	10a4      	asrs	r4, r4, #2
 800ba78:	2600      	movs	r6, #0
 800ba7a:	42a6      	cmp	r6, r4
 800ba7c:	d105      	bne.n	800ba8a <__libc_init_array+0x2e>
 800ba7e:	bd70      	pop	{r4, r5, r6, pc}
 800ba80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba84:	4798      	blx	r3
 800ba86:	3601      	adds	r6, #1
 800ba88:	e7ee      	b.n	800ba68 <__libc_init_array+0xc>
 800ba8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba8e:	4798      	blx	r3
 800ba90:	3601      	adds	r6, #1
 800ba92:	e7f2      	b.n	800ba7a <__libc_init_array+0x1e>
 800ba94:	0800bc60 	.word	0x0800bc60
 800ba98:	0800bc60 	.word	0x0800bc60
 800ba9c:	0800bc60 	.word	0x0800bc60
 800baa0:	0800bc64 	.word	0x0800bc64

0800baa4 <__retarget_lock_acquire_recursive>:
 800baa4:	4770      	bx	lr

0800baa6 <__retarget_lock_release_recursive>:
 800baa6:	4770      	bx	lr

0800baa8 <memcpy>:
 800baa8:	440a      	add	r2, r1
 800baaa:	4291      	cmp	r1, r2
 800baac:	f100 33ff 	add.w	r3, r0, #4294967295
 800bab0:	d100      	bne.n	800bab4 <memcpy+0xc>
 800bab2:	4770      	bx	lr
 800bab4:	b510      	push	{r4, lr}
 800bab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800babe:	4291      	cmp	r1, r2
 800bac0:	d1f9      	bne.n	800bab6 <memcpy+0xe>
 800bac2:	bd10      	pop	{r4, pc}

0800bac4 <_free_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4605      	mov	r5, r0
 800bac8:	2900      	cmp	r1, #0
 800baca:	d041      	beq.n	800bb50 <_free_r+0x8c>
 800bacc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bad0:	1f0c      	subs	r4, r1, #4
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	bfb8      	it	lt
 800bad6:	18e4      	addlt	r4, r4, r3
 800bad8:	f000 f83e 	bl	800bb58 <__malloc_lock>
 800badc:	4a1d      	ldr	r2, [pc, #116]	@ (800bb54 <_free_r+0x90>)
 800bade:	6813      	ldr	r3, [r2, #0]
 800bae0:	b933      	cbnz	r3, 800baf0 <_free_r+0x2c>
 800bae2:	6063      	str	r3, [r4, #4]
 800bae4:	6014      	str	r4, [r2, #0]
 800bae6:	4628      	mov	r0, r5
 800bae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baec:	f000 b83a 	b.w	800bb64 <__malloc_unlock>
 800baf0:	42a3      	cmp	r3, r4
 800baf2:	d908      	bls.n	800bb06 <_free_r+0x42>
 800baf4:	6820      	ldr	r0, [r4, #0]
 800baf6:	1821      	adds	r1, r4, r0
 800baf8:	428b      	cmp	r3, r1
 800bafa:	bf01      	itttt	eq
 800bafc:	6819      	ldreq	r1, [r3, #0]
 800bafe:	685b      	ldreq	r3, [r3, #4]
 800bb00:	1809      	addeq	r1, r1, r0
 800bb02:	6021      	streq	r1, [r4, #0]
 800bb04:	e7ed      	b.n	800bae2 <_free_r+0x1e>
 800bb06:	461a      	mov	r2, r3
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	b10b      	cbz	r3, 800bb10 <_free_r+0x4c>
 800bb0c:	42a3      	cmp	r3, r4
 800bb0e:	d9fa      	bls.n	800bb06 <_free_r+0x42>
 800bb10:	6811      	ldr	r1, [r2, #0]
 800bb12:	1850      	adds	r0, r2, r1
 800bb14:	42a0      	cmp	r0, r4
 800bb16:	d10b      	bne.n	800bb30 <_free_r+0x6c>
 800bb18:	6820      	ldr	r0, [r4, #0]
 800bb1a:	4401      	add	r1, r0
 800bb1c:	1850      	adds	r0, r2, r1
 800bb1e:	4283      	cmp	r3, r0
 800bb20:	6011      	str	r1, [r2, #0]
 800bb22:	d1e0      	bne.n	800bae6 <_free_r+0x22>
 800bb24:	6818      	ldr	r0, [r3, #0]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	6053      	str	r3, [r2, #4]
 800bb2a:	4408      	add	r0, r1
 800bb2c:	6010      	str	r0, [r2, #0]
 800bb2e:	e7da      	b.n	800bae6 <_free_r+0x22>
 800bb30:	d902      	bls.n	800bb38 <_free_r+0x74>
 800bb32:	230c      	movs	r3, #12
 800bb34:	602b      	str	r3, [r5, #0]
 800bb36:	e7d6      	b.n	800bae6 <_free_r+0x22>
 800bb38:	6820      	ldr	r0, [r4, #0]
 800bb3a:	1821      	adds	r1, r4, r0
 800bb3c:	428b      	cmp	r3, r1
 800bb3e:	bf04      	itt	eq
 800bb40:	6819      	ldreq	r1, [r3, #0]
 800bb42:	685b      	ldreq	r3, [r3, #4]
 800bb44:	6063      	str	r3, [r4, #4]
 800bb46:	bf04      	itt	eq
 800bb48:	1809      	addeq	r1, r1, r0
 800bb4a:	6021      	streq	r1, [r4, #0]
 800bb4c:	6054      	str	r4, [r2, #4]
 800bb4e:	e7ca      	b.n	800bae6 <_free_r+0x22>
 800bb50:	bd38      	pop	{r3, r4, r5, pc}
 800bb52:	bf00      	nop
 800bb54:	2000383c 	.word	0x2000383c

0800bb58 <__malloc_lock>:
 800bb58:	4801      	ldr	r0, [pc, #4]	@ (800bb60 <__malloc_lock+0x8>)
 800bb5a:	f7ff bfa3 	b.w	800baa4 <__retarget_lock_acquire_recursive>
 800bb5e:	bf00      	nop
 800bb60:	20003838 	.word	0x20003838

0800bb64 <__malloc_unlock>:
 800bb64:	4801      	ldr	r0, [pc, #4]	@ (800bb6c <__malloc_unlock+0x8>)
 800bb66:	f7ff bf9e 	b.w	800baa6 <__retarget_lock_release_recursive>
 800bb6a:	bf00      	nop
 800bb6c:	20003838 	.word	0x20003838

0800bb70 <_init>:
 800bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb72:	bf00      	nop
 800bb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb76:	bc08      	pop	{r3}
 800bb78:	469e      	mov	lr, r3
 800bb7a:	4770      	bx	lr

0800bb7c <_fini>:
 800bb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7e:	bf00      	nop
 800bb80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb82:	bc08      	pop	{r3}
 800bb84:	469e      	mov	lr, r3
 800bb86:	4770      	bx	lr
