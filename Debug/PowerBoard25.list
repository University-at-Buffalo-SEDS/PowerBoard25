
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007c88  08007c88  00008c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce0  08007ce0  00009184  2**0
                  CONTENTS
  4 .ARM          00000000  08007ce0  08007ce0  00009184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ce0  08007ce0  00009184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce0  08007ce0  00008ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ce4  08007ce4  00008ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08007ce8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa8  20000184  08007e6c  00009184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c2c  08007e6c  00009c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014999  00000000  00000000  000091b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035de  00000000  00000000  0001db4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00021130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d78  00000000  00000000  00022318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020da2  00000000  00000000  00023090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168e4  00000000  00000000  00043e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3bc6  00000000  00000000  0005a716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e2dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000493c  00000000  00000000  0011e320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00122c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007c70 	.word	0x08007c70

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08007c70 	.word	0x08007c70

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa7d 	bl	800071a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80a 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8d0 	bl	80003c8 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000228:	f000 f848 	bl	80002bc <MX_FDCAN2_Init>
  MX_I2C2_Init();
 800022c:	f000 f88c 	bl	8000348 <MX_I2C2_Init>
  MX_USB_Device_Init();
 8000230:	f007 f80e 	bl	8007250 <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <main+0x1c>

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	@ 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2238      	movs	r2, #56	@ 0x38
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f007 fce6 	bl	8007c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800025e:	f002 fd67 	bl	8002d30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000262:	2322      	movs	r3, #34	@ 0x22
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800026a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026c:	2340      	movs	r3, #64	@ 0x40
 800026e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000274:	2300      	movs	r3, #0
 8000276:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f002 fe0b 	bl	8002e98 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000288:	f000 f8f4 	bl	8000474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000290:	2301      	movs	r3, #1
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f003 f909 	bl	80034bc <HAL_RCC_ClockConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80002b0:	f000 f8e0 	bl	8000474 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3750      	adds	r7, #80	@ 0x50
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80002c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 80002c2:	4a20      	ldr	r2, [pc, #128]	@ (8000344 <MX_FDCAN2_Init+0x88>)
 80002c4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80002d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80002d8:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 80002da:	2200      	movs	r2, #0
 80002dc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80002de:	4b18      	ldr	r3, [pc, #96]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80002e4:	4b16      	ldr	r3, [pc, #88]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80002ea:	4b15      	ldr	r3, [pc, #84]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 80002ec:	2210      	movs	r2, #16
 80002ee:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80002f0:	4b13      	ldr	r3, [pc, #76]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 80002f6:	4b12      	ldr	r3, [pc, #72]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 80002fc:	4b10      	ldr	r3, [pc, #64]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 80002fe:	2201      	movs	r2, #1
 8000300:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000302:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 8000304:	2201      	movs	r2, #1
 8000306:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000308:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 800030a:	2201      	movs	r2, #1
 800030c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800030e:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 8000310:	2201      	movs	r2, #1
 8000312:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000314:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 8000316:	2201      	movs	r2, #1
 8000318:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800031a:	4b09      	ldr	r3, [pc, #36]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 800031c:	2200      	movs	r2, #0
 800031e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000320:	4b07      	ldr	r3, [pc, #28]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 8000322:	2200      	movs	r2, #0
 8000324:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000326:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 8000328:	2200      	movs	r2, #0
 800032a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800032c:	4804      	ldr	r0, [pc, #16]	@ (8000340 <MX_FDCAN2_Init+0x84>)
 800032e:	f000 fb75 	bl	8000a1c <HAL_FDCAN_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000338:	f000 f89c 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	200001a0 	.word	0x200001a0
 8000344:	40006800 	.word	0x40006800

08000348 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800034c:	4b1b      	ldr	r3, [pc, #108]	@ (80003bc <MX_I2C2_Init+0x74>)
 800034e:	4a1c      	ldr	r2, [pc, #112]	@ (80003c0 <MX_I2C2_Init+0x78>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000352:	4b1a      	ldr	r3, [pc, #104]	@ (80003bc <MX_I2C2_Init+0x74>)
 8000354:	4a1b      	ldr	r2, [pc, #108]	@ (80003c4 <MX_I2C2_Init+0x7c>)
 8000356:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000358:	4b18      	ldr	r3, [pc, #96]	@ (80003bc <MX_I2C2_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800035e:	4b17      	ldr	r3, [pc, #92]	@ (80003bc <MX_I2C2_Init+0x74>)
 8000360:	2201      	movs	r2, #1
 8000362:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000364:	4b15      	ldr	r3, [pc, #84]	@ (80003bc <MX_I2C2_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800036a:	4b14      	ldr	r3, [pc, #80]	@ (80003bc <MX_I2C2_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000370:	4b12      	ldr	r3, [pc, #72]	@ (80003bc <MX_I2C2_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000376:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <MX_I2C2_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037c:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <MX_I2C2_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000382:	480e      	ldr	r0, [pc, #56]	@ (80003bc <MX_I2C2_Init+0x74>)
 8000384:	f000 fea0 	bl	80010c8 <HAL_I2C_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800038e:	f000 f871 	bl	8000474 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000392:	2100      	movs	r1, #0
 8000394:	4809      	ldr	r0, [pc, #36]	@ (80003bc <MX_I2C2_Init+0x74>)
 8000396:	f000 ff32 	bl	80011fe <HAL_I2CEx_ConfigAnalogFilter>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003a0:	f000 f868 	bl	8000474 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003a4:	2100      	movs	r1, #0
 80003a6:	4805      	ldr	r0, [pc, #20]	@ (80003bc <MX_I2C2_Init+0x74>)
 80003a8:	f000 ff74 	bl	8001294 <HAL_I2CEx_ConfigDigitalFilter>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003b2:	f000 f85f 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000204 	.word	0x20000204
 80003c0:	40005800 	.word	0x40005800
 80003c4:	00503d58 	.word	0x00503d58

080003c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b08a      	sub	sp, #40	@ 0x28
 80003cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 0314 	add.w	r3, r7, #20
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003de:	4b23      	ldr	r3, [pc, #140]	@ (800046c <MX_GPIO_Init+0xa4>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	4a22      	ldr	r2, [pc, #136]	@ (800046c <MX_GPIO_Init+0xa4>)
 80003e4:	f043 0304 	orr.w	r3, r3, #4
 80003e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ea:	4b20      	ldr	r3, [pc, #128]	@ (800046c <MX_GPIO_Init+0xa4>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ee:	f003 0304 	and.w	r3, r3, #4
 80003f2:	613b      	str	r3, [r7, #16]
 80003f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f6:	4b1d      	ldr	r3, [pc, #116]	@ (800046c <MX_GPIO_Init+0xa4>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fa:	4a1c      	ldr	r2, [pc, #112]	@ (800046c <MX_GPIO_Init+0xa4>)
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000402:	4b1a      	ldr	r3, [pc, #104]	@ (800046c <MX_GPIO_Init+0xa4>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000406:	f003 0320 	and.w	r3, r3, #32
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040e:	4b17      	ldr	r3, [pc, #92]	@ (800046c <MX_GPIO_Init+0xa4>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000412:	4a16      	ldr	r2, [pc, #88]	@ (800046c <MX_GPIO_Init+0xa4>)
 8000414:	f043 0302 	orr.w	r3, r3, #2
 8000418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800041a:	4b14      	ldr	r3, [pc, #80]	@ (800046c <MX_GPIO_Init+0xa4>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	f003 0302 	and.w	r3, r3, #2
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b11      	ldr	r3, [pc, #68]	@ (800046c <MX_GPIO_Init+0xa4>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042a:	4a10      	ldr	r2, [pc, #64]	@ (800046c <MX_GPIO_Init+0xa4>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000432:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <MX_GPIO_Init+0xa4>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2120      	movs	r1, #32
 8000442:	480b      	ldr	r0, [pc, #44]	@ (8000470 <MX_GPIO_Init+0xa8>)
 8000444:	f000 fe28 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000448:	2320      	movs	r3, #32
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4619      	mov	r1, r3
 800045e:	4804      	ldr	r0, [pc, #16]	@ (8000470 <MX_GPIO_Init+0xa8>)
 8000460:	f000 fc98 	bl	8000d94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000464:	bf00      	nop
 8000466:	3728      	adds	r7, #40	@ 0x28
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	48000400 	.word	0x48000400

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
}
 800047a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <Error_Handler+0x8>

08000480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000486:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <HAL_MspInit+0x44>)
 8000488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800048a:	4a0e      	ldr	r2, [pc, #56]	@ (80004c4 <HAL_MspInit+0x44>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6613      	str	r3, [r2, #96]	@ 0x60
 8000492:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <HAL_MspInit+0x44>)
 8000494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <HAL_MspInit+0x44>)
 80004a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004a2:	4a08      	ldr	r2, [pc, #32]	@ (80004c4 <HAL_MspInit+0x44>)
 80004a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80004aa:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <HAL_MspInit+0x44>)
 80004ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004b6:	f002 fcdf 	bl	8002e78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b09e      	sub	sp, #120	@ 0x78
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	2250      	movs	r2, #80	@ 0x50
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f007 fb95 	bl	8007c18 <memset>
  if(hfdcan->Instance==FDCAN2)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a20      	ldr	r2, [pc, #128]	@ (8000574 <HAL_FDCAN_MspInit+0xac>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d138      	bne.n	800056a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80004f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80004fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000502:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	4618      	mov	r0, r3
 800050a:	f003 f9bb 	bl	8003884 <HAL_RCCEx_PeriphCLKConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000514:	f7ff ffae 	bl	8000474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000518:	4b17      	ldr	r3, [pc, #92]	@ (8000578 <HAL_FDCAN_MspInit+0xb0>)
 800051a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800051c:	4a16      	ldr	r2, [pc, #88]	@ (8000578 <HAL_FDCAN_MspInit+0xb0>)
 800051e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000522:	6593      	str	r3, [r2, #88]	@ 0x58
 8000524:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <HAL_FDCAN_MspInit+0xb0>)
 8000526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000530:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <HAL_FDCAN_MspInit+0xb0>)
 8000532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000534:	4a10      	ldr	r2, [pc, #64]	@ (8000578 <HAL_FDCAN_MspInit+0xb0>)
 8000536:	f043 0302 	orr.w	r3, r3, #2
 800053a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800053c:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <HAL_FDCAN_MspInit+0xb0>)
 800053e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000540:	f003 0302 	and.w	r3, r3, #2
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000548:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800054c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054e:	2302      	movs	r3, #2
 8000550:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	2300      	movs	r3, #0
 8000558:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800055a:	2309      	movs	r3, #9
 800055c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000562:	4619      	mov	r1, r3
 8000564:	4805      	ldr	r0, [pc, #20]	@ (800057c <HAL_FDCAN_MspInit+0xb4>)
 8000566:	f000 fc15 	bl	8000d94 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 800056a:	bf00      	nop
 800056c:	3778      	adds	r7, #120	@ 0x78
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40006800 	.word	0x40006800
 8000578:	40021000 	.word	0x40021000
 800057c:	48000400 	.word	0x48000400

08000580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b09e      	sub	sp, #120	@ 0x78
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2250      	movs	r2, #80	@ 0x50
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f007 fb39 	bl	8007c18 <memset>
  if(hi2c->Instance==I2C2)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000628 <HAL_I2C_MspInit+0xa8>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d137      	bne.n	8000620 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80005b0:	2380      	movs	r3, #128	@ 0x80
 80005b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 f961 	bl	8003884 <HAL_RCCEx_PeriphCLKConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80005c8:	f7ff ff54 	bl	8000474 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b17      	ldr	r3, [pc, #92]	@ (800062c <HAL_I2C_MspInit+0xac>)
 80005ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d0:	4a16      	ldr	r2, [pc, #88]	@ (800062c <HAL_I2C_MspInit+0xac>)
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d8:	4b14      	ldr	r3, [pc, #80]	@ (800062c <HAL_I2C_MspInit+0xac>)
 80005da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005e8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ea:	2312      	movs	r3, #18
 80005ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80005f6:	2304      	movs	r3, #4
 80005f8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000604:	f000 fbc6 	bl	8000d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000608:	4b08      	ldr	r3, [pc, #32]	@ (800062c <HAL_I2C_MspInit+0xac>)
 800060a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800060c:	4a07      	ldr	r2, [pc, #28]	@ (800062c <HAL_I2C_MspInit+0xac>)
 800060e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000612:	6593      	str	r3, [r2, #88]	@ 0x58
 8000614:	4b05      	ldr	r3, [pc, #20]	@ (800062c <HAL_I2C_MspInit+0xac>)
 8000616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000620:	bf00      	nop
 8000622:	3778      	adds	r7, #120	@ 0x78
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40005800 	.word	0x40005800
 800062c:	40021000 	.word	0x40021000

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <NMI_Handler+0x4>

08000638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <HardFault_Handler+0x4>

08000640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <MemManage_Handler+0x4>

08000648 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <UsageFault_Handler+0x4>

08000658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000686:	f000 f89b 	bl	80007c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000694:	4802      	ldr	r0, [pc, #8]	@ (80006a0 <USB_LP_IRQHandler+0x10>)
 8000696:	f000 ff39 	bl	800150c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20001730 	.word	0x20001730

080006a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <SystemInit+0x20>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ae:	4a05      	ldr	r2, [pc, #20]	@ (80006c4 <SystemInit+0x20>)
 80006b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006cc:	f7ff ffea 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	@ (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	@ (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	@ (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006f6:	f007 fa97 	bl	8007c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006fa:	f7ff fd8d 	bl	8000218 <main>

080006fe <LoopForever>:

LoopForever:
    b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   r0, =_estack
 8000700:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800070c:	08007ce8 	.word	0x08007ce8
  ldr r2, =_sbss
 8000710:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000714:	20001c2c 	.word	0x20001c2c

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>

0800071a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000720:	2300      	movs	r3, #0
 8000722:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f939 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800072a:	200f      	movs	r0, #15
 800072c:	f000 f80e 	bl	800074c <HAL_InitTick>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d002      	beq.n	800073c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	71fb      	strb	r3, [r7, #7]
 800073a:	e001      	b.n	8000740 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800073c:	f7ff fea0 	bl	8000480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000740:	79fb      	ldrb	r3, [r7, #7]

}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000758:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <HAL_InitTick+0x68>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d022      	beq.n	80007a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <HAL_InitTick+0x6c>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <HAL_InitTick+0x68>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800076c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000770:	fbb2 f3f3 	udiv	r3, r2, r3
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f944 	bl	8000a02 <HAL_SYSTICK_Config>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10f      	bne.n	80007a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d809      	bhi.n	800079a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000786:	2200      	movs	r2, #0
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	f04f 30ff 	mov.w	r0, #4294967295
 800078e:	f000 f910 	bl	80009b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000792:	4a0a      	ldr	r2, [pc, #40]	@ (80007bc <HAL_InitTick+0x70>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	e007      	b.n	80007aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	73fb      	strb	r3, [r7, #15]
 800079e:	e004      	b.n	80007aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007a0:	2301      	movs	r3, #1
 80007a2:	73fb      	strb	r3, [r7, #15]
 80007a4:	e001      	b.n	80007aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000004 	.word	0x20000004

080007c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c4:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <HAL_IncTick+0x1c>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_IncTick+0x20>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a03      	ldr	r2, [pc, #12]	@ (80007dc <HAL_IncTick+0x1c>)
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	20000258 	.word	0x20000258
 80007e0:	20000008 	.word	0x20000008

080007e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <HAL_GetTick+0x14>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000258 	.word	0x20000258

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	@ (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4907      	ldr	r1, [pc, #28]	@ (8000898 <__NVIC_EnableIRQ+0x38>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	@ (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	@ (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	@ 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f1c3 0307 	rsb	r3, r3, #7
 800090a:	2b04      	cmp	r3, #4
 800090c:	bf28      	it	cs
 800090e:	2304      	movcs	r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3304      	adds	r3, #4
 8000916:	2b06      	cmp	r3, #6
 8000918:	d902      	bls.n	8000920 <NVIC_EncodePriority+0x30>
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b03      	subs	r3, #3
 800091e:	e000      	b.n	8000922 <NVIC_EncodePriority+0x32>
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000938:	f04f 31ff 	mov.w	r1, #4294967295
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43d9      	mvns	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	@ 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000968:	d301      	bcc.n	800096e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096a:	2301      	movs	r3, #1
 800096c:	e00f      	b.n	800098e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <SysTick_Config+0x40>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000976:	210f      	movs	r1, #15
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f7ff ff8e 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <SysTick_Config+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <SysTick_Config+0x40>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff29 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009c0:	f7ff ff40 	bl	8000844 <__NVIC_GetPriorityGrouping>
 80009c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f7ff ff90 	bl	80008f0 <NVIC_EncodePriority>
 80009d0:	4602      	mov	r2, r0
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff5f 	bl	800089c <__NVIC_SetPriority>
}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff33 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffa4 	bl	8000958 <SysTick_Config>
 8000a10:	4603      	mov	r3, r0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d101      	bne.n	8000a2e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e147      	b.n	8000cbe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d106      	bne.n	8000a48 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fd40 	bl	80004c8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	699a      	ldr	r2, [r3, #24]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f022 0210 	bic.w	r2, r2, #16
 8000a56:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a58:	f7ff fec4 	bl	80007e4 <HAL_GetTick>
 8000a5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000a5e:	e012      	b.n	8000a86 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000a60:	f7ff fec0 	bl	80007e4 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	2b0a      	cmp	r3, #10
 8000a6c:	d90b      	bls.n	8000a86 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a72:	f043 0201 	orr.w	r2, r3, #1
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e11b      	b.n	8000cbe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	2b08      	cmp	r3, #8
 8000a92:	d0e5      	beq.n	8000a60 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	699a      	ldr	r2, [r3, #24]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f042 0201 	orr.w	r2, r2, #1
 8000aa2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aa4:	f7ff fe9e 	bl	80007e4 <HAL_GetTick>
 8000aa8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000aaa:	e012      	b.n	8000ad2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000aac:	f7ff fe9a 	bl	80007e4 <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	2b0a      	cmp	r3, #10
 8000ab8:	d90b      	bls.n	8000ad2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000abe:	f043 0201 	orr.w	r2, r3, #1
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2203      	movs	r2, #3
 8000aca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e0f5      	b.n	8000cbe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0e5      	beq.n	8000aac <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	699a      	ldr	r2, [r3, #24]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f042 0202 	orr.w	r2, r2, #2
 8000aee:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a74      	ldr	r2, [pc, #464]	@ (8000cc8 <HAL_FDCAN_Init+0x2ac>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d103      	bne.n	8000b02 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000afa:	4a74      	ldr	r2, [pc, #464]	@ (8000ccc <HAL_FDCAN_Init+0x2b0>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7c1b      	ldrb	r3, [r3, #16]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d108      	bne.n	8000b1c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	699a      	ldr	r2, [r3, #24]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b18:	619a      	str	r2, [r3, #24]
 8000b1a:	e007      	b.n	8000b2c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	699a      	ldr	r2, [r3, #24]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b2a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7c5b      	ldrb	r3, [r3, #17]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d108      	bne.n	8000b46 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	699a      	ldr	r2, [r3, #24]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000b42:	619a      	str	r2, [r3, #24]
 8000b44:	e007      	b.n	8000b56 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	699a      	ldr	r2, [r3, #24]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000b54:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7c9b      	ldrb	r3, [r3, #18]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d108      	bne.n	8000b70 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	699a      	ldr	r2, [r3, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000b6c:	619a      	str	r2, [r3, #24]
 8000b6e:	e007      	b.n	8000b80 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	699a      	ldr	r2, [r3, #24]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000b7e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	699a      	ldr	r2, [r3, #24]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000ba4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 0210 	bic.w	r2, r2, #16
 8000bb4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d108      	bne.n	8000bd0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	699a      	ldr	r2, [r3, #24]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f042 0204 	orr.w	r2, r2, #4
 8000bcc:	619a      	str	r2, [r3, #24]
 8000bce:	e02c      	b.n	8000c2a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d028      	beq.n	8000c2a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d01c      	beq.n	8000c1a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	699a      	ldr	r2, [r3, #24]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000bee:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	691a      	ldr	r2, [r3, #16]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f042 0210 	orr.w	r2, r2, #16
 8000bfe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d110      	bne.n	8000c2a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	699a      	ldr	r2, [r3, #24]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f042 0220 	orr.w	r2, r2, #32
 8000c16:	619a      	str	r2, [r3, #24]
 8000c18:	e007      	b.n	8000c2a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	699a      	ldr	r2, [r3, #24]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f042 0220 	orr.w	r2, r2, #32
 8000c28:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c3a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000c42:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000c52:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000c54:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000c5e:	d115      	bne.n	8000c8c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c64:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c6e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c74:	3b01      	subs	r3, #1
 8000c76:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000c78:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c80:	3b01      	subs	r3, #1
 8000c82:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000c88:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000c8a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 f814 	bl	8000cd0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40006400 	.word	0x40006400
 8000ccc:	40006500 	.word	0x40006500

08000cd0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8000cda:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8000d90 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d103      	bne.n	8000cee <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8000cec:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cfc:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d04:	041a      	lsls	r2, r3, #16
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d22:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d2a:	061a      	lsls	r2, r3, #24
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	430a      	orrs	r2, r1
 8000d32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	e005      	b.n	8000d70 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d3f3      	bcc.n	8000d64 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	4000a400 	.word	0x4000a400
 8000d90:	40006800 	.word	0x40006800

08000d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b087      	sub	sp, #28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000da2:	e15a      	b.n	800105a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	2101      	movs	r1, #1
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 814c 	beq.w	8001054 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d005      	beq.n	8000dd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d130      	bne.n	8000e36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	f003 0201 	and.w	r2, r3, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d017      	beq.n	8000e72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d123      	bne.n	8000ec6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	220f      	movs	r2, #15
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	6939      	ldr	r1, [r7, #16]
 8000ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0203 	and.w	r2, r3, #3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 80a6 	beq.w	8001054 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f08:	4b5b      	ldr	r3, [pc, #364]	@ (8001078 <HAL_GPIO_Init+0x2e4>)
 8000f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0c:	4a5a      	ldr	r2, [pc, #360]	@ (8001078 <HAL_GPIO_Init+0x2e4>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f14:	4b58      	ldr	r3, [pc, #352]	@ (8001078 <HAL_GPIO_Init+0x2e4>)
 8000f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f20:	4a56      	ldr	r2, [pc, #344]	@ (800107c <HAL_GPIO_Init+0x2e8>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f4a:	d01f      	beq.n	8000f8c <HAL_GPIO_Init+0x1f8>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8001080 <HAL_GPIO_Init+0x2ec>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d019      	beq.n	8000f88 <HAL_GPIO_Init+0x1f4>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a4b      	ldr	r2, [pc, #300]	@ (8001084 <HAL_GPIO_Init+0x2f0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d013      	beq.n	8000f84 <HAL_GPIO_Init+0x1f0>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a4a      	ldr	r2, [pc, #296]	@ (8001088 <HAL_GPIO_Init+0x2f4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d00d      	beq.n	8000f80 <HAL_GPIO_Init+0x1ec>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a49      	ldr	r2, [pc, #292]	@ (800108c <HAL_GPIO_Init+0x2f8>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d007      	beq.n	8000f7c <HAL_GPIO_Init+0x1e8>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a48      	ldr	r2, [pc, #288]	@ (8001090 <HAL_GPIO_Init+0x2fc>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d101      	bne.n	8000f78 <HAL_GPIO_Init+0x1e4>
 8000f74:	2305      	movs	r3, #5
 8000f76:	e00a      	b.n	8000f8e <HAL_GPIO_Init+0x1fa>
 8000f78:	2306      	movs	r3, #6
 8000f7a:	e008      	b.n	8000f8e <HAL_GPIO_Init+0x1fa>
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	e006      	b.n	8000f8e <HAL_GPIO_Init+0x1fa>
 8000f80:	2303      	movs	r3, #3
 8000f82:	e004      	b.n	8000f8e <HAL_GPIO_Init+0x1fa>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e002      	b.n	8000f8e <HAL_GPIO_Init+0x1fa>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <HAL_GPIO_Init+0x1fa>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	f002 0203 	and.w	r2, r2, #3
 8000f94:	0092      	lsls	r2, r2, #2
 8000f96:	4093      	lsls	r3, r2
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f9e:	4937      	ldr	r1, [pc, #220]	@ (800107c <HAL_GPIO_Init+0x2e8>)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fac:	4b39      	ldr	r3, [pc, #228]	@ (8001094 <HAL_GPIO_Init+0x300>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd0:	4a30      	ldr	r2, [pc, #192]	@ (8001094 <HAL_GPIO_Init+0x300>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001094 <HAL_GPIO_Init+0x300>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ffa:	4a26      	ldr	r2, [pc, #152]	@ (8001094 <HAL_GPIO_Init+0x300>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001000:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <HAL_GPIO_Init+0x300>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001024:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <HAL_GPIO_Init+0x300>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <HAL_GPIO_Init+0x300>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800104e:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <HAL_GPIO_Init+0x300>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	f47f ae9d 	bne.w	8000da4 <HAL_GPIO_Init+0x10>
  }
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000
 8001080:	48000400 	.word	0x48000400
 8001084:	48000800 	.word	0x48000800
 8001088:	48000c00 	.word	0x48000c00
 800108c:	48001000 	.word	0x48001000
 8001090:	48001400 	.word	0x48001400
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e08d      	b.n	80011f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fa46 	bl	8000580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2224      	movs	r2, #36	@ 0x24
 80010f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0201 	bic.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001118:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001128:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d107      	bne.n	8001142 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	e006      	b.n	8001150 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800114e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d108      	bne.n	800116a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	e007      	b.n	800117a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001178:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001188:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800118c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800119c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69d9      	ldr	r1, [r3, #28]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1a      	ldr	r2, [r3, #32]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2220      	movs	r2, #32
 80011e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b20      	cmp	r3, #32
 8001212:	d138      	bne.n	8001286 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800121e:	2302      	movs	r3, #2
 8001220:	e032      	b.n	8001288 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2224      	movs	r2, #36	@ 0x24
 800122e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0201 	bic.w	r2, r2, #1
 8001240:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001250:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0201 	orr.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2220      	movs	r2, #32
 8001276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001286:	2302      	movs	r3, #2
  }
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b20      	cmp	r3, #32
 80012a8:	d139      	bne.n	800131e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e033      	b.n	8001320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2224      	movs	r2, #36	@ 0x24
 80012c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0201 	orr.w	r2, r2, #1
 8001308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2220      	movs	r2, #32
 800130e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800131e:	2302      	movs	r3, #2
  }
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0c0      	b.n	80014c0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f006 f95c 	bl	8007610 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fce0 	bl	8003d2a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	e03e      	b.n	80013ee <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	3311      	adds	r3, #17
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	3310      	adds	r3, #16
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	3313      	adds	r3, #19
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	440b      	add	r3, r1
 80013ba:	3320      	adds	r3, #32
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	3324      	adds	r3, #36	@ 0x24
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	440b      	add	r3, r1
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	3301      	adds	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	791b      	ldrb	r3, [r3, #4]
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3bb      	bcc.n	8001370 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e044      	b.n	8001488 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	3301      	adds	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	791b      	ldrb	r3, [r3, #4]
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	429a      	cmp	r2, r3
 8001490:	d3b5      	bcc.n	80013fe <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3304      	adds	r3, #4
 800149a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800149e:	f002 fc5f 	bl	8003d60 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7a9b      	ldrb	r3, [r3, #10]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d102      	bne.n	80014be <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f001 fc0e 	bl	8002cda <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_PCD_Start+0x16>
 80014da:	2302      	movs	r3, #2
 80014dc:	e012      	b.n	8001504 <HAL_PCD_Start+0x3c>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fc06 	bl	8003cfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f004 f9e3 	bl	80058c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f004 f9e8 	bl	80058ee <USB_ReadInterrupts>
 800151e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fb06 	bl	8001b3c <PCD_EP_ISR_Handler>

    return;
 8001530:	e110      	b.n	8001754 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001544:	b29a      	uxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800154e:	b292      	uxth	r2, r2
 8001550:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f006 f8ec 	bl	8007732 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800155a:	2100      	movs	r1, #0
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f8fc 	bl	800175a <HAL_PCD_SetAddress>

    return;
 8001562:	e0f7      	b.n	8001754 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00c      	beq.n	8001588 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001576:	b29a      	uxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001580:	b292      	uxth	r2, r2
 8001582:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001586:	e0e5      	b.n	8001754 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00c      	beq.n	80015ac <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015a4:	b292      	uxth	r2, r2
 80015a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015aa:	e0d3      	b.n	8001754 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d034      	beq.n	8001620 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015be:	b29a      	uxth	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0204 	bic.w	r2, r2, #4
 80015c8:	b292      	uxth	r2, r2
 80015ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0208 	bic.w	r2, r2, #8
 80015e0:	b292      	uxth	r2, r2
 80015e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d107      	bne.n	8001600 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015f8:	2100      	movs	r1, #0
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f006 fa8c 	bl	8007b18 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f006 f8cf 	bl	80077a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001618:	b292      	uxth	r2, r2
 800161a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800161e:	e099      	b.n	8001754 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001626:	2b00      	cmp	r3, #0
 8001628:	d027      	beq.n	800167a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001632:	b29a      	uxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0208 	orr.w	r2, r2, #8
 800163c:	b292      	uxth	r2, r2
 800163e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800164a:	b29a      	uxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001654:	b292      	uxth	r2, r2
 8001656:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001662:	b29a      	uxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0204 	orr.w	r2, r2, #4
 800166c:	b292      	uxth	r2, r2
 800166e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f006 f87c 	bl	8007770 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001678:	e06c      	b.n	8001754 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001680:	2b00      	cmp	r3, #0
 8001682:	d040      	beq.n	8001706 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800168c:	b29a      	uxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001696:	b292      	uxth	r2, r2
 8001698:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d12b      	bne.n	80016fe <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0204 	orr.w	r2, r2, #4
 80016b8:	b292      	uxth	r2, r2
 80016ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0208 	orr.w	r2, r2, #8
 80016d0:	b292      	uxth	r2, r2
 80016d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80016f4:	2101      	movs	r1, #1
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f006 fa0e 	bl	8007b18 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80016fc:	e02a      	b.n	8001754 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f006 f836 	bl	8007770 <HAL_PCD_SuspendCallback>
    return;
 8001704:	e026      	b.n	8001754 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00f      	beq.n	8001730 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001718:	b29a      	uxth	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001722:	b292      	uxth	r2, r2
 8001724:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f005 fff4 	bl	8007716 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800172e:	e011      	b.n	8001754 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00c      	beq.n	8001754 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001742:	b29a      	uxth	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800174c:	b292      	uxth	r2, r2
 800174e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001752:	bf00      	nop
  }
}
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_PCD_SetAddress+0x1a>
 8001770:	2302      	movs	r3, #2
 8001772:	e012      	b.n	800179a <HAL_PCD_SetAddress+0x40>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f004 f884 	bl	8005898 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	4608      	mov	r0, r1
 80017ac:	4611      	mov	r1, r2
 80017ae:	461a      	mov	r2, r3
 80017b0:	4603      	mov	r3, r0
 80017b2:	70fb      	strb	r3, [r7, #3]
 80017b4:	460b      	mov	r3, r1
 80017b6:	803b      	strh	r3, [r7, #0]
 80017b8:	4613      	mov	r3, r2
 80017ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	da0e      	bge.n	80017e6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f003 0207 	and.w	r2, r3, #7
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	3310      	adds	r3, #16
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2201      	movs	r2, #1
 80017e2:	705a      	strb	r2, [r3, #1]
 80017e4:	e00e      	b.n	8001804 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	f003 0207 	and.w	r2, r3, #7
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	b2da      	uxtb	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001810:	883b      	ldrh	r3, [r7, #0]
 8001812:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	78ba      	ldrb	r2, [r7, #2]
 800181e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001820:	78bb      	ldrb	r3, [r7, #2]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d102      	bne.n	800182c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_PCD_EP_Open+0x98>
 8001836:	2302      	movs	r3, #2
 8001838:	e00e      	b.n	8001858 <HAL_PCD_EP_Open+0xb6>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68f9      	ldr	r1, [r7, #12]
 8001848:	4618      	mov	r0, r3
 800184a:	f002 faa7 	bl	8003d9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001856:	7afb      	ldrb	r3, [r7, #11]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800186c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001870:	2b00      	cmp	r3, #0
 8001872:	da0e      	bge.n	8001892 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	f003 0207 	and.w	r2, r3, #7
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	3310      	adds	r3, #16
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	705a      	strb	r2, [r3, #1]
 8001890:	e00e      	b.n	80018b0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	f003 0207 	and.w	r2, r3, #7
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_PCD_EP_Close+0x6a>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e00e      	b.n	80018e8 <HAL_PCD_EP_Close+0x88>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68f9      	ldr	r1, [r7, #12]
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 ff47 	bl	800476c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	460b      	mov	r3, r1
 80018fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	f003 0207 	and.w	r2, r3, #7
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4413      	add	r3, r2
 8001916:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2200      	movs	r2, #0
 800192e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001930:	7afb      	ldrb	r3, [r7, #11]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	b2da      	uxtb	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6979      	ldr	r1, [r7, #20]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 f8ff 	bl	8004b46 <USB_EPStartXfer>

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	f003 0207 	and.w	r2, r3, #7
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001974:	681b      	ldr	r3, [r3, #0]
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	460b      	mov	r3, r1
 8001990:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001992:	7afb      	ldrb	r3, [r7, #11]
 8001994:	f003 0207 	and.w	r2, r3, #7
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	3310      	adds	r3, #16
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2200      	movs	r2, #0
 80019c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2201      	movs	r2, #1
 80019cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ce:	7afb      	ldrb	r3, [r7, #11]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6979      	ldr	r1, [r7, #20]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 f8b0 	bl	8004b46 <USB_EPStartXfer>

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	7912      	ldrb	r2, [r2, #4]
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e03e      	b.n	8001a8c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da0e      	bge.n	8001a34 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	f003 0207 	and.w	r2, r3, #7
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	3310      	adds	r3, #16
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	705a      	strb	r2, [r3, #1]
 8001a32:	e00c      	b.n	8001a4e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_PCD_EP_SetStall+0x7e>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e00e      	b.n	8001a8c <HAL_PCD_EP_SetStall+0x9c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68f9      	ldr	r1, [r7, #12]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 fe11 	bl	80056a4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	7912      	ldrb	r2, [r2, #4]
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e040      	b.n	8001b34 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da0e      	bge.n	8001ad8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 0207 	and.w	r2, r3, #7
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	3310      	adds	r3, #16
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	705a      	strb	r2, [r3, #1]
 8001ad6:	e00e      	b.n	8001af6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	f003 0207 	and.w	r2, r3, #7
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_PCD_EP_ClrStall+0x82>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e00e      	b.n	8001b34 <HAL_PCD_EP_ClrStall+0xa0>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68f9      	ldr	r1, [r7, #12]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fe0e 	bl	8005746 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b092      	sub	sp, #72	@ 0x48
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b44:	e333      	b.n	80021ae <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b4e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b50:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001b5c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f040 8108 	bne.w	8001d76 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d14c      	bne.n	8001c0a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b80:	813b      	strh	r3, [r7, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	893b      	ldrh	r3, [r7, #8]
 8001b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3310      	adds	r3, #16
 8001b98:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4413      	add	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	441a      	add	r2, r3
 8001bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f005 fd85 	bl	80076e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7b1b      	ldrb	r3, [r3, #12]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 82e5 	beq.w	80021ae <PCD_EP_ISR_Handler+0x672>
 8001be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f040 82e0 	bne.w	80021ae <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7b1b      	ldrb	r3, [r3, #12]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	731a      	strb	r2, [r3, #12]
 8001c08:	e2d1      	b.n	80021ae <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c10:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d032      	beq.n	8001c8a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c4a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c58:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c5c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	f003 fe97 	bl	8005992 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c70:	4013      	ands	r3, r2
 8001c72:	817b      	strh	r3, [r7, #10]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	897a      	ldrh	r2, [r7, #10]
 8001c7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f005 fd00 	bl	8007688 <HAL_PCD_SetupStageCallback>
 8001c88:	e291      	b.n	80021ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c8a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f280 828d 	bge.w	80021ae <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	81fb      	strh	r3, [r7, #14]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	89fa      	ldrh	r2, [r7, #14]
 8001caa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001cae:	b292      	uxth	r2, r2
 8001cb0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d019      	beq.n	8001d16 <PCD_EP_ISR_Handler+0x1da>
 8001ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d015      	beq.n	8001d16 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf0:	6959      	ldr	r1, [r3, #20]
 8001cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f003 fe49 	bl	8005992 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	441a      	add	r2, r3
 8001d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d0c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f005 fccb 	bl	80076ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001d1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001d20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f040 8242 	bne.w	80021ae <PCD_EP_ISR_Handler+0x672>
 8001d2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001d2c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001d30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001d34:	f000 823b 	beq.w	80021ae <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d48:	81bb      	strh	r3, [r7, #12]
 8001d4a:	89bb      	ldrh	r3, [r7, #12]
 8001d4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001d50:	81bb      	strh	r3, [r7, #12]
 8001d52:	89bb      	ldrh	r3, [r7, #12]
 8001d54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001d58:	81bb      	strh	r3, [r7, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	89bb      	ldrh	r3, [r7, #12]
 8001d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	8013      	strh	r3, [r2, #0]
 8001d74:	e21b      	b.n	80021ae <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d88:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f280 80f1 	bge.w	8001f74 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001da8:	4013      	ands	r3, r2
 8001daa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001dbc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dc0:	b292      	uxth	r2, r2
 8001dc2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001dc4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ddc:	7b1b      	ldrb	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d123      	bne.n	8001e2a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8001e0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 808b 	beq.w	8001f2a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e1a:	6959      	ldr	r1, [r3, #20]
 8001e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e1e:	88da      	ldrh	r2, [r3, #6]
 8001e20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001e24:	f003 fdb5 	bl	8005992 <USB_ReadPMA>
 8001e28:	e07f      	b.n	8001f2a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e2c:	78db      	ldrb	r3, [r3, #3]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d109      	bne.n	8001e46 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001e34:	461a      	mov	r2, r3
 8001e36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f9c6 	bl	80021ca <HAL_PCD_EP_DB_Receive>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001e44:	e071      	b.n	8001f2a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e60:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	441a      	add	r2, r3
 8001e70:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001e72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d022      	beq.n	8001ee6 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001ec8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d02c      	beq.n	8001f2a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ed6:	6959      	ldr	r1, [r3, #20]
 8001ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eda:	891a      	ldrh	r2, [r3, #8]
 8001edc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001ee0:	f003 fd57 	bl	8005992 <USB_ReadPMA>
 8001ee4:	e021      	b.n	8001f2a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001f0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f1c:	6959      	ldr	r1, [r3, #20]
 8001f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f20:	895a      	ldrh	r2, [r3, #10]
 8001f22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f26:	f003 fd34 	bl	8005992 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f32:	441a      	add	r2, r3
 8001f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f40:	441a      	add	r2, r3
 8001f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f44:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <PCD_EP_ISR_Handler+0x41e>
 8001f4e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d206      	bcs.n	8001f68 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f005 fba3 	bl	80076ac <HAL_PCD_DataOutStageCallback>
 8001f66:	e005      	b.n	8001f74 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fde9 	bl	8004b46 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8117 	beq.w	80021ae <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f80:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	3310      	adds	r3, #16
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	441a      	add	r2, r3
 8001fbe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fce:	78db      	ldrb	r3, [r3, #3]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	f040 80a1 	bne.w	8002118 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8001fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fde:	7b1b      	ldrb	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8092 	beq.w	800210a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fe6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d046      	beq.n	800207e <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d126      	bne.n	8002046 <PCD_EP_ISR_Handler+0x50a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	4413      	add	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	00da      	lsls	r2, r3, #3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	4413      	add	r3, r2
 800201a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800202a:	b29a      	uxth	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800203a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203e:	b29a      	uxth	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	801a      	strh	r2, [r3, #0]
 8002044:	e061      	b.n	800210a <PCD_EP_ISR_Handler+0x5ce>
 8002046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002048:	785b      	ldrb	r3, [r3, #1]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d15d      	bne.n	800210a <PCD_EP_ISR_Handler+0x5ce>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800205c:	b29b      	uxth	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4413      	add	r3, r2
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	00da      	lsls	r2, r3, #3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	4413      	add	r3, r2
 8002070:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2200      	movs	r2, #0
 800207a:	801a      	strh	r2, [r3, #0]
 800207c:	e045      	b.n	800210a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002086:	785b      	ldrb	r3, [r3, #1]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d126      	bne.n	80020da <PCD_EP_ISR_Handler+0x59e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800209a:	b29b      	uxth	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	4413      	add	r3, r2
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	00da      	lsls	r2, r3, #3
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	4413      	add	r3, r2
 80020ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020be:	b29a      	uxth	r2, r3
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	801a      	strh	r2, [r3, #0]
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	801a      	strh	r2, [r3, #0]
 80020d8:	e017      	b.n	800210a <PCD_EP_ISR_Handler+0x5ce>
 80020da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020dc:	785b      	ldrb	r3, [r3, #1]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d113      	bne.n	800210a <PCD_EP_ISR_Handler+0x5ce>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f0:	4413      	add	r3, r2
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	00da      	lsls	r2, r3, #3
 80020fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020fc:	4413      	add	r3, r2
 80020fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002106:	2200      	movs	r2, #0
 8002108:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800210a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f005 fae6 	bl	80076e2 <HAL_PCD_DataInStageCallback>
 8002116:	e04a      	b.n	80021ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002118:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800211a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d13f      	bne.n	80021a2 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800212a:	b29b      	uxth	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	4413      	add	r3, r2
 800213c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002146:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8002148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800214e:	429a      	cmp	r2, r3
 8002150:	d906      	bls.n	8002160 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8002152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002158:	1ad2      	subs	r2, r2, r3
 800215a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800215c:	619a      	str	r2, [r3, #24]
 800215e:	e002      	b.n	8002166 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800216e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f005 fab4 	bl	80076e2 <HAL_PCD_DataInStageCallback>
 800217a:	e018      	b.n	80021ae <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800217c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002182:	441a      	add	r2, r3
 8002184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002186:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800218a:	69da      	ldr	r2, [r3, #28]
 800218c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800218e:	441a      	add	r2, r3
 8002190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002192:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800219a:	4618      	mov	r0, r3
 800219c:	f002 fcd3 	bl	8004b46 <USB_EPStartXfer>
 80021a0:	e005      	b.n	80021ae <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80021a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80021a4:	461a      	mov	r2, r3
 80021a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f917 	bl	80023dc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f6ff acc3 	blt.w	8001b46 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3748      	adds	r7, #72	@ 0x48
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b088      	sub	sp, #32
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	4613      	mov	r3, r2
 80021d6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d07c      	beq.n	80022dc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002206:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	8b7b      	ldrh	r3, [r7, #26]
 800220e:	429a      	cmp	r2, r3
 8002210:	d306      	bcc.n	8002220 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	8b7b      	ldrh	r3, [r7, #26]
 8002218:	1ad2      	subs	r2, r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	619a      	str	r2, [r3, #24]
 800221e:	e002      	b.n	8002226 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d123      	bne.n	8002276 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002248:	833b      	strh	r3, [r7, #24]
 800224a:	8b3b      	ldrh	r3, [r7, #24]
 800224c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002250:	833b      	strh	r3, [r7, #24]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	441a      	add	r2, r3
 8002260:	8b3b      	ldrh	r3, [r7, #24]
 8002262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800226a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800226e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002272:	b29b      	uxth	r3, r3
 8002274:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01f      	beq.n	80022c0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800229a:	82fb      	strh	r3, [r7, #22]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	8afb      	ldrh	r3, [r7, #22]
 80022ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022bc:	b29b      	uxth	r3, r3
 80022be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022c0:	8b7b      	ldrh	r3, [r7, #26]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8085 	beq.w	80023d2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	6959      	ldr	r1, [r3, #20]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	891a      	ldrh	r2, [r3, #8]
 80022d4:	8b7b      	ldrh	r3, [r7, #26]
 80022d6:	f003 fb5c 	bl	8005992 <USB_ReadPMA>
 80022da:	e07a      	b.n	80023d2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002300:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	8b7b      	ldrh	r3, [r7, #26]
 8002308:	429a      	cmp	r2, r3
 800230a:	d306      	bcc.n	800231a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	8b7b      	ldrh	r3, [r7, #26]
 8002312:	1ad2      	subs	r2, r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	619a      	str	r2, [r3, #24]
 8002318:	e002      	b.n	8002320 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d123      	bne.n	8002370 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800233e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002342:	83fb      	strh	r3, [r7, #30]
 8002344:	8bfb      	ldrh	r3, [r7, #30]
 8002346:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800234a:	83fb      	strh	r3, [r7, #30]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	441a      	add	r2, r3
 800235a:	8bfb      	ldrh	r3, [r7, #30]
 800235c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800236c:	b29b      	uxth	r3, r3
 800236e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d11f      	bne.n	80023ba <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002394:	83bb      	strh	r3, [r7, #28]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	441a      	add	r2, r3
 80023a4:	8bbb      	ldrh	r3, [r7, #28]
 80023a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023ba:	8b7b      	ldrh	r3, [r7, #26]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	6959      	ldr	r1, [r3, #20]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	895a      	ldrh	r2, [r3, #10]
 80023cc:	8b7b      	ldrh	r3, [r7, #26]
 80023ce:	f003 fae0 	bl	8005992 <USB_ReadPMA>
    }
  }

  return count;
 80023d2:	8b7b      	ldrh	r3, [r7, #26]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b0a6      	sub	sp, #152	@ 0x98
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	4613      	mov	r3, r2
 80023e8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 81f7 	beq.w	80027e4 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023fe:	b29b      	uxth	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	4413      	add	r3, r2
 8002410:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002426:	429a      	cmp	r2, r3
 8002428:	d907      	bls.n	800243a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002432:	1ad2      	subs	r2, r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	619a      	str	r2, [r3, #24]
 8002438:	e002      	b.n	8002440 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 80e1 	bne.w	800260c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	785b      	ldrb	r3, [r3, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d126      	bne.n	80024a0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	633b      	str	r3, [r7, #48]	@ 0x30
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002460:	b29b      	uxth	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	4413      	add	r3, r2
 8002468:	633b      	str	r3, [r7, #48]	@ 0x30
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	00da      	lsls	r2, r3, #3
 8002470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002472:	4413      	add	r3, r2
 8002474:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800247a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002484:	b29a      	uxth	r2, r3
 8002486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002498:	b29a      	uxth	r2, r3
 800249a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	e01a      	b.n	80024d6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	785b      	ldrb	r3, [r3, #1]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d116      	bne.n	80024d6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024bc:	4413      	add	r3, r2
 80024be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	00da      	lsls	r2, r3, #3
 80024c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c8:	4413      	add	r3, r2
 80024ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80024d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d2:	2200      	movs	r2, #0
 80024d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	785b      	ldrb	r3, [r3, #1]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d126      	bne.n	8002532 <HAL_PCD_EP_DB_Transmit+0x156>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	623b      	str	r3, [r7, #32]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	4413      	add	r3, r2
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	00da      	lsls	r2, r3, #3
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	4413      	add	r3, r2
 8002506:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002516:	b29a      	uxth	r2, r3
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	801a      	strh	r2, [r3, #0]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800252a:	b29a      	uxth	r2, r3
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	801a      	strh	r2, [r3, #0]
 8002530:	e017      	b.n	8002562 <HAL_PCD_EP_DB_Transmit+0x186>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d113      	bne.n	8002562 <HAL_PCD_EP_DB_Transmit+0x186>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002548:	4413      	add	r3, r2
 800254a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	00da      	lsls	r2, r3, #3
 8002552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002554:	4413      	add	r3, r2
 8002556:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	2200      	movs	r2, #0
 8002560:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	78db      	ldrb	r3, [r3, #3]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d123      	bne.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002584:	837b      	strh	r3, [r7, #26]
 8002586:	8b7b      	ldrh	r3, [r7, #26]
 8002588:	f083 0320 	eor.w	r3, r3, #32
 800258c:	837b      	strh	r3, [r7, #26]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	441a      	add	r2, r3
 800259c:	8b7b      	ldrh	r3, [r7, #26]
 800259e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f005 f892 	bl	80076e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01f      	beq.n	8002608 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025e2:	833b      	strh	r3, [r7, #24]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	441a      	add	r2, r3
 80025f2:	8b3b      	ldrh	r3, [r7, #24]
 80025f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002604:	b29b      	uxth	r3, r3
 8002606:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e31f      	b.n	8002c4c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d021      	beq.n	800265a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800262c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002630:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002646:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800264a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800264e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002656:	b29b      	uxth	r3, r3
 8002658:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002660:	2b01      	cmp	r3, #1
 8002662:	f040 82ca 	bne.w	8002bfa <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800266e:	441a      	add	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800267c:	441a      	add	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	429a      	cmp	r2, r3
 800268c:	d309      	bcc.n	80026a2 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800269a:	1ad2      	subs	r2, r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	621a      	str	r2, [r3, #32]
 80026a0:	e015      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80026aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80026ae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80026b8:	e009      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2200      	movs	r2, #0
 80026cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	785b      	ldrb	r3, [r3, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d15f      	bne.n	8002796 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	643b      	str	r3, [r7, #64]	@ 0x40
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ea:	4413      	add	r3, r2
 80026ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	00da      	lsls	r2, r3, #3
 80026f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026f6:	4413      	add	r3, r2
 80026f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80026fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002708:	b29a      	uxth	r2, r3
 800270a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800270c:	801a      	strh	r2, [r3, #0]
 800270e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <HAL_PCD_EP_DB_Transmit+0x34e>
 8002714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800271e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002722:	b29a      	uxth	r2, r3
 8002724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002726:	801a      	strh	r2, [r3, #0]
 8002728:	e051      	b.n	80027ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800272a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800272c:	2b3e      	cmp	r3, #62	@ 0x3e
 800272e:	d816      	bhi.n	800275e <HAL_PCD_EP_DB_Transmit+0x382>
 8002730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	653b      	str	r3, [r7, #80]	@ 0x50
 8002736:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002742:	3301      	adds	r3, #1
 8002744:	653b      	str	r3, [r7, #80]	@ 0x50
 8002746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29a      	uxth	r2, r3
 800274c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800274e:	b29b      	uxth	r3, r3
 8002750:	029b      	lsls	r3, r3, #10
 8002752:	b29b      	uxth	r3, r3
 8002754:	4313      	orrs	r3, r2
 8002756:	b29a      	uxth	r2, r3
 8002758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800275a:	801a      	strh	r2, [r3, #0]
 800275c:	e037      	b.n	80027ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800275e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	653b      	str	r3, [r7, #80]	@ 0x50
 8002764:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_PCD_EP_DB_Transmit+0x398>
 800276e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002770:	3b01      	subs	r3, #1
 8002772:	653b      	str	r3, [r7, #80]	@ 0x50
 8002774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29a      	uxth	r2, r3
 800277a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800277c:	b29b      	uxth	r3, r3
 800277e:	029b      	lsls	r3, r3, #10
 8002780:	b29b      	uxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b29b      	uxth	r3, r3
 8002786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278e:	b29a      	uxth	r2, r3
 8002790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002792:	801a      	strh	r2, [r3, #0]
 8002794:	e01b      	b.n	80027ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	785b      	ldrb	r3, [r3, #1]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d117      	bne.n	80027ce <HAL_PCD_EP_DB_Transmit+0x3f2>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027b2:	4413      	add	r3, r2
 80027b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	00da      	lsls	r2, r3, #3
 80027bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027be:	4413      	add	r3, r2
 80027c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80027c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80027c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027cc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	6959      	ldr	r1, [r3, #20]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	891a      	ldrh	r2, [r3, #8]
 80027da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f003 f896 	bl	800590e <USB_WritePMA>
 80027e2:	e20a      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	4413      	add	r3, r2
 80027fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002808:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002814:	429a      	cmp	r2, r3
 8002816:	d307      	bcc.n	8002828 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002820:	1ad2      	subs	r2, r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	619a      	str	r2, [r3, #24]
 8002826:	e002      	b.n	800282e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 80f6 	bne.w	8002a24 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	785b      	ldrb	r3, [r3, #1]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d126      	bne.n	800288e <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	677b      	str	r3, [r7, #116]	@ 0x74
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800284e:	b29b      	uxth	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002854:	4413      	add	r3, r2
 8002856:	677b      	str	r3, [r7, #116]	@ 0x74
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	00da      	lsls	r2, r3, #3
 800285e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002860:	4413      	add	r3, r2
 8002862:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002866:	673b      	str	r3, [r7, #112]	@ 0x70
 8002868:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002872:	b29a      	uxth	r2, r3
 8002874:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002876:	801a      	strh	r2, [r3, #0]
 8002878:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002886:	b29a      	uxth	r2, r3
 8002888:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800288a:	801a      	strh	r2, [r3, #0]
 800288c:	e01a      	b.n	80028c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	785b      	ldrb	r3, [r3, #1]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d116      	bne.n	80028c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028aa:	4413      	add	r3, r2
 80028ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	00da      	lsls	r2, r3, #3
 80028b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028b6:	4413      	add	r3, r2
 80028b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028c0:	2200      	movs	r2, #0
 80028c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	785b      	ldrb	r3, [r3, #1]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d12f      	bne.n	8002934 <HAL_PCD_EP_DB_Transmit+0x558>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ec:	4413      	add	r3, r2
 80028ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	00da      	lsls	r2, r3, #3
 80028f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028fc:	4413      	add	r3, r2
 80028fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002902:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002906:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002912:	b29a      	uxth	r2, r3
 8002914:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29b      	uxth	r3, r3
 8002922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800292a:	b29a      	uxth	r2, r3
 800292c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002930:	801a      	strh	r2, [r3, #0]
 8002932:	e01c      	b.n	800296e <HAL_PCD_EP_DB_Transmit+0x592>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	785b      	ldrb	r3, [r3, #1]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d118      	bne.n	800296e <HAL_PCD_EP_DB_Transmit+0x592>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800294c:	4413      	add	r3, r2
 800294e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	00da      	lsls	r2, r3, #3
 8002958:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800295c:	4413      	add	r3, r2
 800295e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002962:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002966:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800296a:	2200      	movs	r2, #0
 800296c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	78db      	ldrb	r3, [r3, #3]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d127      	bne.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800298c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002990:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002994:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002998:	f083 0320 	eor.w	r3, r3, #32
 800299c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	441a      	add	r2, r3
 80029ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80029b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f004 fe88 	bl	80076e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d121      	bne.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	441a      	add	r2, r3
 8002a08:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e113      	b.n	8002c4c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d121      	bne.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a48:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	441a      	add	r2, r3
 8002a5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	f040 80be 	bne.w	8002bfa <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a86:	441a      	add	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a94:	441a      	add	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6a1a      	ldr	r2, [r3, #32]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d309      	bcc.n	8002aba <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ab2:	1ad2      	subs	r2, r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	621a      	str	r2, [r3, #32]
 8002ab8:	e015      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d107      	bne.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8002ac2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ad0:	e009      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2200      	movs	r2, #0
 8002adc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	785b      	ldrb	r3, [r3, #1]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d15f      	bne.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b08:	4413      	add	r3, r2
 8002b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	00da      	lsls	r2, r3, #3
 8002b12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b14:	4413      	add	r3, r2
 8002b16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10a      	bne.n	8002b48 <HAL_PCD_EP_DB_Transmit+0x76c>
 8002b32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b44:	801a      	strh	r2, [r3, #0]
 8002b46:	e04e      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002b48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b4c:	d816      	bhi.n	8002b7c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002b4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x788>
 8002b5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b60:	3301      	adds	r3, #1
 8002b62:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	029b      	lsls	r3, r3, #10
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b78:	801a      	strh	r2, [r3, #0]
 8002b7a:	e034      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8002b8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	029b      	lsls	r3, r3, #10
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	e018      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d114      	bne.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bca:	4413      	add	r3, r2
 8002bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	00da      	lsls	r2, r3, #3
 8002bd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002bdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002be4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6959      	ldr	r1, [r3, #20]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	895a      	ldrh	r2, [r3, #10]
 8002bf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f002 fe8a 	bl	800590e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c14:	82fb      	strh	r3, [r7, #22]
 8002c16:	8afb      	ldrh	r3, [r7, #22]
 8002c18:	f083 0310 	eor.w	r3, r3, #16
 8002c1c:	82fb      	strh	r3, [r7, #22]
 8002c1e:	8afb      	ldrh	r3, [r7, #22]
 8002c20:	f083 0320 	eor.w	r3, r3, #32
 8002c24:	82fb      	strh	r3, [r7, #22]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	441a      	add	r2, r3
 8002c34:	8afb      	ldrh	r3, [r7, #22]
 8002c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3798      	adds	r7, #152	@ 0x98
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	4613      	mov	r3, r2
 8002c64:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c66:	897b      	ldrh	r3, [r7, #10]
 8002c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	f003 0207 	and.w	r2, r3, #7
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	3310      	adds	r3, #16
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	e009      	b.n	8002c9e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c8a:	897a      	ldrh	r2, [r7, #10]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c9e:	893b      	ldrh	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	80da      	strh	r2, [r3, #6]
 8002cb2:	e00b      	b.n	8002ccc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d141      	bne.n	8002dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d3e:	4b4b      	ldr	r3, [pc, #300]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d4a:	d131      	bne.n	8002db0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d4c:	4b47      	ldr	r3, [pc, #284]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d52:	4a46      	ldr	r2, [pc, #280]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d5c:	4b43      	ldr	r3, [pc, #268]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d64:	4a41      	ldr	r2, [pc, #260]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d6c:	4b40      	ldr	r3, [pc, #256]	@ (8002e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2232      	movs	r2, #50	@ 0x32
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	4a3f      	ldr	r2, [pc, #252]	@ (8002e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	0c9b      	lsrs	r3, r3, #18
 8002d7e:	3301      	adds	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d82:	e002      	b.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d8a:	4b38      	ldr	r3, [pc, #224]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d96:	d102      	bne.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f2      	bne.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d9e:	4b33      	ldr	r3, [pc, #204]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002daa:	d158      	bne.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e057      	b.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002db0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002db6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002dc0:	e04d      	b.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc8:	d141      	bne.n	8002e4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dca:	4b28      	ldr	r3, [pc, #160]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	d131      	bne.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd8:	4b24      	ldr	r3, [pc, #144]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dde:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de8:	4b20      	ldr	r3, [pc, #128]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002df0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002df6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002df8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2232      	movs	r2, #50	@ 0x32
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	4a1c      	ldr	r2, [pc, #112]	@ (8002e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	0c9b      	lsrs	r3, r3, #18
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0e:	e002      	b.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e22:	d102      	bne.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f2      	bne.n	8002e10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e2a:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e36:	d112      	bne.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e011      	b.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e42:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e4c:	e007      	b.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e4e:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e56:	4a05      	ldr	r2, [pc, #20]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	20000000 	.word	0x20000000
 8002e74:	431bde83 	.word	0x431bde83

08002e78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a04      	ldr	r2, [pc, #16]	@ (8002e94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e86:	6093      	str	r3, [r2, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40007000 	.word	0x40007000

08002e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e2fe      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d075      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb6:	4b97      	ldr	r3, [pc, #604]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ec0:	4b94      	ldr	r3, [pc, #592]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d102      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x3e>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_OscConfig+0x44>
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d10b      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	4b8d      	ldr	r3, [pc, #564]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d05b      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x108>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d157      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e2d9      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002efc:	d106      	bne.n	8002f0c <HAL_RCC_OscConfig+0x74>
 8002efe:	4b85      	ldr	r3, [pc, #532]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a84      	ldr	r2, [pc, #528]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e01d      	b.n	8002f48 <HAL_RCC_OscConfig+0xb0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x98>
 8002f16:	4b7f      	ldr	r3, [pc, #508]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b7c      	ldr	r3, [pc, #496]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7b      	ldr	r2, [pc, #492]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0xb0>
 8002f30:	4b78      	ldr	r3, [pc, #480]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a77      	ldr	r2, [pc, #476]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4b75      	ldr	r3, [pc, #468]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a74      	ldr	r2, [pc, #464]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fd fc48 	bl	80007e4 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fd fc44 	bl	80007e4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	@ 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e29e      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0xc0>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fd fc34 	bl	80007e4 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fd fc30 	bl	80007e4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	@ 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e28a      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f92:	4b60      	ldr	r3, [pc, #384]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0xe8>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d075      	beq.n	800309a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fae:	4b59      	ldr	r3, [pc, #356]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb8:	4b56      	ldr	r3, [pc, #344]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	d102      	bne.n	8002fce <HAL_RCC_OscConfig+0x136>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d002      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x13c>
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d11f      	bne.n	8003014 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd4:	4b4f      	ldr	r3, [pc, #316]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_OscConfig+0x154>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e25d      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	4b49      	ldr	r3, [pc, #292]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	4946      	ldr	r1, [pc, #280]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003000:	4b45      	ldr	r3, [pc, #276]	@ (8003118 <HAL_RCC_OscConfig+0x280>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fba1 	bl	800074c <HAL_InitTick>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d043      	beq.n	8003098 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e249      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d023      	beq.n	8003064 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301c:	4b3d      	ldr	r3, [pc, #244]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a3c      	ldr	r2, [pc, #240]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fd fbdc 	bl	80007e4 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003030:	f7fd fbd8 	bl	80007e4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e232      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003042:	4b34      	ldr	r3, [pc, #208]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304e:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	061b      	lsls	r3, r3, #24
 800305c:	492d      	ldr	r1, [pc, #180]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
 8003062:	e01a      	b.n	800309a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003064:	4b2b      	ldr	r3, [pc, #172]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2a      	ldr	r2, [pc, #168]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 800306a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800306e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fd fbb8 	bl	80007e4 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003078:	f7fd fbb4 	bl	80007e4 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e20e      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800308a:	4b22      	ldr	r3, [pc, #136]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x1e0>
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003098:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d041      	beq.n	800312a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d01c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ae:	4b19      	ldr	r3, [pc, #100]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 80030b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b4:	4a17      	ldr	r2, [pc, #92]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030be:	f7fd fb91 	bl	80007e4 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fd fb8d 	bl	80007e4 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1e7      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 80030da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0ef      	beq.n	80030c6 <HAL_RCC_OscConfig+0x22e>
 80030e6:	e020      	b.n	800312a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ee:	4a09      	ldr	r2, [pc, #36]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fd fb74 	bl	80007e4 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030fe:	e00d      	b.n	800311c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003100:	f7fd fb70 	bl	80007e4 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d906      	bls.n	800311c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1ca      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800311c:	4b8c      	ldr	r3, [pc, #560]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1ea      	bne.n	8003100 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80a6 	beq.w	8003284 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800313c:	4b84      	ldr	r3, [pc, #528]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_OscConfig+0x2b4>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x2b6>
 800314c:	2300      	movs	r3, #0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	4b7f      	ldr	r3, [pc, #508]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	4a7e      	ldr	r2, [pc, #504]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315c:	6593      	str	r3, [r2, #88]	@ 0x58
 800315e:	4b7c      	ldr	r3, [pc, #496]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800316a:	2301      	movs	r3, #1
 800316c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316e:	4b79      	ldr	r3, [pc, #484]	@ (8003354 <HAL_RCC_OscConfig+0x4bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d118      	bne.n	80031ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800317a:	4b76      	ldr	r3, [pc, #472]	@ (8003354 <HAL_RCC_OscConfig+0x4bc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a75      	ldr	r2, [pc, #468]	@ (8003354 <HAL_RCC_OscConfig+0x4bc>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003186:	f7fd fb2d 	bl	80007e4 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7fd fb29 	bl	80007e4 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e183      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003354 <HAL_RCC_OscConfig+0x4bc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d108      	bne.n	80031c6 <HAL_RCC_OscConfig+0x32e>
 80031b4:	4b66      	ldr	r3, [pc, #408]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ba:	4a65      	ldr	r2, [pc, #404]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031c4:	e024      	b.n	8003210 <HAL_RCC_OscConfig+0x378>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d110      	bne.n	80031f0 <HAL_RCC_OscConfig+0x358>
 80031ce:	4b60      	ldr	r3, [pc, #384]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d4:	4a5e      	ldr	r2, [pc, #376]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031de:	4b5c      	ldr	r3, [pc, #368]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031ee:	e00f      	b.n	8003210 <HAL_RCC_OscConfig+0x378>
 80031f0:	4b57      	ldr	r3, [pc, #348]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f6:	4a56      	ldr	r2, [pc, #344]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003200:	4b53      	ldr	r3, [pc, #332]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003206:	4a52      	ldr	r2, [pc, #328]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 8003208:	f023 0304 	bic.w	r3, r3, #4
 800320c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d016      	beq.n	8003246 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fd fae4 	bl	80007e4 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321e:	e00a      	b.n	8003236 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7fd fae0 	bl	80007e4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e138      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003236:	4b46      	ldr	r3, [pc, #280]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ed      	beq.n	8003220 <HAL_RCC_OscConfig+0x388>
 8003244:	e015      	b.n	8003272 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fd facd 	bl	80007e4 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fd fac9 	bl	80007e4 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e121      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003264:	4b3a      	ldr	r3, [pc, #232]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ed      	bne.n	800324e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003272:	7ffb      	ldrb	r3, [r7, #31]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b35      	ldr	r3, [pc, #212]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	4a34      	ldr	r2, [pc, #208]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003282:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d03c      	beq.n	800330a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01c      	beq.n	80032d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003298:	4b2d      	ldr	r3, [pc, #180]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 800329a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800329e:	4a2c      	ldr	r2, [pc, #176]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fd fa9c 	bl	80007e4 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b0:	f7fd fa98 	bl	80007e4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0f2      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032c2:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80032c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ef      	beq.n	80032b0 <HAL_RCC_OscConfig+0x418>
 80032d0:	e01b      	b.n	800330a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80032d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e2:	f7fd fa7f 	bl	80007e4 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ea:	f7fd fa7b 	bl	80007e4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0d5      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032fc:	4b14      	ldr	r3, [pc, #80]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 80032fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ef      	bne.n	80032ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80c9 	beq.w	80034a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003314:	4b0e      	ldr	r3, [pc, #56]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b0c      	cmp	r3, #12
 800331e:	f000 8083 	beq.w	8003428 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d15e      	bne.n	80033e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332a:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a08      	ldr	r2, [pc, #32]	@ (8003350 <HAL_RCC_OscConfig+0x4b8>)
 8003330:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fd fa55 	bl	80007e4 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800333c:	e00c      	b.n	8003358 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333e:	f7fd fa51 	bl	80007e4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d905      	bls.n	8003358 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0ab      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
 8003350:	40021000 	.word	0x40021000
 8003354:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003358:	4b55      	ldr	r3, [pc, #340]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ec      	bne.n	800333e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003364:	4b52      	ldr	r3, [pc, #328]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	4b52      	ldr	r3, [pc, #328]	@ (80034b4 <HAL_RCC_OscConfig+0x61c>)
 800336a:	4013      	ands	r3, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6a11      	ldr	r1, [r2, #32]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003374:	3a01      	subs	r2, #1
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	4311      	orrs	r1, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800337e:	0212      	lsls	r2, r2, #8
 8003380:	4311      	orrs	r1, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003386:	0852      	lsrs	r2, r2, #1
 8003388:	3a01      	subs	r2, #1
 800338a:	0552      	lsls	r2, r2, #21
 800338c:	4311      	orrs	r1, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003392:	0852      	lsrs	r2, r2, #1
 8003394:	3a01      	subs	r2, #1
 8003396:	0652      	lsls	r2, r2, #25
 8003398:	4311      	orrs	r1, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800339e:	06d2      	lsls	r2, r2, #27
 80033a0:	430a      	orrs	r2, r1
 80033a2:	4943      	ldr	r1, [pc, #268]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a8:	4b41      	ldr	r3, [pc, #260]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a40      	ldr	r2, [pc, #256]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b4:	4b3e      	ldr	r3, [pc, #248]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a3d      	ldr	r2, [pc, #244]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 80033ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fd fa10 	bl	80007e4 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fd fa0c 	bl	80007e4 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e066      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033da:	4b35      	ldr	r3, [pc, #212]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x530>
 80033e6:	e05e      	b.n	80034a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e8:	4b31      	ldr	r3, [pc, #196]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a30      	ldr	r2, [pc, #192]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 80033ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fd f9f6 	bl	80007e4 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fd f9f2 	bl	80007e4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e04c      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340e:	4b28      	ldr	r3, [pc, #160]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800341a:	4b25      	ldr	r3, [pc, #148]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	4924      	ldr	r1, [pc, #144]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 8003420:	4b25      	ldr	r3, [pc, #148]	@ (80034b8 <HAL_RCC_OscConfig+0x620>)
 8003422:	4013      	ands	r3, r2
 8003424:	60cb      	str	r3, [r1, #12]
 8003426:	e03e      	b.n	80034a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e039      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003434:	4b1e      	ldr	r3, [pc, #120]	@ (80034b0 <HAL_RCC_OscConfig+0x618>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 0203 	and.w	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	429a      	cmp	r2, r3
 8003446:	d12c      	bne.n	80034a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	3b01      	subs	r3, #1
 8003454:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d123      	bne.n	80034a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d11b      	bne.n	80034a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d113      	bne.n	80034a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	3b01      	subs	r3, #1
 8003488:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d109      	bne.n	80034a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	019f800c 	.word	0x019f800c
 80034b8:	feeefffc 	.word	0xfeeefffc

080034bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e11e      	b.n	8003712 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b91      	ldr	r3, [pc, #580]	@ (800371c <HAL_RCC_ClockConfig+0x260>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d910      	bls.n	8003504 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b8e      	ldr	r3, [pc, #568]	@ (800371c <HAL_RCC_ClockConfig+0x260>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 020f 	bic.w	r2, r3, #15
 80034ea:	498c      	ldr	r1, [pc, #560]	@ (800371c <HAL_RCC_ClockConfig+0x260>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b8a      	ldr	r3, [pc, #552]	@ (800371c <HAL_RCC_ClockConfig+0x260>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e106      	b.n	8003712 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d073      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b03      	cmp	r3, #3
 8003516:	d129      	bne.n	800356c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003518:	4b81      	ldr	r3, [pc, #516]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0f4      	b.n	8003712 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003528:	f000 f966 	bl	80037f8 <RCC_GetSysClockFreqFromPLLSource>
 800352c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4a7c      	ldr	r2, [pc, #496]	@ (8003724 <HAL_RCC_ClockConfig+0x268>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d93f      	bls.n	80035b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003536:	4b7a      	ldr	r3, [pc, #488]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800354a:	2b00      	cmp	r3, #0
 800354c:	d033      	beq.n	80035b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003552:	2b00      	cmp	r3, #0
 8003554:	d12f      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003556:	4b72      	ldr	r3, [pc, #456]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800355e:	4a70      	ldr	r2, [pc, #448]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003564:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003566:	2380      	movs	r3, #128	@ 0x80
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e024      	b.n	80035b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d107      	bne.n	8003584 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003574:	4b6a      	ldr	r3, [pc, #424]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0c6      	b.n	8003712 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003584:	4b66      	ldr	r3, [pc, #408]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0be      	b.n	8003712 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003594:	f000 f8ce 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8003598:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4a61      	ldr	r2, [pc, #388]	@ (8003724 <HAL_RCC_ClockConfig+0x268>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d909      	bls.n	80035b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 80035ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80035b2:	2380      	movs	r3, #128	@ 0x80
 80035b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035b6:	4b5a      	ldr	r3, [pc, #360]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f023 0203 	bic.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4957      	ldr	r1, [pc, #348]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c8:	f7fd f90c 	bl	80007e4 <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d0:	f7fd f908 	bl	80007e4 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e095      	b.n	8003712 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 020c 	and.w	r2, r3, #12
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d1eb      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d023      	beq.n	800364c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003610:	4b43      	ldr	r3, [pc, #268]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a42      	ldr	r2, [pc, #264]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003616:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800361a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003628:	4b3d      	ldr	r3, [pc, #244]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003630:	4a3b      	ldr	r2, [pc, #236]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003632:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003636:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003638:	4b39      	ldr	r3, [pc, #228]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4936      	ldr	r1, [pc, #216]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
 800364a:	e008      	b.n	800365e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b80      	cmp	r3, #128	@ 0x80
 8003650:	d105      	bne.n	800365e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003652:	4b33      	ldr	r3, [pc, #204]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	4a32      	ldr	r2, [pc, #200]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 8003658:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800365c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800365e:	4b2f      	ldr	r3, [pc, #188]	@ (800371c <HAL_RCC_ClockConfig+0x260>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d21d      	bcs.n	80036a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366c:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <HAL_RCC_ClockConfig+0x260>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 020f 	bic.w	r2, r3, #15
 8003674:	4929      	ldr	r1, [pc, #164]	@ (800371c <HAL_RCC_ClockConfig+0x260>)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800367c:	f7fd f8b2 	bl	80007e4 <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7fd f8ae 	bl	80007e4 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e03b      	b.n	8003712 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b20      	ldr	r3, [pc, #128]	@ (800371c <HAL_RCC_ClockConfig+0x260>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1ed      	bne.n	8003684 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4917      	ldr	r1, [pc, #92]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036d2:	4b13      	ldr	r3, [pc, #76]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	490f      	ldr	r1, [pc, #60]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036e6:	f000 f825 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80036ea:	4602      	mov	r2, r0
 80036ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003720 <HAL_RCC_ClockConfig+0x264>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	490c      	ldr	r1, [pc, #48]	@ (8003728 <HAL_RCC_ClockConfig+0x26c>)
 80036f8:	5ccb      	ldrb	r3, [r1, r3]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	4a0a      	ldr	r2, [pc, #40]	@ (800372c <HAL_RCC_ClockConfig+0x270>)
 8003704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003706:	4b0a      	ldr	r3, [pc, #40]	@ (8003730 <HAL_RCC_ClockConfig+0x274>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd f81e 	bl	800074c <HAL_InitTick>
 8003710:	4603      	mov	r3, r0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40022000 	.word	0x40022000
 8003720:	40021000 	.word	0x40021000
 8003724:	04c4b400 	.word	0x04c4b400
 8003728:	08007cd0 	.word	0x08007cd0
 800372c:	20000000 	.word	0x20000000
 8003730:	20000004 	.word	0x20000004

08003734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800373a:	4b2c      	ldr	r3, [pc, #176]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b04      	cmp	r3, #4
 8003744:	d102      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003746:	4b2a      	ldr	r3, [pc, #168]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e047      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800374c:	4b27      	ldr	r3, [pc, #156]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b08      	cmp	r3, #8
 8003756:	d102      	bne.n	800375e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003758:	4b26      	ldr	r3, [pc, #152]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e03e      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800375e:	4b23      	ldr	r3, [pc, #140]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b0c      	cmp	r3, #12
 8003768:	d136      	bne.n	80037d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800376a:	4b20      	ldr	r3, [pc, #128]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003774:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	3301      	adds	r3, #1
 8003780:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d10c      	bne.n	80037a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003788:	4a1a      	ldr	r2, [pc, #104]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	4a16      	ldr	r2, [pc, #88]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003792:	68d2      	ldr	r2, [r2, #12]
 8003794:	0a12      	lsrs	r2, r2, #8
 8003796:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	617b      	str	r3, [r7, #20]
      break;
 80037a0:	e00c      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037a2:	4a13      	ldr	r2, [pc, #76]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	4a10      	ldr	r2, [pc, #64]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ac:	68d2      	ldr	r2, [r2, #12]
 80037ae:	0a12      	lsrs	r2, r2, #8
 80037b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	617b      	str	r3, [r7, #20]
      break;
 80037ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037bc:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	0e5b      	lsrs	r3, r3, #25
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	3301      	adds	r3, #1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	e001      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037dc:	693b      	ldr	r3, [r7, #16]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	00f42400 	.word	0x00f42400
 80037f4:	007a1200 	.word	0x007a1200

080037f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003808:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3301      	adds	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d10c      	bne.n	8003836 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800381c:	4a17      	ldr	r2, [pc, #92]	@ (800387c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	4a14      	ldr	r2, [pc, #80]	@ (8003878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003826:	68d2      	ldr	r2, [r2, #12]
 8003828:	0a12      	lsrs	r2, r2, #8
 800382a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	617b      	str	r3, [r7, #20]
    break;
 8003834:	e00c      	b.n	8003850 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003836:	4a12      	ldr	r2, [pc, #72]	@ (8003880 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	4a0e      	ldr	r2, [pc, #56]	@ (8003878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003840:	68d2      	ldr	r2, [r2, #12]
 8003842:	0a12      	lsrs	r2, r2, #8
 8003844:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
    break;
 800384e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003850:	4b09      	ldr	r3, [pc, #36]	@ (8003878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0e5b      	lsrs	r3, r3, #25
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	3301      	adds	r3, #1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800386a:	687b      	ldr	r3, [r7, #4]
}
 800386c:	4618      	mov	r0, r3
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	40021000 	.word	0x40021000
 800387c:	007a1200 	.word	0x007a1200
 8003880:	00f42400 	.word	0x00f42400

08003884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800388c:	2300      	movs	r3, #0
 800388e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003890:	2300      	movs	r3, #0
 8003892:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8098 	beq.w	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a2:	2300      	movs	r3, #0
 80038a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a6:	4b43      	ldr	r3, [pc, #268]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10d      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	4b40      	ldr	r3, [pc, #256]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b6:	4a3f      	ldr	r2, [pc, #252]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80038be:	4b3d      	ldr	r3, [pc, #244]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ce:	4b3a      	ldr	r3, [pc, #232]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a39      	ldr	r2, [pc, #228]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038da:	f7fc ff83 	bl	80007e4 <HAL_GetTick>
 80038de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038e0:	e009      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e2:	f7fc ff7f 	bl	80007e4 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d902      	bls.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	74fb      	strb	r3, [r7, #19]
        break;
 80038f4:	e005      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038f6:	4b30      	ldr	r3, [pc, #192]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ef      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d159      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003908:	4b2a      	ldr	r3, [pc, #168]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003912:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01e      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	429a      	cmp	r2, r3
 8003922:	d019      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003924:	4b23      	ldr	r3, [pc, #140]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800392e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003930:	4b20      	ldr	r3, [pc, #128]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003936:	4a1f      	ldr	r2, [pc, #124]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003940:	4b1c      	ldr	r3, [pc, #112]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003946:	4a1b      	ldr	r2, [pc, #108]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003950:	4a18      	ldr	r2, [pc, #96]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d016      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fc ff3f 	bl	80007e4 <HAL_GetTick>
 8003966:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003968:	e00b      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f7fc ff3b 	bl	80007e4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003978:	4293      	cmp	r3, r2
 800397a:	d902      	bls.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	74fb      	strb	r3, [r7, #19]
            break;
 8003980:	e006      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003982:	4b0c      	ldr	r3, [pc, #48]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ec      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003996:	4b07      	ldr	r3, [pc, #28]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a4:	4903      	ldr	r1, [pc, #12]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80039ac:	e008      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	74bb      	strb	r3, [r7, #18]
 80039b2:	e005      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039c0:	7c7b      	ldrb	r3, [r7, #17]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d105      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c6:	4ba7      	ldr	r3, [pc, #668]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ca:	4aa6      	ldr	r2, [pc, #664]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039de:	4ba1      	ldr	r3, [pc, #644]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e4:	f023 0203 	bic.w	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	499d      	ldr	r1, [pc, #628]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a00:	4b98      	ldr	r3, [pc, #608]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a06:	f023 020c 	bic.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	4995      	ldr	r1, [pc, #596]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a22:	4b90      	ldr	r3, [pc, #576]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	498c      	ldr	r1, [pc, #560]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a44:	4b87      	ldr	r3, [pc, #540]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	4984      	ldr	r1, [pc, #528]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a66:	4b7f      	ldr	r3, [pc, #508]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	497b      	ldr	r1, [pc, #492]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a88:	4b76      	ldr	r3, [pc, #472]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	4973      	ldr	r1, [pc, #460]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	496a      	ldr	r1, [pc, #424]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003acc:	4b65      	ldr	r3, [pc, #404]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4962      	ldr	r1, [pc, #392]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aee:	4b5d      	ldr	r3, [pc, #372]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	4959      	ldr	r1, [pc, #356]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b10:	4b54      	ldr	r3, [pc, #336]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b16:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1e:	4951      	ldr	r1, [pc, #324]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d015      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b32:	4b4c      	ldr	r3, [pc, #304]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	4948      	ldr	r1, [pc, #288]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b50:	d105      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b52:	4b44      	ldr	r3, [pc, #272]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	4a43      	ldr	r2, [pc, #268]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b5c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d015      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b78:	493a      	ldr	r1, [pc, #232]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b88:	d105      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b8a:	4b36      	ldr	r3, [pc, #216]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	4a35      	ldr	r2, [pc, #212]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b94:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d015      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ba2:	4b30      	ldr	r3, [pc, #192]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb0:	492c      	ldr	r1, [pc, #176]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bc0:	d105      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc2:	4b28      	ldr	r3, [pc, #160]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	4a27      	ldr	r2, [pc, #156]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bcc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d015      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bda:	4b22      	ldr	r3, [pc, #136]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be8:	491e      	ldr	r1, [pc, #120]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bf8:	d105      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4a19      	ldr	r2, [pc, #100]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c04:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c12:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c20:	4910      	ldr	r1, [pc, #64]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c30:	d105      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c32:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	4a0b      	ldr	r2, [pc, #44]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d018      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c4a:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c50:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	4902      	ldr	r1, [pc, #8]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	e001      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003c64:	40021000 	.word	0x40021000
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c70:	4b21      	ldr	r3, [pc, #132]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a20      	ldr	r2, [pc, #128]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d015      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003c88:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	4918      	ldr	r1, [pc, #96]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ca8:	4b13      	ldr	r3, [pc, #76]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a12      	ldr	r2, [pc, #72]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003cae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cce:	490a      	ldr	r1, [pc, #40]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cde:	d105      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a04      	ldr	r2, [pc, #16]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003cec:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000

08003cfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d0c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003d10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d32:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003d36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	4013      	ands	r3, r2
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b0a7      	sub	sp, #156	@ 0x9c
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	78db      	ldrb	r3, [r3, #3]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d81f      	bhi.n	8003e0e <USB_ActivateEndpoint+0x72>
 8003dce:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <USB_ActivateEndpoint+0x38>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003e01 	.word	0x08003e01
 8003ddc:	08003e17 	.word	0x08003e17
 8003de0:	08003df3 	.word	0x08003df3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003de4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003de8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003df0:	e012      	b.n	8003e18 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003df2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003df6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003dfa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003dfe:	e00b      	b.n	8003e18 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e00:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003e04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e08:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8003e0c:	e004      	b.n	8003e18 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8003e14:	e000      	b.n	8003e18 <USB_ActivateEndpoint+0x7c>
      break;
 8003e16:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	441a      	add	r2, r3
 8003e22:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	b21b      	sxth	r3, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b21b      	sxth	r3, r3
 8003e5e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	441a      	add	r2, r3
 8003e6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	7b1b      	ldrb	r3, [r3, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f040 8180 	bne.w	800418e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	785b      	ldrb	r3, [r3, #1]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8084 	beq.w	8003fa0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	00da      	lsls	r2, r3, #3
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	88db      	ldrh	r3, [r3, #6]
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	827b      	strh	r3, [r7, #18]
 8003eda:	8a7b      	ldrh	r3, [r7, #18]
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01b      	beq.n	8003f1c <USB_ActivateEndpoint+0x180>
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efa:	823b      	strh	r3, [r7, #16]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	441a      	add	r2, r3
 8003f06:	8a3b      	ldrh	r3, [r7, #16]
 8003f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	78db      	ldrb	r3, [r3, #3]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d020      	beq.n	8003f66 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f3a:	81bb      	strh	r3, [r7, #12]
 8003f3c:	89bb      	ldrh	r3, [r7, #12]
 8003f3e:	f083 0320 	eor.w	r3, r3, #32
 8003f42:	81bb      	strh	r3, [r7, #12]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	441a      	add	r2, r3
 8003f4e:	89bb      	ldrh	r3, [r7, #12]
 8003f50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	8013      	strh	r3, [r2, #0]
 8003f64:	e3f9      	b.n	800475a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f7c:	81fb      	strh	r3, [r7, #14]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	441a      	add	r2, r3
 8003f88:	89fb      	ldrh	r3, [r7, #14]
 8003f8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	8013      	strh	r3, [r2, #0]
 8003f9e:	e3dc      	b.n	800475a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb0:	4413      	add	r3, r2
 8003fb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	00da      	lsls	r2, r3, #3
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	88db      	ldrh	r3, [r3, #6]
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	4413      	add	r3, r2
 8003fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	00da      	lsls	r2, r3, #3
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004002:	b29a      	uxth	r2, r3
 8004004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <USB_ActivateEndpoint+0x28a>
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800401a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800401e:	b29a      	uxth	r2, r3
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	801a      	strh	r2, [r3, #0]
 8004024:	e041      	b.n	80040aa <USB_ActivateEndpoint+0x30e>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b3e      	cmp	r3, #62	@ 0x3e
 800402c:	d81c      	bhi.n	8004068 <USB_ActivateEndpoint+0x2cc>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <USB_ActivateEndpoint+0x2b2>
 8004044:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004048:	3301      	adds	r3, #1
 800404a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29a      	uxth	r2, r3
 8004054:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004058:	b29b      	uxth	r3, r3
 800405a:	029b      	lsls	r3, r3, #10
 800405c:	b29b      	uxth	r3, r3
 800405e:	4313      	orrs	r3, r2
 8004060:	b29a      	uxth	r2, r3
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	801a      	strh	r2, [r3, #0]
 8004066:	e020      	b.n	80040aa <USB_ActivateEndpoint+0x30e>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <USB_ActivateEndpoint+0x2ec>
 800407e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004082:	3b01      	subs	r3, #1
 8004084:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29a      	uxth	r2, r3
 800408e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004092:	b29b      	uxth	r3, r3
 8004094:	029b      	lsls	r3, r3, #10
 8004096:	b29b      	uxth	r3, r3
 8004098:	4313      	orrs	r3, r2
 800409a:	b29b      	uxth	r3, r3
 800409c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80040b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80040ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01b      	beq.n	80040fa <USB_ActivateEndpoint+0x35e>
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d8:	843b      	strh	r3, [r7, #32]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	441a      	add	r2, r3
 80040e4:	8c3b      	ldrh	r3, [r7, #32]
 80040e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d124      	bne.n	800414c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004118:	83bb      	strh	r3, [r7, #28]
 800411a:	8bbb      	ldrh	r3, [r7, #28]
 800411c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004120:	83bb      	strh	r3, [r7, #28]
 8004122:	8bbb      	ldrh	r3, [r7, #28]
 8004124:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004128:	83bb      	strh	r3, [r7, #28]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	441a      	add	r2, r3
 8004134:	8bbb      	ldrh	r3, [r7, #28]
 8004136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800413a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800413e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004146:	b29b      	uxth	r3, r3
 8004148:	8013      	strh	r3, [r2, #0]
 800414a:	e306      	b.n	800475a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800415e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004162:	83fb      	strh	r3, [r7, #30]
 8004164:	8bfb      	ldrh	r3, [r7, #30]
 8004166:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800416a:	83fb      	strh	r3, [r7, #30]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	8bfb      	ldrh	r3, [r7, #30]
 8004178:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800417c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004188:	b29b      	uxth	r3, r3
 800418a:	8013      	strh	r3, [r2, #0]
 800418c:	e2e5      	b.n	800475a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	78db      	ldrb	r3, [r3, #3]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d11e      	bne.n	80041d4 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ac:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80041be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80041ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8013      	strh	r3, [r2, #0]
 80041d2:	e01d      	b.n	8004210 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80041e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ea:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80041fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004200:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004204:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800420c:	b29b      	uxth	r3, r3
 800420e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800421a:	b29b      	uxth	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004220:	4413      	add	r3, r2
 8004222:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	00da      	lsls	r2, r3, #3
 800422a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800422c:	4413      	add	r3, r2
 800422e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004232:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	891b      	ldrh	r3, [r3, #8]
 8004238:	085b      	lsrs	r3, r3, #1
 800423a:	b29b      	uxth	r3, r3
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004242:	801a      	strh	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	677b      	str	r3, [r7, #116]	@ 0x74
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800424e:	b29b      	uxth	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004254:	4413      	add	r3, r2
 8004256:	677b      	str	r3, [r7, #116]	@ 0x74
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	00da      	lsls	r2, r3, #3
 800425e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004260:	4413      	add	r3, r2
 8004262:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004266:	673b      	str	r3, [r7, #112]	@ 0x70
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	895b      	ldrh	r3, [r3, #10]
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004276:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	785b      	ldrb	r3, [r3, #1]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f040 81af 	bne.w	80045e0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8004292:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8004296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01d      	beq.n	80042da <USB_ActivateEndpoint+0x53e>
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	441a      	add	r2, r3
 80042c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80042c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80042ea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80042ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01d      	beq.n	8004332 <USB_ActivateEndpoint+0x596>
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800431e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800432a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800432e:	b29b      	uxth	r3, r3
 8004330:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d16b      	bne.n	8004412 <USB_ActivateEndpoint+0x676>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004344:	b29b      	uxth	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800434a:	4413      	add	r3, r2
 800434c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	00da      	lsls	r2, r3, #3
 8004354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004356:	4413      	add	r3, r2
 8004358:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800435c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800435e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004368:	b29a      	uxth	r2, r3
 800436a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800436c:	801a      	strh	r2, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <USB_ActivateEndpoint+0x5f0>
 8004376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004384:	b29a      	uxth	r2, r3
 8004386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	e05d      	b.n	8004448 <USB_ActivateEndpoint+0x6ac>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b3e      	cmp	r3, #62	@ 0x3e
 8004392:	d81c      	bhi.n	80043ce <USB_ActivateEndpoint+0x632>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	085b      	lsrs	r3, r3, #1
 800439a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <USB_ActivateEndpoint+0x618>
 80043aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ae:	3301      	adds	r3, #1
 80043b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043be:	b29b      	uxth	r3, r3
 80043c0:	029b      	lsls	r3, r3, #10
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	4313      	orrs	r3, r2
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	e03c      	b.n	8004448 <USB_ActivateEndpoint+0x6ac>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d104      	bne.n	80043ee <USB_ActivateEndpoint+0x652>
 80043e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043e8:	3b01      	subs	r3, #1
 80043ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	029b      	lsls	r3, r3, #10
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	4313      	orrs	r3, r2
 8004400:	b29b      	uxth	r3, r3
 8004402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800440a:	b29a      	uxth	r2, r3
 800440c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	e01a      	b.n	8004448 <USB_ActivateEndpoint+0x6ac>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d116      	bne.n	8004448 <USB_ActivateEndpoint+0x6ac>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	657b      	str	r3, [r7, #84]	@ 0x54
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004424:	b29b      	uxth	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442a:	4413      	add	r3, r2
 800442c:	657b      	str	r3, [r7, #84]	@ 0x54
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	00da      	lsls	r2, r3, #3
 8004434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004436:	4413      	add	r3, r2
 8004438:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800443c:	653b      	str	r3, [r7, #80]	@ 0x50
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	b29a      	uxth	r2, r3
 8004444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	647b      	str	r3, [r7, #68]	@ 0x44
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	785b      	ldrb	r3, [r3, #1]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d16b      	bne.n	800452c <USB_ActivateEndpoint+0x790>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800445e:	b29b      	uxth	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004464:	4413      	add	r3, r2
 8004466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	00da      	lsls	r2, r3, #3
 800446e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004470:	4413      	add	r3, r2
 8004472:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004482:	b29a      	uxth	r2, r3
 8004484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <USB_ActivateEndpoint+0x70a>
 8004490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e05b      	b.n	800455e <USB_ActivateEndpoint+0x7c2>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80044ac:	d81c      	bhi.n	80044e8 <USB_ActivateEndpoint+0x74c>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d004      	beq.n	80044ce <USB_ActivateEndpoint+0x732>
 80044c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044c8:	3301      	adds	r3, #1
 80044ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044d8:	b29b      	uxth	r3, r3
 80044da:	029b      	lsls	r3, r3, #10
 80044dc:	b29b      	uxth	r3, r3
 80044de:	4313      	orrs	r3, r2
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	e03a      	b.n	800455e <USB_ActivateEndpoint+0x7c2>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d104      	bne.n	8004508 <USB_ActivateEndpoint+0x76c>
 80044fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004502:	3b01      	subs	r3, #1
 8004504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b29a      	uxth	r2, r3
 800450e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004512:	b29b      	uxth	r3, r3
 8004514:	029b      	lsls	r3, r3, #10
 8004516:	b29b      	uxth	r3, r3
 8004518:	4313      	orrs	r3, r2
 800451a:	b29b      	uxth	r3, r3
 800451c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004524:	b29a      	uxth	r2, r3
 8004526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	e018      	b.n	800455e <USB_ActivateEndpoint+0x7c2>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d114      	bne.n	800455e <USB_ActivateEndpoint+0x7c2>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800453a:	b29b      	uxth	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004540:	4413      	add	r3, r2
 8004542:	647b      	str	r3, [r7, #68]	@ 0x44
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	00da      	lsls	r2, r3, #3
 800454a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800454c:	4413      	add	r3, r2
 800454e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004552:	643b      	str	r3, [r7, #64]	@ 0x40
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	b29a      	uxth	r2, r3
 800455a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800455c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004574:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004576:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004578:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800457c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800457e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004580:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004584:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	441a      	add	r2, r3
 8004590:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004596:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800459a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800459e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045bc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]
 80045de:	e0bc      	b.n	800475a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80045f0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80045f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01d      	beq.n	8004638 <USB_ActivateEndpoint+0x89c>
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800460e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004612:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	441a      	add	r2, r3
 8004620:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800462c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004634:	b29b      	uxth	r3, r3
 8004636:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8004648:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800464c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01d      	beq.n	8004690 <USB_ActivateEndpoint+0x8f4>
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800467c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004688:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800468c:	b29b      	uxth	r3, r3
 800468e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	78db      	ldrb	r3, [r3, #3]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d024      	beq.n	80046e2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80046b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80046b6:	f083 0320 	eor.w	r3, r3, #32
 80046ba:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	441a      	add	r2, r3
 80046c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80046cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046dc:	b29b      	uxth	r3, r3
 80046de:	8013      	strh	r3, [r2, #0]
 80046e0:	e01d      	b.n	800471e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046f8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800470a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800470e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800471a:	b29b      	uxth	r3, r3
 800471c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004734:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800474a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800474e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004756:	b29b      	uxth	r3, r3
 8004758:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800475a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800475e:	4618      	mov	r0, r3
 8004760:	379c      	adds	r7, #156	@ 0x9c
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop

0800476c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800476c:	b480      	push	{r7}
 800476e:	b08d      	sub	sp, #52	@ 0x34
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	7b1b      	ldrb	r3, [r3, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 808e 	bne.w	800489c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d044      	beq.n	8004812 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	81bb      	strh	r3, [r7, #12]
 8004796:	89bb      	ldrh	r3, [r7, #12]
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d01b      	beq.n	80047d8 <USB_DeactivateEndpoint+0x6c>
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b6:	817b      	strh	r3, [r7, #10]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	441a      	add	r2, r3
 80047c2:	897b      	ldrh	r3, [r7, #10]
 80047c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ee:	813b      	strh	r3, [r7, #8]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	893b      	ldrh	r3, [r7, #8]
 80047fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800480c:	b29b      	uxth	r3, r3
 800480e:	8013      	strh	r3, [r2, #0]
 8004810:	e192      	b.n	8004b38 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	827b      	strh	r3, [r7, #18]
 8004820:	8a7b      	ldrh	r3, [r7, #18]
 8004822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01b      	beq.n	8004862 <USB_DeactivateEndpoint+0xf6>
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800483c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004840:	823b      	strh	r3, [r7, #16]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	8a3b      	ldrh	r3, [r7, #16]
 800484e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004856:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800485a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800485e:	b29b      	uxth	r3, r3
 8004860:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004878:	81fb      	strh	r3, [r7, #14]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	441a      	add	r2, r3
 8004884:	89fb      	ldrh	r3, [r7, #14]
 8004886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800488e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004896:	b29b      	uxth	r3, r3
 8004898:	8013      	strh	r3, [r2, #0]
 800489a:	e14d      	b.n	8004b38 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	785b      	ldrb	r3, [r3, #1]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f040 80a5 	bne.w	80049f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	843b      	strh	r3, [r7, #32]
 80048b4:	8c3b      	ldrh	r3, [r7, #32]
 80048b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01b      	beq.n	80048f6 <USB_DeactivateEndpoint+0x18a>
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d4:	83fb      	strh	r3, [r7, #30]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	441a      	add	r2, r3
 80048e0:	8bfb      	ldrh	r3, [r7, #30]
 80048e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	83bb      	strh	r3, [r7, #28]
 8004904:	8bbb      	ldrh	r3, [r7, #28]
 8004906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01b      	beq.n	8004946 <USB_DeactivateEndpoint+0x1da>
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004924:	837b      	strh	r3, [r7, #26]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	441a      	add	r2, r3
 8004930:	8b7b      	ldrh	r3, [r7, #26]
 8004932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800493a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800493e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004942:	b29b      	uxth	r3, r3
 8004944:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495c:	833b      	strh	r3, [r7, #24]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	441a      	add	r2, r3
 8004968:	8b3b      	ldrh	r3, [r7, #24]
 800496a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800496e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004976:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800497a:	b29b      	uxth	r3, r3
 800497c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004994:	82fb      	strh	r3, [r7, #22]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	441a      	add	r2, r3
 80049a0:	8afb      	ldrh	r3, [r7, #22]
 80049a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049cc:	82bb      	strh	r3, [r7, #20]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	441a      	add	r2, r3
 80049d8:	8abb      	ldrh	r3, [r7, #20]
 80049da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]
 80049ee:	e0a3      	b.n	8004b38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80049fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004a00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01b      	beq.n	8004a40 <USB_DeactivateEndpoint+0x2d4>
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	441a      	add	r2, r3
 8004a2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004a2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004a4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01b      	beq.n	8004a90 <USB_DeactivateEndpoint+0x324>
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004a7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	441a      	add	r2, r3
 8004ab2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004ab4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ab8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004abc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ade:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	441a      	add	r2, r3
 8004aea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b16:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3734      	adds	r7, #52	@ 0x34
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b0ac      	sub	sp, #176	@ 0xb0
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	f040 84ca 	bne.w	80054ee <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d904      	bls.n	8004b70 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b6e:	e003      	b.n	8004b78 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	7b1b      	ldrb	r3, [r3, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d122      	bne.n	8004bc6 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6959      	ldr	r1, [r3, #20]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	88da      	ldrh	r2, [r3, #6]
 8004b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 febd 	bl	800590e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	00da      	lsls	r2, r3, #3
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	801a      	strh	r2, [r3, #0]
 8004bc2:	f000 bc6f 	b.w	80054a4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	78db      	ldrb	r3, [r3, #3]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	f040 831e 	bne.w	800520c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	f240 82cf 	bls.w	800517c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c0e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6a1a      	ldr	r2, [r3, #32]
 8004c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c22:	1ad2      	subs	r2, r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 814f 	beq.w	8004ede <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	785b      	ldrb	r3, [r3, #1]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d16b      	bne.n	8004d24 <USB_EPStartXfer+0x1de>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	4413      	add	r3, r2
 8004c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	00da      	lsls	r2, r3, #3
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	4413      	add	r3, r2
 8004c6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	801a      	strh	r2, [r3, #0]
 8004c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <USB_EPStartXfer+0x158>
 8004c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	e05b      	b.n	8004d56 <USB_EPStartXfer+0x210>
 8004c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ca2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ca4:	d81c      	bhi.n	8004ce0 <USB_EPStartXfer+0x19a>
 8004ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <USB_EPStartXfer+0x180>
 8004cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	029b      	lsls	r3, r3, #10
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	e03a      	b.n	8004d56 <USB_EPStartXfer+0x210>
 8004ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <USB_EPStartXfer+0x1ba>
 8004cf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	029b      	lsls	r3, r3, #10
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4313      	orrs	r3, r2
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	801a      	strh	r2, [r3, #0]
 8004d22:	e018      	b.n	8004d56 <USB_EPStartXfer+0x210>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d114      	bne.n	8004d56 <USB_EPStartXfer+0x210>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	4413      	add	r3, r2
 8004d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	00da      	lsls	r2, r3, #3
 8004d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d44:	4413      	add	r3, r2
 8004d46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	895b      	ldrh	r3, [r3, #10]
 8004d5a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6959      	ldr	r1, [r3, #20]
 8004d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fdce 	bl	800590e <USB_WritePMA>
            ep->xfer_buff += len;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d7a:	441a      	add	r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	6a1a      	ldr	r2, [r3, #32]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d907      	bls.n	8004d9c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	6a1a      	ldr	r2, [r3, #32]
 8004d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d94:	1ad2      	subs	r2, r2, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	621a      	str	r2, [r3, #32]
 8004d9a:	e006      	b.n	8004daa <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2200      	movs	r2, #0
 8004da8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d16b      	bne.n	8004e8a <USB_EPStartXfer+0x344>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	00da      	lsls	r2, r3, #3
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <USB_EPStartXfer+0x2be>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	801a      	strh	r2, [r3, #0]
 8004e02:	e05d      	b.n	8004ec0 <USB_EPStartXfer+0x37a>
 8004e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e08:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e0a:	d81c      	bhi.n	8004e46 <USB_EPStartXfer+0x300>
 8004e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d004      	beq.n	8004e2c <USB_EPStartXfer+0x2e6>
 8004e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e26:	3301      	adds	r3, #1
 8004e28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	029b      	lsls	r3, r3, #10
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	801a      	strh	r2, [r3, #0]
 8004e44:	e03c      	b.n	8004ec0 <USB_EPStartXfer+0x37a>
 8004e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <USB_EPStartXfer+0x320>
 8004e5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e60:	3b01      	subs	r3, #1
 8004e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	029b      	lsls	r3, r3, #10
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	4313      	orrs	r3, r2
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	801a      	strh	r2, [r3, #0]
 8004e88:	e01a      	b.n	8004ec0 <USB_EPStartXfer+0x37a>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	785b      	ldrb	r3, [r3, #1]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d116      	bne.n	8004ec0 <USB_EPStartXfer+0x37a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	623b      	str	r3, [r7, #32]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	623b      	str	r3, [r7, #32]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	00da      	lsls	r2, r3, #3
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	891b      	ldrh	r3, [r3, #8]
 8004ec4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6959      	ldr	r1, [r3, #20]
 8004ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fd19 	bl	800590e <USB_WritePMA>
 8004edc:	e2e2      	b.n	80054a4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d16b      	bne.n	8004fbe <USB_EPStartXfer+0x478>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef6:	4413      	add	r3, r2
 8004ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	00da      	lsls	r2, r3, #3
 8004f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f02:	4413      	add	r3, r2
 8004f04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <USB_EPStartXfer+0x3f2>
 8004f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	e05d      	b.n	8004ff4 <USB_EPStartXfer+0x4ae>
 8004f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f3e:	d81c      	bhi.n	8004f7a <USB_EPStartXfer+0x434>
 8004f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f44:	085b      	lsrs	r3, r3, #1
 8004f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d004      	beq.n	8004f60 <USB_EPStartXfer+0x41a>
 8004f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	029b      	lsls	r3, r3, #10
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	4313      	orrs	r3, r2
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f76:	801a      	strh	r2, [r3, #0]
 8004f78:	e03c      	b.n	8004ff4 <USB_EPStartXfer+0x4ae>
 8004f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <USB_EPStartXfer+0x454>
 8004f90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f94:	3b01      	subs	r3, #1
 8004f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	029b      	lsls	r3, r3, #10
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	e01a      	b.n	8004ff4 <USB_EPStartXfer+0x4ae>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d116      	bne.n	8004ff4 <USB_EPStartXfer+0x4ae>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fd6:	4413      	add	r3, r2
 8004fd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	00da      	lsls	r2, r3, #3
 8004fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ff2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	891b      	ldrh	r3, [r3, #8]
 8004ff8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	6959      	ldr	r1, [r3, #20]
 8005000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005004:	b29b      	uxth	r3, r3
 8005006:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fc7f 	bl	800590e <USB_WritePMA>
            ep->xfer_buff += len;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005018:	441a      	add	r2, r3
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d907      	bls.n	800503a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6a1a      	ldr	r2, [r3, #32]
 800502e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	621a      	str	r2, [r3, #32]
 8005038:	e006      	b.n	8005048 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2200      	movs	r2, #0
 8005046:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	643b      	str	r3, [r7, #64]	@ 0x40
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d16b      	bne.n	800512c <USB_EPStartXfer+0x5e6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005064:	4413      	add	r3, r2
 8005066:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	00da      	lsls	r2, r3, #3
 800506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005070:	4413      	add	r3, r2
 8005072:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005076:	637b      	str	r3, [r7, #52]	@ 0x34
 8005078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005082:	b29a      	uxth	r2, r3
 8005084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <USB_EPStartXfer+0x560>
 8005090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509e:	b29a      	uxth	r2, r3
 80050a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	e05b      	b.n	800515e <USB_EPStartXfer+0x618>
 80050a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80050ac:	d81c      	bhi.n	80050e8 <USB_EPStartXfer+0x5a2>
 80050ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <USB_EPStartXfer+0x588>
 80050c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050c8:	3301      	adds	r3, #1
 80050ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050d8:	b29b      	uxth	r3, r3
 80050da:	029b      	lsls	r3, r3, #10
 80050dc:	b29b      	uxth	r3, r3
 80050de:	4313      	orrs	r3, r2
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	e03a      	b.n	800515e <USB_EPStartXfer+0x618>
 80050e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d104      	bne.n	8005108 <USB_EPStartXfer+0x5c2>
 80050fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005102:	3b01      	subs	r3, #1
 8005104:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29a      	uxth	r2, r3
 800510e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005112:	b29b      	uxth	r3, r3
 8005114:	029b      	lsls	r3, r3, #10
 8005116:	b29b      	uxth	r3, r3
 8005118:	4313      	orrs	r3, r2
 800511a:	b29b      	uxth	r3, r3
 800511c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005124:	b29a      	uxth	r2, r3
 8005126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005128:	801a      	strh	r2, [r3, #0]
 800512a:	e018      	b.n	800515e <USB_EPStartXfer+0x618>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d114      	bne.n	800515e <USB_EPStartXfer+0x618>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800513a:	b29b      	uxth	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005140:	4413      	add	r3, r2
 8005142:	643b      	str	r3, [r7, #64]	@ 0x40
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	00da      	lsls	r2, r3, #3
 800514a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800514c:	4413      	add	r3, r2
 800514e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005158:	b29a      	uxth	r2, r3
 800515a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	895b      	ldrh	r3, [r3, #10]
 8005162:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6959      	ldr	r1, [r3, #20]
 800516a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800516e:	b29b      	uxth	r3, r3
 8005170:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fbca 	bl	800590e <USB_WritePMA>
 800517a:	e193      	b.n	80054a4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	441a      	add	r2, r3
 80051a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80051ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051bc:	b29b      	uxth	r3, r3
 80051be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051d0:	4413      	add	r3, r2
 80051d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	00da      	lsls	r2, r3, #3
 80051da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051dc:	4413      	add	r3, r2
 80051de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	891b      	ldrh	r3, [r3, #8]
 80051f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6959      	ldr	r1, [r3, #20]
 80051fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fb82 	bl	800590e <USB_WritePMA>
 800520a:	e14b      	b.n	80054a4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6a1a      	ldr	r2, [r3, #32]
 8005210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005214:	1ad2      	subs	r2, r2, r3
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 809a 	beq.w	8005366 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	673b      	str	r3, [r7, #112]	@ 0x70
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d16b      	bne.n	8005316 <USB_EPStartXfer+0x7d0>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005248:	b29b      	uxth	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800524e:	4413      	add	r3, r2
 8005250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	00da      	lsls	r2, r3, #3
 8005258:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800525a:	4413      	add	r3, r2
 800525c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005260:	667b      	str	r3, [r7, #100]	@ 0x64
 8005262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800526c:	b29a      	uxth	r2, r3
 800526e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <USB_EPStartXfer+0x74a>
 800527a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	b29b      	uxth	r3, r3
 8005280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005288:	b29a      	uxth	r2, r3
 800528a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	e05b      	b.n	8005348 <USB_EPStartXfer+0x802>
 8005290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005294:	2b3e      	cmp	r3, #62	@ 0x3e
 8005296:	d81c      	bhi.n	80052d2 <USB_EPStartXfer+0x78c>
 8005298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <USB_EPStartXfer+0x772>
 80052ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052b2:	3301      	adds	r3, #1
 80052b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29a      	uxth	r2, r3
 80052be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	029b      	lsls	r3, r3, #10
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	4313      	orrs	r3, r2
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ce:	801a      	strh	r2, [r3, #0]
 80052d0:	e03a      	b.n	8005348 <USB_EPStartXfer+0x802>
 80052d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d104      	bne.n	80052f2 <USB_EPStartXfer+0x7ac>
 80052e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052ec:	3b01      	subs	r3, #1
 80052ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	029b      	lsls	r3, r3, #10
 8005300:	b29b      	uxth	r3, r3
 8005302:	4313      	orrs	r3, r2
 8005304:	b29b      	uxth	r3, r3
 8005306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800530e:	b29a      	uxth	r2, r3
 8005310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	e018      	b.n	8005348 <USB_EPStartXfer+0x802>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d114      	bne.n	8005348 <USB_EPStartXfer+0x802>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005324:	b29b      	uxth	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800532a:	4413      	add	r3, r2
 800532c:	673b      	str	r3, [r7, #112]	@ 0x70
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	00da      	lsls	r2, r3, #3
 8005334:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005336:	4413      	add	r3, r2
 8005338:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800533c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800533e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005342:	b29a      	uxth	r2, r3
 8005344:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005346:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	895b      	ldrh	r3, [r3, #10]
 800534c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	6959      	ldr	r1, [r3, #20]
 8005354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005358:	b29b      	uxth	r3, r3
 800535a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fad5 	bl	800590e <USB_WritePMA>
 8005364:	e09e      	b.n	80054a4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	785b      	ldrb	r3, [r3, #1]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d16b      	bne.n	8005446 <USB_EPStartXfer+0x900>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005378:	b29b      	uxth	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800537e:	4413      	add	r3, r2
 8005380:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	00da      	lsls	r2, r3, #3
 8005388:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800538a:	4413      	add	r3, r2
 800538c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005390:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005392:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800539c:	b29a      	uxth	r2, r3
 800539e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <USB_EPStartXfer+0x87a>
 80053aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	e063      	b.n	8005488 <USB_EPStartXfer+0x942>
 80053c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80053c6:	d81c      	bhi.n	8005402 <USB_EPStartXfer+0x8bc>
 80053c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053cc:	085b      	lsrs	r3, r3, #1
 80053ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <USB_EPStartXfer+0x8a2>
 80053de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053e2:	3301      	adds	r3, #1
 80053e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	029b      	lsls	r3, r3, #10
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	4313      	orrs	r3, r2
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	e042      	b.n	8005488 <USB_EPStartXfer+0x942>
 8005402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800540c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	2b00      	cmp	r3, #0
 8005416:	d104      	bne.n	8005422 <USB_EPStartXfer+0x8dc>
 8005418:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800541c:	3b01      	subs	r3, #1
 800541e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005422:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29a      	uxth	r2, r3
 8005428:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800542c:	b29b      	uxth	r3, r3
 800542e:	029b      	lsls	r3, r3, #10
 8005430:	b29b      	uxth	r3, r3
 8005432:	4313      	orrs	r3, r2
 8005434:	b29b      	uxth	r3, r3
 8005436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800543a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543e:	b29a      	uxth	r2, r3
 8005440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005442:	801a      	strh	r2, [r3, #0]
 8005444:	e020      	b.n	8005488 <USB_EPStartXfer+0x942>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d11c      	bne.n	8005488 <USB_EPStartXfer+0x942>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800545a:	b29b      	uxth	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005462:	4413      	add	r3, r2
 8005464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	00da      	lsls	r2, r3, #3
 800546e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005472:	4413      	add	r3, r2
 8005474:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800547c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005480:	b29a      	uxth	r2, r3
 8005482:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005486:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	891b      	ldrh	r3, [r3, #8]
 800548c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6959      	ldr	r1, [r3, #20]
 8005494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005498:	b29b      	uxth	r3, r3
 800549a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa35 	bl	800590e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ba:	817b      	strh	r3, [r7, #10]
 80054bc:	897b      	ldrh	r3, [r7, #10]
 80054be:	f083 0310 	eor.w	r3, r3, #16
 80054c2:	817b      	strh	r3, [r7, #10]
 80054c4:	897b      	ldrh	r3, [r7, #10]
 80054c6:	f083 0320 	eor.w	r3, r3, #32
 80054ca:	817b      	strh	r3, [r7, #10]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	897b      	ldrh	r3, [r7, #10]
 80054d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8013      	strh	r3, [r2, #0]
 80054ec:	e0d5      	b.n	800569a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	7b1b      	ldrb	r3, [r3, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d156      	bne.n	80055a4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d122      	bne.n	8005544 <USB_EPStartXfer+0x9fe>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	78db      	ldrb	r3, [r3, #3]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d11e      	bne.n	8005544 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800552e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005532:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005536:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800553a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800553e:	b29b      	uxth	r3, r3
 8005540:	8013      	strh	r3, [r2, #0]
 8005542:	e01d      	b.n	8005580 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	441a      	add	r2, r3
 8005568:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800556c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005570:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005574:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800557c:	b29b      	uxth	r3, r3
 800557e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	699a      	ldr	r2, [r3, #24]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	429a      	cmp	r2, r3
 800558a:	d907      	bls.n	800559c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	699a      	ldr	r2, [r3, #24]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	1ad2      	subs	r2, r2, r3
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	619a      	str	r2, [r3, #24]
 800559a:	e054      	b.n	8005646 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2200      	movs	r2, #0
 80055a0:	619a      	str	r2, [r3, #24]
 80055a2:	e050      	b.n	8005646 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	78db      	ldrb	r3, [r3, #3]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d142      	bne.n	8005632 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d048      	beq.n	8005646 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80055c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80055c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <USB_EPStartXfer+0xa96>
 80055d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80055d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80055dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80055e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d12e      	bne.n	8005646 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80055e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80055ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d128      	bne.n	8005646 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	441a      	add	r2, r3
 8005618:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800561c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005620:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005628:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800562c:	b29b      	uxth	r3, r3
 800562e:	8013      	strh	r3, [r2, #0]
 8005630:	e009      	b.n	8005646 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	78db      	ldrb	r3, [r3, #3]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d103      	bne.n	8005642 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2200      	movs	r2, #0
 800563e:	619a      	str	r2, [r3, #24]
 8005640:	e001      	b.n	8005646 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e02a      	b.n	800569c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005660:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005664:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005668:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800566c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005670:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005674:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	37b0      	adds	r7, #176	@ 0xb0
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d020      	beq.n	80056f8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056cc:	81bb      	strh	r3, [r7, #12]
 80056ce:	89bb      	ldrh	r3, [r7, #12]
 80056d0:	f083 0310 	eor.w	r3, r3, #16
 80056d4:	81bb      	strh	r3, [r7, #12]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	441a      	add	r2, r3
 80056e0:	89bb      	ldrh	r3, [r7, #12]
 80056e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	8013      	strh	r3, [r2, #0]
 80056f6:	e01f      	b.n	8005738 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b29b      	uxth	r3, r3
 8005706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800570a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570e:	81fb      	strh	r3, [r7, #14]
 8005710:	89fb      	ldrh	r3, [r7, #14]
 8005712:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005716:	81fb      	strh	r3, [r7, #14]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	441a      	add	r2, r3
 8005722:	89fb      	ldrh	r3, [r7, #14]
 8005724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800572c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005734:	b29b      	uxth	r3, r3
 8005736:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005746:	b480      	push	{r7}
 8005748:	b087      	sub	sp, #28
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d04c      	beq.n	80057f2 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	823b      	strh	r3, [r7, #16]
 8005766:	8a3b      	ldrh	r3, [r7, #16]
 8005768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01b      	beq.n	80057a8 <USB_EPClearStall+0x62>
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005786:	81fb      	strh	r3, [r7, #14]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	441a      	add	r2, r3
 8005792:	89fb      	ldrh	r3, [r7, #14]
 8005794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800579c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	78db      	ldrb	r3, [r3, #3]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d06c      	beq.n	800588a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057c6:	81bb      	strh	r3, [r7, #12]
 80057c8:	89bb      	ldrh	r3, [r7, #12]
 80057ca:	f083 0320 	eor.w	r3, r3, #32
 80057ce:	81bb      	strh	r3, [r7, #12]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	89bb      	ldrh	r3, [r7, #12]
 80057dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	8013      	strh	r3, [r2, #0]
 80057f0:	e04b      	b.n	800588a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	82fb      	strh	r3, [r7, #22]
 8005800:	8afb      	ldrh	r3, [r7, #22]
 8005802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01b      	beq.n	8005842 <USB_EPClearStall+0xfc>
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005820:	82bb      	strh	r3, [r7, #20]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	441a      	add	r2, r3
 800582c:	8abb      	ldrh	r3, [r7, #20]
 800582e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800583a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583e:	b29b      	uxth	r3, r3
 8005840:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005858:	827b      	strh	r3, [r7, #18]
 800585a:	8a7b      	ldrh	r3, [r7, #18]
 800585c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005860:	827b      	strh	r3, [r7, #18]
 8005862:	8a7b      	ldrh	r3, [r7, #18]
 8005864:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005868:	827b      	strh	r3, [r7, #18]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	441a      	add	r2, r3
 8005874:	8a7b      	ldrh	r3, [r7, #18]
 8005876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800587a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800587e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005886:	b29b      	uxth	r3, r3
 8005888:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d103      	bne.n	80058b2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2280      	movs	r2, #128	@ 0x80
 80058ae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d8:	b29a      	uxth	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005900:	68fb      	ldr	r3, [r7, #12]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800590e:	b480      	push	{r7}
 8005910:	b08b      	sub	sp, #44	@ 0x2c
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	4611      	mov	r1, r2
 800591a:	461a      	mov	r2, r3
 800591c:	460b      	mov	r3, r1
 800591e:	80fb      	strh	r3, [r7, #6]
 8005920:	4613      	mov	r3, r2
 8005922:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005924:	88bb      	ldrh	r3, [r7, #4]
 8005926:	3301      	adds	r3, #1
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005934:	88fa      	ldrh	r2, [r7, #6]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800593e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
 8005944:	e01b      	b.n	800597e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	3301      	adds	r3, #1
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	b21a      	sxth	r2, r3
 8005956:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800595a:	4313      	orrs	r3, r2
 800595c:	b21b      	sxth	r3, r3
 800595e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	8a7a      	ldrh	r2, [r7, #18]
 8005964:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	3302      	adds	r3, #2
 800596a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	3301      	adds	r3, #1
 8005970:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	3301      	adds	r3, #1
 8005976:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597a:	3b01      	subs	r3, #1
 800597c:	627b      	str	r3, [r7, #36]	@ 0x24
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e0      	bne.n	8005946 <USB_WritePMA+0x38>
  }
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	372c      	adds	r7, #44	@ 0x2c
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005992:	b480      	push	{r7}
 8005994:	b08b      	sub	sp, #44	@ 0x2c
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	4611      	mov	r1, r2
 800599e:	461a      	mov	r2, r3
 80059a0:	460b      	mov	r3, r1
 80059a2:	80fb      	strh	r3, [r7, #6]
 80059a4:	4613      	mov	r3, r2
 80059a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80059a8:	88bb      	ldrh	r3, [r7, #4]
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80059b8:	88fa      	ldrh	r2, [r7, #6]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059c2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c8:	e018      	b.n	80059fc <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	3302      	adds	r3, #2
 80059d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	3301      	adds	r3, #1
 80059e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	0a1b      	lsrs	r3, r3, #8
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	3301      	adds	r3, #1
 80059f4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	3b01      	subs	r3, #1
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e3      	bne.n	80059ca <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005a02:	88bb      	ldrh	r3, [r7, #4]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	701a      	strb	r2, [r3, #0]
  }
}
 8005a1e:	bf00      	nop
 8005a20:	372c      	adds	r7, #44	@ 0x2c
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	460b      	mov	r3, r1
 8005a34:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a36:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005a3a:	f002 f8a3 	bl	8007b84 <USBD_static_malloc>
 8005a3e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d105      	bne.n	8005a52 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e066      	b.n	8005b20 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7c1b      	ldrb	r3, [r3, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d119      	bne.n	8005a96 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a66:	2202      	movs	r2, #2
 8005a68:	2181      	movs	r1, #129	@ 0x81
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f001 ff31 	bl	80078d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 ff27 	bl	80078d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2210      	movs	r2, #16
 8005a90:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8005a94:	e016      	b.n	8005ac4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a96:	2340      	movs	r3, #64	@ 0x40
 8005a98:	2202      	movs	r2, #2
 8005a9a:	2181      	movs	r1, #129	@ 0x81
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 ff18 	bl	80078d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005aa8:	2340      	movs	r3, #64	@ 0x40
 8005aaa:	2202      	movs	r2, #2
 8005aac:	2101      	movs	r1, #1
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 ff0f 	bl	80078d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2210      	movs	r2, #16
 8005ac0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	2182      	movs	r1, #130	@ 0x82
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f001 ff01 	bl	80078d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	7c1b      	ldrb	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b04:	2101      	movs	r1, #1
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 ffd2 	bl	8007ab0 <USBD_LL_PrepareReceive>
 8005b0c:	e007      	b.n	8005b1e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b14:	2340      	movs	r3, #64	@ 0x40
 8005b16:	2101      	movs	r1, #1
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 ffc9 	bl	8007ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b34:	2181      	movs	r1, #129	@ 0x81
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f001 fef1 	bl	800791e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b42:	2101      	movs	r1, #1
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 feea 	bl	800791e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b52:	2182      	movs	r1, #130	@ 0x82
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 fee2 	bl	800791e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00e      	beq.n	8005b92 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005b84:	4618      	mov	r0, r3
 8005b86:	f002 f80b 	bl	8007ba0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005bac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e0af      	b.n	8005d24 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d03f      	beq.n	8005c50 <USBD_CDC_Setup+0xb4>
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	f040 809f 	bne.w	8005d14 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	88db      	ldrh	r3, [r3, #6]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d02e      	beq.n	8005c3c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	b25b      	sxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da16      	bge.n	8005c16 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005bf4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	88d2      	ldrh	r2, [r2, #6]
 8005bfa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	88db      	ldrh	r3, [r3, #6]
 8005c00:	2b07      	cmp	r3, #7
 8005c02:	bf28      	it	cs
 8005c04:	2307      	movcs	r3, #7
 8005c06:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	89fa      	ldrh	r2, [r7, #14]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 fa9d 	bl	800714e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005c14:	e085      	b.n	8005d22 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	785a      	ldrb	r2, [r3, #1]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	88db      	ldrh	r3, [r3, #6]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005c2c:	6939      	ldr	r1, [r7, #16]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	88db      	ldrh	r3, [r3, #6]
 8005c32:	461a      	mov	r2, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fab6 	bl	80071a6 <USBD_CtlPrepareRx>
      break;
 8005c3a:	e072      	b.n	8005d22 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	7850      	ldrb	r0, [r2, #1]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	4798      	blx	r3
      break;
 8005c4e:	e068      	b.n	8005d22 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	2b0b      	cmp	r3, #11
 8005c56:	d852      	bhi.n	8005cfe <USBD_CDC_Setup+0x162>
 8005c58:	a201      	add	r2, pc, #4	@ (adr r2, 8005c60 <USBD_CDC_Setup+0xc4>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005c91 	.word	0x08005c91
 8005c64:	08005d0d 	.word	0x08005d0d
 8005c68:	08005cff 	.word	0x08005cff
 8005c6c:	08005cff 	.word	0x08005cff
 8005c70:	08005cff 	.word	0x08005cff
 8005c74:	08005cff 	.word	0x08005cff
 8005c78:	08005cff 	.word	0x08005cff
 8005c7c:	08005cff 	.word	0x08005cff
 8005c80:	08005cff 	.word	0x08005cff
 8005c84:	08005cff 	.word	0x08005cff
 8005c88:	08005cbb 	.word	0x08005cbb
 8005c8c:	08005ce5 	.word	0x08005ce5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d107      	bne.n	8005cac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c9c:	f107 030a 	add.w	r3, r7, #10
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 fa52 	bl	800714e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005caa:	e032      	b.n	8005d12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 f9dc 	bl	800706c <USBD_CtlError>
            ret = USBD_FAIL;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	75fb      	strb	r3, [r7, #23]
          break;
 8005cb8:	e02b      	b.n	8005d12 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d107      	bne.n	8005cd6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cc6:	f107 030d 	add.w	r3, r7, #13
 8005cca:	2201      	movs	r2, #1
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f001 fa3d 	bl	800714e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cd4:	e01d      	b.n	8005d12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 f9c7 	bl	800706c <USBD_CtlError>
            ret = USBD_FAIL;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ce2:	e016      	b.n	8005d12 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d00f      	beq.n	8005d10 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f001 f9ba 	bl	800706c <USBD_CtlError>
            ret = USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005cfc:	e008      	b.n	8005d10 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f001 f9b3 	bl	800706c <USBD_CtlError>
          ret = USBD_FAIL;
 8005d06:	2303      	movs	r3, #3
 8005d08:	75fb      	strb	r3, [r7, #23]
          break;
 8005d0a:	e002      	b.n	8005d12 <USBD_CDC_Setup+0x176>
          break;
 8005d0c:	bf00      	nop
 8005d0e:	e008      	b.n	8005d22 <USBD_CDC_Setup+0x186>
          break;
 8005d10:	bf00      	nop
      }
      break;
 8005d12:	e006      	b.n	8005d22 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f001 f9a8 	bl	800706c <USBD_CtlError>
      ret = USBD_FAIL;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d20:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8005d3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e04f      	b.n	8005dee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005d54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d56:	78fa      	ldrb	r2, [r7, #3]
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	3318      	adds	r3, #24
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d029      	beq.n	8005dc0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	3318      	adds	r3, #24
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	78f9      	ldrb	r1, [r7, #3]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	460b      	mov	r3, r1
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4403      	add	r3, r0
 8005d8c:	3320      	adds	r3, #32
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d110      	bne.n	8005dc0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	3318      	adds	r3, #24
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005db2:	78f9      	ldrb	r1, [r7, #3]
 8005db4:	2300      	movs	r3, #0
 8005db6:	2200      	movs	r2, #0
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 fe58 	bl	8007a6e <USBD_LL_Transmit>
 8005dbe:	e015      	b.n	8005dec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005e08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e015      	b.n	8005e44 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f001 fe68 	bl	8007af2 <USBD_LL_GetRxDataSize>
 8005e22:	4602      	mov	r2, r0
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005e5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e01a      	b.n	8005e9c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d014      	beq.n	8005e9a <USBD_CDC_EP0_RxReady+0x4e>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005e76:	2bff      	cmp	r3, #255	@ 0xff
 8005e78:	d00f      	beq.n	8005e9a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8005e88:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	22ff      	movs	r2, #255	@ 0xff
 8005e96:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2243      	movs	r2, #67	@ 0x43
 8005eb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005eb2:	4b03      	ldr	r3, [pc, #12]	@ (8005ec0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	20000094 	.word	0x20000094

08005ec4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2243      	movs	r2, #67	@ 0x43
 8005ed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005ed2:	4b03      	ldr	r3, [pc, #12]	@ (8005ee0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	20000050 	.word	0x20000050

08005ee4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2243      	movs	r2, #67	@ 0x43
 8005ef0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005ef2:	4b03      	ldr	r3, [pc, #12]	@ (8005f00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	200000d8 	.word	0x200000d8

08005f04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	220a      	movs	r2, #10
 8005f10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f12:	4b03      	ldr	r3, [pc, #12]	@ (8005f20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	2000000c 	.word	0x2000000c

08005f24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e004      	b.n	8005f42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b087      	sub	sp, #28
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f60:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e008      	b.n	8005f7e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e004      	b.n	8005fb0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005fca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e016      	b.n	8006008 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	7c1b      	ldrb	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fe8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fec:	2101      	movs	r1, #1
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f001 fd5e 	bl	8007ab0 <USBD_LL_PrepareReceive>
 8005ff4:	e007      	b.n	8006006 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ffc:	2340      	movs	r3, #64	@ 0x40
 8005ffe:	2101      	movs	r1, #1
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 fd55 	bl	8007ab0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	4613      	mov	r3, r2
 800601c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006024:	2303      	movs	r3, #3
 8006026:	e01f      	b.n	8006068 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	79fa      	ldrb	r2, [r7, #7]
 800605a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f001 fbbd 	bl	80077dc <USBD_LL_Init>
 8006062:	4603      	mov	r3, r0
 8006064:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006066:	7dfb      	ldrb	r3, [r7, #23]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006084:	2303      	movs	r3, #3
 8006086:	e016      	b.n	80060b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00b      	beq.n	80060b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a4:	f107 020e 	add.w	r2, r7, #14
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
 80060ac:	4602      	mov	r2, r0
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 fbe8 	bl	800789c <USBD_LL_Start>
 80060cc:	4603      	mov	r3, r0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80060f8:	2303      	movs	r3, #3
 80060fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d009      	beq.n	800611a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	4611      	mov	r1, r2
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
 8006116:	4603      	mov	r3, r0
 8006118:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	78fa      	ldrb	r2, [r7, #3]
 8006144:	4611      	mov	r1, r2
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
  }

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 ff46 	bl	8006ff8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800617a:	461a      	mov	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006188:	f003 031f 	and.w	r3, r3, #31
 800618c:	2b02      	cmp	r3, #2
 800618e:	d01a      	beq.n	80061c6 <USBD_LL_SetupStage+0x72>
 8006190:	2b02      	cmp	r3, #2
 8006192:	d822      	bhi.n	80061da <USBD_LL_SetupStage+0x86>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <USBD_LL_SetupStage+0x4a>
 8006198:	2b01      	cmp	r3, #1
 800619a:	d00a      	beq.n	80061b2 <USBD_LL_SetupStage+0x5e>
 800619c:	e01d      	b.n	80061da <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f9ee 	bl	8006588 <USBD_StdDevReq>
 80061ac:	4603      	mov	r3, r0
 80061ae:	73fb      	strb	r3, [r7, #15]
      break;
 80061b0:	e020      	b.n	80061f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fa52 	bl	8006664 <USBD_StdItfReq>
 80061c0:	4603      	mov	r3, r0
 80061c2:	73fb      	strb	r3, [r7, #15]
      break;
 80061c4:	e016      	b.n	80061f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fa91 	bl	80066f6 <USBD_StdEPReq>
 80061d4:	4603      	mov	r3, r0
 80061d6:	73fb      	strb	r3, [r7, #15]
      break;
 80061d8:	e00c      	b.n	80061f4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80061e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 fbb7 	bl	800795c <USBD_LL_StallEP>
 80061ee:	4603      	mov	r3, r0
 80061f0:	73fb      	strb	r3, [r7, #15]
      break;
 80061f2:	bf00      	nop
  }

  return ret;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	460b      	mov	r3, r1
 8006208:	607a      	str	r2, [r7, #4]
 800620a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800620c:	7afb      	ldrb	r3, [r7, #11]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d138      	bne.n	8006284 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006218:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006220:	2b03      	cmp	r3, #3
 8006222:	d14a      	bne.n	80062ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	429a      	cmp	r2, r3
 800622e:	d913      	bls.n	8006258 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	1ad2      	subs	r2, r2, r3
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	4293      	cmp	r3, r2
 8006248:	bf28      	it	cs
 800624a:	4613      	movcs	r3, r2
 800624c:	461a      	mov	r2, r3
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 ffc5 	bl	80071e0 <USBD_CtlContinueRx>
 8006256:	e030      	b.n	80062ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b03      	cmp	r3, #3
 8006262:	d10b      	bne.n	800627c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 ffc0 	bl	8007202 <USBD_CtlSendStatus>
 8006282:	e01a      	b.n	80062ba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b03      	cmp	r3, #3
 800628e:	d114      	bne.n	80062ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00e      	beq.n	80062ba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	7afa      	ldrb	r2, [r7, #11]
 80062a6:	4611      	mov	r1, r2
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	4798      	blx	r3
 80062ac:	4603      	mov	r3, r0
 80062ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	e000      	b.n	80062bc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	460b      	mov	r3, r1
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062d2:	7afb      	ldrb	r3, [r7, #11]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d16b      	bne.n	80063b0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3314      	adds	r3, #20
 80062dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d156      	bne.n	8006396 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d914      	bls.n	800631e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	1ad2      	subs	r2, r2, r3
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	461a      	mov	r2, r3
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 ff3a 	bl	8007184 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006310:	2300      	movs	r3, #0
 8006312:	2200      	movs	r2, #0
 8006314:	2100      	movs	r1, #0
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f001 fbca 	bl	8007ab0 <USBD_LL_PrepareReceive>
 800631c:	e03b      	b.n	8006396 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	d11c      	bne.n	8006364 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006332:	429a      	cmp	r2, r3
 8006334:	d316      	bcc.n	8006364 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006340:	429a      	cmp	r2, r3
 8006342:	d20f      	bcs.n	8006364 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006344:	2200      	movs	r2, #0
 8006346:	2100      	movs	r1, #0
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 ff1b 	bl	8007184 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006356:	2300      	movs	r3, #0
 8006358:	2200      	movs	r2, #0
 800635a:	2100      	movs	r1, #0
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f001 fba7 	bl	8007ab0 <USBD_LL_PrepareReceive>
 8006362:	e018      	b.n	8006396 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b03      	cmp	r3, #3
 800636e:	d10b      	bne.n	8006388 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006388:	2180      	movs	r1, #128	@ 0x80
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f001 fae6 	bl	800795c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 ff49 	bl	8007228 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800639c:	2b01      	cmp	r3, #1
 800639e:	d122      	bne.n	80063e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7ff fe98 	bl	80060d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80063ae:	e01a      	b.n	80063e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d114      	bne.n	80063e6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00e      	beq.n	80063e6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	7afa      	ldrb	r2, [r7, #11]
 80063d2:	4611      	mov	r1, r2
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	4798      	blx	r3
 80063d8:	4603      	mov	r3, r0
 80063da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	e000      	b.n	80063e8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006420:	2303      	movs	r3, #3
 8006422:	e02f      	b.n	8006484 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00f      	beq.n	800644e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6852      	ldr	r2, [r2, #4]
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	4611      	mov	r1, r2
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800644e:	2340      	movs	r3, #64	@ 0x40
 8006450:	2200      	movs	r2, #0
 8006452:	2100      	movs	r1, #0
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 fa3c 	bl	80078d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2240      	movs	r2, #64	@ 0x40
 8006466:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800646a:	2340      	movs	r3, #64	@ 0x40
 800646c:	2200      	movs	r2, #0
 800646e:	2180      	movs	r1, #128	@ 0x80
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 fa2e 	bl	80078d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2240      	movs	r2, #64	@ 0x40
 8006480:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2204      	movs	r2, #4
 80064c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d106      	bne.n	80064fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800651a:	2303      	movs	r3, #3
 800651c:	e012      	b.n	8006544 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b03      	cmp	r3, #3
 8006528:	d10b      	bne.n	8006542 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	3301      	adds	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800656a:	8a3b      	ldrh	r3, [r7, #16]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	b21a      	sxth	r2, r3
 8006570:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006574:	4313      	orrs	r3, r2
 8006576:	b21b      	sxth	r3, r3
 8006578:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800657a:	89fb      	ldrh	r3, [r7, #14]
}
 800657c:	4618      	mov	r0, r3
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800659e:	2b40      	cmp	r3, #64	@ 0x40
 80065a0:	d005      	beq.n	80065ae <USBD_StdDevReq+0x26>
 80065a2:	2b40      	cmp	r3, #64	@ 0x40
 80065a4:	d853      	bhi.n	800664e <USBD_StdDevReq+0xc6>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00b      	beq.n	80065c2 <USBD_StdDevReq+0x3a>
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d14f      	bne.n	800664e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]
      break;
 80065c0:	e04a      	b.n	8006658 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	2b09      	cmp	r3, #9
 80065c8:	d83b      	bhi.n	8006642 <USBD_StdDevReq+0xba>
 80065ca:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <USBD_StdDevReq+0x48>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	08006625 	.word	0x08006625
 80065d4:	08006639 	.word	0x08006639
 80065d8:	08006643 	.word	0x08006643
 80065dc:	0800662f 	.word	0x0800662f
 80065e0:	08006643 	.word	0x08006643
 80065e4:	08006603 	.word	0x08006603
 80065e8:	080065f9 	.word	0x080065f9
 80065ec:	08006643 	.word	0x08006643
 80065f0:	0800661b 	.word	0x0800661b
 80065f4:	0800660d 	.word	0x0800660d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f9de 	bl	80069bc <USBD_GetDescriptor>
          break;
 8006600:	e024      	b.n	800664c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fb6d 	bl	8006ce4 <USBD_SetAddress>
          break;
 800660a:	e01f      	b.n	800664c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fbac 	bl	8006d6c <USBD_SetConfig>
 8006614:	4603      	mov	r3, r0
 8006616:	73fb      	strb	r3, [r7, #15]
          break;
 8006618:	e018      	b.n	800664c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fc4b 	bl	8006eb8 <USBD_GetConfig>
          break;
 8006622:	e013      	b.n	800664c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fc7c 	bl	8006f24 <USBD_GetStatus>
          break;
 800662c:	e00e      	b.n	800664c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fcab 	bl	8006f8c <USBD_SetFeature>
          break;
 8006636:	e009      	b.n	800664c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fcba 	bl	8006fb4 <USBD_ClrFeature>
          break;
 8006640:	e004      	b.n	800664c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fd11 	bl	800706c <USBD_CtlError>
          break;
 800664a:	bf00      	nop
      }
      break;
 800664c:	e004      	b.n	8006658 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fd0b 	bl	800706c <USBD_CtlError>
      break;
 8006656:	bf00      	nop
  }

  return ret;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop

08006664 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800667a:	2b40      	cmp	r3, #64	@ 0x40
 800667c:	d005      	beq.n	800668a <USBD_StdItfReq+0x26>
 800667e:	2b40      	cmp	r3, #64	@ 0x40
 8006680:	d82f      	bhi.n	80066e2 <USBD_StdItfReq+0x7e>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <USBD_StdItfReq+0x26>
 8006686:	2b20      	cmp	r3, #32
 8006688:	d12b      	bne.n	80066e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006690:	b2db      	uxtb	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	2b02      	cmp	r3, #2
 8006696:	d81d      	bhi.n	80066d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	889b      	ldrh	r3, [r3, #4]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d813      	bhi.n	80066ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	88db      	ldrh	r3, [r3, #6]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d110      	bne.n	80066de <USBD_StdItfReq+0x7a>
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10d      	bne.n	80066de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fd9d 	bl	8007202 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80066c8:	e009      	b.n	80066de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fccd 	bl	800706c <USBD_CtlError>
          break;
 80066d2:	e004      	b.n	80066de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fcc8 	bl	800706c <USBD_CtlError>
          break;
 80066dc:	e000      	b.n	80066e0 <USBD_StdItfReq+0x7c>
          break;
 80066de:	bf00      	nop
      }
      break;
 80066e0:	e004      	b.n	80066ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fcc1 	bl	800706c <USBD_CtlError>
      break;
 80066ea:	bf00      	nop
  }

  return ret;
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	889b      	ldrh	r3, [r3, #4]
 8006708:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006712:	2b40      	cmp	r3, #64	@ 0x40
 8006714:	d007      	beq.n	8006726 <USBD_StdEPReq+0x30>
 8006716:	2b40      	cmp	r3, #64	@ 0x40
 8006718:	f200 8145 	bhi.w	80069a6 <USBD_StdEPReq+0x2b0>
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00c      	beq.n	800673a <USBD_StdEPReq+0x44>
 8006720:	2b20      	cmp	r3, #32
 8006722:	f040 8140 	bne.w	80069a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	4798      	blx	r3
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
      break;
 8006738:	e13a      	b.n	80069b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	2b03      	cmp	r3, #3
 8006740:	d007      	beq.n	8006752 <USBD_StdEPReq+0x5c>
 8006742:	2b03      	cmp	r3, #3
 8006744:	f300 8129 	bgt.w	800699a <USBD_StdEPReq+0x2a4>
 8006748:	2b00      	cmp	r3, #0
 800674a:	d07f      	beq.n	800684c <USBD_StdEPReq+0x156>
 800674c:	2b01      	cmp	r3, #1
 800674e:	d03c      	beq.n	80067ca <USBD_StdEPReq+0xd4>
 8006750:	e123      	b.n	800699a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d002      	beq.n	8006764 <USBD_StdEPReq+0x6e>
 800675e:	2b03      	cmp	r3, #3
 8006760:	d016      	beq.n	8006790 <USBD_StdEPReq+0x9a>
 8006762:	e02c      	b.n	80067be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00d      	beq.n	8006786 <USBD_StdEPReq+0x90>
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	2b80      	cmp	r3, #128	@ 0x80
 800676e:	d00a      	beq.n	8006786 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 f8f1 	bl	800795c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800677a:	2180      	movs	r1, #128	@ 0x80
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f8ed 	bl	800795c <USBD_LL_StallEP>
 8006782:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006784:	e020      	b.n	80067c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fc6f 	bl	800706c <USBD_CtlError>
              break;
 800678e:	e01b      	b.n	80067c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	885b      	ldrh	r3, [r3, #2]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10e      	bne.n	80067b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00b      	beq.n	80067b6 <USBD_StdEPReq+0xc0>
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	2b80      	cmp	r3, #128	@ 0x80
 80067a2:	d008      	beq.n	80067b6 <USBD_StdEPReq+0xc0>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	88db      	ldrh	r3, [r3, #6]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d104      	bne.n	80067b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 f8d3 	bl	800795c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fd23 	bl	8007202 <USBD_CtlSendStatus>

              break;
 80067bc:	e004      	b.n	80067c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fc53 	bl	800706c <USBD_CtlError>
              break;
 80067c6:	bf00      	nop
          }
          break;
 80067c8:	e0ec      	b.n	80069a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d002      	beq.n	80067dc <USBD_StdEPReq+0xe6>
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d016      	beq.n	8006808 <USBD_StdEPReq+0x112>
 80067da:	e030      	b.n	800683e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00d      	beq.n	80067fe <USBD_StdEPReq+0x108>
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	2b80      	cmp	r3, #128	@ 0x80
 80067e6:	d00a      	beq.n	80067fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 f8b5 	bl	800795c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067f2:	2180      	movs	r1, #128	@ 0x80
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 f8b1 	bl	800795c <USBD_LL_StallEP>
 80067fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067fc:	e025      	b.n	800684a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fc33 	bl	800706c <USBD_CtlError>
              break;
 8006806:	e020      	b.n	800684a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	885b      	ldrh	r3, [r3, #2]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d11b      	bne.n	8006848 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800681a:	7bbb      	ldrb	r3, [r7, #14]
 800681c:	4619      	mov	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 f8bb 	bl	800799a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fcec 	bl	8007202 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	4798      	blx	r3
 8006838:	4603      	mov	r3, r0
 800683a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800683c:	e004      	b.n	8006848 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fc13 	bl	800706c <USBD_CtlError>
              break;
 8006846:	e000      	b.n	800684a <USBD_StdEPReq+0x154>
              break;
 8006848:	bf00      	nop
          }
          break;
 800684a:	e0ab      	b.n	80069a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d002      	beq.n	800685e <USBD_StdEPReq+0x168>
 8006858:	2b03      	cmp	r3, #3
 800685a:	d032      	beq.n	80068c2 <USBD_StdEPReq+0x1cc>
 800685c:	e097      	b.n	800698e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800685e:	7bbb      	ldrb	r3, [r7, #14]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <USBD_StdEPReq+0x17e>
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	2b80      	cmp	r3, #128	@ 0x80
 8006868:	d004      	beq.n	8006874 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fbfd 	bl	800706c <USBD_CtlError>
                break;
 8006872:	e091      	b.n	8006998 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006878:	2b00      	cmp	r3, #0
 800687a:	da0b      	bge.n	8006894 <USBD_StdEPReq+0x19e>
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	3310      	adds	r3, #16
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	4413      	add	r3, r2
 8006890:	3304      	adds	r3, #4
 8006892:	e00b      	b.n	80068ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	4413      	add	r3, r2
 80068aa:	3304      	adds	r3, #4
 80068ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2202      	movs	r2, #2
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fc47 	bl	800714e <USBD_CtlSendData>
              break;
 80068c0:	e06a      	b.n	8006998 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da11      	bge.n	80068ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
 80068cc:	f003 020f 	and.w	r2, r3, #15
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	3324      	adds	r3, #36	@ 0x24
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d117      	bne.n	8006914 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fbc0 	bl	800706c <USBD_CtlError>
                  break;
 80068ec:	e054      	b.n	8006998 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	f003 020f 	and.w	r2, r3, #15
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d104      	bne.n	8006914 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fbad 	bl	800706c <USBD_CtlError>
                  break;
 8006912:	e041      	b.n	8006998 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006918:	2b00      	cmp	r3, #0
 800691a:	da0b      	bge.n	8006934 <USBD_StdEPReq+0x23e>
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	3310      	adds	r3, #16
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	4413      	add	r3, r2
 8006930:	3304      	adds	r3, #4
 8006932:	e00b      	b.n	800694c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006934:	7bbb      	ldrb	r3, [r7, #14]
 8006936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	4413      	add	r3, r2
 800694a:	3304      	adds	r3, #4
 800694c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800694e:	7bbb      	ldrb	r3, [r7, #14]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <USBD_StdEPReq+0x264>
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	2b80      	cmp	r3, #128	@ 0x80
 8006958:	d103      	bne.n	8006962 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	e00e      	b.n	8006980 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 f836 	bl	80079d8 <USBD_LL_IsStallEP>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2201      	movs	r2, #1
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	e002      	b.n	8006980 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2202      	movs	r2, #2
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fbe1 	bl	800714e <USBD_CtlSendData>
              break;
 800698c:	e004      	b.n	8006998 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fb6b 	bl	800706c <USBD_CtlError>
              break;
 8006996:	bf00      	nop
          }
          break;
 8006998:	e004      	b.n	80069a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fb65 	bl	800706c <USBD_CtlError>
          break;
 80069a2:	bf00      	nop
      }
      break;
 80069a4:	e004      	b.n	80069b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fb5f 	bl	800706c <USBD_CtlError>
      break;
 80069ae:	bf00      	nop
  }

  return ret;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	885b      	ldrh	r3, [r3, #2]
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	2b0e      	cmp	r3, #14
 80069de:	f200 8152 	bhi.w	8006c86 <USBD_GetDescriptor+0x2ca>
 80069e2:	a201      	add	r2, pc, #4	@ (adr r2, 80069e8 <USBD_GetDescriptor+0x2c>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a59 	.word	0x08006a59
 80069ec:	08006a71 	.word	0x08006a71
 80069f0:	08006ab1 	.word	0x08006ab1
 80069f4:	08006c87 	.word	0x08006c87
 80069f8:	08006c87 	.word	0x08006c87
 80069fc:	08006c27 	.word	0x08006c27
 8006a00:	08006c53 	.word	0x08006c53
 8006a04:	08006c87 	.word	0x08006c87
 8006a08:	08006c87 	.word	0x08006c87
 8006a0c:	08006c87 	.word	0x08006c87
 8006a10:	08006c87 	.word	0x08006c87
 8006a14:	08006c87 	.word	0x08006c87
 8006a18:	08006c87 	.word	0x08006c87
 8006a1c:	08006c87 	.word	0x08006c87
 8006a20:	08006a25 	.word	0x08006a25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	7c12      	ldrb	r2, [r2, #16]
 8006a3c:	f107 0108 	add.w	r1, r7, #8
 8006a40:	4610      	mov	r0, r2
 8006a42:	4798      	blx	r3
 8006a44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a46:	e126      	b.n	8006c96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fb0e 	bl	800706c <USBD_CtlError>
        err++;
 8006a50:	7afb      	ldrb	r3, [r7, #11]
 8006a52:	3301      	adds	r3, #1
 8006a54:	72fb      	strb	r3, [r7, #11]
      break;
 8006a56:	e11e      	b.n	8006c96 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	7c12      	ldrb	r2, [r2, #16]
 8006a64:	f107 0108 	add.w	r1, r7, #8
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
 8006a6c:	60f8      	str	r0, [r7, #12]
      break;
 8006a6e:	e112      	b.n	8006c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7c1b      	ldrb	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10d      	bne.n	8006a94 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a80:	f107 0208 	add.w	r2, r7, #8
 8006a84:	4610      	mov	r0, r2
 8006a86:	4798      	blx	r3
 8006a88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	2202      	movs	r2, #2
 8006a90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a92:	e100      	b.n	8006c96 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9c:	f107 0208 	add.w	r2, r7, #8
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4798      	blx	r3
 8006aa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	2202      	movs	r2, #2
 8006aac:	701a      	strb	r2, [r3, #0]
      break;
 8006aae:	e0f2      	b.n	8006c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	885b      	ldrh	r3, [r3, #2]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b05      	cmp	r3, #5
 8006ab8:	f200 80ac 	bhi.w	8006c14 <USBD_GetDescriptor+0x258>
 8006abc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac4 <USBD_GetDescriptor+0x108>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006add 	.word	0x08006add
 8006ac8:	08006b11 	.word	0x08006b11
 8006acc:	08006b45 	.word	0x08006b45
 8006ad0:	08006b79 	.word	0x08006b79
 8006ad4:	08006bad 	.word	0x08006bad
 8006ad8:	08006be1 	.word	0x08006be1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	7c12      	ldrb	r2, [r2, #16]
 8006af4:	f107 0108 	add.w	r1, r7, #8
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006afe:	e091      	b.n	8006c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fab2 	bl	800706c <USBD_CtlError>
            err++;
 8006b08:	7afb      	ldrb	r3, [r7, #11]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b0e:	e089      	b.n	8006c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	7c12      	ldrb	r2, [r2, #16]
 8006b28:	f107 0108 	add.w	r1, r7, #8
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4798      	blx	r3
 8006b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b32:	e077      	b.n	8006c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa98 	bl	800706c <USBD_CtlError>
            err++;
 8006b3c:	7afb      	ldrb	r3, [r7, #11]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	72fb      	strb	r3, [r7, #11]
          break;
 8006b42:	e06f      	b.n	8006c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00b      	beq.n	8006b68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	7c12      	ldrb	r2, [r2, #16]
 8006b5c:	f107 0108 	add.w	r1, r7, #8
 8006b60:	4610      	mov	r0, r2
 8006b62:	4798      	blx	r3
 8006b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b66:	e05d      	b.n	8006c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa7e 	bl	800706c <USBD_CtlError>
            err++;
 8006b70:	7afb      	ldrb	r3, [r7, #11]
 8006b72:	3301      	adds	r3, #1
 8006b74:	72fb      	strb	r3, [r7, #11]
          break;
 8006b76:	e055      	b.n	8006c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	7c12      	ldrb	r2, [r2, #16]
 8006b90:	f107 0108 	add.w	r1, r7, #8
 8006b94:	4610      	mov	r0, r2
 8006b96:	4798      	blx	r3
 8006b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b9a:	e043      	b.n	8006c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa64 	bl	800706c <USBD_CtlError>
            err++;
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8006baa:	e03b      	b.n	8006c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	7c12      	ldrb	r2, [r2, #16]
 8006bc4:	f107 0108 	add.w	r1, r7, #8
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4798      	blx	r3
 8006bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bce:	e029      	b.n	8006c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa4a 	bl	800706c <USBD_CtlError>
            err++;
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bde:	e021      	b.n	8006c24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00b      	beq.n	8006c04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	7c12      	ldrb	r2, [r2, #16]
 8006bf8:	f107 0108 	add.w	r1, r7, #8
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
 8006c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c02:	e00f      	b.n	8006c24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa30 	bl	800706c <USBD_CtlError>
            err++;
 8006c0c:	7afb      	ldrb	r3, [r7, #11]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	72fb      	strb	r3, [r7, #11]
          break;
 8006c12:	e007      	b.n	8006c24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa28 	bl	800706c <USBD_CtlError>
          err++;
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006c22:	bf00      	nop
      }
      break;
 8006c24:	e037      	b.n	8006c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7c1b      	ldrb	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d109      	bne.n	8006c42 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c36:	f107 0208 	add.w	r2, r7, #8
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	4798      	blx	r3
 8006c3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c40:	e029      	b.n	8006c96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fa11 	bl	800706c <USBD_CtlError>
        err++;
 8006c4a:	7afb      	ldrb	r3, [r7, #11]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c50:	e021      	b.n	8006c96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	7c1b      	ldrb	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10d      	bne.n	8006c76 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c62:	f107 0208 	add.w	r2, r7, #8
 8006c66:	4610      	mov	r0, r2
 8006c68:	4798      	blx	r3
 8006c6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	2207      	movs	r2, #7
 8006c72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c74:	e00f      	b.n	8006c96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f9f7 	bl	800706c <USBD_CtlError>
        err++;
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	3301      	adds	r3, #1
 8006c82:	72fb      	strb	r3, [r7, #11]
      break;
 8006c84:	e007      	b.n	8006c96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f9ef 	bl	800706c <USBD_CtlError>
      err++;
 8006c8e:	7afb      	ldrb	r3, [r7, #11]
 8006c90:	3301      	adds	r3, #1
 8006c92:	72fb      	strb	r3, [r7, #11]
      break;
 8006c94:	bf00      	nop
  }

  if (err != 0U)
 8006c96:	7afb      	ldrb	r3, [r7, #11]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11e      	bne.n	8006cda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	88db      	ldrh	r3, [r3, #6]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d016      	beq.n	8006cd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006ca4:	893b      	ldrh	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00e      	beq.n	8006cc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	88da      	ldrh	r2, [r3, #6]
 8006cae:	893b      	ldrh	r3, [r7, #8]
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	bf28      	it	cs
 8006cb4:	4613      	movcs	r3, r2
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006cba:	893b      	ldrh	r3, [r7, #8]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fa44 	bl	800714e <USBD_CtlSendData>
 8006cc6:	e009      	b.n	8006cdc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f9ce 	bl	800706c <USBD_CtlError>
 8006cd0:	e004      	b.n	8006cdc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa95 	bl	8007202 <USBD_CtlSendStatus>
 8006cd8:	e000      	b.n	8006cdc <USBD_GetDescriptor+0x320>
    return;
 8006cda:	bf00      	nop
  }
}
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop

08006ce4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	889b      	ldrh	r3, [r3, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d131      	bne.n	8006d5a <USBD_SetAddress+0x76>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	88db      	ldrh	r3, [r3, #6]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d12d      	bne.n	8006d5a <USBD_SetAddress+0x76>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	885b      	ldrh	r3, [r3, #2]
 8006d02:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d04:	d829      	bhi.n	8006d5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	885b      	ldrh	r3, [r3, #2]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d104      	bne.n	8006d28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f9a3 	bl	800706c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d26:	e01d      	b.n	8006d64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7bfa      	ldrb	r2, [r7, #15]
 8006d2c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fe7b 	bl	8007a30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fa61 	bl	8007202 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4e:	e009      	b.n	8006d64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d58:	e004      	b.n	8006d64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f985 	bl	800706c <USBD_CtlError>
  }
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	885b      	ldrh	r3, [r3, #2]
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	4b4c      	ldr	r3, [pc, #304]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006d82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d84:	4b4b      	ldr	r3, [pc, #300]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d905      	bls.n	8006d98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f96c 	bl	800706c <USBD_CtlError>
    return USBD_FAIL;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e088      	b.n	8006eaa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d002      	beq.n	8006daa <USBD_SetConfig+0x3e>
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d025      	beq.n	8006df4 <USBD_SetConfig+0x88>
 8006da8:	e071      	b.n	8006e8e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006daa:	4b42      	ldr	r3, [pc, #264]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d01c      	beq.n	8006dec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006db2:	4b40      	ldr	r3, [pc, #256]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff f992 	bl	80060ec <USBD_SetClassConfig>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f949 	bl	800706c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006dda:	e065      	b.n	8006ea8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fa10 	bl	8007202 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2203      	movs	r2, #3
 8006de6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006dea:	e05d      	b.n	8006ea8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fa08 	bl	8007202 <USBD_CtlSendStatus>
      break;
 8006df2:	e059      	b.n	8006ea8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006df4:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d112      	bne.n	8006e22 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006e04:	4b2b      	ldr	r3, [pc, #172]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e0e:	4b29      	ldr	r3, [pc, #164]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff f985 	bl	8006124 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f9f1 	bl	8007202 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e20:	e042      	b.n	8006ea8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006e22:	4b24      	ldr	r3, [pc, #144]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d02a      	beq.n	8006e86 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff f973 	bl	8006124 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e48:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff f94c 	bl	80060ec <USBD_SetClassConfig>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00f      	beq.n	8006e7e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f903 	bl	800706c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff f958 	bl	8006124 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006e7c:	e014      	b.n	8006ea8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f9bf 	bl	8007202 <USBD_CtlSendStatus>
      break;
 8006e84:	e010      	b.n	8006ea8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f9bb 	bl	8007202 <USBD_CtlSendStatus>
      break;
 8006e8c:	e00c      	b.n	8006ea8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f8eb 	bl	800706c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e96:	4b07      	ldr	r3, [pc, #28]	@ (8006eb4 <USBD_SetConfig+0x148>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff f941 	bl	8006124 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea6:	bf00      	nop
  }

  return ret;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	2000025c 	.word	0x2000025c

08006eb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	88db      	ldrh	r3, [r3, #6]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d004      	beq.n	8006ed4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f8cd 	bl	800706c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ed2:	e023      	b.n	8006f1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	dc02      	bgt.n	8006ee6 <USBD_GetConfig+0x2e>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	dc03      	bgt.n	8006eec <USBD_GetConfig+0x34>
 8006ee4:	e015      	b.n	8006f12 <USBD_GetConfig+0x5a>
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d00b      	beq.n	8006f02 <USBD_GetConfig+0x4a>
 8006eea:	e012      	b.n	8006f12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f927 	bl	800714e <USBD_CtlSendData>
        break;
 8006f00:	e00c      	b.n	8006f1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3304      	adds	r3, #4
 8006f06:	2201      	movs	r2, #1
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f91f 	bl	800714e <USBD_CtlSendData>
        break;
 8006f10:	e004      	b.n	8006f1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f8a9 	bl	800706c <USBD_CtlError>
        break;
 8006f1a:	bf00      	nop
}
 8006f1c:	bf00      	nop
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d81e      	bhi.n	8006f7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	88db      	ldrh	r3, [r3, #6]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d004      	beq.n	8006f4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f890 	bl	800706c <USBD_CtlError>
        break;
 8006f4c:	e01a      	b.n	8006f84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f043 0202 	orr.w	r2, r3, #2
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	330c      	adds	r3, #12
 8006f6e:	2202      	movs	r2, #2
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f8eb 	bl	800714e <USBD_CtlSendData>
      break;
 8006f78:	e004      	b.n	8006f84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f875 	bl	800706c <USBD_CtlError>
      break;
 8006f82:	bf00      	nop
  }
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	885b      	ldrh	r3, [r3, #2]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d106      	bne.n	8006fac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f92b 	bl	8007202 <USBD_CtlSendStatus>
  }
}
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d80b      	bhi.n	8006fe4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	885b      	ldrh	r3, [r3, #2]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d10c      	bne.n	8006fee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f910 	bl	8007202 <USBD_CtlSendStatus>
      }
      break;
 8006fe2:	e004      	b.n	8006fee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f840 	bl	800706c <USBD_CtlError>
      break;
 8006fec:	e000      	b.n	8006ff0 <USBD_ClrFeature+0x3c>
      break;
 8006fee:	bf00      	nop
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	781a      	ldrb	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3301      	adds	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	781a      	ldrb	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3301      	adds	r3, #1
 8007020:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff fa92 	bl	800654c <SWAPBYTE>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3301      	adds	r3, #1
 800703a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f7ff fa85 	bl	800654c <SWAPBYTE>
 8007042:	4603      	mov	r3, r0
 8007044:	461a      	mov	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3301      	adds	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3301      	adds	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7ff fa78 	bl	800654c <SWAPBYTE>
 800705c:	4603      	mov	r3, r0
 800705e:	461a      	mov	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	80da      	strh	r2, [r3, #6]
}
 8007064:	bf00      	nop
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007076:	2180      	movs	r1, #128	@ 0x80
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fc6f 	bl	800795c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800707e:	2100      	movs	r1, #0
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fc6b 	bl	800795c <USBD_LL_StallEP>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b086      	sub	sp, #24
 8007092:	af00      	add	r7, sp, #0
 8007094:	60f8      	str	r0, [r7, #12]
 8007096:	60b9      	str	r1, [r7, #8]
 8007098:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d036      	beq.n	8007112 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80070a8:	6938      	ldr	r0, [r7, #16]
 80070aa:	f000 f836 	bl	800711a <USBD_GetLen>
 80070ae:	4603      	mov	r3, r0
 80070b0:	3301      	adds	r3, #1
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	4413      	add	r3, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	7812      	ldrb	r2, [r2, #0]
 80070c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	3301      	adds	r3, #1
 80070cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	4413      	add	r3, r2
 80070d4:	2203      	movs	r2, #3
 80070d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	3301      	adds	r3, #1
 80070dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070de:	e013      	b.n	8007108 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	4413      	add	r3, r2
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	7812      	ldrb	r2, [r2, #0]
 80070ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	3301      	adds	r3, #1
 80070f0:	613b      	str	r3, [r7, #16]
    idx++;
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	3301      	adds	r3, #1
 80070f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
    idx++;
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	3301      	adds	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e7      	bne.n	80070e0 <USBD_GetString+0x52>
 8007110:	e000      	b.n	8007114 <USBD_GetString+0x86>
    return;
 8007112:	bf00      	nop
  }
}
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800712a:	e005      	b.n	8007138 <USBD_GetLen+0x1e>
  {
    len++;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	3301      	adds	r3, #1
 8007130:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	3301      	adds	r3, #1
 8007136:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1f5      	bne.n	800712c <USBD_GetLen+0x12>
  }

  return len;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2202      	movs	r2, #2
 800715e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	2100      	movs	r1, #0
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 fc7a 	bl	8007a6e <USBD_LL_Transmit>

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	2100      	movs	r1, #0
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 fc69 	bl	8007a6e <USBD_LL_Transmit>

  return USBD_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2203      	movs	r2, #3
 80071b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	2100      	movs	r1, #0
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 fc6d 	bl	8007ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	2100      	movs	r1, #0
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fc5c 	bl	8007ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2204      	movs	r2, #4
 800720e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007212:	2300      	movs	r3, #0
 8007214:	2200      	movs	r2, #0
 8007216:	2100      	movs	r1, #0
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fc28 	bl	8007a6e <USBD_LL_Transmit>

  return USBD_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2205      	movs	r2, #5
 8007234:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007238:	2300      	movs	r3, #0
 800723a:	2200      	movs	r2, #0
 800723c:	2100      	movs	r1, #0
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fc36 	bl	8007ab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007254:	2200      	movs	r2, #0
 8007256:	4912      	ldr	r1, [pc, #72]	@ (80072a0 <MX_USB_Device_Init+0x50>)
 8007258:	4812      	ldr	r0, [pc, #72]	@ (80072a4 <MX_USB_Device_Init+0x54>)
 800725a:	f7fe fed9 	bl	8006010 <USBD_Init>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007264:	f7f9 f906 	bl	8000474 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007268:	490f      	ldr	r1, [pc, #60]	@ (80072a8 <MX_USB_Device_Init+0x58>)
 800726a:	480e      	ldr	r0, [pc, #56]	@ (80072a4 <MX_USB_Device_Init+0x54>)
 800726c:	f7fe ff00 	bl	8006070 <USBD_RegisterClass>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8007276:	f7f9 f8fd 	bl	8000474 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800727a:	490c      	ldr	r1, [pc, #48]	@ (80072ac <MX_USB_Device_Init+0x5c>)
 800727c:	4809      	ldr	r0, [pc, #36]	@ (80072a4 <MX_USB_Device_Init+0x54>)
 800727e:	f7fe fe51 	bl	8005f24 <USBD_CDC_RegisterInterface>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8007288:	f7f9 f8f4 	bl	8000474 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800728c:	4805      	ldr	r0, [pc, #20]	@ (80072a4 <MX_USB_Device_Init+0x54>)
 800728e:	f7fe ff16 	bl	80060be <USBD_Start>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8007298:	f7f9 f8ec 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800729c:	bf00      	nop
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	20000130 	.word	0x20000130
 80072a4:	20000260 	.word	0x20000260
 80072a8:	20000018 	.word	0x20000018
 80072ac:	2000011c 	.word	0x2000011c

080072b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80072b4:	2200      	movs	r2, #0
 80072b6:	4905      	ldr	r1, [pc, #20]	@ (80072cc <CDC_Init_FS+0x1c>)
 80072b8:	4805      	ldr	r0, [pc, #20]	@ (80072d0 <CDC_Init_FS+0x20>)
 80072ba:	f7fe fe48 	bl	8005f4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80072be:	4905      	ldr	r1, [pc, #20]	@ (80072d4 <CDC_Init_FS+0x24>)
 80072c0:	4803      	ldr	r0, [pc, #12]	@ (80072d0 <CDC_Init_FS+0x20>)
 80072c2:	f7fe fe62 	bl	8005f8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80072c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20000d30 	.word	0x20000d30
 80072d0:	20000260 	.word	0x20000260
 80072d4:	20000530 	.word	0x20000530

080072d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80072dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80072de:	4618      	mov	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	6039      	str	r1, [r7, #0]
 80072f2:	71fb      	strb	r3, [r7, #7]
 80072f4:	4613      	mov	r3, r2
 80072f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	2b23      	cmp	r3, #35	@ 0x23
 80072fc:	d84a      	bhi.n	8007394 <CDC_Control_FS+0xac>
 80072fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <CDC_Control_FS+0x1c>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	08007395 	.word	0x08007395
 8007308:	08007395 	.word	0x08007395
 800730c:	08007395 	.word	0x08007395
 8007310:	08007395 	.word	0x08007395
 8007314:	08007395 	.word	0x08007395
 8007318:	08007395 	.word	0x08007395
 800731c:	08007395 	.word	0x08007395
 8007320:	08007395 	.word	0x08007395
 8007324:	08007395 	.word	0x08007395
 8007328:	08007395 	.word	0x08007395
 800732c:	08007395 	.word	0x08007395
 8007330:	08007395 	.word	0x08007395
 8007334:	08007395 	.word	0x08007395
 8007338:	08007395 	.word	0x08007395
 800733c:	08007395 	.word	0x08007395
 8007340:	08007395 	.word	0x08007395
 8007344:	08007395 	.word	0x08007395
 8007348:	08007395 	.word	0x08007395
 800734c:	08007395 	.word	0x08007395
 8007350:	08007395 	.word	0x08007395
 8007354:	08007395 	.word	0x08007395
 8007358:	08007395 	.word	0x08007395
 800735c:	08007395 	.word	0x08007395
 8007360:	08007395 	.word	0x08007395
 8007364:	08007395 	.word	0x08007395
 8007368:	08007395 	.word	0x08007395
 800736c:	08007395 	.word	0x08007395
 8007370:	08007395 	.word	0x08007395
 8007374:	08007395 	.word	0x08007395
 8007378:	08007395 	.word	0x08007395
 800737c:	08007395 	.word	0x08007395
 8007380:	08007395 	.word	0x08007395
 8007384:	08007395 	.word	0x08007395
 8007388:	08007395 	.word	0x08007395
 800738c:	08007395 	.word	0x08007395
 8007390:	08007395 	.word	0x08007395
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007394:	bf00      	nop
  }

  return (USBD_OK);
 8007396:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	4805      	ldr	r0, [pc, #20]	@ (80073c8 <CDC_Receive_FS+0x24>)
 80073b2:	f7fe fdea 	bl	8005f8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80073b6:	4804      	ldr	r0, [pc, #16]	@ (80073c8 <CDC_Receive_FS+0x24>)
 80073b8:	f7fe fe00 	bl	8005fbc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80073bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000260 	.word	0x20000260

080073cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	4613      	mov	r3, r2
 80073d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80073de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
	...

080073f0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	6039      	str	r1, [r7, #0]
 80073fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2212      	movs	r2, #18
 8007400:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8007402:	4b03      	ldr	r3, [pc, #12]	@ (8007410 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8007404:	4618      	mov	r0, r3
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	20000150 	.word	0x20000150

08007414 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	6039      	str	r1, [r7, #0]
 800741e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2204      	movs	r2, #4
 8007424:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007426:	4b03      	ldr	r3, [pc, #12]	@ (8007434 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	20000164 	.word	0x20000164

08007438 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	6039      	str	r1, [r7, #0]
 8007442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d105      	bne.n	8007456 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	4907      	ldr	r1, [pc, #28]	@ (800746c <USBD_CDC_ProductStrDescriptor+0x34>)
 800744e:	4808      	ldr	r0, [pc, #32]	@ (8007470 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007450:	f7ff fe1d 	bl	800708e <USBD_GetString>
 8007454:	e004      	b.n	8007460 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	4904      	ldr	r1, [pc, #16]	@ (800746c <USBD_CDC_ProductStrDescriptor+0x34>)
 800745a:	4805      	ldr	r0, [pc, #20]	@ (8007470 <USBD_CDC_ProductStrDescriptor+0x38>)
 800745c:	f7ff fe17 	bl	800708e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007460:	4b02      	ldr	r3, [pc, #8]	@ (800746c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20001530 	.word	0x20001530
 8007470:	08007c88 	.word	0x08007c88

08007474 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	6039      	str	r1, [r7, #0]
 800747e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	4904      	ldr	r1, [pc, #16]	@ (8007494 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8007484:	4804      	ldr	r0, [pc, #16]	@ (8007498 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8007486:	f7ff fe02 	bl	800708e <USBD_GetString>
  return USBD_StrDesc;
 800748a:	4b02      	ldr	r3, [pc, #8]	@ (8007494 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20001530 	.word	0x20001530
 8007498:	08007ca0 	.word	0x08007ca0

0800749c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	6039      	str	r1, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	221a      	movs	r2, #26
 80074ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074ae:	f000 f843 	bl	8007538 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80074b2:	4b02      	ldr	r3, [pc, #8]	@ (80074bc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000168 	.word	0x20000168

080074c0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	6039      	str	r1, [r7, #0]
 80074ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	4907      	ldr	r1, [pc, #28]	@ (80074f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80074d6:	4808      	ldr	r0, [pc, #32]	@ (80074f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80074d8:	f7ff fdd9 	bl	800708e <USBD_GetString>
 80074dc:	e004      	b.n	80074e8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	4904      	ldr	r1, [pc, #16]	@ (80074f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80074e2:	4805      	ldr	r0, [pc, #20]	@ (80074f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80074e4:	f7ff fdd3 	bl	800708e <USBD_GetString>
  }
  return USBD_StrDesc;
 80074e8:	4b02      	ldr	r3, [pc, #8]	@ (80074f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20001530 	.word	0x20001530
 80074f8:	08007cb4 	.word	0x08007cb4

080074fc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	4603      	mov	r3, r0
 8007504:	6039      	str	r1, [r7, #0]
 8007506:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	4907      	ldr	r1, [pc, #28]	@ (8007530 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007512:	4808      	ldr	r0, [pc, #32]	@ (8007534 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007514:	f7ff fdbb 	bl	800708e <USBD_GetString>
 8007518:	e004      	b.n	8007524 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	4904      	ldr	r1, [pc, #16]	@ (8007530 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800751e:	4805      	ldr	r0, [pc, #20]	@ (8007534 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007520:	f7ff fdb5 	bl	800708e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007524:	4b02      	ldr	r3, [pc, #8]	@ (8007530 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20001530 	.word	0x20001530
 8007534:	08007cc0 	.word	0x08007cc0

08007538 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800753e:	4b0f      	ldr	r3, [pc, #60]	@ (800757c <Get_SerialNum+0x44>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007544:	4b0e      	ldr	r3, [pc, #56]	@ (8007580 <Get_SerialNum+0x48>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800754a:	4b0e      	ldr	r3, [pc, #56]	@ (8007584 <Get_SerialNum+0x4c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4413      	add	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800755e:	2208      	movs	r2, #8
 8007560:	4909      	ldr	r1, [pc, #36]	@ (8007588 <Get_SerialNum+0x50>)
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f814 	bl	8007590 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007568:	2204      	movs	r2, #4
 800756a:	4908      	ldr	r1, [pc, #32]	@ (800758c <Get_SerialNum+0x54>)
 800756c:	68b8      	ldr	r0, [r7, #8]
 800756e:	f000 f80f 	bl	8007590 <IntToUnicode>
  }
}
 8007572:	bf00      	nop
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	1fff7590 	.word	0x1fff7590
 8007580:	1fff7594 	.word	0x1fff7594
 8007584:	1fff7598 	.word	0x1fff7598
 8007588:	2000016a 	.word	0x2000016a
 800758c:	2000017a 	.word	0x2000017a

08007590 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	4613      	mov	r3, r2
 800759c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075a2:	2300      	movs	r3, #0
 80075a4:	75fb      	strb	r3, [r7, #23]
 80075a6:	e027      	b.n	80075f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	0f1b      	lsrs	r3, r3, #28
 80075ac:	2b09      	cmp	r3, #9
 80075ae:	d80b      	bhi.n	80075c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	0f1b      	lsrs	r3, r3, #28
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	4619      	mov	r1, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	440b      	add	r3, r1
 80075c0:	3230      	adds	r2, #48	@ 0x30
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	e00a      	b.n	80075de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	0f1b      	lsrs	r3, r3, #28
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	4619      	mov	r1, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	440b      	add	r3, r1
 80075d8:	3237      	adds	r2, #55	@ 0x37
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	3301      	adds	r3, #1
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4413      	add	r3, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	3301      	adds	r3, #1
 80075f6:	75fb      	strb	r3, [r7, #23]
 80075f8:	7dfa      	ldrb	r2, [r7, #23]
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d3d3      	bcc.n	80075a8 <IntToUnicode+0x18>
  }
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
	...

08007610 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b098      	sub	sp, #96	@ 0x60
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007618:	f107 0310 	add.w	r3, r7, #16
 800761c:	2250      	movs	r2, #80	@ 0x50
 800761e:	2100      	movs	r1, #0
 8007620:	4618      	mov	r0, r3
 8007622:	f000 faf9 	bl	8007c18 <memset>
  if(pcdHandle->Instance==USB)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a15      	ldr	r2, [pc, #84]	@ (8007680 <HAL_PCD_MspInit+0x70>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d122      	bne.n	8007676 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007634:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007636:	2300      	movs	r3, #0
 8007638:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800763a:	f107 0310 	add.w	r3, r7, #16
 800763e:	4618      	mov	r0, r3
 8007640:	f7fc f920 	bl	8003884 <HAL_RCCEx_PeriphCLKConfig>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800764a:	f7f8 ff13 	bl	8000474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800764e:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <HAL_PCD_MspInit+0x74>)
 8007650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007652:	4a0c      	ldr	r2, [pc, #48]	@ (8007684 <HAL_PCD_MspInit+0x74>)
 8007654:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007658:	6593      	str	r3, [r2, #88]	@ 0x58
 800765a:	4b0a      	ldr	r3, [pc, #40]	@ (8007684 <HAL_PCD_MspInit+0x74>)
 800765c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007666:	2200      	movs	r2, #0
 8007668:	2100      	movs	r1, #0
 800766a:	2014      	movs	r0, #20
 800766c:	f7f9 f9a1 	bl	80009b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007670:	2014      	movs	r0, #20
 8007672:	f7f9 f9b8 	bl	80009e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007676:	bf00      	nop
 8007678:	3760      	adds	r7, #96	@ 0x60
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40005c00 	.word	0x40005c00
 8007684:	40021000 	.word	0x40021000

08007688 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f7fe fd58 	bl	8006154 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80076be:	78fa      	ldrb	r2, [r7, #3]
 80076c0:	6879      	ldr	r1, [r7, #4]
 80076c2:	4613      	mov	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	440b      	add	r3, r1
 80076cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	78fb      	ldrb	r3, [r7, #3]
 80076d4:	4619      	mov	r1, r3
 80076d6:	f7fe fd92 	bl	80061fe <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80076da:	bf00      	nop
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	440b      	add	r3, r1
 8007702:	3324      	adds	r3, #36	@ 0x24
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	4619      	mov	r1, r3
 800770a:	f7fe fddb 	bl	80062c4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007724:	4618      	mov	r0, r3
 8007726:	f7fe feef 	bl	8006508 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800773a:	2301      	movs	r3, #1
 800773c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	795b      	ldrb	r3, [r3, #5]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d001      	beq.n	800774a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007746:	f7f8 fe95 	bl	8000474 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007750:	7bfa      	ldrb	r2, [r7, #15]
 8007752:	4611      	mov	r1, r2
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe fe99 	bl	800648c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe fe45 	bl	80063f0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007766:	bf00      	nop
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fe94 	bl	80064ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	7a5b      	ldrb	r3, [r3, #9]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800778c:	4b04      	ldr	r3, [pc, #16]	@ (80077a0 <HAL_PCD_SuspendCallback+0x30>)
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	4a03      	ldr	r2, [pc, #12]	@ (80077a0 <HAL_PCD_SuspendCallback+0x30>)
 8007792:	f043 0306 	orr.w	r3, r3, #6
 8007796:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	e000ed00 	.word	0xe000ed00

080077a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	7a5b      	ldrb	r3, [r3, #9]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077b4:	4b08      	ldr	r3, [pc, #32]	@ (80077d8 <HAL_PCD_ResumeCallback+0x34>)
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	4a07      	ldr	r2, [pc, #28]	@ (80077d8 <HAL_PCD_ResumeCallback+0x34>)
 80077ba:	f023 0306 	bic.w	r3, r3, #6
 80077be:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80077c0:	f000 f9f8 	bl	8007bb4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fe84 	bl	80064d8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	e000ed00 	.word	0xe000ed00

080077dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80077e4:	4a2b      	ldr	r2, [pc, #172]	@ (8007894 <USBD_LL_Init+0xb8>)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a29      	ldr	r2, [pc, #164]	@ (8007894 <USBD_LL_Init+0xb8>)
 80077f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80077f4:	4b27      	ldr	r3, [pc, #156]	@ (8007894 <USBD_LL_Init+0xb8>)
 80077f6:	4a28      	ldr	r2, [pc, #160]	@ (8007898 <USBD_LL_Init+0xbc>)
 80077f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80077fa:	4b26      	ldr	r3, [pc, #152]	@ (8007894 <USBD_LL_Init+0xb8>)
 80077fc:	2208      	movs	r2, #8
 80077fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007800:	4b24      	ldr	r3, [pc, #144]	@ (8007894 <USBD_LL_Init+0xb8>)
 8007802:	2202      	movs	r2, #2
 8007804:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007806:	4b23      	ldr	r3, [pc, #140]	@ (8007894 <USBD_LL_Init+0xb8>)
 8007808:	2202      	movs	r2, #2
 800780a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800780c:	4b21      	ldr	r3, [pc, #132]	@ (8007894 <USBD_LL_Init+0xb8>)
 800780e:	2200      	movs	r2, #0
 8007810:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007812:	4b20      	ldr	r3, [pc, #128]	@ (8007894 <USBD_LL_Init+0xb8>)
 8007814:	2200      	movs	r2, #0
 8007816:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007818:	4b1e      	ldr	r3, [pc, #120]	@ (8007894 <USBD_LL_Init+0xb8>)
 800781a:	2200      	movs	r2, #0
 800781c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800781e:	4b1d      	ldr	r3, [pc, #116]	@ (8007894 <USBD_LL_Init+0xb8>)
 8007820:	2200      	movs	r2, #0
 8007822:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007824:	481b      	ldr	r0, [pc, #108]	@ (8007894 <USBD_LL_Init+0xb8>)
 8007826:	f7f9 fd81 	bl	800132c <HAL_PCD_Init>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007830:	f7f8 fe20 	bl	8000474 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800783a:	2318      	movs	r3, #24
 800783c:	2200      	movs	r2, #0
 800783e:	2100      	movs	r1, #0
 8007840:	f7fb fa08 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800784a:	2358      	movs	r3, #88	@ 0x58
 800784c:	2200      	movs	r2, #0
 800784e:	2180      	movs	r1, #128	@ 0x80
 8007850:	f7fb fa00 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800785a:	23c0      	movs	r3, #192	@ 0xc0
 800785c:	2200      	movs	r2, #0
 800785e:	2181      	movs	r1, #129	@ 0x81
 8007860:	f7fb f9f8 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800786a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800786e:	2200      	movs	r2, #0
 8007870:	2101      	movs	r1, #1
 8007872:	f7fb f9ef 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800787c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007880:	2200      	movs	r2, #0
 8007882:	2182      	movs	r1, #130	@ 0x82
 8007884:	f7fb f9e6 	bl	8002c54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20001730 	.word	0x20001730
 8007898:	40005c00 	.word	0x40005c00

0800789c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7f9 fe08 	bl	80014c8 <HAL_PCD_Start>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f97e 	bl	8007bc0 <USBD_Get_USB_Status>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	4608      	mov	r0, r1
 80078dc:	4611      	mov	r1, r2
 80078de:	461a      	mov	r2, r3
 80078e0:	4603      	mov	r3, r0
 80078e2:	70fb      	strb	r3, [r7, #3]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70bb      	strb	r3, [r7, #2]
 80078e8:	4613      	mov	r3, r2
 80078ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80078fa:	78bb      	ldrb	r3, [r7, #2]
 80078fc:	883a      	ldrh	r2, [r7, #0]
 80078fe:	78f9      	ldrb	r1, [r7, #3]
 8007900:	f7f9 ff4f 	bl	80017a2 <HAL_PCD_EP_Open>
 8007904:	4603      	mov	r3, r0
 8007906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 f958 	bl	8007bc0 <USBD_Get_USB_Status>
 8007910:	4603      	mov	r3, r0
 8007912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007914:	7bbb      	ldrb	r3, [r7, #14]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	4611      	mov	r1, r2
 800793c:	4618      	mov	r0, r3
 800793e:	f7f9 ff8f 	bl	8001860 <HAL_PCD_EP_Close>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	4618      	mov	r0, r3
 800794a:	f000 f939 	bl	8007bc0 <USBD_Get_USB_Status>
 800794e:	4603      	mov	r3, r0
 8007950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007952:	7bbb      	ldrb	r3, [r7, #14]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7fa f838 	bl	80019f0 <HAL_PCD_EP_SetStall>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f91a 	bl	8007bc0 <USBD_Get_USB_Status>
 800798c:	4603      	mov	r3, r0
 800798e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007990:	7bbb      	ldrb	r3, [r7, #14]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	460b      	mov	r3, r1
 80079a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80079b4:	78fa      	ldrb	r2, [r7, #3]
 80079b6:	4611      	mov	r1, r2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fa f86b 	bl	8001a94 <HAL_PCD_EP_ClrStall>
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 f8fb 	bl	8007bc0 <USBD_Get_USB_Status>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80079ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	da0b      	bge.n	8007a0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079fa:	68f9      	ldr	r1, [r7, #12]
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	440b      	add	r3, r1
 8007a06:	3312      	adds	r3, #18
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	e00b      	b.n	8007a24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a12:	68f9      	ldr	r1, [r7, #12]
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	440b      	add	r3, r1
 8007a1e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8007a22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007a4a:	78fa      	ldrb	r2, [r7, #3]
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7f9 fe83 	bl	800175a <HAL_PCD_SetAddress>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 f8b0 	bl	8007bc0 <USBD_Get_USB_Status>
 8007a60:	4603      	mov	r3, r0
 8007a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b086      	sub	sp, #24
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007a8c:	7af9      	ldrb	r1, [r7, #11]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	f7f9 ff76 	bl	8001982 <HAL_PCD_EP_Transmit>
 8007a96:	4603      	mov	r3, r0
 8007a98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 f88f 	bl	8007bc0 <USBD_Get_USB_Status>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007aa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	607a      	str	r2, [r7, #4]
 8007aba:	603b      	str	r3, [r7, #0]
 8007abc:	460b      	mov	r3, r1
 8007abe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007ace:	7af9      	ldrb	r1, [r7, #11]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	f7f9 ff0c 	bl	80018f0 <HAL_PCD_EP_Receive>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 f86e 	bl	8007bc0 <USBD_Get_USB_Status>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ae8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007b04:	78fa      	ldrb	r2, [r7, #3]
 8007b06:	4611      	mov	r1, r2
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7f9 ff22 	bl	8001952 <HAL_PCD_EP_GetRxCount>
 8007b0e:	4603      	mov	r3, r0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_PCDEx_LPM_Callback+0x18>
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d013      	beq.n	8007b56 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8007b2e:	e023      	b.n	8007b78 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7a5b      	ldrb	r3, [r3, #9]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007b38:	f000 f83c 	bl	8007bb4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b3c:	4b10      	ldr	r3, [pc, #64]	@ (8007b80 <HAL_PCDEx_LPM_Callback+0x68>)
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	4a0f      	ldr	r2, [pc, #60]	@ (8007b80 <HAL_PCDEx_LPM_Callback+0x68>)
 8007b42:	f023 0306 	bic.w	r3, r3, #6
 8007b46:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe fcc2 	bl	80064d8 <USBD_LL_Resume>
    break;
 8007b54:	e010      	b.n	8007b78 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fe fca5 	bl	80064ac <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	7a5b      	ldrb	r3, [r3, #9]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b6a:	4b05      	ldr	r3, [pc, #20]	@ (8007b80 <HAL_PCDEx_LPM_Callback+0x68>)
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	4a04      	ldr	r2, [pc, #16]	@ (8007b80 <HAL_PCDEx_LPM_Callback+0x68>)
 8007b70:	f043 0306 	orr.w	r3, r3, #6
 8007b74:	6113      	str	r3, [r2, #16]
    break;
 8007b76:	bf00      	nop
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	e000ed00 	.word	0xe000ed00

08007b84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b8c:	4b03      	ldr	r3, [pc, #12]	@ (8007b9c <USBD_static_malloc+0x18>)
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	20001a0c 	.word	0x20001a0c

08007ba0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]

}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007bb8:	f7f8 fb3e 	bl	8000238 <SystemClock_Config>
}
 8007bbc:	bf00      	nop
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d817      	bhi.n	8007c04 <USBD_Get_USB_Status+0x44>
 8007bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bdc <USBD_Get_USB_Status+0x1c>)
 8007bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bda:	bf00      	nop
 8007bdc:	08007bed 	.word	0x08007bed
 8007be0:	08007bf3 	.word	0x08007bf3
 8007be4:	08007bf9 	.word	0x08007bf9
 8007be8:	08007bff 	.word	0x08007bff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]
    break;
 8007bf0:	e00b      	b.n	8007c0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bf6:	e008      	b.n	8007c0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007bfc:	e005      	b.n	8007c0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	73fb      	strb	r3, [r7, #15]
    break;
 8007c02:	e002      	b.n	8007c0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c04:	2303      	movs	r3, #3
 8007c06:	73fb      	strb	r3, [r7, #15]
    break;
 8007c08:	bf00      	nop
  }
  return usb_status;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <memset>:
 8007c18:	4402      	add	r2, r0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d100      	bne.n	8007c22 <memset+0xa>
 8007c20:	4770      	bx	lr
 8007c22:	f803 1b01 	strb.w	r1, [r3], #1
 8007c26:	e7f9      	b.n	8007c1c <memset+0x4>

08007c28 <__libc_init_array>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8007c60 <__libc_init_array+0x38>)
 8007c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8007c64 <__libc_init_array+0x3c>)
 8007c2e:	1b64      	subs	r4, r4, r5
 8007c30:	10a4      	asrs	r4, r4, #2
 8007c32:	2600      	movs	r6, #0
 8007c34:	42a6      	cmp	r6, r4
 8007c36:	d109      	bne.n	8007c4c <__libc_init_array+0x24>
 8007c38:	4d0b      	ldr	r5, [pc, #44]	@ (8007c68 <__libc_init_array+0x40>)
 8007c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8007c6c <__libc_init_array+0x44>)
 8007c3c:	f000 f818 	bl	8007c70 <_init>
 8007c40:	1b64      	subs	r4, r4, r5
 8007c42:	10a4      	asrs	r4, r4, #2
 8007c44:	2600      	movs	r6, #0
 8007c46:	42a6      	cmp	r6, r4
 8007c48:	d105      	bne.n	8007c56 <__libc_init_array+0x2e>
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c50:	4798      	blx	r3
 8007c52:	3601      	adds	r6, #1
 8007c54:	e7ee      	b.n	8007c34 <__libc_init_array+0xc>
 8007c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5a:	4798      	blx	r3
 8007c5c:	3601      	adds	r6, #1
 8007c5e:	e7f2      	b.n	8007c46 <__libc_init_array+0x1e>
 8007c60:	08007ce0 	.word	0x08007ce0
 8007c64:	08007ce0 	.word	0x08007ce0
 8007c68:	08007ce0 	.word	0x08007ce0
 8007c6c:	08007ce4 	.word	0x08007ce4

08007c70 <_init>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	bf00      	nop
 8007c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c76:	bc08      	pop	{r3}
 8007c78:	469e      	mov	lr, r3
 8007c7a:	4770      	bx	lr

08007c7c <_fini>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr
