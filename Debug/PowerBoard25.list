
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c54  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000754  08010e38  08010e38  00011e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801158c  0801158c  00013350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801158c  0801158c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011594  08011594  00013350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011594  08011594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011598  08011598  00012598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0801159c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a384  20000350  080118ec  00013350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a6d4  080118ec  000136d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d8ee  00000000  00000000  00013380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f93  00000000  00000000  00040c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024b8  00000000  00000000  00046c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c55  00000000  00000000  000490c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008387  00000000  00000000  0004ad15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bb73  00000000  00000000  0005309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7c69  00000000  00000000  0007ec0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad34  00000000  00000000  001668bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001715f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010e1c 	.word	0x08010e1c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08010e1c 	.word	0x08010e1c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <LTC2990_Init>:
  * @brief  Initialize the LTC2990 Chip
  * @param  Pointer to the LTC2990 handle
  * @param  Pointer to the HAL I2C HandleTypeDef
  * @retval HAL status
  */
int LTC2990_Init(LTC2990_Handle_t *handle, I2C_HandleTypeDef *hi2c) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	int8_t ack;

	handle->hi2c = hi2c;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	601a      	str	r2, [r3, #0]

	//Initialize voltages to NAN
	//Can this be changed so that it is in the struct
	//i.e. last_voltages = {NAN, NAN, NAN, NAN}
	for (int i = 0; i < 4; i++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e009      	b.n	8000f4e <LTC2990_Init+0x2a>
		handle->last_voltages[i] = NAN;
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3302      	adds	r3, #2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <LTC2990_Init+0x94>)
 8000f46:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	ddf2      	ble.n	8000f3a <LTC2990_Init+0x16>
	}

	handle->i2c_address = LTC2990_I2C_ADDRESS;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	224d      	movs	r2, #77	@ 0x4d
 8000f58:	711a      	strb	r2, [r3, #4]

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, VOLTAGE_MODE_MASK);
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	2107      	movs	r1, #7
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f8cc 	bl	80010fc <LTC2990_Set_Mode>
 8000f64:	4603      	mov	r3, r0
 8000f66:	72fb      	strb	r3, [r7, #11]

	if(ack != 0) {
 8000f68:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <LTC2990_Init+0x56>
		CDC_Transmit_Print("Failed to set in Single Voltage Mode \n");
 8000f70:	4812      	ldr	r0, [pc, #72]	@ (8000fbc <LTC2990_Init+0x98>)
 8000f72:	f000 fa2f 	bl	80013d4 <CDC_Transmit_Print>
		while(1);
 8000f76:	bf00      	nop
 8000f78:	e7fd      	b.n	8000f76 <LTC2990_Init+0x52>
	}


	// Enable all voltage channels
	ack = LTC2990_Enable_All_Voltages(handle);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f8b0 	bl	80010e0 <LTC2990_Enable_All_Voltages>
 8000f80:	4603      	mov	r3, r0
 8000f82:	72fb      	strb	r3, [r7, #11]
	if(ack != 0) {
 8000f84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <LTC2990_Init+0x78>
		HAL_Delay(50);
 8000f8c:	2032      	movs	r0, #50	@ 0x32
 8000f8e:	f000 fffd 	bl	8001f8c <HAL_Delay>
		CDC_Transmit_Print("Failed to enable voltage channels. \n");
 8000f92:	480b      	ldr	r0, [pc, #44]	@ (8000fc0 <LTC2990_Init+0x9c>)
 8000f94:	f000 fa1e 	bl	80013d4 <CDC_Transmit_Print>
		while(1);
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <LTC2990_Init+0x74>
	}

	HAL_Delay(100);
 8000f9c:	2064      	movs	r0, #100	@ 0x64
 8000f9e:	f000 fff5 	bl	8001f8c <HAL_Delay>
	CDC_Transmit_Print("LTC2990 configured for Single-Ended Voltage Monitoring. \n");
 8000fa2:	4808      	ldr	r0, [pc, #32]	@ (8000fc4 <LTC2990_Init+0xa0>)
 8000fa4:	f000 fa16 	bl	80013d4 <CDC_Transmit_Print>

	//Initial data reading
	LTC2990_Step(handle);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f80d 	bl	8000fc8 <LTC2990_Step>

	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	7fc00000 	.word	0x7fc00000
 8000fbc:	08010e38 	.word	0x08010e38
 8000fc0:	08010e60 	.word	0x08010e60
 8000fc4:	08010e88 	.word	0x08010e88

08000fc8 <LTC2990_Step>:
/**
  * @brief  Tell the LTC2990 chip to refresh voltage readings,
  * 		This does not return the voltage(s) read, use LTC2990_Get_Voltage to do so
  * @param  Pointer to the LTC2990 handle
  */
void LTC2990_Step(LTC2990_Handle_t *handle) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	int8_t ack;
	int16_t adc_code;
	int8_t data_valid;
	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f8d7 	bl	8001184 <LTC2990_Trigger_Conversion>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	74fb      	strb	r3, [r7, #19]
	if(ack != 0) {
 8000fda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <LTC2990_Step+0x22>
		CDC_Transmit_Print("Failed to trigger conversion.");
 8000fe2:	4829      	ldr	r0, [pc, #164]	@ (8001088 <LTC2990_Step+0xc0>)
 8000fe4:	f000 f9f6 	bl	80013d4 <CDC_Transmit_Print>
 8000fe8:	e04b      	b.n	8001082 <LTC2990_Step+0xba>
		return;
	}

	// Allow time for conversion
	HAL_Delay(10);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f000 ffce 	bl	8001f8c <HAL_Delay>

	// Read voltages V1 to V4
	uint8_t msb_registers[4] = {V1_MSB_REG, V2_MSB_REG, V3_MSB_REG, V4_MSB_REG};
 8000ff0:	4b26      	ldr	r3, [pc, #152]	@ (800108c <LTC2990_Step+0xc4>)
 8000ff2:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 4; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e040      	b.n	800107c <LTC2990_Step+0xb4>
		ack = LTC2990_ADC_Read_New_Data(handle, msb_registers[i], &adc_code, &data_valid);
 8000ffa:	f107 0208 	add.w	r2, r7, #8
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	4413      	add	r3, r2
 8001002:	7819      	ldrb	r1, [r3, #0]
 8001004:	f107 030f 	add.w	r3, r7, #15
 8001008:	f107 0210 	add.w	r2, r7, #16
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f8c7 	bl	80011a0 <LTC2990_ADC_Read_New_Data>
 8001012:	4603      	mov	r3, r0
 8001014:	74fb      	strb	r3, [r7, #19]
		if(ack != 0 || data_valid != 1) {
 8001016:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <LTC2990_Step+0x5e>
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d017      	beq.n	8001056 <LTC2990_Step+0x8e>
			CDC_Transmit_Print("Error reading Voltage %d \n", i);
 8001026:	6979      	ldr	r1, [r7, #20]
 8001028:	4819      	ldr	r0, [pc, #100]	@ (8001090 <LTC2990_Step+0xc8>)
 800102a:	f000 f9d3 	bl	80013d4 <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the ack: %d \n", ack);
 800102e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001032:	4619      	mov	r1, r3
 8001034:	4817      	ldr	r0, [pc, #92]	@ (8001094 <LTC2990_Step+0xcc>)
 8001036:	f000 f9cd 	bl	80013d4 <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4619      	mov	r1, r3
 8001040:	4815      	ldr	r0, [pc, #84]	@ (8001098 <LTC2990_Step+0xd0>)
 8001042:	f000 f9c7 	bl	80013d4 <CDC_Transmit_Print>
			handle->last_voltages[i] = NAN;
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3302      	adds	r3, #2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	4a12      	ldr	r2, [pc, #72]	@ (800109c <LTC2990_Step+0xd4>)
 8001052:	601a      	str	r2, [r3, #0]
			continue;
 8001054:	e00f      	b.n	8001076 <LTC2990_Step+0xae>
		}
		handle->last_voltages[i] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code);
 8001056:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800105a:	b29b      	uxth	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f922 	bl	80012a8 <LTC2990_Code_To_Single_Ended_Voltage>
 8001064:	eef0 7a40 	vmov.f32	s15, s0
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3302      	adds	r3, #2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 4; i++) {
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b03      	cmp	r3, #3
 8001080:	ddbb      	ble.n	8000ffa <LTC2990_Step+0x32>
		//CDC_Transmit_Print("Just Read Voltages, got: %x \n", handle->last_voltages[i]);
	}

}
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	08010ec4 	.word	0x08010ec4
 800108c:	0c0a0806 	.word	0x0c0a0806
 8001090:	08010ee4 	.word	0x08010ee4
 8001094:	08010f00 	.word	0x08010f00
 8001098:	08010f18 	.word	0x08010f18
 800109c:	7fc00000 	.word	0x7fc00000

080010a0 <LTC2990_Get_Voltage>:
/**
  * @brief  Puts the latest voltage readings in the array passed
  * @param  Pointer to the LTC2990 handle
  * @param 	Pointer to the array to store voltage values to
  */
void LTC2990_Get_Voltage(LTC2990_Handle_t* handle, float* voltages) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 4; i++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	e00d      	b.n	80010cc <LTC2990_Get_Voltage+0x2c>
		voltages[i] = handle->last_voltages[i];
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	3202      	adds	r2, #2
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	440a      	add	r2, r1
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++) {
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	ddee      	ble.n	80010b0 <LTC2990_Get_Voltage+0x10>
	}
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LTC2990_Enable_All_Voltages>:


inline int8_t LTC2990_Enable_All_Voltages(LTC2990_Handle_t *handle) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	return LTC2990_Set_Mode(handle, ENABLE_ALL, TEMP_MEAS_MODE_MASK);
 80010e8:	2218      	movs	r2, #24
 80010ea:	2118      	movs	r1, #24
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f805 	bl	80010fc <LTC2990_Set_Mode>
 80010f2:	4603      	mov	r3, r0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LTC2990_Set_Mode>:


int8_t LTC2990_Set_Mode(LTC2990_Handle_t *handle, uint8_t bits_to_set, uint8_t bits_to_clear) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_data;
	int8_t ack;

	// Read current CONTROL_REG
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_data);
 800110c:	f107 030e 	add.w	r3, r7, #14
 8001110:	461a      	mov	r2, r3
 8001112:	2101      	movs	r1, #1
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f903 	bl	8001320 <LTC2990_Read_Register>
 800111a:	4603      	mov	r3, r0
 800111c:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <LTC2990_Set_Mode+0x36>
		CDC_Transmit_Print("Failed to Read_Register in Set_Mode\n");
 8001126:	4815      	ldr	r0, [pc, #84]	@ (800117c <LTC2990_Set_Mode+0x80>)
 8001128:	f000 f954 	bl	80013d4 <CDC_Transmit_Print>
		return ack;
 800112c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001130:	e01f      	b.n	8001172 <LTC2990_Set_Mode+0x76>
	}

	//Modify bits
	reg_data &= ~bits_to_clear;
 8001132:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001136:	43db      	mvns	r3, r3
 8001138:	b25a      	sxtb	r2, r3
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	4013      	ands	r3, r2
 8001140:	b25b      	sxtb	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	73bb      	strb	r3, [r7, #14]
	reg_data |= bits_to_set;
 8001146:	7bba      	ldrb	r2, [r7, #14]
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	4313      	orrs	r3, r2
 800114c:	b2db      	uxtb	r3, r3
 800114e:	73bb      	strb	r3, [r7, #14]

	//Write back to CONTROL_REG
	ack = LTC2990_Write_Register(handle, CONTROL_REG, reg_data);
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	461a      	mov	r2, r3
 8001154:	2101      	movs	r1, #1
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f90e 	bl	8001378 <LTC2990_Write_Register>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <LTC2990_Set_Mode+0x72>
		CDC_Transmit_Print("Failed to Write_Register in Set_Mode\n");
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <LTC2990_Set_Mode+0x84>)
 800116a:	f000 f933 	bl	80013d4 <CDC_Transmit_Print>
	}
	return ack;
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	08010f38 	.word	0x08010f38
 8001180:	08010f60 	.word	0x08010f60

08001184 <LTC2990_Trigger_Conversion>:

int8_t LTC2990_Trigger_Conversion(LTC2990_Handle_t *handle) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	return LTC2990_Write_Register(handle, TRIGGER_REG, 0x00);
 800118c:	2200      	movs	r2, #0
 800118e:	2102      	movs	r1, #2
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f8f1 	bl	8001378 <LTC2990_Write_Register>
 8001196:	4603      	mov	r3, r0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <LTC2990_ADC_Read_New_Data>:


uint8_t LTC2990_ADC_Read_New_Data(LTC2990_Handle_t *handle, uint8_t msb_register_address, int16_t* adc_code, int8_t* data_valid) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	460b      	mov	r3, r1
 80011ae:	72fb      	strb	r3, [r7, #11]
	uint16_t timeout = TIMEOUT;
 80011b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b4:	83fb      	strh	r3, [r7, #30]
	int8_t ack;
	uint8_t status;
	uint8_t status_bit = (msb_register_address / 2) - 1;
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	3b01      	subs	r3, #1
 80011be:	777b      	strb	r3, [r7, #29]

	// Wait for new data
	while (--timeout) {
 80011c0:	e01a      	b.n	80011f8 <LTC2990_ADC_Read_New_Data+0x58>
		ack = LTC2990_Read_Register(handle, STATUS_REG, &status);
 80011c2:	f107 0319 	add.w	r3, r7, #25
 80011c6:	461a      	mov	r2, r3
 80011c8:	2100      	movs	r1, #0
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f000 f8a8 	bl	8001320 <LTC2990_Read_Register>
 80011d0:	4603      	mov	r3, r0
 80011d2:	773b      	strb	r3, [r7, #28]

		if (ack != 0) {
 80011d4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <LTC2990_ADC_Read_New_Data+0x40>
			return ack;
 80011dc:	7f3b      	ldrb	r3, [r7, #28]
 80011de:	e05c      	b.n	800129a <LTC2990_ADC_Read_New_Data+0xfa>
		}

		if (((status >> status_bit) & 0x01) == 1) {
 80011e0:	7e7b      	ldrb	r3, [r7, #25]
 80011e2:	461a      	mov	r2, r3
 80011e4:	7f7b      	ldrb	r3, [r7, #29]
 80011e6:	fa42 f303 	asr.w	r3, r2, r3
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d109      	bne.n	8001206 <LTC2990_ADC_Read_New_Data+0x66>
			break;
		}

		//
		HAL_Delay(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 feca 	bl	8001f8c <HAL_Delay>
	while (--timeout) {
 80011f8:	8bfb      	ldrh	r3, [r7, #30]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	83fb      	strh	r3, [r7, #30]
 80011fe:	8bfb      	ldrh	r3, [r7, #30]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1de      	bne.n	80011c2 <LTC2990_ADC_Read_New_Data+0x22>
 8001204:	e000      	b.n	8001208 <LTC2990_ADC_Read_New_Data+0x68>
			break;
 8001206:	bf00      	nop
	}


	if (timeout == 0) {
 8001208:	8bfb      	ldrh	r3, [r7, #30]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d104      	bne.n	8001218 <LTC2990_ADC_Read_New_Data+0x78>
		CDC_Transmit_Print("LTC2990 TIMED OUT \n");
 800120e:	4825      	ldr	r0, [pc, #148]	@ (80012a4 <LTC2990_ADC_Read_New_Data+0x104>)
 8001210:	f000 f8e0 	bl	80013d4 <CDC_Transmit_Print>
		return 1;
 8001214:	2301      	movs	r3, #1
 8001216:	e040      	b.n	800129a <LTC2990_ADC_Read_New_Data+0xfa>
	}

	//Read ADC data
	uint8_t msb;
	uint8_t lsb;
	ack = LTC2990_Read_Register(handle, msb_register_address, &msb);
 8001218:	f107 0218 	add.w	r2, r7, #24
 800121c:	7afb      	ldrb	r3, [r7, #11]
 800121e:	4619      	mov	r1, r3
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 f87d 	bl	8001320 <LTC2990_Read_Register>
 8001226:	4603      	mov	r3, r0
 8001228:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 800122a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <LTC2990_ADC_Read_New_Data+0x96>
		return ack;
 8001232:	7f3b      	ldrb	r3, [r7, #28]
 8001234:	e031      	b.n	800129a <LTC2990_ADC_Read_New_Data+0xfa>
	}

	ack = LTC2990_Read_Register(handle, msb_register_address + 1, &lsb);
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	3301      	adds	r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f107 0217 	add.w	r2, r7, #23
 8001240:	4619      	mov	r1, r3
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f86c 	bl	8001320 <LTC2990_Read_Register>
 8001248:	4603      	mov	r3, r0
 800124a:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 800124c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <LTC2990_ADC_Read_New_Data+0xb8>
		return ack;
 8001254:	7f3b      	ldrb	r3, [r7, #28]
 8001256:	e020      	b.n	800129a <LTC2990_ADC_Read_New_Data+0xfa>
	}


	uint16_t code = ((uint16_t)msb << 8) | lsb;
 8001258:	7e3b      	ldrb	r3, [r7, #24]
 800125a:	b21b      	sxth	r3, r3
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21a      	sxth	r2, r3
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	837b      	strh	r3, [r7, #26]
	*data_valid = (code >> 15) & 0x01;  // Data valid bit
 800126a:	8b7b      	ldrh	r3, [r7, #26]
 800126c:	0bdb      	lsrs	r3, r3, #15
 800126e:	b29b      	uxth	r3, r3
 8001270:	b25b      	sxtb	r3, r3
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	b25a      	sxtb	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	701a      	strb	r2, [r3, #0]
	*adc_code = code & 0x3FFF;
 800127c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001280:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001284:	b21a      	sxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	801a      	strh	r2, [r3, #0]

	return (*data_valid == 1) ? 0 : 1;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f993 3000 	ldrsb.w	r3, [r3]
 8001290:	2b01      	cmp	r3, #1
 8001292:	bf14      	ite	ne
 8001294:	2301      	movne	r3, #1
 8001296:	2300      	moveq	r3, #0
 8001298:	b2db      	uxtb	r3, r3
	//In the actual code, it should NEVER reach this point, as this would be the timeout
	//ran out but got messed up
	CDC_Transmit_Print("the thing I said wouldn't happen \n");
	return 2;

}
 800129a:	4618      	mov	r0, r3
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08010f88 	.word	0x08010f88

080012a8 <LTC2990_Code_To_Single_Ended_Voltage>:

float LTC2990_Code_To_Single_Ended_Voltage(LTC2990_Handle_t *handle, uint16_t adc_code) {
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	81fb      	strh	r3, [r7, #14]

	if(adc_code & 0x4000) { //If the code is negative
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00a      	beq.n	80012d8 <LTC2990_Code_To_Single_Ended_Voltage+0x30>
		adc_code = (adc_code ^ 0x7FFF) + 1;// Two's compliment
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	f483 43ff 	eor.w	r3, r3, #32640	@ 0x7f80
 80012c8:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3301      	adds	r3, #1
 80012d0:	807b      	strh	r3, [r7, #2]
		sign = -1;
 80012d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012d6:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80012de:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * SINGLE_ENDED_LSB * sign;
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ea:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800131c <LTC2990_Code_To_Single_Ended_Voltage+0x74>
 80012ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001302:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	ee07 3a90 	vmov	s15, r3
}
 800130c:	eeb0 0a67 	vmov.f32	s0, s15
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	39a00000 	.word	0x39a00000

08001320 <LTC2990_Read_Register>:

int8_t LTC2990_Read_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t* data) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af04      	add	r7, sp, #16
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	460b      	mov	r3, r1
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(handle->hi2c, handle->i2c_address << 1, reg_address, 1, data, 1, TIMEOUT);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	791b      	ldrb	r3, [r3, #4]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	b299      	uxth	r1, r3
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	b29a      	uxth	r2, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2301      	movs	r3, #1
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	f001 fc67 	bl	8002c20 <HAL_I2C_Mem_Read>
 8001352:	4603      	mov	r3, r0
 8001354:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK) {
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <LTC2990_Read_Register+0x40>
		return 0;
 800135c:	2300      	movs	r3, #0
 800135e:	e005      	b.n	800136c <LTC2990_Read_Register+0x4c>
	}
	CDC_Transmit_Print("I2C Read Register failed, status: %d\n", status);
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	4619      	mov	r1, r3
 8001364:	4803      	ldr	r0, [pc, #12]	@ (8001374 <LTC2990_Read_Register+0x54>)
 8001366:	f000 f835 	bl	80013d4 <CDC_Transmit_Print>
	return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	08010f9c 	.word	0x08010f9c

08001378 <LTC2990_Write_Register>:
//	}
//	return 0;
//}


int8_t LTC2990_Write_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t data) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af04      	add	r7, sp, #16
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
 8001384:	4613      	mov	r3, r2
 8001386:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(handle->hi2c, handle->i2c_address << 1, (uint16_t)reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, TIMEOUT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	b299      	uxth	r1, r3
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	b29a      	uxth	r2, r3
 8001398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	1cbb      	adds	r3, r7, #2
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	f001 fb26 	bl	80029f8 <HAL_I2C_Mem_Write>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK) {
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <LTC2990_Write_Register+0x42>
		return 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e005      	b.n	80013c6 <LTC2990_Write_Register+0x4e>
	}
	CDC_Transmit_Print("I2C Write Register failed, status: %d\n", status);
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	4619      	mov	r1, r3
 80013be:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <LTC2990_Write_Register+0x58>)
 80013c0:	f000 f808 	bl	80013d4 <CDC_Transmit_Print>

	return 1;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	08010fc4 	.word	0x08010fc4

080013d4 <CDC_Transmit_Print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CDC_Transmit_Print(const char *format, ...)
{
 80013d4:	b40f      	push	{r0, r1, r2, r3}
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b09c      	sub	sp, #112	@ 0x70
 80013da:	af00      	add	r7, sp, #0
  char buf[PRINT_BUFFER_SIZE];
  va_list args;
  va_start(args, format);
 80013dc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013e0:	607b      	str	r3, [r7, #4]
  int n = vsprintf(buf, format, args);
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00d fbe0 	bl	800ebb0 <vsiprintf>
 80013f0:	66f8      	str	r0, [r7, #108]	@ 0x6c
  va_end(args);
  CDC_Transmit_FS(buf, n);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00c fa1b 	bl	800d834 <CDC_Transmit_FS>
}
 80013fe:	bf00      	nop
 8001400:	3770      	adds	r7, #112	@ 0x70
 8001402:	46bd      	mov	sp, r7
 8001404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001408:	b004      	add	sp, #16
 800140a:	4770      	bx	lr

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001410:	f000 fd85 	bl	8001f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001414:	f000 f874 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f000 f988 	bl	800172c <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800141c:	f000 f8b2 	bl	8001584 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8001420:	f000 f8f8 	bl	8001614 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001424:	f000 f936 	bl	8001694 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_FDCAN_Start(&hfdcan2);
 8001428:	4820      	ldr	r0, [pc, #128]	@ (80014ac <main+0xa0>)
 800142a:	f001 f80b 	bl	8002444 <HAL_FDCAN_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800142e:	f009 fa85 	bl	800a93c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorQueue */
  sensorQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &sensorQueue_attributes);
 8001432:	4a1f      	ldr	r2, [pc, #124]	@ (80014b0 <main+0xa4>)
 8001434:	2102      	movs	r1, #2
 8001436:	2010      	movs	r0, #16
 8001438:	f009 fb78 	bl	800ab2c <osMessageQueueNew>
 800143c:	4603      	mov	r3, r0
 800143e:	4a1d      	ldr	r2, [pc, #116]	@ (80014b4 <main+0xa8>)
 8001440:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED */
  blinkLEDHandle = osThreadNew(StartBlink, NULL, &blinkLED_attributes);
 8001442:	4a1d      	ldr	r2, [pc, #116]	@ (80014b8 <main+0xac>)
 8001444:	2100      	movs	r1, #0
 8001446:	481d      	ldr	r0, [pc, #116]	@ (80014bc <main+0xb0>)
 8001448:	f009 fac2 	bl	800a9d0 <osThreadNew>
 800144c:	4603      	mov	r3, r0
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <main+0xb4>)
 8001450:	6013      	str	r3, [r2, #0]

  /* creation of readVoltageTask */
  readVoltageTaskHandle = osThreadNew(startReadVoltageTask, NULL, &readVoltageTask_attributes);
 8001452:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <main+0xb8>)
 8001454:	2100      	movs	r1, #0
 8001456:	481c      	ldr	r0, [pc, #112]	@ (80014c8 <main+0xbc>)
 8001458:	f009 faba 	bl	800a9d0 <osThreadNew>
 800145c:	4603      	mov	r3, r0
 800145e:	4a1b      	ldr	r2, [pc, #108]	@ (80014cc <main+0xc0>)
 8001460:	6013      	str	r3, [r2, #0]

  /* creation of sendMessage */
  sendMessageHandle = osThreadNew(StartSendMessage, NULL, &sendMessage_attributes);
 8001462:	4a1b      	ldr	r2, [pc, #108]	@ (80014d0 <main+0xc4>)
 8001464:	2100      	movs	r1, #0
 8001466:	481b      	ldr	r0, [pc, #108]	@ (80014d4 <main+0xc8>)
 8001468:	f009 fab2 	bl	800a9d0 <osThreadNew>
 800146c:	4603      	mov	r3, r0
 800146e:	4a1a      	ldr	r2, [pc, #104]	@ (80014d8 <main+0xcc>)
 8001470:	6013      	str	r3, [r2, #0]

  /* creation of readCurrentTask */
  readCurrentTaskHandle = osThreadNew(startReadCurrentTask, NULL, &readCurrentTask_attributes);
 8001472:	4a1a      	ldr	r2, [pc, #104]	@ (80014dc <main+0xd0>)
 8001474:	2100      	movs	r1, #0
 8001476:	481a      	ldr	r0, [pc, #104]	@ (80014e0 <main+0xd4>)
 8001478:	f009 faaa 	bl	800a9d0 <osThreadNew>
 800147c:	4603      	mov	r3, r0
 800147e:	4a19      	ldr	r2, [pc, #100]	@ (80014e4 <main+0xd8>)
 8001480:	6013      	str	r3, [r2, #0]

  /* creation of printCurrent */
  printCurrentHandle = osThreadNew(startPrintCurrent, NULL, &printCurrent_attributes);
 8001482:	4a19      	ldr	r2, [pc, #100]	@ (80014e8 <main+0xdc>)
 8001484:	2100      	movs	r1, #0
 8001486:	4819      	ldr	r0, [pc, #100]	@ (80014ec <main+0xe0>)
 8001488:	f009 faa2 	bl	800a9d0 <osThreadNew>
 800148c:	4603      	mov	r3, r0
 800148e:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <main+0xe4>)
 8001490:	6013      	str	r3, [r2, #0]

  /* creation of printVoltage */
  printVoltageHandle = osThreadNew(startPrintVoltage, NULL, &printVoltage_attributes);
 8001492:	4a18      	ldr	r2, [pc, #96]	@ (80014f4 <main+0xe8>)
 8001494:	2100      	movs	r1, #0
 8001496:	4818      	ldr	r0, [pc, #96]	@ (80014f8 <main+0xec>)
 8001498:	f009 fa9a 	bl	800a9d0 <osThreadNew>
 800149c:	4603      	mov	r3, r0
 800149e:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <main+0xf0>)
 80014a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014a2:	f009 fa6f 	bl	800a984 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014a6:	bf00      	nop
 80014a8:	e7fd      	b.n	80014a6 <main+0x9a>
 80014aa:	bf00      	nop
 80014ac:	2000036c 	.word	0x2000036c
 80014b0:	0801119c 	.word	0x0801119c
 80014b4:	200004d0 	.word	0x200004d0
 80014b8:	080110c4 	.word	0x080110c4
 80014bc:	080017ed 	.word	0x080017ed
 80014c0:	200004b8 	.word	0x200004b8
 80014c4:	080110e8 	.word	0x080110e8
 80014c8:	0800181d 	.word	0x0800181d
 80014cc:	200004bc 	.word	0x200004bc
 80014d0:	0801110c 	.word	0x0801110c
 80014d4:	080018a9 	.word	0x080018a9
 80014d8:	200004c0 	.word	0x200004c0
 80014dc:	08011130 	.word	0x08011130
 80014e0:	080018b9 	.word	0x080018b9
 80014e4:	200004c4 	.word	0x200004c4
 80014e8:	08011154 	.word	0x08011154
 80014ec:	080018c9 	.word	0x080018c9
 80014f0:	200004c8 	.word	0x200004c8
 80014f4:	08011178 	.word	0x08011178
 80014f8:	080018d9 	.word	0x080018d9
 80014fc:	200004cc 	.word	0x200004cc

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b094      	sub	sp, #80	@ 0x50
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	2238      	movs	r2, #56	@ 0x38
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f00d fb58 	bl	800ebc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001522:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001526:	f003 fcef 	bl	8004f08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800152a:	2322      	movs	r3, #34	@ 0x22
 800152c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2340      	movs	r3, #64	@ 0x40
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001538:	2301      	movs	r3, #1
 800153a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fd93 	bl	8005070 <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001550:	f000 fa0c 	bl	800196c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001554:	230f      	movs	r3, #15
 8001556:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001558:	2301      	movs	r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f004 f891 	bl	8005694 <HAL_RCC_ClockConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001578:	f000 f9f8 	bl	800196c <Error_Handler>
  }
}
 800157c:	bf00      	nop
 800157e:	3750      	adds	r7, #80	@ 0x50
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001588:	4b20      	ldr	r3, [pc, #128]	@ (800160c <MX_FDCAN2_Init+0x88>)
 800158a:	4a21      	ldr	r2, [pc, #132]	@ (8001610 <MX_FDCAN2_Init+0x8c>)
 800158c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800158e:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <MX_FDCAN2_Init+0x88>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <MX_FDCAN2_Init+0x88>)
 8001596:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800159a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_FDCAN2_Init+0x88>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 80015ba:	4b14      	ldr	r3, [pc, #80]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015bc:	2210      	movs	r2, #16
 80015be:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015c2:	223f      	movs	r2, #63	@ 0x3f
 80015c4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015c8:	2210      	movs	r2, #16
 80015ca:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015d4:	2204      	movs	r2, #4
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015da:	220d      	movs	r2, #13
 80015dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 80015ea:	4b08      	ldr	r3, [pc, #32]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015f8:	f000 fdca 	bl	8002190 <HAL_FDCAN_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8001602:	f000 f9b3 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000036c 	.word	0x2000036c
 8001610:	40006800 	.word	0x40006800

08001614 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001618:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <MX_I2C2_Init+0x74>)
 800161a:	4a1c      	ldr	r2, [pc, #112]	@ (800168c <MX_I2C2_Init+0x78>)
 800161c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001620:	4a1b      	ldr	r2, [pc, #108]	@ (8001690 <MX_I2C2_Init+0x7c>)
 8001622:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001624:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162a:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <MX_I2C2_Init+0x74>)
 800162c:	2201      	movs	r2, #1
 800162e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001636:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <MX_I2C2_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <MX_I2C2_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800164e:	480e      	ldr	r0, [pc, #56]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001650:	f001 f936 	bl	80028c0 <HAL_I2C_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800165a:	f000 f987 	bl	800196c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800165e:	2100      	movs	r1, #0
 8001660:	4809      	ldr	r0, [pc, #36]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001662:	f001 feb9 	bl	80033d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800166c:	f000 f97e 	bl	800196c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001670:	2100      	movs	r1, #0
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001674:	f001 fefb 	bl	800346e <HAL_I2CEx_ConfigDigitalFilter>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800167e:	f000 f975 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200003d0 	.word	0x200003d0
 800168c:	40005800 	.word	0x40005800
 8001690:	00503d58 	.word	0x00503d58

08001694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 800169a:	4a23      	ldr	r2, [pc, #140]	@ (8001728 <MX_USART2_UART_Init+0x94>)
 800169c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016dc:	4811      	ldr	r0, [pc, #68]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016de:	f004 ff9d 	bl	800661c <HAL_UART_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016e8:	f000 f940 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	480d      	ldr	r0, [pc, #52]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016f0:	f005 fd38 	bl	8007164 <HAL_UARTEx_SetTxFifoThreshold>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016fa:	f000 f937 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fe:	2100      	movs	r1, #0
 8001700:	4808      	ldr	r0, [pc, #32]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 8001702:	f005 fd6d 	bl	80071e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800170c:	f000 f92e 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 8001712:	f005 fcee 	bl	80070f2 <HAL_UARTEx_DisableFifoMode>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800171c:	f000 f926 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000424 	.word	0x20000424
 8001728:	40004400 	.word	0x40004400

0800172c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	4a26      	ldr	r2, [pc, #152]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174e:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	4a20      	ldr	r2, [pc, #128]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001760:	f043 0320 	orr.w	r3, r3, #32
 8001764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin|BACKLIGHT_LEDS_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80017a8:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <MX_GPIO_Init+0xb8>)
 80017aa:	f001 f857 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRONT_LED_Pin BACKLIGHT_LEDS_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin|BACKLIGHT_LEDS_Pin;
 80017ae:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <MX_GPIO_Init+0xb8>)
 80017c8:	f000 fec6 	bl	8002558 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <MX_GPIO_Init+0xbc>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a05      	ldr	r2, [pc, #20]	@ (80017e8 <MX_GPIO_Init+0xbc>)
 80017d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017d6:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	@ 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000400 	.word	0x48000400
 80017e8:	40010000 	.word	0x40010000

080017ec <StartBlink>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 80017f4:	f00b ff60 	bl	800d6b8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(GPIOB, BACKLIGHT_LEDS_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017fe:	4806      	ldr	r0, [pc, #24]	@ (8001818 <StartBlink+0x2c>)
 8001800:	f001 f82c 	bl	800285c <HAL_GPIO_WritePin>
  /* Infinite loop */
  for (;;)
  {

    HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 8001804:	2120      	movs	r1, #32
 8001806:	4804      	ldr	r0, [pc, #16]	@ (8001818 <StartBlink+0x2c>)
 8001808:	f001 f840 	bl	800288c <HAL_GPIO_TogglePin>
    osDelay(100);
 800180c:	2064      	movs	r0, #100	@ 0x64
 800180e:	f009 f972 	bl	800aaf6 <osDelay>
    HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 8001812:	bf00      	nop
 8001814:	e7f6      	b.n	8001804 <StartBlink+0x18>
 8001816:	bf00      	nop
 8001818:	48000400 	.word	0x48000400

0800181c <startReadVoltageTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startReadVoltageTask */
void startReadVoltageTask(void *argument)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	@ 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadVoltageTask */
  //MX_USB_Device_Init();
  LTC2990_Init(&LTC2990_Handle, &hi2c2);
 8001824:	491c      	ldr	r1, [pc, #112]	@ (8001898 <startReadVoltageTask+0x7c>)
 8001826:	481d      	ldr	r0, [pc, #116]	@ (800189c <startReadVoltageTask+0x80>)
 8001828:	f7ff fb7c 	bl	8000f24 <LTC2990_Init>
  static const float multipliers[4] = {28.0f / 10.0f, 25.0f / 10.0f, 25.0f / 10.0f, 25.0f / 10.0f};
  //static const float multipliers[4] = {1, 1, 1, 1};
  /* Infinite loop */
  for (;;)
  {
    LTC2990_Step(&LTC2990_Handle);
 800182c:	481b      	ldr	r0, [pc, #108]	@ (800189c <startReadVoltageTask+0x80>)
 800182e:	f7ff fbcb 	bl	8000fc8 <LTC2990_Step>
    float raw[4];
    //damn path you freaky ;)))
    LTC2990_Get_Voltage(&LTC2990_Handle, raw);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4818      	ldr	r0, [pc, #96]	@ (800189c <startReadVoltageTask+0x80>)
 800183a:	f7ff fc31 	bl	80010a0 <LTC2990_Get_Voltage>
    instrumentationPayload_t payload;
    for (int i = 0; i < 4; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001842:	e018      	b.n	8001876 <startReadVoltageTask+0x5a>
    {
      payload.voltages[i] = raw[i] * multipliers[i];
 8001844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	3330      	adds	r3, #48	@ 0x30
 800184a:	443b      	add	r3, r7
 800184c:	3b14      	subs	r3, #20
 800184e:	ed93 7a00 	vldr	s14, [r3]
 8001852:	4a13      	ldr	r2, [pc, #76]	@ (80018a0 <startReadVoltageTask+0x84>)
 8001854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	3330      	adds	r3, #48	@ 0x30
 8001868:	443b      	add	r3, r7
 800186a:	3b28      	subs	r3, #40	@ 0x28
 800186c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8001870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001872:	3301      	adds	r3, #1
 8001874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001878:	2b03      	cmp	r3, #3
 800187a:	dde3      	ble.n	8001844 <startReadVoltageTask+0x28>
    }
    osMessageQueuePut(sensorQueueHandle, &payload, 0, osWaitForever);
 800187c:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <startReadVoltageTask+0x88>)
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	f107 0108 	add.w	r1, r7, #8
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
 8001888:	2200      	movs	r2, #0
 800188a:	f009 f9c3 	bl	800ac14 <osMessageQueuePut>
    osDelay(50);
 800188e:	2032      	movs	r0, #50	@ 0x32
 8001890:	f009 f931 	bl	800aaf6 <osDelay>
  {
 8001894:	e7ca      	b.n	800182c <startReadVoltageTask+0x10>
 8001896:	bf00      	nop
 8001898:	200003d0 	.word	0x200003d0
 800189c:	200004d4 	.word	0x200004d4
 80018a0:	080111b4 	.word	0x080111b4
 80018a4:	200004d0 	.word	0x200004d0

080018a8 <StartSendMessage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendMessage */
void StartSendMessage(void *argument)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
//    memcpy(txBuf, &payload, sizeof(payload));
//    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, txBuf) != HAL_OK)
//    {
//      CDC_Transmit_Print("Error!\r\n");
//    }
    osDelay(100);
 80018b0:	2064      	movs	r0, #100	@ 0x64
 80018b2:	f009 f920 	bl	800aaf6 <osDelay>
 80018b6:	e7fb      	b.n	80018b0 <StartSendMessage+0x8>

080018b8 <startReadCurrentTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadCurrentTask */
void startReadCurrentTask(void *argument)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  {
//	  instrumentationPayload_t payload;
//	  CLTC2990_Step(&CLTC2990_Handle);
//	  payload.current = CLTC2990_Get_Current(&CLTC2990_Handle);
//	  osMessageQueuePut(sensorQueueHandle, &payload, 0, osWaitForever);
	  osDelay(150);
 80018c0:	2096      	movs	r0, #150	@ 0x96
 80018c2:	f009 f918 	bl	800aaf6 <osDelay>
 80018c6:	e7fb      	b.n	80018c0 <startReadCurrentTask+0x8>

080018c8 <startPrintCurrent>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintCurrent */
void startPrintCurrent(void *argument)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	//MX_USB_Device_Init();
  for(;;)
  {
	//CDC_Transmit_Print("Current is: %f \n", CLTC2990_Get_Current(&CLTC2990_Handle));
    osDelay(100);
 80018d0:	2064      	movs	r0, #100	@ 0x64
 80018d2:	f009 f910 	bl	800aaf6 <osDelay>
 80018d6:	e7fb      	b.n	80018d0 <startPrintCurrent+0x8>

080018d8 <startPrintVoltage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintVoltage */
void startPrintVoltage(void *argument)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b089      	sub	sp, #36	@ 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	static const float multipliers[4] = {28.0f / 10.0f, 25.0f / 10.0f, 25.0f / 10.0f, 25.0f / 10.0f};
	//static const float multipliers[4] = {1, 1, 1, 1};
  for(;;)
  {
	  float voltages[4];
	  LTC2990_Get_Voltage(&LTC2990_Handle, voltages);
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	4815      	ldr	r0, [pc, #84]	@ (800193c <startPrintVoltage+0x64>)
 80018e8:	f7ff fbda 	bl	80010a0 <LTC2990_Get_Voltage>
	  for (int i = 0; i < 4; i++) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	e01d      	b.n	800192e <startPrintVoltage+0x56>
		CDC_Transmit_Print("Voltage %d: %f \r\n", i + 1, voltages[i] * multipliers[i]);
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	1c5c      	adds	r4, r3, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	3320      	adds	r3, #32
 80018fc:	443b      	add	r3, r7
 80018fe:	3b14      	subs	r3, #20
 8001900:	ed93 7a00 	vldr	s14, [r3]
 8001904:	4a0e      	ldr	r2, [pc, #56]	@ (8001940 <startPrintVoltage+0x68>)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	ee17 0a90 	vmov	r0, s15
 8001918:	f7fe fe3e 	bl	8000598 <__aeabi_f2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4621      	mov	r1, r4
 8001922:	4808      	ldr	r0, [pc, #32]	@ (8001944 <startPrintVoltage+0x6c>)
 8001924:	f7ff fd56 	bl	80013d4 <CDC_Transmit_Print>
	  for (int i = 0; i < 4; i++) {
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	3301      	adds	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2b03      	cmp	r3, #3
 8001932:	ddde      	ble.n	80018f2 <startPrintVoltage+0x1a>
	  }
    osDelay(1);
 8001934:	2001      	movs	r0, #1
 8001936:	f009 f8de 	bl	800aaf6 <osDelay>
  {
 800193a:	e7d1      	b.n	80018e0 <startPrintVoltage+0x8>
 800193c:	200004d4 	.word	0x200004d4
 8001940:	080111c4 	.word	0x080111c4
 8001944:	08011050 	.word	0x08011050

08001948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800195a:	f000 faf9 	bl	8001f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40012c00 	.word	0x40012c00

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <Error_Handler+0x8>

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <HAL_MspInit+0x50>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001982:	4a11      	ldr	r2, [pc, #68]	@ (80019c8 <HAL_MspInit+0x50>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6613      	str	r3, [r2, #96]	@ 0x60
 800198a:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <HAL_MspInit+0x50>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <HAL_MspInit+0x50>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199a:	4a0b      	ldr	r2, [pc, #44]	@ (80019c8 <HAL_MspInit+0x50>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_MspInit+0x50>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	210f      	movs	r1, #15
 80019b2:	f06f 0001 	mvn.w	r0, #1
 80019b6:	f000 fbc3 	bl	8002140 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019ba:	f003 fb49 	bl	8005050 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b09e      	sub	sp, #120	@ 0x78
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2250      	movs	r2, #80	@ 0x50
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f00d f8e9 	bl	800ebc4 <memset>
  if(hfdcan->Instance==FDCAN2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a20      	ldr	r2, [pc, #128]	@ (8001a78 <HAL_FDCAN_MspInit+0xac>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d138      	bne.n	8001a6e <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80019fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a00:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a06:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f004 f88f 	bl	8005b30 <HAL_RCCEx_PeriphCLKConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001a18:	f7ff ffa8 	bl	800196c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a1c:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <HAL_FDCAN_MspInit+0xb0>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a20:	4a16      	ldr	r2, [pc, #88]	@ (8001a7c <HAL_FDCAN_MspInit+0xb0>)
 8001a22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a28:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <HAL_FDCAN_MspInit+0xb0>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <HAL_FDCAN_MspInit+0xb0>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a38:	4a10      	ldr	r2, [pc, #64]	@ (8001a7c <HAL_FDCAN_MspInit+0xb0>)
 8001a3a:	f043 0302 	orr.w	r3, r3, #2
 8001a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a40:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <HAL_FDCAN_MspInit+0xb0>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a4c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001a5e:	2309      	movs	r3, #9
 8001a60:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <HAL_FDCAN_MspInit+0xb4>)
 8001a6a:	f000 fd75 	bl	8002558 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8001a6e:	bf00      	nop
 8001a70:	3778      	adds	r7, #120	@ 0x78
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40006800 	.word	0x40006800
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	48000400 	.word	0x48000400

08001a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b09e      	sub	sp, #120	@ 0x78
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2250      	movs	r2, #80	@ 0x50
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00d f88d 	bl	800ebc4 <memset>
  if(hi2c->Instance==I2C2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1f      	ldr	r2, [pc, #124]	@ (8001b2c <HAL_I2C_MspInit+0xa8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d137      	bne.n	8001b24 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f004 f835 	bl	8005b30 <HAL_RCCEx_PeriphCLKConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001acc:	f7ff ff4e 	bl	800196c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <HAL_I2C_MspInit+0xac>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad4:	4a16      	ldr	r2, [pc, #88]	@ (8001b30 <HAL_I2C_MspInit+0xac>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_I2C_MspInit+0xac>)
 8001ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ae8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001aec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aee:	2312      	movs	r3, #18
 8001af0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001afa:	2304      	movs	r3, #4
 8001afc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b08:	f000 fd26 	bl	8002558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <HAL_I2C_MspInit+0xac>)
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b10:	4a07      	ldr	r2, [pc, #28]	@ (8001b30 <HAL_I2C_MspInit+0xac>)
 8001b12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <HAL_I2C_MspInit+0xac>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001b24:	bf00      	nop
 8001b26:	3778      	adds	r7, #120	@ 0x78
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40005800 	.word	0x40005800
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b09e      	sub	sp, #120	@ 0x78
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2250      	movs	r2, #80	@ 0x50
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00d f835 	bl	800ebc4 <memset>
  if(huart->Instance==USART2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bdc <HAL_UART_MspInit+0xa8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d136      	bne.n	8001bd2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b64:	2302      	movs	r3, #2
 8001b66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 ffdd 	bl	8005b30 <HAL_RCCEx_PeriphCLKConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b7c:	f7ff fef6 	bl	800196c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b80:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <HAL_UART_MspInit+0xac>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b84:	4a16      	ldr	r2, [pc, #88]	@ (8001be0 <HAL_UART_MspInit+0xac>)
 8001b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b8c:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <HAL_UART_MspInit+0xac>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <HAL_UART_MspInit+0xac>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9c:	4a10      	ldr	r2, [pc, #64]	@ (8001be0 <HAL_UART_MspInit+0xac>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_UART_MspInit+0xac>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bce:	f000 fcc3 	bl	8002558 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3778      	adds	r7, #120	@ 0x78
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40004400 	.word	0x40004400
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	@ 0x30
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca8 <HAL_InitTick+0xc4>)
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca8 <HAL_InitTick+0xc4>)
 8001bfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c00:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <HAL_InitTick+0xc4>)
 8001c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c0c:	f107 020c 	add.w	r2, r7, #12
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 ff12 	bl	8005a40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c1c:	f003 fefa 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8001c20:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c24:	4a21      	ldr	r2, [pc, #132]	@ (8001cac <HAL_InitTick+0xc8>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	0c9b      	lsrs	r3, r3, #18
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb0 <HAL_InitTick+0xcc>)
 8001c32:	4a20      	ldr	r2, [pc, #128]	@ (8001cb4 <HAL_InitTick+0xd0>)
 8001c34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_InitTick+0xcc>)
 8001c38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb0 <HAL_InitTick+0xcc>)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c44:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_InitTick+0xcc>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_InitTick+0xcc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001c50:	4817      	ldr	r0, [pc, #92]	@ (8001cb0 <HAL_InitTick+0xcc>)
 8001c52:	f004 f9a9 	bl	8005fa8 <HAL_TIM_Base_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d11b      	bne.n	8001c9c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c64:	4812      	ldr	r0, [pc, #72]	@ (8001cb0 <HAL_InitTick+0xcc>)
 8001c66:	f004 fa01 	bl	800606c <HAL_TIM_Base_Start_IT>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d111      	bne.n	8001c9c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c78:	2019      	movs	r0, #25
 8001c7a:	f000 fa7b 	bl	8002174 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d808      	bhi.n	8001c96 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	2019      	movs	r0, #25
 8001c8a:	f000 fa59 	bl	8002140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <HAL_InitTick+0xd4>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e002      	b.n	8001c9c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3730      	adds	r7, #48	@ 0x30
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	200004ec 	.word	0x200004ec
 8001cb4:	40012c00 	.word	0x40012c00
 8001cb8:	20000004 	.word	0x20000004

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <BusFault_Handler+0x4>

08001cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <UsageFault_Handler+0x4>

08001ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <USB_LP_IRQHandler+0x10>)
 8001cfa:	f001 fcf4 	bl	80036e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000a08c 	.word	0x2000a08c

08001d08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d0e:	f004 fa1d 	bl	800614c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200004ec 	.word	0x200004ec

08001d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return 1;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_kill>:

int _kill(int pid, int sig)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d36:	f00c fff5 	bl	800ed24 <__errno>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2216      	movs	r2, #22
 8001d3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_exit>:

void _exit (int status)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ffe7 	bl	8001d2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5e:	bf00      	nop
 8001d60:	e7fd      	b.n	8001d5e <_exit+0x12>

08001d62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e00a      	b.n	8001d8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d74:	f3af 8000 	nop.w
 8001d78:	4601      	mov	r1, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	60ba      	str	r2, [r7, #8]
 8001d80:	b2ca      	uxtb	r2, r1
 8001d82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3301      	adds	r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	dbf0      	blt.n	8001d74 <_read+0x12>
  }

  return len;
 8001d92:	687b      	ldr	r3, [r7, #4]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e009      	b.n	8001dc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	60ba      	str	r2, [r7, #8]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbf1      	blt.n	8001dae <_write+0x12>
  }
  return len;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_close>:

int _close(int file)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dfc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_isatty>:

int _isatty(int file)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e14:	2301      	movs	r3, #1
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e44:	4a14      	ldr	r2, [pc, #80]	@ (8001e98 <_sbrk+0x5c>)
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <_sbrk+0x60>)
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <_sbrk+0x64>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <_sbrk+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e6c:	f00c ff5a 	bl	800ed24 <__errno>
 8001e70:	4603      	mov	r3, r0
 8001e72:	220c      	movs	r2, #12
 8001e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e82:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ea0 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2001c000 	.word	0x2001c000
 8001e9c:	00000400 	.word	0x00000400
 8001ea0:	20000538 	.word	0x20000538
 8001ea4:	2000a6d8 	.word	0x2000a6d8

08001ea8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <SystemInit+0x20>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb2:	4a05      	ldr	r2, [pc, #20]	@ (8001ec8 <SystemInit+0x20>)
 8001eb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ecc:	480d      	ldr	r0, [pc, #52]	@ (8001f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ece:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ed0:	f7ff ffea 	bl	8001ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed4:	480c      	ldr	r0, [pc, #48]	@ (8001f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ed6:	490d      	ldr	r1, [pc, #52]	@ (8001f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f10 <LoopForever+0xe>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0a      	ldr	r2, [pc, #40]	@ (8001f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eec:	4c0a      	ldr	r4, [pc, #40]	@ (8001f18 <LoopForever+0x16>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001efa:	f00c ff19 	bl	800ed30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001efe:	f7ff fa85 	bl	800140c <main>

08001f02 <LoopForever>:

LoopForever:
    b LoopForever
 8001f02:	e7fe      	b.n	8001f02 <LoopForever>
  ldr   r0, =_estack
 8001f04:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f0c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001f10:	0801159c 	.word	0x0801159c
  ldr r2, =_sbss
 8001f14:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001f18:	2000a6d4 	.word	0x2000a6d4

08001f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC1_2_IRQHandler>

08001f1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f000 f8fe 	bl	800212a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f2e:	200f      	movs	r0, #15
 8001f30:	f7ff fe58 	bl	8001be4 <HAL_InitTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	71fb      	strb	r3, [r7, #7]
 8001f3e:	e001      	b.n	8001f44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f40:	f7ff fd1a 	bl	8001978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f44:	79fb      	ldrb	r3, [r7, #7]

}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <HAL_IncTick+0x1c>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <HAL_IncTick+0x20>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a03      	ldr	r2, [pc, #12]	@ (8001f6c <HAL_IncTick+0x1c>)
 8001f60:	6013      	str	r3, [r2, #0]
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	2000053c 	.word	0x2000053c
 8001f70:	20000008 	.word	0x20000008

08001f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return uwTick;
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <HAL_GetTick+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	2000053c 	.word	0x2000053c

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff ffee 	bl	8001f74 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d004      	beq.n	8001fb0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_Delay+0x40>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fb0:	bf00      	nop
 8001fb2:	f7ff ffdf 	bl	8001f74 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d8f7      	bhi.n	8001fb2 <HAL_Delay+0x26>
  {
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002002:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	60d3      	str	r3, [r2, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <__NVIC_GetPriorityGrouping+0x18>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0307 	and.w	r3, r3, #7
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	db0b      	blt.n	800205e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	4907      	ldr	r1, [pc, #28]	@ (800206c <__NVIC_EnableIRQ+0x38>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	2001      	movs	r0, #1
 8002056:	fa00 f202 	lsl.w	r2, r0, r2
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100

08002070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	@ (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	@ (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	@ 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
         );
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	@ 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ff4c 	bl	8001fd0 <__NVIC_SetPriorityGrouping>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800214e:	f7ff ff63 	bl	8002018 <__NVIC_GetPriorityGrouping>
 8002152:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	6978      	ldr	r0, [r7, #20]
 800215a:	f7ff ffb3 	bl	80020c4 <NVIC_EncodePriority>
 800215e:	4602      	mov	r2, r0
 8002160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff82 	bl	8002070 <__NVIC_SetPriority>
}
 800216c:	bf00      	nop
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff56 	bl	8002034 <__NVIC_EnableIRQ>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e147      	b.n	8002432 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff fc08 	bl	80019cc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0210 	bic.w	r2, r2, #16
 80021ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021cc:	f7ff fed2 	bl	8001f74 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80021d2:	e012      	b.n	80021fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80021d4:	f7ff fece 	bl	8001f74 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b0a      	cmp	r3, #10
 80021e0:	d90b      	bls.n	80021fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2203      	movs	r2, #3
 80021f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e11b      	b.n	8002432 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b08      	cmp	r3, #8
 8002206:	d0e5      	beq.n	80021d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002218:	f7ff feac 	bl	8001f74 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800221e:	e012      	b.n	8002246 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002220:	f7ff fea8 	bl	8001f74 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b0a      	cmp	r3, #10
 800222c:	d90b      	bls.n	8002246 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2203      	movs	r2, #3
 800223e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0f5      	b.n	8002432 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0e5      	beq.n	8002220 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0202 	orr.w	r2, r2, #2
 8002262:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a74      	ldr	r2, [pc, #464]	@ (800243c <HAL_FDCAN_Init+0x2ac>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d103      	bne.n	8002276 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800226e:	4a74      	ldr	r2, [pc, #464]	@ (8002440 <HAL_FDCAN_Init+0x2b0>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7c1b      	ldrb	r3, [r3, #16]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800228c:	619a      	str	r2, [r3, #24]
 800228e:	e007      	b.n	80022a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800229e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7c5b      	ldrb	r3, [r3, #17]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d108      	bne.n	80022ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022b6:	619a      	str	r2, [r3, #24]
 80022b8:	e007      	b.n	80022ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7c9b      	ldrb	r3, [r3, #18]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022e0:	619a      	str	r2, [r3, #24]
 80022e2:	e007      	b.n	80022f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002318:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0210 	bic.w	r2, r2, #16
 8002328:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d108      	bne.n	8002344 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0204 	orr.w	r2, r2, #4
 8002340:	619a      	str	r2, [r3, #24]
 8002342:	e02c      	b.n	800239e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d028      	beq.n	800239e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d01c      	beq.n	800238e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002362:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0210 	orr.w	r2, r2, #16
 8002372:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d110      	bne.n	800239e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0220 	orr.w	r2, r2, #32
 800238a:	619a      	str	r2, [r3, #24]
 800238c:	e007      	b.n	800239e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0220 	orr.w	r2, r2, #32
 800239c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80023ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80023b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	3b01      	subs	r3, #1
 80023c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80023c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80023c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80023d2:	d115      	bne.n	8002400 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	3b01      	subs	r3, #1
 80023e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80023e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	3b01      	subs	r3, #1
 80023ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80023ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	3b01      	subs	r3, #1
 80023f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80023fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80023fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f83c 	bl	8002494 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40006400 	.word	0x40006400
 8002440:	40006500 	.word	0x40006500

08002444 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d110      	bne.n	800247a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e006      	b.n	8002488 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247e:	f043 0204 	orr.w	r2, r3, #4
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
  }
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800249c:	4b2c      	ldr	r3, [pc, #176]	@ (8002550 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800249e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002554 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d103      	bne.n	80024b2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80024b0:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024c0:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c8:	041a      	lsls	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024e6:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ee:	061a      	lsls	r2, r3, #24
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e005      	b.n	8002534 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3304      	adds	r3, #4
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d3f3      	bcc.n	8002528 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	4000a400 	.word	0x4000a400
 8002554:	40006800 	.word	0x40006800

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002566:	e15a      	b.n	800281e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2101      	movs	r1, #1
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	4013      	ands	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 814c 	beq.w	8002818 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d005      	beq.n	8002598 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002594:	2b02      	cmp	r3, #2
 8002596:	d130      	bne.n	80025fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ce:	2201      	movs	r2, #1
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f003 0201 	and.w	r2, r3, #1
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b03      	cmp	r3, #3
 8002604:	d017      	beq.n	8002636 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d123      	bne.n	800268a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	08da      	lsrs	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	08da      	lsrs	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3208      	adds	r2, #8
 8002684:	6939      	ldr	r1, [r7, #16]
 8002686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2203      	movs	r2, #3
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0203 	and.w	r2, r3, #3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80a6 	beq.w	8002818 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026cc:	4b5b      	ldr	r3, [pc, #364]	@ (800283c <HAL_GPIO_Init+0x2e4>)
 80026ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d0:	4a5a      	ldr	r2, [pc, #360]	@ (800283c <HAL_GPIO_Init+0x2e4>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80026d8:	4b58      	ldr	r3, [pc, #352]	@ (800283c <HAL_GPIO_Init+0x2e4>)
 80026da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e4:	4a56      	ldr	r2, [pc, #344]	@ (8002840 <HAL_GPIO_Init+0x2e8>)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	3302      	adds	r3, #2
 80026ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	220f      	movs	r2, #15
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800270e:	d01f      	beq.n	8002750 <HAL_GPIO_Init+0x1f8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a4c      	ldr	r2, [pc, #304]	@ (8002844 <HAL_GPIO_Init+0x2ec>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d019      	beq.n	800274c <HAL_GPIO_Init+0x1f4>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a4b      	ldr	r2, [pc, #300]	@ (8002848 <HAL_GPIO_Init+0x2f0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d013      	beq.n	8002748 <HAL_GPIO_Init+0x1f0>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a4a      	ldr	r2, [pc, #296]	@ (800284c <HAL_GPIO_Init+0x2f4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d00d      	beq.n	8002744 <HAL_GPIO_Init+0x1ec>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a49      	ldr	r2, [pc, #292]	@ (8002850 <HAL_GPIO_Init+0x2f8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d007      	beq.n	8002740 <HAL_GPIO_Init+0x1e8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a48      	ldr	r2, [pc, #288]	@ (8002854 <HAL_GPIO_Init+0x2fc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d101      	bne.n	800273c <HAL_GPIO_Init+0x1e4>
 8002738:	2305      	movs	r3, #5
 800273a:	e00a      	b.n	8002752 <HAL_GPIO_Init+0x1fa>
 800273c:	2306      	movs	r3, #6
 800273e:	e008      	b.n	8002752 <HAL_GPIO_Init+0x1fa>
 8002740:	2304      	movs	r3, #4
 8002742:	e006      	b.n	8002752 <HAL_GPIO_Init+0x1fa>
 8002744:	2303      	movs	r3, #3
 8002746:	e004      	b.n	8002752 <HAL_GPIO_Init+0x1fa>
 8002748:	2302      	movs	r3, #2
 800274a:	e002      	b.n	8002752 <HAL_GPIO_Init+0x1fa>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_GPIO_Init+0x1fa>
 8002750:	2300      	movs	r3, #0
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	f002 0203 	and.w	r2, r2, #3
 8002758:	0092      	lsls	r2, r2, #2
 800275a:	4093      	lsls	r3, r2
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002762:	4937      	ldr	r1, [pc, #220]	@ (8002840 <HAL_GPIO_Init+0x2e8>)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	3302      	adds	r3, #2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002770:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <HAL_GPIO_Init+0x300>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002794:	4a30      	ldr	r2, [pc, #192]	@ (8002858 <HAL_GPIO_Init+0x300>)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800279a:	4b2f      	ldr	r3, [pc, #188]	@ (8002858 <HAL_GPIO_Init+0x300>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027be:	4a26      	ldr	r2, [pc, #152]	@ (8002858 <HAL_GPIO_Init+0x300>)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027c4:	4b24      	ldr	r3, [pc, #144]	@ (8002858 <HAL_GPIO_Init+0x300>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002858 <HAL_GPIO_Init+0x300>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <HAL_GPIO_Init+0x300>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002812:	4a11      	ldr	r2, [pc, #68]	@ (8002858 <HAL_GPIO_Init+0x300>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	f47f ae9d 	bne.w	8002568 <HAL_GPIO_Init+0x10>
  }
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40021000 	.word	0x40021000
 8002840:	40010000 	.word	0x40010000
 8002844:	48000400 	.word	0x48000400
 8002848:	48000800 	.word	0x48000800
 800284c:	48000c00 	.word	0x48000c00
 8002850:	48001000 	.word	0x48001000
 8002854:	48001400 	.word	0x48001400
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002878:	e002      	b.n	8002880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	041a      	lsls	r2, r3, #16
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	43d9      	mvns	r1, r3
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	400b      	ands	r3, r1
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	619a      	str	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e08d      	b.n	80029ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff f8cc 	bl	8001a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	@ 0x24
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002910:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002920:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	e006      	b.n	8002948 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002946:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d108      	bne.n	8002962 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	e007      	b.n	8002972 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002970:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002984:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002994:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69d9      	ldr	r1, [r3, #28]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	817b      	strh	r3, [r7, #10]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	813b      	strh	r3, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	f040 80f9 	bne.w	8002c12 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_I2C_Mem_Write+0x34>
 8002a26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0ed      	b.n	8002c14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_Mem_Write+0x4e>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e0e6      	b.n	8002c14 <HAL_I2C_Mem_Write+0x21c>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a4e:	f7ff fa91 	bl	8001f74 <HAL_GetTick>
 8002a52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2319      	movs	r3, #25
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fac3 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0d1      	b.n	8002c14 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2221      	movs	r2, #33	@ 0x21
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2240      	movs	r2, #64	@ 0x40
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a98:	88f8      	ldrh	r0, [r7, #6]
 8002a9a:	893a      	ldrh	r2, [r7, #8]
 8002a9c:	8979      	ldrh	r1, [r7, #10]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f9d3 	bl	8002e54 <I2C_RequestMemoryWrite>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0a9      	b.n	8002c14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2bff      	cmp	r3, #255	@ 0xff
 8002ac8:	d90e      	bls.n	8002ae8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	22ff      	movs	r2, #255	@ 0xff
 8002ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	8979      	ldrh	r1, [r7, #10]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fc47 	bl	8003374 <I2C_TransferConfig>
 8002ae6:	e00f      	b.n	8002b08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	8979      	ldrh	r1, [r7, #10]
 8002afa:	2300      	movs	r3, #0
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fc36 	bl	8003374 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fac6 	bl	800309e <I2C_WaitOnTXISFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e07b      	b.n	8002c14 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d034      	beq.n	8002bc0 <HAL_I2C_Mem_Write+0x1c8>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d130      	bne.n	8002bc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b64:	2200      	movs	r2, #0
 8002b66:	2180      	movs	r1, #128	@ 0x80
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fa3f 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e04d      	b.n	8002c14 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2bff      	cmp	r3, #255	@ 0xff
 8002b80:	d90e      	bls.n	8002ba0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	22ff      	movs	r2, #255	@ 0xff
 8002b86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	8979      	ldrh	r1, [r7, #10]
 8002b90:	2300      	movs	r3, #0
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fbeb 	bl	8003374 <I2C_TransferConfig>
 8002b9e:	e00f      	b.n	8002bc0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	8979      	ldrh	r1, [r7, #10]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fbda 	bl	8003374 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d19e      	bne.n	8002b08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 faac 	bl	800312c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e01a      	b.n	8002c14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2220      	movs	r2, #32
 8002be4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c1c <HAL_I2C_Mem_Write+0x224>)
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e000      	b.n	8002c14 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c12:	2302      	movs	r3, #2
  }
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	fe00e800 	.word	0xfe00e800

08002c20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	4608      	mov	r0, r1
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	817b      	strh	r3, [r7, #10]
 8002c32:	460b      	mov	r3, r1
 8002c34:	813b      	strh	r3, [r7, #8]
 8002c36:	4613      	mov	r3, r2
 8002c38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	f040 80fd 	bne.w	8002e42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_I2C_Mem_Read+0x34>
 8002c4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c5a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0f1      	b.n	8002e44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_I2C_Mem_Read+0x4e>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e0ea      	b.n	8002e44 <HAL_I2C_Mem_Read+0x224>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c76:	f7ff f97d 	bl	8001f74 <HAL_GetTick>
 8002c7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2319      	movs	r3, #25
 8002c82:	2201      	movs	r2, #1
 8002c84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f9af 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0d5      	b.n	8002e44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2222      	movs	r2, #34	@ 0x22
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2240      	movs	r2, #64	@ 0x40
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a3a      	ldr	r2, [r7, #32]
 8002cb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cc0:	88f8      	ldrh	r0, [r7, #6]
 8002cc2:	893a      	ldrh	r2, [r7, #8]
 8002cc4:	8979      	ldrh	r1, [r7, #10]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4603      	mov	r3, r0
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f913 	bl	8002efc <I2C_RequestMemoryRead>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0ad      	b.n	8002e44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2bff      	cmp	r3, #255	@ 0xff
 8002cf0:	d90e      	bls.n	8002d10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	22ff      	movs	r2, #255	@ 0xff
 8002cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	8979      	ldrh	r1, [r7, #10]
 8002d00:	4b52      	ldr	r3, [pc, #328]	@ (8002e4c <HAL_I2C_Mem_Read+0x22c>)
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fb33 	bl	8003374 <I2C_TransferConfig>
 8002d0e:	e00f      	b.n	8002d30 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	8979      	ldrh	r1, [r7, #10]
 8002d22:	4b4a      	ldr	r3, [pc, #296]	@ (8002e4c <HAL_I2C_Mem_Read+0x22c>)
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fb22 	bl	8003374 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	2200      	movs	r2, #0
 8002d38:	2104      	movs	r1, #4
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f956 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e07c      	b.n	8002e44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d034      	beq.n	8002df0 <HAL_I2C_Mem_Read+0x1d0>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d130      	bne.n	8002df0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d94:	2200      	movs	r2, #0
 8002d96:	2180      	movs	r1, #128	@ 0x80
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f927 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e04d      	b.n	8002e44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2bff      	cmp	r3, #255	@ 0xff
 8002db0:	d90e      	bls.n	8002dd0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	22ff      	movs	r2, #255	@ 0xff
 8002db6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	8979      	ldrh	r1, [r7, #10]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fad3 	bl	8003374 <I2C_TransferConfig>
 8002dce:	e00f      	b.n	8002df0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	8979      	ldrh	r1, [r7, #10]
 8002de2:	2300      	movs	r3, #0
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fac2 	bl	8003374 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d19a      	bne.n	8002d30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f994 	bl	800312c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e01a      	b.n	8002e44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2220      	movs	r2, #32
 8002e14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <HAL_I2C_Mem_Read+0x230>)
 8002e22:	400b      	ands	r3, r1
 8002e24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
  }
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	80002400 	.word	0x80002400
 8002e50:	fe00e800 	.word	0xfe00e800

08002e54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	4611      	mov	r1, r2
 8002e60:	461a      	mov	r2, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	817b      	strh	r3, [r7, #10]
 8002e66:	460b      	mov	r3, r1
 8002e68:	813b      	strh	r3, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	8979      	ldrh	r1, [r7, #10]
 8002e74:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <I2C_RequestMemoryWrite+0xa4>)
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fa79 	bl	8003374 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	69b9      	ldr	r1, [r7, #24]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f909 	bl	800309e <I2C_WaitOnTXISFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e02c      	b.n	8002ef0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e9c:	893b      	ldrh	r3, [r7, #8]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ea6:	e015      	b.n	8002ed4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea8:	893b      	ldrh	r3, [r7, #8]
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	69b9      	ldr	r1, [r7, #24]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f8ef 	bl	800309e <I2C_WaitOnTXISFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e012      	b.n	8002ef0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eca:	893b      	ldrh	r3, [r7, #8]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2200      	movs	r2, #0
 8002edc:	2180      	movs	r1, #128	@ 0x80
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f884 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	80002000 	.word	0x80002000

08002efc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	813b      	strh	r3, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	8979      	ldrh	r1, [r7, #10]
 8002f1c:	4b20      	ldr	r3, [pc, #128]	@ (8002fa0 <I2C_RequestMemoryRead+0xa4>)
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2300      	movs	r3, #0
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fa26 	bl	8003374 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	69b9      	ldr	r1, [r7, #24]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f8b6 	bl	800309e <I2C_WaitOnTXISFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e02c      	b.n	8002f96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f42:	893b      	ldrh	r3, [r7, #8]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f4c:	e015      	b.n	8002f7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f4e:	893b      	ldrh	r3, [r7, #8]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	69b9      	ldr	r1, [r7, #24]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f89c 	bl	800309e <I2C_WaitOnTXISFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e012      	b.n	8002f96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f70:	893b      	ldrh	r3, [r7, #8]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2140      	movs	r1, #64	@ 0x40
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f831 	bl	8002fec <I2C_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	80002000 	.word	0x80002000

08002fa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d103      	bne.n	8002fc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d007      	beq.n	8002fe0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	619a      	str	r2, [r3, #24]
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ffc:	e03b      	b.n	8003076 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f8d6 	bl	80031b4 <I2C_IsErrorOccurred>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e041      	b.n	8003096 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d02d      	beq.n	8003076 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7fe ffab 	bl	8001f74 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <I2C_WaitOnFlagUntilTimeout+0x44>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d122      	bne.n	8003076 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	429a      	cmp	r2, r3
 800304c:	d113      	bne.n	8003076 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e00f      	b.n	8003096 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699a      	ldr	r2, [r3, #24]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4013      	ands	r3, r2
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	429a      	cmp	r2, r3
 8003092:	d0b4      	beq.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030aa:	e033      	b.n	8003114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f87f 	bl	80031b4 <I2C_IsErrorOccurred>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e031      	b.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d025      	beq.n	8003114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7fe ff54 	bl	8001f74 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d11a      	bne.n	8003114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d013      	beq.n	8003114 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e007      	b.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b02      	cmp	r3, #2
 8003120:	d1c4      	bne.n	80030ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003138:	e02f      	b.n	800319a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f838 	bl	80031b4 <I2C_IsErrorOccurred>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e02d      	b.n	80031aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7fe ff11 	bl	8001f74 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d11a      	bne.n	800319a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b20      	cmp	r3, #32
 8003170:	d013      	beq.n	800319a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e007      	b.n	80031aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d1c8      	bne.n	800313a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	@ 0x28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d068      	beq.n	80032b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2210      	movs	r2, #16
 80031e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031e8:	e049      	b.n	800327e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d045      	beq.n	800327e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031f2:	f7fe febf 	bl	8001f74 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d302      	bcc.n	8003208 <I2C_IsErrorOccurred+0x54>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d13a      	bne.n	800327e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003212:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800321a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800322a:	d121      	bne.n	8003270 <I2C_IsErrorOccurred+0xbc>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003232:	d01d      	beq.n	8003270 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	2b20      	cmp	r3, #32
 8003238:	d01a      	beq.n	8003270 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003248:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800324a:	f7fe fe93 	bl	8001f74 <HAL_GetTick>
 800324e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003250:	e00e      	b.n	8003270 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003252:	f7fe fe8f 	bl	8001f74 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b19      	cmp	r3, #25
 800325e:	d907      	bls.n	8003270 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	f043 0320 	orr.w	r3, r3, #32
 8003266:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800326e:	e006      	b.n	800327e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b20      	cmp	r3, #32
 800327c:	d1e9      	bne.n	8003252 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b20      	cmp	r3, #32
 800328a:	d003      	beq.n	8003294 <I2C_IsErrorOccurred+0xe0>
 800328c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0aa      	beq.n	80031ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003298:	2b00      	cmp	r3, #0
 800329a:	d103      	bne.n	80032a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2220      	movs	r2, #32
 80032a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	f043 0308 	orr.w	r3, r3, #8
 80032ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	f043 0302 	orr.w	r3, r3, #2
 800330e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003318:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01c      	beq.n	8003362 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7ff fe3b 	bl	8002fa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b0d      	ldr	r3, [pc, #52]	@ (8003370 <I2C_IsErrorOccurred+0x1bc>)
 800333a:	400b      	ands	r3, r1
 800333c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	431a      	orrs	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003362:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003366:	4618      	mov	r0, r3
 8003368:	3728      	adds	r7, #40	@ 0x28
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	fe00e800 	.word	0xfe00e800

08003374 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	817b      	strh	r3, [r7, #10]
 8003382:	4613      	mov	r3, r2
 8003384:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800338c:	7a7b      	ldrb	r3, [r7, #9]
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003394:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	4313      	orrs	r3, r2
 800339e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	0d5b      	lsrs	r3, r3, #21
 80033ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80033b2:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <I2C_TransferConfig+0x60>)
 80033b4:	430b      	orrs	r3, r1
 80033b6:	43db      	mvns	r3, r3
 80033b8:	ea02 0103 	and.w	r1, r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	03ff63ff 	.word	0x03ff63ff

080033d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d138      	bne.n	8003460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e032      	b.n	8003462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	@ 0x24
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800342a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6819      	ldr	r1, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b20      	cmp	r3, #32
 8003482:	d139      	bne.n	80034f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800348e:	2302      	movs	r3, #2
 8003490:	e033      	b.n	80034fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2224      	movs	r2, #36	@ 0x24
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0c0      	b.n	800369a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d106      	bne.n	8003532 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f00a fac9 	bl	800dac4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2203      	movs	r2, #3
 8003536:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f003 fef1 	bl	8007326 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e03e      	b.n	80035c8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	440b      	add	r3, r1
 8003558:	3311      	adds	r3, #17
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	440b      	add	r3, r1
 800356c:	3310      	adds	r3, #16
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	3313      	adds	r3, #19
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	3320      	adds	r3, #32
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	440b      	add	r3, r1
 80035a8:	3324      	adds	r3, #36	@ 0x24
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	3301      	adds	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	791b      	ldrb	r3, [r3, #4]
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d3bb      	bcc.n	800354a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	e044      	b.n	8003662 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	440b      	add	r3, r1
 80035fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	3301      	adds	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	791b      	ldrb	r3, [r3, #4]
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	429a      	cmp	r2, r3
 800366a:	d3b5      	bcc.n	80035d8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003678:	f003 fe70 	bl	800735c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	7a9b      	ldrb	r3, [r3, #10]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d102      	bne.n	8003698 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f001 fc0e 	bl	8004eb4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_PCD_Start+0x16>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e012      	b.n	80036de <HAL_PCD_Start+0x3c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f003 fe17 	bl	80072f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f005 fbf4 	bl	8008ebc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f005 fbf9 	bl	8008eea <USB_ReadInterrupts>
 80036f8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fb06 	bl	8003d16 <PCD_EP_ISR_Handler>

    return;
 800370a:	e110      	b.n	800392e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003712:	2b00      	cmp	r3, #0
 8003714:	d013      	beq.n	800373e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003728:	b292      	uxth	r2, r2
 800372a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f00a fa59 	bl	800dbe6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003734:	2100      	movs	r1, #0
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8fc 	bl	8003934 <HAL_PCD_SetAddress>

    return;
 800373c:	e0f7      	b.n	800392e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00c      	beq.n	8003762 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800375a:	b292      	uxth	r2, r2
 800375c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003760:	e0e5      	b.n	800392e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00c      	beq.n	8003786 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003774:	b29a      	uxth	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800377e:	b292      	uxth	r2, r2
 8003780:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003784:	e0d3      	b.n	800392e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d034      	beq.n	80037fa <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0204 	bic.w	r2, r2, #4
 80037a2:	b292      	uxth	r2, r2
 80037a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0208 	bic.w	r2, r2, #8
 80037ba:	b292      	uxth	r2, r2
 80037bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d107      	bne.n	80037da <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037d2:	2100      	movs	r1, #0
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f00a fbf9 	bl	800dfcc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f00a fa3c 	bl	800dc58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037f2:	b292      	uxth	r2, r2
 80037f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037f8:	e099      	b.n	800392e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003800:	2b00      	cmp	r3, #0
 8003802:	d027      	beq.n	8003854 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0208 	orr.w	r2, r2, #8
 8003816:	b292      	uxth	r2, r2
 8003818:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003824:	b29a      	uxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800382e:	b292      	uxth	r2, r2
 8003830:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0204 	orr.w	r2, r2, #4
 8003846:	b292      	uxth	r2, r2
 8003848:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f00a f9e9 	bl	800dc24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003852:	e06c      	b.n	800392e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385a:	2b00      	cmp	r3, #0
 800385c:	d040      	beq.n	80038e0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003870:	b292      	uxth	r2, r2
 8003872:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d12b      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003888:	b29a      	uxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0204 	orr.w	r2, r2, #4
 8003892:	b292      	uxth	r2, r2
 8003894:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0208 	orr.w	r2, r2, #8
 80038aa:	b292      	uxth	r2, r2
 80038ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	089b      	lsrs	r3, r3, #2
 80038c4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038ce:	2101      	movs	r1, #1
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f00a fb7b 	bl	800dfcc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80038d6:	e02a      	b.n	800392e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f00a f9a3 	bl	800dc24 <HAL_PCD_SuspendCallback>
    return;
 80038de:	e026      	b.n	800392e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00f      	beq.n	800390a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038fc:	b292      	uxth	r2, r2
 80038fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f00a f961 	bl	800dbca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003908:	e011      	b.n	800392e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00c      	beq.n	800392e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003926:	b292      	uxth	r2, r2
 8003928:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800392c:	bf00      	nop
  }
}
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_PCD_SetAddress+0x1a>
 800394a:	2302      	movs	r3, #2
 800394c:	e012      	b.n	8003974 <HAL_PCD_SetAddress+0x40>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f005 fa95 	bl	8008e94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	461a      	mov	r2, r3
 800398a:	4603      	mov	r3, r0
 800398c:	70fb      	strb	r3, [r7, #3]
 800398e:	460b      	mov	r3, r1
 8003990:	803b      	strh	r3, [r7, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800399a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	da0e      	bge.n	80039c0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	f003 0207 	and.w	r2, r3, #7
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	3310      	adds	r3, #16
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	705a      	strb	r2, [r3, #1]
 80039be:	e00e      	b.n	80039de <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	f003 0207 	and.w	r2, r3, #7
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80039ea:	883b      	ldrh	r3, [r7, #0]
 80039ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	78ba      	ldrb	r2, [r7, #2]
 80039f8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039fa:	78bb      	ldrb	r3, [r7, #2]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d102      	bne.n	8003a06 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_PCD_EP_Open+0x98>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e00e      	b.n	8003a32 <HAL_PCD_EP_Open+0xb6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f003 fcb8 	bl	8007398 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003a30:	7afb      	ldrb	r3, [r7, #11]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	da0e      	bge.n	8003a6c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 0207 	and.w	r2, r3, #7
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	705a      	strb	r2, [r3, #1]
 8003a6a:	e00e      	b.n	8003a8a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	f003 0207 	and.w	r2, r3, #7
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_PCD_EP_Close+0x6a>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e00e      	b.n	8003ac2 <HAL_PCD_EP_Close+0x88>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68f9      	ldr	r1, [r7, #12]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f004 f958 	bl	8007d68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ada:	7afb      	ldrb	r3, [r7, #11]
 8003adc:	f003 0207 	and.w	r2, r3, #7
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2200      	movs	r2, #0
 8003b08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6979      	ldr	r1, [r7, #20]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f004 fb10 	bl	8008142 <USB_EPStartXfer>

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	f003 0207 	and.w	r2, r3, #7
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	440b      	add	r3, r1
 8003b4a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6c:	7afb      	ldrb	r3, [r7, #11]
 8003b6e:	f003 0207 	and.w	r2, r3, #7
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	3310      	adds	r3, #16
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba8:	7afb      	ldrb	r3, [r7, #11]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6979      	ldr	r1, [r7, #20]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f004 fac1 	bl	8008142 <USB_EPStartXfer>

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	7912      	ldrb	r2, [r2, #4]
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e03e      	b.n	8003c66 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	da0e      	bge.n	8003c0e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	f003 0207 	and.w	r2, r3, #7
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	3310      	adds	r3, #16
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4413      	add	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	705a      	strb	r2, [r3, #1]
 8003c0c:	e00c      	b.n	8003c28 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	4413      	add	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_PCD_EP_SetStall+0x7e>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e00e      	b.n	8003c66 <HAL_PCD_EP_SetStall+0x9c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68f9      	ldr	r1, [r7, #12]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f005 f822 	bl	8008ca0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	7912      	ldrb	r2, [r2, #4]
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d901      	bls.n	8003c8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e040      	b.n	8003d0e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	da0e      	bge.n	8003cb2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 0207 	and.w	r2, r3, #7
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	3310      	adds	r3, #16
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	705a      	strb	r2, [r3, #1]
 8003cb0:	e00e      	b.n	8003cd0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	f003 0207 	and.w	r2, r3, #7
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_PCD_EP_ClrStall+0x82>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e00e      	b.n	8003d0e <HAL_PCD_EP_ClrStall+0xa0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68f9      	ldr	r1, [r7, #12]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f005 f81f 	bl	8008d42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b092      	sub	sp, #72	@ 0x48
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d1e:	e333      	b.n	8004388 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d28:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d2a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003d36:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f040 8108 	bne.w	8003f50 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d40:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d14c      	bne.n	8003de4 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d5a:	813b      	strh	r3, [r7, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	893b      	ldrh	r3, [r7, #8]
 8003d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3310      	adds	r3, #16
 8003d72:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	441a      	add	r2, r3
 8003da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003daa:	2100      	movs	r1, #0
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f009 fef2 	bl	800db96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7b1b      	ldrb	r3, [r3, #12]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 82e5 	beq.w	8004388 <PCD_EP_ISR_Handler+0x672>
 8003dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 82e0 	bne.w	8004388 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7b1b      	ldrb	r3, [r3, #12]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	731a      	strb	r2, [r3, #12]
 8003de2:	e2d1      	b.n	8004388 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dea:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003df4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d032      	beq.n	8003e64 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	4413      	add	r3, r2
 8003e18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e24:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e32:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e36:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f005 f8a9 	bl	8008f90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	897a      	ldrh	r2, [r7, #10]
 8003e54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e58:	b292      	uxth	r2, r2
 8003e5a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f009 fe6d 	bl	800db3c <HAL_PCD_SetupStageCallback>
 8003e62:	e291      	b.n	8004388 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e64:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f280 828d 	bge.w	8004388 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	81fb      	strh	r3, [r7, #14]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	89fa      	ldrh	r2, [r7, #14]
 8003e84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e88:	b292      	uxth	r2, r2
 8003e8a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eb2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d019      	beq.n	8003ef0 <PCD_EP_ISR_Handler+0x1da>
 8003ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d015      	beq.n	8003ef0 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eca:	6959      	ldr	r1, [r3, #20]
 8003ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ece:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f005 f85b 	bl	8008f90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	441a      	add	r2, r3
 8003ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ee8:	2100      	movs	r1, #0
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f009 fe38 	bl	800db60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003ef8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f040 8242 	bne.w	8004388 <PCD_EP_ISR_Handler+0x672>
 8003f04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003f06:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f0e:	f000 823b 	beq.w	8004388 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f22:	81bb      	strh	r3, [r7, #12]
 8003f24:	89bb      	ldrh	r3, [r7, #12]
 8003f26:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003f2a:	81bb      	strh	r3, [r7, #12]
 8003f2c:	89bb      	ldrh	r3, [r7, #12]
 8003f2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f32:	81bb      	strh	r3, [r7, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	89bb      	ldrh	r3, [r7, #12]
 8003f3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	8013      	strh	r3, [r2, #0]
 8003f4e:	e21b      	b.n	8004388 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f62:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f280 80f1 	bge.w	800414e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f82:	4013      	ands	r3, r2
 8003f84:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f9e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fb6:	7b1b      	ldrb	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d123      	bne.n	8004004 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fe0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003fe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 808b 	beq.w	8004104 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff4:	6959      	ldr	r1, [r3, #20]
 8003ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff8:	88da      	ldrh	r2, [r3, #6]
 8003ffa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003ffe:	f004 ffc7 	bl	8008f90 <USB_ReadPMA>
 8004002:	e07f      	b.n	8004104 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004006:	78db      	ldrb	r3, [r3, #3]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d109      	bne.n	8004020 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800400c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800400e:	461a      	mov	r2, r3
 8004010:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f9c6 	bl	80043a4 <HAL_PCD_EP_DB_Receive>
 8004018:	4603      	mov	r3, r0
 800401a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800401e:	e071      	b.n	8004104 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800404c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004050:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004058:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d022      	beq.n	80040c0 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004082:	b29b      	uxth	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	4413      	add	r3, r2
 8004094:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800409e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80040a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d02c      	beq.n	8004104 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b0:	6959      	ldr	r1, [r3, #20]
 80040b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b4:	891a      	ldrh	r2, [r3, #8]
 80040b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040ba:	f004 ff69 	bl	8008f90 <USB_ReadPMA>
 80040be:	e021      	b.n	8004104 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4413      	add	r3, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	4413      	add	r3, r2
 80040da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80040e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040f6:	6959      	ldr	r1, [r3, #20]
 80040f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040fa:	895a      	ldrh	r2, [r3, #10]
 80040fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004100:	f004 ff46 	bl	8008f90 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800410c:	441a      	add	r2, r3
 800410e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004110:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800411a:	441a      	add	r2, r3
 800411c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800411e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <PCD_EP_ISR_Handler+0x41e>
 8004128:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800412c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	429a      	cmp	r2, r3
 8004132:	d206      	bcs.n	8004142 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f009 fd10 	bl	800db60 <HAL_PCD_DataOutStageCallback>
 8004140:	e005      	b.n	800414e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004148:	4618      	mov	r0, r3
 800414a:	f003 fffa 	bl	8008142 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800414e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8117 	beq.w	8004388 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800415a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	3310      	adds	r3, #16
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	4413      	add	r3, r2
 800416c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004188:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	441a      	add	r2, r3
 8004198:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800419a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800419e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80041a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a8:	78db      	ldrb	r3, [r3, #3]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	f040 80a1 	bne.w	80042f2 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80041b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b2:	2200      	movs	r2, #0
 80041b4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80041b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b8:	7b1b      	ldrb	r3, [r3, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8092 	beq.w	80042e4 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80041c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d046      	beq.n	8004258 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041cc:	785b      	ldrb	r3, [r3, #1]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d126      	bne.n	8004220 <PCD_EP_ISR_Handler+0x50a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	4413      	add	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	00da      	lsls	r2, r3, #3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	4413      	add	r3, r2
 80041f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004204:	b29a      	uxth	r2, r3
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004218:	b29a      	uxth	r2, r3
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	e061      	b.n	80042e4 <PCD_EP_ISR_Handler+0x5ce>
 8004220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004222:	785b      	ldrb	r3, [r3, #1]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d15d      	bne.n	80042e4 <PCD_EP_ISR_Handler+0x5ce>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	00da      	lsls	r2, r3, #3
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4413      	add	r3, r2
 800424a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2200      	movs	r2, #0
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	e045      	b.n	80042e4 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800425e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d126      	bne.n	80042b4 <PCD_EP_ISR_Handler+0x59e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	627b      	str	r3, [r7, #36]	@ 0x24
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004274:	b29b      	uxth	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	4413      	add	r3, r2
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
 800427e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	00da      	lsls	r2, r3, #3
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	4413      	add	r3, r2
 8004288:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004298:	b29a      	uxth	r2, r3
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	e017      	b.n	80042e4 <PCD_EP_ISR_Handler+0x5ce>
 80042b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042b6:	785b      	ldrb	r3, [r3, #1]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d113      	bne.n	80042e4 <PCD_EP_ISR_Handler+0x5ce>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ca:	4413      	add	r3, r2
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	00da      	lsls	r2, r3, #3
 80042d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d6:	4413      	add	r3, r2
 80042d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e0:	2200      	movs	r2, #0
 80042e2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	4619      	mov	r1, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f009 fc53 	bl	800db96 <HAL_PCD_DataInStageCallback>
 80042f0:	e04a      	b.n	8004388 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80042f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80042f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d13f      	bne.n	800437c <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004304:	b29b      	uxth	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	4413      	add	r3, r2
 8004316:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004320:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8004322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004328:	429a      	cmp	r2, r3
 800432a:	d906      	bls.n	800433a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800432c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004332:	1ad2      	subs	r2, r2, r3
 8004334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004336:	619a      	str	r2, [r3, #24]
 8004338:	e002      	b.n	8004340 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800433a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800433c:	2200      	movs	r2, #0
 800433e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	4619      	mov	r1, r3
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f009 fc21 	bl	800db96 <HAL_PCD_DataInStageCallback>
 8004354:	e018      	b.n	8004388 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800435c:	441a      	add	r2, r3
 800435e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004360:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004368:	441a      	add	r2, r3
 800436a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800436c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004374:	4618      	mov	r0, r3
 8004376:	f003 fee4 	bl	8008142 <USB_EPStartXfer>
 800437a:	e005      	b.n	8004388 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800437c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800437e:	461a      	mov	r2, r3
 8004380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f917 	bl	80045b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004390:	b29b      	uxth	r3, r3
 8004392:	b21b      	sxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	f6ff acc3 	blt.w	8003d20 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3748      	adds	r7, #72	@ 0x48
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	4613      	mov	r3, r2
 80043b0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d07c      	beq.n	80044b6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	4413      	add	r3, r2
 80043d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	8b7b      	ldrh	r3, [r7, #26]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d306      	bcc.n	80043fa <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	8b7b      	ldrh	r3, [r7, #26]
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	619a      	str	r2, [r3, #24]
 80043f8:	e002      	b.n	8004400 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2200      	movs	r2, #0
 80043fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d123      	bne.n	8004450 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b29b      	uxth	r3, r3
 800441a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800441e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004422:	833b      	strh	r3, [r7, #24]
 8004424:	8b3b      	ldrh	r3, [r7, #24]
 8004426:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800442a:	833b      	strh	r3, [r7, #24]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	8b3b      	ldrh	r3, [r7, #24]
 800443c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800444c:	b29b      	uxth	r3, r3
 800444e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01f      	beq.n	800449a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004474:	82fb      	strh	r3, [r7, #22]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	441a      	add	r2, r3
 8004484:	8afb      	ldrh	r3, [r7, #22]
 8004486:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800448a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800448e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004492:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004496:	b29b      	uxth	r3, r3
 8004498:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800449a:	8b7b      	ldrh	r3, [r7, #26]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8085 	beq.w	80045ac <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6959      	ldr	r1, [r3, #20]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	891a      	ldrh	r2, [r3, #8]
 80044ae:	8b7b      	ldrh	r3, [r7, #26]
 80044b0:	f004 fd6e 	bl	8008f90 <USB_ReadPMA>
 80044b4:	e07a      	b.n	80045ac <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044be:	b29b      	uxth	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	4413      	add	r3, r2
 80044d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	8b7b      	ldrh	r3, [r7, #26]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d306      	bcc.n	80044f4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	8b7b      	ldrh	r3, [r7, #26]
 80044ec:	1ad2      	subs	r2, r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	619a      	str	r2, [r3, #24]
 80044f2:	e002      	b.n	80044fa <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2200      	movs	r2, #0
 80044f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d123      	bne.n	800454a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800451c:	83fb      	strh	r3, [r7, #30]
 800451e:	8bfb      	ldrh	r3, [r7, #30]
 8004520:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004524:	83fb      	strh	r3, [r7, #30]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	441a      	add	r2, r3
 8004534:	8bfb      	ldrh	r3, [r7, #30]
 8004536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800453a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800453e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004546:	b29b      	uxth	r3, r3
 8004548:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11f      	bne.n	8004594 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800456a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456e:	83bb      	strh	r3, [r7, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	441a      	add	r2, r3
 800457e:	8bbb      	ldrh	r3, [r7, #28]
 8004580:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004584:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004588:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800458c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004590:	b29b      	uxth	r3, r3
 8004592:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004594:	8b7b      	ldrh	r3, [r7, #26]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6959      	ldr	r1, [r3, #20]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	895a      	ldrh	r2, [r3, #10]
 80045a6:	8b7b      	ldrh	r3, [r7, #26]
 80045a8:	f004 fcf2 	bl	8008f90 <USB_ReadPMA>
    }
  }

  return count;
 80045ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b0a6      	sub	sp, #152	@ 0x98
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	4613      	mov	r3, r2
 80045c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 81f7 	beq.w	80049be <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045d8:	b29b      	uxth	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	4413      	add	r3, r2
 80045ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045f4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004600:	429a      	cmp	r2, r3
 8004602:	d907      	bls.n	8004614 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	699a      	ldr	r2, [r3, #24]
 8004608:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800460c:	1ad2      	subs	r2, r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	619a      	str	r2, [r3, #24]
 8004612:	e002      	b.n	800461a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2200      	movs	r2, #0
 8004618:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f040 80e1 	bne.w	80047e6 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	785b      	ldrb	r3, [r3, #1]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d126      	bne.n	800467a <HAL_PCD_EP_DB_Transmit+0xc4>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	633b      	str	r3, [r7, #48]	@ 0x30
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800463a:	b29b      	uxth	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004640:	4413      	add	r3, r2
 8004642:	633b      	str	r3, [r7, #48]	@ 0x30
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	00da      	lsls	r2, r3, #3
 800464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464c:	4413      	add	r3, r2
 800464e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800465e:	b29a      	uxth	r2, r3
 8004660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004662:	801a      	strh	r2, [r3, #0]
 8004664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29b      	uxth	r3, r3
 800466a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800466e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004672:	b29a      	uxth	r2, r3
 8004674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004676:	801a      	strh	r2, [r3, #0]
 8004678:	e01a      	b.n	80046b0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	785b      	ldrb	r3, [r3, #1]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d116      	bne.n	80046b0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004690:	b29b      	uxth	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004696:	4413      	add	r3, r2
 8004698:	63bb      	str	r3, [r7, #56]	@ 0x38
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	00da      	lsls	r2, r3, #3
 80046a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a2:	4413      	add	r3, r2
 80046a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80046aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ac:	2200      	movs	r2, #0
 80046ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	785b      	ldrb	r3, [r3, #1]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d126      	bne.n	800470c <HAL_PCD_EP_DB_Transmit+0x156>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	623b      	str	r3, [r7, #32]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	4413      	add	r3, r2
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	00da      	lsls	r2, r3, #3
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	4413      	add	r3, r2
 80046e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	801a      	strh	r2, [r3, #0]
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004704:	b29a      	uxth	r2, r3
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	801a      	strh	r2, [r3, #0]
 800470a:	e017      	b.n	800473c <HAL_PCD_EP_DB_Transmit+0x186>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d113      	bne.n	800473c <HAL_PCD_EP_DB_Transmit+0x186>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800471c:	b29b      	uxth	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004722:	4413      	add	r3, r2
 8004724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	00da      	lsls	r2, r3, #3
 800472c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472e:	4413      	add	r3, r2
 8004730:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	2200      	movs	r2, #0
 800473a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	78db      	ldrb	r3, [r3, #3]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d123      	bne.n	800478c <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800475e:	837b      	strh	r3, [r7, #26]
 8004760:	8b7b      	ldrh	r3, [r7, #26]
 8004762:	f083 0320 	eor.w	r3, r3, #32
 8004766:	837b      	strh	r3, [r7, #26]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	441a      	add	r2, r3
 8004776:	8b7b      	ldrh	r3, [r7, #26]
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	4619      	mov	r1, r3
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f009 f9ff 	bl	800db96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004798:	88fb      	ldrh	r3, [r7, #6]
 800479a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d01f      	beq.n	80047e2 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047bc:	833b      	strh	r3, [r7, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	441a      	add	r2, r3
 80047cc:	8b3b      	ldrh	r3, [r7, #24]
 80047ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047de:	b29b      	uxth	r3, r3
 80047e0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e31f      	b.n	8004e26 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d021      	beq.n	8004834 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	441a      	add	r2, r3
 800481c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004828:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800482c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004830:	b29b      	uxth	r3, r3
 8004832:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800483a:	2b01      	cmp	r3, #1
 800483c:	f040 82ca 	bne.w	8004dd4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004848:	441a      	add	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004856:	441a      	add	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6a1a      	ldr	r2, [r3, #32]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	429a      	cmp	r2, r3
 8004866:	d309      	bcc.n	800487c <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6a1a      	ldr	r2, [r3, #32]
 8004872:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004874:	1ad2      	subs	r2, r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	621a      	str	r2, [r3, #32]
 800487a:	e015      	b.n	80048a8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d107      	bne.n	8004894 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8004884:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004888:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004892:	e009      	b.n	80048a8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2200      	movs	r2, #0
 80048a6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d15f      	bne.n	8004970 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c4:	4413      	add	r3, r2
 80048c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	00da      	lsls	r2, r3, #3
 80048ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d0:	4413      	add	r3, r2
 80048d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80048d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <HAL_PCD_EP_DB_Transmit+0x34e>
 80048ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004900:	801a      	strh	r2, [r3, #0]
 8004902:	e051      	b.n	80049a8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004904:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004906:	2b3e      	cmp	r3, #62	@ 0x3e
 8004908:	d816      	bhi.n	8004938 <HAL_PCD_EP_DB_Transmit+0x382>
 800490a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_PCD_EP_DB_Transmit+0x36a>
 800491a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800491c:	3301      	adds	r3, #1
 800491e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29a      	uxth	r2, r3
 8004926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004928:	b29b      	uxth	r3, r3
 800492a:	029b      	lsls	r3, r3, #10
 800492c:	b29b      	uxth	r3, r3
 800492e:	4313      	orrs	r3, r2
 8004930:	b29a      	uxth	r2, r3
 8004932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004934:	801a      	strh	r2, [r3, #0]
 8004936:	e037      	b.n	80049a8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004938:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	653b      	str	r3, [r7, #80]	@ 0x50
 800493e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <HAL_PCD_EP_DB_Transmit+0x398>
 8004948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800494a:	3b01      	subs	r3, #1
 800494c:	653b      	str	r3, [r7, #80]	@ 0x50
 800494e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29a      	uxth	r2, r3
 8004954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004956:	b29b      	uxth	r3, r3
 8004958:	029b      	lsls	r3, r3, #10
 800495a:	b29b      	uxth	r3, r3
 800495c:	4313      	orrs	r3, r2
 800495e:	b29b      	uxth	r3, r3
 8004960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004968:	b29a      	uxth	r2, r3
 800496a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800496c:	801a      	strh	r2, [r3, #0]
 800496e:	e01b      	b.n	80049a8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	785b      	ldrb	r3, [r3, #1]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d117      	bne.n	80049a8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004986:	b29b      	uxth	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800498c:	4413      	add	r3, r2
 800498e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	00da      	lsls	r2, r3, #3
 8004996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004998:	4413      	add	r3, r2
 800499a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800499e:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6959      	ldr	r1, [r3, #20]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	891a      	ldrh	r2, [r3, #8]
 80049b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f004 faa7 	bl	8008f0a <USB_WritePMA>
 80049bc:	e20a      	b.n	8004dd4 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	4413      	add	r3, r2
 80049d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049e2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d307      	bcc.n	8004a02 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	619a      	str	r2, [r3, #24]
 8004a00:	e002      	b.n	8004a08 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2200      	movs	r2, #0
 8004a06:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 80f6 	bne.w	8004bfe <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d126      	bne.n	8004a68 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a2e:	4413      	add	r3, r2
 8004a30:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	00da      	lsls	r2, r3, #3
 8004a38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a40:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a50:	801a      	strh	r2, [r3, #0]
 8004a52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a64:	801a      	strh	r2, [r3, #0]
 8004a66:	e01a      	b.n	8004a9e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d116      	bne.n	8004a9e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a84:	4413      	add	r3, r2
 8004a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	00da      	lsls	r2, r3, #3
 8004a8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a90:	4413      	add	r3, r2
 8004a92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d12f      	bne.n	8004b0e <HAL_PCD_EP_DB_Transmit+0x558>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	00da      	lsls	r2, r3, #3
 8004ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	e01c      	b.n	8004b48 <HAL_PCD_EP_DB_Transmit+0x592>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	785b      	ldrb	r3, [r3, #1]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d118      	bne.n	8004b48 <HAL_PCD_EP_DB_Transmit+0x592>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b26:	4413      	add	r3, r2
 8004b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	00da      	lsls	r2, r3, #3
 8004b32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b36:	4413      	add	r3, r2
 8004b38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b44:	2200      	movs	r2, #0
 8004b46:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	78db      	ldrb	r3, [r3, #3]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d127      	bne.n	8004ba0 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b6a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004b6e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004b72:	f083 0320 	eor.w	r3, r3, #32
 8004b76:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f008 fff5 	bl	800db96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d121      	bne.n	8004bfa <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	441a      	add	r2, r3
 8004be2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e113      	b.n	8004e26 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d121      	bne.n	8004c4c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c22:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	f040 80be 	bne.w	8004dd4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004c60:	441a      	add	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	69da      	ldr	r2, [r3, #28]
 8004c6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004c6e:	441a      	add	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6a1a      	ldr	r2, [r3, #32]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d309      	bcc.n	8004c94 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6a1a      	ldr	r2, [r3, #32]
 8004c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c8c:	1ad2      	subs	r2, r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	621a      	str	r2, [r3, #32]
 8004c92:	e015      	b.n	8004cc0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d107      	bne.n	8004cac <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004c9c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004caa:	e009      	b.n	8004cc0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	785b      	ldrb	r3, [r3, #1]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d15f      	bne.n	8004d8e <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ce2:	4413      	add	r3, r2
 8004ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	00da      	lsls	r2, r3, #3
 8004cec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cee:	4413      	add	r3, r2
 8004cf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004cf4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d04:	801a      	strh	r2, [r3, #0]
 8004d06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	e04e      	b.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004d22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d24:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d26:	d816      	bhi.n	8004d56 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004d28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_PCD_EP_DB_Transmit+0x788>
 8004d38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	029b      	lsls	r3, r3, #10
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d52:	801a      	strh	r2, [r3, #0]
 8004d54:	e034      	b.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	029b      	lsls	r3, r3, #10
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	e018      	b.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	785b      	ldrb	r3, [r3, #1]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d114      	bne.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004da4:	4413      	add	r3, r2
 8004da6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	00da      	lsls	r2, r3, #3
 8004dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004db0:	4413      	add	r3, r2
 8004db2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004db8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dbe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	6959      	ldr	r1, [r3, #20]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	895a      	ldrh	r2, [r3, #10]
 8004dcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f004 f89b 	bl	8008f0a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dee:	82fb      	strh	r3, [r7, #22]
 8004df0:	8afb      	ldrh	r3, [r7, #22]
 8004df2:	f083 0310 	eor.w	r3, r3, #16
 8004df6:	82fb      	strh	r3, [r7, #22]
 8004df8:	8afb      	ldrh	r3, [r7, #22]
 8004dfa:	f083 0320 	eor.w	r3, r3, #32
 8004dfe:	82fb      	strh	r3, [r7, #22]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	8afb      	ldrh	r3, [r7, #22]
 8004e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3798      	adds	r7, #152	@ 0x98
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b087      	sub	sp, #28
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	817b      	strh	r3, [r7, #10]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e40:	897b      	ldrh	r3, [r7, #10]
 8004e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e4c:	897b      	ldrh	r3, [r7, #10]
 8004e4e:	f003 0207 	and.w	r2, r3, #7
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	3310      	adds	r3, #16
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e009      	b.n	8004e78 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e64:	897a      	ldrh	r2, [r7, #10]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4413      	add	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004e78:	893b      	ldrh	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d107      	bne.n	8004e8e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2200      	movs	r2, #0
 8004e82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	80da      	strh	r2, [r3, #6]
 8004e8c:	e00b      	b.n	8004ea6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2201      	movs	r2, #1
 8004e92:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	0c1b      	lsrs	r3, r3, #16
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f043 0302 	orr.w	r3, r3, #2
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d141      	bne.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f16:	4b4b      	ldr	r3, [pc, #300]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f22:	d131      	bne.n	8004f88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f24:	4b47      	ldr	r3, [pc, #284]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f2a:	4a46      	ldr	r2, [pc, #280]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f34:	4b43      	ldr	r3, [pc, #268]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f3c:	4a41      	ldr	r2, [pc, #260]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f44:	4b40      	ldr	r3, [pc, #256]	@ (8005048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2232      	movs	r2, #50	@ 0x32
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800504c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	0c9b      	lsrs	r3, r3, #18
 8004f56:	3301      	adds	r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f5a:	e002      	b.n	8004f62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f62:	4b38      	ldr	r3, [pc, #224]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d102      	bne.n	8004f76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f2      	bne.n	8004f5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f76:	4b33      	ldr	r3, [pc, #204]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f82:	d158      	bne.n	8005036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e057      	b.n	8005038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f88:	4b2e      	ldr	r3, [pc, #184]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f98:	e04d      	b.n	8005036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fa0:	d141      	bne.n	8005026 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fa2:	4b28      	ldr	r3, [pc, #160]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fae:	d131      	bne.n	8005014 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fb0:	4b24      	ldr	r3, [pc, #144]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fb6:	4a23      	ldr	r2, [pc, #140]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fc0:	4b20      	ldr	r3, [pc, #128]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8005048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2232      	movs	r2, #50	@ 0x32
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
 8004fda:	4a1c      	ldr	r2, [pc, #112]	@ (800504c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	0c9b      	lsrs	r3, r3, #18
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fe6:	e002      	b.n	8004fee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fee:	4b15      	ldr	r3, [pc, #84]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffa:	d102      	bne.n	8005002 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f2      	bne.n	8004fe8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005002:	4b10      	ldr	r3, [pc, #64]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500e:	d112      	bne.n	8005036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e011      	b.n	8005038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005014:	4b0b      	ldr	r3, [pc, #44]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800501a:	4a0a      	ldr	r2, [pc, #40]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005020:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005024:	e007      	b.n	8005036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005026:	4b07      	ldr	r3, [pc, #28]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800502e:	4a05      	ldr	r2, [pc, #20]	@ (8005044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005030:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005034:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40007000 	.word	0x40007000
 8005048:	20000000 	.word	0x20000000
 800504c:	431bde83 	.word	0x431bde83

08005050 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005054:	4b05      	ldr	r3, [pc, #20]	@ (800506c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	4a04      	ldr	r2, [pc, #16]	@ (800506c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800505a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800505e:	6093      	str	r3, [r2, #8]
}
 8005060:	bf00      	nop
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40007000 	.word	0x40007000

08005070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e2fe      	b.n	8005680 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d075      	beq.n	800517a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800508e:	4b97      	ldr	r3, [pc, #604]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005098:	4b94      	ldr	r3, [pc, #592]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d102      	bne.n	80050ae <HAL_RCC_OscConfig+0x3e>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d002      	beq.n	80050b4 <HAL_RCC_OscConfig+0x44>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d10b      	bne.n	80050cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	4b8d      	ldr	r3, [pc, #564]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d05b      	beq.n	8005178 <HAL_RCC_OscConfig+0x108>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d157      	bne.n	8005178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e2d9      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d4:	d106      	bne.n	80050e4 <HAL_RCC_OscConfig+0x74>
 80050d6:	4b85      	ldr	r3, [pc, #532]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a84      	ldr	r2, [pc, #528]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e01d      	b.n	8005120 <HAL_RCC_OscConfig+0xb0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050ec:	d10c      	bne.n	8005108 <HAL_RCC_OscConfig+0x98>
 80050ee:	4b7f      	ldr	r3, [pc, #508]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a7e      	ldr	r2, [pc, #504]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	4b7c      	ldr	r3, [pc, #496]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a7b      	ldr	r2, [pc, #492]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e00b      	b.n	8005120 <HAL_RCC_OscConfig+0xb0>
 8005108:	4b78      	ldr	r3, [pc, #480]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a77      	ldr	r2, [pc, #476]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800510e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	4b75      	ldr	r3, [pc, #468]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a74      	ldr	r2, [pc, #464]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800511a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800511e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d013      	beq.n	8005150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fc ff24 	bl	8001f74 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005130:	f7fc ff20 	bl	8001f74 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b64      	cmp	r3, #100	@ 0x64
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e29e      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005142:	4b6a      	ldr	r3, [pc, #424]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0xc0>
 800514e:	e014      	b.n	800517a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fc ff10 	bl	8001f74 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005158:	f7fc ff0c 	bl	8001f74 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b64      	cmp	r3, #100	@ 0x64
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e28a      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800516a:	4b60      	ldr	r3, [pc, #384]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0xe8>
 8005176:	e000      	b.n	800517a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d075      	beq.n	8005272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005186:	4b59      	ldr	r3, [pc, #356]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 030c 	and.w	r3, r3, #12
 800518e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005190:	4b56      	ldr	r3, [pc, #344]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b0c      	cmp	r3, #12
 800519e:	d102      	bne.n	80051a6 <HAL_RCC_OscConfig+0x136>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d002      	beq.n	80051ac <HAL_RCC_OscConfig+0x13c>
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d11f      	bne.n	80051ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ac:	4b4f      	ldr	r3, [pc, #316]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_OscConfig+0x154>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e25d      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c4:	4b49      	ldr	r3, [pc, #292]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	4946      	ldr	r1, [pc, #280]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051d8:	4b45      	ldr	r3, [pc, #276]	@ (80052f0 <HAL_RCC_OscConfig+0x280>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fc fd01 	bl	8001be4 <HAL_InitTick>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d043      	beq.n	8005270 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e249      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d023      	beq.n	800523c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f4:	4b3d      	ldr	r3, [pc, #244]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a3c      	ldr	r2, [pc, #240]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80051fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fc feb8 	bl	8001f74 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005208:	f7fc feb4 	bl	8001f74 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e232      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800521a:	4b34      	ldr	r3, [pc, #208]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005226:	4b31      	ldr	r3, [pc, #196]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	492d      	ldr	r1, [pc, #180]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	604b      	str	r3, [r1, #4]
 800523a:	e01a      	b.n	8005272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523c:	4b2b      	ldr	r3, [pc, #172]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2a      	ldr	r2, [pc, #168]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005242:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fc fe94 	bl	8001f74 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005250:	f7fc fe90 	bl	8001f74 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e20e      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005262:	4b22      	ldr	r3, [pc, #136]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x1e0>
 800526e:	e000      	b.n	8005272 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005270:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d041      	beq.n	8005302 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01c      	beq.n	80052c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005286:	4b19      	ldr	r3, [pc, #100]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 8005288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528c:	4a17      	ldr	r2, [pc, #92]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005296:	f7fc fe6d 	bl	8001f74 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800529e:	f7fc fe69 	bl	8001f74 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e1e7      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052b0:	4b0e      	ldr	r3, [pc, #56]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80052b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0ef      	beq.n	800529e <HAL_RCC_OscConfig+0x22e>
 80052be:	e020      	b.n	8005302 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c0:	4b0a      	ldr	r3, [pc, #40]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80052c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052c6:	4a09      	ldr	r2, [pc, #36]	@ (80052ec <HAL_RCC_OscConfig+0x27c>)
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7fc fe50 	bl	8001f74 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d6:	e00d      	b.n	80052f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d8:	f7fc fe4c 	bl	8001f74 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d906      	bls.n	80052f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e1ca      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000
 80052f0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052f4:	4b8c      	ldr	r3, [pc, #560]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80052f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1ea      	bne.n	80052d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80a6 	beq.w	800545c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005310:	2300      	movs	r3, #0
 8005312:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005314:	4b84      	ldr	r3, [pc, #528]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_OscConfig+0x2b4>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <HAL_RCC_OscConfig+0x2b6>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00d      	beq.n	8005346 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800532a:	4b7f      	ldr	r3, [pc, #508]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532e:	4a7e      	ldr	r2, [pc, #504]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005334:	6593      	str	r3, [r2, #88]	@ 0x58
 8005336:	4b7c      	ldr	r3, [pc, #496]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005342:	2301      	movs	r3, #1
 8005344:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005346:	4b79      	ldr	r3, [pc, #484]	@ (800552c <HAL_RCC_OscConfig+0x4bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d118      	bne.n	8005384 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005352:	4b76      	ldr	r3, [pc, #472]	@ (800552c <HAL_RCC_OscConfig+0x4bc>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a75      	ldr	r2, [pc, #468]	@ (800552c <HAL_RCC_OscConfig+0x4bc>)
 8005358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800535c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535e:	f7fc fe09 	bl	8001f74 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005366:	f7fc fe05 	bl	8001f74 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e183      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005378:	4b6c      	ldr	r3, [pc, #432]	@ (800552c <HAL_RCC_OscConfig+0x4bc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d108      	bne.n	800539e <HAL_RCC_OscConfig+0x32e>
 800538c:	4b66      	ldr	r3, [pc, #408]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005392:	4a65      	ldr	r2, [pc, #404]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800539c:	e024      	b.n	80053e8 <HAL_RCC_OscConfig+0x378>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	d110      	bne.n	80053c8 <HAL_RCC_OscConfig+0x358>
 80053a6:	4b60      	ldr	r3, [pc, #384]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053ae:	f043 0304 	orr.w	r3, r3, #4
 80053b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053b6:	4b5c      	ldr	r3, [pc, #368]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053bc:	4a5a      	ldr	r2, [pc, #360]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053c6:	e00f      	b.n	80053e8 <HAL_RCC_OscConfig+0x378>
 80053c8:	4b57      	ldr	r3, [pc, #348]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ce:	4a56      	ldr	r2, [pc, #344]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053d8:	4b53      	ldr	r3, [pc, #332]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053de:	4a52      	ldr	r2, [pc, #328]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d016      	beq.n	800541e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f0:	f7fc fdc0 	bl	8001f74 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f6:	e00a      	b.n	800540e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f8:	f7fc fdbc 	bl	8001f74 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e138      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800540e:	4b46      	ldr	r3, [pc, #280]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0ed      	beq.n	80053f8 <HAL_RCC_OscConfig+0x388>
 800541c:	e015      	b.n	800544a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541e:	f7fc fda9 	bl	8001f74 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005424:	e00a      	b.n	800543c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005426:	f7fc fda5 	bl	8001f74 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005434:	4293      	cmp	r3, r2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e121      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800543c:	4b3a      	ldr	r3, [pc, #232]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1ed      	bne.n	8005426 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800544a:	7ffb      	ldrb	r3, [r7, #31]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005450:	4b35      	ldr	r3, [pc, #212]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005454:	4a34      	ldr	r2, [pc, #208]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800545a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d03c      	beq.n	80054e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01c      	beq.n	80054aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005470:	4b2d      	ldr	r3, [pc, #180]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005472:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005476:	4a2c      	ldr	r2, [pc, #176]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fc fd78 	bl	8001f74 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005488:	f7fc fd74 	bl	8001f74 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e0f2      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800549a:	4b23      	ldr	r3, [pc, #140]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 800549c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0ef      	beq.n	8005488 <HAL_RCC_OscConfig+0x418>
 80054a8:	e01b      	b.n	80054e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80054ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ba:	f7fc fd5b 	bl	8001f74 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054c2:	f7fc fd57 	bl	8001f74 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e0d5      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054d4:	4b14      	ldr	r3, [pc, #80]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ef      	bne.n	80054c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80c9 	beq.w	800567e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 030c 	and.w	r3, r3, #12
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	f000 8083 	beq.w	8005600 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d15e      	bne.n	80055c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005502:	4b09      	ldr	r3, [pc, #36]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a08      	ldr	r2, [pc, #32]	@ (8005528 <HAL_RCC_OscConfig+0x4b8>)
 8005508:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800550c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550e:	f7fc fd31 	bl	8001f74 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005514:	e00c      	b.n	8005530 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005516:	f7fc fd2d 	bl	8001f74 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d905      	bls.n	8005530 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e0ab      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
 8005528:	40021000 	.word	0x40021000
 800552c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005530:	4b55      	ldr	r3, [pc, #340]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ec      	bne.n	8005516 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800553c:	4b52      	ldr	r3, [pc, #328]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	4b52      	ldr	r3, [pc, #328]	@ (800568c <HAL_RCC_OscConfig+0x61c>)
 8005542:	4013      	ands	r3, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6a11      	ldr	r1, [r2, #32]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800554c:	3a01      	subs	r2, #1
 800554e:	0112      	lsls	r2, r2, #4
 8005550:	4311      	orrs	r1, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005556:	0212      	lsls	r2, r2, #8
 8005558:	4311      	orrs	r1, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800555e:	0852      	lsrs	r2, r2, #1
 8005560:	3a01      	subs	r2, #1
 8005562:	0552      	lsls	r2, r2, #21
 8005564:	4311      	orrs	r1, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800556a:	0852      	lsrs	r2, r2, #1
 800556c:	3a01      	subs	r2, #1
 800556e:	0652      	lsls	r2, r2, #25
 8005570:	4311      	orrs	r1, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005576:	06d2      	lsls	r2, r2, #27
 8005578:	430a      	orrs	r2, r1
 800557a:	4943      	ldr	r1, [pc, #268]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 800557c:	4313      	orrs	r3, r2
 800557e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005580:	4b41      	ldr	r3, [pc, #260]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a40      	ldr	r2, [pc, #256]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 8005586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800558a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800558c:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4a3d      	ldr	r2, [pc, #244]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 8005592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005596:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fc fcec 	bl	8001f74 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a0:	f7fc fce8 	bl	8001f74 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e066      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b2:	4b35      	ldr	r3, [pc, #212]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0x530>
 80055be:	e05e      	b.n	800567e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c0:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a30      	ldr	r2, [pc, #192]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fc fcd2 	bl	8001f74 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fc fcce 	bl	8001f74 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e04c      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e6:	4b28      	ldr	r3, [pc, #160]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80055f2:	4b25      	ldr	r3, [pc, #148]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	4924      	ldr	r1, [pc, #144]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 80055f8:	4b25      	ldr	r3, [pc, #148]	@ (8005690 <HAL_RCC_OscConfig+0x620>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	60cb      	str	r3, [r1, #12]
 80055fe:	e03e      	b.n	800567e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e039      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800560c:	4b1e      	ldr	r3, [pc, #120]	@ (8005688 <HAL_RCC_OscConfig+0x618>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f003 0203 	and.w	r2, r3, #3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	429a      	cmp	r2, r3
 800561e:	d12c      	bne.n	800567a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	3b01      	subs	r3, #1
 800562c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d123      	bne.n	800567a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d11b      	bne.n	800567a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d113      	bne.n	800567a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	3b01      	subs	r3, #1
 8005660:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005662:	429a      	cmp	r2, r3
 8005664:	d109      	bne.n	800567a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	3b01      	subs	r3, #1
 8005674:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005676:	429a      	cmp	r2, r3
 8005678:	d001      	beq.n	800567e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40021000 	.word	0x40021000
 800568c:	019f800c 	.word	0x019f800c
 8005690:	feeefffc 	.word	0xfeeefffc

08005694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e11e      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056ac:	4b91      	ldr	r3, [pc, #580]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d910      	bls.n	80056dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ba:	4b8e      	ldr	r3, [pc, #568]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 020f 	bic.w	r2, r3, #15
 80056c2:	498c      	ldr	r1, [pc, #560]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ca:	4b8a      	ldr	r3, [pc, #552]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d001      	beq.n	80056dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e106      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d073      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d129      	bne.n	8005744 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056f0:	4b81      	ldr	r3, [pc, #516]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0f4      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005700:	f000 f9d0 	bl	8005aa4 <RCC_GetSysClockFreqFromPLLSource>
 8005704:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4a7c      	ldr	r2, [pc, #496]	@ (80058fc <HAL_RCC_ClockConfig+0x268>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d93f      	bls.n	800578e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800570e:	4b7a      	ldr	r3, [pc, #488]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005722:	2b00      	cmp	r3, #0
 8005724:	d033      	beq.n	800578e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800572a:	2b00      	cmp	r3, #0
 800572c:	d12f      	bne.n	800578e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800572e:	4b72      	ldr	r3, [pc, #456]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005736:	4a70      	ldr	r2, [pc, #448]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800573e:	2380      	movs	r3, #128	@ 0x80
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	e024      	b.n	800578e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d107      	bne.n	800575c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800574c:	4b6a      	ldr	r3, [pc, #424]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d109      	bne.n	800576c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e0c6      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800575c:	4b66      	ldr	r3, [pc, #408]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0be      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800576c:	f000 f8ce 	bl	800590c <HAL_RCC_GetSysClockFreq>
 8005770:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4a61      	ldr	r2, [pc, #388]	@ (80058fc <HAL_RCC_ClockConfig+0x268>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d909      	bls.n	800578e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800577a:	4b5f      	ldr	r3, [pc, #380]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005782:	4a5d      	ldr	r2, [pc, #372]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005788:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800578a:	2380      	movs	r3, #128	@ 0x80
 800578c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800578e:	4b5a      	ldr	r3, [pc, #360]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f023 0203 	bic.w	r2, r3, #3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	4957      	ldr	r1, [pc, #348]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800579c:	4313      	orrs	r3, r2
 800579e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a0:	f7fc fbe8 	bl	8001f74 <HAL_GetTick>
 80057a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a6:	e00a      	b.n	80057be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a8:	f7fc fbe4 	bl	8001f74 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e095      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057be:	4b4e      	ldr	r3, [pc, #312]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 020c 	and.w	r2, r3, #12
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d1eb      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d023      	beq.n	8005824 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057e8:	4b43      	ldr	r3, [pc, #268]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	4a42      	ldr	r2, [pc, #264]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80057ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0308 	and.w	r3, r3, #8
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005800:	4b3d      	ldr	r3, [pc, #244]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005808:	4a3b      	ldr	r2, [pc, #236]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800580a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800580e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005810:	4b39      	ldr	r3, [pc, #228]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4936      	ldr	r1, [pc, #216]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800581e:	4313      	orrs	r3, r2
 8005820:	608b      	str	r3, [r1, #8]
 8005822:	e008      	b.n	8005836 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b80      	cmp	r3, #128	@ 0x80
 8005828:	d105      	bne.n	8005836 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800582a:	4b33      	ldr	r3, [pc, #204]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	4a32      	ldr	r2, [pc, #200]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 8005830:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005834:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005836:	4b2f      	ldr	r3, [pc, #188]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d21d      	bcs.n	8005880 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005844:	4b2b      	ldr	r3, [pc, #172]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f023 020f 	bic.w	r2, r3, #15
 800584c:	4929      	ldr	r1, [pc, #164]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	4313      	orrs	r3, r2
 8005852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005854:	f7fc fb8e 	bl	8001f74 <HAL_GetTick>
 8005858:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800585a:	e00a      	b.n	8005872 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800585c:	f7fc fb8a 	bl	8001f74 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e03b      	b.n	80058ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005872:	4b20      	ldr	r3, [pc, #128]	@ (80058f4 <HAL_RCC_ClockConfig+0x260>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d1ed      	bne.n	800585c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d008      	beq.n	800589e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800588c:	4b1a      	ldr	r3, [pc, #104]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	4917      	ldr	r1, [pc, #92]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 800589a:	4313      	orrs	r3, r2
 800589c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058aa:	4b13      	ldr	r3, [pc, #76]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	490f      	ldr	r1, [pc, #60]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058be:	f000 f825 	bl	800590c <HAL_RCC_GetSysClockFreq>
 80058c2:	4602      	mov	r2, r0
 80058c4:	4b0c      	ldr	r3, [pc, #48]	@ (80058f8 <HAL_RCC_ClockConfig+0x264>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	490c      	ldr	r1, [pc, #48]	@ (8005900 <HAL_RCC_ClockConfig+0x26c>)
 80058d0:	5ccb      	ldrb	r3, [r1, r3]
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	4a0a      	ldr	r2, [pc, #40]	@ (8005904 <HAL_RCC_ClockConfig+0x270>)
 80058dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80058de:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <HAL_RCC_ClockConfig+0x274>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fc f97e 	bl	8001be4 <HAL_InitTick>
 80058e8:	4603      	mov	r3, r0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40022000 	.word	0x40022000
 80058f8:	40021000 	.word	0x40021000
 80058fc:	04c4b400 	.word	0x04c4b400
 8005900:	080111d4 	.word	0x080111d4
 8005904:	20000000 	.word	0x20000000
 8005908:	20000004 	.word	0x20000004

0800590c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005912:	4b2c      	ldr	r3, [pc, #176]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
 800591a:	2b04      	cmp	r3, #4
 800591c:	d102      	bne.n	8005924 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800591e:	4b2a      	ldr	r3, [pc, #168]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e047      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005924:	4b27      	ldr	r3, [pc, #156]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d102      	bne.n	8005936 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005930:	4b26      	ldr	r3, [pc, #152]	@ (80059cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	e03e      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005936:	4b23      	ldr	r3, [pc, #140]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	2b0c      	cmp	r3, #12
 8005940:	d136      	bne.n	80059b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005942:	4b20      	ldr	r3, [pc, #128]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800594c:	4b1d      	ldr	r3, [pc, #116]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	091b      	lsrs	r3, r3, #4
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	3301      	adds	r3, #1
 8005958:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d10c      	bne.n	800597a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005960:	4a1a      	ldr	r2, [pc, #104]	@ (80059cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	4a16      	ldr	r2, [pc, #88]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800596a:	68d2      	ldr	r2, [r2, #12]
 800596c:	0a12      	lsrs	r2, r2, #8
 800596e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	617b      	str	r3, [r7, #20]
      break;
 8005978:	e00c      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800597a:	4a13      	ldr	r2, [pc, #76]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	4a10      	ldr	r2, [pc, #64]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005984:	68d2      	ldr	r2, [r2, #12]
 8005986:	0a12      	lsrs	r2, r2, #8
 8005988:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800598c:	fb02 f303 	mul.w	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]
      break;
 8005992:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005994:	4b0b      	ldr	r3, [pc, #44]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	0e5b      	lsrs	r3, r3, #25
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	3301      	adds	r3, #1
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	e001      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80059b4:	693b      	ldr	r3, [r7, #16]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40021000 	.word	0x40021000
 80059c8:	00f42400 	.word	0x00f42400
 80059cc:	007a1200 	.word	0x007a1200

080059d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d4:	4b03      	ldr	r3, [pc, #12]	@ (80059e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059d6:	681b      	ldr	r3, [r3, #0]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000000 	.word	0x20000000

080059e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059ec:	f7ff fff0 	bl	80059d0 <HAL_RCC_GetHCLKFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	4904      	ldr	r1, [pc, #16]	@ (8005a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	080111e4 	.word	0x080111e4

08005a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a18:	f7ff ffda 	bl	80059d0 <HAL_RCC_GetHCLKFreq>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	0adb      	lsrs	r3, r3, #11
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	4904      	ldr	r1, [pc, #16]	@ (8005a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a2a:	5ccb      	ldrb	r3, [r1, r3]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	080111e4 	.word	0x080111e4

08005a40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	220f      	movs	r2, #15
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005a50:	4b12      	ldr	r3, [pc, #72]	@ (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0203 	and.w	r2, r3, #3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005a68:	4b0c      	ldr	r3, [pc, #48]	@ (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005a74:	4b09      	ldr	r3, [pc, #36]	@ (8005a9c <HAL_RCC_GetClockConfig+0x5c>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	08db      	lsrs	r3, r3, #3
 8005a7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005a82:	4b07      	ldr	r3, [pc, #28]	@ (8005aa0 <HAL_RCC_GetClockConfig+0x60>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 020f 	and.w	r2, r3, #15
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	601a      	str	r2, [r3, #0]
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	40022000 	.word	0x40022000

08005aa4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8005b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8005b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d10c      	bne.n	8005ae2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ac8:	4a17      	ldr	r2, [pc, #92]	@ (8005b28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	4a14      	ldr	r2, [pc, #80]	@ (8005b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ad2:	68d2      	ldr	r2, [r2, #12]
 8005ad4:	0a12      	lsrs	r2, r2, #8
 8005ad6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	617b      	str	r3, [r7, #20]
    break;
 8005ae0:	e00c      	b.n	8005afc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ae2:	4a12      	ldr	r2, [pc, #72]	@ (8005b2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aea:	4a0e      	ldr	r2, [pc, #56]	@ (8005b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aec:	68d2      	ldr	r2, [r2, #12]
 8005aee:	0a12      	lsrs	r2, r2, #8
 8005af0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005af4:	fb02 f303 	mul.w	r3, r2, r3
 8005af8:	617b      	str	r3, [r7, #20]
    break;
 8005afa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005afc:	4b09      	ldr	r3, [pc, #36]	@ (8005b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	0e5b      	lsrs	r3, r3, #25
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	3301      	adds	r3, #1
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b16:	687b      	ldr	r3, [r7, #4]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	40021000 	.word	0x40021000
 8005b28:	007a1200 	.word	0x007a1200
 8005b2c:	00f42400 	.word	0x00f42400

08005b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b38:	2300      	movs	r3, #0
 8005b3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8098 	beq.w	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b52:	4b43      	ldr	r3, [pc, #268]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10d      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b5e:	4b40      	ldr	r3, [pc, #256]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b62:	4a3f      	ldr	r2, [pc, #252]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b72:	60bb      	str	r3, [r7, #8]
 8005b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b76:	2301      	movs	r3, #1
 8005b78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a39      	ldr	r2, [pc, #228]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b86:	f7fc f9f5 	bl	8001f74 <HAL_GetTick>
 8005b8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b8c:	e009      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b8e:	f7fc f9f1 	bl	8001f74 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d902      	bls.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	74fb      	strb	r3, [r7, #19]
        break;
 8005ba0:	e005      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ba2:	4b30      	ldr	r3, [pc, #192]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0ef      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005bae:	7cfb      	ldrb	r3, [r7, #19]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d159      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bbe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d01e      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d019      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bd0:	4b23      	ldr	r3, [pc, #140]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bdc:	4b20      	ldr	r3, [pc, #128]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bec:	4b1c      	ldr	r3, [pc, #112]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bfc:	4a18      	ldr	r2, [pc, #96]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d016      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0e:	f7fc f9b1 	bl	8001f74 <HAL_GetTick>
 8005c12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c14:	e00b      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c16:	f7fc f9ad 	bl	8001f74 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d902      	bls.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	74fb      	strb	r3, [r7, #19]
            break;
 8005c2c:	e006      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0ec      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c3c:	7cfb      	ldrb	r3, [r7, #19]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10b      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c42:	4b07      	ldr	r3, [pc, #28]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c50:	4903      	ldr	r1, [pc, #12]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c58:	e008      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c5a:	7cfb      	ldrb	r3, [r7, #19]
 8005c5c:	74bb      	strb	r3, [r7, #18]
 8005c5e:	e005      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c60:	40021000 	.word	0x40021000
 8005c64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c68:	7cfb      	ldrb	r3, [r7, #19]
 8005c6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c6c:	7c7b      	ldrb	r3, [r7, #17]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d105      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c72:	4ba7      	ldr	r3, [pc, #668]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c76:	4aa6      	ldr	r2, [pc, #664]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c8a:	4ba1      	ldr	r3, [pc, #644]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c90:	f023 0203 	bic.w	r2, r3, #3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	499d      	ldr	r1, [pc, #628]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cac:	4b98      	ldr	r3, [pc, #608]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb2:	f023 020c 	bic.w	r2, r3, #12
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	4995      	ldr	r1, [pc, #596]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cce:	4b90      	ldr	r3, [pc, #576]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	498c      	ldr	r1, [pc, #560]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cf0:	4b87      	ldr	r3, [pc, #540]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	4984      	ldr	r1, [pc, #528]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d12:	4b7f      	ldr	r3, [pc, #508]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	497b      	ldr	r1, [pc, #492]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d34:	4b76      	ldr	r3, [pc, #472]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	4973      	ldr	r1, [pc, #460]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d56:	4b6e      	ldr	r3, [pc, #440]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	496a      	ldr	r1, [pc, #424]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d78:	4b65      	ldr	r3, [pc, #404]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	4962      	ldr	r1, [pc, #392]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	4959      	ldr	r1, [pc, #356]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dbc:	4b54      	ldr	r3, [pc, #336]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dca:	4951      	ldr	r1, [pc, #324]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d015      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dde:	4b4c      	ldr	r3, [pc, #304]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dec:	4948      	ldr	r1, [pc, #288]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dfc:	d105      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dfe:	4b44      	ldr	r3, [pc, #272]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	4a43      	ldr	r2, [pc, #268]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e08:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d015      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e16:	4b3e      	ldr	r3, [pc, #248]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e24:	493a      	ldr	r1, [pc, #232]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e34:	d105      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e36:	4b36      	ldr	r3, [pc, #216]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	4a35      	ldr	r2, [pc, #212]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e40:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d015      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e4e:	4b30      	ldr	r3, [pc, #192]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e54:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e5c:	492c      	ldr	r1, [pc, #176]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e6c:	d105      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e6e:	4b28      	ldr	r3, [pc, #160]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	4a27      	ldr	r2, [pc, #156]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e78:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d015      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e86:	4b22      	ldr	r3, [pc, #136]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	491e      	ldr	r1, [pc, #120]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ea4:	d105      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	4a19      	ldr	r2, [pc, #100]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eb0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d015      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ebe:	4b14      	ldr	r3, [pc, #80]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ecc:	4910      	ldr	r1, [pc, #64]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005edc:	d105      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ede:	4b0c      	ldr	r3, [pc, #48]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ee8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d018      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ef6:	4b06      	ldr	r3, [pc, #24]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f04:	4902      	ldr	r1, [pc, #8]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	e001      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f10:	40021000 	.word	0x40021000
 8005f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f1a:	d105      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f1c:	4b21      	ldr	r3, [pc, #132]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4a20      	ldr	r2, [pc, #128]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f26:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d015      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005f34:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	4918      	ldr	r1, [pc, #96]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f52:	d105      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f54:	4b13      	ldr	r3, [pc, #76]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4a12      	ldr	r2, [pc, #72]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f5e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d015      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f7a:	490a      	ldr	r1, [pc, #40]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f8a:	d105      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f8c:	4b05      	ldr	r3, [pc, #20]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4a04      	ldr	r2, [pc, #16]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f98:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40021000 	.word	0x40021000

08005fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e049      	b.n	800604e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f841 	bl	8006056 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f000 fa28 	bl	800643c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	d001      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e04f      	b.n	8006124 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a23      	ldr	r2, [pc, #140]	@ (8006130 <HAL_TIM_Base_Start_IT+0xc4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d01d      	beq.n	80060e2 <HAL_TIM_Base_Start_IT+0x76>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ae:	d018      	beq.n	80060e2 <HAL_TIM_Base_Start_IT+0x76>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006134 <HAL_TIM_Base_Start_IT+0xc8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <HAL_TIM_Base_Start_IT+0x76>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1e      	ldr	r2, [pc, #120]	@ (8006138 <HAL_TIM_Base_Start_IT+0xcc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00e      	beq.n	80060e2 <HAL_TIM_Base_Start_IT+0x76>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a1c      	ldr	r2, [pc, #112]	@ (800613c <HAL_TIM_Base_Start_IT+0xd0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d009      	beq.n	80060e2 <HAL_TIM_Base_Start_IT+0x76>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006140 <HAL_TIM_Base_Start_IT+0xd4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d004      	beq.n	80060e2 <HAL_TIM_Base_Start_IT+0x76>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a19      	ldr	r2, [pc, #100]	@ (8006144 <HAL_TIM_Base_Start_IT+0xd8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d115      	bne.n	800610e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	4b17      	ldr	r3, [pc, #92]	@ (8006148 <HAL_TIM_Base_Start_IT+0xdc>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b06      	cmp	r3, #6
 80060f2:	d015      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0xb4>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060fa:	d011      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610c:	e008      	b.n	8006120 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0201 	orr.w	r2, r2, #1
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e000      	b.n	8006122 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006120:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	40012c00 	.word	0x40012c00
 8006134:	40000400 	.word	0x40000400
 8006138:	40000800 	.word	0x40000800
 800613c:	40013400 	.word	0x40013400
 8006140:	40014000 	.word	0x40014000
 8006144:	40015000 	.word	0x40015000
 8006148:	00010007 	.word	0x00010007

0800614c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d020      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01b      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0202 	mvn.w	r2, #2
 8006180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f931 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f923 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f934 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d020      	beq.n	80061fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01b      	beq.n	80061fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0204 	mvn.w	r2, #4
 80061cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f90b 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f8fd 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f90e 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d020      	beq.n	8006248 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0208 	mvn.w	r2, #8
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2204      	movs	r2, #4
 800621e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f8e5 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8d7 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f8e8 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b00      	cmp	r3, #0
 8006250:	d020      	beq.n	8006294 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0210 	mvn.w	r2, #16
 8006264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2208      	movs	r2, #8
 800626a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f8bf 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f8b1 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f8c2 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00c      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0201 	mvn.w	r2, #1
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fb fb48 	bl	8001948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00c      	beq.n	80062e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d007      	beq.n	80062e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80062de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f95f 	bl	80065a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00c      	beq.n	800630a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f957 	bl	80065b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00c      	beq.n	800632e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f87c 	bl	8006426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00c      	beq.n	8006352 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f06f 0220 	mvn.w	r2, #32
 800634a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f91f 	bl	8006590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00c      	beq.n	8006376 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d007      	beq.n	8006376 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800636e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f92b 	bl	80065cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00c      	beq.n	800639a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f923 	bl	80065e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00c      	beq.n	80063be <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80063b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f91b 	bl	80065f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00c      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80063da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f913 	bl	8006608 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a48      	ldr	r2, [pc, #288]	@ (8006570 <TIM_Base_SetConfig+0x134>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d013      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800645a:	d00f      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a45      	ldr	r2, [pc, #276]	@ (8006574 <TIM_Base_SetConfig+0x138>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00b      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a44      	ldr	r2, [pc, #272]	@ (8006578 <TIM_Base_SetConfig+0x13c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d007      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a43      	ldr	r2, [pc, #268]	@ (800657c <TIM_Base_SetConfig+0x140>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a42      	ldr	r2, [pc, #264]	@ (8006580 <TIM_Base_SetConfig+0x144>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d108      	bne.n	800648e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a37      	ldr	r2, [pc, #220]	@ (8006570 <TIM_Base_SetConfig+0x134>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d01f      	beq.n	80064d6 <TIM_Base_SetConfig+0x9a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800649c:	d01b      	beq.n	80064d6 <TIM_Base_SetConfig+0x9a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a34      	ldr	r2, [pc, #208]	@ (8006574 <TIM_Base_SetConfig+0x138>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d017      	beq.n	80064d6 <TIM_Base_SetConfig+0x9a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a33      	ldr	r2, [pc, #204]	@ (8006578 <TIM_Base_SetConfig+0x13c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d013      	beq.n	80064d6 <TIM_Base_SetConfig+0x9a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a32      	ldr	r2, [pc, #200]	@ (800657c <TIM_Base_SetConfig+0x140>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00f      	beq.n	80064d6 <TIM_Base_SetConfig+0x9a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a32      	ldr	r2, [pc, #200]	@ (8006584 <TIM_Base_SetConfig+0x148>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00b      	beq.n	80064d6 <TIM_Base_SetConfig+0x9a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a31      	ldr	r2, [pc, #196]	@ (8006588 <TIM_Base_SetConfig+0x14c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d007      	beq.n	80064d6 <TIM_Base_SetConfig+0x9a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a30      	ldr	r2, [pc, #192]	@ (800658c <TIM_Base_SetConfig+0x150>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d003      	beq.n	80064d6 <TIM_Base_SetConfig+0x9a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006580 <TIM_Base_SetConfig+0x144>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d108      	bne.n	80064e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a18      	ldr	r2, [pc, #96]	@ (8006570 <TIM_Base_SetConfig+0x134>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d013      	beq.n	800653c <TIM_Base_SetConfig+0x100>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a19      	ldr	r2, [pc, #100]	@ (800657c <TIM_Base_SetConfig+0x140>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00f      	beq.n	800653c <TIM_Base_SetConfig+0x100>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a19      	ldr	r2, [pc, #100]	@ (8006584 <TIM_Base_SetConfig+0x148>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00b      	beq.n	800653c <TIM_Base_SetConfig+0x100>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a18      	ldr	r2, [pc, #96]	@ (8006588 <TIM_Base_SetConfig+0x14c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d007      	beq.n	800653c <TIM_Base_SetConfig+0x100>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a17      	ldr	r2, [pc, #92]	@ (800658c <TIM_Base_SetConfig+0x150>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d003      	beq.n	800653c <TIM_Base_SetConfig+0x100>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a12      	ldr	r2, [pc, #72]	@ (8006580 <TIM_Base_SetConfig+0x144>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d103      	bne.n	8006544 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b01      	cmp	r3, #1
 8006554:	d105      	bne.n	8006562 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	f023 0201 	bic.w	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	611a      	str	r2, [r3, #16]
  }
}
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40000400 	.word	0x40000400
 8006578:	40000800 	.word	0x40000800
 800657c:	40013400 	.word	0x40013400
 8006580:	40015000 	.word	0x40015000
 8006584:	40014000 	.word	0x40014000
 8006588:	40014400 	.word	0x40014400
 800658c:	40014800 	.word	0x40014800

08006590 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e042      	b.n	80066b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7fb fa77 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2224      	movs	r2, #36	@ 0x24
 800664a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0201 	bic.w	r2, r2, #1
 800665c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fb24 	bl	8006cb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f825 	bl	80066bc <UART_SetConfig>
 8006672:	4603      	mov	r3, r0
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e01b      	b.n	80066b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800668a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800669a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fba3 	bl	8006df8 <UART_CheckIdleState>
 80066b2:	4603      	mov	r3, r0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066c0:	b08c      	sub	sp, #48	@ 0x30
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	431a      	orrs	r2, r3
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	431a      	orrs	r2, r3
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	4baa      	ldr	r3, [pc, #680]	@ (8006994 <UART_SetConfig+0x2d8>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	6812      	ldr	r2, [r2, #0]
 80066f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a9f      	ldr	r2, [pc, #636]	@ (8006998 <UART_SetConfig+0x2dc>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d004      	beq.n	8006728 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006724:	4313      	orrs	r3, r2
 8006726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006732:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	6812      	ldr	r2, [r2, #0]
 800673a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800673c:	430b      	orrs	r3, r1
 800673e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006746:	f023 010f 	bic.w	r1, r3, #15
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a90      	ldr	r2, [pc, #576]	@ (800699c <UART_SetConfig+0x2e0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d125      	bne.n	80067ac <UART_SetConfig+0xf0>
 8006760:	4b8f      	ldr	r3, [pc, #572]	@ (80069a0 <UART_SetConfig+0x2e4>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	2b03      	cmp	r3, #3
 800676c:	d81a      	bhi.n	80067a4 <UART_SetConfig+0xe8>
 800676e:	a201      	add	r2, pc, #4	@ (adr r2, 8006774 <UART_SetConfig+0xb8>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	08006785 	.word	0x08006785
 8006778:	08006795 	.word	0x08006795
 800677c:	0800678d 	.word	0x0800678d
 8006780:	0800679d 	.word	0x0800679d
 8006784:	2301      	movs	r3, #1
 8006786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800678a:	e116      	b.n	80069ba <UART_SetConfig+0x2fe>
 800678c:	2302      	movs	r3, #2
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006792:	e112      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006794:	2304      	movs	r3, #4
 8006796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800679a:	e10e      	b.n	80069ba <UART_SetConfig+0x2fe>
 800679c:	2308      	movs	r3, #8
 800679e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067a2:	e10a      	b.n	80069ba <UART_SetConfig+0x2fe>
 80067a4:	2310      	movs	r3, #16
 80067a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067aa:	e106      	b.n	80069ba <UART_SetConfig+0x2fe>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a7c      	ldr	r2, [pc, #496]	@ (80069a4 <UART_SetConfig+0x2e8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d138      	bne.n	8006828 <UART_SetConfig+0x16c>
 80067b6:	4b7a      	ldr	r3, [pc, #488]	@ (80069a0 <UART_SetConfig+0x2e4>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067bc:	f003 030c 	and.w	r3, r3, #12
 80067c0:	2b0c      	cmp	r3, #12
 80067c2:	d82d      	bhi.n	8006820 <UART_SetConfig+0x164>
 80067c4:	a201      	add	r2, pc, #4	@ (adr r2, 80067cc <UART_SetConfig+0x110>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	08006801 	.word	0x08006801
 80067d0:	08006821 	.word	0x08006821
 80067d4:	08006821 	.word	0x08006821
 80067d8:	08006821 	.word	0x08006821
 80067dc:	08006811 	.word	0x08006811
 80067e0:	08006821 	.word	0x08006821
 80067e4:	08006821 	.word	0x08006821
 80067e8:	08006821 	.word	0x08006821
 80067ec:	08006809 	.word	0x08006809
 80067f0:	08006821 	.word	0x08006821
 80067f4:	08006821 	.word	0x08006821
 80067f8:	08006821 	.word	0x08006821
 80067fc:	08006819 	.word	0x08006819
 8006800:	2300      	movs	r3, #0
 8006802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006806:	e0d8      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006808:	2302      	movs	r3, #2
 800680a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800680e:	e0d4      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006810:	2304      	movs	r3, #4
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006816:	e0d0      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006818:	2308      	movs	r3, #8
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800681e:	e0cc      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006820:	2310      	movs	r3, #16
 8006822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006826:	e0c8      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5e      	ldr	r2, [pc, #376]	@ (80069a8 <UART_SetConfig+0x2ec>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d125      	bne.n	800687e <UART_SetConfig+0x1c2>
 8006832:	4b5b      	ldr	r3, [pc, #364]	@ (80069a0 <UART_SetConfig+0x2e4>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006838:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800683c:	2b30      	cmp	r3, #48	@ 0x30
 800683e:	d016      	beq.n	800686e <UART_SetConfig+0x1b2>
 8006840:	2b30      	cmp	r3, #48	@ 0x30
 8006842:	d818      	bhi.n	8006876 <UART_SetConfig+0x1ba>
 8006844:	2b20      	cmp	r3, #32
 8006846:	d00a      	beq.n	800685e <UART_SetConfig+0x1a2>
 8006848:	2b20      	cmp	r3, #32
 800684a:	d814      	bhi.n	8006876 <UART_SetConfig+0x1ba>
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <UART_SetConfig+0x19a>
 8006850:	2b10      	cmp	r3, #16
 8006852:	d008      	beq.n	8006866 <UART_SetConfig+0x1aa>
 8006854:	e00f      	b.n	8006876 <UART_SetConfig+0x1ba>
 8006856:	2300      	movs	r3, #0
 8006858:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800685c:	e0ad      	b.n	80069ba <UART_SetConfig+0x2fe>
 800685e:	2302      	movs	r3, #2
 8006860:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006864:	e0a9      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006866:	2304      	movs	r3, #4
 8006868:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800686c:	e0a5      	b.n	80069ba <UART_SetConfig+0x2fe>
 800686e:	2308      	movs	r3, #8
 8006870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006874:	e0a1      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006876:	2310      	movs	r3, #16
 8006878:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800687c:	e09d      	b.n	80069ba <UART_SetConfig+0x2fe>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a4a      	ldr	r2, [pc, #296]	@ (80069ac <UART_SetConfig+0x2f0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d125      	bne.n	80068d4 <UART_SetConfig+0x218>
 8006888:	4b45      	ldr	r3, [pc, #276]	@ (80069a0 <UART_SetConfig+0x2e4>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800688e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006892:	2bc0      	cmp	r3, #192	@ 0xc0
 8006894:	d016      	beq.n	80068c4 <UART_SetConfig+0x208>
 8006896:	2bc0      	cmp	r3, #192	@ 0xc0
 8006898:	d818      	bhi.n	80068cc <UART_SetConfig+0x210>
 800689a:	2b80      	cmp	r3, #128	@ 0x80
 800689c:	d00a      	beq.n	80068b4 <UART_SetConfig+0x1f8>
 800689e:	2b80      	cmp	r3, #128	@ 0x80
 80068a0:	d814      	bhi.n	80068cc <UART_SetConfig+0x210>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <UART_SetConfig+0x1f0>
 80068a6:	2b40      	cmp	r3, #64	@ 0x40
 80068a8:	d008      	beq.n	80068bc <UART_SetConfig+0x200>
 80068aa:	e00f      	b.n	80068cc <UART_SetConfig+0x210>
 80068ac:	2300      	movs	r3, #0
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068b2:	e082      	b.n	80069ba <UART_SetConfig+0x2fe>
 80068b4:	2302      	movs	r3, #2
 80068b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ba:	e07e      	b.n	80069ba <UART_SetConfig+0x2fe>
 80068bc:	2304      	movs	r3, #4
 80068be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c2:	e07a      	b.n	80069ba <UART_SetConfig+0x2fe>
 80068c4:	2308      	movs	r3, #8
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ca:	e076      	b.n	80069ba <UART_SetConfig+0x2fe>
 80068cc:	2310      	movs	r3, #16
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d2:	e072      	b.n	80069ba <UART_SetConfig+0x2fe>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a35      	ldr	r2, [pc, #212]	@ (80069b0 <UART_SetConfig+0x2f4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d12a      	bne.n	8006934 <UART_SetConfig+0x278>
 80068de:	4b30      	ldr	r3, [pc, #192]	@ (80069a0 <UART_SetConfig+0x2e4>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068ec:	d01a      	beq.n	8006924 <UART_SetConfig+0x268>
 80068ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068f2:	d81b      	bhi.n	800692c <UART_SetConfig+0x270>
 80068f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f8:	d00c      	beq.n	8006914 <UART_SetConfig+0x258>
 80068fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068fe:	d815      	bhi.n	800692c <UART_SetConfig+0x270>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <UART_SetConfig+0x250>
 8006904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006908:	d008      	beq.n	800691c <UART_SetConfig+0x260>
 800690a:	e00f      	b.n	800692c <UART_SetConfig+0x270>
 800690c:	2300      	movs	r3, #0
 800690e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006912:	e052      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006914:	2302      	movs	r3, #2
 8006916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800691a:	e04e      	b.n	80069ba <UART_SetConfig+0x2fe>
 800691c:	2304      	movs	r3, #4
 800691e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006922:	e04a      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006924:	2308      	movs	r3, #8
 8006926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800692a:	e046      	b.n	80069ba <UART_SetConfig+0x2fe>
 800692c:	2310      	movs	r3, #16
 800692e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006932:	e042      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a17      	ldr	r2, [pc, #92]	@ (8006998 <UART_SetConfig+0x2dc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d13a      	bne.n	80069b4 <UART_SetConfig+0x2f8>
 800693e:	4b18      	ldr	r3, [pc, #96]	@ (80069a0 <UART_SetConfig+0x2e4>)
 8006940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006944:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006948:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800694c:	d01a      	beq.n	8006984 <UART_SetConfig+0x2c8>
 800694e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006952:	d81b      	bhi.n	800698c <UART_SetConfig+0x2d0>
 8006954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006958:	d00c      	beq.n	8006974 <UART_SetConfig+0x2b8>
 800695a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800695e:	d815      	bhi.n	800698c <UART_SetConfig+0x2d0>
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <UART_SetConfig+0x2b0>
 8006964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006968:	d008      	beq.n	800697c <UART_SetConfig+0x2c0>
 800696a:	e00f      	b.n	800698c <UART_SetConfig+0x2d0>
 800696c:	2300      	movs	r3, #0
 800696e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006972:	e022      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006974:	2302      	movs	r3, #2
 8006976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800697a:	e01e      	b.n	80069ba <UART_SetConfig+0x2fe>
 800697c:	2304      	movs	r3, #4
 800697e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006982:	e01a      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006984:	2308      	movs	r3, #8
 8006986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800698a:	e016      	b.n	80069ba <UART_SetConfig+0x2fe>
 800698c:	2310      	movs	r3, #16
 800698e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006992:	e012      	b.n	80069ba <UART_SetConfig+0x2fe>
 8006994:	cfff69f3 	.word	0xcfff69f3
 8006998:	40008000 	.word	0x40008000
 800699c:	40013800 	.word	0x40013800
 80069a0:	40021000 	.word	0x40021000
 80069a4:	40004400 	.word	0x40004400
 80069a8:	40004800 	.word	0x40004800
 80069ac:	40004c00 	.word	0x40004c00
 80069b0:	40005000 	.word	0x40005000
 80069b4:	2310      	movs	r3, #16
 80069b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4aae      	ldr	r2, [pc, #696]	@ (8006c78 <UART_SetConfig+0x5bc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	f040 8097 	bne.w	8006af4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d823      	bhi.n	8006a16 <UART_SetConfig+0x35a>
 80069ce:	a201      	add	r2, pc, #4	@ (adr r2, 80069d4 <UART_SetConfig+0x318>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a17 	.word	0x08006a17
 80069dc:	08006a01 	.word	0x08006a01
 80069e0:	08006a17 	.word	0x08006a17
 80069e4:	08006a07 	.word	0x08006a07
 80069e8:	08006a17 	.word	0x08006a17
 80069ec:	08006a17 	.word	0x08006a17
 80069f0:	08006a17 	.word	0x08006a17
 80069f4:	08006a0f 	.word	0x08006a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f8:	f7fe fff6 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 80069fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069fe:	e010      	b.n	8006a22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a00:	4b9e      	ldr	r3, [pc, #632]	@ (8006c7c <UART_SetConfig+0x5c0>)
 8006a02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a04:	e00d      	b.n	8006a22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a06:	f7fe ff81 	bl	800590c <HAL_RCC_GetSysClockFreq>
 8006a0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a0c:	e009      	b.n	8006a22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a14:	e005      	b.n	8006a22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8130 	beq.w	8006c8a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	4a94      	ldr	r2, [pc, #592]	@ (8006c80 <UART_SetConfig+0x5c4>)
 8006a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a34:	461a      	mov	r2, r3
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	4613      	mov	r3, r2
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	4413      	add	r3, r2
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d305      	bcc.n	8006a5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d903      	bls.n	8006a62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a60:	e113      	b.n	8006c8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	2200      	movs	r2, #0
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	60fa      	str	r2, [r7, #12]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6e:	4a84      	ldr	r2, [pc, #528]	@ (8006c80 <UART_SetConfig+0x5c4>)
 8006a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2200      	movs	r2, #0
 8006a78:	603b      	str	r3, [r7, #0]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a84:	f7fa f8b8 	bl	8000bf8 <__aeabi_uldivmod>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4619      	mov	r1, r3
 8006a90:	f04f 0200 	mov.w	r2, #0
 8006a94:	f04f 0300 	mov.w	r3, #0
 8006a98:	020b      	lsls	r3, r1, #8
 8006a9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a9e:	0202      	lsls	r2, r0, #8
 8006aa0:	6979      	ldr	r1, [r7, #20]
 8006aa2:	6849      	ldr	r1, [r1, #4]
 8006aa4:	0849      	lsrs	r1, r1, #1
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	4605      	mov	r5, r0
 8006aac:	eb12 0804 	adds.w	r8, r2, r4
 8006ab0:	eb43 0905 	adc.w	r9, r3, r5
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	469a      	mov	sl, r3
 8006abc:	4693      	mov	fp, r2
 8006abe:	4652      	mov	r2, sl
 8006ac0:	465b      	mov	r3, fp
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	f7fa f897 	bl	8000bf8 <__aeabi_uldivmod>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4613      	mov	r3, r2
 8006ad0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad8:	d308      	bcc.n	8006aec <UART_SetConfig+0x430>
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ae0:	d204      	bcs.n	8006aec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6a3a      	ldr	r2, [r7, #32]
 8006ae8:	60da      	str	r2, [r3, #12]
 8006aea:	e0ce      	b.n	8006c8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006af2:	e0ca      	b.n	8006c8a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006afc:	d166      	bne.n	8006bcc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006afe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d827      	bhi.n	8006b56 <UART_SetConfig+0x49a>
 8006b06:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <UART_SetConfig+0x450>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b31 	.word	0x08006b31
 8006b10:	08006b39 	.word	0x08006b39
 8006b14:	08006b41 	.word	0x08006b41
 8006b18:	08006b57 	.word	0x08006b57
 8006b1c:	08006b47 	.word	0x08006b47
 8006b20:	08006b57 	.word	0x08006b57
 8006b24:	08006b57 	.word	0x08006b57
 8006b28:	08006b57 	.word	0x08006b57
 8006b2c:	08006b4f 	.word	0x08006b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b30:	f7fe ff5a 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8006b34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b36:	e014      	b.n	8006b62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b38:	f7fe ff6c 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8006b3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b3e:	e010      	b.n	8006b62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b40:	4b4e      	ldr	r3, [pc, #312]	@ (8006c7c <UART_SetConfig+0x5c0>)
 8006b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b44:	e00d      	b.n	8006b62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b46:	f7fe fee1 	bl	800590c <HAL_RCC_GetSysClockFreq>
 8006b4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b4c:	e009      	b.n	8006b62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b54:	e005      	b.n	8006b62 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8090 	beq.w	8006c8a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6e:	4a44      	ldr	r2, [pc, #272]	@ (8006c80 <UART_SetConfig+0x5c4>)
 8006b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b74:	461a      	mov	r2, r3
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b7c:	005a      	lsls	r2, r3, #1
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	441a      	add	r2, r3
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	2b0f      	cmp	r3, #15
 8006b94:	d916      	bls.n	8006bc4 <UART_SetConfig+0x508>
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b9c:	d212      	bcs.n	8006bc4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f023 030f 	bic.w	r3, r3, #15
 8006ba6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	8bfb      	ldrh	r3, [r7, #30]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	8bfa      	ldrh	r2, [r7, #30]
 8006bc0:	60da      	str	r2, [r3, #12]
 8006bc2:	e062      	b.n	8006c8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bca:	e05e      	b.n	8006c8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bcc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d828      	bhi.n	8006c26 <UART_SetConfig+0x56a>
 8006bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bdc <UART_SetConfig+0x520>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c09 	.word	0x08006c09
 8006be4:	08006c11 	.word	0x08006c11
 8006be8:	08006c27 	.word	0x08006c27
 8006bec:	08006c17 	.word	0x08006c17
 8006bf0:	08006c27 	.word	0x08006c27
 8006bf4:	08006c27 	.word	0x08006c27
 8006bf8:	08006c27 	.word	0x08006c27
 8006bfc:	08006c1f 	.word	0x08006c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c00:	f7fe fef2 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8006c04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c06:	e014      	b.n	8006c32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c08:	f7fe ff04 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8006c0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c0e:	e010      	b.n	8006c32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c10:	4b1a      	ldr	r3, [pc, #104]	@ (8006c7c <UART_SetConfig+0x5c0>)
 8006c12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c14:	e00d      	b.n	8006c32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c16:	f7fe fe79 	bl	800590c <HAL_RCC_GetSysClockFreq>
 8006c1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c1c:	e009      	b.n	8006c32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c24:	e005      	b.n	8006c32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c30:	bf00      	nop
    }

    if (pclk != 0U)
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d028      	beq.n	8006c8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3c:	4a10      	ldr	r2, [pc, #64]	@ (8006c80 <UART_SetConfig+0x5c4>)
 8006c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c42:	461a      	mov	r2, r3
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	441a      	add	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	2b0f      	cmp	r3, #15
 8006c60:	d910      	bls.n	8006c84 <UART_SetConfig+0x5c8>
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c68:	d20c      	bcs.n	8006c84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60da      	str	r2, [r3, #12]
 8006c74:	e009      	b.n	8006c8a <UART_SetConfig+0x5ce>
 8006c76:	bf00      	nop
 8006c78:	40008000 	.word	0x40008000
 8006c7c:	00f42400 	.word	0x00f42400
 8006c80:	080111ec 	.word	0x080111ec
      }
      else
      {
        ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ca6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3730      	adds	r7, #48	@ 0x30
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d48:	f003 0310 	and.w	r3, r3, #16
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01a      	beq.n	8006dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006db2:	d10a      	bne.n	8006dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	605a      	str	r2, [r3, #4]
  }
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b098      	sub	sp, #96	@ 0x60
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e08:	f7fb f8b4 	bl	8001f74 <HAL_GetTick>
 8006e0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0308 	and.w	r3, r3, #8
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d12f      	bne.n	8006e7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e24:	2200      	movs	r2, #0
 8006e26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f88e 	bl	8006f4c <UART_WaitOnFlagUntilTimeout>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d022      	beq.n	8006e7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	461a      	mov	r2, r3
 8006e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e6      	bne.n	8006e36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e063      	b.n	8006f44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d149      	bne.n	8006f1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e92:	2200      	movs	r2, #0
 8006e94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f857 	bl	8006f4c <UART_WaitOnFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d03c      	beq.n	8006f1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e6      	bne.n	8006ea4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3308      	adds	r3, #8
 8006edc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f023 0301 	bic.w	r3, r3, #1
 8006eec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ef6:	61fa      	str	r2, [r7, #28]
 8006ef8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	69b9      	ldr	r1, [r7, #24]
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	617b      	str	r3, [r7, #20]
   return(result);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e5      	bne.n	8006ed6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e012      	b.n	8006f44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3758      	adds	r7, #88	@ 0x58
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	603b      	str	r3, [r7, #0]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5c:	e04f      	b.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d04b      	beq.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f66:	f7fb f805 	bl	8001f74 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d302      	bcc.n	8006f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e04e      	b.n	800701e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0304 	and.w	r3, r3, #4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d037      	beq.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b80      	cmp	r3, #128	@ 0x80
 8006f92:	d034      	beq.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b40      	cmp	r3, #64	@ 0x40
 8006f98:	d031      	beq.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d110      	bne.n	8006fca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2208      	movs	r2, #8
 8006fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f838 	bl	8007026 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e029      	b.n	800701e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fd8:	d111      	bne.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fe2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f81e 	bl	8007026 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e00f      	b.n	800701e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69da      	ldr	r2, [r3, #28]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4013      	ands	r3, r2
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	429a      	cmp	r2, r3
 800700c:	bf0c      	ite	eq
 800700e:	2301      	moveq	r3, #1
 8007010:	2300      	movne	r3, #0
 8007012:	b2db      	uxtb	r3, r3
 8007014:	461a      	mov	r2, r3
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	429a      	cmp	r2, r3
 800701a:	d0a0      	beq.n	8006f5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007026:	b480      	push	{r7}
 8007028:	b095      	sub	sp, #84	@ 0x54
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800704c:	643b      	str	r3, [r7, #64]	@ 0x40
 800704e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007052:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e6      	bne.n	800702e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3308      	adds	r3, #8
 8007066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007076:	f023 0301 	bic.w	r3, r3, #1
 800707a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3308      	adds	r3, #8
 8007082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007084:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007086:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800708a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e3      	bne.n	8007060 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800709c:	2b01      	cmp	r3, #1
 800709e:	d118      	bne.n	80070d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f023 0310 	bic.w	r3, r3, #16
 80070b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070be:	61bb      	str	r3, [r7, #24]
 80070c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6979      	ldr	r1, [r7, #20]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	613b      	str	r3, [r7, #16]
   return(result);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e6      	bne.n	80070a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80070e6:	bf00      	nop
 80070e8:	3754      	adds	r7, #84	@ 0x54
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_UARTEx_DisableFifoMode+0x16>
 8007104:	2302      	movs	r3, #2
 8007106:	e027      	b.n	8007158 <HAL_UARTEx_DisableFifoMode+0x66>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2224      	movs	r2, #36	@ 0x24
 8007114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0201 	bic.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007136:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007178:	2302      	movs	r3, #2
 800717a:	e02d      	b.n	80071d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2224      	movs	r2, #36	@ 0x24
 8007188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0201 	bic.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f84f 	bl	800725c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e02d      	b.n	8007254 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2224      	movs	r2, #36	@ 0x24
 8007204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0201 	bic.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f811 	bl	800725c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007268:	2b00      	cmp	r3, #0
 800726a:	d108      	bne.n	800727e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800727c:	e031      	b.n	80072e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800727e:	2308      	movs	r3, #8
 8007280:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007282:	2308      	movs	r3, #8
 8007284:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	0e5b      	lsrs	r3, r3, #25
 800728e:	b2db      	uxtb	r3, r3
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	0f5b      	lsrs	r3, r3, #29
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	7b3a      	ldrb	r2, [r7, #12]
 80072aa:	4911      	ldr	r1, [pc, #68]	@ (80072f0 <UARTEx_SetNbDataToProcess+0x94>)
 80072ac:	5c8a      	ldrb	r2, [r1, r2]
 80072ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072b2:	7b3a      	ldrb	r2, [r7, #12]
 80072b4:	490f      	ldr	r1, [pc, #60]	@ (80072f4 <UARTEx_SetNbDataToProcess+0x98>)
 80072b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80072bc:	b29a      	uxth	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	7b7a      	ldrb	r2, [r7, #13]
 80072c8:	4909      	ldr	r1, [pc, #36]	@ (80072f0 <UARTEx_SetNbDataToProcess+0x94>)
 80072ca:	5c8a      	ldrb	r2, [r1, r2]
 80072cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072d0:	7b7a      	ldrb	r2, [r7, #13]
 80072d2:	4908      	ldr	r1, [pc, #32]	@ (80072f4 <UARTEx_SetNbDataToProcess+0x98>)
 80072d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	08011204 	.word	0x08011204
 80072f4:	0801120c 	.word	0x0801120c

080072f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007308:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800730c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	b29a      	uxth	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800732e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007332:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	b29b      	uxth	r3, r3
 8007340:	43db      	mvns	r3, r3
 8007342:	b29b      	uxth	r3, r3
 8007344:	4013      	ands	r3, r2
 8007346:	b29a      	uxth	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	1d3b      	adds	r3, r7, #4
 8007366:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007398:	b480      	push	{r7}
 800739a:	b0a7      	sub	sp, #156	@ 0x9c
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80073ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073be:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	78db      	ldrb	r3, [r3, #3]
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d81f      	bhi.n	800740a <USB_ActivateEndpoint+0x72>
 80073ca:	a201      	add	r2, pc, #4	@ (adr r2, 80073d0 <USB_ActivateEndpoint+0x38>)
 80073cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d0:	080073e1 	.word	0x080073e1
 80073d4:	080073fd 	.word	0x080073fd
 80073d8:	08007413 	.word	0x08007413
 80073dc:	080073ef 	.word	0x080073ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80073e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80073e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80073e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80073ec:	e012      	b.n	8007414 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80073ee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80073f2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80073f6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80073fa:	e00b      	b.n	8007414 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80073fc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007400:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007404:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007408:	e004      	b.n	8007414 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007410:	e000      	b.n	8007414 <USB_ActivateEndpoint+0x7c>
      break;
 8007412:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	441a      	add	r2, r3
 800741e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007422:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800742a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800742e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007432:	b29b      	uxth	r3, r3
 8007434:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	b21b      	sxth	r3, r3
 8007446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800744a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744e:	b21a      	sxth	r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	b21b      	sxth	r3, r3
 8007456:	4313      	orrs	r3, r2
 8007458:	b21b      	sxth	r3, r3
 800745a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	441a      	add	r2, r3
 8007468:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800746c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800747c:	b29b      	uxth	r3, r3
 800747e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	7b1b      	ldrb	r3, [r3, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f040 8180 	bne.w	800778a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8084 	beq.w	800759c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800749e:	b29b      	uxth	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	4413      	add	r3, r2
 80074a6:	61bb      	str	r3, [r7, #24]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	00da      	lsls	r2, r3, #3
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	88db      	ldrh	r3, [r3, #6]
 80074bc:	085b      	lsrs	r3, r3, #1
 80074be:	b29b      	uxth	r3, r3
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	827b      	strh	r3, [r7, #18]
 80074d6:	8a7b      	ldrh	r3, [r7, #18]
 80074d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01b      	beq.n	8007518 <USB_ActivateEndpoint+0x180>
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074f6:	823b      	strh	r3, [r7, #16]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	8a3b      	ldrh	r3, [r7, #16]
 8007504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800750c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007510:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007514:	b29b      	uxth	r3, r3
 8007516:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	78db      	ldrb	r3, [r3, #3]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d020      	beq.n	8007562 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29b      	uxth	r3, r3
 800752e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007536:	81bb      	strh	r3, [r7, #12]
 8007538:	89bb      	ldrh	r3, [r7, #12]
 800753a:	f083 0320 	eor.w	r3, r3, #32
 800753e:	81bb      	strh	r3, [r7, #12]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	441a      	add	r2, r3
 800754a:	89bb      	ldrh	r3, [r7, #12]
 800754c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800755c:	b29b      	uxth	r3, r3
 800755e:	8013      	strh	r3, [r2, #0]
 8007560:	e3f9      	b.n	8007d56 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	b29b      	uxth	r3, r3
 8007570:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007578:	81fb      	strh	r3, [r7, #14]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	441a      	add	r2, r3
 8007584:	89fb      	ldrh	r3, [r7, #14]
 8007586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800758a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800758e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007596:	b29b      	uxth	r3, r3
 8007598:	8013      	strh	r3, [r2, #0]
 800759a:	e3dc      	b.n	8007d56 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ac:	4413      	add	r3, r2
 80075ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	00da      	lsls	r2, r3, #3
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	4413      	add	r3, r2
 80075ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	88db      	ldrh	r3, [r3, #6]
 80075c4:	085b      	lsrs	r3, r3, #1
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ce:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075da:	b29b      	uxth	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e0:	4413      	add	r3, r2
 80075e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	00da      	lsls	r2, r3, #3
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	4413      	add	r3, r2
 80075ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075fe:	b29a      	uxth	r2, r3
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	801a      	strh	r2, [r3, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <USB_ActivateEndpoint+0x28a>
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	b29b      	uxth	r3, r3
 8007612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800761a:	b29a      	uxth	r2, r3
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	801a      	strh	r2, [r3, #0]
 8007620:	e041      	b.n	80076a6 <USB_ActivateEndpoint+0x30e>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b3e      	cmp	r3, #62	@ 0x3e
 8007628:	d81c      	bhi.n	8007664 <USB_ActivateEndpoint+0x2cc>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	085b      	lsrs	r3, r3, #1
 8007630:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <USB_ActivateEndpoint+0x2b2>
 8007640:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007644:	3301      	adds	r3, #1
 8007646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29a      	uxth	r2, r3
 8007650:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007654:	b29b      	uxth	r3, r3
 8007656:	029b      	lsls	r3, r3, #10
 8007658:	b29b      	uxth	r3, r3
 800765a:	4313      	orrs	r3, r2
 800765c:	b29a      	uxth	r2, r3
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	e020      	b.n	80076a6 <USB_ActivateEndpoint+0x30e>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f003 031f 	and.w	r3, r3, #31
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <USB_ActivateEndpoint+0x2ec>
 800767a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800767e:	3b01      	subs	r3, #1
 8007680:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	b29a      	uxth	r2, r3
 800768a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800768e:	b29b      	uxth	r3, r3
 8007690:	029b      	lsls	r3, r3, #10
 8007692:	b29b      	uxth	r3, r3
 8007694:	4313      	orrs	r3, r2
 8007696:	b29b      	uxth	r3, r3
 8007698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800769c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80076b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d01b      	beq.n	80076f6 <USB_ActivateEndpoint+0x35e>
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d4:	843b      	strh	r3, [r7, #32]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	441a      	add	r2, r3
 80076e0:	8c3b      	ldrh	r3, [r7, #32]
 80076e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d124      	bne.n	8007748 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007714:	83bb      	strh	r3, [r7, #28]
 8007716:	8bbb      	ldrh	r3, [r7, #28]
 8007718:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800771c:	83bb      	strh	r3, [r7, #28]
 800771e:	8bbb      	ldrh	r3, [r7, #28]
 8007720:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007724:	83bb      	strh	r3, [r7, #28]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	441a      	add	r2, r3
 8007730:	8bbb      	ldrh	r3, [r7, #28]
 8007732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800773a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800773e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007742:	b29b      	uxth	r3, r3
 8007744:	8013      	strh	r3, [r2, #0]
 8007746:	e306      	b.n	8007d56 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800775a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800775e:	83fb      	strh	r3, [r7, #30]
 8007760:	8bfb      	ldrh	r3, [r7, #30]
 8007762:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007766:	83fb      	strh	r3, [r7, #30]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	441a      	add	r2, r3
 8007772:	8bfb      	ldrh	r3, [r7, #30]
 8007774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800777c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007784:	b29b      	uxth	r3, r3
 8007786:	8013      	strh	r3, [r2, #0]
 8007788:	e2e5      	b.n	8007d56 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	78db      	ldrb	r3, [r3, #3]
 800778e:	2b02      	cmp	r3, #2
 8007790:	d11e      	bne.n	80077d0 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077a8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	441a      	add	r2, r3
 80077b6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80077ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077c2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80077c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	8013      	strh	r3, [r2, #0]
 80077ce:	e01d      	b.n	800780c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80077e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	441a      	add	r2, r3
 80077f4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80077f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007808:	b29b      	uxth	r3, r3
 800780a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007816:	b29b      	uxth	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800781c:	4413      	add	r3, r2
 800781e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	00da      	lsls	r2, r3, #3
 8007826:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007828:	4413      	add	r3, r2
 800782a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800782e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	891b      	ldrh	r3, [r3, #8]
 8007834:	085b      	lsrs	r3, r3, #1
 8007836:	b29b      	uxth	r3, r3
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	677b      	str	r3, [r7, #116]	@ 0x74
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800784a:	b29b      	uxth	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007850:	4413      	add	r3, r2
 8007852:	677b      	str	r3, [r7, #116]	@ 0x74
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	00da      	lsls	r2, r3, #3
 800785a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800785c:	4413      	add	r3, r2
 800785e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007862:	673b      	str	r3, [r7, #112]	@ 0x70
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	895b      	ldrh	r3, [r3, #10]
 8007868:	085b      	lsrs	r3, r3, #1
 800786a:	b29b      	uxth	r3, r3
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007872:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	785b      	ldrb	r3, [r3, #1]
 8007878:	2b00      	cmp	r3, #0
 800787a:	f040 81af 	bne.w	8007bdc <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800788e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8007892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01d      	beq.n	80078d6 <USB_ActivateEndpoint+0x53e>
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078b0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	441a      	add	r2, r3
 80078be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80078c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80078e6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80078ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d01d      	beq.n	800792e <USB_ActivateEndpoint+0x596>
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007908:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	441a      	add	r2, r3
 8007916:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800791a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800791e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007926:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800792a:	b29b      	uxth	r3, r3
 800792c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	785b      	ldrb	r3, [r3, #1]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d16b      	bne.n	8007a0e <USB_ActivateEndpoint+0x676>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007940:	b29b      	uxth	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007946:	4413      	add	r3, r2
 8007948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	00da      	lsls	r2, r3, #3
 8007950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007952:	4413      	add	r3, r2
 8007954:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800795a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007964:	b29a      	uxth	r2, r3
 8007966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007968:	801a      	strh	r2, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <USB_ActivateEndpoint+0x5f0>
 8007972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007980:	b29a      	uxth	r2, r3
 8007982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	e05d      	b.n	8007a44 <USB_ActivateEndpoint+0x6ac>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b3e      	cmp	r3, #62	@ 0x3e
 800798e:	d81c      	bhi.n	80079ca <USB_ActivateEndpoint+0x632>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	085b      	lsrs	r3, r3, #1
 8007996:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <USB_ActivateEndpoint+0x618>
 80079a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079aa:	3301      	adds	r3, #1
 80079ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	029b      	lsls	r3, r3, #10
 80079be:	b29b      	uxth	r3, r3
 80079c0:	4313      	orrs	r3, r2
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	e03c      	b.n	8007a44 <USB_ActivateEndpoint+0x6ac>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	095b      	lsrs	r3, r3, #5
 80079d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <USB_ActivateEndpoint+0x652>
 80079e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079e4:	3b01      	subs	r3, #1
 80079e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	029b      	lsls	r3, r3, #10
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	4313      	orrs	r3, r2
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a0a:	801a      	strh	r2, [r3, #0]
 8007a0c:	e01a      	b.n	8007a44 <USB_ActivateEndpoint+0x6ac>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	785b      	ldrb	r3, [r3, #1]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d116      	bne.n	8007a44 <USB_ActivateEndpoint+0x6ac>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a26:	4413      	add	r3, r2
 8007a28:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	00da      	lsls	r2, r3, #3
 8007a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a32:	4413      	add	r3, r2
 8007a34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a38:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a42:	801a      	strh	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	785b      	ldrb	r3, [r3, #1]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d16b      	bne.n	8007b28 <USB_ActivateEndpoint+0x790>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a60:	4413      	add	r3, r2
 8007a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	00da      	lsls	r2, r3, #3
 8007a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <USB_ActivateEndpoint+0x70a>
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9e:	801a      	strh	r2, [r3, #0]
 8007aa0:	e05b      	b.n	8007b5a <USB_ActivateEndpoint+0x7c2>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007aa8:	d81c      	bhi.n	8007ae4 <USB_ActivateEndpoint+0x74c>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	085b      	lsrs	r3, r3, #1
 8007ab0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <USB_ActivateEndpoint+0x732>
 8007ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	029b      	lsls	r3, r3, #10
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	4313      	orrs	r3, r2
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae0:	801a      	strh	r2, [r3, #0]
 8007ae2:	e03a      	b.n	8007b5a <USB_ActivateEndpoint+0x7c2>
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	095b      	lsrs	r3, r3, #5
 8007aea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d104      	bne.n	8007b04 <USB_ActivateEndpoint+0x76c>
 8007afa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007afe:	3b01      	subs	r3, #1
 8007b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	029b      	lsls	r3, r3, #10
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	4313      	orrs	r3, r2
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b24:	801a      	strh	r2, [r3, #0]
 8007b26:	e018      	b.n	8007b5a <USB_ActivateEndpoint+0x7c2>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d114      	bne.n	8007b5a <USB_ActivateEndpoint+0x7c2>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b3c:	4413      	add	r3, r2
 8007b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	00da      	lsls	r2, r3, #3
 8007b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b48:	4413      	add	r3, r2
 8007b4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b58:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b70:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007b72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b74:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b78:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007b7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b80:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	441a      	add	r2, r3
 8007b8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bb8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	441a      	add	r2, r3
 8007bc4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	8013      	strh	r3, [r2, #0]
 8007bda:	e0bc      	b.n	8007d56 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007bec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01d      	beq.n	8007c34 <USB_ActivateEndpoint+0x89c>
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c0e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	441a      	add	r2, r3
 8007c1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007c20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007c44:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d01d      	beq.n	8007c8c <USB_ActivateEndpoint+0x8f4>
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c66:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	441a      	add	r2, r3
 8007c74:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007c78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	78db      	ldrb	r3, [r3, #3]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d024      	beq.n	8007cde <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007caa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007cae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007cb2:	f083 0320 	eor.w	r3, r3, #32
 8007cb6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	441a      	add	r2, r3
 8007cc4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	8013      	strh	r3, [r2, #0]
 8007cdc:	e01d      	b.n	8007d1a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	441a      	add	r2, r3
 8007d02:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d30:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	441a      	add	r2, r3
 8007d3e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007d42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007d56:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	379c      	adds	r7, #156	@ 0x9c
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop

08007d68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b08d      	sub	sp, #52	@ 0x34
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	7b1b      	ldrb	r3, [r3, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f040 808e 	bne.w	8007e98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	785b      	ldrb	r3, [r3, #1]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d044      	beq.n	8007e0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	81bb      	strh	r3, [r7, #12]
 8007d92:	89bb      	ldrh	r3, [r7, #12]
 8007d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01b      	beq.n	8007dd4 <USB_DeactivateEndpoint+0x6c>
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007db2:	817b      	strh	r3, [r7, #10]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	441a      	add	r2, r3
 8007dbe:	897b      	ldrh	r3, [r7, #10]
 8007dc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dea:	813b      	strh	r3, [r7, #8]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	441a      	add	r2, r3
 8007df6:	893b      	ldrh	r3, [r7, #8]
 8007df8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	8013      	strh	r3, [r2, #0]
 8007e0c:	e192      	b.n	8008134 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	827b      	strh	r3, [r7, #18]
 8007e1c:	8a7b      	ldrh	r3, [r7, #18]
 8007e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d01b      	beq.n	8007e5e <USB_DeactivateEndpoint+0xf6>
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e3c:	823b      	strh	r3, [r7, #16]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	441a      	add	r2, r3
 8007e48:	8a3b      	ldrh	r3, [r7, #16]
 8007e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e74:	81fb      	strh	r3, [r7, #14]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	441a      	add	r2, r3
 8007e80:	89fb      	ldrh	r3, [r7, #14]
 8007e82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	8013      	strh	r3, [r2, #0]
 8007e96:	e14d      	b.n	8008134 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	785b      	ldrb	r3, [r3, #1]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f040 80a5 	bne.w	8007fec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	843b      	strh	r3, [r7, #32]
 8007eb0:	8c3b      	ldrh	r3, [r7, #32]
 8007eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d01b      	beq.n	8007ef2 <USB_DeactivateEndpoint+0x18a>
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ed0:	83fb      	strh	r3, [r7, #30]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	441a      	add	r2, r3
 8007edc:	8bfb      	ldrh	r3, [r7, #30]
 8007ede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ee6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	83bb      	strh	r3, [r7, #28]
 8007f00:	8bbb      	ldrh	r3, [r7, #28]
 8007f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01b      	beq.n	8007f42 <USB_DeactivateEndpoint+0x1da>
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f20:	837b      	strh	r3, [r7, #26]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	441a      	add	r2, r3
 8007f2c:	8b7b      	ldrh	r3, [r7, #26]
 8007f2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f58:	833b      	strh	r3, [r7, #24]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	441a      	add	r2, r3
 8007f64:	8b3b      	ldrh	r3, [r7, #24]
 8007f66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f90:	82fb      	strh	r3, [r7, #22]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	441a      	add	r2, r3
 8007f9c:	8afb      	ldrh	r3, [r7, #22]
 8007f9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fc8:	82bb      	strh	r3, [r7, #20]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	441a      	add	r2, r3
 8007fd4:	8abb      	ldrh	r3, [r7, #20]
 8007fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	8013      	strh	r3, [r2, #0]
 8007fea:	e0a3      	b.n	8008134 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007ffa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d01b      	beq.n	800803c <USB_DeactivateEndpoint+0x2d4>
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b29b      	uxth	r3, r3
 8008012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800801a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	441a      	add	r2, r3
 8008026:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008028:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800802c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008030:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008038:	b29b      	uxth	r3, r3
 800803a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800804a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800804c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01b      	beq.n	800808c <USB_DeactivateEndpoint+0x324>
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800806a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	441a      	add	r2, r3
 8008076:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800807c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008084:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008088:	b29b      	uxth	r3, r3
 800808a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800809e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	441a      	add	r2, r3
 80080ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080da:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	441a      	add	r2, r3
 80080e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80080e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800810e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008112:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	441a      	add	r2, r3
 800811e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008120:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008124:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800812c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008130:	b29b      	uxth	r3, r3
 8008132:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3734      	adds	r7, #52	@ 0x34
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b0ac      	sub	sp, #176	@ 0xb0
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	2b01      	cmp	r3, #1
 8008152:	f040 84ca 	bne.w	8008aea <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	429a      	cmp	r2, r3
 8008160:	d904      	bls.n	800816c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800816a:	e003      	b.n	8008174 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	7b1b      	ldrb	r3, [r3, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d122      	bne.n	80081c2 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	6959      	ldr	r1, [r3, #20]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	88da      	ldrh	r2, [r3, #6]
 8008184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008188:	b29b      	uxth	r3, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 febd 	bl	8008f0a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800819a:	b29b      	uxth	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	4413      	add	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	00da      	lsls	r2, r3, #3
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	4413      	add	r3, r2
 80081ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	801a      	strh	r2, [r3, #0]
 80081be:	f000 bc6f 	b.w	8008aa0 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	78db      	ldrb	r3, [r3, #3]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	f040 831e 	bne.w	8008808 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	6a1a      	ldr	r2, [r3, #32]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	f240 82cf 	bls.w	8008778 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081f0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	441a      	add	r2, r3
 80081fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800820a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800820e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008212:	b29b      	uxth	r3, r3
 8008214:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	6a1a      	ldr	r2, [r3, #32]
 800821a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800821e:	1ad2      	subs	r2, r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 814f 	beq.w	80084da <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d16b      	bne.n	8008320 <USB_EPStartXfer+0x1de>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008252:	b29b      	uxth	r3, r3
 8008254:	461a      	mov	r2, r3
 8008256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008258:	4413      	add	r3, r2
 800825a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	00da      	lsls	r2, r3, #3
 8008262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008264:	4413      	add	r3, r2
 8008266:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800826a:	627b      	str	r3, [r7, #36]	@ 0x24
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008276:	b29a      	uxth	r2, r3
 8008278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827a:	801a      	strh	r2, [r3, #0]
 800827c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10a      	bne.n	800829a <USB_EPStartXfer+0x158>
 8008284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	b29b      	uxth	r3, r3
 800828a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008292:	b29a      	uxth	r2, r3
 8008294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008296:	801a      	strh	r2, [r3, #0]
 8008298:	e05b      	b.n	8008352 <USB_EPStartXfer+0x210>
 800829a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800829e:	2b3e      	cmp	r3, #62	@ 0x3e
 80082a0:	d81c      	bhi.n	80082dc <USB_EPStartXfer+0x19a>
 80082a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082a6:	085b      	lsrs	r3, r3, #1
 80082a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80082ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d004      	beq.n	80082c2 <USB_EPStartXfer+0x180>
 80082b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082bc:	3301      	adds	r3, #1
 80082be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	029b      	lsls	r3, r3, #10
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	4313      	orrs	r3, r2
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	801a      	strh	r2, [r3, #0]
 80082da:	e03a      	b.n	8008352 <USB_EPStartXfer+0x210>
 80082dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082e0:	095b      	lsrs	r3, r3, #5
 80082e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80082e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082ea:	f003 031f 	and.w	r3, r3, #31
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d104      	bne.n	80082fc <USB_EPStartXfer+0x1ba>
 80082f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082f6:	3b01      	subs	r3, #1
 80082f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80082fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29a      	uxth	r2, r3
 8008302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008306:	b29b      	uxth	r3, r3
 8008308:	029b      	lsls	r3, r3, #10
 800830a:	b29b      	uxth	r3, r3
 800830c:	4313      	orrs	r3, r2
 800830e:	b29b      	uxth	r3, r3
 8008310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008318:	b29a      	uxth	r2, r3
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	801a      	strh	r2, [r3, #0]
 800831e:	e018      	b.n	8008352 <USB_EPStartXfer+0x210>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d114      	bne.n	8008352 <USB_EPStartXfer+0x210>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800832e:	b29b      	uxth	r3, r3
 8008330:	461a      	mov	r2, r3
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	4413      	add	r3, r2
 8008336:	633b      	str	r3, [r7, #48]	@ 0x30
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	00da      	lsls	r2, r3, #3
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	4413      	add	r3, r2
 8008342:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800834c:	b29a      	uxth	r2, r3
 800834e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008350:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	895b      	ldrh	r3, [r3, #10]
 8008356:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	6959      	ldr	r1, [r3, #20]
 800835e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008362:	b29b      	uxth	r3, r3
 8008364:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fdce 	bl	8008f0a <USB_WritePMA>
            ep->xfer_buff += len;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	695a      	ldr	r2, [r3, #20]
 8008372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008376:	441a      	add	r2, r3
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	6a1a      	ldr	r2, [r3, #32]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	429a      	cmp	r2, r3
 8008386:	d907      	bls.n	8008398 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	6a1a      	ldr	r2, [r3, #32]
 800838c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008390:	1ad2      	subs	r2, r2, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	621a      	str	r2, [r3, #32]
 8008396:	e006      	b.n	80083a6 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2200      	movs	r2, #0
 80083a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	785b      	ldrb	r3, [r3, #1]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d16b      	bne.n	8008486 <USB_EPStartXfer+0x344>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	61bb      	str	r3, [r7, #24]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	461a      	mov	r2, r3
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	4413      	add	r3, r2
 80083c0:	61bb      	str	r3, [r7, #24]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	00da      	lsls	r2, r3, #3
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	4413      	add	r3, r2
 80083cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083d0:	617b      	str	r3, [r7, #20]
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083dc:	b29a      	uxth	r2, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	801a      	strh	r2, [r3, #0]
 80083e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10a      	bne.n	8008400 <USB_EPStartXfer+0x2be>
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	801a      	strh	r2, [r3, #0]
 80083fe:	e05d      	b.n	80084bc <USB_EPStartXfer+0x37a>
 8008400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008404:	2b3e      	cmp	r3, #62	@ 0x3e
 8008406:	d81c      	bhi.n	8008442 <USB_EPStartXfer+0x300>
 8008408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800840c:	085b      	lsrs	r3, r3, #1
 800840e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d004      	beq.n	8008428 <USB_EPStartXfer+0x2e6>
 800841e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008422:	3301      	adds	r3, #1
 8008424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29a      	uxth	r2, r3
 800842e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008432:	b29b      	uxth	r3, r3
 8008434:	029b      	lsls	r3, r3, #10
 8008436:	b29b      	uxth	r3, r3
 8008438:	4313      	orrs	r3, r2
 800843a:	b29a      	uxth	r2, r3
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	801a      	strh	r2, [r3, #0]
 8008440:	e03c      	b.n	80084bc <USB_EPStartXfer+0x37a>
 8008442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008446:	095b      	lsrs	r3, r3, #5
 8008448:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800844c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008450:	f003 031f 	and.w	r3, r3, #31
 8008454:	2b00      	cmp	r3, #0
 8008456:	d104      	bne.n	8008462 <USB_EPStartXfer+0x320>
 8008458:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800845c:	3b01      	subs	r3, #1
 800845e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	b29a      	uxth	r2, r3
 8008468:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800846c:	b29b      	uxth	r3, r3
 800846e:	029b      	lsls	r3, r3, #10
 8008470:	b29b      	uxth	r3, r3
 8008472:	4313      	orrs	r3, r2
 8008474:	b29b      	uxth	r3, r3
 8008476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800847e:	b29a      	uxth	r2, r3
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	801a      	strh	r2, [r3, #0]
 8008484:	e01a      	b.n	80084bc <USB_EPStartXfer+0x37a>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	785b      	ldrb	r3, [r3, #1]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d116      	bne.n	80084bc <USB_EPStartXfer+0x37a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	623b      	str	r3, [r7, #32]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008498:	b29b      	uxth	r3, r3
 800849a:	461a      	mov	r2, r3
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	4413      	add	r3, r2
 80084a0:	623b      	str	r3, [r7, #32]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	00da      	lsls	r2, r3, #3
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	4413      	add	r3, r2
 80084ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084b0:	61fb      	str	r3, [r7, #28]
 80084b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	891b      	ldrh	r3, [r3, #8]
 80084c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	6959      	ldr	r1, [r3, #20]
 80084c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fd19 	bl	8008f0a <USB_WritePMA>
 80084d8:	e2e2      	b.n	8008aa0 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d16b      	bne.n	80085ba <USB_EPStartXfer+0x478>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	461a      	mov	r2, r3
 80084f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084f2:	4413      	add	r3, r2
 80084f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	00da      	lsls	r2, r3, #3
 80084fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084fe:	4413      	add	r3, r2
 8008500:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008504:	647b      	str	r3, [r7, #68]	@ 0x44
 8008506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	b29b      	uxth	r3, r3
 800850c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008510:	b29a      	uxth	r2, r3
 8008512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <USB_EPStartXfer+0x3f2>
 800851e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	b29b      	uxth	r3, r3
 8008524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800852c:	b29a      	uxth	r2, r3
 800852e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008530:	801a      	strh	r2, [r3, #0]
 8008532:	e05d      	b.n	80085f0 <USB_EPStartXfer+0x4ae>
 8008534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008538:	2b3e      	cmp	r3, #62	@ 0x3e
 800853a:	d81c      	bhi.n	8008576 <USB_EPStartXfer+0x434>
 800853c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008540:	085b      	lsrs	r3, r3, #1
 8008542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d004      	beq.n	800855c <USB_EPStartXfer+0x41a>
 8008552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008556:	3301      	adds	r3, #1
 8008558:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800855c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	b29a      	uxth	r2, r3
 8008562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008566:	b29b      	uxth	r3, r3
 8008568:	029b      	lsls	r3, r3, #10
 800856a:	b29b      	uxth	r3, r3
 800856c:	4313      	orrs	r3, r2
 800856e:	b29a      	uxth	r2, r3
 8008570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008572:	801a      	strh	r2, [r3, #0]
 8008574:	e03c      	b.n	80085f0 <USB_EPStartXfer+0x4ae>
 8008576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <USB_EPStartXfer+0x454>
 800858c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008590:	3b01      	subs	r3, #1
 8008592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	b29a      	uxth	r2, r3
 800859c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	029b      	lsls	r3, r3, #10
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	4313      	orrs	r3, r2
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085b6:	801a      	strh	r2, [r3, #0]
 80085b8:	e01a      	b.n	80085f0 <USB_EPStartXfer+0x4ae>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d116      	bne.n	80085f0 <USB_EPStartXfer+0x4ae>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	461a      	mov	r2, r3
 80085d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085d2:	4413      	add	r3, r2
 80085d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	00da      	lsls	r2, r3, #3
 80085dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085de:	4413      	add	r3, r2
 80085e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	891b      	ldrh	r3, [r3, #8]
 80085f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	6959      	ldr	r1, [r3, #20]
 80085fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008600:	b29b      	uxth	r3, r3
 8008602:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fc7f 	bl	8008f0a <USB_WritePMA>
            ep->xfer_buff += len;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	695a      	ldr	r2, [r3, #20]
 8008610:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008614:	441a      	add	r2, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	6a1a      	ldr	r2, [r3, #32]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	429a      	cmp	r2, r3
 8008624:	d907      	bls.n	8008636 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	6a1a      	ldr	r2, [r3, #32]
 800862a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	621a      	str	r2, [r3, #32]
 8008634:	e006      	b.n	8008644 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2200      	movs	r2, #0
 8008642:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	643b      	str	r3, [r7, #64]	@ 0x40
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d16b      	bne.n	8008728 <USB_EPStartXfer+0x5e6>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800865a:	b29b      	uxth	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008660:	4413      	add	r3, r2
 8008662:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	00da      	lsls	r2, r3, #3
 800866a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866c:	4413      	add	r3, r2
 800866e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008672:	637b      	str	r3, [r7, #52]	@ 0x34
 8008674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	b29b      	uxth	r3, r3
 800867a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800867e:	b29a      	uxth	r2, r3
 8008680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008682:	801a      	strh	r2, [r3, #0]
 8008684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10a      	bne.n	80086a2 <USB_EPStartXfer+0x560>
 800868c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800869a:	b29a      	uxth	r2, r3
 800869c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	e05b      	b.n	800875a <USB_EPStartXfer+0x618>
 80086a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80086a8:	d81c      	bhi.n	80086e4 <USB_EPStartXfer+0x5a2>
 80086aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80086b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d004      	beq.n	80086ca <USB_EPStartXfer+0x588>
 80086c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086c4:	3301      	adds	r3, #1
 80086c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80086ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	029b      	lsls	r3, r3, #10
 80086d8:	b29b      	uxth	r3, r3
 80086da:	4313      	orrs	r3, r2
 80086dc:	b29a      	uxth	r2, r3
 80086de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e0:	801a      	strh	r2, [r3, #0]
 80086e2:	e03a      	b.n	800875a <USB_EPStartXfer+0x618>
 80086e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086e8:	095b      	lsrs	r3, r3, #5
 80086ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80086ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086f2:	f003 031f 	and.w	r3, r3, #31
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d104      	bne.n	8008704 <USB_EPStartXfer+0x5c2>
 80086fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086fe:	3b01      	subs	r3, #1
 8008700:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	b29a      	uxth	r2, r3
 800870a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800870e:	b29b      	uxth	r3, r3
 8008710:	029b      	lsls	r3, r3, #10
 8008712:	b29b      	uxth	r3, r3
 8008714:	4313      	orrs	r3, r2
 8008716:	b29b      	uxth	r3, r3
 8008718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800871c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008720:	b29a      	uxth	r2, r3
 8008722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008724:	801a      	strh	r2, [r3, #0]
 8008726:	e018      	b.n	800875a <USB_EPStartXfer+0x618>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d114      	bne.n	800875a <USB_EPStartXfer+0x618>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008736:	b29b      	uxth	r3, r3
 8008738:	461a      	mov	r2, r3
 800873a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800873c:	4413      	add	r3, r2
 800873e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	00da      	lsls	r2, r3, #3
 8008746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008748:	4413      	add	r3, r2
 800874a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800874e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008754:	b29a      	uxth	r2, r3
 8008756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008758:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	895b      	ldrh	r3, [r3, #10]
 800875e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6959      	ldr	r1, [r3, #20]
 8008766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800876a:	b29b      	uxth	r3, r3
 800876c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fbca 	bl	8008f0a <USB_WritePMA>
 8008776:	e193      	b.n	8008aa0 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	b29b      	uxth	r3, r3
 800878e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008796:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	441a      	add	r2, r3
 80087a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80087a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	461a      	mov	r2, r3
 80087ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087cc:	4413      	add	r3, r2
 80087ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	00da      	lsls	r2, r3, #3
 80087d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087d8:	4413      	add	r3, r2
 80087da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	891b      	ldrh	r3, [r3, #8]
 80087ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	6959      	ldr	r1, [r3, #20]
 80087f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fb82 	bl	8008f0a <USB_WritePMA>
 8008806:	e14b      	b.n	8008aa0 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	6a1a      	ldr	r2, [r3, #32]
 800880c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008810:	1ad2      	subs	r2, r2, r3
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	b29b      	uxth	r3, r3
 8008824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 809a 	beq.w	8008962 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	673b      	str	r3, [r7, #112]	@ 0x70
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d16b      	bne.n	8008912 <USB_EPStartXfer+0x7d0>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008844:	b29b      	uxth	r3, r3
 8008846:	461a      	mov	r2, r3
 8008848:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800884a:	4413      	add	r3, r2
 800884c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	00da      	lsls	r2, r3, #3
 8008854:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008856:	4413      	add	r3, r2
 8008858:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800885c:	667b      	str	r3, [r7, #100]	@ 0x64
 800885e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	b29b      	uxth	r3, r3
 8008864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008868:	b29a      	uxth	r2, r3
 800886a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800886c:	801a      	strh	r2, [r3, #0]
 800886e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10a      	bne.n	800888c <USB_EPStartXfer+0x74a>
 8008876:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008884:	b29a      	uxth	r2, r3
 8008886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008888:	801a      	strh	r2, [r3, #0]
 800888a:	e05b      	b.n	8008944 <USB_EPStartXfer+0x802>
 800888c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008890:	2b3e      	cmp	r3, #62	@ 0x3e
 8008892:	d81c      	bhi.n	80088ce <USB_EPStartXfer+0x78c>
 8008894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800889e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d004      	beq.n	80088b4 <USB_EPStartXfer+0x772>
 80088aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088ae:	3301      	adds	r3, #1
 80088b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80088b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088be:	b29b      	uxth	r3, r3
 80088c0:	029b      	lsls	r3, r3, #10
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	4313      	orrs	r3, r2
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088ca:	801a      	strh	r2, [r3, #0]
 80088cc:	e03a      	b.n	8008944 <USB_EPStartXfer+0x802>
 80088ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80088d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088dc:	f003 031f 	and.w	r3, r3, #31
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d104      	bne.n	80088ee <USB_EPStartXfer+0x7ac>
 80088e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088e8:	3b01      	subs	r3, #1
 80088ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80088ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	029b      	lsls	r3, r3, #10
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	4313      	orrs	r3, r2
 8008900:	b29b      	uxth	r3, r3
 8008902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800890a:	b29a      	uxth	r2, r3
 800890c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800890e:	801a      	strh	r2, [r3, #0]
 8008910:	e018      	b.n	8008944 <USB_EPStartXfer+0x802>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d114      	bne.n	8008944 <USB_EPStartXfer+0x802>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008920:	b29b      	uxth	r3, r3
 8008922:	461a      	mov	r2, r3
 8008924:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008926:	4413      	add	r3, r2
 8008928:	673b      	str	r3, [r7, #112]	@ 0x70
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	00da      	lsls	r2, r3, #3
 8008930:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008932:	4413      	add	r3, r2
 8008934:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008938:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800893a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800893e:	b29a      	uxth	r2, r3
 8008940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008942:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	895b      	ldrh	r3, [r3, #10]
 8008948:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	6959      	ldr	r1, [r3, #20]
 8008950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008954:	b29b      	uxth	r3, r3
 8008956:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fad5 	bl	8008f0a <USB_WritePMA>
 8008960:	e09e      	b.n	8008aa0 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	785b      	ldrb	r3, [r3, #1]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d16b      	bne.n	8008a42 <USB_EPStartXfer+0x900>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008974:	b29b      	uxth	r3, r3
 8008976:	461a      	mov	r2, r3
 8008978:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800897a:	4413      	add	r3, r2
 800897c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	00da      	lsls	r2, r3, #3
 8008984:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008986:	4413      	add	r3, r2
 8008988:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800898c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800898e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008998:	b29a      	uxth	r2, r3
 800899a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10a      	bne.n	80089bc <USB_EPStartXfer+0x87a>
 80089a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089b8:	801a      	strh	r2, [r3, #0]
 80089ba:	e063      	b.n	8008a84 <USB_EPStartXfer+0x942>
 80089bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80089c2:	d81c      	bhi.n	80089fe <USB_EPStartXfer+0x8bc>
 80089c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089c8:	085b      	lsrs	r3, r3, #1
 80089ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d004      	beq.n	80089e4 <USB_EPStartXfer+0x8a2>
 80089da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80089de:	3301      	adds	r3, #1
 80089e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	029b      	lsls	r3, r3, #10
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	4313      	orrs	r3, r2
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089fa:	801a      	strh	r2, [r3, #0]
 80089fc:	e042      	b.n	8008a84 <USB_EPStartXfer+0x942>
 80089fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a02:	095b      	lsrs	r3, r3, #5
 8008a04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a0c:	f003 031f 	and.w	r3, r3, #31
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d104      	bne.n	8008a1e <USB_EPStartXfer+0x8dc>
 8008a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	029b      	lsls	r3, r3, #10
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a3e:	801a      	strh	r2, [r3, #0]
 8008a40:	e020      	b.n	8008a84 <USB_EPStartXfer+0x942>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	785b      	ldrb	r3, [r3, #1]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d11c      	bne.n	8008a84 <USB_EPStartXfer+0x942>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a5e:	4413      	add	r3, r2
 8008a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	00da      	lsls	r2, r3, #3
 8008a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a6e:	4413      	add	r3, r2
 8008a70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008a82:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	891b      	ldrh	r3, [r3, #8]
 8008a88:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	6959      	ldr	r1, [r3, #20]
 8008a90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fa35 	bl	8008f0a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ab6:	817b      	strh	r3, [r7, #10]
 8008ab8:	897b      	ldrh	r3, [r7, #10]
 8008aba:	f083 0310 	eor.w	r3, r3, #16
 8008abe:	817b      	strh	r3, [r7, #10]
 8008ac0:	897b      	ldrh	r3, [r7, #10]
 8008ac2:	f083 0320 	eor.w	r3, r3, #32
 8008ac6:	817b      	strh	r3, [r7, #10]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	441a      	add	r2, r3
 8008ad2:	897b      	ldrh	r3, [r7, #10]
 8008ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	8013      	strh	r3, [r2, #0]
 8008ae8:	e0d5      	b.n	8008c96 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	7b1b      	ldrb	r3, [r3, #12]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d156      	bne.n	8008ba0 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d122      	bne.n	8008b40 <USB_EPStartXfer+0x9fe>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	78db      	ldrb	r3, [r3, #3]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d11e      	bne.n	8008b40 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b18:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	441a      	add	r2, r3
 8008b26:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008b2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b32:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	8013      	strh	r3, [r2, #0]
 8008b3e:	e01d      	b.n	8008b7c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b56:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	441a      	add	r2, r3
 8008b64:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008b68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	699a      	ldr	r2, [r3, #24]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d907      	bls.n	8008b98 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	699a      	ldr	r2, [r3, #24]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	1ad2      	subs	r2, r2, r3
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	619a      	str	r2, [r3, #24]
 8008b96:	e054      	b.n	8008c42 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	619a      	str	r2, [r3, #24]
 8008b9e:	e050      	b.n	8008c42 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	78db      	ldrb	r3, [r3, #3]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d142      	bne.n	8008c2e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d048      	beq.n	8008c42 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008bc0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <USB_EPStartXfer+0xa96>
 8008bcc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10b      	bne.n	8008bf0 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008bd8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008bdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d12e      	bne.n	8008c42 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008be4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d128      	bne.n	8008c42 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c06:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	441a      	add	r2, r3
 8008c14:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	8013      	strh	r3, [r2, #0]
 8008c2c:	e009      	b.n	8008c42 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	78db      	ldrb	r3, [r3, #3]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d103      	bne.n	8008c3e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	619a      	str	r2, [r3, #24]
 8008c3c:	e001      	b.n	8008c42 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e02a      	b.n	8008c98 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008c5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c60:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c64:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008c68:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c70:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	441a      	add	r2, r3
 8008c7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	37b0      	adds	r7, #176	@ 0xb0
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	785b      	ldrb	r3, [r3, #1]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d020      	beq.n	8008cf4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cc8:	81bb      	strh	r3, [r7, #12]
 8008cca:	89bb      	ldrh	r3, [r7, #12]
 8008ccc:	f083 0310 	eor.w	r3, r3, #16
 8008cd0:	81bb      	strh	r3, [r7, #12]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	441a      	add	r2, r3
 8008cdc:	89bb      	ldrh	r3, [r7, #12]
 8008cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	8013      	strh	r3, [r2, #0]
 8008cf2:	e01f      	b.n	8008d34 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d0a:	81fb      	strh	r3, [r7, #14]
 8008d0c:	89fb      	ldrh	r3, [r7, #14]
 8008d0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d12:	81fb      	strh	r3, [r7, #14]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	441a      	add	r2, r3
 8008d1e:	89fb      	ldrh	r3, [r7, #14]
 8008d20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b087      	sub	sp, #28
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d04c      	beq.n	8008dee <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	823b      	strh	r3, [r7, #16]
 8008d62:	8a3b      	ldrh	r3, [r7, #16]
 8008d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01b      	beq.n	8008da4 <USB_EPClearStall+0x62>
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d82:	81fb      	strh	r3, [r7, #14]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	441a      	add	r2, r3
 8008d8e:	89fb      	ldrh	r3, [r7, #14]
 8008d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	78db      	ldrb	r3, [r3, #3]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d06c      	beq.n	8008e86 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dc2:	81bb      	strh	r3, [r7, #12]
 8008dc4:	89bb      	ldrh	r3, [r7, #12]
 8008dc6:	f083 0320 	eor.w	r3, r3, #32
 8008dca:	81bb      	strh	r3, [r7, #12]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	441a      	add	r2, r3
 8008dd6:	89bb      	ldrh	r3, [r7, #12]
 8008dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	8013      	strh	r3, [r2, #0]
 8008dec:	e04b      	b.n	8008e86 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	82fb      	strh	r3, [r7, #22]
 8008dfc:	8afb      	ldrh	r3, [r7, #22]
 8008dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d01b      	beq.n	8008e3e <USB_EPClearStall+0xfc>
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e1c:	82bb      	strh	r3, [r7, #20]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	441a      	add	r2, r3
 8008e28:	8abb      	ldrh	r3, [r7, #20]
 8008e2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e54:	827b      	strh	r3, [r7, #18]
 8008e56:	8a7b      	ldrh	r3, [r7, #18]
 8008e58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008e5c:	827b      	strh	r3, [r7, #18]
 8008e5e:	8a7b      	ldrh	r3, [r7, #18]
 8008e60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008e64:	827b      	strh	r3, [r7, #18]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	441a      	add	r2, r3
 8008e70:	8a7b      	ldrh	r3, [r7, #18]
 8008e72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d103      	bne.n	8008eae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2280      	movs	r2, #128	@ 0x80
 8008eaa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b085      	sub	sp, #20
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008efc:	68fb      	ldr	r3, [r7, #12]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b08b      	sub	sp, #44	@ 0x2c
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	60b9      	str	r1, [r7, #8]
 8008f14:	4611      	mov	r1, r2
 8008f16:	461a      	mov	r2, r3
 8008f18:	460b      	mov	r3, r1
 8008f1a:	80fb      	strh	r3, [r7, #6]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f20:	88bb      	ldrh	r3, [r7, #4]
 8008f22:	3301      	adds	r3, #1
 8008f24:	085b      	lsrs	r3, r3, #1
 8008f26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f30:	88fa      	ldrh	r2, [r7, #6]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f3a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f40:	e01c      	b.n	8008f7c <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b21b      	sxth	r3, r3
 8008f50:	021b      	lsls	r3, r3, #8
 8008f52:	b21a      	sxth	r2, r3
 8008f54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	b21b      	sxth	r3, r3
 8008f5c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	8a7a      	ldrh	r2, [r7, #18]
 8008f62:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	3302      	adds	r3, #2
 8008f68:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	3301      	adds	r3, #1
 8008f74:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1df      	bne.n	8008f42 <USB_WritePMA+0x38>
  }
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	372c      	adds	r7, #44	@ 0x2c
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b08b      	sub	sp, #44	@ 0x2c
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	80fb      	strh	r3, [r7, #6]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008fa6:	88bb      	ldrh	r3, [r7, #4]
 8008fa8:	085b      	lsrs	r3, r3, #1
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fb6:	88fa      	ldrh	r2, [r7, #6]
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fc0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fc6:	e018      	b.n	8008ffa <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008fd0:	6a3b      	ldr	r3, [r7, #32]
 8008fd2:	3302      	adds	r3, #2
 8008fd4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	0a1b      	lsrs	r3, r3, #8
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e3      	bne.n	8008fc8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009000:	88bb      	ldrh	r3, [r7, #4]
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	b29b      	uxth	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d007      	beq.n	800901c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	b29b      	uxth	r3, r3
 8009012:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	b2da      	uxtb	r2, r3
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	701a      	strb	r2, [r3, #0]
  }
}
 800901c:	bf00      	nop
 800901e:	372c      	adds	r7, #44	@ 0x2c
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009034:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009038:	f004 fffe 	bl	800e038 <USBD_static_malloc>
 800903c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d105      	bne.n	8009050 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800904c:	2302      	movs	r3, #2
 800904e:	e066      	b.n	800911e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	7c1b      	ldrb	r3, [r3, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d119      	bne.n	8009094 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009064:	2202      	movs	r2, #2
 8009066:	2181      	movs	r1, #129	@ 0x81
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f004 fe8c 	bl	800dd86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009074:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009078:	2202      	movs	r2, #2
 800907a:	2101      	movs	r1, #1
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f004 fe82 	bl	800dd86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2210      	movs	r2, #16
 800908e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009092:	e016      	b.n	80090c2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009094:	2340      	movs	r3, #64	@ 0x40
 8009096:	2202      	movs	r2, #2
 8009098:	2181      	movs	r1, #129	@ 0x81
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f004 fe73 	bl	800dd86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090a6:	2340      	movs	r3, #64	@ 0x40
 80090a8:	2202      	movs	r2, #2
 80090aa:	2101      	movs	r1, #1
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f004 fe6a 	bl	800dd86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2210      	movs	r2, #16
 80090be:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80090c2:	2308      	movs	r3, #8
 80090c4:	2203      	movs	r2, #3
 80090c6:	2182      	movs	r1, #130	@ 0x82
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f004 fe5c 	bl	800dd86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	7c1b      	ldrb	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d109      	bne.n	800910c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009102:	2101      	movs	r1, #1
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f004 ff2d 	bl	800df64 <USBD_LL_PrepareReceive>
 800910a:	e007      	b.n	800911c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009112:	2340      	movs	r3, #64	@ 0x40
 8009114:	2101      	movs	r1, #1
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f004 ff24 	bl	800df64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009132:	2181      	movs	r1, #129	@ 0x81
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f004 fe4c 	bl	800ddd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009140:	2101      	movs	r1, #1
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f004 fe45 	bl	800ddd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009150:	2182      	movs	r1, #130	@ 0x82
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f004 fe3d 	bl	800ddd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00e      	beq.n	8009190 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009182:	4618      	mov	r0, r3
 8009184:	f004 ff66 	bl	800e054 <USBD_static_free>
    pdev->pClassData = NULL;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80091c0:	2303      	movs	r3, #3
 80091c2:	e0af      	b.n	8009324 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d03f      	beq.n	8009250 <USBD_CDC_Setup+0xb4>
 80091d0:	2b20      	cmp	r3, #32
 80091d2:	f040 809f 	bne.w	8009314 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	88db      	ldrh	r3, [r3, #6]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d02e      	beq.n	800923c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	b25b      	sxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	da16      	bge.n	8009216 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80091f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	88d2      	ldrh	r2, [r2, #6]
 80091fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	88db      	ldrh	r3, [r3, #6]
 8009200:	2b07      	cmp	r3, #7
 8009202:	bf28      	it	cs
 8009204:	2307      	movcs	r3, #7
 8009206:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	89fa      	ldrh	r2, [r7, #14]
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 facf 	bl	800a7b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009214:	e085      	b.n	8009322 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	785a      	ldrb	r2, [r3, #1]
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	88db      	ldrh	r3, [r3, #6]
 8009224:	b2da      	uxtb	r2, r3
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800922c:	6939      	ldr	r1, [r7, #16]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	88db      	ldrh	r3, [r3, #6]
 8009232:	461a      	mov	r2, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f001 fae8 	bl	800a80a <USBD_CtlPrepareRx>
      break;
 800923a:	e072      	b.n	8009322 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	7850      	ldrb	r0, [r2, #1]
 8009248:	2200      	movs	r2, #0
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	4798      	blx	r3
      break;
 800924e:	e068      	b.n	8009322 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	2b0b      	cmp	r3, #11
 8009256:	d852      	bhi.n	80092fe <USBD_CDC_Setup+0x162>
 8009258:	a201      	add	r2, pc, #4	@ (adr r2, 8009260 <USBD_CDC_Setup+0xc4>)
 800925a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925e:	bf00      	nop
 8009260:	08009291 	.word	0x08009291
 8009264:	0800930d 	.word	0x0800930d
 8009268:	080092ff 	.word	0x080092ff
 800926c:	080092ff 	.word	0x080092ff
 8009270:	080092ff 	.word	0x080092ff
 8009274:	080092ff 	.word	0x080092ff
 8009278:	080092ff 	.word	0x080092ff
 800927c:	080092ff 	.word	0x080092ff
 8009280:	080092ff 	.word	0x080092ff
 8009284:	080092ff 	.word	0x080092ff
 8009288:	080092bb 	.word	0x080092bb
 800928c:	080092e5 	.word	0x080092e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b03      	cmp	r3, #3
 800929a:	d107      	bne.n	80092ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800929c:	f107 030a 	add.w	r3, r7, #10
 80092a0:	2202      	movs	r2, #2
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 fa84 	bl	800a7b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092aa:	e032      	b.n	8009312 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f001 fa0e 	bl	800a6d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80092b4:	2303      	movs	r3, #3
 80092b6:	75fb      	strb	r3, [r7, #23]
          break;
 80092b8:	e02b      	b.n	8009312 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d107      	bne.n	80092d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80092c6:	f107 030d 	add.w	r3, r7, #13
 80092ca:	2201      	movs	r2, #1
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f001 fa6f 	bl	800a7b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092d4:	e01d      	b.n	8009312 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 f9f9 	bl	800a6d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80092de:	2303      	movs	r3, #3
 80092e0:	75fb      	strb	r3, [r7, #23]
          break;
 80092e2:	e016      	b.n	8009312 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d00f      	beq.n	8009310 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 f9ec 	bl	800a6d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80092f8:	2303      	movs	r3, #3
 80092fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80092fc:	e008      	b.n	8009310 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 f9e5 	bl	800a6d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8009306:	2303      	movs	r3, #3
 8009308:	75fb      	strb	r3, [r7, #23]
          break;
 800930a:	e002      	b.n	8009312 <USBD_CDC_Setup+0x176>
          break;
 800930c:	bf00      	nop
 800930e:	e008      	b.n	8009322 <USBD_CDC_Setup+0x186>
          break;
 8009310:	bf00      	nop
      }
      break;
 8009312:	e006      	b.n	8009322 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 f9da 	bl	800a6d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800931c:	2303      	movs	r3, #3
 800931e:	75fb      	strb	r3, [r7, #23]
      break;
 8009320:	bf00      	nop
  }

  return (uint8_t)ret;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800933e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800934a:	2303      	movs	r3, #3
 800934c:	e04f      	b.n	80093ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009354:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009356:	78fa      	ldrb	r2, [r7, #3]
 8009358:	6879      	ldr	r1, [r7, #4]
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	440b      	add	r3, r1
 8009364:	3318      	adds	r3, #24
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d029      	beq.n	80093c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	440b      	add	r3, r1
 800937a:	3318      	adds	r3, #24
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	78f9      	ldrb	r1, [r7, #3]
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	460b      	mov	r3, r1
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	440b      	add	r3, r1
 8009388:	00db      	lsls	r3, r3, #3
 800938a:	4403      	add	r3, r0
 800938c:	3320      	adds	r3, #32
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	fbb2 f1f3 	udiv	r1, r2, r3
 8009394:	fb01 f303 	mul.w	r3, r1, r3
 8009398:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800939a:	2b00      	cmp	r3, #0
 800939c:	d110      	bne.n	80093c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800939e:	78fa      	ldrb	r2, [r7, #3]
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	440b      	add	r3, r1
 80093ac:	3318      	adds	r3, #24
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093b2:	78f9      	ldrb	r1, [r7, #3]
 80093b4:	2300      	movs	r3, #0
 80093b6:	2200      	movs	r2, #0
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f004 fdb2 	bl	800df22 <USBD_LL_Transmit>
 80093be:	e015      	b.n	80093ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00b      	beq.n	80093ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80093e8:	78fa      	ldrb	r2, [r7, #3]
 80093ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009408:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009410:	2b00      	cmp	r3, #0
 8009412:	d101      	bne.n	8009418 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009414:	2303      	movs	r3, #3
 8009416:	e015      	b.n	8009444 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f004 fdc2 	bl	800dfa6 <USBD_LL_GetRxDataSize>
 8009422:	4602      	mov	r2, r0
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800943e:	4611      	mov	r1, r2
 8009440:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800945a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009462:	2303      	movs	r3, #3
 8009464:	e01a      	b.n	800949c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d014      	beq.n	800949a <USBD_CDC_EP0_RxReady+0x4e>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009476:	2bff      	cmp	r3, #255	@ 0xff
 8009478:	d00f      	beq.n	800949a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009488:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009490:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	22ff      	movs	r2, #255	@ 0xff
 8009496:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2243      	movs	r2, #67	@ 0x43
 80094b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80094b2:	4b03      	ldr	r3, [pc, #12]	@ (80094c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	20000094 	.word	0x20000094

080094c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2243      	movs	r2, #67	@ 0x43
 80094d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80094d2:	4b03      	ldr	r3, [pc, #12]	@ (80094e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	20000050 	.word	0x20000050

080094e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2243      	movs	r2, #67	@ 0x43
 80094f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80094f2:	4b03      	ldr	r3, [pc, #12]	@ (8009500 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	200000d8 	.word	0x200000d8

08009504 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	220a      	movs	r2, #10
 8009510:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009512:	4b03      	ldr	r3, [pc, #12]	@ (8009520 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009514:	4618      	mov	r0, r3
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	2000000c 	.word	0x2000000c

08009524 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009534:	2303      	movs	r3, #3
 8009536:	e004      	b.n	8009542 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800954e:	b480      	push	{r7}
 8009550:	b087      	sub	sp, #28
 8009552:	af00      	add	r7, sp, #0
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009560:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009568:	2303      	movs	r3, #3
 800956a:	e008      	b.n	800957e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	371c      	adds	r7, #28
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800958a:	b480      	push	{r7}
 800958c:	b085      	sub	sp, #20
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800959a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e004      	b.n	80095b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80095cc:	2301      	movs	r3, #1
 80095ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80095da:	2303      	movs	r3, #3
 80095dc:	e01a      	b.n	8009614 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d114      	bne.n	8009612 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009606:	2181      	movs	r1, #129	@ 0x81
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f004 fc8a 	bl	800df22 <USBD_LL_Transmit>

    ret = USBD_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800962a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009636:	2303      	movs	r3, #3
 8009638:	e016      	b.n	8009668 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	7c1b      	ldrb	r3, [r3, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d109      	bne.n	8009656 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009648:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800964c:	2101      	movs	r1, #1
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f004 fc88 	bl	800df64 <USBD_LL_PrepareReceive>
 8009654:	e007      	b.n	8009666 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800965c:	2340      	movs	r3, #64	@ 0x40
 800965e:	2101      	movs	r1, #1
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f004 fc7f 	bl	800df64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	4613      	mov	r3, r2
 800967c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009684:	2303      	movs	r3, #3
 8009686:	e01f      	b.n	80096c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	79fa      	ldrb	r2, [r7, #7]
 80096ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f004 fae7 	bl	800dc90 <USBD_LL_Init>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e016      	b.n	8009716 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009704:	f107 020e 	add.w	r2, r7, #14
 8009708:	4610      	mov	r0, r2
 800970a:	4798      	blx	r3
 800970c:	4602      	mov	r2, r0
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f004 fb12 	bl	800dd50 <USBD_LL_Start>
 800972c:	4603      	mov	r3, r0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009736:	b480      	push	{r7}
 8009738:	b083      	sub	sp, #12
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009758:	2303      	movs	r3, #3
 800975a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	78fa      	ldrb	r2, [r7, #3]
 8009770:	4611      	mov	r1, r2
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	4798      	blx	r3
 8009776:	4603      	mov	r3, r0
 8009778:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800977a:	7bfb      	ldrb	r3, [r7, #15]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009796:	2b00      	cmp	r3, #0
 8009798:	d007      	beq.n	80097aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	4611      	mov	r1, r2
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
  }

  return USBD_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 ff48 	bl	800a65c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80097da:	461a      	mov	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097e8:	f003 031f 	and.w	r3, r3, #31
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d01a      	beq.n	8009826 <USBD_LL_SetupStage+0x72>
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d822      	bhi.n	800983a <USBD_LL_SetupStage+0x86>
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <USBD_LL_SetupStage+0x4a>
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d00a      	beq.n	8009812 <USBD_LL_SetupStage+0x5e>
 80097fc:	e01d      	b.n	800983a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f9f0 	bl	8009bec <USBD_StdDevReq>
 800980c:	4603      	mov	r3, r0
 800980e:	73fb      	strb	r3, [r7, #15]
      break;
 8009810:	e020      	b.n	8009854 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fa54 	bl	8009cc8 <USBD_StdItfReq>
 8009820:	4603      	mov	r3, r0
 8009822:	73fb      	strb	r3, [r7, #15]
      break;
 8009824:	e016      	b.n	8009854 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fa93 	bl	8009d5a <USBD_StdEPReq>
 8009834:	4603      	mov	r3, r0
 8009836:	73fb      	strb	r3, [r7, #15]
      break;
 8009838:	e00c      	b.n	8009854 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009840:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009844:	b2db      	uxtb	r3, r3
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f004 fae1 	bl	800de10 <USBD_LL_StallEP>
 800984e:	4603      	mov	r3, r0
 8009850:	73fb      	strb	r3, [r7, #15]
      break;
 8009852:	bf00      	nop
  }

  return ret;
 8009854:	7bfb      	ldrb	r3, [r7, #15]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b086      	sub	sp, #24
 8009862:	af00      	add	r7, sp, #0
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	460b      	mov	r3, r1
 8009868:	607a      	str	r2, [r7, #4]
 800986a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d138      	bne.n	80098e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009878:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009880:	2b03      	cmp	r3, #3
 8009882:	d14a      	bne.n	800991a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	429a      	cmp	r2, r3
 800988e:	d913      	bls.n	80098b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	689a      	ldr	r2, [r3, #8]
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	1ad2      	subs	r2, r2, r3
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	68da      	ldr	r2, [r3, #12]
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	4293      	cmp	r3, r2
 80098a8:	bf28      	it	cs
 80098aa:	4613      	movcs	r3, r2
 80098ac:	461a      	mov	r2, r3
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 ffc7 	bl	800a844 <USBD_CtlContinueRx>
 80098b6:	e030      	b.n	800991a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d10b      	bne.n	80098dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 ffc2 	bl	800a866 <USBD_CtlSendStatus>
 80098e2:	e01a      	b.n	800991a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d114      	bne.n	800991a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00e      	beq.n	800991a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	7afa      	ldrb	r2, [r7, #11]
 8009906:	4611      	mov	r1, r2
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	4798      	blx	r3
 800990c:	4603      	mov	r3, r0
 800990e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009910:	7dfb      	ldrb	r3, [r7, #23]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	e000      	b.n	800991c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	460b      	mov	r3, r1
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009932:	7afb      	ldrb	r3, [r7, #11]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d16b      	bne.n	8009a10 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3314      	adds	r3, #20
 800993c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009944:	2b02      	cmp	r3, #2
 8009946:	d156      	bne.n	80099f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	429a      	cmp	r2, r3
 8009952:	d914      	bls.n	800997e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	689a      	ldr	r2, [r3, #8]
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	1ad2      	subs	r2, r2, r3
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	461a      	mov	r2, r3
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 ff3c 	bl	800a7e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009970:	2300      	movs	r3, #0
 8009972:	2200      	movs	r2, #0
 8009974:	2100      	movs	r1, #0
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f004 faf4 	bl	800df64 <USBD_LL_PrepareReceive>
 800997c:	e03b      	b.n	80099f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	68da      	ldr	r2, [r3, #12]
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	429a      	cmp	r2, r3
 8009988:	d11c      	bne.n	80099c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009992:	429a      	cmp	r2, r3
 8009994:	d316      	bcc.n	80099c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d20f      	bcs.n	80099c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80099a4:	2200      	movs	r2, #0
 80099a6:	2100      	movs	r1, #0
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 ff1d 	bl	800a7e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099b6:	2300      	movs	r3, #0
 80099b8:	2200      	movs	r2, #0
 80099ba:	2100      	movs	r1, #0
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f004 fad1 	bl	800df64 <USBD_LL_PrepareReceive>
 80099c2:	e018      	b.n	80099f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d10b      	bne.n	80099e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80099e8:	2180      	movs	r1, #128	@ 0x80
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f004 fa10 	bl	800de10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 ff4b 	bl	800a88c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d122      	bne.n	8009a46 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f7ff fe98 	bl	8009736 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009a0e:	e01a      	b.n	8009a46 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d114      	bne.n	8009a46 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00e      	beq.n	8009a46 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	7afa      	ldrb	r2, [r7, #11]
 8009a32:	4611      	mov	r1, r2
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	4798      	blx	r3
 8009a38:	4603      	mov	r3, r0
 8009a3a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009a3c:	7dfb      	ldrb	r3, [r7, #23]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	e000      	b.n	8009a48 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3718      	adds	r7, #24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e02f      	b.n	8009ae4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00f      	beq.n	8009aae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d009      	beq.n	8009aae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	6852      	ldr	r2, [r2, #4]
 8009aa6:	b2d2      	uxtb	r2, r2
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009aae:	2340      	movs	r3, #64	@ 0x40
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f004 f966 	bl	800dd86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2240      	movs	r2, #64	@ 0x40
 8009ac6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009aca:	2340      	movs	r3, #64	@ 0x40
 8009acc:	2200      	movs	r2, #0
 8009ace:	2180      	movs	r1, #128	@ 0x80
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f004 f958 	bl	800dd86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2240      	movs	r2, #64	@ 0x40
 8009ae0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	78fa      	ldrb	r2, [r7, #3]
 8009afc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2204      	movs	r2, #4
 8009b26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	2b04      	cmp	r3, #4
 8009b4a:	d106      	bne.n	8009b5a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e012      	b.n	8009ba4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d10b      	bne.n	8009ba2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d005      	beq.n	8009ba2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009bca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009bce:	021b      	lsls	r3, r3, #8
 8009bd0:	b21a      	sxth	r2, r3
 8009bd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	b21b      	sxth	r3, r3
 8009bda:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009bdc:	89fb      	ldrh	r3, [r7, #14]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	371c      	adds	r7, #28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
	...

08009bec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c02:	2b40      	cmp	r3, #64	@ 0x40
 8009c04:	d005      	beq.n	8009c12 <USBD_StdDevReq+0x26>
 8009c06:	2b40      	cmp	r3, #64	@ 0x40
 8009c08:	d853      	bhi.n	8009cb2 <USBD_StdDevReq+0xc6>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00b      	beq.n	8009c26 <USBD_StdDevReq+0x3a>
 8009c0e:	2b20      	cmp	r3, #32
 8009c10:	d14f      	bne.n	8009cb2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	4798      	blx	r3
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]
      break;
 8009c24:	e04a      	b.n	8009cbc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	785b      	ldrb	r3, [r3, #1]
 8009c2a:	2b09      	cmp	r3, #9
 8009c2c:	d83b      	bhi.n	8009ca6 <USBD_StdDevReq+0xba>
 8009c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c34 <USBD_StdDevReq+0x48>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009c89 	.word	0x08009c89
 8009c38:	08009c9d 	.word	0x08009c9d
 8009c3c:	08009ca7 	.word	0x08009ca7
 8009c40:	08009c93 	.word	0x08009c93
 8009c44:	08009ca7 	.word	0x08009ca7
 8009c48:	08009c67 	.word	0x08009c67
 8009c4c:	08009c5d 	.word	0x08009c5d
 8009c50:	08009ca7 	.word	0x08009ca7
 8009c54:	08009c7f 	.word	0x08009c7f
 8009c58:	08009c71 	.word	0x08009c71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f9de 	bl	800a020 <USBD_GetDescriptor>
          break;
 8009c64:	e024      	b.n	8009cb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fb6d 	bl	800a348 <USBD_SetAddress>
          break;
 8009c6e:	e01f      	b.n	8009cb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fbac 	bl	800a3d0 <USBD_SetConfig>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	73fb      	strb	r3, [r7, #15]
          break;
 8009c7c:	e018      	b.n	8009cb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fc4b 	bl	800a51c <USBD_GetConfig>
          break;
 8009c86:	e013      	b.n	8009cb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fc7c 	bl	800a588 <USBD_GetStatus>
          break;
 8009c90:	e00e      	b.n	8009cb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fcab 	bl	800a5f0 <USBD_SetFeature>
          break;
 8009c9a:	e009      	b.n	8009cb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fcba 	bl	800a618 <USBD_ClrFeature>
          break;
 8009ca4:	e004      	b.n	8009cb0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fd11 	bl	800a6d0 <USBD_CtlError>
          break;
 8009cae:	bf00      	nop
      }
      break;
 8009cb0:	e004      	b.n	8009cbc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fd0b 	bl	800a6d0 <USBD_CtlError>
      break;
 8009cba:	bf00      	nop
  }

  return ret;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop

08009cc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cde:	2b40      	cmp	r3, #64	@ 0x40
 8009ce0:	d005      	beq.n	8009cee <USBD_StdItfReq+0x26>
 8009ce2:	2b40      	cmp	r3, #64	@ 0x40
 8009ce4:	d82f      	bhi.n	8009d46 <USBD_StdItfReq+0x7e>
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <USBD_StdItfReq+0x26>
 8009cea:	2b20      	cmp	r3, #32
 8009cec:	d12b      	bne.n	8009d46 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d81d      	bhi.n	8009d38 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	889b      	ldrh	r3, [r3, #4]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d813      	bhi.n	8009d2e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	4798      	blx	r3
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	88db      	ldrh	r3, [r3, #6]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d110      	bne.n	8009d42 <USBD_StdItfReq+0x7a>
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10d      	bne.n	8009d42 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fd9d 	bl	800a866 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d2c:	e009      	b.n	8009d42 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fccd 	bl	800a6d0 <USBD_CtlError>
          break;
 8009d36:	e004      	b.n	8009d42 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fcc8 	bl	800a6d0 <USBD_CtlError>
          break;
 8009d40:	e000      	b.n	8009d44 <USBD_StdItfReq+0x7c>
          break;
 8009d42:	bf00      	nop
      }
      break;
 8009d44:	e004      	b.n	8009d50 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fcc1 	bl	800a6d0 <USBD_CtlError>
      break;
 8009d4e:	bf00      	nop
  }

  return ret;
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	889b      	ldrh	r3, [r3, #4]
 8009d6c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d76:	2b40      	cmp	r3, #64	@ 0x40
 8009d78:	d007      	beq.n	8009d8a <USBD_StdEPReq+0x30>
 8009d7a:	2b40      	cmp	r3, #64	@ 0x40
 8009d7c:	f200 8145 	bhi.w	800a00a <USBD_StdEPReq+0x2b0>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00c      	beq.n	8009d9e <USBD_StdEPReq+0x44>
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	f040 8140 	bne.w	800a00a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	4798      	blx	r3
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d9c:	e13a      	b.n	800a014 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d007      	beq.n	8009db6 <USBD_StdEPReq+0x5c>
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	f300 8129 	bgt.w	8009ffe <USBD_StdEPReq+0x2a4>
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d07f      	beq.n	8009eb0 <USBD_StdEPReq+0x156>
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d03c      	beq.n	8009e2e <USBD_StdEPReq+0xd4>
 8009db4:	e123      	b.n	8009ffe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d002      	beq.n	8009dc8 <USBD_StdEPReq+0x6e>
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d016      	beq.n	8009df4 <USBD_StdEPReq+0x9a>
 8009dc6:	e02c      	b.n	8009e22 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00d      	beq.n	8009dea <USBD_StdEPReq+0x90>
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	2b80      	cmp	r3, #128	@ 0x80
 8009dd2:	d00a      	beq.n	8009dea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f004 f819 	bl	800de10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dde:	2180      	movs	r1, #128	@ 0x80
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f004 f815 	bl	800de10 <USBD_LL_StallEP>
 8009de6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009de8:	e020      	b.n	8009e2c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fc6f 	bl	800a6d0 <USBD_CtlError>
              break;
 8009df2:	e01b      	b.n	8009e2c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	885b      	ldrh	r3, [r3, #2]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10e      	bne.n	8009e1a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00b      	beq.n	8009e1a <USBD_StdEPReq+0xc0>
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b80      	cmp	r3, #128	@ 0x80
 8009e06:	d008      	beq.n	8009e1a <USBD_StdEPReq+0xc0>
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	88db      	ldrh	r3, [r3, #6]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f003 fffb 	bl	800de10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fd23 	bl	800a866 <USBD_CtlSendStatus>

              break;
 8009e20:	e004      	b.n	8009e2c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fc53 	bl	800a6d0 <USBD_CtlError>
              break;
 8009e2a:	bf00      	nop
          }
          break;
 8009e2c:	e0ec      	b.n	800a008 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d002      	beq.n	8009e40 <USBD_StdEPReq+0xe6>
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d016      	beq.n	8009e6c <USBD_StdEPReq+0x112>
 8009e3e:	e030      	b.n	8009ea2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00d      	beq.n	8009e62 <USBD_StdEPReq+0x108>
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b80      	cmp	r3, #128	@ 0x80
 8009e4a:	d00a      	beq.n	8009e62 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f003 ffdd 	bl	800de10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e56:	2180      	movs	r1, #128	@ 0x80
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f003 ffd9 	bl	800de10 <USBD_LL_StallEP>
 8009e5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e60:	e025      	b.n	8009eae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fc33 	bl	800a6d0 <USBD_CtlError>
              break;
 8009e6a:	e020      	b.n	8009eae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	885b      	ldrh	r3, [r3, #2]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d11b      	bne.n	8009eac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e74:	7bbb      	ldrb	r3, [r7, #14]
 8009e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d004      	beq.n	8009e88 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e7e:	7bbb      	ldrb	r3, [r7, #14]
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f003 ffe3 	bl	800de4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fcec 	bl	800a866 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	4798      	blx	r3
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009ea0:	e004      	b.n	8009eac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fc13 	bl	800a6d0 <USBD_CtlError>
              break;
 8009eaa:	e000      	b.n	8009eae <USBD_StdEPReq+0x154>
              break;
 8009eac:	bf00      	nop
          }
          break;
 8009eae:	e0ab      	b.n	800a008 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d002      	beq.n	8009ec2 <USBD_StdEPReq+0x168>
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d032      	beq.n	8009f26 <USBD_StdEPReq+0x1cc>
 8009ec0:	e097      	b.n	8009ff2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d007      	beq.n	8009ed8 <USBD_StdEPReq+0x17e>
 8009ec8:	7bbb      	ldrb	r3, [r7, #14]
 8009eca:	2b80      	cmp	r3, #128	@ 0x80
 8009ecc:	d004      	beq.n	8009ed8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fbfd 	bl	800a6d0 <USBD_CtlError>
                break;
 8009ed6:	e091      	b.n	8009ffc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	da0b      	bge.n	8009ef8 <USBD_StdEPReq+0x19e>
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	3310      	adds	r3, #16
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	e00b      	b.n	8009f10 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009efe:	4613      	mov	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	3304      	adds	r3, #4
 8009f10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fc47 	bl	800a7b2 <USBD_CtlSendData>
              break;
 8009f24:	e06a      	b.n	8009ffc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	da11      	bge.n	8009f52 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
 8009f30:	f003 020f 	and.w	r2, r3, #15
 8009f34:	6879      	ldr	r1, [r7, #4]
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	440b      	add	r3, r1
 8009f40:	3324      	adds	r3, #36	@ 0x24
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d117      	bne.n	8009f78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fbc0 	bl	800a6d0 <USBD_CtlError>
                  break;
 8009f50:	e054      	b.n	8009ffc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
 8009f54:	f003 020f 	and.w	r2, r3, #15
 8009f58:	6879      	ldr	r1, [r7, #4]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	440b      	add	r3, r1
 8009f64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f68:	881b      	ldrh	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d104      	bne.n	8009f78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fbad 	bl	800a6d0 <USBD_CtlError>
                  break;
 8009f76:	e041      	b.n	8009ffc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	da0b      	bge.n	8009f98 <USBD_StdEPReq+0x23e>
 8009f80:	7bbb      	ldrb	r3, [r7, #14]
 8009f82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f86:	4613      	mov	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	3310      	adds	r3, #16
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	4413      	add	r3, r2
 8009f94:	3304      	adds	r3, #4
 8009f96:	e00b      	b.n	8009fb0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	4413      	add	r3, r2
 8009fae:	3304      	adds	r3, #4
 8009fb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fb2:	7bbb      	ldrb	r3, [r7, #14]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <USBD_StdEPReq+0x264>
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2b80      	cmp	r3, #128	@ 0x80
 8009fbc:	d103      	bne.n	8009fc6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	e00e      	b.n	8009fe4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009fc6:	7bbb      	ldrb	r3, [r7, #14]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f003 ff5e 	bl	800de8c <USBD_LL_IsStallEP>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	e002      	b.n	8009fe4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fbe1 	bl	800a7b2 <USBD_CtlSendData>
              break;
 8009ff0:	e004      	b.n	8009ffc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fb6b 	bl	800a6d0 <USBD_CtlError>
              break;
 8009ffa:	bf00      	nop
          }
          break;
 8009ffc:	e004      	b.n	800a008 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fb65 	bl	800a6d0 <USBD_CtlError>
          break;
 800a006:	bf00      	nop
      }
      break;
 800a008:	e004      	b.n	800a014 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fb5f 	bl	800a6d0 <USBD_CtlError>
      break;
 800a012:	bf00      	nop
  }

  return ret;
 800a014:	7bfb      	ldrb	r3, [r7, #15]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a02a:	2300      	movs	r3, #0
 800a02c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	885b      	ldrh	r3, [r3, #2]
 800a03a:	0a1b      	lsrs	r3, r3, #8
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	3b01      	subs	r3, #1
 800a040:	2b0e      	cmp	r3, #14
 800a042:	f200 8152 	bhi.w	800a2ea <USBD_GetDescriptor+0x2ca>
 800a046:	a201      	add	r2, pc, #4	@ (adr r2, 800a04c <USBD_GetDescriptor+0x2c>)
 800a048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04c:	0800a0bd 	.word	0x0800a0bd
 800a050:	0800a0d5 	.word	0x0800a0d5
 800a054:	0800a115 	.word	0x0800a115
 800a058:	0800a2eb 	.word	0x0800a2eb
 800a05c:	0800a2eb 	.word	0x0800a2eb
 800a060:	0800a28b 	.word	0x0800a28b
 800a064:	0800a2b7 	.word	0x0800a2b7
 800a068:	0800a2eb 	.word	0x0800a2eb
 800a06c:	0800a2eb 	.word	0x0800a2eb
 800a070:	0800a2eb 	.word	0x0800a2eb
 800a074:	0800a2eb 	.word	0x0800a2eb
 800a078:	0800a2eb 	.word	0x0800a2eb
 800a07c:	0800a2eb 	.word	0x0800a2eb
 800a080:	0800a2eb 	.word	0x0800a2eb
 800a084:	0800a089 	.word	0x0800a089
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00b      	beq.n	800a0ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	7c12      	ldrb	r2, [r2, #16]
 800a0a0:	f107 0108 	add.w	r1, r7, #8
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	4798      	blx	r3
 800a0a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0aa:	e126      	b.n	800a2fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fb0e 	bl	800a6d0 <USBD_CtlError>
        err++;
 800a0b4:	7afb      	ldrb	r3, [r7, #11]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	72fb      	strb	r3, [r7, #11]
      break;
 800a0ba:	e11e      	b.n	800a2fa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	7c12      	ldrb	r2, [r2, #16]
 800a0c8:	f107 0108 	add.w	r1, r7, #8
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	4798      	blx	r3
 800a0d0:	60f8      	str	r0, [r7, #12]
      break;
 800a0d2:	e112      	b.n	800a2fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	7c1b      	ldrb	r3, [r3, #16]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10d      	bne.n	800a0f8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e4:	f107 0208 	add.w	r2, r7, #8
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	4798      	blx	r3
 800a0ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0f6:	e100      	b.n	800a2fa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a100:	f107 0208 	add.w	r2, r7, #8
 800a104:	4610      	mov	r0, r2
 800a106:	4798      	blx	r3
 800a108:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3301      	adds	r3, #1
 800a10e:	2202      	movs	r2, #2
 800a110:	701a      	strb	r2, [r3, #0]
      break;
 800a112:	e0f2      	b.n	800a2fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	885b      	ldrh	r3, [r3, #2]
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	2b05      	cmp	r3, #5
 800a11c:	f200 80ac 	bhi.w	800a278 <USBD_GetDescriptor+0x258>
 800a120:	a201      	add	r2, pc, #4	@ (adr r2, 800a128 <USBD_GetDescriptor+0x108>)
 800a122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a126:	bf00      	nop
 800a128:	0800a141 	.word	0x0800a141
 800a12c:	0800a175 	.word	0x0800a175
 800a130:	0800a1a9 	.word	0x0800a1a9
 800a134:	0800a1dd 	.word	0x0800a1dd
 800a138:	0800a211 	.word	0x0800a211
 800a13c:	0800a245 	.word	0x0800a245
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	7c12      	ldrb	r2, [r2, #16]
 800a158:	f107 0108 	add.w	r1, r7, #8
 800a15c:	4610      	mov	r0, r2
 800a15e:	4798      	blx	r3
 800a160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a162:	e091      	b.n	800a288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fab2 	bl	800a6d0 <USBD_CtlError>
            err++;
 800a16c:	7afb      	ldrb	r3, [r7, #11]
 800a16e:	3301      	adds	r3, #1
 800a170:	72fb      	strb	r3, [r7, #11]
          break;
 800a172:	e089      	b.n	800a288 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00b      	beq.n	800a198 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	7c12      	ldrb	r2, [r2, #16]
 800a18c:	f107 0108 	add.w	r1, r7, #8
 800a190:	4610      	mov	r0, r2
 800a192:	4798      	blx	r3
 800a194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a196:	e077      	b.n	800a288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a198:	6839      	ldr	r1, [r7, #0]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fa98 	bl	800a6d0 <USBD_CtlError>
            err++;
 800a1a0:	7afb      	ldrb	r3, [r7, #11]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1a6:	e06f      	b.n	800a288 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00b      	beq.n	800a1cc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	7c12      	ldrb	r2, [r2, #16]
 800a1c0:	f107 0108 	add.w	r1, r7, #8
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	4798      	blx	r3
 800a1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ca:	e05d      	b.n	800a288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fa7e 	bl	800a6d0 <USBD_CtlError>
            err++;
 800a1d4:	7afb      	ldrb	r3, [r7, #11]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1da:	e055      	b.n	800a288 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00b      	beq.n	800a200 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	7c12      	ldrb	r2, [r2, #16]
 800a1f4:	f107 0108 	add.w	r1, r7, #8
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4798      	blx	r3
 800a1fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1fe:	e043      	b.n	800a288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fa64 	bl	800a6d0 <USBD_CtlError>
            err++;
 800a208:	7afb      	ldrb	r3, [r7, #11]
 800a20a:	3301      	adds	r3, #1
 800a20c:	72fb      	strb	r3, [r7, #11]
          break;
 800a20e:	e03b      	b.n	800a288 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a216:	695b      	ldr	r3, [r3, #20]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00b      	beq.n	800a234 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	7c12      	ldrb	r2, [r2, #16]
 800a228:	f107 0108 	add.w	r1, r7, #8
 800a22c:	4610      	mov	r0, r2
 800a22e:	4798      	blx	r3
 800a230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a232:	e029      	b.n	800a288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fa4a 	bl	800a6d0 <USBD_CtlError>
            err++;
 800a23c:	7afb      	ldrb	r3, [r7, #11]
 800a23e:	3301      	adds	r3, #1
 800a240:	72fb      	strb	r3, [r7, #11]
          break;
 800a242:	e021      	b.n	800a288 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00b      	beq.n	800a268 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	7c12      	ldrb	r2, [r2, #16]
 800a25c:	f107 0108 	add.w	r1, r7, #8
 800a260:	4610      	mov	r0, r2
 800a262:	4798      	blx	r3
 800a264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a266:	e00f      	b.n	800a288 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fa30 	bl	800a6d0 <USBD_CtlError>
            err++;
 800a270:	7afb      	ldrb	r3, [r7, #11]
 800a272:	3301      	adds	r3, #1
 800a274:	72fb      	strb	r3, [r7, #11]
          break;
 800a276:	e007      	b.n	800a288 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fa28 	bl	800a6d0 <USBD_CtlError>
          err++;
 800a280:	7afb      	ldrb	r3, [r7, #11]
 800a282:	3301      	adds	r3, #1
 800a284:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a286:	bf00      	nop
      }
      break;
 800a288:	e037      	b.n	800a2fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	7c1b      	ldrb	r3, [r3, #16]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d109      	bne.n	800a2a6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a29a:	f107 0208 	add.w	r2, r7, #8
 800a29e:	4610      	mov	r0, r2
 800a2a0:	4798      	blx	r3
 800a2a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2a4:	e029      	b.n	800a2fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fa11 	bl	800a6d0 <USBD_CtlError>
        err++;
 800a2ae:	7afb      	ldrb	r3, [r7, #11]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2b4:	e021      	b.n	800a2fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	7c1b      	ldrb	r3, [r3, #16]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10d      	bne.n	800a2da <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2c6:	f107 0208 	add.w	r2, r7, #8
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	4798      	blx	r3
 800a2ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	2207      	movs	r2, #7
 800a2d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2d8:	e00f      	b.n	800a2fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f9f7 	bl	800a6d0 <USBD_CtlError>
        err++;
 800a2e2:	7afb      	ldrb	r3, [r7, #11]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	72fb      	strb	r3, [r7, #11]
      break;
 800a2e8:	e007      	b.n	800a2fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f9ef 	bl	800a6d0 <USBD_CtlError>
      err++;
 800a2f2:	7afb      	ldrb	r3, [r7, #11]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	72fb      	strb	r3, [r7, #11]
      break;
 800a2f8:	bf00      	nop
  }

  if (err != 0U)
 800a2fa:	7afb      	ldrb	r3, [r7, #11]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d11e      	bne.n	800a33e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	88db      	ldrh	r3, [r3, #6]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d016      	beq.n	800a336 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a308:	893b      	ldrh	r3, [r7, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00e      	beq.n	800a32c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	88da      	ldrh	r2, [r3, #6]
 800a312:	893b      	ldrh	r3, [r7, #8]
 800a314:	4293      	cmp	r3, r2
 800a316:	bf28      	it	cs
 800a318:	4613      	movcs	r3, r2
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a31e:	893b      	ldrh	r3, [r7, #8]
 800a320:	461a      	mov	r2, r3
 800a322:	68f9      	ldr	r1, [r7, #12]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fa44 	bl	800a7b2 <USBD_CtlSendData>
 800a32a:	e009      	b.n	800a340 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f9ce 	bl	800a6d0 <USBD_CtlError>
 800a334:	e004      	b.n	800a340 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fa95 	bl	800a866 <USBD_CtlSendStatus>
 800a33c:	e000      	b.n	800a340 <USBD_GetDescriptor+0x320>
    return;
 800a33e:	bf00      	nop
  }
}
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop

0800a348 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	889b      	ldrh	r3, [r3, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d131      	bne.n	800a3be <USBD_SetAddress+0x76>
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	88db      	ldrh	r3, [r3, #6]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d12d      	bne.n	800a3be <USBD_SetAddress+0x76>
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	885b      	ldrh	r3, [r3, #2]
 800a366:	2b7f      	cmp	r3, #127	@ 0x7f
 800a368:	d829      	bhi.n	800a3be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	885b      	ldrh	r3, [r3, #2]
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a374:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d104      	bne.n	800a38c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f9a3 	bl	800a6d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38a:	e01d      	b.n	800a3c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	7bfa      	ldrb	r2, [r7, #15]
 800a390:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f003 fda3 	bl	800dee4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fa61 	bl	800a866 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d004      	beq.n	800a3b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b2:	e009      	b.n	800a3c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3bc:	e004      	b.n	800a3c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a3be:	6839      	ldr	r1, [r7, #0]
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f985 	bl	800a6d0 <USBD_CtlError>
  }
}
 800a3c6:	bf00      	nop
 800a3c8:	bf00      	nop
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	885b      	ldrh	r3, [r3, #2]
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	4b4c      	ldr	r3, [pc, #304]	@ (800a518 <USBD_SetConfig+0x148>)
 800a3e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3e8:	4b4b      	ldr	r3, [pc, #300]	@ (800a518 <USBD_SetConfig+0x148>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d905      	bls.n	800a3fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f96c 	bl	800a6d0 <USBD_CtlError>
    return USBD_FAIL;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e088      	b.n	800a50e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b02      	cmp	r3, #2
 800a406:	d002      	beq.n	800a40e <USBD_SetConfig+0x3e>
 800a408:	2b03      	cmp	r3, #3
 800a40a:	d025      	beq.n	800a458 <USBD_SetConfig+0x88>
 800a40c:	e071      	b.n	800a4f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a40e:	4b42      	ldr	r3, [pc, #264]	@ (800a518 <USBD_SetConfig+0x148>)
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d01c      	beq.n	800a450 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a416:	4b40      	ldr	r3, [pc, #256]	@ (800a518 <USBD_SetConfig+0x148>)
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	461a      	mov	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a420:	4b3d      	ldr	r3, [pc, #244]	@ (800a518 <USBD_SetConfig+0x148>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	4619      	mov	r1, r3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7ff f990 	bl	800974c <USBD_SetClassConfig>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d004      	beq.n	800a440 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f949 	bl	800a6d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a43e:	e065      	b.n	800a50c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fa10 	bl	800a866 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2203      	movs	r2, #3
 800a44a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a44e:	e05d      	b.n	800a50c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fa08 	bl	800a866 <USBD_CtlSendStatus>
      break;
 800a456:	e059      	b.n	800a50c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a458:	4b2f      	ldr	r3, [pc, #188]	@ (800a518 <USBD_SetConfig+0x148>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d112      	bne.n	800a486 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a468:	4b2b      	ldr	r3, [pc, #172]	@ (800a518 <USBD_SetConfig+0x148>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	461a      	mov	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a472:	4b29      	ldr	r3, [pc, #164]	@ (800a518 <USBD_SetConfig+0x148>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7ff f983 	bl	8009784 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f9f1 	bl	800a866 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a484:	e042      	b.n	800a50c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a486:	4b24      	ldr	r3, [pc, #144]	@ (800a518 <USBD_SetConfig+0x148>)
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	429a      	cmp	r2, r3
 800a492:	d02a      	beq.n	800a4ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff f971 	bl	8009784 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a4a2:	4b1d      	ldr	r3, [pc, #116]	@ (800a518 <USBD_SetConfig+0x148>)
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a518 <USBD_SetConfig+0x148>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff f94a 	bl	800974c <USBD_SetClassConfig>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00f      	beq.n	800a4e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a4c2:	6839      	ldr	r1, [r7, #0]
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f903 	bl	800a6d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff f956 	bl	8009784 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4e0:	e014      	b.n	800a50c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f9bf 	bl	800a866 <USBD_CtlSendStatus>
      break;
 800a4e8:	e010      	b.n	800a50c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f9bb 	bl	800a866 <USBD_CtlSendStatus>
      break;
 800a4f0:	e00c      	b.n	800a50c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f8eb 	bl	800a6d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4fa:	4b07      	ldr	r3, [pc, #28]	@ (800a518 <USBD_SetConfig+0x148>)
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7ff f93f 	bl	8009784 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a506:	2303      	movs	r3, #3
 800a508:	73fb      	strb	r3, [r7, #15]
      break;
 800a50a:	bf00      	nop
  }

  return ret;
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20000540 	.word	0x20000540

0800a51c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	88db      	ldrh	r3, [r3, #6]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d004      	beq.n	800a538 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f8cd 	bl	800a6d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a536:	e023      	b.n	800a580 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b02      	cmp	r3, #2
 800a542:	dc02      	bgt.n	800a54a <USBD_GetConfig+0x2e>
 800a544:	2b00      	cmp	r3, #0
 800a546:	dc03      	bgt.n	800a550 <USBD_GetConfig+0x34>
 800a548:	e015      	b.n	800a576 <USBD_GetConfig+0x5a>
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d00b      	beq.n	800a566 <USBD_GetConfig+0x4a>
 800a54e:	e012      	b.n	800a576 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	3308      	adds	r3, #8
 800a55a:	2201      	movs	r2, #1
 800a55c:	4619      	mov	r1, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f927 	bl	800a7b2 <USBD_CtlSendData>
        break;
 800a564:	e00c      	b.n	800a580 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	3304      	adds	r3, #4
 800a56a:	2201      	movs	r2, #1
 800a56c:	4619      	mov	r1, r3
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f91f 	bl	800a7b2 <USBD_CtlSendData>
        break;
 800a574:	e004      	b.n	800a580 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f8a9 	bl	800a6d0 <USBD_CtlError>
        break;
 800a57e:	bf00      	nop
}
 800a580:	bf00      	nop
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	3b01      	subs	r3, #1
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d81e      	bhi.n	800a5de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	88db      	ldrh	r3, [r3, #6]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d004      	beq.n	800a5b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f890 	bl	800a6d0 <USBD_CtlError>
        break;
 800a5b0:	e01a      	b.n	800a5e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d005      	beq.n	800a5ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	f043 0202 	orr.w	r2, r3, #2
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	330c      	adds	r3, #12
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f8eb 	bl	800a7b2 <USBD_CtlSendData>
      break;
 800a5dc:	e004      	b.n	800a5e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 f875 	bl	800a6d0 <USBD_CtlError>
      break;
 800a5e6:	bf00      	nop
  }
}
 800a5e8:	bf00      	nop
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	885b      	ldrh	r3, [r3, #2]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d106      	bne.n	800a610 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f92b 	bl	800a866 <USBD_CtlSendStatus>
  }
}
 800a610:	bf00      	nop
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	3b01      	subs	r3, #1
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d80b      	bhi.n	800a648 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	885b      	ldrh	r3, [r3, #2]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d10c      	bne.n	800a652 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f910 	bl	800a866 <USBD_CtlSendStatus>
      }
      break;
 800a646:	e004      	b.n	800a652 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f840 	bl	800a6d0 <USBD_CtlError>
      break;
 800a650:	e000      	b.n	800a654 <USBD_ClrFeature+0x3c>
      break;
 800a652:	bf00      	nop
  }
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	781a      	ldrb	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3301      	adds	r3, #1
 800a676:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	3301      	adds	r3, #1
 800a684:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f7ff fa90 	bl	8009bac <SWAPBYTE>
 800a68c:	4603      	mov	r3, r0
 800a68e:	461a      	mov	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3301      	adds	r3, #1
 800a698:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3301      	adds	r3, #1
 800a69e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f7ff fa83 	bl	8009bac <SWAPBYTE>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f7ff fa76 	bl	8009bac <SWAPBYTE>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	80da      	strh	r2, [r3, #6]
}
 800a6c8:	bf00      	nop
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6da:	2180      	movs	r1, #128	@ 0x80
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f003 fb97 	bl	800de10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f003 fb93 	bl	800de10 <USBD_LL_StallEP>
}
 800a6ea:	bf00      	nop
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b086      	sub	sp, #24
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	60f8      	str	r0, [r7, #12]
 800a6fa:	60b9      	str	r1, [r7, #8]
 800a6fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6fe:	2300      	movs	r3, #0
 800a700:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d036      	beq.n	800a776 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a70c:	6938      	ldr	r0, [r7, #16]
 800a70e:	f000 f836 	bl	800a77e <USBD_GetLen>
 800a712:	4603      	mov	r3, r0
 800a714:	3301      	adds	r3, #1
 800a716:	b29b      	uxth	r3, r3
 800a718:	005b      	lsls	r3, r3, #1
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	4413      	add	r3, r2
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	7812      	ldrb	r2, [r2, #0]
 800a72a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a72c:	7dfb      	ldrb	r3, [r7, #23]
 800a72e:	3301      	adds	r3, #1
 800a730:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a732:	7dfb      	ldrb	r3, [r7, #23]
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	4413      	add	r3, r2
 800a738:	2203      	movs	r2, #3
 800a73a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
 800a73e:	3301      	adds	r3, #1
 800a740:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a742:	e013      	b.n	800a76c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a744:	7dfb      	ldrb	r3, [r7, #23]
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	4413      	add	r3, r2
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	7812      	ldrb	r2, [r2, #0]
 800a74e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	3301      	adds	r3, #1
 800a754:	613b      	str	r3, [r7, #16]
    idx++;
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	3301      	adds	r3, #1
 800a75a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	4413      	add	r3, r2
 800a762:	2200      	movs	r2, #0
 800a764:	701a      	strb	r2, [r3, #0]
    idx++;
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	3301      	adds	r3, #1
 800a76a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e7      	bne.n	800a744 <USBD_GetString+0x52>
 800a774:	e000      	b.n	800a778 <USBD_GetString+0x86>
    return;
 800a776:	bf00      	nop
  }
}
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a77e:	b480      	push	{r7}
 800a780:	b085      	sub	sp, #20
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a78e:	e005      	b.n	800a79c <USBD_GetLen+0x1e>
  {
    len++;
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	3301      	adds	r3, #1
 800a794:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	3301      	adds	r3, #1
 800a79a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1f5      	bne.n	800a790 <USBD_GetLen+0x12>
  }

  return len;
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f003 fba2 	bl	800df22 <USBD_LL_Transmit>

  return USBD_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f003 fb91 	bl	800df22 <USBD_LL_Transmit>

  return USBD_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b084      	sub	sp, #16
 800a80e:	af00      	add	r7, sp, #0
 800a810:	60f8      	str	r0, [r7, #12]
 800a812:	60b9      	str	r1, [r7, #8]
 800a814:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2203      	movs	r2, #3
 800a81a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	2100      	movs	r1, #0
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f003 fb95 	bl	800df64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	2100      	movs	r1, #0
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f003 fb84 	bl	800df64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2204      	movs	r2, #4
 800a872:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a876:	2300      	movs	r3, #0
 800a878:	2200      	movs	r2, #0
 800a87a:	2100      	movs	r1, #0
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f003 fb50 	bl	800df22 <USBD_LL_Transmit>

  return USBD_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2205      	movs	r2, #5
 800a898:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a89c:	2300      	movs	r3, #0
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f003 fb5e 	bl	800df64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <__NVIC_SetPriority>:
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	6039      	str	r1, [r7, #0]
 800a8be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	db0a      	blt.n	800a8de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	490c      	ldr	r1, [pc, #48]	@ (800a900 <__NVIC_SetPriority+0x4c>)
 800a8ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8d2:	0112      	lsls	r2, r2, #4
 800a8d4:	b2d2      	uxtb	r2, r2
 800a8d6:	440b      	add	r3, r1
 800a8d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a8dc:	e00a      	b.n	800a8f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	4908      	ldr	r1, [pc, #32]	@ (800a904 <__NVIC_SetPriority+0x50>)
 800a8e4:	79fb      	ldrb	r3, [r7, #7]
 800a8e6:	f003 030f 	and.w	r3, r3, #15
 800a8ea:	3b04      	subs	r3, #4
 800a8ec:	0112      	lsls	r2, r2, #4
 800a8ee:	b2d2      	uxtb	r2, r2
 800a8f0:	440b      	add	r3, r1
 800a8f2:	761a      	strb	r2, [r3, #24]
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	e000e100 	.word	0xe000e100
 800a904:	e000ed00 	.word	0xe000ed00

0800a908 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a908:	b580      	push	{r7, lr}
 800a90a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a90c:	4b05      	ldr	r3, [pc, #20]	@ (800a924 <SysTick_Handler+0x1c>)
 800a90e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a910:	f001 fe56 	bl	800c5c0 <xTaskGetSchedulerState>
 800a914:	4603      	mov	r3, r0
 800a916:	2b01      	cmp	r3, #1
 800a918:	d001      	beq.n	800a91e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a91a:	f002 fc4d 	bl	800d1b8 <xPortSysTickHandler>
  }
}
 800a91e:	bf00      	nop
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	e000e010 	.word	0xe000e010

0800a928 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a92c:	2100      	movs	r1, #0
 800a92e:	f06f 0004 	mvn.w	r0, #4
 800a932:	f7ff ffbf 	bl	800a8b4 <__NVIC_SetPriority>
#endif
}
 800a936:	bf00      	nop
 800a938:	bd80      	pop	{r7, pc}
	...

0800a93c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a942:	f3ef 8305 	mrs	r3, IPSR
 800a946:	603b      	str	r3, [r7, #0]
  return(result);
 800a948:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a94e:	f06f 0305 	mvn.w	r3, #5
 800a952:	607b      	str	r3, [r7, #4]
 800a954:	e00c      	b.n	800a970 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a956:	4b0a      	ldr	r3, [pc, #40]	@ (800a980 <osKernelInitialize+0x44>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d105      	bne.n	800a96a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a95e:	4b08      	ldr	r3, [pc, #32]	@ (800a980 <osKernelInitialize+0x44>)
 800a960:	2201      	movs	r2, #1
 800a962:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a964:	2300      	movs	r3, #0
 800a966:	607b      	str	r3, [r7, #4]
 800a968:	e002      	b.n	800a970 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a96a:	f04f 33ff 	mov.w	r3, #4294967295
 800a96e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a970:	687b      	ldr	r3, [r7, #4]
}
 800a972:	4618      	mov	r0, r3
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	20000544 	.word	0x20000544

0800a984 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a98a:	f3ef 8305 	mrs	r3, IPSR
 800a98e:	603b      	str	r3, [r7, #0]
  return(result);
 800a990:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a996:	f06f 0305 	mvn.w	r3, #5
 800a99a:	607b      	str	r3, [r7, #4]
 800a99c:	e010      	b.n	800a9c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a99e:	4b0b      	ldr	r3, [pc, #44]	@ (800a9cc <osKernelStart+0x48>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d109      	bne.n	800a9ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a9a6:	f7ff ffbf 	bl	800a928 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a9aa:	4b08      	ldr	r3, [pc, #32]	@ (800a9cc <osKernelStart+0x48>)
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a9b0:	f001 f9a2 	bl	800bcf8 <vTaskStartScheduler>
      stat = osOK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	607b      	str	r3, [r7, #4]
 800a9b8:	e002      	b.n	800a9c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a9be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a9c0:	687b      	ldr	r3, [r7, #4]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20000544 	.word	0x20000544

0800a9d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b08e      	sub	sp, #56	@ 0x38
 800a9d4:	af04      	add	r7, sp, #16
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9e0:	f3ef 8305 	mrs	r3, IPSR
 800a9e4:	617b      	str	r3, [r7, #20]
  return(result);
 800a9e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d17f      	bne.n	800aaec <osThreadNew+0x11c>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d07c      	beq.n	800aaec <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a9f2:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800a9f6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a9f8:	2318      	movs	r3, #24
 800a9fa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800aa00:	f04f 33ff 	mov.w	r3, #4294967295
 800aa04:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d045      	beq.n	800aa98 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <osThreadNew+0x4a>
        name = attr->name;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d008      	beq.n	800aa40 <osThreadNew+0x70>
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	2b38      	cmp	r3, #56	@ 0x38
 800aa32:	d805      	bhi.n	800aa40 <osThreadNew+0x70>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d001      	beq.n	800aa44 <osThreadNew+0x74>
        return (NULL);
 800aa40:	2300      	movs	r3, #0
 800aa42:	e054      	b.n	800aaee <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	695b      	ldr	r3, [r3, #20]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d003      	beq.n	800aa54 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	695b      	ldr	r3, [r3, #20]
 800aa50:	089b      	lsrs	r3, r3, #2
 800aa52:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00e      	beq.n	800aa7a <osThreadNew+0xaa>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	2ba7      	cmp	r3, #167	@ 0xa7
 800aa62:	d90a      	bls.n	800aa7a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d006      	beq.n	800aa7a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <osThreadNew+0xaa>
        mem = 1;
 800aa74:	2301      	movs	r3, #1
 800aa76:	61bb      	str	r3, [r7, #24]
 800aa78:	e010      	b.n	800aa9c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10c      	bne.n	800aa9c <osThreadNew+0xcc>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d108      	bne.n	800aa9c <osThreadNew+0xcc>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d104      	bne.n	800aa9c <osThreadNew+0xcc>
          mem = 0;
 800aa92:	2300      	movs	r3, #0
 800aa94:	61bb      	str	r3, [r7, #24]
 800aa96:	e001      	b.n	800aa9c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d110      	bne.n	800aac4 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aaaa:	9202      	str	r2, [sp, #8]
 800aaac:	9301      	str	r3, [sp, #4]
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	9300      	str	r3, [sp, #0]
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	6a3a      	ldr	r2, [r7, #32]
 800aab6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 ff29 	bl	800b910 <xTaskCreateStatic>
 800aabe:	4603      	mov	r3, r0
 800aac0:	613b      	str	r3, [r7, #16]
 800aac2:	e013      	b.n	800aaec <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d110      	bne.n	800aaec <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	b29a      	uxth	r2, r3
 800aace:	f107 0310 	add.w	r3, r7, #16
 800aad2:	9301      	str	r3, [sp, #4]
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f000 ff77 	bl	800b9d0 <xTaskCreate>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d001      	beq.n	800aaec <osThreadNew+0x11c>
            hTask = NULL;
 800aae8:	2300      	movs	r3, #0
 800aaea:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aaec:	693b      	ldr	r3, [r7, #16]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3728      	adds	r7, #40	@ 0x28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b084      	sub	sp, #16
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aafe:	f3ef 8305 	mrs	r3, IPSR
 800ab02:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d003      	beq.n	800ab12 <osDelay+0x1c>
    stat = osErrorISR;
 800ab0a:	f06f 0305 	mvn.w	r3, #5
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	e007      	b.n	800ab22 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f001 f8b5 	bl	800bc8c <vTaskDelay>
    }
  }

  return (stat);
 800ab22:	68fb      	ldr	r3, [r7, #12]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08a      	sub	sp, #40	@ 0x28
 800ab30:	af02      	add	r7, sp, #8
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab3c:	f3ef 8305 	mrs	r3, IPSR
 800ab40:	613b      	str	r3, [r7, #16]
  return(result);
 800ab42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d15f      	bne.n	800ac08 <osMessageQueueNew+0xdc>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d05c      	beq.n	800ac08 <osMessageQueueNew+0xdc>
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d059      	beq.n	800ac08 <osMessageQueueNew+0xdc>
    mem = -1;
 800ab54:	f04f 33ff 	mov.w	r3, #4294967295
 800ab58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d029      	beq.n	800abb4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d012      	beq.n	800ab8e <osMessageQueueNew+0x62>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	2b4f      	cmp	r3, #79	@ 0x4f
 800ab6e:	d90e      	bls.n	800ab8e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00a      	beq.n	800ab8e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	695a      	ldr	r2, [r3, #20]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	68b9      	ldr	r1, [r7, #8]
 800ab80:	fb01 f303 	mul.w	r3, r1, r3
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d302      	bcc.n	800ab8e <osMessageQueueNew+0x62>
        mem = 1;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	61bb      	str	r3, [r7, #24]
 800ab8c:	e014      	b.n	800abb8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d110      	bne.n	800abb8 <osMessageQueueNew+0x8c>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10c      	bne.n	800abb8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d108      	bne.n	800abb8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d104      	bne.n	800abb8 <osMessageQueueNew+0x8c>
          mem = 0;
 800abae:	2300      	movs	r3, #0
 800abb0:	61bb      	str	r3, [r7, #24]
 800abb2:	e001      	b.n	800abb8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800abb4:	2300      	movs	r3, #0
 800abb6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d10b      	bne.n	800abd6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	691a      	ldr	r2, [r3, #16]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	2100      	movs	r1, #0
 800abc8:	9100      	str	r1, [sp, #0]
 800abca:	68b9      	ldr	r1, [r7, #8]
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 f9d3 	bl	800af78 <xQueueGenericCreateStatic>
 800abd2:	61f8      	str	r0, [r7, #28]
 800abd4:	e008      	b.n	800abe8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d105      	bne.n	800abe8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800abdc:	2200      	movs	r2, #0
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 fa46 	bl	800b072 <xQueueGenericCreate>
 800abe6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00c      	beq.n	800ac08 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <osMessageQueueNew+0xd0>
        name = attr->name;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	617b      	str	r3, [r7, #20]
 800abfa:	e001      	b.n	800ac00 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ac00:	6979      	ldr	r1, [r7, #20]
 800ac02:	69f8      	ldr	r0, [r7, #28]
 800ac04:	f000 fe26 	bl	800b854 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ac08:	69fb      	ldr	r3, [r7, #28]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3720      	adds	r7, #32
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
	...

0800ac14 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b088      	sub	sp, #32
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	603b      	str	r3, [r7, #0]
 800ac20:	4613      	mov	r3, r2
 800ac22:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac2c:	f3ef 8305 	mrs	r3, IPSR
 800ac30:	617b      	str	r3, [r7, #20]
  return(result);
 800ac32:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d028      	beq.n	800ac8a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d005      	beq.n	800ac4a <osMessageQueuePut+0x36>
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d002      	beq.n	800ac4a <osMessageQueuePut+0x36>
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ac4a:	f06f 0303 	mvn.w	r3, #3
 800ac4e:	61fb      	str	r3, [r7, #28]
 800ac50:	e038      	b.n	800acc4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ac52:	2300      	movs	r3, #0
 800ac54:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ac56:	f107 0210 	add.w	r2, r7, #16
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	68b9      	ldr	r1, [r7, #8]
 800ac5e:	69b8      	ldr	r0, [r7, #24]
 800ac60:	f000 fb68 	bl	800b334 <xQueueGenericSendFromISR>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d003      	beq.n	800ac72 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ac6a:	f06f 0302 	mvn.w	r3, #2
 800ac6e:	61fb      	str	r3, [r7, #28]
 800ac70:	e028      	b.n	800acc4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d025      	beq.n	800acc4 <osMessageQueuePut+0xb0>
 800ac78:	4b15      	ldr	r3, [pc, #84]	@ (800acd0 <osMessageQueuePut+0xbc>)
 800ac7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	e01c      	b.n	800acc4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <osMessageQueuePut+0x82>
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d103      	bne.n	800ac9e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ac96:	f06f 0303 	mvn.w	r3, #3
 800ac9a:	61fb      	str	r3, [r7, #28]
 800ac9c:	e012      	b.n	800acc4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ac9e:	2300      	movs	r3, #0
 800aca0:	683a      	ldr	r2, [r7, #0]
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	69b8      	ldr	r0, [r7, #24]
 800aca6:	f000 fa43 	bl	800b130 <xQueueGenericSend>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b01      	cmp	r3, #1
 800acae:	d009      	beq.n	800acc4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d003      	beq.n	800acbe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800acb6:	f06f 0301 	mvn.w	r3, #1
 800acba:	61fb      	str	r3, [r7, #28]
 800acbc:	e002      	b.n	800acc4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800acbe:	f06f 0302 	mvn.w	r3, #2
 800acc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800acc4:	69fb      	ldr	r3, [r7, #28]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3720      	adds	r7, #32
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	e000ed04 	.word	0xe000ed04

0800acd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4a07      	ldr	r2, [pc, #28]	@ (800ad00 <vApplicationGetIdleTaskMemory+0x2c>)
 800ace4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	4a06      	ldr	r2, [pc, #24]	@ (800ad04 <vApplicationGetIdleTaskMemory+0x30>)
 800acea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800acf2:	601a      	str	r2, [r3, #0]
}
 800acf4:	bf00      	nop
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr
 800ad00:	20000548 	.word	0x20000548
 800ad04:	200005f0 	.word	0x200005f0

0800ad08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	4a07      	ldr	r2, [pc, #28]	@ (800ad34 <vApplicationGetTimerTaskMemory+0x2c>)
 800ad18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	4a06      	ldr	r2, [pc, #24]	@ (800ad38 <vApplicationGetTimerTaskMemory+0x30>)
 800ad1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 800ad26:	601a      	str	r2, [r3, #0]
}
 800ad28:	bf00      	nop
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	200010e0 	.word	0x200010e0
 800ad38:	20001188 	.word	0x20001188

0800ad3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f103 0208 	add.w	r2, r3, #8
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f04f 32ff 	mov.w	r2, #4294967295
 800ad54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f103 0208 	add.w	r2, r3, #8
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f103 0208 	add.w	r2, r3, #8
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad8a:	bf00      	nop
 800ad8c:	370c      	adds	r7, #12
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad96:	b480      	push	{r7}
 800ad98:	b085      	sub	sp, #20
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	689a      	ldr	r2, [r3, #8]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	1c5a      	adds	r2, r3, #1
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	601a      	str	r2, [r3, #0]
}
 800add2:	bf00      	nop
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adde:	b480      	push	{r7}
 800ade0:	b085      	sub	sp, #20
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf4:	d103      	bne.n	800adfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	60fb      	str	r3, [r7, #12]
 800adfc:	e00c      	b.n	800ae18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	3308      	adds	r3, #8
 800ae02:	60fb      	str	r3, [r7, #12]
 800ae04:	e002      	b.n	800ae0c <vListInsert+0x2e>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d2f6      	bcs.n	800ae06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	1c5a      	adds	r2, r3, #1
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	601a      	str	r2, [r3, #0]
}
 800ae44:	bf00      	nop
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	6892      	ldr	r2, [r2, #8]
 800ae66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	6852      	ldr	r2, [r2, #4]
 800ae70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d103      	bne.n	800ae84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	689a      	ldr	r2, [r3, #8]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	1e5a      	subs	r2, r3, #1
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10b      	bne.n	800aed0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aeca:	bf00      	nop
 800aecc:	bf00      	nop
 800aece:	e7fd      	b.n	800aecc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aed0:	f002 f8e2 	bl	800d098 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aedc:	68f9      	ldr	r1, [r7, #12]
 800aede:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aee0:	fb01 f303 	mul.w	r3, r1, r3
 800aee4:	441a      	add	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af00:	3b01      	subs	r3, #1
 800af02:	68f9      	ldr	r1, [r7, #12]
 800af04:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800af06:	fb01 f303 	mul.w	r3, r1, r3
 800af0a:	441a      	add	r2, r3
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	22ff      	movs	r2, #255	@ 0xff
 800af14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	22ff      	movs	r2, #255	@ 0xff
 800af1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d114      	bne.n	800af50 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d01a      	beq.n	800af64 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	3310      	adds	r3, #16
 800af32:	4618      	mov	r0, r3
 800af34:	f001 f97e 	bl	800c234 <xTaskRemoveFromEventList>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d012      	beq.n	800af64 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af3e:	4b0d      	ldr	r3, [pc, #52]	@ (800af74 <xQueueGenericReset+0xd0>)
 800af40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af44:	601a      	str	r2, [r3, #0]
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	e009      	b.n	800af64 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	3310      	adds	r3, #16
 800af54:	4618      	mov	r0, r3
 800af56:	f7ff fef1 	bl	800ad3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3324      	adds	r3, #36	@ 0x24
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff feec 	bl	800ad3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af64:	f002 f8ca 	bl	800d0fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af68:	2301      	movs	r3, #1
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	e000ed04 	.word	0xe000ed04

0800af78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b08e      	sub	sp, #56	@ 0x38
 800af7c:	af02      	add	r7, sp, #8
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10b      	bne.n	800afa4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af9e:	bf00      	nop
 800afa0:	bf00      	nop
 800afa2:	e7fd      	b.n	800afa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10b      	bne.n	800afc2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afbc:	bf00      	nop
 800afbe:	bf00      	nop
 800afc0:	e7fd      	b.n	800afbe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <xQueueGenericCreateStatic+0x56>
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <xQueueGenericCreateStatic+0x5a>
 800afce:	2301      	movs	r3, #1
 800afd0:	e000      	b.n	800afd4 <xQueueGenericCreateStatic+0x5c>
 800afd2:	2300      	movs	r3, #0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10b      	bne.n	800aff0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800afd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afdc:	f383 8811 	msr	BASEPRI, r3
 800afe0:	f3bf 8f6f 	isb	sy
 800afe4:	f3bf 8f4f 	dsb	sy
 800afe8:	623b      	str	r3, [r7, #32]
}
 800afea:	bf00      	nop
 800afec:	bf00      	nop
 800afee:	e7fd      	b.n	800afec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d102      	bne.n	800affc <xQueueGenericCreateStatic+0x84>
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <xQueueGenericCreateStatic+0x88>
 800affc:	2301      	movs	r3, #1
 800affe:	e000      	b.n	800b002 <xQueueGenericCreateStatic+0x8a>
 800b000:	2300      	movs	r3, #0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10b      	bne.n	800b01e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b00a:	f383 8811 	msr	BASEPRI, r3
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	61fb      	str	r3, [r7, #28]
}
 800b018:	bf00      	nop
 800b01a:	bf00      	nop
 800b01c:	e7fd      	b.n	800b01a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b01e:	2350      	movs	r3, #80	@ 0x50
 800b020:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b50      	cmp	r3, #80	@ 0x50
 800b026:	d00b      	beq.n	800b040 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	61bb      	str	r3, [r7, #24]
}
 800b03a:	bf00      	nop
 800b03c:	bf00      	nop
 800b03e:	e7fd      	b.n	800b03c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b040:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00d      	beq.n	800b068 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b054:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	4613      	mov	r3, r2
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f000 f840 	bl	800b0e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3730      	adds	r7, #48	@ 0x30
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b072:	b580      	push	{r7, lr}
 800b074:	b08a      	sub	sp, #40	@ 0x28
 800b076:	af02      	add	r7, sp, #8
 800b078:	60f8      	str	r0, [r7, #12]
 800b07a:	60b9      	str	r1, [r7, #8]
 800b07c:	4613      	mov	r3, r2
 800b07e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10b      	bne.n	800b09e <xQueueGenericCreate+0x2c>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	613b      	str	r3, [r7, #16]
}
 800b098:	bf00      	nop
 800b09a:	bf00      	nop
 800b09c:	e7fd      	b.n	800b09a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	fb02 f303 	mul.w	r3, r2, r3
 800b0a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	3350      	adds	r3, #80	@ 0x50
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f002 f915 	bl	800d2dc <pvPortMalloc>
 800b0b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d011      	beq.n	800b0de <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	3350      	adds	r3, #80	@ 0x50
 800b0c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0cc:	79fa      	ldrb	r2, [r7, #7]
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	68b9      	ldr	r1, [r7, #8]
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f000 f805 	bl	800b0e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0de:	69bb      	ldr	r3, [r7, #24]
	}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3720      	adds	r7, #32
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
 800b0f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d103      	bne.n	800b104 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	69ba      	ldr	r2, [r7, #24]
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	e002      	b.n	800b10a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b116:	2101      	movs	r1, #1
 800b118:	69b8      	ldr	r0, [r7, #24]
 800b11a:	f7ff fec3 	bl	800aea4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	78fa      	ldrb	r2, [r7, #3]
 800b122:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b126:	bf00      	nop
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
	...

0800b130 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08e      	sub	sp, #56	@ 0x38
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
 800b13c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b13e:	2300      	movs	r3, #0
 800b140:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d10b      	bne.n	800b164 <xQueueGenericSend+0x34>
	__asm volatile
 800b14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b15e:	bf00      	nop
 800b160:	bf00      	nop
 800b162:	e7fd      	b.n	800b160 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d103      	bne.n	800b172 <xQueueGenericSend+0x42>
 800b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d101      	bne.n	800b176 <xQueueGenericSend+0x46>
 800b172:	2301      	movs	r3, #1
 800b174:	e000      	b.n	800b178 <xQueueGenericSend+0x48>
 800b176:	2300      	movs	r3, #0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10b      	bne.n	800b194 <xQueueGenericSend+0x64>
	__asm volatile
 800b17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b180:	f383 8811 	msr	BASEPRI, r3
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b18e:	bf00      	nop
 800b190:	bf00      	nop
 800b192:	e7fd      	b.n	800b190 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d103      	bne.n	800b1a2 <xQueueGenericSend+0x72>
 800b19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d101      	bne.n	800b1a6 <xQueueGenericSend+0x76>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e000      	b.n	800b1a8 <xQueueGenericSend+0x78>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10b      	bne.n	800b1c4 <xQueueGenericSend+0x94>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	623b      	str	r3, [r7, #32]
}
 800b1be:	bf00      	nop
 800b1c0:	bf00      	nop
 800b1c2:	e7fd      	b.n	800b1c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1c4:	f001 f9fc 	bl	800c5c0 <xTaskGetSchedulerState>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d102      	bne.n	800b1d4 <xQueueGenericSend+0xa4>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <xQueueGenericSend+0xa8>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e000      	b.n	800b1da <xQueueGenericSend+0xaa>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10b      	bne.n	800b1f6 <xQueueGenericSend+0xc6>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	61fb      	str	r3, [r7, #28]
}
 800b1f0:	bf00      	nop
 800b1f2:	bf00      	nop
 800b1f4:	e7fd      	b.n	800b1f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1f6:	f001 ff4f 	bl	800d098 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b202:	429a      	cmp	r2, r3
 800b204:	d302      	bcc.n	800b20c <xQueueGenericSend+0xdc>
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d129      	bne.n	800b260 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	68b9      	ldr	r1, [r7, #8]
 800b210:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b212:	f000 fa0f 	bl	800b634 <prvCopyDataToQueue>
 800b216:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d010      	beq.n	800b242 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b222:	3324      	adds	r3, #36	@ 0x24
 800b224:	4618      	mov	r0, r3
 800b226:	f001 f805 	bl	800c234 <xTaskRemoveFromEventList>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d013      	beq.n	800b258 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b230:	4b3f      	ldr	r3, [pc, #252]	@ (800b330 <xQueueGenericSend+0x200>)
 800b232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	e00a      	b.n	800b258 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b244:	2b00      	cmp	r3, #0
 800b246:	d007      	beq.n	800b258 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b248:	4b39      	ldr	r3, [pc, #228]	@ (800b330 <xQueueGenericSend+0x200>)
 800b24a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b258:	f001 ff50 	bl	800d0fc <vPortExitCritical>
				return pdPASS;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e063      	b.n	800b328 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d103      	bne.n	800b26e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b266:	f001 ff49 	bl	800d0fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	e05c      	b.n	800b328 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b270:	2b00      	cmp	r3, #0
 800b272:	d106      	bne.n	800b282 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b274:	f107 0314 	add.w	r3, r7, #20
 800b278:	4618      	mov	r0, r3
 800b27a:	f001 f83f 	bl	800c2fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b27e:	2301      	movs	r3, #1
 800b280:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b282:	f001 ff3b 	bl	800d0fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b286:	f000 fda7 	bl	800bdd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b28a:	f001 ff05 	bl	800d098 <vPortEnterCritical>
 800b28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b290:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b294:	b25b      	sxtb	r3, r3
 800b296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29a:	d103      	bne.n	800b2a4 <xQueueGenericSend+0x174>
 800b29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2aa:	b25b      	sxtb	r3, r3
 800b2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b0:	d103      	bne.n	800b2ba <xQueueGenericSend+0x18a>
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2ba:	f001 ff1f 	bl	800d0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2be:	1d3a      	adds	r2, r7, #4
 800b2c0:	f107 0314 	add.w	r3, r7, #20
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f001 f82e 	bl	800c328 <xTaskCheckForTimeOut>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d124      	bne.n	800b31c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b2d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2d4:	f000 faa6 	bl	800b824 <prvIsQueueFull>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d018      	beq.n	800b310 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e0:	3310      	adds	r3, #16
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 ff52 	bl	800c190 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b2ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2ee:	f000 fa31 	bl	800b754 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b2f2:	f000 fd7f 	bl	800bdf4 <xTaskResumeAll>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f47f af7c 	bne.w	800b1f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b2fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b330 <xQueueGenericSend+0x200>)
 800b300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	e772      	b.n	800b1f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b312:	f000 fa1f 	bl	800b754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b316:	f000 fd6d 	bl	800bdf4 <xTaskResumeAll>
 800b31a:	e76c      	b.n	800b1f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b31c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b31e:	f000 fa19 	bl	800b754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b322:	f000 fd67 	bl	800bdf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b326:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3738      	adds	r7, #56	@ 0x38
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	e000ed04 	.word	0xe000ed04

0800b334 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b090      	sub	sp, #64	@ 0x40
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
 800b340:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10b      	bne.n	800b364 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b35e:	bf00      	nop
 800b360:	bf00      	nop
 800b362:	e7fd      	b.n	800b360 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d103      	bne.n	800b372 <xQueueGenericSendFromISR+0x3e>
 800b36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <xQueueGenericSendFromISR+0x42>
 800b372:	2301      	movs	r3, #1
 800b374:	e000      	b.n	800b378 <xQueueGenericSendFromISR+0x44>
 800b376:	2300      	movs	r3, #0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10b      	bne.n	800b394 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b38e:	bf00      	nop
 800b390:	bf00      	nop
 800b392:	e7fd      	b.n	800b390 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	2b02      	cmp	r3, #2
 800b398:	d103      	bne.n	800b3a2 <xQueueGenericSendFromISR+0x6e>
 800b39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d101      	bne.n	800b3a6 <xQueueGenericSendFromISR+0x72>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e000      	b.n	800b3a8 <xQueueGenericSendFromISR+0x74>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d10b      	bne.n	800b3c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	623b      	str	r3, [r7, #32]
}
 800b3be:	bf00      	nop
 800b3c0:	bf00      	nop
 800b3c2:	e7fd      	b.n	800b3c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3c4:	f001 ff48 	bl	800d258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b3c8:	f3ef 8211 	mrs	r2, BASEPRI
 800b3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	61fa      	str	r2, [r7, #28]
 800b3de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b3e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d302      	bcc.n	800b3f6 <xQueueGenericSendFromISR+0xc2>
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d12f      	bne.n	800b456 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b404:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	68b9      	ldr	r1, [r7, #8]
 800b40a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b40c:	f000 f912 	bl	800b634 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b410:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b418:	d112      	bne.n	800b440 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d016      	beq.n	800b450 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b424:	3324      	adds	r3, #36	@ 0x24
 800b426:	4618      	mov	r0, r3
 800b428:	f000 ff04 	bl	800c234 <xTaskRemoveFromEventList>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00e      	beq.n	800b450 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00b      	beq.n	800b450 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	e007      	b.n	800b450 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b440:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b444:	3301      	adds	r3, #1
 800b446:	b2db      	uxtb	r3, r3
 800b448:	b25a      	sxtb	r2, r3
 800b44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b450:	2301      	movs	r3, #1
 800b452:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b454:	e001      	b.n	800b45a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b456:	2300      	movs	r3, #0
 800b458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b45c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b464:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3740      	adds	r7, #64	@ 0x40
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08c      	sub	sp, #48	@ 0x30
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b47c:	2300      	movs	r3, #0
 800b47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10b      	bne.n	800b4a2 <xQueueReceive+0x32>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	623b      	str	r3, [r7, #32]
}
 800b49c:	bf00      	nop
 800b49e:	bf00      	nop
 800b4a0:	e7fd      	b.n	800b49e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d103      	bne.n	800b4b0 <xQueueReceive+0x40>
 800b4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <xQueueReceive+0x44>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e000      	b.n	800b4b6 <xQueueReceive+0x46>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d10b      	bne.n	800b4d2 <xQueueReceive+0x62>
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	61fb      	str	r3, [r7, #28]
}
 800b4cc:	bf00      	nop
 800b4ce:	bf00      	nop
 800b4d0:	e7fd      	b.n	800b4ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4d2:	f001 f875 	bl	800c5c0 <xTaskGetSchedulerState>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d102      	bne.n	800b4e2 <xQueueReceive+0x72>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <xQueueReceive+0x76>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e000      	b.n	800b4e8 <xQueueReceive+0x78>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10b      	bne.n	800b504 <xQueueReceive+0x94>
	__asm volatile
 800b4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	61bb      	str	r3, [r7, #24]
}
 800b4fe:	bf00      	nop
 800b500:	bf00      	nop
 800b502:	e7fd      	b.n	800b500 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b504:	f001 fdc8 	bl	800d098 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b50c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b510:	2b00      	cmp	r3, #0
 800b512:	d01f      	beq.n	800b554 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b514:	68b9      	ldr	r1, [r7, #8]
 800b516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b518:	f000 f8f6 	bl	800b708 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51e:	1e5a      	subs	r2, r3, #1
 800b520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b522:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00f      	beq.n	800b54c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b52e:	3310      	adds	r3, #16
 800b530:	4618      	mov	r0, r3
 800b532:	f000 fe7f 	bl	800c234 <xTaskRemoveFromEventList>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d007      	beq.n	800b54c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b53c:	4b3c      	ldr	r3, [pc, #240]	@ (800b630 <xQueueReceive+0x1c0>)
 800b53e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b542:	601a      	str	r2, [r3, #0]
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b54c:	f001 fdd6 	bl	800d0fc <vPortExitCritical>
				return pdPASS;
 800b550:	2301      	movs	r3, #1
 800b552:	e069      	b.n	800b628 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d103      	bne.n	800b562 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b55a:	f001 fdcf 	bl	800d0fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b55e:	2300      	movs	r3, #0
 800b560:	e062      	b.n	800b628 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b564:	2b00      	cmp	r3, #0
 800b566:	d106      	bne.n	800b576 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b568:	f107 0310 	add.w	r3, r7, #16
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 fec5 	bl	800c2fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b572:	2301      	movs	r3, #1
 800b574:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b576:	f001 fdc1 	bl	800d0fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b57a:	f000 fc2d 	bl	800bdd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b57e:	f001 fd8b 	bl	800d098 <vPortEnterCritical>
 800b582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b584:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b588:	b25b      	sxtb	r3, r3
 800b58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58e:	d103      	bne.n	800b598 <xQueueReceive+0x128>
 800b590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b592:	2200      	movs	r2, #0
 800b594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b59a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b59e:	b25b      	sxtb	r3, r3
 800b5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a4:	d103      	bne.n	800b5ae <xQueueReceive+0x13e>
 800b5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b5ae:	f001 fda5 	bl	800d0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5b2:	1d3a      	adds	r2, r7, #4
 800b5b4:	f107 0310 	add.w	r3, r7, #16
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 feb4 	bl	800c328 <xTaskCheckForTimeOut>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d123      	bne.n	800b60e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5c8:	f000 f916 	bl	800b7f8 <prvIsQueueEmpty>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d017      	beq.n	800b602 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d4:	3324      	adds	r3, #36	@ 0x24
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	4611      	mov	r1, r2
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 fdd8 	bl	800c190 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5e2:	f000 f8b7 	bl	800b754 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5e6:	f000 fc05 	bl	800bdf4 <xTaskResumeAll>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d189      	bne.n	800b504 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b5f0:	4b0f      	ldr	r3, [pc, #60]	@ (800b630 <xQueueReceive+0x1c0>)
 800b5f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5f6:	601a      	str	r2, [r3, #0]
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	e780      	b.n	800b504 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b604:	f000 f8a6 	bl	800b754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b608:	f000 fbf4 	bl	800bdf4 <xTaskResumeAll>
 800b60c:	e77a      	b.n	800b504 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b60e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b610:	f000 f8a0 	bl	800b754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b614:	f000 fbee 	bl	800bdf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b618:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b61a:	f000 f8ed 	bl	800b7f8 <prvIsQueueEmpty>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	f43f af6f 	beq.w	800b504 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b626:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3730      	adds	r7, #48	@ 0x30
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b640:	2300      	movs	r3, #0
 800b642:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b648:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10d      	bne.n	800b66e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d14d      	bne.n	800b6f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	4618      	mov	r0, r3
 800b660:	f000 ffcc 	bl	800c5fc <xTaskPriorityDisinherit>
 800b664:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	609a      	str	r2, [r3, #8]
 800b66c:	e043      	b.n	800b6f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d119      	bne.n	800b6a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6858      	ldr	r0, [r3, #4]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b67c:	461a      	mov	r2, r3
 800b67e:	68b9      	ldr	r1, [r7, #8]
 800b680:	f003 fb7d 	bl	800ed7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b68c:	441a      	add	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d32b      	bcc.n	800b6f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	605a      	str	r2, [r3, #4]
 800b6a6:	e026      	b.n	800b6f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	68d8      	ldr	r0, [r3, #12]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	68b9      	ldr	r1, [r7, #8]
 800b6b4:	f003 fb63 	bl	800ed7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	68da      	ldr	r2, [r3, #12]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6c0:	425b      	negs	r3, r3
 800b6c2:	441a      	add	r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	68da      	ldr	r2, [r3, #12]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d207      	bcs.n	800b6e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	689a      	ldr	r2, [r3, #8]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6dc:	425b      	negs	r3, r3
 800b6de:	441a      	add	r2, r3
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d105      	bne.n	800b6f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	1c5a      	adds	r2, r3, #1
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b6fe:	697b      	ldr	r3, [r7, #20]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b716:	2b00      	cmp	r3, #0
 800b718:	d018      	beq.n	800b74c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	68da      	ldr	r2, [r3, #12]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b722:	441a      	add	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68da      	ldr	r2, [r3, #12]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	429a      	cmp	r2, r3
 800b732:	d303      	bcc.n	800b73c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68d9      	ldr	r1, [r3, #12]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b744:	461a      	mov	r2, r3
 800b746:	6838      	ldr	r0, [r7, #0]
 800b748:	f003 fb19 	bl	800ed7e <memcpy>
	}
}
 800b74c:	bf00      	nop
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b75c:	f001 fc9c 	bl	800d098 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b766:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b768:	e011      	b.n	800b78e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d012      	beq.n	800b798 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	3324      	adds	r3, #36	@ 0x24
 800b776:	4618      	mov	r0, r3
 800b778:	f000 fd5c 	bl	800c234 <xTaskRemoveFromEventList>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d001      	beq.n	800b786 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b782:	f000 fe35 	bl	800c3f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	3b01      	subs	r3, #1
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b78e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b792:	2b00      	cmp	r3, #0
 800b794:	dce9      	bgt.n	800b76a <prvUnlockQueue+0x16>
 800b796:	e000      	b.n	800b79a <prvUnlockQueue+0x46>
					break;
 800b798:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	22ff      	movs	r2, #255	@ 0xff
 800b79e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b7a2:	f001 fcab 	bl	800d0fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b7a6:	f001 fc77 	bl	800d098 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7b2:	e011      	b.n	800b7d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d012      	beq.n	800b7e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3310      	adds	r3, #16
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f000 fd37 	bl	800c234 <xTaskRemoveFromEventList>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b7cc:	f000 fe10 	bl	800c3f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b7d0:	7bbb      	ldrb	r3, [r7, #14]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	dce9      	bgt.n	800b7b4 <prvUnlockQueue+0x60>
 800b7e0:	e000      	b.n	800b7e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	22ff      	movs	r2, #255	@ 0xff
 800b7e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b7ec:	f001 fc86 	bl	800d0fc <vPortExitCritical>
}
 800b7f0:	bf00      	nop
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b800:	f001 fc4a 	bl	800d098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d102      	bne.n	800b812 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b80c:	2301      	movs	r3, #1
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	e001      	b.n	800b816 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b812:	2300      	movs	r3, #0
 800b814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b816:	f001 fc71 	bl	800d0fc <vPortExitCritical>

	return xReturn;
 800b81a:	68fb      	ldr	r3, [r7, #12]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b82c:	f001 fc34 	bl	800d098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b838:	429a      	cmp	r2, r3
 800b83a:	d102      	bne.n	800b842 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b83c:	2301      	movs	r3, #1
 800b83e:	60fb      	str	r3, [r7, #12]
 800b840:	e001      	b.n	800b846 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b842:	2300      	movs	r3, #0
 800b844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b846:	f001 fc59 	bl	800d0fc <vPortExitCritical>

	return xReturn;
 800b84a:	68fb      	ldr	r3, [r7, #12]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b85e:	2300      	movs	r3, #0
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	e014      	b.n	800b88e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b864:	4a0f      	ldr	r2, [pc, #60]	@ (800b8a4 <vQueueAddToRegistry+0x50>)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10b      	bne.n	800b888 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b870:	490c      	ldr	r1, [pc, #48]	@ (800b8a4 <vQueueAddToRegistry+0x50>)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	683a      	ldr	r2, [r7, #0]
 800b876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b87a:	4a0a      	ldr	r2, [pc, #40]	@ (800b8a4 <vQueueAddToRegistry+0x50>)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	00db      	lsls	r3, r3, #3
 800b880:	4413      	add	r3, r2
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b886:	e006      	b.n	800b896 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3301      	adds	r3, #1
 800b88c:	60fb      	str	r3, [r7, #12]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b07      	cmp	r3, #7
 800b892:	d9e7      	bls.n	800b864 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b894:	bf00      	nop
 800b896:	bf00      	nop
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	20002768 	.word	0x20002768

0800b8a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b8b8:	f001 fbee 	bl	800d098 <vPortEnterCritical>
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8c2:	b25b      	sxtb	r3, r3
 800b8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c8:	d103      	bne.n	800b8d2 <vQueueWaitForMessageRestricted+0x2a>
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8d8:	b25b      	sxtb	r3, r3
 800b8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8de:	d103      	bne.n	800b8e8 <vQueueWaitForMessageRestricted+0x40>
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8e8:	f001 fc08 	bl	800d0fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d106      	bne.n	800b902 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	3324      	adds	r3, #36	@ 0x24
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	68b9      	ldr	r1, [r7, #8]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 fc6d 	bl	800c1dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b902:	6978      	ldr	r0, [r7, #20]
 800b904:	f7ff ff26 	bl	800b754 <prvUnlockQueue>
	}
 800b908:	bf00      	nop
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b910:	b580      	push	{r7, lr}
 800b912:	b08e      	sub	sp, #56	@ 0x38
 800b914:	af04      	add	r7, sp, #16
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
 800b91c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b91e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b920:	2b00      	cmp	r3, #0
 800b922:	d10b      	bne.n	800b93c <xTaskCreateStatic+0x2c>
	__asm volatile
 800b924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b928:	f383 8811 	msr	BASEPRI, r3
 800b92c:	f3bf 8f6f 	isb	sy
 800b930:	f3bf 8f4f 	dsb	sy
 800b934:	623b      	str	r3, [r7, #32]
}
 800b936:	bf00      	nop
 800b938:	bf00      	nop
 800b93a:	e7fd      	b.n	800b938 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d10b      	bne.n	800b95a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b946:	f383 8811 	msr	BASEPRI, r3
 800b94a:	f3bf 8f6f 	isb	sy
 800b94e:	f3bf 8f4f 	dsb	sy
 800b952:	61fb      	str	r3, [r7, #28]
}
 800b954:	bf00      	nop
 800b956:	bf00      	nop
 800b958:	e7fd      	b.n	800b956 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b95a:	23a8      	movs	r3, #168	@ 0xa8
 800b95c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	2ba8      	cmp	r3, #168	@ 0xa8
 800b962:	d00b      	beq.n	800b97c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	61bb      	str	r3, [r7, #24]
}
 800b976:	bf00      	nop
 800b978:	bf00      	nop
 800b97a:	e7fd      	b.n	800b978 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b97c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b980:	2b00      	cmp	r3, #0
 800b982:	d01e      	beq.n	800b9c2 <xTaskCreateStatic+0xb2>
 800b984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b986:	2b00      	cmp	r3, #0
 800b988:	d01b      	beq.n	800b9c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b992:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b996:	2202      	movs	r2, #2
 800b998:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b99c:	2300      	movs	r3, #0
 800b99e:	9303      	str	r3, [sp, #12]
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a2:	9302      	str	r3, [sp, #8]
 800b9a4:	f107 0314 	add.w	r3, r7, #20
 800b9a8:	9301      	str	r3, [sp, #4]
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	68b9      	ldr	r1, [r7, #8]
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 f851 	bl	800ba5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b9bc:	f000 f8f6 	bl	800bbac <prvAddNewTaskToReadyList>
 800b9c0:	e001      	b.n	800b9c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b9c6:	697b      	ldr	r3, [r7, #20]
	}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3728      	adds	r7, #40	@ 0x28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b08c      	sub	sp, #48	@ 0x30
 800b9d4:	af04      	add	r7, sp, #16
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	603b      	str	r3, [r7, #0]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9e0:	88fb      	ldrh	r3, [r7, #6]
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f001 fc79 	bl	800d2dc <pvPortMalloc>
 800b9ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00e      	beq.n	800ba10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b9f2:	20a8      	movs	r0, #168	@ 0xa8
 800b9f4:	f001 fc72 	bl	800d2dc <pvPortMalloc>
 800b9f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d003      	beq.n	800ba08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	697a      	ldr	r2, [r7, #20]
 800ba04:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba06:	e005      	b.n	800ba14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ba08:	6978      	ldr	r0, [r7, #20]
 800ba0a:	f001 fd35 	bl	800d478 <vPortFree>
 800ba0e:	e001      	b.n	800ba14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ba10:	2300      	movs	r3, #0
 800ba12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d017      	beq.n	800ba4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba22:	88fa      	ldrh	r2, [r7, #6]
 800ba24:	2300      	movs	r3, #0
 800ba26:	9303      	str	r3, [sp, #12]
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	9302      	str	r3, [sp, #8]
 800ba2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	68b9      	ldr	r1, [r7, #8]
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f000 f80f 	bl	800ba5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba3e:	69f8      	ldr	r0, [r7, #28]
 800ba40:	f000 f8b4 	bl	800bbac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba44:	2301      	movs	r3, #1
 800ba46:	61bb      	str	r3, [r7, #24]
 800ba48:	e002      	b.n	800ba50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba50:	69bb      	ldr	r3, [r7, #24]
	}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3720      	adds	r7, #32
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
	...

0800ba5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b088      	sub	sp, #32
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	607a      	str	r2, [r7, #4]
 800ba68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	461a      	mov	r2, r3
 800ba74:	21a5      	movs	r1, #165	@ 0xa5
 800ba76:	f003 f8a5 	bl	800ebc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba84:	3b01      	subs	r3, #1
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	f023 0307 	bic.w	r3, r3, #7
 800ba92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	f003 0307 	and.w	r3, r3, #7
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00b      	beq.n	800bab6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	617b      	str	r3, [r7, #20]
}
 800bab0:	bf00      	nop
 800bab2:	bf00      	nop
 800bab4:	e7fd      	b.n	800bab2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d01f      	beq.n	800bafc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800babc:	2300      	movs	r3, #0
 800babe:	61fb      	str	r3, [r7, #28]
 800bac0:	e012      	b.n	800bae8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	4413      	add	r3, r2
 800bac8:	7819      	ldrb	r1, [r3, #0]
 800baca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	4413      	add	r3, r2
 800bad0:	3334      	adds	r3, #52	@ 0x34
 800bad2:	460a      	mov	r2, r1
 800bad4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	4413      	add	r3, r2
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d006      	beq.n	800baf0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	3301      	adds	r3, #1
 800bae6:	61fb      	str	r3, [r7, #28]
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	2b0f      	cmp	r3, #15
 800baec:	d9e9      	bls.n	800bac2 <prvInitialiseNewTask+0x66>
 800baee:	e000      	b.n	800baf2 <prvInitialiseNewTask+0x96>
			{
				break;
 800baf0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800baf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf4:	2200      	movs	r2, #0
 800baf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bafa:	e003      	b.n	800bb04 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb06:	2b37      	cmp	r3, #55	@ 0x37
 800bb08:	d901      	bls.n	800bb0e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bb0a:	2337      	movs	r3, #55	@ 0x37
 800bb0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb22:	3304      	adds	r3, #4
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7ff f929 	bl	800ad7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2c:	3318      	adds	r3, #24
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff f924 	bl	800ad7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5c:	3354      	adds	r3, #84	@ 0x54
 800bb5e:	224c      	movs	r2, #76	@ 0x4c
 800bb60:	2100      	movs	r1, #0
 800bb62:	4618      	mov	r0, r3
 800bb64:	f003 f82e 	bl	800ebc4 <memset>
 800bb68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6a:	4a0d      	ldr	r2, [pc, #52]	@ (800bba0 <prvInitialiseNewTask+0x144>)
 800bb6c:	659a      	str	r2, [r3, #88]	@ 0x58
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb70:	4a0c      	ldr	r2, [pc, #48]	@ (800bba4 <prvInitialiseNewTask+0x148>)
 800bb72:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb76:	4a0c      	ldr	r2, [pc, #48]	@ (800bba8 <prvInitialiseNewTask+0x14c>)
 800bb78:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	68f9      	ldr	r1, [r7, #12]
 800bb7e:	69b8      	ldr	r0, [r7, #24]
 800bb80:	f001 f95a 	bl	800ce38 <pxPortInitialiseStack>
 800bb84:	4602      	mov	r2, r0
 800bb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb96:	bf00      	nop
 800bb98:	3720      	adds	r7, #32
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	2000a588 	.word	0x2000a588
 800bba4:	2000a5f0 	.word	0x2000a5f0
 800bba8:	2000a658 	.word	0x2000a658

0800bbac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bbb4:	f001 fa70 	bl	800d098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bbb8:	4b2d      	ldr	r3, [pc, #180]	@ (800bc70 <prvAddNewTaskToReadyList+0xc4>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	4a2c      	ldr	r2, [pc, #176]	@ (800bc70 <prvAddNewTaskToReadyList+0xc4>)
 800bbc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bbc2:	4b2c      	ldr	r3, [pc, #176]	@ (800bc74 <prvAddNewTaskToReadyList+0xc8>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d109      	bne.n	800bbde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bbca:	4a2a      	ldr	r2, [pc, #168]	@ (800bc74 <prvAddNewTaskToReadyList+0xc8>)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bbd0:	4b27      	ldr	r3, [pc, #156]	@ (800bc70 <prvAddNewTaskToReadyList+0xc4>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d110      	bne.n	800bbfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bbd8:	f000 fc2e 	bl	800c438 <prvInitialiseTaskLists>
 800bbdc:	e00d      	b.n	800bbfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bbde:	4b26      	ldr	r3, [pc, #152]	@ (800bc78 <prvAddNewTaskToReadyList+0xcc>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d109      	bne.n	800bbfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bbe6:	4b23      	ldr	r3, [pc, #140]	@ (800bc74 <prvAddNewTaskToReadyList+0xc8>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d802      	bhi.n	800bbfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bbf4:	4a1f      	ldr	r2, [pc, #124]	@ (800bc74 <prvAddNewTaskToReadyList+0xc8>)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bbfa:	4b20      	ldr	r3, [pc, #128]	@ (800bc7c <prvAddNewTaskToReadyList+0xd0>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	4a1e      	ldr	r2, [pc, #120]	@ (800bc7c <prvAddNewTaskToReadyList+0xd0>)
 800bc02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bc04:	4b1d      	ldr	r3, [pc, #116]	@ (800bc7c <prvAddNewTaskToReadyList+0xd0>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc10:	4b1b      	ldr	r3, [pc, #108]	@ (800bc80 <prvAddNewTaskToReadyList+0xd4>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d903      	bls.n	800bc20 <prvAddNewTaskToReadyList+0x74>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc1c:	4a18      	ldr	r2, [pc, #96]	@ (800bc80 <prvAddNewTaskToReadyList+0xd4>)
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc24:	4613      	mov	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4a15      	ldr	r2, [pc, #84]	@ (800bc84 <prvAddNewTaskToReadyList+0xd8>)
 800bc2e:	441a      	add	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	f7ff f8ad 	bl	800ad96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bc3c:	f001 fa5e 	bl	800d0fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc40:	4b0d      	ldr	r3, [pc, #52]	@ (800bc78 <prvAddNewTaskToReadyList+0xcc>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00e      	beq.n	800bc66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc48:	4b0a      	ldr	r3, [pc, #40]	@ (800bc74 <prvAddNewTaskToReadyList+0xc8>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d207      	bcs.n	800bc66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc56:	4b0c      	ldr	r3, [pc, #48]	@ (800bc88 <prvAddNewTaskToReadyList+0xdc>)
 800bc58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc5c:	601a      	str	r2, [r3, #0]
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc66:	bf00      	nop
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20002c7c 	.word	0x20002c7c
 800bc74:	200027a8 	.word	0x200027a8
 800bc78:	20002c88 	.word	0x20002c88
 800bc7c:	20002c98 	.word	0x20002c98
 800bc80:	20002c84 	.word	0x20002c84
 800bc84:	200027ac 	.word	0x200027ac
 800bc88:	e000ed04 	.word	0xe000ed04

0800bc8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc94:	2300      	movs	r3, #0
 800bc96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d018      	beq.n	800bcd0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc9e:	4b14      	ldr	r3, [pc, #80]	@ (800bcf0 <vTaskDelay+0x64>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00b      	beq.n	800bcbe <vTaskDelay+0x32>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	60bb      	str	r3, [r7, #8]
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	e7fd      	b.n	800bcba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bcbe:	f000 f88b 	bl	800bdd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 fd09 	bl	800c6dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bcca:	f000 f893 	bl	800bdf4 <xTaskResumeAll>
 800bcce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d107      	bne.n	800bce6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bcd6:	4b07      	ldr	r3, [pc, #28]	@ (800bcf4 <vTaskDelay+0x68>)
 800bcd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bce6:	bf00      	nop
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20002ca4 	.word	0x20002ca4
 800bcf4:	e000ed04 	.word	0xe000ed04

0800bcf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08a      	sub	sp, #40	@ 0x28
 800bcfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd02:	2300      	movs	r3, #0
 800bd04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd06:	463a      	mov	r2, r7
 800bd08:	1d39      	adds	r1, r7, #4
 800bd0a:	f107 0308 	add.w	r3, r7, #8
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe ffe0 	bl	800acd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	9202      	str	r2, [sp, #8]
 800bd1c:	9301      	str	r3, [sp, #4]
 800bd1e:	2300      	movs	r3, #0
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	2300      	movs	r3, #0
 800bd24:	460a      	mov	r2, r1
 800bd26:	4924      	ldr	r1, [pc, #144]	@ (800bdb8 <vTaskStartScheduler+0xc0>)
 800bd28:	4824      	ldr	r0, [pc, #144]	@ (800bdbc <vTaskStartScheduler+0xc4>)
 800bd2a:	f7ff fdf1 	bl	800b910 <xTaskCreateStatic>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	4a23      	ldr	r2, [pc, #140]	@ (800bdc0 <vTaskStartScheduler+0xc8>)
 800bd32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd34:	4b22      	ldr	r3, [pc, #136]	@ (800bdc0 <vTaskStartScheduler+0xc8>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d002      	beq.n	800bd42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	617b      	str	r3, [r7, #20]
 800bd40:	e001      	b.n	800bd46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d102      	bne.n	800bd52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bd4c:	f000 fd1a 	bl	800c784 <xTimerCreateTimerTask>
 800bd50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d11b      	bne.n	800bd90 <vTaskStartScheduler+0x98>
	__asm volatile
 800bd58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	613b      	str	r3, [r7, #16]
}
 800bd6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd6c:	4b15      	ldr	r3, [pc, #84]	@ (800bdc4 <vTaskStartScheduler+0xcc>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	3354      	adds	r3, #84	@ 0x54
 800bd72:	4a15      	ldr	r2, [pc, #84]	@ (800bdc8 <vTaskStartScheduler+0xd0>)
 800bd74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd76:	4b15      	ldr	r3, [pc, #84]	@ (800bdcc <vTaskStartScheduler+0xd4>)
 800bd78:	f04f 32ff 	mov.w	r2, #4294967295
 800bd7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd7e:	4b14      	ldr	r3, [pc, #80]	@ (800bdd0 <vTaskStartScheduler+0xd8>)
 800bd80:	2201      	movs	r2, #1
 800bd82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd84:	4b13      	ldr	r3, [pc, #76]	@ (800bdd4 <vTaskStartScheduler+0xdc>)
 800bd86:	2200      	movs	r2, #0
 800bd88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd8a:	f001 f8e1 	bl	800cf50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd8e:	e00f      	b.n	800bdb0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd96:	d10b      	bne.n	800bdb0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	60fb      	str	r3, [r7, #12]
}
 800bdaa:	bf00      	nop
 800bdac:	bf00      	nop
 800bdae:	e7fd      	b.n	800bdac <vTaskStartScheduler+0xb4>
}
 800bdb0:	bf00      	nop
 800bdb2:	3718      	adds	r7, #24
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	08011064 	.word	0x08011064
 800bdbc:	0800c409 	.word	0x0800c409
 800bdc0:	20002ca0 	.word	0x20002ca0
 800bdc4:	200027a8 	.word	0x200027a8
 800bdc8:	20000194 	.word	0x20000194
 800bdcc:	20002c9c 	.word	0x20002c9c
 800bdd0:	20002c88 	.word	0x20002c88
 800bdd4:	20002c80 	.word	0x20002c80

0800bdd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bdd8:	b480      	push	{r7}
 800bdda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bddc:	4b04      	ldr	r3, [pc, #16]	@ (800bdf0 <vTaskSuspendAll+0x18>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	3301      	adds	r3, #1
 800bde2:	4a03      	ldr	r2, [pc, #12]	@ (800bdf0 <vTaskSuspendAll+0x18>)
 800bde4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bde6:	bf00      	nop
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr
 800bdf0:	20002ca4 	.word	0x20002ca4

0800bdf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bdfe:	2300      	movs	r3, #0
 800be00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be02:	4b42      	ldr	r3, [pc, #264]	@ (800bf0c <xTaskResumeAll+0x118>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10b      	bne.n	800be22 <xTaskResumeAll+0x2e>
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	603b      	str	r3, [r7, #0]
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	e7fd      	b.n	800be1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be22:	f001 f939 	bl	800d098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be26:	4b39      	ldr	r3, [pc, #228]	@ (800bf0c <xTaskResumeAll+0x118>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3b01      	subs	r3, #1
 800be2c:	4a37      	ldr	r2, [pc, #220]	@ (800bf0c <xTaskResumeAll+0x118>)
 800be2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be30:	4b36      	ldr	r3, [pc, #216]	@ (800bf0c <xTaskResumeAll+0x118>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d162      	bne.n	800befe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be38:	4b35      	ldr	r3, [pc, #212]	@ (800bf10 <xTaskResumeAll+0x11c>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d05e      	beq.n	800befe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be40:	e02f      	b.n	800bea2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be42:	4b34      	ldr	r3, [pc, #208]	@ (800bf14 <xTaskResumeAll+0x120>)
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3318      	adds	r3, #24
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fe fffe 	bl	800ae50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	3304      	adds	r3, #4
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fe fff9 	bl	800ae50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be62:	4b2d      	ldr	r3, [pc, #180]	@ (800bf18 <xTaskResumeAll+0x124>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	429a      	cmp	r2, r3
 800be68:	d903      	bls.n	800be72 <xTaskResumeAll+0x7e>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be6e:	4a2a      	ldr	r2, [pc, #168]	@ (800bf18 <xTaskResumeAll+0x124>)
 800be70:	6013      	str	r3, [r2, #0]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be76:	4613      	mov	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	4413      	add	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4a27      	ldr	r2, [pc, #156]	@ (800bf1c <xTaskResumeAll+0x128>)
 800be80:	441a      	add	r2, r3
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3304      	adds	r3, #4
 800be86:	4619      	mov	r1, r3
 800be88:	4610      	mov	r0, r2
 800be8a:	f7fe ff84 	bl	800ad96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be92:	4b23      	ldr	r3, [pc, #140]	@ (800bf20 <xTaskResumeAll+0x12c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be98:	429a      	cmp	r2, r3
 800be9a:	d302      	bcc.n	800bea2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800be9c:	4b21      	ldr	r3, [pc, #132]	@ (800bf24 <xTaskResumeAll+0x130>)
 800be9e:	2201      	movs	r2, #1
 800bea0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bea2:	4b1c      	ldr	r3, [pc, #112]	@ (800bf14 <xTaskResumeAll+0x120>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1cb      	bne.n	800be42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d001      	beq.n	800beb4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800beb0:	f000 fb66 	bl	800c580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800beb4:	4b1c      	ldr	r3, [pc, #112]	@ (800bf28 <xTaskResumeAll+0x134>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d010      	beq.n	800bee2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bec0:	f000 f846 	bl	800bf50 <xTaskIncrementTick>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800beca:	4b16      	ldr	r3, [pc, #88]	@ (800bf24 <xTaskResumeAll+0x130>)
 800becc:	2201      	movs	r2, #1
 800bece:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	3b01      	subs	r3, #1
 800bed4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1f1      	bne.n	800bec0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bedc:	4b12      	ldr	r3, [pc, #72]	@ (800bf28 <xTaskResumeAll+0x134>)
 800bede:	2200      	movs	r2, #0
 800bee0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bee2:	4b10      	ldr	r3, [pc, #64]	@ (800bf24 <xTaskResumeAll+0x130>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d009      	beq.n	800befe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800beea:	2301      	movs	r3, #1
 800beec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800beee:	4b0f      	ldr	r3, [pc, #60]	@ (800bf2c <xTaskResumeAll+0x138>)
 800bef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800befe:	f001 f8fd 	bl	800d0fc <vPortExitCritical>

	return xAlreadyYielded;
 800bf02:	68bb      	ldr	r3, [r7, #8]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3710      	adds	r7, #16
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	20002ca4 	.word	0x20002ca4
 800bf10:	20002c7c 	.word	0x20002c7c
 800bf14:	20002c3c 	.word	0x20002c3c
 800bf18:	20002c84 	.word	0x20002c84
 800bf1c:	200027ac 	.word	0x200027ac
 800bf20:	200027a8 	.word	0x200027a8
 800bf24:	20002c90 	.word	0x20002c90
 800bf28:	20002c8c 	.word	0x20002c8c
 800bf2c:	e000ed04 	.word	0xe000ed04

0800bf30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bf36:	4b05      	ldr	r3, [pc, #20]	@ (800bf4c <xTaskGetTickCount+0x1c>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bf3c:	687b      	ldr	r3, [r7, #4]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	20002c80 	.word	0x20002c80

0800bf50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf56:	2300      	movs	r3, #0
 800bf58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf5a:	4b4f      	ldr	r3, [pc, #316]	@ (800c098 <xTaskIncrementTick+0x148>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f040 8090 	bne.w	800c084 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf64:	4b4d      	ldr	r3, [pc, #308]	@ (800c09c <xTaskIncrementTick+0x14c>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf6c:	4a4b      	ldr	r2, [pc, #300]	@ (800c09c <xTaskIncrementTick+0x14c>)
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d121      	bne.n	800bfbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf78:	4b49      	ldr	r3, [pc, #292]	@ (800c0a0 <xTaskIncrementTick+0x150>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00b      	beq.n	800bf9a <xTaskIncrementTick+0x4a>
	__asm volatile
 800bf82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf86:	f383 8811 	msr	BASEPRI, r3
 800bf8a:	f3bf 8f6f 	isb	sy
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	603b      	str	r3, [r7, #0]
}
 800bf94:	bf00      	nop
 800bf96:	bf00      	nop
 800bf98:	e7fd      	b.n	800bf96 <xTaskIncrementTick+0x46>
 800bf9a:	4b41      	ldr	r3, [pc, #260]	@ (800c0a0 <xTaskIncrementTick+0x150>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	4b40      	ldr	r3, [pc, #256]	@ (800c0a4 <xTaskIncrementTick+0x154>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a3e      	ldr	r2, [pc, #248]	@ (800c0a0 <xTaskIncrementTick+0x150>)
 800bfa6:	6013      	str	r3, [r2, #0]
 800bfa8:	4a3e      	ldr	r2, [pc, #248]	@ (800c0a4 <xTaskIncrementTick+0x154>)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	4b3e      	ldr	r3, [pc, #248]	@ (800c0a8 <xTaskIncrementTick+0x158>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	4a3c      	ldr	r2, [pc, #240]	@ (800c0a8 <xTaskIncrementTick+0x158>)
 800bfb6:	6013      	str	r3, [r2, #0]
 800bfb8:	f000 fae2 	bl	800c580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bfbc:	4b3b      	ldr	r3, [pc, #236]	@ (800c0ac <xTaskIncrementTick+0x15c>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d349      	bcc.n	800c05a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfc6:	4b36      	ldr	r3, [pc, #216]	@ (800c0a0 <xTaskIncrementTick+0x150>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d104      	bne.n	800bfda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd0:	4b36      	ldr	r3, [pc, #216]	@ (800c0ac <xTaskIncrementTick+0x15c>)
 800bfd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd6:	601a      	str	r2, [r3, #0]
					break;
 800bfd8:	e03f      	b.n	800c05a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfda:	4b31      	ldr	r3, [pc, #196]	@ (800c0a0 <xTaskIncrementTick+0x150>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bfea:	693a      	ldr	r2, [r7, #16]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d203      	bcs.n	800bffa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bff2:	4a2e      	ldr	r2, [pc, #184]	@ (800c0ac <xTaskIncrementTick+0x15c>)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bff8:	e02f      	b.n	800c05a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	3304      	adds	r3, #4
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fe ff26 	bl	800ae50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d004      	beq.n	800c016 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	3318      	adds	r3, #24
 800c010:	4618      	mov	r0, r3
 800c012:	f7fe ff1d 	bl	800ae50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c01a:	4b25      	ldr	r3, [pc, #148]	@ (800c0b0 <xTaskIncrementTick+0x160>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d903      	bls.n	800c02a <xTaskIncrementTick+0xda>
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c026:	4a22      	ldr	r2, [pc, #136]	@ (800c0b0 <xTaskIncrementTick+0x160>)
 800c028:	6013      	str	r3, [r2, #0]
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c02e:	4613      	mov	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4a1f      	ldr	r2, [pc, #124]	@ (800c0b4 <xTaskIncrementTick+0x164>)
 800c038:	441a      	add	r2, r3
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	3304      	adds	r3, #4
 800c03e:	4619      	mov	r1, r3
 800c040:	4610      	mov	r0, r2
 800c042:	f7fe fea8 	bl	800ad96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c04a:	4b1b      	ldr	r3, [pc, #108]	@ (800c0b8 <xTaskIncrementTick+0x168>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c050:	429a      	cmp	r2, r3
 800c052:	d3b8      	bcc.n	800bfc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c054:	2301      	movs	r3, #1
 800c056:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c058:	e7b5      	b.n	800bfc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c05a:	4b17      	ldr	r3, [pc, #92]	@ (800c0b8 <xTaskIncrementTick+0x168>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c060:	4914      	ldr	r1, [pc, #80]	@ (800c0b4 <xTaskIncrementTick+0x164>)
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	440b      	add	r3, r1
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d901      	bls.n	800c076 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c072:	2301      	movs	r3, #1
 800c074:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c076:	4b11      	ldr	r3, [pc, #68]	@ (800c0bc <xTaskIncrementTick+0x16c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d007      	beq.n	800c08e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c07e:	2301      	movs	r3, #1
 800c080:	617b      	str	r3, [r7, #20]
 800c082:	e004      	b.n	800c08e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c084:	4b0e      	ldr	r3, [pc, #56]	@ (800c0c0 <xTaskIncrementTick+0x170>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3301      	adds	r3, #1
 800c08a:	4a0d      	ldr	r2, [pc, #52]	@ (800c0c0 <xTaskIncrementTick+0x170>)
 800c08c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c08e:	697b      	ldr	r3, [r7, #20]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3718      	adds	r7, #24
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	20002ca4 	.word	0x20002ca4
 800c09c:	20002c80 	.word	0x20002c80
 800c0a0:	20002c34 	.word	0x20002c34
 800c0a4:	20002c38 	.word	0x20002c38
 800c0a8:	20002c94 	.word	0x20002c94
 800c0ac:	20002c9c 	.word	0x20002c9c
 800c0b0:	20002c84 	.word	0x20002c84
 800c0b4:	200027ac 	.word	0x200027ac
 800c0b8:	200027a8 	.word	0x200027a8
 800c0bc:	20002c90 	.word	0x20002c90
 800c0c0:	20002c8c 	.word	0x20002c8c

0800c0c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0ca:	4b2b      	ldr	r3, [pc, #172]	@ (800c178 <vTaskSwitchContext+0xb4>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d003      	beq.n	800c0da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0d2:	4b2a      	ldr	r3, [pc, #168]	@ (800c17c <vTaskSwitchContext+0xb8>)
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0d8:	e047      	b.n	800c16a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c0da:	4b28      	ldr	r3, [pc, #160]	@ (800c17c <vTaskSwitchContext+0xb8>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0e0:	4b27      	ldr	r3, [pc, #156]	@ (800c180 <vTaskSwitchContext+0xbc>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	60fb      	str	r3, [r7, #12]
 800c0e6:	e011      	b.n	800c10c <vTaskSwitchContext+0x48>
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10b      	bne.n	800c106 <vTaskSwitchContext+0x42>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	607b      	str	r3, [r7, #4]
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	e7fd      	b.n	800c102 <vTaskSwitchContext+0x3e>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	3b01      	subs	r3, #1
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	491d      	ldr	r1, [pc, #116]	@ (800c184 <vTaskSwitchContext+0xc0>)
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	4613      	mov	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	440b      	add	r3, r1
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d0e3      	beq.n	800c0e8 <vTaskSwitchContext+0x24>
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	4613      	mov	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4a16      	ldr	r2, [pc, #88]	@ (800c184 <vTaskSwitchContext+0xc0>)
 800c12c:	4413      	add	r3, r2
 800c12e:	60bb      	str	r3, [r7, #8]
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	605a      	str	r2, [r3, #4]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	685a      	ldr	r2, [r3, #4]
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	3308      	adds	r3, #8
 800c142:	429a      	cmp	r2, r3
 800c144:	d104      	bne.n	800c150 <vTaskSwitchContext+0x8c>
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	605a      	str	r2, [r3, #4]
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	4a0c      	ldr	r2, [pc, #48]	@ (800c188 <vTaskSwitchContext+0xc4>)
 800c158:	6013      	str	r3, [r2, #0]
 800c15a:	4a09      	ldr	r2, [pc, #36]	@ (800c180 <vTaskSwitchContext+0xbc>)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c160:	4b09      	ldr	r3, [pc, #36]	@ (800c188 <vTaskSwitchContext+0xc4>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	3354      	adds	r3, #84	@ 0x54
 800c166:	4a09      	ldr	r2, [pc, #36]	@ (800c18c <vTaskSwitchContext+0xc8>)
 800c168:	6013      	str	r3, [r2, #0]
}
 800c16a:	bf00      	nop
 800c16c:	3714      	adds	r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	20002ca4 	.word	0x20002ca4
 800c17c:	20002c90 	.word	0x20002c90
 800c180:	20002c84 	.word	0x20002c84
 800c184:	200027ac 	.word	0x200027ac
 800c188:	200027a8 	.word	0x200027a8
 800c18c:	20000194 	.word	0x20000194

0800c190 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10b      	bne.n	800c1b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	60fb      	str	r3, [r7, #12]
}
 800c1b2:	bf00      	nop
 800c1b4:	bf00      	nop
 800c1b6:	e7fd      	b.n	800c1b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1b8:	4b07      	ldr	r3, [pc, #28]	@ (800c1d8 <vTaskPlaceOnEventList+0x48>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	3318      	adds	r3, #24
 800c1be:	4619      	mov	r1, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7fe fe0c 	bl	800adde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1c6:	2101      	movs	r1, #1
 800c1c8:	6838      	ldr	r0, [r7, #0]
 800c1ca:	f000 fa87 	bl	800c6dc <prvAddCurrentTaskToDelayedList>
}
 800c1ce:	bf00      	nop
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	200027a8 	.word	0x200027a8

0800c1dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d10b      	bne.n	800c206 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	617b      	str	r3, [r7, #20]
}
 800c200:	bf00      	nop
 800c202:	bf00      	nop
 800c204:	e7fd      	b.n	800c202 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c206:	4b0a      	ldr	r3, [pc, #40]	@ (800c230 <vTaskPlaceOnEventListRestricted+0x54>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3318      	adds	r3, #24
 800c20c:	4619      	mov	r1, r3
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f7fe fdc1 	bl	800ad96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c21a:	f04f 33ff 	mov.w	r3, #4294967295
 800c21e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c220:	6879      	ldr	r1, [r7, #4]
 800c222:	68b8      	ldr	r0, [r7, #8]
 800c224:	f000 fa5a 	bl	800c6dc <prvAddCurrentTaskToDelayedList>
	}
 800c228:	bf00      	nop
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	200027a8 	.word	0x200027a8

0800c234 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b086      	sub	sp, #24
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10b      	bne.n	800c262 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	60fb      	str	r3, [r7, #12]
}
 800c25c:	bf00      	nop
 800c25e:	bf00      	nop
 800c260:	e7fd      	b.n	800c25e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	3318      	adds	r3, #24
 800c266:	4618      	mov	r0, r3
 800c268:	f7fe fdf2 	bl	800ae50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c26c:	4b1d      	ldr	r3, [pc, #116]	@ (800c2e4 <xTaskRemoveFromEventList+0xb0>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d11d      	bne.n	800c2b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	3304      	adds	r3, #4
 800c278:	4618      	mov	r0, r3
 800c27a:	f7fe fde9 	bl	800ae50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c282:	4b19      	ldr	r3, [pc, #100]	@ (800c2e8 <xTaskRemoveFromEventList+0xb4>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	429a      	cmp	r2, r3
 800c288:	d903      	bls.n	800c292 <xTaskRemoveFromEventList+0x5e>
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c28e:	4a16      	ldr	r2, [pc, #88]	@ (800c2e8 <xTaskRemoveFromEventList+0xb4>)
 800c290:	6013      	str	r3, [r2, #0]
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c296:	4613      	mov	r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4413      	add	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4a13      	ldr	r2, [pc, #76]	@ (800c2ec <xTaskRemoveFromEventList+0xb8>)
 800c2a0:	441a      	add	r2, r3
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	f7fe fd74 	bl	800ad96 <vListInsertEnd>
 800c2ae:	e005      	b.n	800c2bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	3318      	adds	r3, #24
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	480e      	ldr	r0, [pc, #56]	@ (800c2f0 <xTaskRemoveFromEventList+0xbc>)
 800c2b8:	f7fe fd6d 	bl	800ad96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c2f4 <xTaskRemoveFromEventList+0xc0>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d905      	bls.n	800c2d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c2ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c2f8 <xTaskRemoveFromEventList+0xc4>)
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	601a      	str	r2, [r3, #0]
 800c2d4:	e001      	b.n	800c2da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c2da:	697b      	ldr	r3, [r7, #20]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3718      	adds	r7, #24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	20002ca4 	.word	0x20002ca4
 800c2e8:	20002c84 	.word	0x20002c84
 800c2ec:	200027ac 	.word	0x200027ac
 800c2f0:	20002c3c 	.word	0x20002c3c
 800c2f4:	200027a8 	.word	0x200027a8
 800c2f8:	20002c90 	.word	0x20002c90

0800c2fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c304:	4b06      	ldr	r3, [pc, #24]	@ (800c320 <vTaskInternalSetTimeOutState+0x24>)
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c30c:	4b05      	ldr	r3, [pc, #20]	@ (800c324 <vTaskInternalSetTimeOutState+0x28>)
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	605a      	str	r2, [r3, #4]
}
 800c314:	bf00      	nop
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	20002c94 	.word	0x20002c94
 800c324:	20002c80 	.word	0x20002c80

0800c328 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b088      	sub	sp, #32
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10b      	bne.n	800c350 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	613b      	str	r3, [r7, #16]
}
 800c34a:	bf00      	nop
 800c34c:	bf00      	nop
 800c34e:	e7fd      	b.n	800c34c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10b      	bne.n	800c36e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	60fb      	str	r3, [r7, #12]
}
 800c368:	bf00      	nop
 800c36a:	bf00      	nop
 800c36c:	e7fd      	b.n	800c36a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c36e:	f000 fe93 	bl	800d098 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c372:	4b1d      	ldr	r3, [pc, #116]	@ (800c3e8 <xTaskCheckForTimeOut+0xc0>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	69ba      	ldr	r2, [r7, #24]
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38a:	d102      	bne.n	800c392 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c38c:	2300      	movs	r3, #0
 800c38e:	61fb      	str	r3, [r7, #28]
 800c390:	e023      	b.n	800c3da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	4b15      	ldr	r3, [pc, #84]	@ (800c3ec <xTaskCheckForTimeOut+0xc4>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d007      	beq.n	800c3ae <xTaskCheckForTimeOut+0x86>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	69ba      	ldr	r2, [r7, #24]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d302      	bcc.n	800c3ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	61fb      	str	r3, [r7, #28]
 800c3ac:	e015      	b.n	800c3da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	697a      	ldr	r2, [r7, #20]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d20b      	bcs.n	800c3d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	1ad2      	subs	r2, r2, r3
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7ff ff99 	bl	800c2fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	61fb      	str	r3, [r7, #28]
 800c3ce:	e004      	b.n	800c3da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c3da:	f000 fe8f 	bl	800d0fc <vPortExitCritical>

	return xReturn;
 800c3de:	69fb      	ldr	r3, [r7, #28]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3720      	adds	r7, #32
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	20002c80 	.word	0x20002c80
 800c3ec:	20002c94 	.word	0x20002c94

0800c3f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c3f4:	4b03      	ldr	r3, [pc, #12]	@ (800c404 <vTaskMissedYield+0x14>)
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	601a      	str	r2, [r3, #0]
}
 800c3fa:	bf00      	nop
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr
 800c404:	20002c90 	.word	0x20002c90

0800c408 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c410:	f000 f852 	bl	800c4b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c414:	4b06      	ldr	r3, [pc, #24]	@ (800c430 <prvIdleTask+0x28>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d9f9      	bls.n	800c410 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c41c:	4b05      	ldr	r3, [pc, #20]	@ (800c434 <prvIdleTask+0x2c>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c42c:	e7f0      	b.n	800c410 <prvIdleTask+0x8>
 800c42e:	bf00      	nop
 800c430:	200027ac 	.word	0x200027ac
 800c434:	e000ed04 	.word	0xe000ed04

0800c438 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c43e:	2300      	movs	r3, #0
 800c440:	607b      	str	r3, [r7, #4]
 800c442:	e00c      	b.n	800c45e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	4613      	mov	r3, r2
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4a12      	ldr	r2, [pc, #72]	@ (800c498 <prvInitialiseTaskLists+0x60>)
 800c450:	4413      	add	r3, r2
 800c452:	4618      	mov	r0, r3
 800c454:	f7fe fc72 	bl	800ad3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	3301      	adds	r3, #1
 800c45c:	607b      	str	r3, [r7, #4]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2b37      	cmp	r3, #55	@ 0x37
 800c462:	d9ef      	bls.n	800c444 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c464:	480d      	ldr	r0, [pc, #52]	@ (800c49c <prvInitialiseTaskLists+0x64>)
 800c466:	f7fe fc69 	bl	800ad3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c46a:	480d      	ldr	r0, [pc, #52]	@ (800c4a0 <prvInitialiseTaskLists+0x68>)
 800c46c:	f7fe fc66 	bl	800ad3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c470:	480c      	ldr	r0, [pc, #48]	@ (800c4a4 <prvInitialiseTaskLists+0x6c>)
 800c472:	f7fe fc63 	bl	800ad3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c476:	480c      	ldr	r0, [pc, #48]	@ (800c4a8 <prvInitialiseTaskLists+0x70>)
 800c478:	f7fe fc60 	bl	800ad3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c47c:	480b      	ldr	r0, [pc, #44]	@ (800c4ac <prvInitialiseTaskLists+0x74>)
 800c47e:	f7fe fc5d 	bl	800ad3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c482:	4b0b      	ldr	r3, [pc, #44]	@ (800c4b0 <prvInitialiseTaskLists+0x78>)
 800c484:	4a05      	ldr	r2, [pc, #20]	@ (800c49c <prvInitialiseTaskLists+0x64>)
 800c486:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c488:	4b0a      	ldr	r3, [pc, #40]	@ (800c4b4 <prvInitialiseTaskLists+0x7c>)
 800c48a:	4a05      	ldr	r2, [pc, #20]	@ (800c4a0 <prvInitialiseTaskLists+0x68>)
 800c48c:	601a      	str	r2, [r3, #0]
}
 800c48e:	bf00      	nop
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	200027ac 	.word	0x200027ac
 800c49c:	20002c0c 	.word	0x20002c0c
 800c4a0:	20002c20 	.word	0x20002c20
 800c4a4:	20002c3c 	.word	0x20002c3c
 800c4a8:	20002c50 	.word	0x20002c50
 800c4ac:	20002c68 	.word	0x20002c68
 800c4b0:	20002c34 	.word	0x20002c34
 800c4b4:	20002c38 	.word	0x20002c38

0800c4b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4be:	e019      	b.n	800c4f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c4c0:	f000 fdea 	bl	800d098 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c4:	4b10      	ldr	r3, [pc, #64]	@ (800c508 <prvCheckTasksWaitingTermination+0x50>)
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fe fcbd 	bl	800ae50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c50c <prvCheckTasksWaitingTermination+0x54>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a0b      	ldr	r2, [pc, #44]	@ (800c50c <prvCheckTasksWaitingTermination+0x54>)
 800c4de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c4e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c510 <prvCheckTasksWaitingTermination+0x58>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	4a0a      	ldr	r2, [pc, #40]	@ (800c510 <prvCheckTasksWaitingTermination+0x58>)
 800c4e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c4ea:	f000 fe07 	bl	800d0fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 f810 	bl	800c514 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4f4:	4b06      	ldr	r3, [pc, #24]	@ (800c510 <prvCheckTasksWaitingTermination+0x58>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1e1      	bne.n	800c4c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c4fc:	bf00      	nop
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20002c50 	.word	0x20002c50
 800c50c:	20002c7c 	.word	0x20002c7c
 800c510:	20002c64 	.word	0x20002c64

0800c514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3354      	adds	r3, #84	@ 0x54
 800c520:	4618      	mov	r0, r3
 800c522:	f002 fb6b 	bl	800ebfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d108      	bne.n	800c542 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c534:	4618      	mov	r0, r3
 800c536:	f000 ff9f 	bl	800d478 <vPortFree>
				vPortFree( pxTCB );
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 ff9c 	bl	800d478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c540:	e019      	b.n	800c576 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d103      	bne.n	800c554 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 ff93 	bl	800d478 <vPortFree>
	}
 800c552:	e010      	b.n	800c576 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d00b      	beq.n	800c576 <prvDeleteTCB+0x62>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	60fb      	str	r3, [r7, #12]
}
 800c570:	bf00      	nop
 800c572:	bf00      	nop
 800c574:	e7fd      	b.n	800c572 <prvDeleteTCB+0x5e>
	}
 800c576:	bf00      	nop
 800c578:	3710      	adds	r7, #16
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c586:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b8 <prvResetNextTaskUnblockTime+0x38>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d104      	bne.n	800c59a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c590:	4b0a      	ldr	r3, [pc, #40]	@ (800c5bc <prvResetNextTaskUnblockTime+0x3c>)
 800c592:	f04f 32ff 	mov.w	r2, #4294967295
 800c596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c598:	e008      	b.n	800c5ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c59a:	4b07      	ldr	r3, [pc, #28]	@ (800c5b8 <prvResetNextTaskUnblockTime+0x38>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	4a04      	ldr	r2, [pc, #16]	@ (800c5bc <prvResetNextTaskUnblockTime+0x3c>)
 800c5aa:	6013      	str	r3, [r2, #0]
}
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr
 800c5b8:	20002c34 	.word	0x20002c34
 800c5bc:	20002c9c 	.word	0x20002c9c

0800c5c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c5c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c5f4 <xTaskGetSchedulerState+0x34>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d102      	bne.n	800c5d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	607b      	str	r3, [r7, #4]
 800c5d2:	e008      	b.n	800c5e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5d4:	4b08      	ldr	r3, [pc, #32]	@ (800c5f8 <xTaskGetSchedulerState+0x38>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d102      	bne.n	800c5e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c5dc:	2302      	movs	r3, #2
 800c5de:	607b      	str	r3, [r7, #4]
 800c5e0:	e001      	b.n	800c5e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c5e6:	687b      	ldr	r3, [r7, #4]
	}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	20002c88 	.word	0x20002c88
 800c5f8:	20002ca4 	.word	0x20002ca4

0800c5fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c608:	2300      	movs	r3, #0
 800c60a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d058      	beq.n	800c6c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c612:	4b2f      	ldr	r3, [pc, #188]	@ (800c6d0 <xTaskPriorityDisinherit+0xd4>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d00b      	beq.n	800c634 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	60fb      	str	r3, [r7, #12]
}
 800c62e:	bf00      	nop
 800c630:	bf00      	nop
 800c632:	e7fd      	b.n	800c630 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10b      	bne.n	800c654 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	60bb      	str	r3, [r7, #8]
}
 800c64e:	bf00      	nop
 800c650:	bf00      	nop
 800c652:	e7fd      	b.n	800c650 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c658:	1e5a      	subs	r2, r3, #1
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c666:	429a      	cmp	r2, r3
 800c668:	d02c      	beq.n	800c6c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d128      	bne.n	800c6c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	3304      	adds	r3, #4
 800c676:	4618      	mov	r0, r3
 800c678:	f7fe fbea 	bl	800ae50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c688:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c694:	4b0f      	ldr	r3, [pc, #60]	@ (800c6d4 <xTaskPriorityDisinherit+0xd8>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d903      	bls.n	800c6a4 <xTaskPriorityDisinherit+0xa8>
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a0:	4a0c      	ldr	r2, [pc, #48]	@ (800c6d4 <xTaskPriorityDisinherit+0xd8>)
 800c6a2:	6013      	str	r3, [r2, #0]
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	4a09      	ldr	r2, [pc, #36]	@ (800c6d8 <xTaskPriorityDisinherit+0xdc>)
 800c6b2:	441a      	add	r2, r3
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	4610      	mov	r0, r2
 800c6bc:	f7fe fb6b 	bl	800ad96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6c4:	697b      	ldr	r3, [r7, #20]
	}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3718      	adds	r7, #24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	200027a8 	.word	0x200027a8
 800c6d4:	20002c84 	.word	0x20002c84
 800c6d8:	200027ac 	.word	0x200027ac

0800c6dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c6e6:	4b21      	ldr	r3, [pc, #132]	@ (800c76c <prvAddCurrentTaskToDelayedList+0x90>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6ec:	4b20      	ldr	r3, [pc, #128]	@ (800c770 <prvAddCurrentTaskToDelayedList+0x94>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe fbac 	bl	800ae50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fe:	d10a      	bne.n	800c716 <prvAddCurrentTaskToDelayedList+0x3a>
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d007      	beq.n	800c716 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c706:	4b1a      	ldr	r3, [pc, #104]	@ (800c770 <prvAddCurrentTaskToDelayedList+0x94>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	3304      	adds	r3, #4
 800c70c:	4619      	mov	r1, r3
 800c70e:	4819      	ldr	r0, [pc, #100]	@ (800c774 <prvAddCurrentTaskToDelayedList+0x98>)
 800c710:	f7fe fb41 	bl	800ad96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c714:	e026      	b.n	800c764 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4413      	add	r3, r2
 800c71c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c71e:	4b14      	ldr	r3, [pc, #80]	@ (800c770 <prvAddCurrentTaskToDelayedList+0x94>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d209      	bcs.n	800c742 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c72e:	4b12      	ldr	r3, [pc, #72]	@ (800c778 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	4b0f      	ldr	r3, [pc, #60]	@ (800c770 <prvAddCurrentTaskToDelayedList+0x94>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3304      	adds	r3, #4
 800c738:	4619      	mov	r1, r3
 800c73a:	4610      	mov	r0, r2
 800c73c:	f7fe fb4f 	bl	800adde <vListInsert>
}
 800c740:	e010      	b.n	800c764 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c742:	4b0e      	ldr	r3, [pc, #56]	@ (800c77c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	4b0a      	ldr	r3, [pc, #40]	@ (800c770 <prvAddCurrentTaskToDelayedList+0x94>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3304      	adds	r3, #4
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f7fe fb45 	bl	800adde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c754:	4b0a      	ldr	r3, [pc, #40]	@ (800c780 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d202      	bcs.n	800c764 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c75e:	4a08      	ldr	r2, [pc, #32]	@ (800c780 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	6013      	str	r3, [r2, #0]
}
 800c764:	bf00      	nop
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	20002c80 	.word	0x20002c80
 800c770:	200027a8 	.word	0x200027a8
 800c774:	20002c68 	.word	0x20002c68
 800c778:	20002c38 	.word	0x20002c38
 800c77c:	20002c34 	.word	0x20002c34
 800c780:	20002c9c 	.word	0x20002c9c

0800c784 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b08a      	sub	sp, #40	@ 0x28
 800c788:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c78a:	2300      	movs	r3, #0
 800c78c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c78e:	f000 fb13 	bl	800cdb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c792:	4b1d      	ldr	r3, [pc, #116]	@ (800c808 <xTimerCreateTimerTask+0x84>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d021      	beq.n	800c7de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c79a:	2300      	movs	r3, #0
 800c79c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c7a2:	1d3a      	adds	r2, r7, #4
 800c7a4:	f107 0108 	add.w	r1, r7, #8
 800c7a8:	f107 030c 	add.w	r3, r7, #12
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fe faab 	bl	800ad08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c7b2:	6879      	ldr	r1, [r7, #4]
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	9202      	str	r2, [sp, #8]
 800c7ba:	9301      	str	r3, [sp, #4]
 800c7bc:	2302      	movs	r3, #2
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	460a      	mov	r2, r1
 800c7c4:	4911      	ldr	r1, [pc, #68]	@ (800c80c <xTimerCreateTimerTask+0x88>)
 800c7c6:	4812      	ldr	r0, [pc, #72]	@ (800c810 <xTimerCreateTimerTask+0x8c>)
 800c7c8:	f7ff f8a2 	bl	800b910 <xTaskCreateStatic>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	4a11      	ldr	r2, [pc, #68]	@ (800c814 <xTimerCreateTimerTask+0x90>)
 800c7d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c7d2:	4b10      	ldr	r3, [pc, #64]	@ (800c814 <xTimerCreateTimerTask+0x90>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10b      	bne.n	800c7fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	613b      	str	r3, [r7, #16]
}
 800c7f6:	bf00      	nop
 800c7f8:	bf00      	nop
 800c7fa:	e7fd      	b.n	800c7f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c7fc:	697b      	ldr	r3, [r7, #20]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3718      	adds	r7, #24
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	20002cd8 	.word	0x20002cd8
 800c80c:	0801106c 	.word	0x0801106c
 800c810:	0800c951 	.word	0x0800c951
 800c814:	20002cdc 	.word	0x20002cdc

0800c818 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08a      	sub	sp, #40	@ 0x28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
 800c824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c826:	2300      	movs	r3, #0
 800c828:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10b      	bne.n	800c848 <xTimerGenericCommand+0x30>
	__asm volatile
 800c830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	623b      	str	r3, [r7, #32]
}
 800c842:	bf00      	nop
 800c844:	bf00      	nop
 800c846:	e7fd      	b.n	800c844 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c848:	4b19      	ldr	r3, [pc, #100]	@ (800c8b0 <xTimerGenericCommand+0x98>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d02a      	beq.n	800c8a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	2b05      	cmp	r3, #5
 800c860:	dc18      	bgt.n	800c894 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c862:	f7ff fead 	bl	800c5c0 <xTaskGetSchedulerState>
 800c866:	4603      	mov	r3, r0
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d109      	bne.n	800c880 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c86c:	4b10      	ldr	r3, [pc, #64]	@ (800c8b0 <xTimerGenericCommand+0x98>)
 800c86e:	6818      	ldr	r0, [r3, #0]
 800c870:	f107 0110 	add.w	r1, r7, #16
 800c874:	2300      	movs	r3, #0
 800c876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c878:	f7fe fc5a 	bl	800b130 <xQueueGenericSend>
 800c87c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c87e:	e012      	b.n	800c8a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c880:	4b0b      	ldr	r3, [pc, #44]	@ (800c8b0 <xTimerGenericCommand+0x98>)
 800c882:	6818      	ldr	r0, [r3, #0]
 800c884:	f107 0110 	add.w	r1, r7, #16
 800c888:	2300      	movs	r3, #0
 800c88a:	2200      	movs	r2, #0
 800c88c:	f7fe fc50 	bl	800b130 <xQueueGenericSend>
 800c890:	6278      	str	r0, [r7, #36]	@ 0x24
 800c892:	e008      	b.n	800c8a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c894:	4b06      	ldr	r3, [pc, #24]	@ (800c8b0 <xTimerGenericCommand+0x98>)
 800c896:	6818      	ldr	r0, [r3, #0]
 800c898:	f107 0110 	add.w	r1, r7, #16
 800c89c:	2300      	movs	r3, #0
 800c89e:	683a      	ldr	r2, [r7, #0]
 800c8a0:	f7fe fd48 	bl	800b334 <xQueueGenericSendFromISR>
 800c8a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3728      	adds	r7, #40	@ 0x28
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	20002cd8 	.word	0x20002cd8

0800c8b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b088      	sub	sp, #32
 800c8b8:	af02      	add	r7, sp, #8
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8be:	4b23      	ldr	r3, [pc, #140]	@ (800c94c <prvProcessExpiredTimer+0x98>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	3304      	adds	r3, #4
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fe fabf 	bl	800ae50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8d8:	f003 0304 	and.w	r3, r3, #4
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d023      	beq.n	800c928 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	699a      	ldr	r2, [r3, #24]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	18d1      	adds	r1, r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	6978      	ldr	r0, [r7, #20]
 800c8ee:	f000 f8d5 	bl	800ca9c <prvInsertTimerInActiveList>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d020      	beq.n	800c93a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	9300      	str	r3, [sp, #0]
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	2100      	movs	r1, #0
 800c902:	6978      	ldr	r0, [r7, #20]
 800c904:	f7ff ff88 	bl	800c818 <xTimerGenericCommand>
 800c908:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d114      	bne.n	800c93a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c914:	f383 8811 	msr	BASEPRI, r3
 800c918:	f3bf 8f6f 	isb	sy
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	60fb      	str	r3, [r7, #12]
}
 800c922:	bf00      	nop
 800c924:	bf00      	nop
 800c926:	e7fd      	b.n	800c924 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c92e:	f023 0301 	bic.w	r3, r3, #1
 800c932:	b2da      	uxtb	r2, r3
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	6978      	ldr	r0, [r7, #20]
 800c940:	4798      	blx	r3
}
 800c942:	bf00      	nop
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	20002cd0 	.word	0x20002cd0

0800c950 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c958:	f107 0308 	add.w	r3, r7, #8
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 f859 	bl	800ca14 <prvGetNextExpireTime>
 800c962:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	4619      	mov	r1, r3
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f000 f805 	bl	800c978 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c96e:	f000 f8d7 	bl	800cb20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c972:	bf00      	nop
 800c974:	e7f0      	b.n	800c958 <prvTimerTask+0x8>
	...

0800c978 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c982:	f7ff fa29 	bl	800bdd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c986:	f107 0308 	add.w	r3, r7, #8
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 f866 	bl	800ca5c <prvSampleTimeNow>
 800c990:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d130      	bne.n	800c9fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d10a      	bne.n	800c9b4 <prvProcessTimerOrBlockTask+0x3c>
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d806      	bhi.n	800c9b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c9a6:	f7ff fa25 	bl	800bdf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c9aa:	68f9      	ldr	r1, [r7, #12]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7ff ff81 	bl	800c8b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c9b2:	e024      	b.n	800c9fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d008      	beq.n	800c9cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c9ba:	4b13      	ldr	r3, [pc, #76]	@ (800ca08 <prvProcessTimerOrBlockTask+0x90>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d101      	bne.n	800c9c8 <prvProcessTimerOrBlockTask+0x50>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e000      	b.n	800c9ca <prvProcessTimerOrBlockTask+0x52>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c9cc:	4b0f      	ldr	r3, [pc, #60]	@ (800ca0c <prvProcessTimerOrBlockTask+0x94>)
 800c9ce:	6818      	ldr	r0, [r3, #0]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	1ad3      	subs	r3, r2, r3
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	4619      	mov	r1, r3
 800c9da:	f7fe ff65 	bl	800b8a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c9de:	f7ff fa09 	bl	800bdf4 <xTaskResumeAll>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10a      	bne.n	800c9fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c9e8:	4b09      	ldr	r3, [pc, #36]	@ (800ca10 <prvProcessTimerOrBlockTask+0x98>)
 800c9ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	f3bf 8f6f 	isb	sy
}
 800c9f8:	e001      	b.n	800c9fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c9fa:	f7ff f9fb 	bl	800bdf4 <xTaskResumeAll>
}
 800c9fe:	bf00      	nop
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	20002cd4 	.word	0x20002cd4
 800ca0c:	20002cd8 	.word	0x20002cd8
 800ca10:	e000ed04 	.word	0xe000ed04

0800ca14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ca1c:	4b0e      	ldr	r3, [pc, #56]	@ (800ca58 <prvGetNextExpireTime+0x44>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <prvGetNextExpireTime+0x16>
 800ca26:	2201      	movs	r2, #1
 800ca28:	e000      	b.n	800ca2c <prvGetNextExpireTime+0x18>
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d105      	bne.n	800ca44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca38:	4b07      	ldr	r3, [pc, #28]	@ (800ca58 <prvGetNextExpireTime+0x44>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	60fb      	str	r3, [r7, #12]
 800ca42:	e001      	b.n	800ca48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ca44:	2300      	movs	r3, #0
 800ca46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ca48:	68fb      	ldr	r3, [r7, #12]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	20002cd0 	.word	0x20002cd0

0800ca5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ca64:	f7ff fa64 	bl	800bf30 <xTaskGetTickCount>
 800ca68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ca6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca98 <prvSampleTimeNow+0x3c>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d205      	bcs.n	800ca80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ca74:	f000 f93a 	bl	800ccec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	601a      	str	r2, [r3, #0]
 800ca7e:	e002      	b.n	800ca86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ca86:	4a04      	ldr	r2, [pc, #16]	@ (800ca98 <prvSampleTimeNow+0x3c>)
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	20002ce0 	.word	0x20002ce0

0800ca9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
 800caa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800caaa:	2300      	movs	r3, #0
 800caac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	68fa      	ldr	r2, [r7, #12]
 800cab8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d812      	bhi.n	800cae8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	1ad2      	subs	r2, r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	699b      	ldr	r3, [r3, #24]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d302      	bcc.n	800cad6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cad0:	2301      	movs	r3, #1
 800cad2:	617b      	str	r3, [r7, #20]
 800cad4:	e01b      	b.n	800cb0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cad6:	4b10      	ldr	r3, [pc, #64]	@ (800cb18 <prvInsertTimerInActiveList+0x7c>)
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3304      	adds	r3, #4
 800cade:	4619      	mov	r1, r3
 800cae0:	4610      	mov	r0, r2
 800cae2:	f7fe f97c 	bl	800adde <vListInsert>
 800cae6:	e012      	b.n	800cb0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	429a      	cmp	r2, r3
 800caee:	d206      	bcs.n	800cafe <prvInsertTimerInActiveList+0x62>
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d302      	bcc.n	800cafe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800caf8:	2301      	movs	r3, #1
 800cafa:	617b      	str	r3, [r7, #20]
 800cafc:	e007      	b.n	800cb0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cafe:	4b07      	ldr	r3, [pc, #28]	@ (800cb1c <prvInsertTimerInActiveList+0x80>)
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	3304      	adds	r3, #4
 800cb06:	4619      	mov	r1, r3
 800cb08:	4610      	mov	r0, r2
 800cb0a:	f7fe f968 	bl	800adde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cb0e:	697b      	ldr	r3, [r7, #20]
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3718      	adds	r7, #24
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	20002cd4 	.word	0x20002cd4
 800cb1c:	20002cd0 	.word	0x20002cd0

0800cb20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b08e      	sub	sp, #56	@ 0x38
 800cb24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb26:	e0ce      	b.n	800ccc6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	da19      	bge.n	800cb62 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cb2e:	1d3b      	adds	r3, r7, #4
 800cb30:	3304      	adds	r3, #4
 800cb32:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10b      	bne.n	800cb52 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	61fb      	str	r3, [r7, #28]
}
 800cb4c:	bf00      	nop
 800cb4e:	bf00      	nop
 800cb50:	e7fd      	b.n	800cb4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb58:	6850      	ldr	r0, [r2, #4]
 800cb5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb5c:	6892      	ldr	r2, [r2, #8]
 800cb5e:	4611      	mov	r1, r2
 800cb60:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f2c0 80ae 	blt.w	800ccc6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cb6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb70:	695b      	ldr	r3, [r3, #20]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d004      	beq.n	800cb80 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb78:	3304      	adds	r3, #4
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe f968 	bl	800ae50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb80:	463b      	mov	r3, r7
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7ff ff6a 	bl	800ca5c <prvSampleTimeNow>
 800cb88:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2b09      	cmp	r3, #9
 800cb8e:	f200 8097 	bhi.w	800ccc0 <prvProcessReceivedCommands+0x1a0>
 800cb92:	a201      	add	r2, pc, #4	@ (adr r2, 800cb98 <prvProcessReceivedCommands+0x78>)
 800cb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb98:	0800cbc1 	.word	0x0800cbc1
 800cb9c:	0800cbc1 	.word	0x0800cbc1
 800cba0:	0800cbc1 	.word	0x0800cbc1
 800cba4:	0800cc37 	.word	0x0800cc37
 800cba8:	0800cc4b 	.word	0x0800cc4b
 800cbac:	0800cc97 	.word	0x0800cc97
 800cbb0:	0800cbc1 	.word	0x0800cbc1
 800cbb4:	0800cbc1 	.word	0x0800cbc1
 800cbb8:	0800cc37 	.word	0x0800cc37
 800cbbc:	0800cc4b 	.word	0x0800cc4b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbc6:	f043 0301 	orr.w	r3, r3, #1
 800cbca:	b2da      	uxtb	r2, r3
 800cbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd6:	699b      	ldr	r3, [r3, #24]
 800cbd8:	18d1      	adds	r1, r2, r3
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbe0:	f7ff ff5c 	bl	800ca9c <prvInsertTimerInActiveList>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d06c      	beq.n	800ccc4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbec:	6a1b      	ldr	r3, [r3, #32]
 800cbee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbf8:	f003 0304 	and.w	r3, r3, #4
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d061      	beq.n	800ccc4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc04:	699b      	ldr	r3, [r3, #24]
 800cc06:	441a      	add	r2, r3
 800cc08:	2300      	movs	r3, #0
 800cc0a:	9300      	str	r3, [sp, #0]
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	2100      	movs	r1, #0
 800cc10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc12:	f7ff fe01 	bl	800c818 <xTimerGenericCommand>
 800cc16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cc18:	6a3b      	ldr	r3, [r7, #32]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d152      	bne.n	800ccc4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	61bb      	str	r3, [r7, #24]
}
 800cc30:	bf00      	nop
 800cc32:	bf00      	nop
 800cc34:	e7fd      	b.n	800cc32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc3c:	f023 0301 	bic.w	r3, r3, #1
 800cc40:	b2da      	uxtb	r2, r3
 800cc42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cc48:	e03d      	b.n	800ccc6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc50:	f043 0301 	orr.w	r3, r3, #1
 800cc54:	b2da      	uxtb	r2, r3
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cc5c:	68ba      	ldr	r2, [r7, #8]
 800cc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10b      	bne.n	800cc82 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	617b      	str	r3, [r7, #20]
}
 800cc7c:	bf00      	nop
 800cc7e:	bf00      	nop
 800cc80:	e7fd      	b.n	800cc7e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc84:	699a      	ldr	r2, [r3, #24]
 800cc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc88:	18d1      	adds	r1, r2, r3
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc90:	f7ff ff04 	bl	800ca9c <prvInsertTimerInActiveList>
					break;
 800cc94:	e017      	b.n	800ccc6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cc96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc9c:	f003 0302 	and.w	r3, r3, #2
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d103      	bne.n	800ccac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cca4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cca6:	f000 fbe7 	bl	800d478 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ccaa:	e00c      	b.n	800ccc6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ccac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccb2:	f023 0301 	bic.w	r3, r3, #1
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ccbe:	e002      	b.n	800ccc6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ccc0:	bf00      	nop
 800ccc2:	e000      	b.n	800ccc6 <prvProcessReceivedCommands+0x1a6>
					break;
 800ccc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ccc6:	4b08      	ldr	r3, [pc, #32]	@ (800cce8 <prvProcessReceivedCommands+0x1c8>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	1d39      	adds	r1, r7, #4
 800cccc:	2200      	movs	r2, #0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fe fbce 	bl	800b470 <xQueueReceive>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f47f af26 	bne.w	800cb28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ccdc:	bf00      	nop
 800ccde:	bf00      	nop
 800cce0:	3730      	adds	r7, #48	@ 0x30
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	20002cd8 	.word	0x20002cd8

0800ccec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b088      	sub	sp, #32
 800ccf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ccf2:	e049      	b.n	800cd88 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ccf4:	4b2e      	ldr	r3, [pc, #184]	@ (800cdb0 <prvSwitchTimerLists+0xc4>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccfe:	4b2c      	ldr	r3, [pc, #176]	@ (800cdb0 <prvSwitchTimerLists+0xc4>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	3304      	adds	r3, #4
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fe f89f 	bl	800ae50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd20:	f003 0304 	and.w	r3, r3, #4
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d02f      	beq.n	800cd88 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	699b      	ldr	r3, [r3, #24]
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	4413      	add	r3, r2
 800cd30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d90e      	bls.n	800cd58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd46:	4b1a      	ldr	r3, [pc, #104]	@ (800cdb0 <prvSwitchTimerLists+0xc4>)
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	3304      	adds	r3, #4
 800cd4e:	4619      	mov	r1, r3
 800cd50:	4610      	mov	r0, r2
 800cd52:	f7fe f844 	bl	800adde <vListInsert>
 800cd56:	e017      	b.n	800cd88 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd58:	2300      	movs	r3, #0
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	693a      	ldr	r2, [r7, #16]
 800cd60:	2100      	movs	r1, #0
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f7ff fd58 	bl	800c818 <xTimerGenericCommand>
 800cd68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10b      	bne.n	800cd88 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	603b      	str	r3, [r7, #0]
}
 800cd82:	bf00      	nop
 800cd84:	bf00      	nop
 800cd86:	e7fd      	b.n	800cd84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd88:	4b09      	ldr	r3, [pc, #36]	@ (800cdb0 <prvSwitchTimerLists+0xc4>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1b0      	bne.n	800ccf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cd92:	4b07      	ldr	r3, [pc, #28]	@ (800cdb0 <prvSwitchTimerLists+0xc4>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cd98:	4b06      	ldr	r3, [pc, #24]	@ (800cdb4 <prvSwitchTimerLists+0xc8>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a04      	ldr	r2, [pc, #16]	@ (800cdb0 <prvSwitchTimerLists+0xc4>)
 800cd9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cda0:	4a04      	ldr	r2, [pc, #16]	@ (800cdb4 <prvSwitchTimerLists+0xc8>)
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	6013      	str	r3, [r2, #0]
}
 800cda6:	bf00      	nop
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	20002cd0 	.word	0x20002cd0
 800cdb4:	20002cd4 	.word	0x20002cd4

0800cdb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cdbe:	f000 f96b 	bl	800d098 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cdc2:	4b15      	ldr	r3, [pc, #84]	@ (800ce18 <prvCheckForValidListAndQueue+0x60>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d120      	bne.n	800ce0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cdca:	4814      	ldr	r0, [pc, #80]	@ (800ce1c <prvCheckForValidListAndQueue+0x64>)
 800cdcc:	f7fd ffb6 	bl	800ad3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cdd0:	4813      	ldr	r0, [pc, #76]	@ (800ce20 <prvCheckForValidListAndQueue+0x68>)
 800cdd2:	f7fd ffb3 	bl	800ad3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cdd6:	4b13      	ldr	r3, [pc, #76]	@ (800ce24 <prvCheckForValidListAndQueue+0x6c>)
 800cdd8:	4a10      	ldr	r2, [pc, #64]	@ (800ce1c <prvCheckForValidListAndQueue+0x64>)
 800cdda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cddc:	4b12      	ldr	r3, [pc, #72]	@ (800ce28 <prvCheckForValidListAndQueue+0x70>)
 800cdde:	4a10      	ldr	r2, [pc, #64]	@ (800ce20 <prvCheckForValidListAndQueue+0x68>)
 800cde0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cde2:	2300      	movs	r3, #0
 800cde4:	9300      	str	r3, [sp, #0]
 800cde6:	4b11      	ldr	r3, [pc, #68]	@ (800ce2c <prvCheckForValidListAndQueue+0x74>)
 800cde8:	4a11      	ldr	r2, [pc, #68]	@ (800ce30 <prvCheckForValidListAndQueue+0x78>)
 800cdea:	2110      	movs	r1, #16
 800cdec:	200a      	movs	r0, #10
 800cdee:	f7fe f8c3 	bl	800af78 <xQueueGenericCreateStatic>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	4a08      	ldr	r2, [pc, #32]	@ (800ce18 <prvCheckForValidListAndQueue+0x60>)
 800cdf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cdf8:	4b07      	ldr	r3, [pc, #28]	@ (800ce18 <prvCheckForValidListAndQueue+0x60>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d005      	beq.n	800ce0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce00:	4b05      	ldr	r3, [pc, #20]	@ (800ce18 <prvCheckForValidListAndQueue+0x60>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	490b      	ldr	r1, [pc, #44]	@ (800ce34 <prvCheckForValidListAndQueue+0x7c>)
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fe fd24 	bl	800b854 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce0c:	f000 f976 	bl	800d0fc <vPortExitCritical>
}
 800ce10:	bf00      	nop
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	20002cd8 	.word	0x20002cd8
 800ce1c:	20002ca8 	.word	0x20002ca8
 800ce20:	20002cbc 	.word	0x20002cbc
 800ce24:	20002cd0 	.word	0x20002cd0
 800ce28:	20002cd4 	.word	0x20002cd4
 800ce2c:	20002d84 	.word	0x20002d84
 800ce30:	20002ce4 	.word	0x20002ce4
 800ce34:	08011074 	.word	0x08011074

0800ce38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	3b04      	subs	r3, #4
 800ce48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ce50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	3b04      	subs	r3, #4
 800ce56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	f023 0201 	bic.w	r2, r3, #1
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3b04      	subs	r3, #4
 800ce66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce68:	4a0c      	ldr	r2, [pc, #48]	@ (800ce9c <pxPortInitialiseStack+0x64>)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	3b14      	subs	r3, #20
 800ce72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	3b04      	subs	r3, #4
 800ce7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f06f 0202 	mvn.w	r2, #2
 800ce86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	3b20      	subs	r3, #32
 800ce8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	0800cea1 	.word	0x0800cea1

0800cea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cea0:	b480      	push	{r7}
 800cea2:	b085      	sub	sp, #20
 800cea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ceaa:	4b13      	ldr	r3, [pc, #76]	@ (800cef8 <prvTaskExitError+0x58>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb2:	d00b      	beq.n	800cecc <prvTaskExitError+0x2c>
	__asm volatile
 800ceb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb8:	f383 8811 	msr	BASEPRI, r3
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	60fb      	str	r3, [r7, #12]
}
 800cec6:	bf00      	nop
 800cec8:	bf00      	nop
 800ceca:	e7fd      	b.n	800cec8 <prvTaskExitError+0x28>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	60bb      	str	r3, [r7, #8]
}
 800cede:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cee0:	bf00      	nop
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d0fc      	beq.n	800cee2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cee8:	bf00      	nop
 800ceea:	bf00      	nop
 800ceec:	3714      	adds	r7, #20
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	2000011c 	.word	0x2000011c
 800cefc:	00000000 	.word	0x00000000

0800cf00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf00:	4b07      	ldr	r3, [pc, #28]	@ (800cf20 <pxCurrentTCBConst2>)
 800cf02:	6819      	ldr	r1, [r3, #0]
 800cf04:	6808      	ldr	r0, [r1, #0]
 800cf06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0a:	f380 8809 	msr	PSP, r0
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f04f 0000 	mov.w	r0, #0
 800cf16:	f380 8811 	msr	BASEPRI, r0
 800cf1a:	4770      	bx	lr
 800cf1c:	f3af 8000 	nop.w

0800cf20 <pxCurrentTCBConst2>:
 800cf20:	200027a8 	.word	0x200027a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf24:	bf00      	nop
 800cf26:	bf00      	nop

0800cf28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf28:	4808      	ldr	r0, [pc, #32]	@ (800cf4c <prvPortStartFirstTask+0x24>)
 800cf2a:	6800      	ldr	r0, [r0, #0]
 800cf2c:	6800      	ldr	r0, [r0, #0]
 800cf2e:	f380 8808 	msr	MSP, r0
 800cf32:	f04f 0000 	mov.w	r0, #0
 800cf36:	f380 8814 	msr	CONTROL, r0
 800cf3a:	b662      	cpsie	i
 800cf3c:	b661      	cpsie	f
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	f3bf 8f6f 	isb	sy
 800cf46:	df00      	svc	0
 800cf48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cf4a:	bf00      	nop
 800cf4c:	e000ed08 	.word	0xe000ed08

0800cf50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cf56:	4b47      	ldr	r3, [pc, #284]	@ (800d074 <xPortStartScheduler+0x124>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a47      	ldr	r2, [pc, #284]	@ (800d078 <xPortStartScheduler+0x128>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d10b      	bne.n	800cf78 <xPortStartScheduler+0x28>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	60fb      	str	r3, [r7, #12]
}
 800cf72:	bf00      	nop
 800cf74:	bf00      	nop
 800cf76:	e7fd      	b.n	800cf74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cf78:	4b3e      	ldr	r3, [pc, #248]	@ (800d074 <xPortStartScheduler+0x124>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a3f      	ldr	r2, [pc, #252]	@ (800d07c <xPortStartScheduler+0x12c>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d10b      	bne.n	800cf9a <xPortStartScheduler+0x4a>
	__asm volatile
 800cf82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf86:	f383 8811 	msr	BASEPRI, r3
 800cf8a:	f3bf 8f6f 	isb	sy
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	613b      	str	r3, [r7, #16]
}
 800cf94:	bf00      	nop
 800cf96:	bf00      	nop
 800cf98:	e7fd      	b.n	800cf96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cf9a:	4b39      	ldr	r3, [pc, #228]	@ (800d080 <xPortStartScheduler+0x130>)
 800cf9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	22ff      	movs	r2, #255	@ 0xff
 800cfaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cfb4:	78fb      	ldrb	r3, [r7, #3]
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	4b31      	ldr	r3, [pc, #196]	@ (800d084 <xPortStartScheduler+0x134>)
 800cfc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cfc2:	4b31      	ldr	r3, [pc, #196]	@ (800d088 <xPortStartScheduler+0x138>)
 800cfc4:	2207      	movs	r2, #7
 800cfc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfc8:	e009      	b.n	800cfde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cfca:	4b2f      	ldr	r3, [pc, #188]	@ (800d088 <xPortStartScheduler+0x138>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	4a2d      	ldr	r2, [pc, #180]	@ (800d088 <xPortStartScheduler+0x138>)
 800cfd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cfd4:	78fb      	ldrb	r3, [r7, #3]
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfde:	78fb      	ldrb	r3, [r7, #3]
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfe6:	2b80      	cmp	r3, #128	@ 0x80
 800cfe8:	d0ef      	beq.n	800cfca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cfea:	4b27      	ldr	r3, [pc, #156]	@ (800d088 <xPortStartScheduler+0x138>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f1c3 0307 	rsb	r3, r3, #7
 800cff2:	2b04      	cmp	r3, #4
 800cff4:	d00b      	beq.n	800d00e <xPortStartScheduler+0xbe>
	__asm volatile
 800cff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	60bb      	str	r3, [r7, #8]
}
 800d008:	bf00      	nop
 800d00a:	bf00      	nop
 800d00c:	e7fd      	b.n	800d00a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d00e:	4b1e      	ldr	r3, [pc, #120]	@ (800d088 <xPortStartScheduler+0x138>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	021b      	lsls	r3, r3, #8
 800d014:	4a1c      	ldr	r2, [pc, #112]	@ (800d088 <xPortStartScheduler+0x138>)
 800d016:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d018:	4b1b      	ldr	r3, [pc, #108]	@ (800d088 <xPortStartScheduler+0x138>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d020:	4a19      	ldr	r2, [pc, #100]	@ (800d088 <xPortStartScheduler+0x138>)
 800d022:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	b2da      	uxtb	r2, r3
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d02c:	4b17      	ldr	r3, [pc, #92]	@ (800d08c <xPortStartScheduler+0x13c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a16      	ldr	r2, [pc, #88]	@ (800d08c <xPortStartScheduler+0x13c>)
 800d032:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d038:	4b14      	ldr	r3, [pc, #80]	@ (800d08c <xPortStartScheduler+0x13c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a13      	ldr	r2, [pc, #76]	@ (800d08c <xPortStartScheduler+0x13c>)
 800d03e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d042:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d044:	f000 f8da 	bl	800d1fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d048:	4b11      	ldr	r3, [pc, #68]	@ (800d090 <xPortStartScheduler+0x140>)
 800d04a:	2200      	movs	r2, #0
 800d04c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d04e:	f000 f8f9 	bl	800d244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d052:	4b10      	ldr	r3, [pc, #64]	@ (800d094 <xPortStartScheduler+0x144>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a0f      	ldr	r2, [pc, #60]	@ (800d094 <xPortStartScheduler+0x144>)
 800d058:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d05c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d05e:	f7ff ff63 	bl	800cf28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d062:	f7ff f82f 	bl	800c0c4 <vTaskSwitchContext>
	prvTaskExitError();
 800d066:	f7ff ff1b 	bl	800cea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d06a:	2300      	movs	r3, #0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3718      	adds	r7, #24
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	e000ed00 	.word	0xe000ed00
 800d078:	410fc271 	.word	0x410fc271
 800d07c:	410fc270 	.word	0x410fc270
 800d080:	e000e400 	.word	0xe000e400
 800d084:	20002dd4 	.word	0x20002dd4
 800d088:	20002dd8 	.word	0x20002dd8
 800d08c:	e000ed20 	.word	0xe000ed20
 800d090:	2000011c 	.word	0x2000011c
 800d094:	e000ef34 	.word	0xe000ef34

0800d098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
	__asm volatile
 800d09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	607b      	str	r3, [r7, #4]
}
 800d0b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d0b2:	4b10      	ldr	r3, [pc, #64]	@ (800d0f4 <vPortEnterCritical+0x5c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	4a0e      	ldr	r2, [pc, #56]	@ (800d0f4 <vPortEnterCritical+0x5c>)
 800d0ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d0bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f4 <vPortEnterCritical+0x5c>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d110      	bne.n	800d0e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800d0f8 <vPortEnterCritical+0x60>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00b      	beq.n	800d0e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	603b      	str	r3, [r7, #0]
}
 800d0e0:	bf00      	nop
 800d0e2:	bf00      	nop
 800d0e4:	e7fd      	b.n	800d0e2 <vPortEnterCritical+0x4a>
	}
}
 800d0e6:	bf00      	nop
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	2000011c 	.word	0x2000011c
 800d0f8:	e000ed04 	.word	0xe000ed04

0800d0fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d102:	4b12      	ldr	r3, [pc, #72]	@ (800d14c <vPortExitCritical+0x50>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10b      	bne.n	800d122 <vPortExitCritical+0x26>
	__asm volatile
 800d10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	607b      	str	r3, [r7, #4]
}
 800d11c:	bf00      	nop
 800d11e:	bf00      	nop
 800d120:	e7fd      	b.n	800d11e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d122:	4b0a      	ldr	r3, [pc, #40]	@ (800d14c <vPortExitCritical+0x50>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	3b01      	subs	r3, #1
 800d128:	4a08      	ldr	r2, [pc, #32]	@ (800d14c <vPortExitCritical+0x50>)
 800d12a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d12c:	4b07      	ldr	r3, [pc, #28]	@ (800d14c <vPortExitCritical+0x50>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d105      	bne.n	800d140 <vPortExitCritical+0x44>
 800d134:	2300      	movs	r3, #0
 800d136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	f383 8811 	msr	BASEPRI, r3
}
 800d13e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	2000011c 	.word	0x2000011c

0800d150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d150:	f3ef 8009 	mrs	r0, PSP
 800d154:	f3bf 8f6f 	isb	sy
 800d158:	4b15      	ldr	r3, [pc, #84]	@ (800d1b0 <pxCurrentTCBConst>)
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	f01e 0f10 	tst.w	lr, #16
 800d160:	bf08      	it	eq
 800d162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16a:	6010      	str	r0, [r2, #0]
 800d16c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d174:	f380 8811 	msr	BASEPRI, r0
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f7fe ffa0 	bl	800c0c4 <vTaskSwitchContext>
 800d184:	f04f 0000 	mov.w	r0, #0
 800d188:	f380 8811 	msr	BASEPRI, r0
 800d18c:	bc09      	pop	{r0, r3}
 800d18e:	6819      	ldr	r1, [r3, #0]
 800d190:	6808      	ldr	r0, [r1, #0]
 800d192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d196:	f01e 0f10 	tst.w	lr, #16
 800d19a:	bf08      	it	eq
 800d19c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d1a0:	f380 8809 	msr	PSP, r0
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	f3af 8000 	nop.w

0800d1b0 <pxCurrentTCBConst>:
 800d1b0:	200027a8 	.word	0x200027a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d1b4:	bf00      	nop
 800d1b6:	bf00      	nop

0800d1b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c2:	f383 8811 	msr	BASEPRI, r3
 800d1c6:	f3bf 8f6f 	isb	sy
 800d1ca:	f3bf 8f4f 	dsb	sy
 800d1ce:	607b      	str	r3, [r7, #4]
}
 800d1d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d1d2:	f7fe febd 	bl	800bf50 <xTaskIncrementTick>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d003      	beq.n	800d1e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d1dc:	4b06      	ldr	r3, [pc, #24]	@ (800d1f8 <xPortSysTickHandler+0x40>)
 800d1de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1e2:	601a      	str	r2, [r3, #0]
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	f383 8811 	msr	BASEPRI, r3
}
 800d1ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d1f0:	bf00      	nop
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	e000ed04 	.word	0xe000ed04

0800d1fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d200:	4b0b      	ldr	r3, [pc, #44]	@ (800d230 <vPortSetupTimerInterrupt+0x34>)
 800d202:	2200      	movs	r2, #0
 800d204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d206:	4b0b      	ldr	r3, [pc, #44]	@ (800d234 <vPortSetupTimerInterrupt+0x38>)
 800d208:	2200      	movs	r2, #0
 800d20a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d20c:	4b0a      	ldr	r3, [pc, #40]	@ (800d238 <vPortSetupTimerInterrupt+0x3c>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a0a      	ldr	r2, [pc, #40]	@ (800d23c <vPortSetupTimerInterrupt+0x40>)
 800d212:	fba2 2303 	umull	r2, r3, r2, r3
 800d216:	099b      	lsrs	r3, r3, #6
 800d218:	4a09      	ldr	r2, [pc, #36]	@ (800d240 <vPortSetupTimerInterrupt+0x44>)
 800d21a:	3b01      	subs	r3, #1
 800d21c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d21e:	4b04      	ldr	r3, [pc, #16]	@ (800d230 <vPortSetupTimerInterrupt+0x34>)
 800d220:	2207      	movs	r2, #7
 800d222:	601a      	str	r2, [r3, #0]
}
 800d224:	bf00      	nop
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop
 800d230:	e000e010 	.word	0xe000e010
 800d234:	e000e018 	.word	0xe000e018
 800d238:	20000000 	.word	0x20000000
 800d23c:	10624dd3 	.word	0x10624dd3
 800d240:	e000e014 	.word	0xe000e014

0800d244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d244:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d254 <vPortEnableVFP+0x10>
 800d248:	6801      	ldr	r1, [r0, #0]
 800d24a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d24e:	6001      	str	r1, [r0, #0]
 800d250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d252:	bf00      	nop
 800d254:	e000ed88 	.word	0xe000ed88

0800d258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d258:	b480      	push	{r7}
 800d25a:	b085      	sub	sp, #20
 800d25c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d25e:	f3ef 8305 	mrs	r3, IPSR
 800d262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2b0f      	cmp	r3, #15
 800d268:	d915      	bls.n	800d296 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d26a:	4a18      	ldr	r2, [pc, #96]	@ (800d2cc <vPortValidateInterruptPriority+0x74>)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	4413      	add	r3, r2
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d274:	4b16      	ldr	r3, [pc, #88]	@ (800d2d0 <vPortValidateInterruptPriority+0x78>)
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	7afa      	ldrb	r2, [r7, #11]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d20b      	bcs.n	800d296 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	607b      	str	r3, [r7, #4]
}
 800d290:	bf00      	nop
 800d292:	bf00      	nop
 800d294:	e7fd      	b.n	800d292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d296:	4b0f      	ldr	r3, [pc, #60]	@ (800d2d4 <vPortValidateInterruptPriority+0x7c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d29e:	4b0e      	ldr	r3, [pc, #56]	@ (800d2d8 <vPortValidateInterruptPriority+0x80>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d90b      	bls.n	800d2be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2aa:	f383 8811 	msr	BASEPRI, r3
 800d2ae:	f3bf 8f6f 	isb	sy
 800d2b2:	f3bf 8f4f 	dsb	sy
 800d2b6:	603b      	str	r3, [r7, #0]
}
 800d2b8:	bf00      	nop
 800d2ba:	bf00      	nop
 800d2bc:	e7fd      	b.n	800d2ba <vPortValidateInterruptPriority+0x62>
	}
 800d2be:	bf00      	nop
 800d2c0:	3714      	adds	r7, #20
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	e000e3f0 	.word	0xe000e3f0
 800d2d0:	20002dd4 	.word	0x20002dd4
 800d2d4:	e000ed0c 	.word	0xe000ed0c
 800d2d8:	20002dd8 	.word	0x20002dd8

0800d2dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b08a      	sub	sp, #40	@ 0x28
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d2e8:	f7fe fd76 	bl	800bdd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d2ec:	4b5c      	ldr	r3, [pc, #368]	@ (800d460 <pvPortMalloc+0x184>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d101      	bne.n	800d2f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d2f4:	f000 f924 	bl	800d540 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d2f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d464 <pvPortMalloc+0x188>)
 800d2fa:	681a      	ldr	r2, [r3, #0]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4013      	ands	r3, r2
 800d300:	2b00      	cmp	r3, #0
 800d302:	f040 8095 	bne.w	800d430 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d01e      	beq.n	800d34a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d30c:	2208      	movs	r2, #8
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4413      	add	r3, r2
 800d312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f003 0307 	and.w	r3, r3, #7
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d015      	beq.n	800d34a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f023 0307 	bic.w	r3, r3, #7
 800d324:	3308      	adds	r3, #8
 800d326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f003 0307 	and.w	r3, r3, #7
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d00b      	beq.n	800d34a <pvPortMalloc+0x6e>
	__asm volatile
 800d332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d336:	f383 8811 	msr	BASEPRI, r3
 800d33a:	f3bf 8f6f 	isb	sy
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	617b      	str	r3, [r7, #20]
}
 800d344:	bf00      	nop
 800d346:	bf00      	nop
 800d348:	e7fd      	b.n	800d346 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d06f      	beq.n	800d430 <pvPortMalloc+0x154>
 800d350:	4b45      	ldr	r3, [pc, #276]	@ (800d468 <pvPortMalloc+0x18c>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	429a      	cmp	r2, r3
 800d358:	d86a      	bhi.n	800d430 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d35a:	4b44      	ldr	r3, [pc, #272]	@ (800d46c <pvPortMalloc+0x190>)
 800d35c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d35e:	4b43      	ldr	r3, [pc, #268]	@ (800d46c <pvPortMalloc+0x190>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d364:	e004      	b.n	800d370 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	429a      	cmp	r2, r3
 800d378:	d903      	bls.n	800d382 <pvPortMalloc+0xa6>
 800d37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d1f1      	bne.n	800d366 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d382:	4b37      	ldr	r3, [pc, #220]	@ (800d460 <pvPortMalloc+0x184>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d388:	429a      	cmp	r2, r3
 800d38a:	d051      	beq.n	800d430 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d38c:	6a3b      	ldr	r3, [r7, #32]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2208      	movs	r2, #8
 800d392:	4413      	add	r3, r2
 800d394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	6a3b      	ldr	r3, [r7, #32]
 800d39c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a0:	685a      	ldr	r2, [r3, #4]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	1ad2      	subs	r2, r2, r3
 800d3a6:	2308      	movs	r3, #8
 800d3a8:	005b      	lsls	r3, r3, #1
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d920      	bls.n	800d3f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d3ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	f003 0307 	and.w	r3, r3, #7
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00b      	beq.n	800d3d8 <pvPortMalloc+0xfc>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	613b      	str	r3, [r7, #16]
}
 800d3d2:	bf00      	nop
 800d3d4:	bf00      	nop
 800d3d6:	e7fd      	b.n	800d3d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3da:	685a      	ldr	r2, [r3, #4]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	1ad2      	subs	r2, r2, r3
 800d3e0:	69bb      	ldr	r3, [r7, #24]
 800d3e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d3ea:	69b8      	ldr	r0, [r7, #24]
 800d3ec:	f000 f90a 	bl	800d604 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d468 <pvPortMalloc+0x18c>)
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	4a1b      	ldr	r2, [pc, #108]	@ (800d468 <pvPortMalloc+0x18c>)
 800d3fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3fe:	4b1a      	ldr	r3, [pc, #104]	@ (800d468 <pvPortMalloc+0x18c>)
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	4b1b      	ldr	r3, [pc, #108]	@ (800d470 <pvPortMalloc+0x194>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	429a      	cmp	r2, r3
 800d408:	d203      	bcs.n	800d412 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d40a:	4b17      	ldr	r3, [pc, #92]	@ (800d468 <pvPortMalloc+0x18c>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	4a18      	ldr	r2, [pc, #96]	@ (800d470 <pvPortMalloc+0x194>)
 800d410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d414:	685a      	ldr	r2, [r3, #4]
 800d416:	4b13      	ldr	r3, [pc, #76]	@ (800d464 <pvPortMalloc+0x188>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	431a      	orrs	r2, r3
 800d41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d426:	4b13      	ldr	r3, [pc, #76]	@ (800d474 <pvPortMalloc+0x198>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	3301      	adds	r3, #1
 800d42c:	4a11      	ldr	r2, [pc, #68]	@ (800d474 <pvPortMalloc+0x198>)
 800d42e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d430:	f7fe fce0 	bl	800bdf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	f003 0307 	and.w	r3, r3, #7
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00b      	beq.n	800d456 <pvPortMalloc+0x17a>
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	60fb      	str	r3, [r7, #12]
}
 800d450:	bf00      	nop
 800d452:	bf00      	nop
 800d454:	e7fd      	b.n	800d452 <pvPortMalloc+0x176>
	return pvReturn;
 800d456:	69fb      	ldr	r3, [r7, #28]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3728      	adds	r7, #40	@ 0x28
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	20008ba4 	.word	0x20008ba4
 800d464:	20008bb8 	.word	0x20008bb8
 800d468:	20008ba8 	.word	0x20008ba8
 800d46c:	20008b9c 	.word	0x20008b9c
 800d470:	20008bac 	.word	0x20008bac
 800d474:	20008bb0 	.word	0x20008bb0

0800d478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b086      	sub	sp, #24
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d04f      	beq.n	800d52a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d48a:	2308      	movs	r3, #8
 800d48c:	425b      	negs	r3, r3
 800d48e:	697a      	ldr	r2, [r7, #20]
 800d490:	4413      	add	r3, r2
 800d492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	4b25      	ldr	r3, [pc, #148]	@ (800d534 <vPortFree+0xbc>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4013      	ands	r3, r2
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10b      	bne.n	800d4be <vPortFree+0x46>
	__asm volatile
 800d4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	60fb      	str	r3, [r7, #12]
}
 800d4b8:	bf00      	nop
 800d4ba:	bf00      	nop
 800d4bc:	e7fd      	b.n	800d4ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00b      	beq.n	800d4de <vPortFree+0x66>
	__asm volatile
 800d4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	60bb      	str	r3, [r7, #8]
}
 800d4d8:	bf00      	nop
 800d4da:	bf00      	nop
 800d4dc:	e7fd      	b.n	800d4da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	685a      	ldr	r2, [r3, #4]
 800d4e2:	4b14      	ldr	r3, [pc, #80]	@ (800d534 <vPortFree+0xbc>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4013      	ands	r3, r2
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d01e      	beq.n	800d52a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d11a      	bne.n	800d52a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	685a      	ldr	r2, [r3, #4]
 800d4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800d534 <vPortFree+0xbc>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	43db      	mvns	r3, r3
 800d4fe:	401a      	ands	r2, r3
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d504:	f7fe fc68 	bl	800bdd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	685a      	ldr	r2, [r3, #4]
 800d50c:	4b0a      	ldr	r3, [pc, #40]	@ (800d538 <vPortFree+0xc0>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4413      	add	r3, r2
 800d512:	4a09      	ldr	r2, [pc, #36]	@ (800d538 <vPortFree+0xc0>)
 800d514:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d516:	6938      	ldr	r0, [r7, #16]
 800d518:	f000 f874 	bl	800d604 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d51c:	4b07      	ldr	r3, [pc, #28]	@ (800d53c <vPortFree+0xc4>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	3301      	adds	r3, #1
 800d522:	4a06      	ldr	r2, [pc, #24]	@ (800d53c <vPortFree+0xc4>)
 800d524:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d526:	f7fe fc65 	bl	800bdf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d52a:	bf00      	nop
 800d52c:	3718      	adds	r7, #24
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	20008bb8 	.word	0x20008bb8
 800d538:	20008ba8 	.word	0x20008ba8
 800d53c:	20008bb4 	.word	0x20008bb4

0800d540 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d546:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 800d54a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d54c:	4b27      	ldr	r3, [pc, #156]	@ (800d5ec <prvHeapInit+0xac>)
 800d54e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f003 0307 	and.w	r3, r3, #7
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00c      	beq.n	800d574 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	3307      	adds	r3, #7
 800d55e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f023 0307 	bic.w	r3, r3, #7
 800d566:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d568:	68ba      	ldr	r2, [r7, #8]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	1ad3      	subs	r3, r2, r3
 800d56e:	4a1f      	ldr	r2, [pc, #124]	@ (800d5ec <prvHeapInit+0xac>)
 800d570:	4413      	add	r3, r2
 800d572:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d578:	4a1d      	ldr	r2, [pc, #116]	@ (800d5f0 <prvHeapInit+0xb0>)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d57e:	4b1c      	ldr	r3, [pc, #112]	@ (800d5f0 <prvHeapInit+0xb0>)
 800d580:	2200      	movs	r2, #0
 800d582:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	68ba      	ldr	r2, [r7, #8]
 800d588:	4413      	add	r3, r2
 800d58a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d58c:	2208      	movs	r2, #8
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	1a9b      	subs	r3, r3, r2
 800d592:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f023 0307 	bic.w	r3, r3, #7
 800d59a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	4a15      	ldr	r2, [pc, #84]	@ (800d5f4 <prvHeapInit+0xb4>)
 800d5a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d5a2:	4b14      	ldr	r3, [pc, #80]	@ (800d5f4 <prvHeapInit+0xb4>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d5aa:	4b12      	ldr	r3, [pc, #72]	@ (800d5f4 <prvHeapInit+0xb4>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	1ad2      	subs	r2, r2, r3
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d5c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d5f4 <prvHeapInit+0xb4>)
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	4a0a      	ldr	r2, [pc, #40]	@ (800d5f8 <prvHeapInit+0xb8>)
 800d5ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	4a09      	ldr	r2, [pc, #36]	@ (800d5fc <prvHeapInit+0xbc>)
 800d5d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d5d8:	4b09      	ldr	r3, [pc, #36]	@ (800d600 <prvHeapInit+0xc0>)
 800d5da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d5de:	601a      	str	r2, [r3, #0]
}
 800d5e0:	bf00      	nop
 800d5e2:	3714      	adds	r7, #20
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr
 800d5ec:	20002ddc 	.word	0x20002ddc
 800d5f0:	20008b9c 	.word	0x20008b9c
 800d5f4:	20008ba4 	.word	0x20008ba4
 800d5f8:	20008bac 	.word	0x20008bac
 800d5fc:	20008ba8 	.word	0x20008ba8
 800d600:	20008bb8 	.word	0x20008bb8

0800d604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d60c:	4b28      	ldr	r3, [pc, #160]	@ (800d6b0 <prvInsertBlockIntoFreeList+0xac>)
 800d60e:	60fb      	str	r3, [r7, #12]
 800d610:	e002      	b.n	800d618 <prvInsertBlockIntoFreeList+0x14>
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	60fb      	str	r3, [r7, #12]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d8f7      	bhi.n	800d612 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	4413      	add	r3, r2
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	429a      	cmp	r2, r3
 800d632:	d108      	bne.n	800d646 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	685a      	ldr	r2, [r3, #4]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	441a      	add	r2, r3
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	441a      	add	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	429a      	cmp	r2, r3
 800d658:	d118      	bne.n	800d68c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	4b15      	ldr	r3, [pc, #84]	@ (800d6b4 <prvInsertBlockIntoFreeList+0xb0>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	429a      	cmp	r2, r3
 800d664:	d00d      	beq.n	800d682 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	685a      	ldr	r2, [r3, #4]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	441a      	add	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	601a      	str	r2, [r3, #0]
 800d680:	e008      	b.n	800d694 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d682:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b4 <prvInsertBlockIntoFreeList+0xb0>)
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	601a      	str	r2, [r3, #0]
 800d68a:	e003      	b.n	800d694 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d002      	beq.n	800d6a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6a2:	bf00      	nop
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	20008b9c 	.word	0x20008b9c
 800d6b4:	20008ba4 	.word	0x20008ba4

0800d6b8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d6bc:	2200      	movs	r2, #0
 800d6be:	4912      	ldr	r1, [pc, #72]	@ (800d708 <MX_USB_Device_Init+0x50>)
 800d6c0:	4812      	ldr	r0, [pc, #72]	@ (800d70c <MX_USB_Device_Init+0x54>)
 800d6c2:	f7fb ffd5 	bl	8009670 <USBD_Init>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d6cc:	f7f4 f94e 	bl	800196c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d6d0:	490f      	ldr	r1, [pc, #60]	@ (800d710 <MX_USB_Device_Init+0x58>)
 800d6d2:	480e      	ldr	r0, [pc, #56]	@ (800d70c <MX_USB_Device_Init+0x54>)
 800d6d4:	f7fb fffc 	bl	80096d0 <USBD_RegisterClass>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d001      	beq.n	800d6e2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d6de:	f7f4 f945 	bl	800196c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d6e2:	490c      	ldr	r1, [pc, #48]	@ (800d714 <MX_USB_Device_Init+0x5c>)
 800d6e4:	4809      	ldr	r0, [pc, #36]	@ (800d70c <MX_USB_Device_Init+0x54>)
 800d6e6:	f7fb ff1d 	bl	8009524 <USBD_CDC_RegisterInterface>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d001      	beq.n	800d6f4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d6f0:	f7f4 f93c 	bl	800196c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d6f4:	4805      	ldr	r0, [pc, #20]	@ (800d70c <MX_USB_Device_Init+0x54>)
 800d6f6:	f7fc f812 	bl	800971e <USBD_Start>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d001      	beq.n	800d704 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d700:	f7f4 f934 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d704:	bf00      	nop
 800d706:	bd80      	pop	{r7, pc}
 800d708:	20000134 	.word	0x20000134
 800d70c:	20008bbc 	.word	0x20008bbc
 800d710:	20000018 	.word	0x20000018
 800d714:	20000120 	.word	0x20000120

0800d718 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d71c:	2200      	movs	r2, #0
 800d71e:	4905      	ldr	r1, [pc, #20]	@ (800d734 <CDC_Init_FS+0x1c>)
 800d720:	4805      	ldr	r0, [pc, #20]	@ (800d738 <CDC_Init_FS+0x20>)
 800d722:	f7fb ff14 	bl	800954e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d726:	4905      	ldr	r1, [pc, #20]	@ (800d73c <CDC_Init_FS+0x24>)
 800d728:	4803      	ldr	r0, [pc, #12]	@ (800d738 <CDC_Init_FS+0x20>)
 800d72a:	f7fb ff2e 	bl	800958a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d72e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d730:	4618      	mov	r0, r3
 800d732:	bd80      	pop	{r7, pc}
 800d734:	2000968c 	.word	0x2000968c
 800d738:	20008bbc 	.word	0x20008bbc
 800d73c:	20008e8c 	.word	0x20008e8c

0800d740 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d740:	b480      	push	{r7}
 800d742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d744:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d746:	4618      	mov	r0, r3
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	4603      	mov	r3, r0
 800d758:	6039      	str	r1, [r7, #0]
 800d75a:	71fb      	strb	r3, [r7, #7]
 800d75c:	4613      	mov	r3, r2
 800d75e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d760:	79fb      	ldrb	r3, [r7, #7]
 800d762:	2b23      	cmp	r3, #35	@ 0x23
 800d764:	d84a      	bhi.n	800d7fc <CDC_Control_FS+0xac>
 800d766:	a201      	add	r2, pc, #4	@ (adr r2, 800d76c <CDC_Control_FS+0x1c>)
 800d768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76c:	0800d7fd 	.word	0x0800d7fd
 800d770:	0800d7fd 	.word	0x0800d7fd
 800d774:	0800d7fd 	.word	0x0800d7fd
 800d778:	0800d7fd 	.word	0x0800d7fd
 800d77c:	0800d7fd 	.word	0x0800d7fd
 800d780:	0800d7fd 	.word	0x0800d7fd
 800d784:	0800d7fd 	.word	0x0800d7fd
 800d788:	0800d7fd 	.word	0x0800d7fd
 800d78c:	0800d7fd 	.word	0x0800d7fd
 800d790:	0800d7fd 	.word	0x0800d7fd
 800d794:	0800d7fd 	.word	0x0800d7fd
 800d798:	0800d7fd 	.word	0x0800d7fd
 800d79c:	0800d7fd 	.word	0x0800d7fd
 800d7a0:	0800d7fd 	.word	0x0800d7fd
 800d7a4:	0800d7fd 	.word	0x0800d7fd
 800d7a8:	0800d7fd 	.word	0x0800d7fd
 800d7ac:	0800d7fd 	.word	0x0800d7fd
 800d7b0:	0800d7fd 	.word	0x0800d7fd
 800d7b4:	0800d7fd 	.word	0x0800d7fd
 800d7b8:	0800d7fd 	.word	0x0800d7fd
 800d7bc:	0800d7fd 	.word	0x0800d7fd
 800d7c0:	0800d7fd 	.word	0x0800d7fd
 800d7c4:	0800d7fd 	.word	0x0800d7fd
 800d7c8:	0800d7fd 	.word	0x0800d7fd
 800d7cc:	0800d7fd 	.word	0x0800d7fd
 800d7d0:	0800d7fd 	.word	0x0800d7fd
 800d7d4:	0800d7fd 	.word	0x0800d7fd
 800d7d8:	0800d7fd 	.word	0x0800d7fd
 800d7dc:	0800d7fd 	.word	0x0800d7fd
 800d7e0:	0800d7fd 	.word	0x0800d7fd
 800d7e4:	0800d7fd 	.word	0x0800d7fd
 800d7e8:	0800d7fd 	.word	0x0800d7fd
 800d7ec:	0800d7fd 	.word	0x0800d7fd
 800d7f0:	0800d7fd 	.word	0x0800d7fd
 800d7f4:	0800d7fd 	.word	0x0800d7fd
 800d7f8:	0800d7fd 	.word	0x0800d7fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d7fc:	bf00      	nop
  }

  return (USBD_OK);
 800d7fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d816:	6879      	ldr	r1, [r7, #4]
 800d818:	4805      	ldr	r0, [pc, #20]	@ (800d830 <CDC_Receive_FS+0x24>)
 800d81a:	f7fb feb6 	bl	800958a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d81e:	4804      	ldr	r0, [pc, #16]	@ (800d830 <CDC_Receive_FS+0x24>)
 800d820:	f7fb fefc 	bl	800961c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d824:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d826:	4618      	mov	r0, r3
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	20008bbc 	.word	0x20008bbc

0800d834 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d840:	2300      	movs	r3, #0
 800d842:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d844:	4b0d      	ldr	r3, [pc, #52]	@ (800d87c <CDC_Transmit_FS+0x48>)
 800d846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d84a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d852:	2b00      	cmp	r3, #0
 800d854:	d001      	beq.n	800d85a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d856:	2301      	movs	r3, #1
 800d858:	e00b      	b.n	800d872 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d85a:	887b      	ldrh	r3, [r7, #2]
 800d85c:	461a      	mov	r2, r3
 800d85e:	6879      	ldr	r1, [r7, #4]
 800d860:	4806      	ldr	r0, [pc, #24]	@ (800d87c <CDC_Transmit_FS+0x48>)
 800d862:	f7fb fe74 	bl	800954e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d866:	4805      	ldr	r0, [pc, #20]	@ (800d87c <CDC_Transmit_FS+0x48>)
 800d868:	f7fb fea8 	bl	80095bc <USBD_CDC_TransmitPacket>
 800d86c:	4603      	mov	r3, r0
 800d86e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d870:	7bfb      	ldrb	r3, [r7, #15]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	20008bbc 	.word	0x20008bbc

0800d880 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d880:	b480      	push	{r7}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	4613      	mov	r3, r2
 800d88c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d892:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d896:	4618      	mov	r0, r3
 800d898:	371c      	adds	r7, #28
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
	...

0800d8a4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	6039      	str	r1, [r7, #0]
 800d8ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	2212      	movs	r2, #18
 800d8b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d8b6:	4b03      	ldr	r3, [pc, #12]	@ (800d8c4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr
 800d8c4:	20000154 	.word	0x20000154

0800d8c8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	6039      	str	r1, [r7, #0]
 800d8d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	2204      	movs	r2, #4
 800d8d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d8da:	4b03      	ldr	r3, [pc, #12]	@ (800d8e8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr
 800d8e8:	20000168 	.word	0x20000168

0800d8ec <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	6039      	str	r1, [r7, #0]
 800d8f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8f8:	79fb      	ldrb	r3, [r7, #7]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d105      	bne.n	800d90a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d8fe:	683a      	ldr	r2, [r7, #0]
 800d900:	4907      	ldr	r1, [pc, #28]	@ (800d920 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d902:	4808      	ldr	r0, [pc, #32]	@ (800d924 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d904:	f7fc fef5 	bl	800a6f2 <USBD_GetString>
 800d908:	e004      	b.n	800d914 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d90a:	683a      	ldr	r2, [r7, #0]
 800d90c:	4904      	ldr	r1, [pc, #16]	@ (800d920 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d90e:	4805      	ldr	r0, [pc, #20]	@ (800d924 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d910:	f7fc feef 	bl	800a6f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d914:	4b02      	ldr	r3, [pc, #8]	@ (800d920 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d916:	4618      	mov	r0, r3
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	20009e8c 	.word	0x20009e8c
 800d924:	0801107c 	.word	0x0801107c

0800d928 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	4603      	mov	r3, r0
 800d930:	6039      	str	r1, [r7, #0]
 800d932:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d934:	683a      	ldr	r2, [r7, #0]
 800d936:	4904      	ldr	r1, [pc, #16]	@ (800d948 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d938:	4804      	ldr	r0, [pc, #16]	@ (800d94c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d93a:	f7fc feda 	bl	800a6f2 <USBD_GetString>
  return USBD_StrDesc;
 800d93e:	4b02      	ldr	r3, [pc, #8]	@ (800d948 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d940:	4618      	mov	r0, r3
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	20009e8c 	.word	0x20009e8c
 800d94c:	08011094 	.word	0x08011094

0800d950 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	4603      	mov	r3, r0
 800d958:	6039      	str	r1, [r7, #0]
 800d95a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	221a      	movs	r2, #26
 800d960:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d962:	f000 f843 	bl	800d9ec <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d966:	4b02      	ldr	r3, [pc, #8]	@ (800d970 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	2000016c 	.word	0x2000016c

0800d974 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	4603      	mov	r3, r0
 800d97c:	6039      	str	r1, [r7, #0]
 800d97e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d980:	79fb      	ldrb	r3, [r7, #7]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d105      	bne.n	800d992 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	4907      	ldr	r1, [pc, #28]	@ (800d9a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d98a:	4808      	ldr	r0, [pc, #32]	@ (800d9ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d98c:	f7fc feb1 	bl	800a6f2 <USBD_GetString>
 800d990:	e004      	b.n	800d99c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d992:	683a      	ldr	r2, [r7, #0]
 800d994:	4904      	ldr	r1, [pc, #16]	@ (800d9a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d996:	4805      	ldr	r0, [pc, #20]	@ (800d9ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d998:	f7fc feab 	bl	800a6f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d99c:	4b02      	ldr	r3, [pc, #8]	@ (800d9a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3708      	adds	r7, #8
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	20009e8c 	.word	0x20009e8c
 800d9ac:	080110a8 	.word	0x080110a8

0800d9b0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	6039      	str	r1, [r7, #0]
 800d9ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d9bc:	79fb      	ldrb	r3, [r7, #7]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d105      	bne.n	800d9ce <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d9c2:	683a      	ldr	r2, [r7, #0]
 800d9c4:	4907      	ldr	r1, [pc, #28]	@ (800d9e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d9c6:	4808      	ldr	r0, [pc, #32]	@ (800d9e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d9c8:	f7fc fe93 	bl	800a6f2 <USBD_GetString>
 800d9cc:	e004      	b.n	800d9d8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d9ce:	683a      	ldr	r2, [r7, #0]
 800d9d0:	4904      	ldr	r1, [pc, #16]	@ (800d9e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d9d2:	4805      	ldr	r0, [pc, #20]	@ (800d9e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d9d4:	f7fc fe8d 	bl	800a6f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d9d8:	4b02      	ldr	r3, [pc, #8]	@ (800d9e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	20009e8c 	.word	0x20009e8c
 800d9e8:	080110b4 	.word	0x080110b4

0800d9ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800da30 <Get_SerialNum+0x44>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d9f8:	4b0e      	ldr	r3, [pc, #56]	@ (800da34 <Get_SerialNum+0x48>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d9fe:	4b0e      	ldr	r3, [pc, #56]	@ (800da38 <Get_SerialNum+0x4c>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	4413      	add	r3, r2
 800da0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d009      	beq.n	800da26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800da12:	2208      	movs	r2, #8
 800da14:	4909      	ldr	r1, [pc, #36]	@ (800da3c <Get_SerialNum+0x50>)
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f000 f814 	bl	800da44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800da1c:	2204      	movs	r2, #4
 800da1e:	4908      	ldr	r1, [pc, #32]	@ (800da40 <Get_SerialNum+0x54>)
 800da20:	68b8      	ldr	r0, [r7, #8]
 800da22:	f000 f80f 	bl	800da44 <IntToUnicode>
  }
}
 800da26:	bf00      	nop
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	1fff7590 	.word	0x1fff7590
 800da34:	1fff7594 	.word	0x1fff7594
 800da38:	1fff7598 	.word	0x1fff7598
 800da3c:	2000016e 	.word	0x2000016e
 800da40:	2000017e 	.word	0x2000017e

0800da44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800da44:	b480      	push	{r7}
 800da46:	b087      	sub	sp, #28
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	4613      	mov	r3, r2
 800da50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800da52:	2300      	movs	r3, #0
 800da54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800da56:	2300      	movs	r3, #0
 800da58:	75fb      	strb	r3, [r7, #23]
 800da5a:	e027      	b.n	800daac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	0f1b      	lsrs	r3, r3, #28
 800da60:	2b09      	cmp	r3, #9
 800da62:	d80b      	bhi.n	800da7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	0f1b      	lsrs	r3, r3, #28
 800da68:	b2da      	uxtb	r2, r3
 800da6a:	7dfb      	ldrb	r3, [r7, #23]
 800da6c:	005b      	lsls	r3, r3, #1
 800da6e:	4619      	mov	r1, r3
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	440b      	add	r3, r1
 800da74:	3230      	adds	r2, #48	@ 0x30
 800da76:	b2d2      	uxtb	r2, r2
 800da78:	701a      	strb	r2, [r3, #0]
 800da7a:	e00a      	b.n	800da92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	0f1b      	lsrs	r3, r3, #28
 800da80:	b2da      	uxtb	r2, r3
 800da82:	7dfb      	ldrb	r3, [r7, #23]
 800da84:	005b      	lsls	r3, r3, #1
 800da86:	4619      	mov	r1, r3
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	440b      	add	r3, r1
 800da8c:	3237      	adds	r2, #55	@ 0x37
 800da8e:	b2d2      	uxtb	r2, r2
 800da90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	011b      	lsls	r3, r3, #4
 800da96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800da98:	7dfb      	ldrb	r3, [r7, #23]
 800da9a:	005b      	lsls	r3, r3, #1
 800da9c:	3301      	adds	r3, #1
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	4413      	add	r3, r2
 800daa2:	2200      	movs	r2, #0
 800daa4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800daa6:	7dfb      	ldrb	r3, [r7, #23]
 800daa8:	3301      	adds	r3, #1
 800daaa:	75fb      	strb	r3, [r7, #23]
 800daac:	7dfa      	ldrb	r2, [r7, #23]
 800daae:	79fb      	ldrb	r3, [r7, #7]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d3d3      	bcc.n	800da5c <IntToUnicode+0x18>
  }
}
 800dab4:	bf00      	nop
 800dab6:	bf00      	nop
 800dab8:	371c      	adds	r7, #28
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr
	...

0800dac4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b098      	sub	sp, #96	@ 0x60
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dacc:	f107 0310 	add.w	r3, r7, #16
 800dad0:	2250      	movs	r2, #80	@ 0x50
 800dad2:	2100      	movs	r1, #0
 800dad4:	4618      	mov	r0, r3
 800dad6:	f001 f875 	bl	800ebc4 <memset>
  if(pcdHandle->Instance==USB)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a15      	ldr	r2, [pc, #84]	@ (800db34 <HAL_PCD_MspInit+0x70>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d122      	bne.n	800db2a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dae4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dae8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800daea:	2300      	movs	r3, #0
 800daec:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800daee:	f107 0310 	add.w	r3, r7, #16
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7f8 f81c 	bl	8005b30 <HAL_RCCEx_PeriphCLKConfig>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800dafe:	f7f3 ff35 	bl	800196c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800db02:	4b0d      	ldr	r3, [pc, #52]	@ (800db38 <HAL_PCD_MspInit+0x74>)
 800db04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db06:	4a0c      	ldr	r2, [pc, #48]	@ (800db38 <HAL_PCD_MspInit+0x74>)
 800db08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800db0c:	6593      	str	r3, [r2, #88]	@ 0x58
 800db0e:	4b0a      	ldr	r3, [pc, #40]	@ (800db38 <HAL_PCD_MspInit+0x74>)
 800db10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db16:	60fb      	str	r3, [r7, #12]
 800db18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800db1a:	2200      	movs	r2, #0
 800db1c:	2105      	movs	r1, #5
 800db1e:	2014      	movs	r0, #20
 800db20:	f7f4 fb0e 	bl	8002140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800db24:	2014      	movs	r0, #20
 800db26:	f7f4 fb25 	bl	8002174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800db2a:	bf00      	nop
 800db2c:	3760      	adds	r7, #96	@ 0x60
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	40005c00 	.word	0x40005c00
 800db38:	40021000 	.word	0x40021000

0800db3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800db50:	4619      	mov	r1, r3
 800db52:	4610      	mov	r0, r2
 800db54:	f7fb fe2e 	bl	80097b4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800db58:	bf00      	nop
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	460b      	mov	r3, r1
 800db6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800db72:	78fa      	ldrb	r2, [r7, #3]
 800db74:	6879      	ldr	r1, [r7, #4]
 800db76:	4613      	mov	r3, r2
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	4413      	add	r3, r2
 800db7c:	00db      	lsls	r3, r3, #3
 800db7e:	440b      	add	r3, r1
 800db80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	78fb      	ldrb	r3, [r7, #3]
 800db88:	4619      	mov	r1, r3
 800db8a:	f7fb fe68 	bl	800985e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800db8e:	bf00      	nop
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b082      	sub	sp, #8
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	460b      	mov	r3, r1
 800dba0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800dba8:	78fa      	ldrb	r2, [r7, #3]
 800dbaa:	6879      	ldr	r1, [r7, #4]
 800dbac:	4613      	mov	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	00db      	lsls	r3, r3, #3
 800dbb4:	440b      	add	r3, r1
 800dbb6:	3324      	adds	r3, #36	@ 0x24
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	78fb      	ldrb	r3, [r7, #3]
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	f7fb feb1 	bl	8009924 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800dbc2:	bf00      	nop
 800dbc4:	3708      	adds	r7, #8
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b082      	sub	sp, #8
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fb ffc5 	bl	8009b68 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800dbde:	bf00      	nop
 800dbe0:	3708      	adds	r7, #8
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b084      	sub	sp, #16
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	795b      	ldrb	r3, [r3, #5]
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d001      	beq.n	800dbfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dbfa:	f7f3 feb7 	bl	800196c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dc04:	7bfa      	ldrb	r2, [r7, #15]
 800dc06:	4611      	mov	r1, r2
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fb ff6f 	bl	8009aec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fb ff1b 	bl	8009a50 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800dc1a:	bf00      	nop
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fb ff6a 	bl	8009b0c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	7a5b      	ldrb	r3, [r3, #9]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d005      	beq.n	800dc4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc40:	4b04      	ldr	r3, [pc, #16]	@ (800dc54 <HAL_PCD_SuspendCallback+0x30>)
 800dc42:	691b      	ldr	r3, [r3, #16]
 800dc44:	4a03      	ldr	r2, [pc, #12]	@ (800dc54 <HAL_PCD_SuspendCallback+0x30>)
 800dc46:	f043 0306 	orr.w	r3, r3, #6
 800dc4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800dc4c:	bf00      	nop
 800dc4e:	3708      	adds	r7, #8
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	e000ed00 	.word	0xe000ed00

0800dc58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	7a5b      	ldrb	r3, [r3, #9]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d007      	beq.n	800dc78 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc68:	4b08      	ldr	r3, [pc, #32]	@ (800dc8c <HAL_PCD_ResumeCallback+0x34>)
 800dc6a:	691b      	ldr	r3, [r3, #16]
 800dc6c:	4a07      	ldr	r2, [pc, #28]	@ (800dc8c <HAL_PCD_ResumeCallback+0x34>)
 800dc6e:	f023 0306 	bic.w	r3, r3, #6
 800dc72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dc74:	f000 f9f8 	bl	800e068 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fb ff5a 	bl	8009b38 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800dc84:	bf00      	nop
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	e000ed00 	.word	0xe000ed00

0800dc90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800dc98:	4a2b      	ldr	r2, [pc, #172]	@ (800dd48 <USBD_LL_Init+0xb8>)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4a29      	ldr	r2, [pc, #164]	@ (800dd48 <USBD_LL_Init+0xb8>)
 800dca4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800dca8:	4b27      	ldr	r3, [pc, #156]	@ (800dd48 <USBD_LL_Init+0xb8>)
 800dcaa:	4a28      	ldr	r2, [pc, #160]	@ (800dd4c <USBD_LL_Init+0xbc>)
 800dcac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800dcae:	4b26      	ldr	r3, [pc, #152]	@ (800dd48 <USBD_LL_Init+0xb8>)
 800dcb0:	2208      	movs	r2, #8
 800dcb2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dcb4:	4b24      	ldr	r3, [pc, #144]	@ (800dd48 <USBD_LL_Init+0xb8>)
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dcba:	4b23      	ldr	r3, [pc, #140]	@ (800dd48 <USBD_LL_Init+0xb8>)
 800dcbc:	2202      	movs	r2, #2
 800dcbe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800dcc0:	4b21      	ldr	r3, [pc, #132]	@ (800dd48 <USBD_LL_Init+0xb8>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800dcc6:	4b20      	ldr	r3, [pc, #128]	@ (800dd48 <USBD_LL_Init+0xb8>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dccc:	4b1e      	ldr	r3, [pc, #120]	@ (800dd48 <USBD_LL_Init+0xb8>)
 800dcce:	2200      	movs	r2, #0
 800dcd0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dcd2:	4b1d      	ldr	r3, [pc, #116]	@ (800dd48 <USBD_LL_Init+0xb8>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dcd8:	481b      	ldr	r0, [pc, #108]	@ (800dd48 <USBD_LL_Init+0xb8>)
 800dcda:	f7f5 fc14 	bl	8003506 <HAL_PCD_Init>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800dce4:	f7f3 fe42 	bl	800196c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dcee:	2318      	movs	r3, #24
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	f7f7 f89b 	bl	8004e2e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dcfe:	2358      	movs	r3, #88	@ 0x58
 800dd00:	2200      	movs	r2, #0
 800dd02:	2180      	movs	r1, #128	@ 0x80
 800dd04:	f7f7 f893 	bl	8004e2e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dd0e:	23c0      	movs	r3, #192	@ 0xc0
 800dd10:	2200      	movs	r2, #0
 800dd12:	2181      	movs	r1, #129	@ 0x81
 800dd14:	f7f7 f88b 	bl	8004e2e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dd1e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800dd22:	2200      	movs	r2, #0
 800dd24:	2101      	movs	r1, #1
 800dd26:	f7f7 f882 	bl	8004e2e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dd30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dd34:	2200      	movs	r2, #0
 800dd36:	2182      	movs	r1, #130	@ 0x82
 800dd38:	f7f7 f879 	bl	8004e2e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dd3c:	2300      	movs	r3, #0
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	2000a08c 	.word	0x2000a08c
 800dd4c:	40005c00 	.word	0x40005c00

0800dd50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7f5 fc9b 	bl	80036a2 <HAL_PCD_Start>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd70:	7bfb      	ldrb	r3, [r7, #15]
 800dd72:	4618      	mov	r0, r3
 800dd74:	f000 f97e 	bl	800e074 <USBD_Get_USB_Status>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b084      	sub	sp, #16
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
 800dd8e:	4608      	mov	r0, r1
 800dd90:	4611      	mov	r1, r2
 800dd92:	461a      	mov	r2, r3
 800dd94:	4603      	mov	r3, r0
 800dd96:	70fb      	strb	r3, [r7, #3]
 800dd98:	460b      	mov	r3, r1
 800dd9a:	70bb      	strb	r3, [r7, #2]
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dda0:	2300      	movs	r3, #0
 800dda2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dda4:	2300      	movs	r3, #0
 800dda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ddae:	78bb      	ldrb	r3, [r7, #2]
 800ddb0:	883a      	ldrh	r2, [r7, #0]
 800ddb2:	78f9      	ldrb	r1, [r7, #3]
 800ddb4:	f7f5 fde2 	bl	800397c <HAL_PCD_EP_Open>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f000 f958 	bl	800e074 <USBD_Get_USB_Status>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b084      	sub	sp, #16
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	460b      	mov	r3, r1
 800dddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddde:	2300      	movs	r3, #0
 800dde0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dde2:	2300      	movs	r3, #0
 800dde4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ddec:	78fa      	ldrb	r2, [r7, #3]
 800ddee:	4611      	mov	r1, r2
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7f5 fe22 	bl	8003a3a <HAL_PCD_EP_Close>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f000 f939 	bl	800e074 <USBD_Get_USB_Status>
 800de02:	4603      	mov	r3, r0
 800de04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de06:	7bbb      	ldrb	r3, [r7, #14]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de20:	2300      	movs	r3, #0
 800de22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800de2a:	78fa      	ldrb	r2, [r7, #3]
 800de2c:	4611      	mov	r1, r2
 800de2e:	4618      	mov	r0, r3
 800de30:	f7f5 fecb 	bl	8003bca <HAL_PCD_EP_SetStall>
 800de34:	4603      	mov	r3, r0
 800de36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de38:	7bfb      	ldrb	r3, [r7, #15]
 800de3a:	4618      	mov	r0, r3
 800de3c:	f000 f91a 	bl	800e074 <USBD_Get_USB_Status>
 800de40:	4603      	mov	r3, r0
 800de42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de44:	7bbb      	ldrb	r3, [r7, #14]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}

0800de4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b084      	sub	sp, #16
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
 800de56:	460b      	mov	r3, r1
 800de58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de5a:	2300      	movs	r3, #0
 800de5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de5e:	2300      	movs	r3, #0
 800de60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800de68:	78fa      	ldrb	r2, [r7, #3]
 800de6a:	4611      	mov	r1, r2
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7f5 fefe 	bl	8003c6e <HAL_PCD_EP_ClrStall>
 800de72:	4603      	mov	r3, r0
 800de74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de76:	7bfb      	ldrb	r3, [r7, #15]
 800de78:	4618      	mov	r0, r3
 800de7a:	f000 f8fb 	bl	800e074 <USBD_Get_USB_Status>
 800de7e:	4603      	mov	r3, r0
 800de80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de82:	7bbb      	ldrb	r3, [r7, #14]
}
 800de84:	4618      	mov	r0, r3
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	460b      	mov	r3, r1
 800de96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800de9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	da0b      	bge.n	800dec0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dea8:	78fb      	ldrb	r3, [r7, #3]
 800deaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800deae:	68f9      	ldr	r1, [r7, #12]
 800deb0:	4613      	mov	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4413      	add	r3, r2
 800deb6:	00db      	lsls	r3, r3, #3
 800deb8:	440b      	add	r3, r1
 800deba:	3312      	adds	r3, #18
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	e00b      	b.n	800ded8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dec0:	78fb      	ldrb	r3, [r7, #3]
 800dec2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dec6:	68f9      	ldr	r1, [r7, #12]
 800dec8:	4613      	mov	r3, r2
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	4413      	add	r3, r2
 800dece:	00db      	lsls	r3, r3, #3
 800ded0:	440b      	add	r3, r1
 800ded2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ded6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3714      	adds	r7, #20
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	460b      	mov	r3, r1
 800deee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800def0:	2300      	movs	r3, #0
 800def2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800defe:	78fa      	ldrb	r2, [r7, #3]
 800df00:	4611      	mov	r1, r2
 800df02:	4618      	mov	r0, r3
 800df04:	f7f5 fd16 	bl	8003934 <HAL_PCD_SetAddress>
 800df08:	4603      	mov	r3, r0
 800df0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 f8b0 	bl	800e074 <USBD_Get_USB_Status>
 800df14:	4603      	mov	r3, r0
 800df16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df18:	7bbb      	ldrb	r3, [r7, #14]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b086      	sub	sp, #24
 800df26:	af00      	add	r7, sp, #0
 800df28:	60f8      	str	r0, [r7, #12]
 800df2a:	607a      	str	r2, [r7, #4]
 800df2c:	603b      	str	r3, [r7, #0]
 800df2e:	460b      	mov	r3, r1
 800df30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df32:	2300      	movs	r3, #0
 800df34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df36:	2300      	movs	r3, #0
 800df38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800df40:	7af9      	ldrb	r1, [r7, #11]
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	f7f5 fe09 	bl	8003b5c <HAL_PCD_EP_Transmit>
 800df4a:	4603      	mov	r3, r0
 800df4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df4e:	7dfb      	ldrb	r3, [r7, #23]
 800df50:	4618      	mov	r0, r3
 800df52:	f000 f88f 	bl	800e074 <USBD_Get_USB_Status>
 800df56:	4603      	mov	r3, r0
 800df58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df5a:	7dbb      	ldrb	r3, [r7, #22]
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3718      	adds	r7, #24
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b086      	sub	sp, #24
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	607a      	str	r2, [r7, #4]
 800df6e:	603b      	str	r3, [r7, #0]
 800df70:	460b      	mov	r3, r1
 800df72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800df82:	7af9      	ldrb	r1, [r7, #11]
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	f7f5 fd9f 	bl	8003aca <HAL_PCD_EP_Receive>
 800df8c:	4603      	mov	r3, r0
 800df8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df90:	7dfb      	ldrb	r3, [r7, #23]
 800df92:	4618      	mov	r0, r3
 800df94:	f000 f86e 	bl	800e074 <USBD_Get_USB_Status>
 800df98:	4603      	mov	r3, r0
 800df9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3718      	adds	r7, #24
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfa6:	b580      	push	{r7, lr}
 800dfa8:	b082      	sub	sp, #8
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	460b      	mov	r3, r1
 800dfb0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dfb8:	78fa      	ldrb	r2, [r7, #3]
 800dfba:	4611      	mov	r1, r2
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7f5 fdb5 	bl	8003b2c <HAL_PCD_EP_GetRxCount>
 800dfc2:	4603      	mov	r3, r0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800dfd8:	78fb      	ldrb	r3, [r7, #3]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d002      	beq.n	800dfe4 <HAL_PCDEx_LPM_Callback+0x18>
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d013      	beq.n	800e00a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800dfe2:	e023      	b.n	800e02c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	7a5b      	ldrb	r3, [r3, #9]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d007      	beq.n	800dffc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dfec:	f000 f83c 	bl	800e068 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dff0:	4b10      	ldr	r3, [pc, #64]	@ (800e034 <HAL_PCDEx_LPM_Callback+0x68>)
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	4a0f      	ldr	r2, [pc, #60]	@ (800e034 <HAL_PCDEx_LPM_Callback+0x68>)
 800dff6:	f023 0306 	bic.w	r3, r3, #6
 800dffa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e002:	4618      	mov	r0, r3
 800e004:	f7fb fd98 	bl	8009b38 <USBD_LL_Resume>
    break;
 800e008:	e010      	b.n	800e02c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e010:	4618      	mov	r0, r3
 800e012:	f7fb fd7b 	bl	8009b0c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	7a5b      	ldrb	r3, [r3, #9]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d005      	beq.n	800e02a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e01e:	4b05      	ldr	r3, [pc, #20]	@ (800e034 <HAL_PCDEx_LPM_Callback+0x68>)
 800e020:	691b      	ldr	r3, [r3, #16]
 800e022:	4a04      	ldr	r2, [pc, #16]	@ (800e034 <HAL_PCDEx_LPM_Callback+0x68>)
 800e024:	f043 0306 	orr.w	r3, r3, #6
 800e028:	6113      	str	r3, [r2, #16]
    break;
 800e02a:	bf00      	nop
}
 800e02c:	bf00      	nop
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	e000ed00 	.word	0xe000ed00

0800e038 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e040:	4b03      	ldr	r3, [pc, #12]	@ (800e050 <USBD_static_malloc+0x18>)
}
 800e042:	4618      	mov	r0, r3
 800e044:	370c      	adds	r7, #12
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr
 800e04e:	bf00      	nop
 800e050:	2000a368 	.word	0x2000a368

0800e054 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]

}
 800e05c:	bf00      	nop
 800e05e:	370c      	adds	r7, #12
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e06c:	f7f3 fa48 	bl	8001500 <SystemClock_Config>
}
 800e070:	bf00      	nop
 800e072:	bd80      	pop	{r7, pc}

0800e074 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	4603      	mov	r3, r0
 800e07c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e07e:	2300      	movs	r3, #0
 800e080:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e082:	79fb      	ldrb	r3, [r7, #7]
 800e084:	2b03      	cmp	r3, #3
 800e086:	d817      	bhi.n	800e0b8 <USBD_Get_USB_Status+0x44>
 800e088:	a201      	add	r2, pc, #4	@ (adr r2, 800e090 <USBD_Get_USB_Status+0x1c>)
 800e08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e08e:	bf00      	nop
 800e090:	0800e0a1 	.word	0x0800e0a1
 800e094:	0800e0a7 	.word	0x0800e0a7
 800e098:	0800e0ad 	.word	0x0800e0ad
 800e09c:	0800e0b3 	.word	0x0800e0b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e0a4:	e00b      	b.n	800e0be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0a6:	2303      	movs	r3, #3
 800e0a8:	73fb      	strb	r3, [r7, #15]
    break;
 800e0aa:	e008      	b.n	800e0be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e0b0:	e005      	b.n	800e0be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0b2:	2303      	movs	r3, #3
 800e0b4:	73fb      	strb	r3, [r7, #15]
    break;
 800e0b6:	e002      	b.n	800e0be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e0b8:	2303      	movs	r3, #3
 800e0ba:	73fb      	strb	r3, [r7, #15]
    break;
 800e0bc:	bf00      	nop
  }
  return usb_status;
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3714      	adds	r7, #20
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <__cvt>:
 800e0cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d0:	ec57 6b10 	vmov	r6, r7, d0
 800e0d4:	2f00      	cmp	r7, #0
 800e0d6:	460c      	mov	r4, r1
 800e0d8:	4619      	mov	r1, r3
 800e0da:	463b      	mov	r3, r7
 800e0dc:	bfbb      	ittet	lt
 800e0de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e0e2:	461f      	movlt	r7, r3
 800e0e4:	2300      	movge	r3, #0
 800e0e6:	232d      	movlt	r3, #45	@ 0x2d
 800e0e8:	700b      	strb	r3, [r1, #0]
 800e0ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e0f0:	4691      	mov	r9, r2
 800e0f2:	f023 0820 	bic.w	r8, r3, #32
 800e0f6:	bfbc      	itt	lt
 800e0f8:	4632      	movlt	r2, r6
 800e0fa:	4616      	movlt	r6, r2
 800e0fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e100:	d005      	beq.n	800e10e <__cvt+0x42>
 800e102:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e106:	d100      	bne.n	800e10a <__cvt+0x3e>
 800e108:	3401      	adds	r4, #1
 800e10a:	2102      	movs	r1, #2
 800e10c:	e000      	b.n	800e110 <__cvt+0x44>
 800e10e:	2103      	movs	r1, #3
 800e110:	ab03      	add	r3, sp, #12
 800e112:	9301      	str	r3, [sp, #4]
 800e114:	ab02      	add	r3, sp, #8
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	ec47 6b10 	vmov	d0, r6, r7
 800e11c:	4653      	mov	r3, sl
 800e11e:	4622      	mov	r2, r4
 800e120:	f000 fec6 	bl	800eeb0 <_dtoa_r>
 800e124:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e128:	4605      	mov	r5, r0
 800e12a:	d119      	bne.n	800e160 <__cvt+0x94>
 800e12c:	f019 0f01 	tst.w	r9, #1
 800e130:	d00e      	beq.n	800e150 <__cvt+0x84>
 800e132:	eb00 0904 	add.w	r9, r0, r4
 800e136:	2200      	movs	r2, #0
 800e138:	2300      	movs	r3, #0
 800e13a:	4630      	mov	r0, r6
 800e13c:	4639      	mov	r1, r7
 800e13e:	f7f2 fceb 	bl	8000b18 <__aeabi_dcmpeq>
 800e142:	b108      	cbz	r0, 800e148 <__cvt+0x7c>
 800e144:	f8cd 900c 	str.w	r9, [sp, #12]
 800e148:	2230      	movs	r2, #48	@ 0x30
 800e14a:	9b03      	ldr	r3, [sp, #12]
 800e14c:	454b      	cmp	r3, r9
 800e14e:	d31e      	bcc.n	800e18e <__cvt+0xc2>
 800e150:	9b03      	ldr	r3, [sp, #12]
 800e152:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e154:	1b5b      	subs	r3, r3, r5
 800e156:	4628      	mov	r0, r5
 800e158:	6013      	str	r3, [r2, #0]
 800e15a:	b004      	add	sp, #16
 800e15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e160:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e164:	eb00 0904 	add.w	r9, r0, r4
 800e168:	d1e5      	bne.n	800e136 <__cvt+0x6a>
 800e16a:	7803      	ldrb	r3, [r0, #0]
 800e16c:	2b30      	cmp	r3, #48	@ 0x30
 800e16e:	d10a      	bne.n	800e186 <__cvt+0xba>
 800e170:	2200      	movs	r2, #0
 800e172:	2300      	movs	r3, #0
 800e174:	4630      	mov	r0, r6
 800e176:	4639      	mov	r1, r7
 800e178:	f7f2 fcce 	bl	8000b18 <__aeabi_dcmpeq>
 800e17c:	b918      	cbnz	r0, 800e186 <__cvt+0xba>
 800e17e:	f1c4 0401 	rsb	r4, r4, #1
 800e182:	f8ca 4000 	str.w	r4, [sl]
 800e186:	f8da 3000 	ldr.w	r3, [sl]
 800e18a:	4499      	add	r9, r3
 800e18c:	e7d3      	b.n	800e136 <__cvt+0x6a>
 800e18e:	1c59      	adds	r1, r3, #1
 800e190:	9103      	str	r1, [sp, #12]
 800e192:	701a      	strb	r2, [r3, #0]
 800e194:	e7d9      	b.n	800e14a <__cvt+0x7e>

0800e196 <__exponent>:
 800e196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e198:	2900      	cmp	r1, #0
 800e19a:	bfba      	itte	lt
 800e19c:	4249      	neglt	r1, r1
 800e19e:	232d      	movlt	r3, #45	@ 0x2d
 800e1a0:	232b      	movge	r3, #43	@ 0x2b
 800e1a2:	2909      	cmp	r1, #9
 800e1a4:	7002      	strb	r2, [r0, #0]
 800e1a6:	7043      	strb	r3, [r0, #1]
 800e1a8:	dd29      	ble.n	800e1fe <__exponent+0x68>
 800e1aa:	f10d 0307 	add.w	r3, sp, #7
 800e1ae:	461d      	mov	r5, r3
 800e1b0:	270a      	movs	r7, #10
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	fbb1 f6f7 	udiv	r6, r1, r7
 800e1b8:	fb07 1416 	mls	r4, r7, r6, r1
 800e1bc:	3430      	adds	r4, #48	@ 0x30
 800e1be:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	2c63      	cmp	r4, #99	@ 0x63
 800e1c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e1ca:	4631      	mov	r1, r6
 800e1cc:	dcf1      	bgt.n	800e1b2 <__exponent+0x1c>
 800e1ce:	3130      	adds	r1, #48	@ 0x30
 800e1d0:	1e94      	subs	r4, r2, #2
 800e1d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e1d6:	1c41      	adds	r1, r0, #1
 800e1d8:	4623      	mov	r3, r4
 800e1da:	42ab      	cmp	r3, r5
 800e1dc:	d30a      	bcc.n	800e1f4 <__exponent+0x5e>
 800e1de:	f10d 0309 	add.w	r3, sp, #9
 800e1e2:	1a9b      	subs	r3, r3, r2
 800e1e4:	42ac      	cmp	r4, r5
 800e1e6:	bf88      	it	hi
 800e1e8:	2300      	movhi	r3, #0
 800e1ea:	3302      	adds	r3, #2
 800e1ec:	4403      	add	r3, r0
 800e1ee:	1a18      	subs	r0, r3, r0
 800e1f0:	b003      	add	sp, #12
 800e1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e1f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e1fc:	e7ed      	b.n	800e1da <__exponent+0x44>
 800e1fe:	2330      	movs	r3, #48	@ 0x30
 800e200:	3130      	adds	r1, #48	@ 0x30
 800e202:	7083      	strb	r3, [r0, #2]
 800e204:	70c1      	strb	r1, [r0, #3]
 800e206:	1d03      	adds	r3, r0, #4
 800e208:	e7f1      	b.n	800e1ee <__exponent+0x58>
	...

0800e20c <_printf_float>:
 800e20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e210:	b08d      	sub	sp, #52	@ 0x34
 800e212:	460c      	mov	r4, r1
 800e214:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e218:	4616      	mov	r6, r2
 800e21a:	461f      	mov	r7, r3
 800e21c:	4605      	mov	r5, r0
 800e21e:	f000 fcd9 	bl	800ebd4 <_localeconv_r>
 800e222:	6803      	ldr	r3, [r0, #0]
 800e224:	9304      	str	r3, [sp, #16]
 800e226:	4618      	mov	r0, r3
 800e228:	f7f2 f84a 	bl	80002c0 <strlen>
 800e22c:	2300      	movs	r3, #0
 800e22e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e230:	f8d8 3000 	ldr.w	r3, [r8]
 800e234:	9005      	str	r0, [sp, #20]
 800e236:	3307      	adds	r3, #7
 800e238:	f023 0307 	bic.w	r3, r3, #7
 800e23c:	f103 0208 	add.w	r2, r3, #8
 800e240:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e244:	f8d4 b000 	ldr.w	fp, [r4]
 800e248:	f8c8 2000 	str.w	r2, [r8]
 800e24c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e250:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e254:	9307      	str	r3, [sp, #28]
 800e256:	f8cd 8018 	str.w	r8, [sp, #24]
 800e25a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e25e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e262:	4b9c      	ldr	r3, [pc, #624]	@ (800e4d4 <_printf_float+0x2c8>)
 800e264:	f04f 32ff 	mov.w	r2, #4294967295
 800e268:	f7f2 fc88 	bl	8000b7c <__aeabi_dcmpun>
 800e26c:	bb70      	cbnz	r0, 800e2cc <_printf_float+0xc0>
 800e26e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e272:	4b98      	ldr	r3, [pc, #608]	@ (800e4d4 <_printf_float+0x2c8>)
 800e274:	f04f 32ff 	mov.w	r2, #4294967295
 800e278:	f7f2 fc62 	bl	8000b40 <__aeabi_dcmple>
 800e27c:	bb30      	cbnz	r0, 800e2cc <_printf_float+0xc0>
 800e27e:	2200      	movs	r2, #0
 800e280:	2300      	movs	r3, #0
 800e282:	4640      	mov	r0, r8
 800e284:	4649      	mov	r1, r9
 800e286:	f7f2 fc51 	bl	8000b2c <__aeabi_dcmplt>
 800e28a:	b110      	cbz	r0, 800e292 <_printf_float+0x86>
 800e28c:	232d      	movs	r3, #45	@ 0x2d
 800e28e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e292:	4a91      	ldr	r2, [pc, #580]	@ (800e4d8 <_printf_float+0x2cc>)
 800e294:	4b91      	ldr	r3, [pc, #580]	@ (800e4dc <_printf_float+0x2d0>)
 800e296:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e29a:	bf8c      	ite	hi
 800e29c:	4690      	movhi	r8, r2
 800e29e:	4698      	movls	r8, r3
 800e2a0:	2303      	movs	r3, #3
 800e2a2:	6123      	str	r3, [r4, #16]
 800e2a4:	f02b 0304 	bic.w	r3, fp, #4
 800e2a8:	6023      	str	r3, [r4, #0]
 800e2aa:	f04f 0900 	mov.w	r9, #0
 800e2ae:	9700      	str	r7, [sp, #0]
 800e2b0:	4633      	mov	r3, r6
 800e2b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e2b4:	4621      	mov	r1, r4
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	f000 f9d2 	bl	800e660 <_printf_common>
 800e2bc:	3001      	adds	r0, #1
 800e2be:	f040 808d 	bne.w	800e3dc <_printf_float+0x1d0>
 800e2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c6:	b00d      	add	sp, #52	@ 0x34
 800e2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2cc:	4642      	mov	r2, r8
 800e2ce:	464b      	mov	r3, r9
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	f7f2 fc52 	bl	8000b7c <__aeabi_dcmpun>
 800e2d8:	b140      	cbz	r0, 800e2ec <_printf_float+0xe0>
 800e2da:	464b      	mov	r3, r9
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	bfbc      	itt	lt
 800e2e0:	232d      	movlt	r3, #45	@ 0x2d
 800e2e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e2e6:	4a7e      	ldr	r2, [pc, #504]	@ (800e4e0 <_printf_float+0x2d4>)
 800e2e8:	4b7e      	ldr	r3, [pc, #504]	@ (800e4e4 <_printf_float+0x2d8>)
 800e2ea:	e7d4      	b.n	800e296 <_printf_float+0x8a>
 800e2ec:	6863      	ldr	r3, [r4, #4]
 800e2ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e2f2:	9206      	str	r2, [sp, #24]
 800e2f4:	1c5a      	adds	r2, r3, #1
 800e2f6:	d13b      	bne.n	800e370 <_printf_float+0x164>
 800e2f8:	2306      	movs	r3, #6
 800e2fa:	6063      	str	r3, [r4, #4]
 800e2fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e300:	2300      	movs	r3, #0
 800e302:	6022      	str	r2, [r4, #0]
 800e304:	9303      	str	r3, [sp, #12]
 800e306:	ab0a      	add	r3, sp, #40	@ 0x28
 800e308:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e30c:	ab09      	add	r3, sp, #36	@ 0x24
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	6861      	ldr	r1, [r4, #4]
 800e312:	ec49 8b10 	vmov	d0, r8, r9
 800e316:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e31a:	4628      	mov	r0, r5
 800e31c:	f7ff fed6 	bl	800e0cc <__cvt>
 800e320:	9b06      	ldr	r3, [sp, #24]
 800e322:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e324:	2b47      	cmp	r3, #71	@ 0x47
 800e326:	4680      	mov	r8, r0
 800e328:	d129      	bne.n	800e37e <_printf_float+0x172>
 800e32a:	1cc8      	adds	r0, r1, #3
 800e32c:	db02      	blt.n	800e334 <_printf_float+0x128>
 800e32e:	6863      	ldr	r3, [r4, #4]
 800e330:	4299      	cmp	r1, r3
 800e332:	dd41      	ble.n	800e3b8 <_printf_float+0x1ac>
 800e334:	f1aa 0a02 	sub.w	sl, sl, #2
 800e338:	fa5f fa8a 	uxtb.w	sl, sl
 800e33c:	3901      	subs	r1, #1
 800e33e:	4652      	mov	r2, sl
 800e340:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e344:	9109      	str	r1, [sp, #36]	@ 0x24
 800e346:	f7ff ff26 	bl	800e196 <__exponent>
 800e34a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e34c:	1813      	adds	r3, r2, r0
 800e34e:	2a01      	cmp	r2, #1
 800e350:	4681      	mov	r9, r0
 800e352:	6123      	str	r3, [r4, #16]
 800e354:	dc02      	bgt.n	800e35c <_printf_float+0x150>
 800e356:	6822      	ldr	r2, [r4, #0]
 800e358:	07d2      	lsls	r2, r2, #31
 800e35a:	d501      	bpl.n	800e360 <_printf_float+0x154>
 800e35c:	3301      	adds	r3, #1
 800e35e:	6123      	str	r3, [r4, #16]
 800e360:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e364:	2b00      	cmp	r3, #0
 800e366:	d0a2      	beq.n	800e2ae <_printf_float+0xa2>
 800e368:	232d      	movs	r3, #45	@ 0x2d
 800e36a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e36e:	e79e      	b.n	800e2ae <_printf_float+0xa2>
 800e370:	9a06      	ldr	r2, [sp, #24]
 800e372:	2a47      	cmp	r2, #71	@ 0x47
 800e374:	d1c2      	bne.n	800e2fc <_printf_float+0xf0>
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1c0      	bne.n	800e2fc <_printf_float+0xf0>
 800e37a:	2301      	movs	r3, #1
 800e37c:	e7bd      	b.n	800e2fa <_printf_float+0xee>
 800e37e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e382:	d9db      	bls.n	800e33c <_printf_float+0x130>
 800e384:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e388:	d118      	bne.n	800e3bc <_printf_float+0x1b0>
 800e38a:	2900      	cmp	r1, #0
 800e38c:	6863      	ldr	r3, [r4, #4]
 800e38e:	dd0b      	ble.n	800e3a8 <_printf_float+0x19c>
 800e390:	6121      	str	r1, [r4, #16]
 800e392:	b913      	cbnz	r3, 800e39a <_printf_float+0x18e>
 800e394:	6822      	ldr	r2, [r4, #0]
 800e396:	07d0      	lsls	r0, r2, #31
 800e398:	d502      	bpl.n	800e3a0 <_printf_float+0x194>
 800e39a:	3301      	adds	r3, #1
 800e39c:	440b      	add	r3, r1
 800e39e:	6123      	str	r3, [r4, #16]
 800e3a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e3a2:	f04f 0900 	mov.w	r9, #0
 800e3a6:	e7db      	b.n	800e360 <_printf_float+0x154>
 800e3a8:	b913      	cbnz	r3, 800e3b0 <_printf_float+0x1a4>
 800e3aa:	6822      	ldr	r2, [r4, #0]
 800e3ac:	07d2      	lsls	r2, r2, #31
 800e3ae:	d501      	bpl.n	800e3b4 <_printf_float+0x1a8>
 800e3b0:	3302      	adds	r3, #2
 800e3b2:	e7f4      	b.n	800e39e <_printf_float+0x192>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e7f2      	b.n	800e39e <_printf_float+0x192>
 800e3b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3be:	4299      	cmp	r1, r3
 800e3c0:	db05      	blt.n	800e3ce <_printf_float+0x1c2>
 800e3c2:	6823      	ldr	r3, [r4, #0]
 800e3c4:	6121      	str	r1, [r4, #16]
 800e3c6:	07d8      	lsls	r0, r3, #31
 800e3c8:	d5ea      	bpl.n	800e3a0 <_printf_float+0x194>
 800e3ca:	1c4b      	adds	r3, r1, #1
 800e3cc:	e7e7      	b.n	800e39e <_printf_float+0x192>
 800e3ce:	2900      	cmp	r1, #0
 800e3d0:	bfd4      	ite	le
 800e3d2:	f1c1 0202 	rsble	r2, r1, #2
 800e3d6:	2201      	movgt	r2, #1
 800e3d8:	4413      	add	r3, r2
 800e3da:	e7e0      	b.n	800e39e <_printf_float+0x192>
 800e3dc:	6823      	ldr	r3, [r4, #0]
 800e3de:	055a      	lsls	r2, r3, #21
 800e3e0:	d407      	bmi.n	800e3f2 <_printf_float+0x1e6>
 800e3e2:	6923      	ldr	r3, [r4, #16]
 800e3e4:	4642      	mov	r2, r8
 800e3e6:	4631      	mov	r1, r6
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	47b8      	blx	r7
 800e3ec:	3001      	adds	r0, #1
 800e3ee:	d12b      	bne.n	800e448 <_printf_float+0x23c>
 800e3f0:	e767      	b.n	800e2c2 <_printf_float+0xb6>
 800e3f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e3f6:	f240 80dd 	bls.w	800e5b4 <_printf_float+0x3a8>
 800e3fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e3fe:	2200      	movs	r2, #0
 800e400:	2300      	movs	r3, #0
 800e402:	f7f2 fb89 	bl	8000b18 <__aeabi_dcmpeq>
 800e406:	2800      	cmp	r0, #0
 800e408:	d033      	beq.n	800e472 <_printf_float+0x266>
 800e40a:	4a37      	ldr	r2, [pc, #220]	@ (800e4e8 <_printf_float+0x2dc>)
 800e40c:	2301      	movs	r3, #1
 800e40e:	4631      	mov	r1, r6
 800e410:	4628      	mov	r0, r5
 800e412:	47b8      	blx	r7
 800e414:	3001      	adds	r0, #1
 800e416:	f43f af54 	beq.w	800e2c2 <_printf_float+0xb6>
 800e41a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e41e:	4543      	cmp	r3, r8
 800e420:	db02      	blt.n	800e428 <_printf_float+0x21c>
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	07d8      	lsls	r0, r3, #31
 800e426:	d50f      	bpl.n	800e448 <_printf_float+0x23c>
 800e428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e42c:	4631      	mov	r1, r6
 800e42e:	4628      	mov	r0, r5
 800e430:	47b8      	blx	r7
 800e432:	3001      	adds	r0, #1
 800e434:	f43f af45 	beq.w	800e2c2 <_printf_float+0xb6>
 800e438:	f04f 0900 	mov.w	r9, #0
 800e43c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e440:	f104 0a1a 	add.w	sl, r4, #26
 800e444:	45c8      	cmp	r8, r9
 800e446:	dc09      	bgt.n	800e45c <_printf_float+0x250>
 800e448:	6823      	ldr	r3, [r4, #0]
 800e44a:	079b      	lsls	r3, r3, #30
 800e44c:	f100 8103 	bmi.w	800e656 <_printf_float+0x44a>
 800e450:	68e0      	ldr	r0, [r4, #12]
 800e452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e454:	4298      	cmp	r0, r3
 800e456:	bfb8      	it	lt
 800e458:	4618      	movlt	r0, r3
 800e45a:	e734      	b.n	800e2c6 <_printf_float+0xba>
 800e45c:	2301      	movs	r3, #1
 800e45e:	4652      	mov	r2, sl
 800e460:	4631      	mov	r1, r6
 800e462:	4628      	mov	r0, r5
 800e464:	47b8      	blx	r7
 800e466:	3001      	adds	r0, #1
 800e468:	f43f af2b 	beq.w	800e2c2 <_printf_float+0xb6>
 800e46c:	f109 0901 	add.w	r9, r9, #1
 800e470:	e7e8      	b.n	800e444 <_printf_float+0x238>
 800e472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e474:	2b00      	cmp	r3, #0
 800e476:	dc39      	bgt.n	800e4ec <_printf_float+0x2e0>
 800e478:	4a1b      	ldr	r2, [pc, #108]	@ (800e4e8 <_printf_float+0x2dc>)
 800e47a:	2301      	movs	r3, #1
 800e47c:	4631      	mov	r1, r6
 800e47e:	4628      	mov	r0, r5
 800e480:	47b8      	blx	r7
 800e482:	3001      	adds	r0, #1
 800e484:	f43f af1d 	beq.w	800e2c2 <_printf_float+0xb6>
 800e488:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e48c:	ea59 0303 	orrs.w	r3, r9, r3
 800e490:	d102      	bne.n	800e498 <_printf_float+0x28c>
 800e492:	6823      	ldr	r3, [r4, #0]
 800e494:	07d9      	lsls	r1, r3, #31
 800e496:	d5d7      	bpl.n	800e448 <_printf_float+0x23c>
 800e498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e49c:	4631      	mov	r1, r6
 800e49e:	4628      	mov	r0, r5
 800e4a0:	47b8      	blx	r7
 800e4a2:	3001      	adds	r0, #1
 800e4a4:	f43f af0d 	beq.w	800e2c2 <_printf_float+0xb6>
 800e4a8:	f04f 0a00 	mov.w	sl, #0
 800e4ac:	f104 0b1a 	add.w	fp, r4, #26
 800e4b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4b2:	425b      	negs	r3, r3
 800e4b4:	4553      	cmp	r3, sl
 800e4b6:	dc01      	bgt.n	800e4bc <_printf_float+0x2b0>
 800e4b8:	464b      	mov	r3, r9
 800e4ba:	e793      	b.n	800e3e4 <_printf_float+0x1d8>
 800e4bc:	2301      	movs	r3, #1
 800e4be:	465a      	mov	r2, fp
 800e4c0:	4631      	mov	r1, r6
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	47b8      	blx	r7
 800e4c6:	3001      	adds	r0, #1
 800e4c8:	f43f aefb 	beq.w	800e2c2 <_printf_float+0xb6>
 800e4cc:	f10a 0a01 	add.w	sl, sl, #1
 800e4d0:	e7ee      	b.n	800e4b0 <_printf_float+0x2a4>
 800e4d2:	bf00      	nop
 800e4d4:	7fefffff 	.word	0x7fefffff
 800e4d8:	08011218 	.word	0x08011218
 800e4dc:	08011214 	.word	0x08011214
 800e4e0:	08011220 	.word	0x08011220
 800e4e4:	0801121c 	.word	0x0801121c
 800e4e8:	08011224 	.word	0x08011224
 800e4ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e4ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e4f2:	4553      	cmp	r3, sl
 800e4f4:	bfa8      	it	ge
 800e4f6:	4653      	movge	r3, sl
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	4699      	mov	r9, r3
 800e4fc:	dc36      	bgt.n	800e56c <_printf_float+0x360>
 800e4fe:	f04f 0b00 	mov.w	fp, #0
 800e502:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e506:	f104 021a 	add.w	r2, r4, #26
 800e50a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e50c:	9306      	str	r3, [sp, #24]
 800e50e:	eba3 0309 	sub.w	r3, r3, r9
 800e512:	455b      	cmp	r3, fp
 800e514:	dc31      	bgt.n	800e57a <_printf_float+0x36e>
 800e516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e518:	459a      	cmp	sl, r3
 800e51a:	dc3a      	bgt.n	800e592 <_printf_float+0x386>
 800e51c:	6823      	ldr	r3, [r4, #0]
 800e51e:	07da      	lsls	r2, r3, #31
 800e520:	d437      	bmi.n	800e592 <_printf_float+0x386>
 800e522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e524:	ebaa 0903 	sub.w	r9, sl, r3
 800e528:	9b06      	ldr	r3, [sp, #24]
 800e52a:	ebaa 0303 	sub.w	r3, sl, r3
 800e52e:	4599      	cmp	r9, r3
 800e530:	bfa8      	it	ge
 800e532:	4699      	movge	r9, r3
 800e534:	f1b9 0f00 	cmp.w	r9, #0
 800e538:	dc33      	bgt.n	800e5a2 <_printf_float+0x396>
 800e53a:	f04f 0800 	mov.w	r8, #0
 800e53e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e542:	f104 0b1a 	add.w	fp, r4, #26
 800e546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e548:	ebaa 0303 	sub.w	r3, sl, r3
 800e54c:	eba3 0309 	sub.w	r3, r3, r9
 800e550:	4543      	cmp	r3, r8
 800e552:	f77f af79 	ble.w	800e448 <_printf_float+0x23c>
 800e556:	2301      	movs	r3, #1
 800e558:	465a      	mov	r2, fp
 800e55a:	4631      	mov	r1, r6
 800e55c:	4628      	mov	r0, r5
 800e55e:	47b8      	blx	r7
 800e560:	3001      	adds	r0, #1
 800e562:	f43f aeae 	beq.w	800e2c2 <_printf_float+0xb6>
 800e566:	f108 0801 	add.w	r8, r8, #1
 800e56a:	e7ec      	b.n	800e546 <_printf_float+0x33a>
 800e56c:	4642      	mov	r2, r8
 800e56e:	4631      	mov	r1, r6
 800e570:	4628      	mov	r0, r5
 800e572:	47b8      	blx	r7
 800e574:	3001      	adds	r0, #1
 800e576:	d1c2      	bne.n	800e4fe <_printf_float+0x2f2>
 800e578:	e6a3      	b.n	800e2c2 <_printf_float+0xb6>
 800e57a:	2301      	movs	r3, #1
 800e57c:	4631      	mov	r1, r6
 800e57e:	4628      	mov	r0, r5
 800e580:	9206      	str	r2, [sp, #24]
 800e582:	47b8      	blx	r7
 800e584:	3001      	adds	r0, #1
 800e586:	f43f ae9c 	beq.w	800e2c2 <_printf_float+0xb6>
 800e58a:	9a06      	ldr	r2, [sp, #24]
 800e58c:	f10b 0b01 	add.w	fp, fp, #1
 800e590:	e7bb      	b.n	800e50a <_printf_float+0x2fe>
 800e592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e596:	4631      	mov	r1, r6
 800e598:	4628      	mov	r0, r5
 800e59a:	47b8      	blx	r7
 800e59c:	3001      	adds	r0, #1
 800e59e:	d1c0      	bne.n	800e522 <_printf_float+0x316>
 800e5a0:	e68f      	b.n	800e2c2 <_printf_float+0xb6>
 800e5a2:	9a06      	ldr	r2, [sp, #24]
 800e5a4:	464b      	mov	r3, r9
 800e5a6:	4442      	add	r2, r8
 800e5a8:	4631      	mov	r1, r6
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	47b8      	blx	r7
 800e5ae:	3001      	adds	r0, #1
 800e5b0:	d1c3      	bne.n	800e53a <_printf_float+0x32e>
 800e5b2:	e686      	b.n	800e2c2 <_printf_float+0xb6>
 800e5b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e5b8:	f1ba 0f01 	cmp.w	sl, #1
 800e5bc:	dc01      	bgt.n	800e5c2 <_printf_float+0x3b6>
 800e5be:	07db      	lsls	r3, r3, #31
 800e5c0:	d536      	bpl.n	800e630 <_printf_float+0x424>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	4642      	mov	r2, r8
 800e5c6:	4631      	mov	r1, r6
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	47b8      	blx	r7
 800e5cc:	3001      	adds	r0, #1
 800e5ce:	f43f ae78 	beq.w	800e2c2 <_printf_float+0xb6>
 800e5d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5d6:	4631      	mov	r1, r6
 800e5d8:	4628      	mov	r0, r5
 800e5da:	47b8      	blx	r7
 800e5dc:	3001      	adds	r0, #1
 800e5de:	f43f ae70 	beq.w	800e2c2 <_printf_float+0xb6>
 800e5e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5ee:	f7f2 fa93 	bl	8000b18 <__aeabi_dcmpeq>
 800e5f2:	b9c0      	cbnz	r0, 800e626 <_printf_float+0x41a>
 800e5f4:	4653      	mov	r3, sl
 800e5f6:	f108 0201 	add.w	r2, r8, #1
 800e5fa:	4631      	mov	r1, r6
 800e5fc:	4628      	mov	r0, r5
 800e5fe:	47b8      	blx	r7
 800e600:	3001      	adds	r0, #1
 800e602:	d10c      	bne.n	800e61e <_printf_float+0x412>
 800e604:	e65d      	b.n	800e2c2 <_printf_float+0xb6>
 800e606:	2301      	movs	r3, #1
 800e608:	465a      	mov	r2, fp
 800e60a:	4631      	mov	r1, r6
 800e60c:	4628      	mov	r0, r5
 800e60e:	47b8      	blx	r7
 800e610:	3001      	adds	r0, #1
 800e612:	f43f ae56 	beq.w	800e2c2 <_printf_float+0xb6>
 800e616:	f108 0801 	add.w	r8, r8, #1
 800e61a:	45d0      	cmp	r8, sl
 800e61c:	dbf3      	blt.n	800e606 <_printf_float+0x3fa>
 800e61e:	464b      	mov	r3, r9
 800e620:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e624:	e6df      	b.n	800e3e6 <_printf_float+0x1da>
 800e626:	f04f 0800 	mov.w	r8, #0
 800e62a:	f104 0b1a 	add.w	fp, r4, #26
 800e62e:	e7f4      	b.n	800e61a <_printf_float+0x40e>
 800e630:	2301      	movs	r3, #1
 800e632:	4642      	mov	r2, r8
 800e634:	e7e1      	b.n	800e5fa <_printf_float+0x3ee>
 800e636:	2301      	movs	r3, #1
 800e638:	464a      	mov	r2, r9
 800e63a:	4631      	mov	r1, r6
 800e63c:	4628      	mov	r0, r5
 800e63e:	47b8      	blx	r7
 800e640:	3001      	adds	r0, #1
 800e642:	f43f ae3e 	beq.w	800e2c2 <_printf_float+0xb6>
 800e646:	f108 0801 	add.w	r8, r8, #1
 800e64a:	68e3      	ldr	r3, [r4, #12]
 800e64c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e64e:	1a5b      	subs	r3, r3, r1
 800e650:	4543      	cmp	r3, r8
 800e652:	dcf0      	bgt.n	800e636 <_printf_float+0x42a>
 800e654:	e6fc      	b.n	800e450 <_printf_float+0x244>
 800e656:	f04f 0800 	mov.w	r8, #0
 800e65a:	f104 0919 	add.w	r9, r4, #25
 800e65e:	e7f4      	b.n	800e64a <_printf_float+0x43e>

0800e660 <_printf_common>:
 800e660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e664:	4616      	mov	r6, r2
 800e666:	4698      	mov	r8, r3
 800e668:	688a      	ldr	r2, [r1, #8]
 800e66a:	690b      	ldr	r3, [r1, #16]
 800e66c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e670:	4293      	cmp	r3, r2
 800e672:	bfb8      	it	lt
 800e674:	4613      	movlt	r3, r2
 800e676:	6033      	str	r3, [r6, #0]
 800e678:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e67c:	4607      	mov	r7, r0
 800e67e:	460c      	mov	r4, r1
 800e680:	b10a      	cbz	r2, 800e686 <_printf_common+0x26>
 800e682:	3301      	adds	r3, #1
 800e684:	6033      	str	r3, [r6, #0]
 800e686:	6823      	ldr	r3, [r4, #0]
 800e688:	0699      	lsls	r1, r3, #26
 800e68a:	bf42      	ittt	mi
 800e68c:	6833      	ldrmi	r3, [r6, #0]
 800e68e:	3302      	addmi	r3, #2
 800e690:	6033      	strmi	r3, [r6, #0]
 800e692:	6825      	ldr	r5, [r4, #0]
 800e694:	f015 0506 	ands.w	r5, r5, #6
 800e698:	d106      	bne.n	800e6a8 <_printf_common+0x48>
 800e69a:	f104 0a19 	add.w	sl, r4, #25
 800e69e:	68e3      	ldr	r3, [r4, #12]
 800e6a0:	6832      	ldr	r2, [r6, #0]
 800e6a2:	1a9b      	subs	r3, r3, r2
 800e6a4:	42ab      	cmp	r3, r5
 800e6a6:	dc26      	bgt.n	800e6f6 <_printf_common+0x96>
 800e6a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e6ac:	6822      	ldr	r2, [r4, #0]
 800e6ae:	3b00      	subs	r3, #0
 800e6b0:	bf18      	it	ne
 800e6b2:	2301      	movne	r3, #1
 800e6b4:	0692      	lsls	r2, r2, #26
 800e6b6:	d42b      	bmi.n	800e710 <_printf_common+0xb0>
 800e6b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e6bc:	4641      	mov	r1, r8
 800e6be:	4638      	mov	r0, r7
 800e6c0:	47c8      	blx	r9
 800e6c2:	3001      	adds	r0, #1
 800e6c4:	d01e      	beq.n	800e704 <_printf_common+0xa4>
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	6922      	ldr	r2, [r4, #16]
 800e6ca:	f003 0306 	and.w	r3, r3, #6
 800e6ce:	2b04      	cmp	r3, #4
 800e6d0:	bf02      	ittt	eq
 800e6d2:	68e5      	ldreq	r5, [r4, #12]
 800e6d4:	6833      	ldreq	r3, [r6, #0]
 800e6d6:	1aed      	subeq	r5, r5, r3
 800e6d8:	68a3      	ldr	r3, [r4, #8]
 800e6da:	bf0c      	ite	eq
 800e6dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6e0:	2500      	movne	r5, #0
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	bfc4      	itt	gt
 800e6e6:	1a9b      	subgt	r3, r3, r2
 800e6e8:	18ed      	addgt	r5, r5, r3
 800e6ea:	2600      	movs	r6, #0
 800e6ec:	341a      	adds	r4, #26
 800e6ee:	42b5      	cmp	r5, r6
 800e6f0:	d11a      	bne.n	800e728 <_printf_common+0xc8>
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	e008      	b.n	800e708 <_printf_common+0xa8>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	4652      	mov	r2, sl
 800e6fa:	4641      	mov	r1, r8
 800e6fc:	4638      	mov	r0, r7
 800e6fe:	47c8      	blx	r9
 800e700:	3001      	adds	r0, #1
 800e702:	d103      	bne.n	800e70c <_printf_common+0xac>
 800e704:	f04f 30ff 	mov.w	r0, #4294967295
 800e708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70c:	3501      	adds	r5, #1
 800e70e:	e7c6      	b.n	800e69e <_printf_common+0x3e>
 800e710:	18e1      	adds	r1, r4, r3
 800e712:	1c5a      	adds	r2, r3, #1
 800e714:	2030      	movs	r0, #48	@ 0x30
 800e716:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e71a:	4422      	add	r2, r4
 800e71c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e720:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e724:	3302      	adds	r3, #2
 800e726:	e7c7      	b.n	800e6b8 <_printf_common+0x58>
 800e728:	2301      	movs	r3, #1
 800e72a:	4622      	mov	r2, r4
 800e72c:	4641      	mov	r1, r8
 800e72e:	4638      	mov	r0, r7
 800e730:	47c8      	blx	r9
 800e732:	3001      	adds	r0, #1
 800e734:	d0e6      	beq.n	800e704 <_printf_common+0xa4>
 800e736:	3601      	adds	r6, #1
 800e738:	e7d9      	b.n	800e6ee <_printf_common+0x8e>
	...

0800e73c <_printf_i>:
 800e73c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e740:	7e0f      	ldrb	r7, [r1, #24]
 800e742:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e744:	2f78      	cmp	r7, #120	@ 0x78
 800e746:	4691      	mov	r9, r2
 800e748:	4680      	mov	r8, r0
 800e74a:	460c      	mov	r4, r1
 800e74c:	469a      	mov	sl, r3
 800e74e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e752:	d807      	bhi.n	800e764 <_printf_i+0x28>
 800e754:	2f62      	cmp	r7, #98	@ 0x62
 800e756:	d80a      	bhi.n	800e76e <_printf_i+0x32>
 800e758:	2f00      	cmp	r7, #0
 800e75a:	f000 80d1 	beq.w	800e900 <_printf_i+0x1c4>
 800e75e:	2f58      	cmp	r7, #88	@ 0x58
 800e760:	f000 80b8 	beq.w	800e8d4 <_printf_i+0x198>
 800e764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e768:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e76c:	e03a      	b.n	800e7e4 <_printf_i+0xa8>
 800e76e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e772:	2b15      	cmp	r3, #21
 800e774:	d8f6      	bhi.n	800e764 <_printf_i+0x28>
 800e776:	a101      	add	r1, pc, #4	@ (adr r1, 800e77c <_printf_i+0x40>)
 800e778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e77c:	0800e7d5 	.word	0x0800e7d5
 800e780:	0800e7e9 	.word	0x0800e7e9
 800e784:	0800e765 	.word	0x0800e765
 800e788:	0800e765 	.word	0x0800e765
 800e78c:	0800e765 	.word	0x0800e765
 800e790:	0800e765 	.word	0x0800e765
 800e794:	0800e7e9 	.word	0x0800e7e9
 800e798:	0800e765 	.word	0x0800e765
 800e79c:	0800e765 	.word	0x0800e765
 800e7a0:	0800e765 	.word	0x0800e765
 800e7a4:	0800e765 	.word	0x0800e765
 800e7a8:	0800e8e7 	.word	0x0800e8e7
 800e7ac:	0800e813 	.word	0x0800e813
 800e7b0:	0800e8a1 	.word	0x0800e8a1
 800e7b4:	0800e765 	.word	0x0800e765
 800e7b8:	0800e765 	.word	0x0800e765
 800e7bc:	0800e909 	.word	0x0800e909
 800e7c0:	0800e765 	.word	0x0800e765
 800e7c4:	0800e813 	.word	0x0800e813
 800e7c8:	0800e765 	.word	0x0800e765
 800e7cc:	0800e765 	.word	0x0800e765
 800e7d0:	0800e8a9 	.word	0x0800e8a9
 800e7d4:	6833      	ldr	r3, [r6, #0]
 800e7d6:	1d1a      	adds	r2, r3, #4
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	6032      	str	r2, [r6, #0]
 800e7dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	e09c      	b.n	800e922 <_printf_i+0x1e6>
 800e7e8:	6833      	ldr	r3, [r6, #0]
 800e7ea:	6820      	ldr	r0, [r4, #0]
 800e7ec:	1d19      	adds	r1, r3, #4
 800e7ee:	6031      	str	r1, [r6, #0]
 800e7f0:	0606      	lsls	r6, r0, #24
 800e7f2:	d501      	bpl.n	800e7f8 <_printf_i+0xbc>
 800e7f4:	681d      	ldr	r5, [r3, #0]
 800e7f6:	e003      	b.n	800e800 <_printf_i+0xc4>
 800e7f8:	0645      	lsls	r5, r0, #25
 800e7fa:	d5fb      	bpl.n	800e7f4 <_printf_i+0xb8>
 800e7fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e800:	2d00      	cmp	r5, #0
 800e802:	da03      	bge.n	800e80c <_printf_i+0xd0>
 800e804:	232d      	movs	r3, #45	@ 0x2d
 800e806:	426d      	negs	r5, r5
 800e808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e80c:	4858      	ldr	r0, [pc, #352]	@ (800e970 <_printf_i+0x234>)
 800e80e:	230a      	movs	r3, #10
 800e810:	e011      	b.n	800e836 <_printf_i+0xfa>
 800e812:	6821      	ldr	r1, [r4, #0]
 800e814:	6833      	ldr	r3, [r6, #0]
 800e816:	0608      	lsls	r0, r1, #24
 800e818:	f853 5b04 	ldr.w	r5, [r3], #4
 800e81c:	d402      	bmi.n	800e824 <_printf_i+0xe8>
 800e81e:	0649      	lsls	r1, r1, #25
 800e820:	bf48      	it	mi
 800e822:	b2ad      	uxthmi	r5, r5
 800e824:	2f6f      	cmp	r7, #111	@ 0x6f
 800e826:	4852      	ldr	r0, [pc, #328]	@ (800e970 <_printf_i+0x234>)
 800e828:	6033      	str	r3, [r6, #0]
 800e82a:	bf14      	ite	ne
 800e82c:	230a      	movne	r3, #10
 800e82e:	2308      	moveq	r3, #8
 800e830:	2100      	movs	r1, #0
 800e832:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e836:	6866      	ldr	r6, [r4, #4]
 800e838:	60a6      	str	r6, [r4, #8]
 800e83a:	2e00      	cmp	r6, #0
 800e83c:	db05      	blt.n	800e84a <_printf_i+0x10e>
 800e83e:	6821      	ldr	r1, [r4, #0]
 800e840:	432e      	orrs	r6, r5
 800e842:	f021 0104 	bic.w	r1, r1, #4
 800e846:	6021      	str	r1, [r4, #0]
 800e848:	d04b      	beq.n	800e8e2 <_printf_i+0x1a6>
 800e84a:	4616      	mov	r6, r2
 800e84c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e850:	fb03 5711 	mls	r7, r3, r1, r5
 800e854:	5dc7      	ldrb	r7, [r0, r7]
 800e856:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e85a:	462f      	mov	r7, r5
 800e85c:	42bb      	cmp	r3, r7
 800e85e:	460d      	mov	r5, r1
 800e860:	d9f4      	bls.n	800e84c <_printf_i+0x110>
 800e862:	2b08      	cmp	r3, #8
 800e864:	d10b      	bne.n	800e87e <_printf_i+0x142>
 800e866:	6823      	ldr	r3, [r4, #0]
 800e868:	07df      	lsls	r7, r3, #31
 800e86a:	d508      	bpl.n	800e87e <_printf_i+0x142>
 800e86c:	6923      	ldr	r3, [r4, #16]
 800e86e:	6861      	ldr	r1, [r4, #4]
 800e870:	4299      	cmp	r1, r3
 800e872:	bfde      	ittt	le
 800e874:	2330      	movle	r3, #48	@ 0x30
 800e876:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e87a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e87e:	1b92      	subs	r2, r2, r6
 800e880:	6122      	str	r2, [r4, #16]
 800e882:	f8cd a000 	str.w	sl, [sp]
 800e886:	464b      	mov	r3, r9
 800e888:	aa03      	add	r2, sp, #12
 800e88a:	4621      	mov	r1, r4
 800e88c:	4640      	mov	r0, r8
 800e88e:	f7ff fee7 	bl	800e660 <_printf_common>
 800e892:	3001      	adds	r0, #1
 800e894:	d14a      	bne.n	800e92c <_printf_i+0x1f0>
 800e896:	f04f 30ff 	mov.w	r0, #4294967295
 800e89a:	b004      	add	sp, #16
 800e89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8a0:	6823      	ldr	r3, [r4, #0]
 800e8a2:	f043 0320 	orr.w	r3, r3, #32
 800e8a6:	6023      	str	r3, [r4, #0]
 800e8a8:	4832      	ldr	r0, [pc, #200]	@ (800e974 <_printf_i+0x238>)
 800e8aa:	2778      	movs	r7, #120	@ 0x78
 800e8ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e8b0:	6823      	ldr	r3, [r4, #0]
 800e8b2:	6831      	ldr	r1, [r6, #0]
 800e8b4:	061f      	lsls	r7, r3, #24
 800e8b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800e8ba:	d402      	bmi.n	800e8c2 <_printf_i+0x186>
 800e8bc:	065f      	lsls	r7, r3, #25
 800e8be:	bf48      	it	mi
 800e8c0:	b2ad      	uxthmi	r5, r5
 800e8c2:	6031      	str	r1, [r6, #0]
 800e8c4:	07d9      	lsls	r1, r3, #31
 800e8c6:	bf44      	itt	mi
 800e8c8:	f043 0320 	orrmi.w	r3, r3, #32
 800e8cc:	6023      	strmi	r3, [r4, #0]
 800e8ce:	b11d      	cbz	r5, 800e8d8 <_printf_i+0x19c>
 800e8d0:	2310      	movs	r3, #16
 800e8d2:	e7ad      	b.n	800e830 <_printf_i+0xf4>
 800e8d4:	4826      	ldr	r0, [pc, #152]	@ (800e970 <_printf_i+0x234>)
 800e8d6:	e7e9      	b.n	800e8ac <_printf_i+0x170>
 800e8d8:	6823      	ldr	r3, [r4, #0]
 800e8da:	f023 0320 	bic.w	r3, r3, #32
 800e8de:	6023      	str	r3, [r4, #0]
 800e8e0:	e7f6      	b.n	800e8d0 <_printf_i+0x194>
 800e8e2:	4616      	mov	r6, r2
 800e8e4:	e7bd      	b.n	800e862 <_printf_i+0x126>
 800e8e6:	6833      	ldr	r3, [r6, #0]
 800e8e8:	6825      	ldr	r5, [r4, #0]
 800e8ea:	6961      	ldr	r1, [r4, #20]
 800e8ec:	1d18      	adds	r0, r3, #4
 800e8ee:	6030      	str	r0, [r6, #0]
 800e8f0:	062e      	lsls	r6, r5, #24
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	d501      	bpl.n	800e8fa <_printf_i+0x1be>
 800e8f6:	6019      	str	r1, [r3, #0]
 800e8f8:	e002      	b.n	800e900 <_printf_i+0x1c4>
 800e8fa:	0668      	lsls	r0, r5, #25
 800e8fc:	d5fb      	bpl.n	800e8f6 <_printf_i+0x1ba>
 800e8fe:	8019      	strh	r1, [r3, #0]
 800e900:	2300      	movs	r3, #0
 800e902:	6123      	str	r3, [r4, #16]
 800e904:	4616      	mov	r6, r2
 800e906:	e7bc      	b.n	800e882 <_printf_i+0x146>
 800e908:	6833      	ldr	r3, [r6, #0]
 800e90a:	1d1a      	adds	r2, r3, #4
 800e90c:	6032      	str	r2, [r6, #0]
 800e90e:	681e      	ldr	r6, [r3, #0]
 800e910:	6862      	ldr	r2, [r4, #4]
 800e912:	2100      	movs	r1, #0
 800e914:	4630      	mov	r0, r6
 800e916:	f7f1 fc83 	bl	8000220 <memchr>
 800e91a:	b108      	cbz	r0, 800e920 <_printf_i+0x1e4>
 800e91c:	1b80      	subs	r0, r0, r6
 800e91e:	6060      	str	r0, [r4, #4]
 800e920:	6863      	ldr	r3, [r4, #4]
 800e922:	6123      	str	r3, [r4, #16]
 800e924:	2300      	movs	r3, #0
 800e926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e92a:	e7aa      	b.n	800e882 <_printf_i+0x146>
 800e92c:	6923      	ldr	r3, [r4, #16]
 800e92e:	4632      	mov	r2, r6
 800e930:	4649      	mov	r1, r9
 800e932:	4640      	mov	r0, r8
 800e934:	47d0      	blx	sl
 800e936:	3001      	adds	r0, #1
 800e938:	d0ad      	beq.n	800e896 <_printf_i+0x15a>
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	079b      	lsls	r3, r3, #30
 800e93e:	d413      	bmi.n	800e968 <_printf_i+0x22c>
 800e940:	68e0      	ldr	r0, [r4, #12]
 800e942:	9b03      	ldr	r3, [sp, #12]
 800e944:	4298      	cmp	r0, r3
 800e946:	bfb8      	it	lt
 800e948:	4618      	movlt	r0, r3
 800e94a:	e7a6      	b.n	800e89a <_printf_i+0x15e>
 800e94c:	2301      	movs	r3, #1
 800e94e:	4632      	mov	r2, r6
 800e950:	4649      	mov	r1, r9
 800e952:	4640      	mov	r0, r8
 800e954:	47d0      	blx	sl
 800e956:	3001      	adds	r0, #1
 800e958:	d09d      	beq.n	800e896 <_printf_i+0x15a>
 800e95a:	3501      	adds	r5, #1
 800e95c:	68e3      	ldr	r3, [r4, #12]
 800e95e:	9903      	ldr	r1, [sp, #12]
 800e960:	1a5b      	subs	r3, r3, r1
 800e962:	42ab      	cmp	r3, r5
 800e964:	dcf2      	bgt.n	800e94c <_printf_i+0x210>
 800e966:	e7eb      	b.n	800e940 <_printf_i+0x204>
 800e968:	2500      	movs	r5, #0
 800e96a:	f104 0619 	add.w	r6, r4, #25
 800e96e:	e7f5      	b.n	800e95c <_printf_i+0x220>
 800e970:	08011226 	.word	0x08011226
 800e974:	08011237 	.word	0x08011237

0800e978 <std>:
 800e978:	2300      	movs	r3, #0
 800e97a:	b510      	push	{r4, lr}
 800e97c:	4604      	mov	r4, r0
 800e97e:	e9c0 3300 	strd	r3, r3, [r0]
 800e982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e986:	6083      	str	r3, [r0, #8]
 800e988:	8181      	strh	r1, [r0, #12]
 800e98a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e98c:	81c2      	strh	r2, [r0, #14]
 800e98e:	6183      	str	r3, [r0, #24]
 800e990:	4619      	mov	r1, r3
 800e992:	2208      	movs	r2, #8
 800e994:	305c      	adds	r0, #92	@ 0x5c
 800e996:	f000 f915 	bl	800ebc4 <memset>
 800e99a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d0 <std+0x58>)
 800e99c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e99e:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d4 <std+0x5c>)
 800e9a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d8 <std+0x60>)
 800e9a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e9dc <std+0x64>)
 800e9a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e9e0 <std+0x68>)
 800e9ac:	6224      	str	r4, [r4, #32]
 800e9ae:	429c      	cmp	r4, r3
 800e9b0:	d006      	beq.n	800e9c0 <std+0x48>
 800e9b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e9b6:	4294      	cmp	r4, r2
 800e9b8:	d002      	beq.n	800e9c0 <std+0x48>
 800e9ba:	33d0      	adds	r3, #208	@ 0xd0
 800e9bc:	429c      	cmp	r4, r3
 800e9be:	d105      	bne.n	800e9cc <std+0x54>
 800e9c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9c8:	f000 b9d6 	b.w	800ed78 <__retarget_lock_init_recursive>
 800e9cc:	bd10      	pop	{r4, pc}
 800e9ce:	bf00      	nop
 800e9d0:	0800eafd 	.word	0x0800eafd
 800e9d4:	0800eb1f 	.word	0x0800eb1f
 800e9d8:	0800eb57 	.word	0x0800eb57
 800e9dc:	0800eb7b 	.word	0x0800eb7b
 800e9e0:	2000a588 	.word	0x2000a588

0800e9e4 <stdio_exit_handler>:
 800e9e4:	4a02      	ldr	r2, [pc, #8]	@ (800e9f0 <stdio_exit_handler+0xc>)
 800e9e6:	4903      	ldr	r1, [pc, #12]	@ (800e9f4 <stdio_exit_handler+0x10>)
 800e9e8:	4803      	ldr	r0, [pc, #12]	@ (800e9f8 <stdio_exit_handler+0x14>)
 800e9ea:	f000 b869 	b.w	800eac0 <_fwalk_sglue>
 800e9ee:	bf00      	nop
 800e9f0:	20000188 	.word	0x20000188
 800e9f4:	080106fd 	.word	0x080106fd
 800e9f8:	20000198 	.word	0x20000198

0800e9fc <cleanup_stdio>:
 800e9fc:	6841      	ldr	r1, [r0, #4]
 800e9fe:	4b0c      	ldr	r3, [pc, #48]	@ (800ea30 <cleanup_stdio+0x34>)
 800ea00:	4299      	cmp	r1, r3
 800ea02:	b510      	push	{r4, lr}
 800ea04:	4604      	mov	r4, r0
 800ea06:	d001      	beq.n	800ea0c <cleanup_stdio+0x10>
 800ea08:	f001 fe78 	bl	80106fc <_fflush_r>
 800ea0c:	68a1      	ldr	r1, [r4, #8]
 800ea0e:	4b09      	ldr	r3, [pc, #36]	@ (800ea34 <cleanup_stdio+0x38>)
 800ea10:	4299      	cmp	r1, r3
 800ea12:	d002      	beq.n	800ea1a <cleanup_stdio+0x1e>
 800ea14:	4620      	mov	r0, r4
 800ea16:	f001 fe71 	bl	80106fc <_fflush_r>
 800ea1a:	68e1      	ldr	r1, [r4, #12]
 800ea1c:	4b06      	ldr	r3, [pc, #24]	@ (800ea38 <cleanup_stdio+0x3c>)
 800ea1e:	4299      	cmp	r1, r3
 800ea20:	d004      	beq.n	800ea2c <cleanup_stdio+0x30>
 800ea22:	4620      	mov	r0, r4
 800ea24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea28:	f001 be68 	b.w	80106fc <_fflush_r>
 800ea2c:	bd10      	pop	{r4, pc}
 800ea2e:	bf00      	nop
 800ea30:	2000a588 	.word	0x2000a588
 800ea34:	2000a5f0 	.word	0x2000a5f0
 800ea38:	2000a658 	.word	0x2000a658

0800ea3c <global_stdio_init.part.0>:
 800ea3c:	b510      	push	{r4, lr}
 800ea3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea6c <global_stdio_init.part.0+0x30>)
 800ea40:	4c0b      	ldr	r4, [pc, #44]	@ (800ea70 <global_stdio_init.part.0+0x34>)
 800ea42:	4a0c      	ldr	r2, [pc, #48]	@ (800ea74 <global_stdio_init.part.0+0x38>)
 800ea44:	601a      	str	r2, [r3, #0]
 800ea46:	4620      	mov	r0, r4
 800ea48:	2200      	movs	r2, #0
 800ea4a:	2104      	movs	r1, #4
 800ea4c:	f7ff ff94 	bl	800e978 <std>
 800ea50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ea54:	2201      	movs	r2, #1
 800ea56:	2109      	movs	r1, #9
 800ea58:	f7ff ff8e 	bl	800e978 <std>
 800ea5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea60:	2202      	movs	r2, #2
 800ea62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea66:	2112      	movs	r1, #18
 800ea68:	f7ff bf86 	b.w	800e978 <std>
 800ea6c:	2000a6c0 	.word	0x2000a6c0
 800ea70:	2000a588 	.word	0x2000a588
 800ea74:	0800e9e5 	.word	0x0800e9e5

0800ea78 <__sfp_lock_acquire>:
 800ea78:	4801      	ldr	r0, [pc, #4]	@ (800ea80 <__sfp_lock_acquire+0x8>)
 800ea7a:	f000 b97e 	b.w	800ed7a <__retarget_lock_acquire_recursive>
 800ea7e:	bf00      	nop
 800ea80:	2000a6c9 	.word	0x2000a6c9

0800ea84 <__sfp_lock_release>:
 800ea84:	4801      	ldr	r0, [pc, #4]	@ (800ea8c <__sfp_lock_release+0x8>)
 800ea86:	f000 b979 	b.w	800ed7c <__retarget_lock_release_recursive>
 800ea8a:	bf00      	nop
 800ea8c:	2000a6c9 	.word	0x2000a6c9

0800ea90 <__sinit>:
 800ea90:	b510      	push	{r4, lr}
 800ea92:	4604      	mov	r4, r0
 800ea94:	f7ff fff0 	bl	800ea78 <__sfp_lock_acquire>
 800ea98:	6a23      	ldr	r3, [r4, #32]
 800ea9a:	b11b      	cbz	r3, 800eaa4 <__sinit+0x14>
 800ea9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaa0:	f7ff bff0 	b.w	800ea84 <__sfp_lock_release>
 800eaa4:	4b04      	ldr	r3, [pc, #16]	@ (800eab8 <__sinit+0x28>)
 800eaa6:	6223      	str	r3, [r4, #32]
 800eaa8:	4b04      	ldr	r3, [pc, #16]	@ (800eabc <__sinit+0x2c>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d1f5      	bne.n	800ea9c <__sinit+0xc>
 800eab0:	f7ff ffc4 	bl	800ea3c <global_stdio_init.part.0>
 800eab4:	e7f2      	b.n	800ea9c <__sinit+0xc>
 800eab6:	bf00      	nop
 800eab8:	0800e9fd 	.word	0x0800e9fd
 800eabc:	2000a6c0 	.word	0x2000a6c0

0800eac0 <_fwalk_sglue>:
 800eac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eac4:	4607      	mov	r7, r0
 800eac6:	4688      	mov	r8, r1
 800eac8:	4614      	mov	r4, r2
 800eaca:	2600      	movs	r6, #0
 800eacc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ead0:	f1b9 0901 	subs.w	r9, r9, #1
 800ead4:	d505      	bpl.n	800eae2 <_fwalk_sglue+0x22>
 800ead6:	6824      	ldr	r4, [r4, #0]
 800ead8:	2c00      	cmp	r4, #0
 800eada:	d1f7      	bne.n	800eacc <_fwalk_sglue+0xc>
 800eadc:	4630      	mov	r0, r6
 800eade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eae2:	89ab      	ldrh	r3, [r5, #12]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d907      	bls.n	800eaf8 <_fwalk_sglue+0x38>
 800eae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eaec:	3301      	adds	r3, #1
 800eaee:	d003      	beq.n	800eaf8 <_fwalk_sglue+0x38>
 800eaf0:	4629      	mov	r1, r5
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	47c0      	blx	r8
 800eaf6:	4306      	orrs	r6, r0
 800eaf8:	3568      	adds	r5, #104	@ 0x68
 800eafa:	e7e9      	b.n	800ead0 <_fwalk_sglue+0x10>

0800eafc <__sread>:
 800eafc:	b510      	push	{r4, lr}
 800eafe:	460c      	mov	r4, r1
 800eb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb04:	f000 f8ea 	bl	800ecdc <_read_r>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	bfab      	itete	ge
 800eb0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb0e:	89a3      	ldrhlt	r3, [r4, #12]
 800eb10:	181b      	addge	r3, r3, r0
 800eb12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb16:	bfac      	ite	ge
 800eb18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb1a:	81a3      	strhlt	r3, [r4, #12]
 800eb1c:	bd10      	pop	{r4, pc}

0800eb1e <__swrite>:
 800eb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb22:	461f      	mov	r7, r3
 800eb24:	898b      	ldrh	r3, [r1, #12]
 800eb26:	05db      	lsls	r3, r3, #23
 800eb28:	4605      	mov	r5, r0
 800eb2a:	460c      	mov	r4, r1
 800eb2c:	4616      	mov	r6, r2
 800eb2e:	d505      	bpl.n	800eb3c <__swrite+0x1e>
 800eb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb34:	2302      	movs	r3, #2
 800eb36:	2200      	movs	r2, #0
 800eb38:	f000 f8be 	bl	800ecb8 <_lseek_r>
 800eb3c:	89a3      	ldrh	r3, [r4, #12]
 800eb3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb46:	81a3      	strh	r3, [r4, #12]
 800eb48:	4632      	mov	r2, r6
 800eb4a:	463b      	mov	r3, r7
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb52:	f000 b8d5 	b.w	800ed00 <_write_r>

0800eb56 <__sseek>:
 800eb56:	b510      	push	{r4, lr}
 800eb58:	460c      	mov	r4, r1
 800eb5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb5e:	f000 f8ab 	bl	800ecb8 <_lseek_r>
 800eb62:	1c43      	adds	r3, r0, #1
 800eb64:	89a3      	ldrh	r3, [r4, #12]
 800eb66:	bf15      	itete	ne
 800eb68:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb72:	81a3      	strheq	r3, [r4, #12]
 800eb74:	bf18      	it	ne
 800eb76:	81a3      	strhne	r3, [r4, #12]
 800eb78:	bd10      	pop	{r4, pc}

0800eb7a <__sclose>:
 800eb7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb7e:	f000 b82d 	b.w	800ebdc <_close_r>
	...

0800eb84 <_vsiprintf_r>:
 800eb84:	b510      	push	{r4, lr}
 800eb86:	b09a      	sub	sp, #104	@ 0x68
 800eb88:	2400      	movs	r4, #0
 800eb8a:	9100      	str	r1, [sp, #0]
 800eb8c:	9104      	str	r1, [sp, #16]
 800eb8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eb92:	9105      	str	r1, [sp, #20]
 800eb94:	9102      	str	r1, [sp, #8]
 800eb96:	4905      	ldr	r1, [pc, #20]	@ (800ebac <_vsiprintf_r+0x28>)
 800eb98:	9103      	str	r1, [sp, #12]
 800eb9a:	4669      	mov	r1, sp
 800eb9c:	9419      	str	r4, [sp, #100]	@ 0x64
 800eb9e:	f001 fc2d 	bl	80103fc <_svfiprintf_r>
 800eba2:	9b00      	ldr	r3, [sp, #0]
 800eba4:	701c      	strb	r4, [r3, #0]
 800eba6:	b01a      	add	sp, #104	@ 0x68
 800eba8:	bd10      	pop	{r4, pc}
 800ebaa:	bf00      	nop
 800ebac:	ffff0208 	.word	0xffff0208

0800ebb0 <vsiprintf>:
 800ebb0:	4613      	mov	r3, r2
 800ebb2:	460a      	mov	r2, r1
 800ebb4:	4601      	mov	r1, r0
 800ebb6:	4802      	ldr	r0, [pc, #8]	@ (800ebc0 <vsiprintf+0x10>)
 800ebb8:	6800      	ldr	r0, [r0, #0]
 800ebba:	f7ff bfe3 	b.w	800eb84 <_vsiprintf_r>
 800ebbe:	bf00      	nop
 800ebc0:	20000194 	.word	0x20000194

0800ebc4 <memset>:
 800ebc4:	4402      	add	r2, r0
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d100      	bne.n	800ebce <memset+0xa>
 800ebcc:	4770      	bx	lr
 800ebce:	f803 1b01 	strb.w	r1, [r3], #1
 800ebd2:	e7f9      	b.n	800ebc8 <memset+0x4>

0800ebd4 <_localeconv_r>:
 800ebd4:	4800      	ldr	r0, [pc, #0]	@ (800ebd8 <_localeconv_r+0x4>)
 800ebd6:	4770      	bx	lr
 800ebd8:	200002d4 	.word	0x200002d4

0800ebdc <_close_r>:
 800ebdc:	b538      	push	{r3, r4, r5, lr}
 800ebde:	4d06      	ldr	r5, [pc, #24]	@ (800ebf8 <_close_r+0x1c>)
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	4604      	mov	r4, r0
 800ebe4:	4608      	mov	r0, r1
 800ebe6:	602b      	str	r3, [r5, #0]
 800ebe8:	f7f3 f8f4 	bl	8001dd4 <_close>
 800ebec:	1c43      	adds	r3, r0, #1
 800ebee:	d102      	bne.n	800ebf6 <_close_r+0x1a>
 800ebf0:	682b      	ldr	r3, [r5, #0]
 800ebf2:	b103      	cbz	r3, 800ebf6 <_close_r+0x1a>
 800ebf4:	6023      	str	r3, [r4, #0]
 800ebf6:	bd38      	pop	{r3, r4, r5, pc}
 800ebf8:	2000a6c4 	.word	0x2000a6c4

0800ebfc <_reclaim_reent>:
 800ebfc:	4b2d      	ldr	r3, [pc, #180]	@ (800ecb4 <_reclaim_reent+0xb8>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4283      	cmp	r3, r0
 800ec02:	b570      	push	{r4, r5, r6, lr}
 800ec04:	4604      	mov	r4, r0
 800ec06:	d053      	beq.n	800ecb0 <_reclaim_reent+0xb4>
 800ec08:	69c3      	ldr	r3, [r0, #28]
 800ec0a:	b31b      	cbz	r3, 800ec54 <_reclaim_reent+0x58>
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	b163      	cbz	r3, 800ec2a <_reclaim_reent+0x2e>
 800ec10:	2500      	movs	r5, #0
 800ec12:	69e3      	ldr	r3, [r4, #28]
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	5959      	ldr	r1, [r3, r5]
 800ec18:	b9b1      	cbnz	r1, 800ec48 <_reclaim_reent+0x4c>
 800ec1a:	3504      	adds	r5, #4
 800ec1c:	2d80      	cmp	r5, #128	@ 0x80
 800ec1e:	d1f8      	bne.n	800ec12 <_reclaim_reent+0x16>
 800ec20:	69e3      	ldr	r3, [r4, #28]
 800ec22:	4620      	mov	r0, r4
 800ec24:	68d9      	ldr	r1, [r3, #12]
 800ec26:	f000 ff13 	bl	800fa50 <_free_r>
 800ec2a:	69e3      	ldr	r3, [r4, #28]
 800ec2c:	6819      	ldr	r1, [r3, #0]
 800ec2e:	b111      	cbz	r1, 800ec36 <_reclaim_reent+0x3a>
 800ec30:	4620      	mov	r0, r4
 800ec32:	f000 ff0d 	bl	800fa50 <_free_r>
 800ec36:	69e3      	ldr	r3, [r4, #28]
 800ec38:	689d      	ldr	r5, [r3, #8]
 800ec3a:	b15d      	cbz	r5, 800ec54 <_reclaim_reent+0x58>
 800ec3c:	4629      	mov	r1, r5
 800ec3e:	4620      	mov	r0, r4
 800ec40:	682d      	ldr	r5, [r5, #0]
 800ec42:	f000 ff05 	bl	800fa50 <_free_r>
 800ec46:	e7f8      	b.n	800ec3a <_reclaim_reent+0x3e>
 800ec48:	680e      	ldr	r6, [r1, #0]
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f000 ff00 	bl	800fa50 <_free_r>
 800ec50:	4631      	mov	r1, r6
 800ec52:	e7e1      	b.n	800ec18 <_reclaim_reent+0x1c>
 800ec54:	6961      	ldr	r1, [r4, #20]
 800ec56:	b111      	cbz	r1, 800ec5e <_reclaim_reent+0x62>
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 fef9 	bl	800fa50 <_free_r>
 800ec5e:	69e1      	ldr	r1, [r4, #28]
 800ec60:	b111      	cbz	r1, 800ec68 <_reclaim_reent+0x6c>
 800ec62:	4620      	mov	r0, r4
 800ec64:	f000 fef4 	bl	800fa50 <_free_r>
 800ec68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ec6a:	b111      	cbz	r1, 800ec72 <_reclaim_reent+0x76>
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f000 feef 	bl	800fa50 <_free_r>
 800ec72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec74:	b111      	cbz	r1, 800ec7c <_reclaim_reent+0x80>
 800ec76:	4620      	mov	r0, r4
 800ec78:	f000 feea 	bl	800fa50 <_free_r>
 800ec7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ec7e:	b111      	cbz	r1, 800ec86 <_reclaim_reent+0x8a>
 800ec80:	4620      	mov	r0, r4
 800ec82:	f000 fee5 	bl	800fa50 <_free_r>
 800ec86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ec88:	b111      	cbz	r1, 800ec90 <_reclaim_reent+0x94>
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	f000 fee0 	bl	800fa50 <_free_r>
 800ec90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ec92:	b111      	cbz	r1, 800ec9a <_reclaim_reent+0x9e>
 800ec94:	4620      	mov	r0, r4
 800ec96:	f000 fedb 	bl	800fa50 <_free_r>
 800ec9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ec9c:	b111      	cbz	r1, 800eca4 <_reclaim_reent+0xa8>
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f000 fed6 	bl	800fa50 <_free_r>
 800eca4:	6a23      	ldr	r3, [r4, #32]
 800eca6:	b11b      	cbz	r3, 800ecb0 <_reclaim_reent+0xb4>
 800eca8:	4620      	mov	r0, r4
 800ecaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecae:	4718      	bx	r3
 800ecb0:	bd70      	pop	{r4, r5, r6, pc}
 800ecb2:	bf00      	nop
 800ecb4:	20000194 	.word	0x20000194

0800ecb8 <_lseek_r>:
 800ecb8:	b538      	push	{r3, r4, r5, lr}
 800ecba:	4d07      	ldr	r5, [pc, #28]	@ (800ecd8 <_lseek_r+0x20>)
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	4608      	mov	r0, r1
 800ecc0:	4611      	mov	r1, r2
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	602a      	str	r2, [r5, #0]
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	f7f3 f8ab 	bl	8001e22 <_lseek>
 800eccc:	1c43      	adds	r3, r0, #1
 800ecce:	d102      	bne.n	800ecd6 <_lseek_r+0x1e>
 800ecd0:	682b      	ldr	r3, [r5, #0]
 800ecd2:	b103      	cbz	r3, 800ecd6 <_lseek_r+0x1e>
 800ecd4:	6023      	str	r3, [r4, #0]
 800ecd6:	bd38      	pop	{r3, r4, r5, pc}
 800ecd8:	2000a6c4 	.word	0x2000a6c4

0800ecdc <_read_r>:
 800ecdc:	b538      	push	{r3, r4, r5, lr}
 800ecde:	4d07      	ldr	r5, [pc, #28]	@ (800ecfc <_read_r+0x20>)
 800ece0:	4604      	mov	r4, r0
 800ece2:	4608      	mov	r0, r1
 800ece4:	4611      	mov	r1, r2
 800ece6:	2200      	movs	r2, #0
 800ece8:	602a      	str	r2, [r5, #0]
 800ecea:	461a      	mov	r2, r3
 800ecec:	f7f3 f839 	bl	8001d62 <_read>
 800ecf0:	1c43      	adds	r3, r0, #1
 800ecf2:	d102      	bne.n	800ecfa <_read_r+0x1e>
 800ecf4:	682b      	ldr	r3, [r5, #0]
 800ecf6:	b103      	cbz	r3, 800ecfa <_read_r+0x1e>
 800ecf8:	6023      	str	r3, [r4, #0]
 800ecfa:	bd38      	pop	{r3, r4, r5, pc}
 800ecfc:	2000a6c4 	.word	0x2000a6c4

0800ed00 <_write_r>:
 800ed00:	b538      	push	{r3, r4, r5, lr}
 800ed02:	4d07      	ldr	r5, [pc, #28]	@ (800ed20 <_write_r+0x20>)
 800ed04:	4604      	mov	r4, r0
 800ed06:	4608      	mov	r0, r1
 800ed08:	4611      	mov	r1, r2
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	602a      	str	r2, [r5, #0]
 800ed0e:	461a      	mov	r2, r3
 800ed10:	f7f3 f844 	bl	8001d9c <_write>
 800ed14:	1c43      	adds	r3, r0, #1
 800ed16:	d102      	bne.n	800ed1e <_write_r+0x1e>
 800ed18:	682b      	ldr	r3, [r5, #0]
 800ed1a:	b103      	cbz	r3, 800ed1e <_write_r+0x1e>
 800ed1c:	6023      	str	r3, [r4, #0]
 800ed1e:	bd38      	pop	{r3, r4, r5, pc}
 800ed20:	2000a6c4 	.word	0x2000a6c4

0800ed24 <__errno>:
 800ed24:	4b01      	ldr	r3, [pc, #4]	@ (800ed2c <__errno+0x8>)
 800ed26:	6818      	ldr	r0, [r3, #0]
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	20000194 	.word	0x20000194

0800ed30 <__libc_init_array>:
 800ed30:	b570      	push	{r4, r5, r6, lr}
 800ed32:	4d0d      	ldr	r5, [pc, #52]	@ (800ed68 <__libc_init_array+0x38>)
 800ed34:	4c0d      	ldr	r4, [pc, #52]	@ (800ed6c <__libc_init_array+0x3c>)
 800ed36:	1b64      	subs	r4, r4, r5
 800ed38:	10a4      	asrs	r4, r4, #2
 800ed3a:	2600      	movs	r6, #0
 800ed3c:	42a6      	cmp	r6, r4
 800ed3e:	d109      	bne.n	800ed54 <__libc_init_array+0x24>
 800ed40:	4d0b      	ldr	r5, [pc, #44]	@ (800ed70 <__libc_init_array+0x40>)
 800ed42:	4c0c      	ldr	r4, [pc, #48]	@ (800ed74 <__libc_init_array+0x44>)
 800ed44:	f002 f86a 	bl	8010e1c <_init>
 800ed48:	1b64      	subs	r4, r4, r5
 800ed4a:	10a4      	asrs	r4, r4, #2
 800ed4c:	2600      	movs	r6, #0
 800ed4e:	42a6      	cmp	r6, r4
 800ed50:	d105      	bne.n	800ed5e <__libc_init_array+0x2e>
 800ed52:	bd70      	pop	{r4, r5, r6, pc}
 800ed54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed58:	4798      	blx	r3
 800ed5a:	3601      	adds	r6, #1
 800ed5c:	e7ee      	b.n	800ed3c <__libc_init_array+0xc>
 800ed5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed62:	4798      	blx	r3
 800ed64:	3601      	adds	r6, #1
 800ed66:	e7f2      	b.n	800ed4e <__libc_init_array+0x1e>
 800ed68:	08011594 	.word	0x08011594
 800ed6c:	08011594 	.word	0x08011594
 800ed70:	08011594 	.word	0x08011594
 800ed74:	08011598 	.word	0x08011598

0800ed78 <__retarget_lock_init_recursive>:
 800ed78:	4770      	bx	lr

0800ed7a <__retarget_lock_acquire_recursive>:
 800ed7a:	4770      	bx	lr

0800ed7c <__retarget_lock_release_recursive>:
 800ed7c:	4770      	bx	lr

0800ed7e <memcpy>:
 800ed7e:	440a      	add	r2, r1
 800ed80:	4291      	cmp	r1, r2
 800ed82:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed86:	d100      	bne.n	800ed8a <memcpy+0xc>
 800ed88:	4770      	bx	lr
 800ed8a:	b510      	push	{r4, lr}
 800ed8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed94:	4291      	cmp	r1, r2
 800ed96:	d1f9      	bne.n	800ed8c <memcpy+0xe>
 800ed98:	bd10      	pop	{r4, pc}

0800ed9a <quorem>:
 800ed9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed9e:	6903      	ldr	r3, [r0, #16]
 800eda0:	690c      	ldr	r4, [r1, #16]
 800eda2:	42a3      	cmp	r3, r4
 800eda4:	4607      	mov	r7, r0
 800eda6:	db7e      	blt.n	800eea6 <quorem+0x10c>
 800eda8:	3c01      	subs	r4, #1
 800edaa:	f101 0814 	add.w	r8, r1, #20
 800edae:	00a3      	lsls	r3, r4, #2
 800edb0:	f100 0514 	add.w	r5, r0, #20
 800edb4:	9300      	str	r3, [sp, #0]
 800edb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edba:	9301      	str	r3, [sp, #4]
 800edbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800edc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800edc4:	3301      	adds	r3, #1
 800edc6:	429a      	cmp	r2, r3
 800edc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800edcc:	fbb2 f6f3 	udiv	r6, r2, r3
 800edd0:	d32e      	bcc.n	800ee30 <quorem+0x96>
 800edd2:	f04f 0a00 	mov.w	sl, #0
 800edd6:	46c4      	mov	ip, r8
 800edd8:	46ae      	mov	lr, r5
 800edda:	46d3      	mov	fp, sl
 800eddc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ede0:	b298      	uxth	r0, r3
 800ede2:	fb06 a000 	mla	r0, r6, r0, sl
 800ede6:	0c02      	lsrs	r2, r0, #16
 800ede8:	0c1b      	lsrs	r3, r3, #16
 800edea:	fb06 2303 	mla	r3, r6, r3, r2
 800edee:	f8de 2000 	ldr.w	r2, [lr]
 800edf2:	b280      	uxth	r0, r0
 800edf4:	b292      	uxth	r2, r2
 800edf6:	1a12      	subs	r2, r2, r0
 800edf8:	445a      	add	r2, fp
 800edfa:	f8de 0000 	ldr.w	r0, [lr]
 800edfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ee08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ee0c:	b292      	uxth	r2, r2
 800ee0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ee12:	45e1      	cmp	r9, ip
 800ee14:	f84e 2b04 	str.w	r2, [lr], #4
 800ee18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ee1c:	d2de      	bcs.n	800eddc <quorem+0x42>
 800ee1e:	9b00      	ldr	r3, [sp, #0]
 800ee20:	58eb      	ldr	r3, [r5, r3]
 800ee22:	b92b      	cbnz	r3, 800ee30 <quorem+0x96>
 800ee24:	9b01      	ldr	r3, [sp, #4]
 800ee26:	3b04      	subs	r3, #4
 800ee28:	429d      	cmp	r5, r3
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	d32f      	bcc.n	800ee8e <quorem+0xf4>
 800ee2e:	613c      	str	r4, [r7, #16]
 800ee30:	4638      	mov	r0, r7
 800ee32:	f001 f97f 	bl	8010134 <__mcmp>
 800ee36:	2800      	cmp	r0, #0
 800ee38:	db25      	blt.n	800ee86 <quorem+0xec>
 800ee3a:	4629      	mov	r1, r5
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ee42:	f8d1 c000 	ldr.w	ip, [r1]
 800ee46:	fa1f fe82 	uxth.w	lr, r2
 800ee4a:	fa1f f38c 	uxth.w	r3, ip
 800ee4e:	eba3 030e 	sub.w	r3, r3, lr
 800ee52:	4403      	add	r3, r0
 800ee54:	0c12      	lsrs	r2, r2, #16
 800ee56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ee5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee64:	45c1      	cmp	r9, r8
 800ee66:	f841 3b04 	str.w	r3, [r1], #4
 800ee6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ee6e:	d2e6      	bcs.n	800ee3e <quorem+0xa4>
 800ee70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee78:	b922      	cbnz	r2, 800ee84 <quorem+0xea>
 800ee7a:	3b04      	subs	r3, #4
 800ee7c:	429d      	cmp	r5, r3
 800ee7e:	461a      	mov	r2, r3
 800ee80:	d30b      	bcc.n	800ee9a <quorem+0x100>
 800ee82:	613c      	str	r4, [r7, #16]
 800ee84:	3601      	adds	r6, #1
 800ee86:	4630      	mov	r0, r6
 800ee88:	b003      	add	sp, #12
 800ee8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee8e:	6812      	ldr	r2, [r2, #0]
 800ee90:	3b04      	subs	r3, #4
 800ee92:	2a00      	cmp	r2, #0
 800ee94:	d1cb      	bne.n	800ee2e <quorem+0x94>
 800ee96:	3c01      	subs	r4, #1
 800ee98:	e7c6      	b.n	800ee28 <quorem+0x8e>
 800ee9a:	6812      	ldr	r2, [r2, #0]
 800ee9c:	3b04      	subs	r3, #4
 800ee9e:	2a00      	cmp	r2, #0
 800eea0:	d1ef      	bne.n	800ee82 <quorem+0xe8>
 800eea2:	3c01      	subs	r4, #1
 800eea4:	e7ea      	b.n	800ee7c <quorem+0xe2>
 800eea6:	2000      	movs	r0, #0
 800eea8:	e7ee      	b.n	800ee88 <quorem+0xee>
 800eeaa:	0000      	movs	r0, r0
 800eeac:	0000      	movs	r0, r0
	...

0800eeb0 <_dtoa_r>:
 800eeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb4:	69c7      	ldr	r7, [r0, #28]
 800eeb6:	b097      	sub	sp, #92	@ 0x5c
 800eeb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800eebc:	ec55 4b10 	vmov	r4, r5, d0
 800eec0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800eec2:	9107      	str	r1, [sp, #28]
 800eec4:	4681      	mov	r9, r0
 800eec6:	920c      	str	r2, [sp, #48]	@ 0x30
 800eec8:	9311      	str	r3, [sp, #68]	@ 0x44
 800eeca:	b97f      	cbnz	r7, 800eeec <_dtoa_r+0x3c>
 800eecc:	2010      	movs	r0, #16
 800eece:	f000 fe09 	bl	800fae4 <malloc>
 800eed2:	4602      	mov	r2, r0
 800eed4:	f8c9 001c 	str.w	r0, [r9, #28]
 800eed8:	b920      	cbnz	r0, 800eee4 <_dtoa_r+0x34>
 800eeda:	4ba9      	ldr	r3, [pc, #676]	@ (800f180 <_dtoa_r+0x2d0>)
 800eedc:	21ef      	movs	r1, #239	@ 0xef
 800eede:	48a9      	ldr	r0, [pc, #676]	@ (800f184 <_dtoa_r+0x2d4>)
 800eee0:	f001 fc5e 	bl	80107a0 <__assert_func>
 800eee4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800eee8:	6007      	str	r7, [r0, #0]
 800eeea:	60c7      	str	r7, [r0, #12]
 800eeec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eef0:	6819      	ldr	r1, [r3, #0]
 800eef2:	b159      	cbz	r1, 800ef0c <_dtoa_r+0x5c>
 800eef4:	685a      	ldr	r2, [r3, #4]
 800eef6:	604a      	str	r2, [r1, #4]
 800eef8:	2301      	movs	r3, #1
 800eefa:	4093      	lsls	r3, r2
 800eefc:	608b      	str	r3, [r1, #8]
 800eefe:	4648      	mov	r0, r9
 800ef00:	f000 fee6 	bl	800fcd0 <_Bfree>
 800ef04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	601a      	str	r2, [r3, #0]
 800ef0c:	1e2b      	subs	r3, r5, #0
 800ef0e:	bfb9      	ittee	lt
 800ef10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ef14:	9305      	strlt	r3, [sp, #20]
 800ef16:	2300      	movge	r3, #0
 800ef18:	6033      	strge	r3, [r6, #0]
 800ef1a:	9f05      	ldr	r7, [sp, #20]
 800ef1c:	4b9a      	ldr	r3, [pc, #616]	@ (800f188 <_dtoa_r+0x2d8>)
 800ef1e:	bfbc      	itt	lt
 800ef20:	2201      	movlt	r2, #1
 800ef22:	6032      	strlt	r2, [r6, #0]
 800ef24:	43bb      	bics	r3, r7
 800ef26:	d112      	bne.n	800ef4e <_dtoa_r+0x9e>
 800ef28:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ef2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ef2e:	6013      	str	r3, [r2, #0]
 800ef30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ef34:	4323      	orrs	r3, r4
 800ef36:	f000 855a 	beq.w	800f9ee <_dtoa_r+0xb3e>
 800ef3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ef3c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f19c <_dtoa_r+0x2ec>
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f000 855c 	beq.w	800f9fe <_dtoa_r+0xb4e>
 800ef46:	f10a 0303 	add.w	r3, sl, #3
 800ef4a:	f000 bd56 	b.w	800f9fa <_dtoa_r+0xb4a>
 800ef4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ef52:	2200      	movs	r2, #0
 800ef54:	ec51 0b17 	vmov	r0, r1, d7
 800ef58:	2300      	movs	r3, #0
 800ef5a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ef5e:	f7f1 fddb 	bl	8000b18 <__aeabi_dcmpeq>
 800ef62:	4680      	mov	r8, r0
 800ef64:	b158      	cbz	r0, 800ef7e <_dtoa_r+0xce>
 800ef66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ef68:	2301      	movs	r3, #1
 800ef6a:	6013      	str	r3, [r2, #0]
 800ef6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ef6e:	b113      	cbz	r3, 800ef76 <_dtoa_r+0xc6>
 800ef70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ef72:	4b86      	ldr	r3, [pc, #536]	@ (800f18c <_dtoa_r+0x2dc>)
 800ef74:	6013      	str	r3, [r2, #0]
 800ef76:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f1a0 <_dtoa_r+0x2f0>
 800ef7a:	f000 bd40 	b.w	800f9fe <_dtoa_r+0xb4e>
 800ef7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ef82:	aa14      	add	r2, sp, #80	@ 0x50
 800ef84:	a915      	add	r1, sp, #84	@ 0x54
 800ef86:	4648      	mov	r0, r9
 800ef88:	f001 f984 	bl	8010294 <__d2b>
 800ef8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ef90:	9002      	str	r0, [sp, #8]
 800ef92:	2e00      	cmp	r6, #0
 800ef94:	d078      	beq.n	800f088 <_dtoa_r+0x1d8>
 800ef96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef98:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ef9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800efa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800efa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800efac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800efb0:	4619      	mov	r1, r3
 800efb2:	2200      	movs	r2, #0
 800efb4:	4b76      	ldr	r3, [pc, #472]	@ (800f190 <_dtoa_r+0x2e0>)
 800efb6:	f7f1 f98f 	bl	80002d8 <__aeabi_dsub>
 800efba:	a36b      	add	r3, pc, #428	@ (adr r3, 800f168 <_dtoa_r+0x2b8>)
 800efbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc0:	f7f1 fb42 	bl	8000648 <__aeabi_dmul>
 800efc4:	a36a      	add	r3, pc, #424	@ (adr r3, 800f170 <_dtoa_r+0x2c0>)
 800efc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efca:	f7f1 f987 	bl	80002dc <__adddf3>
 800efce:	4604      	mov	r4, r0
 800efd0:	4630      	mov	r0, r6
 800efd2:	460d      	mov	r5, r1
 800efd4:	f7f1 face 	bl	8000574 <__aeabi_i2d>
 800efd8:	a367      	add	r3, pc, #412	@ (adr r3, 800f178 <_dtoa_r+0x2c8>)
 800efda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efde:	f7f1 fb33 	bl	8000648 <__aeabi_dmul>
 800efe2:	4602      	mov	r2, r0
 800efe4:	460b      	mov	r3, r1
 800efe6:	4620      	mov	r0, r4
 800efe8:	4629      	mov	r1, r5
 800efea:	f7f1 f977 	bl	80002dc <__adddf3>
 800efee:	4604      	mov	r4, r0
 800eff0:	460d      	mov	r5, r1
 800eff2:	f7f1 fdd9 	bl	8000ba8 <__aeabi_d2iz>
 800eff6:	2200      	movs	r2, #0
 800eff8:	4607      	mov	r7, r0
 800effa:	2300      	movs	r3, #0
 800effc:	4620      	mov	r0, r4
 800effe:	4629      	mov	r1, r5
 800f000:	f7f1 fd94 	bl	8000b2c <__aeabi_dcmplt>
 800f004:	b140      	cbz	r0, 800f018 <_dtoa_r+0x168>
 800f006:	4638      	mov	r0, r7
 800f008:	f7f1 fab4 	bl	8000574 <__aeabi_i2d>
 800f00c:	4622      	mov	r2, r4
 800f00e:	462b      	mov	r3, r5
 800f010:	f7f1 fd82 	bl	8000b18 <__aeabi_dcmpeq>
 800f014:	b900      	cbnz	r0, 800f018 <_dtoa_r+0x168>
 800f016:	3f01      	subs	r7, #1
 800f018:	2f16      	cmp	r7, #22
 800f01a:	d852      	bhi.n	800f0c2 <_dtoa_r+0x212>
 800f01c:	4b5d      	ldr	r3, [pc, #372]	@ (800f194 <_dtoa_r+0x2e4>)
 800f01e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f026:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f02a:	f7f1 fd7f 	bl	8000b2c <__aeabi_dcmplt>
 800f02e:	2800      	cmp	r0, #0
 800f030:	d049      	beq.n	800f0c6 <_dtoa_r+0x216>
 800f032:	3f01      	subs	r7, #1
 800f034:	2300      	movs	r3, #0
 800f036:	9310      	str	r3, [sp, #64]	@ 0x40
 800f038:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f03a:	1b9b      	subs	r3, r3, r6
 800f03c:	1e5a      	subs	r2, r3, #1
 800f03e:	bf45      	ittet	mi
 800f040:	f1c3 0301 	rsbmi	r3, r3, #1
 800f044:	9300      	strmi	r3, [sp, #0]
 800f046:	2300      	movpl	r3, #0
 800f048:	2300      	movmi	r3, #0
 800f04a:	9206      	str	r2, [sp, #24]
 800f04c:	bf54      	ite	pl
 800f04e:	9300      	strpl	r3, [sp, #0]
 800f050:	9306      	strmi	r3, [sp, #24]
 800f052:	2f00      	cmp	r7, #0
 800f054:	db39      	blt.n	800f0ca <_dtoa_r+0x21a>
 800f056:	9b06      	ldr	r3, [sp, #24]
 800f058:	970d      	str	r7, [sp, #52]	@ 0x34
 800f05a:	443b      	add	r3, r7
 800f05c:	9306      	str	r3, [sp, #24]
 800f05e:	2300      	movs	r3, #0
 800f060:	9308      	str	r3, [sp, #32]
 800f062:	9b07      	ldr	r3, [sp, #28]
 800f064:	2b09      	cmp	r3, #9
 800f066:	d863      	bhi.n	800f130 <_dtoa_r+0x280>
 800f068:	2b05      	cmp	r3, #5
 800f06a:	bfc4      	itt	gt
 800f06c:	3b04      	subgt	r3, #4
 800f06e:	9307      	strgt	r3, [sp, #28]
 800f070:	9b07      	ldr	r3, [sp, #28]
 800f072:	f1a3 0302 	sub.w	r3, r3, #2
 800f076:	bfcc      	ite	gt
 800f078:	2400      	movgt	r4, #0
 800f07a:	2401      	movle	r4, #1
 800f07c:	2b03      	cmp	r3, #3
 800f07e:	d863      	bhi.n	800f148 <_dtoa_r+0x298>
 800f080:	e8df f003 	tbb	[pc, r3]
 800f084:	2b375452 	.word	0x2b375452
 800f088:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f08c:	441e      	add	r6, r3
 800f08e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f092:	2b20      	cmp	r3, #32
 800f094:	bfc1      	itttt	gt
 800f096:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f09a:	409f      	lslgt	r7, r3
 800f09c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f0a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f0a4:	bfd6      	itet	le
 800f0a6:	f1c3 0320 	rsble	r3, r3, #32
 800f0aa:	ea47 0003 	orrgt.w	r0, r7, r3
 800f0ae:	fa04 f003 	lslle.w	r0, r4, r3
 800f0b2:	f7f1 fa4f 	bl	8000554 <__aeabi_ui2d>
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f0bc:	3e01      	subs	r6, #1
 800f0be:	9212      	str	r2, [sp, #72]	@ 0x48
 800f0c0:	e776      	b.n	800efb0 <_dtoa_r+0x100>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e7b7      	b.n	800f036 <_dtoa_r+0x186>
 800f0c6:	9010      	str	r0, [sp, #64]	@ 0x40
 800f0c8:	e7b6      	b.n	800f038 <_dtoa_r+0x188>
 800f0ca:	9b00      	ldr	r3, [sp, #0]
 800f0cc:	1bdb      	subs	r3, r3, r7
 800f0ce:	9300      	str	r3, [sp, #0]
 800f0d0:	427b      	negs	r3, r7
 800f0d2:	9308      	str	r3, [sp, #32]
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	930d      	str	r3, [sp, #52]	@ 0x34
 800f0d8:	e7c3      	b.n	800f062 <_dtoa_r+0x1b2>
 800f0da:	2301      	movs	r3, #1
 800f0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0e0:	eb07 0b03 	add.w	fp, r7, r3
 800f0e4:	f10b 0301 	add.w	r3, fp, #1
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	9303      	str	r3, [sp, #12]
 800f0ec:	bfb8      	it	lt
 800f0ee:	2301      	movlt	r3, #1
 800f0f0:	e006      	b.n	800f100 <_dtoa_r+0x250>
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	dd28      	ble.n	800f14e <_dtoa_r+0x29e>
 800f0fc:	469b      	mov	fp, r3
 800f0fe:	9303      	str	r3, [sp, #12]
 800f100:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f104:	2100      	movs	r1, #0
 800f106:	2204      	movs	r2, #4
 800f108:	f102 0514 	add.w	r5, r2, #20
 800f10c:	429d      	cmp	r5, r3
 800f10e:	d926      	bls.n	800f15e <_dtoa_r+0x2ae>
 800f110:	6041      	str	r1, [r0, #4]
 800f112:	4648      	mov	r0, r9
 800f114:	f000 fd9c 	bl	800fc50 <_Balloc>
 800f118:	4682      	mov	sl, r0
 800f11a:	2800      	cmp	r0, #0
 800f11c:	d142      	bne.n	800f1a4 <_dtoa_r+0x2f4>
 800f11e:	4b1e      	ldr	r3, [pc, #120]	@ (800f198 <_dtoa_r+0x2e8>)
 800f120:	4602      	mov	r2, r0
 800f122:	f240 11af 	movw	r1, #431	@ 0x1af
 800f126:	e6da      	b.n	800eede <_dtoa_r+0x2e>
 800f128:	2300      	movs	r3, #0
 800f12a:	e7e3      	b.n	800f0f4 <_dtoa_r+0x244>
 800f12c:	2300      	movs	r3, #0
 800f12e:	e7d5      	b.n	800f0dc <_dtoa_r+0x22c>
 800f130:	2401      	movs	r4, #1
 800f132:	2300      	movs	r3, #0
 800f134:	9307      	str	r3, [sp, #28]
 800f136:	9409      	str	r4, [sp, #36]	@ 0x24
 800f138:	f04f 3bff 	mov.w	fp, #4294967295
 800f13c:	2200      	movs	r2, #0
 800f13e:	f8cd b00c 	str.w	fp, [sp, #12]
 800f142:	2312      	movs	r3, #18
 800f144:	920c      	str	r2, [sp, #48]	@ 0x30
 800f146:	e7db      	b.n	800f100 <_dtoa_r+0x250>
 800f148:	2301      	movs	r3, #1
 800f14a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f14c:	e7f4      	b.n	800f138 <_dtoa_r+0x288>
 800f14e:	f04f 0b01 	mov.w	fp, #1
 800f152:	f8cd b00c 	str.w	fp, [sp, #12]
 800f156:	465b      	mov	r3, fp
 800f158:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f15c:	e7d0      	b.n	800f100 <_dtoa_r+0x250>
 800f15e:	3101      	adds	r1, #1
 800f160:	0052      	lsls	r2, r2, #1
 800f162:	e7d1      	b.n	800f108 <_dtoa_r+0x258>
 800f164:	f3af 8000 	nop.w
 800f168:	636f4361 	.word	0x636f4361
 800f16c:	3fd287a7 	.word	0x3fd287a7
 800f170:	8b60c8b3 	.word	0x8b60c8b3
 800f174:	3fc68a28 	.word	0x3fc68a28
 800f178:	509f79fb 	.word	0x509f79fb
 800f17c:	3fd34413 	.word	0x3fd34413
 800f180:	08011255 	.word	0x08011255
 800f184:	0801126c 	.word	0x0801126c
 800f188:	7ff00000 	.word	0x7ff00000
 800f18c:	08011225 	.word	0x08011225
 800f190:	3ff80000 	.word	0x3ff80000
 800f194:	080113c0 	.word	0x080113c0
 800f198:	080112c4 	.word	0x080112c4
 800f19c:	08011251 	.word	0x08011251
 800f1a0:	08011224 	.word	0x08011224
 800f1a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f1a8:	6018      	str	r0, [r3, #0]
 800f1aa:	9b03      	ldr	r3, [sp, #12]
 800f1ac:	2b0e      	cmp	r3, #14
 800f1ae:	f200 80a1 	bhi.w	800f2f4 <_dtoa_r+0x444>
 800f1b2:	2c00      	cmp	r4, #0
 800f1b4:	f000 809e 	beq.w	800f2f4 <_dtoa_r+0x444>
 800f1b8:	2f00      	cmp	r7, #0
 800f1ba:	dd33      	ble.n	800f224 <_dtoa_r+0x374>
 800f1bc:	4b9c      	ldr	r3, [pc, #624]	@ (800f430 <_dtoa_r+0x580>)
 800f1be:	f007 020f 	and.w	r2, r7, #15
 800f1c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1c6:	ed93 7b00 	vldr	d7, [r3]
 800f1ca:	05f8      	lsls	r0, r7, #23
 800f1cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f1d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f1d4:	d516      	bpl.n	800f204 <_dtoa_r+0x354>
 800f1d6:	4b97      	ldr	r3, [pc, #604]	@ (800f434 <_dtoa_r+0x584>)
 800f1d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f1dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f1e0:	f7f1 fb5c 	bl	800089c <__aeabi_ddiv>
 800f1e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f1e8:	f004 040f 	and.w	r4, r4, #15
 800f1ec:	2603      	movs	r6, #3
 800f1ee:	4d91      	ldr	r5, [pc, #580]	@ (800f434 <_dtoa_r+0x584>)
 800f1f0:	b954      	cbnz	r4, 800f208 <_dtoa_r+0x358>
 800f1f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f1f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1fa:	f7f1 fb4f 	bl	800089c <__aeabi_ddiv>
 800f1fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f202:	e028      	b.n	800f256 <_dtoa_r+0x3a6>
 800f204:	2602      	movs	r6, #2
 800f206:	e7f2      	b.n	800f1ee <_dtoa_r+0x33e>
 800f208:	07e1      	lsls	r1, r4, #31
 800f20a:	d508      	bpl.n	800f21e <_dtoa_r+0x36e>
 800f20c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f210:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f214:	f7f1 fa18 	bl	8000648 <__aeabi_dmul>
 800f218:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f21c:	3601      	adds	r6, #1
 800f21e:	1064      	asrs	r4, r4, #1
 800f220:	3508      	adds	r5, #8
 800f222:	e7e5      	b.n	800f1f0 <_dtoa_r+0x340>
 800f224:	f000 80af 	beq.w	800f386 <_dtoa_r+0x4d6>
 800f228:	427c      	negs	r4, r7
 800f22a:	4b81      	ldr	r3, [pc, #516]	@ (800f430 <_dtoa_r+0x580>)
 800f22c:	4d81      	ldr	r5, [pc, #516]	@ (800f434 <_dtoa_r+0x584>)
 800f22e:	f004 020f 	and.w	r2, r4, #15
 800f232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f23e:	f7f1 fa03 	bl	8000648 <__aeabi_dmul>
 800f242:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f246:	1124      	asrs	r4, r4, #4
 800f248:	2300      	movs	r3, #0
 800f24a:	2602      	movs	r6, #2
 800f24c:	2c00      	cmp	r4, #0
 800f24e:	f040 808f 	bne.w	800f370 <_dtoa_r+0x4c0>
 800f252:	2b00      	cmp	r3, #0
 800f254:	d1d3      	bne.n	800f1fe <_dtoa_r+0x34e>
 800f256:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f258:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f000 8094 	beq.w	800f38a <_dtoa_r+0x4da>
 800f262:	4b75      	ldr	r3, [pc, #468]	@ (800f438 <_dtoa_r+0x588>)
 800f264:	2200      	movs	r2, #0
 800f266:	4620      	mov	r0, r4
 800f268:	4629      	mov	r1, r5
 800f26a:	f7f1 fc5f 	bl	8000b2c <__aeabi_dcmplt>
 800f26e:	2800      	cmp	r0, #0
 800f270:	f000 808b 	beq.w	800f38a <_dtoa_r+0x4da>
 800f274:	9b03      	ldr	r3, [sp, #12]
 800f276:	2b00      	cmp	r3, #0
 800f278:	f000 8087 	beq.w	800f38a <_dtoa_r+0x4da>
 800f27c:	f1bb 0f00 	cmp.w	fp, #0
 800f280:	dd34      	ble.n	800f2ec <_dtoa_r+0x43c>
 800f282:	4620      	mov	r0, r4
 800f284:	4b6d      	ldr	r3, [pc, #436]	@ (800f43c <_dtoa_r+0x58c>)
 800f286:	2200      	movs	r2, #0
 800f288:	4629      	mov	r1, r5
 800f28a:	f7f1 f9dd 	bl	8000648 <__aeabi_dmul>
 800f28e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f292:	f107 38ff 	add.w	r8, r7, #4294967295
 800f296:	3601      	adds	r6, #1
 800f298:	465c      	mov	r4, fp
 800f29a:	4630      	mov	r0, r6
 800f29c:	f7f1 f96a 	bl	8000574 <__aeabi_i2d>
 800f2a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2a4:	f7f1 f9d0 	bl	8000648 <__aeabi_dmul>
 800f2a8:	4b65      	ldr	r3, [pc, #404]	@ (800f440 <_dtoa_r+0x590>)
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f7f1 f816 	bl	80002dc <__adddf3>
 800f2b0:	4605      	mov	r5, r0
 800f2b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f2b6:	2c00      	cmp	r4, #0
 800f2b8:	d16a      	bne.n	800f390 <_dtoa_r+0x4e0>
 800f2ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2be:	4b61      	ldr	r3, [pc, #388]	@ (800f444 <_dtoa_r+0x594>)
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f7f1 f809 	bl	80002d8 <__aeabi_dsub>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f2ce:	462a      	mov	r2, r5
 800f2d0:	4633      	mov	r3, r6
 800f2d2:	f7f1 fc49 	bl	8000b68 <__aeabi_dcmpgt>
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	f040 8298 	bne.w	800f80c <_dtoa_r+0x95c>
 800f2dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2e0:	462a      	mov	r2, r5
 800f2e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f2e6:	f7f1 fc21 	bl	8000b2c <__aeabi_dcmplt>
 800f2ea:	bb38      	cbnz	r0, 800f33c <_dtoa_r+0x48c>
 800f2ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f2f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f2f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	f2c0 8157 	blt.w	800f5aa <_dtoa_r+0x6fa>
 800f2fc:	2f0e      	cmp	r7, #14
 800f2fe:	f300 8154 	bgt.w	800f5aa <_dtoa_r+0x6fa>
 800f302:	4b4b      	ldr	r3, [pc, #300]	@ (800f430 <_dtoa_r+0x580>)
 800f304:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f308:	ed93 7b00 	vldr	d7, [r3]
 800f30c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f30e:	2b00      	cmp	r3, #0
 800f310:	ed8d 7b00 	vstr	d7, [sp]
 800f314:	f280 80e5 	bge.w	800f4e2 <_dtoa_r+0x632>
 800f318:	9b03      	ldr	r3, [sp, #12]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	f300 80e1 	bgt.w	800f4e2 <_dtoa_r+0x632>
 800f320:	d10c      	bne.n	800f33c <_dtoa_r+0x48c>
 800f322:	4b48      	ldr	r3, [pc, #288]	@ (800f444 <_dtoa_r+0x594>)
 800f324:	2200      	movs	r2, #0
 800f326:	ec51 0b17 	vmov	r0, r1, d7
 800f32a:	f7f1 f98d 	bl	8000648 <__aeabi_dmul>
 800f32e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f332:	f7f1 fc0f 	bl	8000b54 <__aeabi_dcmpge>
 800f336:	2800      	cmp	r0, #0
 800f338:	f000 8266 	beq.w	800f808 <_dtoa_r+0x958>
 800f33c:	2400      	movs	r4, #0
 800f33e:	4625      	mov	r5, r4
 800f340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f342:	4656      	mov	r6, sl
 800f344:	ea6f 0803 	mvn.w	r8, r3
 800f348:	2700      	movs	r7, #0
 800f34a:	4621      	mov	r1, r4
 800f34c:	4648      	mov	r0, r9
 800f34e:	f000 fcbf 	bl	800fcd0 <_Bfree>
 800f352:	2d00      	cmp	r5, #0
 800f354:	f000 80bd 	beq.w	800f4d2 <_dtoa_r+0x622>
 800f358:	b12f      	cbz	r7, 800f366 <_dtoa_r+0x4b6>
 800f35a:	42af      	cmp	r7, r5
 800f35c:	d003      	beq.n	800f366 <_dtoa_r+0x4b6>
 800f35e:	4639      	mov	r1, r7
 800f360:	4648      	mov	r0, r9
 800f362:	f000 fcb5 	bl	800fcd0 <_Bfree>
 800f366:	4629      	mov	r1, r5
 800f368:	4648      	mov	r0, r9
 800f36a:	f000 fcb1 	bl	800fcd0 <_Bfree>
 800f36e:	e0b0      	b.n	800f4d2 <_dtoa_r+0x622>
 800f370:	07e2      	lsls	r2, r4, #31
 800f372:	d505      	bpl.n	800f380 <_dtoa_r+0x4d0>
 800f374:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f378:	f7f1 f966 	bl	8000648 <__aeabi_dmul>
 800f37c:	3601      	adds	r6, #1
 800f37e:	2301      	movs	r3, #1
 800f380:	1064      	asrs	r4, r4, #1
 800f382:	3508      	adds	r5, #8
 800f384:	e762      	b.n	800f24c <_dtoa_r+0x39c>
 800f386:	2602      	movs	r6, #2
 800f388:	e765      	b.n	800f256 <_dtoa_r+0x3a6>
 800f38a:	9c03      	ldr	r4, [sp, #12]
 800f38c:	46b8      	mov	r8, r7
 800f38e:	e784      	b.n	800f29a <_dtoa_r+0x3ea>
 800f390:	4b27      	ldr	r3, [pc, #156]	@ (800f430 <_dtoa_r+0x580>)
 800f392:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f394:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f398:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f39c:	4454      	add	r4, sl
 800f39e:	2900      	cmp	r1, #0
 800f3a0:	d054      	beq.n	800f44c <_dtoa_r+0x59c>
 800f3a2:	4929      	ldr	r1, [pc, #164]	@ (800f448 <_dtoa_r+0x598>)
 800f3a4:	2000      	movs	r0, #0
 800f3a6:	f7f1 fa79 	bl	800089c <__aeabi_ddiv>
 800f3aa:	4633      	mov	r3, r6
 800f3ac:	462a      	mov	r2, r5
 800f3ae:	f7f0 ff93 	bl	80002d8 <__aeabi_dsub>
 800f3b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f3b6:	4656      	mov	r6, sl
 800f3b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3bc:	f7f1 fbf4 	bl	8000ba8 <__aeabi_d2iz>
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	f7f1 f8d7 	bl	8000574 <__aeabi_i2d>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	460b      	mov	r3, r1
 800f3ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3ce:	f7f0 ff83 	bl	80002d8 <__aeabi_dsub>
 800f3d2:	3530      	adds	r5, #48	@ 0x30
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	460b      	mov	r3, r1
 800f3d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f3dc:	f806 5b01 	strb.w	r5, [r6], #1
 800f3e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f3e4:	f7f1 fba2 	bl	8000b2c <__aeabi_dcmplt>
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	d172      	bne.n	800f4d2 <_dtoa_r+0x622>
 800f3ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3f0:	4911      	ldr	r1, [pc, #68]	@ (800f438 <_dtoa_r+0x588>)
 800f3f2:	2000      	movs	r0, #0
 800f3f4:	f7f0 ff70 	bl	80002d8 <__aeabi_dsub>
 800f3f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f3fc:	f7f1 fb96 	bl	8000b2c <__aeabi_dcmplt>
 800f400:	2800      	cmp	r0, #0
 800f402:	f040 80b4 	bne.w	800f56e <_dtoa_r+0x6be>
 800f406:	42a6      	cmp	r6, r4
 800f408:	f43f af70 	beq.w	800f2ec <_dtoa_r+0x43c>
 800f40c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f410:	4b0a      	ldr	r3, [pc, #40]	@ (800f43c <_dtoa_r+0x58c>)
 800f412:	2200      	movs	r2, #0
 800f414:	f7f1 f918 	bl	8000648 <__aeabi_dmul>
 800f418:	4b08      	ldr	r3, [pc, #32]	@ (800f43c <_dtoa_r+0x58c>)
 800f41a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f41e:	2200      	movs	r2, #0
 800f420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f424:	f7f1 f910 	bl	8000648 <__aeabi_dmul>
 800f428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f42c:	e7c4      	b.n	800f3b8 <_dtoa_r+0x508>
 800f42e:	bf00      	nop
 800f430:	080113c0 	.word	0x080113c0
 800f434:	08011398 	.word	0x08011398
 800f438:	3ff00000 	.word	0x3ff00000
 800f43c:	40240000 	.word	0x40240000
 800f440:	401c0000 	.word	0x401c0000
 800f444:	40140000 	.word	0x40140000
 800f448:	3fe00000 	.word	0x3fe00000
 800f44c:	4631      	mov	r1, r6
 800f44e:	4628      	mov	r0, r5
 800f450:	f7f1 f8fa 	bl	8000648 <__aeabi_dmul>
 800f454:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f458:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f45a:	4656      	mov	r6, sl
 800f45c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f460:	f7f1 fba2 	bl	8000ba8 <__aeabi_d2iz>
 800f464:	4605      	mov	r5, r0
 800f466:	f7f1 f885 	bl	8000574 <__aeabi_i2d>
 800f46a:	4602      	mov	r2, r0
 800f46c:	460b      	mov	r3, r1
 800f46e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f472:	f7f0 ff31 	bl	80002d8 <__aeabi_dsub>
 800f476:	3530      	adds	r5, #48	@ 0x30
 800f478:	f806 5b01 	strb.w	r5, [r6], #1
 800f47c:	4602      	mov	r2, r0
 800f47e:	460b      	mov	r3, r1
 800f480:	42a6      	cmp	r6, r4
 800f482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f486:	f04f 0200 	mov.w	r2, #0
 800f48a:	d124      	bne.n	800f4d6 <_dtoa_r+0x626>
 800f48c:	4baf      	ldr	r3, [pc, #700]	@ (800f74c <_dtoa_r+0x89c>)
 800f48e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f492:	f7f0 ff23 	bl	80002dc <__adddf3>
 800f496:	4602      	mov	r2, r0
 800f498:	460b      	mov	r3, r1
 800f49a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f49e:	f7f1 fb63 	bl	8000b68 <__aeabi_dcmpgt>
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	d163      	bne.n	800f56e <_dtoa_r+0x6be>
 800f4a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f4aa:	49a8      	ldr	r1, [pc, #672]	@ (800f74c <_dtoa_r+0x89c>)
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	f7f0 ff13 	bl	80002d8 <__aeabi_dsub>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f4ba:	f7f1 fb37 	bl	8000b2c <__aeabi_dcmplt>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	f43f af14 	beq.w	800f2ec <_dtoa_r+0x43c>
 800f4c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f4c6:	1e73      	subs	r3, r6, #1
 800f4c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f4ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f4ce:	2b30      	cmp	r3, #48	@ 0x30
 800f4d0:	d0f8      	beq.n	800f4c4 <_dtoa_r+0x614>
 800f4d2:	4647      	mov	r7, r8
 800f4d4:	e03b      	b.n	800f54e <_dtoa_r+0x69e>
 800f4d6:	4b9e      	ldr	r3, [pc, #632]	@ (800f750 <_dtoa_r+0x8a0>)
 800f4d8:	f7f1 f8b6 	bl	8000648 <__aeabi_dmul>
 800f4dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4e0:	e7bc      	b.n	800f45c <_dtoa_r+0x5ac>
 800f4e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f4e6:	4656      	mov	r6, sl
 800f4e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	4629      	mov	r1, r5
 800f4f0:	f7f1 f9d4 	bl	800089c <__aeabi_ddiv>
 800f4f4:	f7f1 fb58 	bl	8000ba8 <__aeabi_d2iz>
 800f4f8:	4680      	mov	r8, r0
 800f4fa:	f7f1 f83b 	bl	8000574 <__aeabi_i2d>
 800f4fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f502:	f7f1 f8a1 	bl	8000648 <__aeabi_dmul>
 800f506:	4602      	mov	r2, r0
 800f508:	460b      	mov	r3, r1
 800f50a:	4620      	mov	r0, r4
 800f50c:	4629      	mov	r1, r5
 800f50e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f512:	f7f0 fee1 	bl	80002d8 <__aeabi_dsub>
 800f516:	f806 4b01 	strb.w	r4, [r6], #1
 800f51a:	9d03      	ldr	r5, [sp, #12]
 800f51c:	eba6 040a 	sub.w	r4, r6, sl
 800f520:	42a5      	cmp	r5, r4
 800f522:	4602      	mov	r2, r0
 800f524:	460b      	mov	r3, r1
 800f526:	d133      	bne.n	800f590 <_dtoa_r+0x6e0>
 800f528:	f7f0 fed8 	bl	80002dc <__adddf3>
 800f52c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f530:	4604      	mov	r4, r0
 800f532:	460d      	mov	r5, r1
 800f534:	f7f1 fb18 	bl	8000b68 <__aeabi_dcmpgt>
 800f538:	b9c0      	cbnz	r0, 800f56c <_dtoa_r+0x6bc>
 800f53a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f53e:	4620      	mov	r0, r4
 800f540:	4629      	mov	r1, r5
 800f542:	f7f1 fae9 	bl	8000b18 <__aeabi_dcmpeq>
 800f546:	b110      	cbz	r0, 800f54e <_dtoa_r+0x69e>
 800f548:	f018 0f01 	tst.w	r8, #1
 800f54c:	d10e      	bne.n	800f56c <_dtoa_r+0x6bc>
 800f54e:	9902      	ldr	r1, [sp, #8]
 800f550:	4648      	mov	r0, r9
 800f552:	f000 fbbd 	bl	800fcd0 <_Bfree>
 800f556:	2300      	movs	r3, #0
 800f558:	7033      	strb	r3, [r6, #0]
 800f55a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f55c:	3701      	adds	r7, #1
 800f55e:	601f      	str	r7, [r3, #0]
 800f560:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f562:	2b00      	cmp	r3, #0
 800f564:	f000 824b 	beq.w	800f9fe <_dtoa_r+0xb4e>
 800f568:	601e      	str	r6, [r3, #0]
 800f56a:	e248      	b.n	800f9fe <_dtoa_r+0xb4e>
 800f56c:	46b8      	mov	r8, r7
 800f56e:	4633      	mov	r3, r6
 800f570:	461e      	mov	r6, r3
 800f572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f576:	2a39      	cmp	r2, #57	@ 0x39
 800f578:	d106      	bne.n	800f588 <_dtoa_r+0x6d8>
 800f57a:	459a      	cmp	sl, r3
 800f57c:	d1f8      	bne.n	800f570 <_dtoa_r+0x6c0>
 800f57e:	2230      	movs	r2, #48	@ 0x30
 800f580:	f108 0801 	add.w	r8, r8, #1
 800f584:	f88a 2000 	strb.w	r2, [sl]
 800f588:	781a      	ldrb	r2, [r3, #0]
 800f58a:	3201      	adds	r2, #1
 800f58c:	701a      	strb	r2, [r3, #0]
 800f58e:	e7a0      	b.n	800f4d2 <_dtoa_r+0x622>
 800f590:	4b6f      	ldr	r3, [pc, #444]	@ (800f750 <_dtoa_r+0x8a0>)
 800f592:	2200      	movs	r2, #0
 800f594:	f7f1 f858 	bl	8000648 <__aeabi_dmul>
 800f598:	2200      	movs	r2, #0
 800f59a:	2300      	movs	r3, #0
 800f59c:	4604      	mov	r4, r0
 800f59e:	460d      	mov	r5, r1
 800f5a0:	f7f1 faba 	bl	8000b18 <__aeabi_dcmpeq>
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	d09f      	beq.n	800f4e8 <_dtoa_r+0x638>
 800f5a8:	e7d1      	b.n	800f54e <_dtoa_r+0x69e>
 800f5aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5ac:	2a00      	cmp	r2, #0
 800f5ae:	f000 80ea 	beq.w	800f786 <_dtoa_r+0x8d6>
 800f5b2:	9a07      	ldr	r2, [sp, #28]
 800f5b4:	2a01      	cmp	r2, #1
 800f5b6:	f300 80cd 	bgt.w	800f754 <_dtoa_r+0x8a4>
 800f5ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f5bc:	2a00      	cmp	r2, #0
 800f5be:	f000 80c1 	beq.w	800f744 <_dtoa_r+0x894>
 800f5c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f5c6:	9c08      	ldr	r4, [sp, #32]
 800f5c8:	9e00      	ldr	r6, [sp, #0]
 800f5ca:	9a00      	ldr	r2, [sp, #0]
 800f5cc:	441a      	add	r2, r3
 800f5ce:	9200      	str	r2, [sp, #0]
 800f5d0:	9a06      	ldr	r2, [sp, #24]
 800f5d2:	2101      	movs	r1, #1
 800f5d4:	441a      	add	r2, r3
 800f5d6:	4648      	mov	r0, r9
 800f5d8:	9206      	str	r2, [sp, #24]
 800f5da:	f000 fc2d 	bl	800fe38 <__i2b>
 800f5de:	4605      	mov	r5, r0
 800f5e0:	b166      	cbz	r6, 800f5fc <_dtoa_r+0x74c>
 800f5e2:	9b06      	ldr	r3, [sp, #24]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	dd09      	ble.n	800f5fc <_dtoa_r+0x74c>
 800f5e8:	42b3      	cmp	r3, r6
 800f5ea:	9a00      	ldr	r2, [sp, #0]
 800f5ec:	bfa8      	it	ge
 800f5ee:	4633      	movge	r3, r6
 800f5f0:	1ad2      	subs	r2, r2, r3
 800f5f2:	9200      	str	r2, [sp, #0]
 800f5f4:	9a06      	ldr	r2, [sp, #24]
 800f5f6:	1af6      	subs	r6, r6, r3
 800f5f8:	1ad3      	subs	r3, r2, r3
 800f5fa:	9306      	str	r3, [sp, #24]
 800f5fc:	9b08      	ldr	r3, [sp, #32]
 800f5fe:	b30b      	cbz	r3, 800f644 <_dtoa_r+0x794>
 800f600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f602:	2b00      	cmp	r3, #0
 800f604:	f000 80c6 	beq.w	800f794 <_dtoa_r+0x8e4>
 800f608:	2c00      	cmp	r4, #0
 800f60a:	f000 80c0 	beq.w	800f78e <_dtoa_r+0x8de>
 800f60e:	4629      	mov	r1, r5
 800f610:	4622      	mov	r2, r4
 800f612:	4648      	mov	r0, r9
 800f614:	f000 fcc8 	bl	800ffa8 <__pow5mult>
 800f618:	9a02      	ldr	r2, [sp, #8]
 800f61a:	4601      	mov	r1, r0
 800f61c:	4605      	mov	r5, r0
 800f61e:	4648      	mov	r0, r9
 800f620:	f000 fc20 	bl	800fe64 <__multiply>
 800f624:	9902      	ldr	r1, [sp, #8]
 800f626:	4680      	mov	r8, r0
 800f628:	4648      	mov	r0, r9
 800f62a:	f000 fb51 	bl	800fcd0 <_Bfree>
 800f62e:	9b08      	ldr	r3, [sp, #32]
 800f630:	1b1b      	subs	r3, r3, r4
 800f632:	9308      	str	r3, [sp, #32]
 800f634:	f000 80b1 	beq.w	800f79a <_dtoa_r+0x8ea>
 800f638:	9a08      	ldr	r2, [sp, #32]
 800f63a:	4641      	mov	r1, r8
 800f63c:	4648      	mov	r0, r9
 800f63e:	f000 fcb3 	bl	800ffa8 <__pow5mult>
 800f642:	9002      	str	r0, [sp, #8]
 800f644:	2101      	movs	r1, #1
 800f646:	4648      	mov	r0, r9
 800f648:	f000 fbf6 	bl	800fe38 <__i2b>
 800f64c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f64e:	4604      	mov	r4, r0
 800f650:	2b00      	cmp	r3, #0
 800f652:	f000 81d8 	beq.w	800fa06 <_dtoa_r+0xb56>
 800f656:	461a      	mov	r2, r3
 800f658:	4601      	mov	r1, r0
 800f65a:	4648      	mov	r0, r9
 800f65c:	f000 fca4 	bl	800ffa8 <__pow5mult>
 800f660:	9b07      	ldr	r3, [sp, #28]
 800f662:	2b01      	cmp	r3, #1
 800f664:	4604      	mov	r4, r0
 800f666:	f300 809f 	bgt.w	800f7a8 <_dtoa_r+0x8f8>
 800f66a:	9b04      	ldr	r3, [sp, #16]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	f040 8097 	bne.w	800f7a0 <_dtoa_r+0x8f0>
 800f672:	9b05      	ldr	r3, [sp, #20]
 800f674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f678:	2b00      	cmp	r3, #0
 800f67a:	f040 8093 	bne.w	800f7a4 <_dtoa_r+0x8f4>
 800f67e:	9b05      	ldr	r3, [sp, #20]
 800f680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f684:	0d1b      	lsrs	r3, r3, #20
 800f686:	051b      	lsls	r3, r3, #20
 800f688:	b133      	cbz	r3, 800f698 <_dtoa_r+0x7e8>
 800f68a:	9b00      	ldr	r3, [sp, #0]
 800f68c:	3301      	adds	r3, #1
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	9b06      	ldr	r3, [sp, #24]
 800f692:	3301      	adds	r3, #1
 800f694:	9306      	str	r3, [sp, #24]
 800f696:	2301      	movs	r3, #1
 800f698:	9308      	str	r3, [sp, #32]
 800f69a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f000 81b8 	beq.w	800fa12 <_dtoa_r+0xb62>
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f6a8:	6918      	ldr	r0, [r3, #16]
 800f6aa:	f000 fb79 	bl	800fda0 <__hi0bits>
 800f6ae:	f1c0 0020 	rsb	r0, r0, #32
 800f6b2:	9b06      	ldr	r3, [sp, #24]
 800f6b4:	4418      	add	r0, r3
 800f6b6:	f010 001f 	ands.w	r0, r0, #31
 800f6ba:	f000 8082 	beq.w	800f7c2 <_dtoa_r+0x912>
 800f6be:	f1c0 0320 	rsb	r3, r0, #32
 800f6c2:	2b04      	cmp	r3, #4
 800f6c4:	dd73      	ble.n	800f7ae <_dtoa_r+0x8fe>
 800f6c6:	9b00      	ldr	r3, [sp, #0]
 800f6c8:	f1c0 001c 	rsb	r0, r0, #28
 800f6cc:	4403      	add	r3, r0
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	9b06      	ldr	r3, [sp, #24]
 800f6d2:	4403      	add	r3, r0
 800f6d4:	4406      	add	r6, r0
 800f6d6:	9306      	str	r3, [sp, #24]
 800f6d8:	9b00      	ldr	r3, [sp, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	dd05      	ble.n	800f6ea <_dtoa_r+0x83a>
 800f6de:	9902      	ldr	r1, [sp, #8]
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	4648      	mov	r0, r9
 800f6e4:	f000 fcba 	bl	801005c <__lshift>
 800f6e8:	9002      	str	r0, [sp, #8]
 800f6ea:	9b06      	ldr	r3, [sp, #24]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	dd05      	ble.n	800f6fc <_dtoa_r+0x84c>
 800f6f0:	4621      	mov	r1, r4
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	4648      	mov	r0, r9
 800f6f6:	f000 fcb1 	bl	801005c <__lshift>
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d061      	beq.n	800f7c6 <_dtoa_r+0x916>
 800f702:	9802      	ldr	r0, [sp, #8]
 800f704:	4621      	mov	r1, r4
 800f706:	f000 fd15 	bl	8010134 <__mcmp>
 800f70a:	2800      	cmp	r0, #0
 800f70c:	da5b      	bge.n	800f7c6 <_dtoa_r+0x916>
 800f70e:	2300      	movs	r3, #0
 800f710:	9902      	ldr	r1, [sp, #8]
 800f712:	220a      	movs	r2, #10
 800f714:	4648      	mov	r0, r9
 800f716:	f000 fafd 	bl	800fd14 <__multadd>
 800f71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f71c:	9002      	str	r0, [sp, #8]
 800f71e:	f107 38ff 	add.w	r8, r7, #4294967295
 800f722:	2b00      	cmp	r3, #0
 800f724:	f000 8177 	beq.w	800fa16 <_dtoa_r+0xb66>
 800f728:	4629      	mov	r1, r5
 800f72a:	2300      	movs	r3, #0
 800f72c:	220a      	movs	r2, #10
 800f72e:	4648      	mov	r0, r9
 800f730:	f000 faf0 	bl	800fd14 <__multadd>
 800f734:	f1bb 0f00 	cmp.w	fp, #0
 800f738:	4605      	mov	r5, r0
 800f73a:	dc6f      	bgt.n	800f81c <_dtoa_r+0x96c>
 800f73c:	9b07      	ldr	r3, [sp, #28]
 800f73e:	2b02      	cmp	r3, #2
 800f740:	dc49      	bgt.n	800f7d6 <_dtoa_r+0x926>
 800f742:	e06b      	b.n	800f81c <_dtoa_r+0x96c>
 800f744:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f746:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f74a:	e73c      	b.n	800f5c6 <_dtoa_r+0x716>
 800f74c:	3fe00000 	.word	0x3fe00000
 800f750:	40240000 	.word	0x40240000
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	1e5c      	subs	r4, r3, #1
 800f758:	9b08      	ldr	r3, [sp, #32]
 800f75a:	42a3      	cmp	r3, r4
 800f75c:	db09      	blt.n	800f772 <_dtoa_r+0x8c2>
 800f75e:	1b1c      	subs	r4, r3, r4
 800f760:	9b03      	ldr	r3, [sp, #12]
 800f762:	2b00      	cmp	r3, #0
 800f764:	f6bf af30 	bge.w	800f5c8 <_dtoa_r+0x718>
 800f768:	9b00      	ldr	r3, [sp, #0]
 800f76a:	9a03      	ldr	r2, [sp, #12]
 800f76c:	1a9e      	subs	r6, r3, r2
 800f76e:	2300      	movs	r3, #0
 800f770:	e72b      	b.n	800f5ca <_dtoa_r+0x71a>
 800f772:	9b08      	ldr	r3, [sp, #32]
 800f774:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f776:	9408      	str	r4, [sp, #32]
 800f778:	1ae3      	subs	r3, r4, r3
 800f77a:	441a      	add	r2, r3
 800f77c:	9e00      	ldr	r6, [sp, #0]
 800f77e:	9b03      	ldr	r3, [sp, #12]
 800f780:	920d      	str	r2, [sp, #52]	@ 0x34
 800f782:	2400      	movs	r4, #0
 800f784:	e721      	b.n	800f5ca <_dtoa_r+0x71a>
 800f786:	9c08      	ldr	r4, [sp, #32]
 800f788:	9e00      	ldr	r6, [sp, #0]
 800f78a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f78c:	e728      	b.n	800f5e0 <_dtoa_r+0x730>
 800f78e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f792:	e751      	b.n	800f638 <_dtoa_r+0x788>
 800f794:	9a08      	ldr	r2, [sp, #32]
 800f796:	9902      	ldr	r1, [sp, #8]
 800f798:	e750      	b.n	800f63c <_dtoa_r+0x78c>
 800f79a:	f8cd 8008 	str.w	r8, [sp, #8]
 800f79e:	e751      	b.n	800f644 <_dtoa_r+0x794>
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	e779      	b.n	800f698 <_dtoa_r+0x7e8>
 800f7a4:	9b04      	ldr	r3, [sp, #16]
 800f7a6:	e777      	b.n	800f698 <_dtoa_r+0x7e8>
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	9308      	str	r3, [sp, #32]
 800f7ac:	e779      	b.n	800f6a2 <_dtoa_r+0x7f2>
 800f7ae:	d093      	beq.n	800f6d8 <_dtoa_r+0x828>
 800f7b0:	9a00      	ldr	r2, [sp, #0]
 800f7b2:	331c      	adds	r3, #28
 800f7b4:	441a      	add	r2, r3
 800f7b6:	9200      	str	r2, [sp, #0]
 800f7b8:	9a06      	ldr	r2, [sp, #24]
 800f7ba:	441a      	add	r2, r3
 800f7bc:	441e      	add	r6, r3
 800f7be:	9206      	str	r2, [sp, #24]
 800f7c0:	e78a      	b.n	800f6d8 <_dtoa_r+0x828>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	e7f4      	b.n	800f7b0 <_dtoa_r+0x900>
 800f7c6:	9b03      	ldr	r3, [sp, #12]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	46b8      	mov	r8, r7
 800f7cc:	dc20      	bgt.n	800f810 <_dtoa_r+0x960>
 800f7ce:	469b      	mov	fp, r3
 800f7d0:	9b07      	ldr	r3, [sp, #28]
 800f7d2:	2b02      	cmp	r3, #2
 800f7d4:	dd1e      	ble.n	800f814 <_dtoa_r+0x964>
 800f7d6:	f1bb 0f00 	cmp.w	fp, #0
 800f7da:	f47f adb1 	bne.w	800f340 <_dtoa_r+0x490>
 800f7de:	4621      	mov	r1, r4
 800f7e0:	465b      	mov	r3, fp
 800f7e2:	2205      	movs	r2, #5
 800f7e4:	4648      	mov	r0, r9
 800f7e6:	f000 fa95 	bl	800fd14 <__multadd>
 800f7ea:	4601      	mov	r1, r0
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	9802      	ldr	r0, [sp, #8]
 800f7f0:	f000 fca0 	bl	8010134 <__mcmp>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	f77f ada3 	ble.w	800f340 <_dtoa_r+0x490>
 800f7fa:	4656      	mov	r6, sl
 800f7fc:	2331      	movs	r3, #49	@ 0x31
 800f7fe:	f806 3b01 	strb.w	r3, [r6], #1
 800f802:	f108 0801 	add.w	r8, r8, #1
 800f806:	e59f      	b.n	800f348 <_dtoa_r+0x498>
 800f808:	9c03      	ldr	r4, [sp, #12]
 800f80a:	46b8      	mov	r8, r7
 800f80c:	4625      	mov	r5, r4
 800f80e:	e7f4      	b.n	800f7fa <_dtoa_r+0x94a>
 800f810:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f816:	2b00      	cmp	r3, #0
 800f818:	f000 8101 	beq.w	800fa1e <_dtoa_r+0xb6e>
 800f81c:	2e00      	cmp	r6, #0
 800f81e:	dd05      	ble.n	800f82c <_dtoa_r+0x97c>
 800f820:	4629      	mov	r1, r5
 800f822:	4632      	mov	r2, r6
 800f824:	4648      	mov	r0, r9
 800f826:	f000 fc19 	bl	801005c <__lshift>
 800f82a:	4605      	mov	r5, r0
 800f82c:	9b08      	ldr	r3, [sp, #32]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d05c      	beq.n	800f8ec <_dtoa_r+0xa3c>
 800f832:	6869      	ldr	r1, [r5, #4]
 800f834:	4648      	mov	r0, r9
 800f836:	f000 fa0b 	bl	800fc50 <_Balloc>
 800f83a:	4606      	mov	r6, r0
 800f83c:	b928      	cbnz	r0, 800f84a <_dtoa_r+0x99a>
 800f83e:	4b82      	ldr	r3, [pc, #520]	@ (800fa48 <_dtoa_r+0xb98>)
 800f840:	4602      	mov	r2, r0
 800f842:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f846:	f7ff bb4a 	b.w	800eede <_dtoa_r+0x2e>
 800f84a:	692a      	ldr	r2, [r5, #16]
 800f84c:	3202      	adds	r2, #2
 800f84e:	0092      	lsls	r2, r2, #2
 800f850:	f105 010c 	add.w	r1, r5, #12
 800f854:	300c      	adds	r0, #12
 800f856:	f7ff fa92 	bl	800ed7e <memcpy>
 800f85a:	2201      	movs	r2, #1
 800f85c:	4631      	mov	r1, r6
 800f85e:	4648      	mov	r0, r9
 800f860:	f000 fbfc 	bl	801005c <__lshift>
 800f864:	f10a 0301 	add.w	r3, sl, #1
 800f868:	9300      	str	r3, [sp, #0]
 800f86a:	eb0a 030b 	add.w	r3, sl, fp
 800f86e:	9308      	str	r3, [sp, #32]
 800f870:	9b04      	ldr	r3, [sp, #16]
 800f872:	f003 0301 	and.w	r3, r3, #1
 800f876:	462f      	mov	r7, r5
 800f878:	9306      	str	r3, [sp, #24]
 800f87a:	4605      	mov	r5, r0
 800f87c:	9b00      	ldr	r3, [sp, #0]
 800f87e:	9802      	ldr	r0, [sp, #8]
 800f880:	4621      	mov	r1, r4
 800f882:	f103 3bff 	add.w	fp, r3, #4294967295
 800f886:	f7ff fa88 	bl	800ed9a <quorem>
 800f88a:	4603      	mov	r3, r0
 800f88c:	3330      	adds	r3, #48	@ 0x30
 800f88e:	9003      	str	r0, [sp, #12]
 800f890:	4639      	mov	r1, r7
 800f892:	9802      	ldr	r0, [sp, #8]
 800f894:	9309      	str	r3, [sp, #36]	@ 0x24
 800f896:	f000 fc4d 	bl	8010134 <__mcmp>
 800f89a:	462a      	mov	r2, r5
 800f89c:	9004      	str	r0, [sp, #16]
 800f89e:	4621      	mov	r1, r4
 800f8a0:	4648      	mov	r0, r9
 800f8a2:	f000 fc63 	bl	801016c <__mdiff>
 800f8a6:	68c2      	ldr	r2, [r0, #12]
 800f8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8aa:	4606      	mov	r6, r0
 800f8ac:	bb02      	cbnz	r2, 800f8f0 <_dtoa_r+0xa40>
 800f8ae:	4601      	mov	r1, r0
 800f8b0:	9802      	ldr	r0, [sp, #8]
 800f8b2:	f000 fc3f 	bl	8010134 <__mcmp>
 800f8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	4631      	mov	r1, r6
 800f8bc:	4648      	mov	r0, r9
 800f8be:	920c      	str	r2, [sp, #48]	@ 0x30
 800f8c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8c2:	f000 fa05 	bl	800fcd0 <_Bfree>
 800f8c6:	9b07      	ldr	r3, [sp, #28]
 800f8c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f8ca:	9e00      	ldr	r6, [sp, #0]
 800f8cc:	ea42 0103 	orr.w	r1, r2, r3
 800f8d0:	9b06      	ldr	r3, [sp, #24]
 800f8d2:	4319      	orrs	r1, r3
 800f8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8d6:	d10d      	bne.n	800f8f4 <_dtoa_r+0xa44>
 800f8d8:	2b39      	cmp	r3, #57	@ 0x39
 800f8da:	d027      	beq.n	800f92c <_dtoa_r+0xa7c>
 800f8dc:	9a04      	ldr	r2, [sp, #16]
 800f8de:	2a00      	cmp	r2, #0
 800f8e0:	dd01      	ble.n	800f8e6 <_dtoa_r+0xa36>
 800f8e2:	9b03      	ldr	r3, [sp, #12]
 800f8e4:	3331      	adds	r3, #49	@ 0x31
 800f8e6:	f88b 3000 	strb.w	r3, [fp]
 800f8ea:	e52e      	b.n	800f34a <_dtoa_r+0x49a>
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	e7b9      	b.n	800f864 <_dtoa_r+0x9b4>
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	e7e2      	b.n	800f8ba <_dtoa_r+0xa0a>
 800f8f4:	9904      	ldr	r1, [sp, #16]
 800f8f6:	2900      	cmp	r1, #0
 800f8f8:	db04      	blt.n	800f904 <_dtoa_r+0xa54>
 800f8fa:	9807      	ldr	r0, [sp, #28]
 800f8fc:	4301      	orrs	r1, r0
 800f8fe:	9806      	ldr	r0, [sp, #24]
 800f900:	4301      	orrs	r1, r0
 800f902:	d120      	bne.n	800f946 <_dtoa_r+0xa96>
 800f904:	2a00      	cmp	r2, #0
 800f906:	ddee      	ble.n	800f8e6 <_dtoa_r+0xa36>
 800f908:	9902      	ldr	r1, [sp, #8]
 800f90a:	9300      	str	r3, [sp, #0]
 800f90c:	2201      	movs	r2, #1
 800f90e:	4648      	mov	r0, r9
 800f910:	f000 fba4 	bl	801005c <__lshift>
 800f914:	4621      	mov	r1, r4
 800f916:	9002      	str	r0, [sp, #8]
 800f918:	f000 fc0c 	bl	8010134 <__mcmp>
 800f91c:	2800      	cmp	r0, #0
 800f91e:	9b00      	ldr	r3, [sp, #0]
 800f920:	dc02      	bgt.n	800f928 <_dtoa_r+0xa78>
 800f922:	d1e0      	bne.n	800f8e6 <_dtoa_r+0xa36>
 800f924:	07da      	lsls	r2, r3, #31
 800f926:	d5de      	bpl.n	800f8e6 <_dtoa_r+0xa36>
 800f928:	2b39      	cmp	r3, #57	@ 0x39
 800f92a:	d1da      	bne.n	800f8e2 <_dtoa_r+0xa32>
 800f92c:	2339      	movs	r3, #57	@ 0x39
 800f92e:	f88b 3000 	strb.w	r3, [fp]
 800f932:	4633      	mov	r3, r6
 800f934:	461e      	mov	r6, r3
 800f936:	3b01      	subs	r3, #1
 800f938:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f93c:	2a39      	cmp	r2, #57	@ 0x39
 800f93e:	d04e      	beq.n	800f9de <_dtoa_r+0xb2e>
 800f940:	3201      	adds	r2, #1
 800f942:	701a      	strb	r2, [r3, #0]
 800f944:	e501      	b.n	800f34a <_dtoa_r+0x49a>
 800f946:	2a00      	cmp	r2, #0
 800f948:	dd03      	ble.n	800f952 <_dtoa_r+0xaa2>
 800f94a:	2b39      	cmp	r3, #57	@ 0x39
 800f94c:	d0ee      	beq.n	800f92c <_dtoa_r+0xa7c>
 800f94e:	3301      	adds	r3, #1
 800f950:	e7c9      	b.n	800f8e6 <_dtoa_r+0xa36>
 800f952:	9a00      	ldr	r2, [sp, #0]
 800f954:	9908      	ldr	r1, [sp, #32]
 800f956:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f95a:	428a      	cmp	r2, r1
 800f95c:	d028      	beq.n	800f9b0 <_dtoa_r+0xb00>
 800f95e:	9902      	ldr	r1, [sp, #8]
 800f960:	2300      	movs	r3, #0
 800f962:	220a      	movs	r2, #10
 800f964:	4648      	mov	r0, r9
 800f966:	f000 f9d5 	bl	800fd14 <__multadd>
 800f96a:	42af      	cmp	r7, r5
 800f96c:	9002      	str	r0, [sp, #8]
 800f96e:	f04f 0300 	mov.w	r3, #0
 800f972:	f04f 020a 	mov.w	r2, #10
 800f976:	4639      	mov	r1, r7
 800f978:	4648      	mov	r0, r9
 800f97a:	d107      	bne.n	800f98c <_dtoa_r+0xadc>
 800f97c:	f000 f9ca 	bl	800fd14 <__multadd>
 800f980:	4607      	mov	r7, r0
 800f982:	4605      	mov	r5, r0
 800f984:	9b00      	ldr	r3, [sp, #0]
 800f986:	3301      	adds	r3, #1
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	e777      	b.n	800f87c <_dtoa_r+0x9cc>
 800f98c:	f000 f9c2 	bl	800fd14 <__multadd>
 800f990:	4629      	mov	r1, r5
 800f992:	4607      	mov	r7, r0
 800f994:	2300      	movs	r3, #0
 800f996:	220a      	movs	r2, #10
 800f998:	4648      	mov	r0, r9
 800f99a:	f000 f9bb 	bl	800fd14 <__multadd>
 800f99e:	4605      	mov	r5, r0
 800f9a0:	e7f0      	b.n	800f984 <_dtoa_r+0xad4>
 800f9a2:	f1bb 0f00 	cmp.w	fp, #0
 800f9a6:	bfcc      	ite	gt
 800f9a8:	465e      	movgt	r6, fp
 800f9aa:	2601      	movle	r6, #1
 800f9ac:	4456      	add	r6, sl
 800f9ae:	2700      	movs	r7, #0
 800f9b0:	9902      	ldr	r1, [sp, #8]
 800f9b2:	9300      	str	r3, [sp, #0]
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	4648      	mov	r0, r9
 800f9b8:	f000 fb50 	bl	801005c <__lshift>
 800f9bc:	4621      	mov	r1, r4
 800f9be:	9002      	str	r0, [sp, #8]
 800f9c0:	f000 fbb8 	bl	8010134 <__mcmp>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	dcb4      	bgt.n	800f932 <_dtoa_r+0xa82>
 800f9c8:	d102      	bne.n	800f9d0 <_dtoa_r+0xb20>
 800f9ca:	9b00      	ldr	r3, [sp, #0]
 800f9cc:	07db      	lsls	r3, r3, #31
 800f9ce:	d4b0      	bmi.n	800f932 <_dtoa_r+0xa82>
 800f9d0:	4633      	mov	r3, r6
 800f9d2:	461e      	mov	r6, r3
 800f9d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9d8:	2a30      	cmp	r2, #48	@ 0x30
 800f9da:	d0fa      	beq.n	800f9d2 <_dtoa_r+0xb22>
 800f9dc:	e4b5      	b.n	800f34a <_dtoa_r+0x49a>
 800f9de:	459a      	cmp	sl, r3
 800f9e0:	d1a8      	bne.n	800f934 <_dtoa_r+0xa84>
 800f9e2:	2331      	movs	r3, #49	@ 0x31
 800f9e4:	f108 0801 	add.w	r8, r8, #1
 800f9e8:	f88a 3000 	strb.w	r3, [sl]
 800f9ec:	e4ad      	b.n	800f34a <_dtoa_r+0x49a>
 800f9ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f9f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800fa4c <_dtoa_r+0xb9c>
 800f9f4:	b11b      	cbz	r3, 800f9fe <_dtoa_r+0xb4e>
 800f9f6:	f10a 0308 	add.w	r3, sl, #8
 800f9fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f9fc:	6013      	str	r3, [r2, #0]
 800f9fe:	4650      	mov	r0, sl
 800fa00:	b017      	add	sp, #92	@ 0x5c
 800fa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa06:	9b07      	ldr	r3, [sp, #28]
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	f77f ae2e 	ble.w	800f66a <_dtoa_r+0x7ba>
 800fa0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa10:	9308      	str	r3, [sp, #32]
 800fa12:	2001      	movs	r0, #1
 800fa14:	e64d      	b.n	800f6b2 <_dtoa_r+0x802>
 800fa16:	f1bb 0f00 	cmp.w	fp, #0
 800fa1a:	f77f aed9 	ble.w	800f7d0 <_dtoa_r+0x920>
 800fa1e:	4656      	mov	r6, sl
 800fa20:	9802      	ldr	r0, [sp, #8]
 800fa22:	4621      	mov	r1, r4
 800fa24:	f7ff f9b9 	bl	800ed9a <quorem>
 800fa28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800fa2c:	f806 3b01 	strb.w	r3, [r6], #1
 800fa30:	eba6 020a 	sub.w	r2, r6, sl
 800fa34:	4593      	cmp	fp, r2
 800fa36:	ddb4      	ble.n	800f9a2 <_dtoa_r+0xaf2>
 800fa38:	9902      	ldr	r1, [sp, #8]
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	220a      	movs	r2, #10
 800fa3e:	4648      	mov	r0, r9
 800fa40:	f000 f968 	bl	800fd14 <__multadd>
 800fa44:	9002      	str	r0, [sp, #8]
 800fa46:	e7eb      	b.n	800fa20 <_dtoa_r+0xb70>
 800fa48:	080112c4 	.word	0x080112c4
 800fa4c:	08011248 	.word	0x08011248

0800fa50 <_free_r>:
 800fa50:	b538      	push	{r3, r4, r5, lr}
 800fa52:	4605      	mov	r5, r0
 800fa54:	2900      	cmp	r1, #0
 800fa56:	d041      	beq.n	800fadc <_free_r+0x8c>
 800fa58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa5c:	1f0c      	subs	r4, r1, #4
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	bfb8      	it	lt
 800fa62:	18e4      	addlt	r4, r4, r3
 800fa64:	f000 f8e8 	bl	800fc38 <__malloc_lock>
 800fa68:	4a1d      	ldr	r2, [pc, #116]	@ (800fae0 <_free_r+0x90>)
 800fa6a:	6813      	ldr	r3, [r2, #0]
 800fa6c:	b933      	cbnz	r3, 800fa7c <_free_r+0x2c>
 800fa6e:	6063      	str	r3, [r4, #4]
 800fa70:	6014      	str	r4, [r2, #0]
 800fa72:	4628      	mov	r0, r5
 800fa74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa78:	f000 b8e4 	b.w	800fc44 <__malloc_unlock>
 800fa7c:	42a3      	cmp	r3, r4
 800fa7e:	d908      	bls.n	800fa92 <_free_r+0x42>
 800fa80:	6820      	ldr	r0, [r4, #0]
 800fa82:	1821      	adds	r1, r4, r0
 800fa84:	428b      	cmp	r3, r1
 800fa86:	bf01      	itttt	eq
 800fa88:	6819      	ldreq	r1, [r3, #0]
 800fa8a:	685b      	ldreq	r3, [r3, #4]
 800fa8c:	1809      	addeq	r1, r1, r0
 800fa8e:	6021      	streq	r1, [r4, #0]
 800fa90:	e7ed      	b.n	800fa6e <_free_r+0x1e>
 800fa92:	461a      	mov	r2, r3
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	b10b      	cbz	r3, 800fa9c <_free_r+0x4c>
 800fa98:	42a3      	cmp	r3, r4
 800fa9a:	d9fa      	bls.n	800fa92 <_free_r+0x42>
 800fa9c:	6811      	ldr	r1, [r2, #0]
 800fa9e:	1850      	adds	r0, r2, r1
 800faa0:	42a0      	cmp	r0, r4
 800faa2:	d10b      	bne.n	800fabc <_free_r+0x6c>
 800faa4:	6820      	ldr	r0, [r4, #0]
 800faa6:	4401      	add	r1, r0
 800faa8:	1850      	adds	r0, r2, r1
 800faaa:	4283      	cmp	r3, r0
 800faac:	6011      	str	r1, [r2, #0]
 800faae:	d1e0      	bne.n	800fa72 <_free_r+0x22>
 800fab0:	6818      	ldr	r0, [r3, #0]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	6053      	str	r3, [r2, #4]
 800fab6:	4408      	add	r0, r1
 800fab8:	6010      	str	r0, [r2, #0]
 800faba:	e7da      	b.n	800fa72 <_free_r+0x22>
 800fabc:	d902      	bls.n	800fac4 <_free_r+0x74>
 800fabe:	230c      	movs	r3, #12
 800fac0:	602b      	str	r3, [r5, #0]
 800fac2:	e7d6      	b.n	800fa72 <_free_r+0x22>
 800fac4:	6820      	ldr	r0, [r4, #0]
 800fac6:	1821      	adds	r1, r4, r0
 800fac8:	428b      	cmp	r3, r1
 800faca:	bf04      	itt	eq
 800facc:	6819      	ldreq	r1, [r3, #0]
 800face:	685b      	ldreq	r3, [r3, #4]
 800fad0:	6063      	str	r3, [r4, #4]
 800fad2:	bf04      	itt	eq
 800fad4:	1809      	addeq	r1, r1, r0
 800fad6:	6021      	streq	r1, [r4, #0]
 800fad8:	6054      	str	r4, [r2, #4]
 800fada:	e7ca      	b.n	800fa72 <_free_r+0x22>
 800fadc:	bd38      	pop	{r3, r4, r5, pc}
 800fade:	bf00      	nop
 800fae0:	2000a6d0 	.word	0x2000a6d0

0800fae4 <malloc>:
 800fae4:	4b02      	ldr	r3, [pc, #8]	@ (800faf0 <malloc+0xc>)
 800fae6:	4601      	mov	r1, r0
 800fae8:	6818      	ldr	r0, [r3, #0]
 800faea:	f000 b825 	b.w	800fb38 <_malloc_r>
 800faee:	bf00      	nop
 800faf0:	20000194 	.word	0x20000194

0800faf4 <sbrk_aligned>:
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	4e0f      	ldr	r6, [pc, #60]	@ (800fb34 <sbrk_aligned+0x40>)
 800faf8:	460c      	mov	r4, r1
 800fafa:	6831      	ldr	r1, [r6, #0]
 800fafc:	4605      	mov	r5, r0
 800fafe:	b911      	cbnz	r1, 800fb06 <sbrk_aligned+0x12>
 800fb00:	f000 fe3e 	bl	8010780 <_sbrk_r>
 800fb04:	6030      	str	r0, [r6, #0]
 800fb06:	4621      	mov	r1, r4
 800fb08:	4628      	mov	r0, r5
 800fb0a:	f000 fe39 	bl	8010780 <_sbrk_r>
 800fb0e:	1c43      	adds	r3, r0, #1
 800fb10:	d103      	bne.n	800fb1a <sbrk_aligned+0x26>
 800fb12:	f04f 34ff 	mov.w	r4, #4294967295
 800fb16:	4620      	mov	r0, r4
 800fb18:	bd70      	pop	{r4, r5, r6, pc}
 800fb1a:	1cc4      	adds	r4, r0, #3
 800fb1c:	f024 0403 	bic.w	r4, r4, #3
 800fb20:	42a0      	cmp	r0, r4
 800fb22:	d0f8      	beq.n	800fb16 <sbrk_aligned+0x22>
 800fb24:	1a21      	subs	r1, r4, r0
 800fb26:	4628      	mov	r0, r5
 800fb28:	f000 fe2a 	bl	8010780 <_sbrk_r>
 800fb2c:	3001      	adds	r0, #1
 800fb2e:	d1f2      	bne.n	800fb16 <sbrk_aligned+0x22>
 800fb30:	e7ef      	b.n	800fb12 <sbrk_aligned+0x1e>
 800fb32:	bf00      	nop
 800fb34:	2000a6cc 	.word	0x2000a6cc

0800fb38 <_malloc_r>:
 800fb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb3c:	1ccd      	adds	r5, r1, #3
 800fb3e:	f025 0503 	bic.w	r5, r5, #3
 800fb42:	3508      	adds	r5, #8
 800fb44:	2d0c      	cmp	r5, #12
 800fb46:	bf38      	it	cc
 800fb48:	250c      	movcc	r5, #12
 800fb4a:	2d00      	cmp	r5, #0
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	db01      	blt.n	800fb54 <_malloc_r+0x1c>
 800fb50:	42a9      	cmp	r1, r5
 800fb52:	d904      	bls.n	800fb5e <_malloc_r+0x26>
 800fb54:	230c      	movs	r3, #12
 800fb56:	6033      	str	r3, [r6, #0]
 800fb58:	2000      	movs	r0, #0
 800fb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fc34 <_malloc_r+0xfc>
 800fb62:	f000 f869 	bl	800fc38 <__malloc_lock>
 800fb66:	f8d8 3000 	ldr.w	r3, [r8]
 800fb6a:	461c      	mov	r4, r3
 800fb6c:	bb44      	cbnz	r4, 800fbc0 <_malloc_r+0x88>
 800fb6e:	4629      	mov	r1, r5
 800fb70:	4630      	mov	r0, r6
 800fb72:	f7ff ffbf 	bl	800faf4 <sbrk_aligned>
 800fb76:	1c43      	adds	r3, r0, #1
 800fb78:	4604      	mov	r4, r0
 800fb7a:	d158      	bne.n	800fc2e <_malloc_r+0xf6>
 800fb7c:	f8d8 4000 	ldr.w	r4, [r8]
 800fb80:	4627      	mov	r7, r4
 800fb82:	2f00      	cmp	r7, #0
 800fb84:	d143      	bne.n	800fc0e <_malloc_r+0xd6>
 800fb86:	2c00      	cmp	r4, #0
 800fb88:	d04b      	beq.n	800fc22 <_malloc_r+0xea>
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	4639      	mov	r1, r7
 800fb8e:	4630      	mov	r0, r6
 800fb90:	eb04 0903 	add.w	r9, r4, r3
 800fb94:	f000 fdf4 	bl	8010780 <_sbrk_r>
 800fb98:	4581      	cmp	r9, r0
 800fb9a:	d142      	bne.n	800fc22 <_malloc_r+0xea>
 800fb9c:	6821      	ldr	r1, [r4, #0]
 800fb9e:	1a6d      	subs	r5, r5, r1
 800fba0:	4629      	mov	r1, r5
 800fba2:	4630      	mov	r0, r6
 800fba4:	f7ff ffa6 	bl	800faf4 <sbrk_aligned>
 800fba8:	3001      	adds	r0, #1
 800fbaa:	d03a      	beq.n	800fc22 <_malloc_r+0xea>
 800fbac:	6823      	ldr	r3, [r4, #0]
 800fbae:	442b      	add	r3, r5
 800fbb0:	6023      	str	r3, [r4, #0]
 800fbb2:	f8d8 3000 	ldr.w	r3, [r8]
 800fbb6:	685a      	ldr	r2, [r3, #4]
 800fbb8:	bb62      	cbnz	r2, 800fc14 <_malloc_r+0xdc>
 800fbba:	f8c8 7000 	str.w	r7, [r8]
 800fbbe:	e00f      	b.n	800fbe0 <_malloc_r+0xa8>
 800fbc0:	6822      	ldr	r2, [r4, #0]
 800fbc2:	1b52      	subs	r2, r2, r5
 800fbc4:	d420      	bmi.n	800fc08 <_malloc_r+0xd0>
 800fbc6:	2a0b      	cmp	r2, #11
 800fbc8:	d917      	bls.n	800fbfa <_malloc_r+0xc2>
 800fbca:	1961      	adds	r1, r4, r5
 800fbcc:	42a3      	cmp	r3, r4
 800fbce:	6025      	str	r5, [r4, #0]
 800fbd0:	bf18      	it	ne
 800fbd2:	6059      	strne	r1, [r3, #4]
 800fbd4:	6863      	ldr	r3, [r4, #4]
 800fbd6:	bf08      	it	eq
 800fbd8:	f8c8 1000 	streq.w	r1, [r8]
 800fbdc:	5162      	str	r2, [r4, r5]
 800fbde:	604b      	str	r3, [r1, #4]
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	f000 f82f 	bl	800fc44 <__malloc_unlock>
 800fbe6:	f104 000b 	add.w	r0, r4, #11
 800fbea:	1d23      	adds	r3, r4, #4
 800fbec:	f020 0007 	bic.w	r0, r0, #7
 800fbf0:	1ac2      	subs	r2, r0, r3
 800fbf2:	bf1c      	itt	ne
 800fbf4:	1a1b      	subne	r3, r3, r0
 800fbf6:	50a3      	strne	r3, [r4, r2]
 800fbf8:	e7af      	b.n	800fb5a <_malloc_r+0x22>
 800fbfa:	6862      	ldr	r2, [r4, #4]
 800fbfc:	42a3      	cmp	r3, r4
 800fbfe:	bf0c      	ite	eq
 800fc00:	f8c8 2000 	streq.w	r2, [r8]
 800fc04:	605a      	strne	r2, [r3, #4]
 800fc06:	e7eb      	b.n	800fbe0 <_malloc_r+0xa8>
 800fc08:	4623      	mov	r3, r4
 800fc0a:	6864      	ldr	r4, [r4, #4]
 800fc0c:	e7ae      	b.n	800fb6c <_malloc_r+0x34>
 800fc0e:	463c      	mov	r4, r7
 800fc10:	687f      	ldr	r7, [r7, #4]
 800fc12:	e7b6      	b.n	800fb82 <_malloc_r+0x4a>
 800fc14:	461a      	mov	r2, r3
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	42a3      	cmp	r3, r4
 800fc1a:	d1fb      	bne.n	800fc14 <_malloc_r+0xdc>
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	6053      	str	r3, [r2, #4]
 800fc20:	e7de      	b.n	800fbe0 <_malloc_r+0xa8>
 800fc22:	230c      	movs	r3, #12
 800fc24:	6033      	str	r3, [r6, #0]
 800fc26:	4630      	mov	r0, r6
 800fc28:	f000 f80c 	bl	800fc44 <__malloc_unlock>
 800fc2c:	e794      	b.n	800fb58 <_malloc_r+0x20>
 800fc2e:	6005      	str	r5, [r0, #0]
 800fc30:	e7d6      	b.n	800fbe0 <_malloc_r+0xa8>
 800fc32:	bf00      	nop
 800fc34:	2000a6d0 	.word	0x2000a6d0

0800fc38 <__malloc_lock>:
 800fc38:	4801      	ldr	r0, [pc, #4]	@ (800fc40 <__malloc_lock+0x8>)
 800fc3a:	f7ff b89e 	b.w	800ed7a <__retarget_lock_acquire_recursive>
 800fc3e:	bf00      	nop
 800fc40:	2000a6c8 	.word	0x2000a6c8

0800fc44 <__malloc_unlock>:
 800fc44:	4801      	ldr	r0, [pc, #4]	@ (800fc4c <__malloc_unlock+0x8>)
 800fc46:	f7ff b899 	b.w	800ed7c <__retarget_lock_release_recursive>
 800fc4a:	bf00      	nop
 800fc4c:	2000a6c8 	.word	0x2000a6c8

0800fc50 <_Balloc>:
 800fc50:	b570      	push	{r4, r5, r6, lr}
 800fc52:	69c6      	ldr	r6, [r0, #28]
 800fc54:	4604      	mov	r4, r0
 800fc56:	460d      	mov	r5, r1
 800fc58:	b976      	cbnz	r6, 800fc78 <_Balloc+0x28>
 800fc5a:	2010      	movs	r0, #16
 800fc5c:	f7ff ff42 	bl	800fae4 <malloc>
 800fc60:	4602      	mov	r2, r0
 800fc62:	61e0      	str	r0, [r4, #28]
 800fc64:	b920      	cbnz	r0, 800fc70 <_Balloc+0x20>
 800fc66:	4b18      	ldr	r3, [pc, #96]	@ (800fcc8 <_Balloc+0x78>)
 800fc68:	4818      	ldr	r0, [pc, #96]	@ (800fccc <_Balloc+0x7c>)
 800fc6a:	216b      	movs	r1, #107	@ 0x6b
 800fc6c:	f000 fd98 	bl	80107a0 <__assert_func>
 800fc70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc74:	6006      	str	r6, [r0, #0]
 800fc76:	60c6      	str	r6, [r0, #12]
 800fc78:	69e6      	ldr	r6, [r4, #28]
 800fc7a:	68f3      	ldr	r3, [r6, #12]
 800fc7c:	b183      	cbz	r3, 800fca0 <_Balloc+0x50>
 800fc7e:	69e3      	ldr	r3, [r4, #28]
 800fc80:	68db      	ldr	r3, [r3, #12]
 800fc82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc86:	b9b8      	cbnz	r0, 800fcb8 <_Balloc+0x68>
 800fc88:	2101      	movs	r1, #1
 800fc8a:	fa01 f605 	lsl.w	r6, r1, r5
 800fc8e:	1d72      	adds	r2, r6, #5
 800fc90:	0092      	lsls	r2, r2, #2
 800fc92:	4620      	mov	r0, r4
 800fc94:	f000 fda2 	bl	80107dc <_calloc_r>
 800fc98:	b160      	cbz	r0, 800fcb4 <_Balloc+0x64>
 800fc9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc9e:	e00e      	b.n	800fcbe <_Balloc+0x6e>
 800fca0:	2221      	movs	r2, #33	@ 0x21
 800fca2:	2104      	movs	r1, #4
 800fca4:	4620      	mov	r0, r4
 800fca6:	f000 fd99 	bl	80107dc <_calloc_r>
 800fcaa:	69e3      	ldr	r3, [r4, #28]
 800fcac:	60f0      	str	r0, [r6, #12]
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d1e4      	bne.n	800fc7e <_Balloc+0x2e>
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	bd70      	pop	{r4, r5, r6, pc}
 800fcb8:	6802      	ldr	r2, [r0, #0]
 800fcba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fcc4:	e7f7      	b.n	800fcb6 <_Balloc+0x66>
 800fcc6:	bf00      	nop
 800fcc8:	08011255 	.word	0x08011255
 800fccc:	080112d5 	.word	0x080112d5

0800fcd0 <_Bfree>:
 800fcd0:	b570      	push	{r4, r5, r6, lr}
 800fcd2:	69c6      	ldr	r6, [r0, #28]
 800fcd4:	4605      	mov	r5, r0
 800fcd6:	460c      	mov	r4, r1
 800fcd8:	b976      	cbnz	r6, 800fcf8 <_Bfree+0x28>
 800fcda:	2010      	movs	r0, #16
 800fcdc:	f7ff ff02 	bl	800fae4 <malloc>
 800fce0:	4602      	mov	r2, r0
 800fce2:	61e8      	str	r0, [r5, #28]
 800fce4:	b920      	cbnz	r0, 800fcf0 <_Bfree+0x20>
 800fce6:	4b09      	ldr	r3, [pc, #36]	@ (800fd0c <_Bfree+0x3c>)
 800fce8:	4809      	ldr	r0, [pc, #36]	@ (800fd10 <_Bfree+0x40>)
 800fcea:	218f      	movs	r1, #143	@ 0x8f
 800fcec:	f000 fd58 	bl	80107a0 <__assert_func>
 800fcf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fcf4:	6006      	str	r6, [r0, #0]
 800fcf6:	60c6      	str	r6, [r0, #12]
 800fcf8:	b13c      	cbz	r4, 800fd0a <_Bfree+0x3a>
 800fcfa:	69eb      	ldr	r3, [r5, #28]
 800fcfc:	6862      	ldr	r2, [r4, #4]
 800fcfe:	68db      	ldr	r3, [r3, #12]
 800fd00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd04:	6021      	str	r1, [r4, #0]
 800fd06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd0a:	bd70      	pop	{r4, r5, r6, pc}
 800fd0c:	08011255 	.word	0x08011255
 800fd10:	080112d5 	.word	0x080112d5

0800fd14 <__multadd>:
 800fd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd18:	690d      	ldr	r5, [r1, #16]
 800fd1a:	4607      	mov	r7, r0
 800fd1c:	460c      	mov	r4, r1
 800fd1e:	461e      	mov	r6, r3
 800fd20:	f101 0c14 	add.w	ip, r1, #20
 800fd24:	2000      	movs	r0, #0
 800fd26:	f8dc 3000 	ldr.w	r3, [ip]
 800fd2a:	b299      	uxth	r1, r3
 800fd2c:	fb02 6101 	mla	r1, r2, r1, r6
 800fd30:	0c1e      	lsrs	r6, r3, #16
 800fd32:	0c0b      	lsrs	r3, r1, #16
 800fd34:	fb02 3306 	mla	r3, r2, r6, r3
 800fd38:	b289      	uxth	r1, r1
 800fd3a:	3001      	adds	r0, #1
 800fd3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd40:	4285      	cmp	r5, r0
 800fd42:	f84c 1b04 	str.w	r1, [ip], #4
 800fd46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd4a:	dcec      	bgt.n	800fd26 <__multadd+0x12>
 800fd4c:	b30e      	cbz	r6, 800fd92 <__multadd+0x7e>
 800fd4e:	68a3      	ldr	r3, [r4, #8]
 800fd50:	42ab      	cmp	r3, r5
 800fd52:	dc19      	bgt.n	800fd88 <__multadd+0x74>
 800fd54:	6861      	ldr	r1, [r4, #4]
 800fd56:	4638      	mov	r0, r7
 800fd58:	3101      	adds	r1, #1
 800fd5a:	f7ff ff79 	bl	800fc50 <_Balloc>
 800fd5e:	4680      	mov	r8, r0
 800fd60:	b928      	cbnz	r0, 800fd6e <__multadd+0x5a>
 800fd62:	4602      	mov	r2, r0
 800fd64:	4b0c      	ldr	r3, [pc, #48]	@ (800fd98 <__multadd+0x84>)
 800fd66:	480d      	ldr	r0, [pc, #52]	@ (800fd9c <__multadd+0x88>)
 800fd68:	21ba      	movs	r1, #186	@ 0xba
 800fd6a:	f000 fd19 	bl	80107a0 <__assert_func>
 800fd6e:	6922      	ldr	r2, [r4, #16]
 800fd70:	3202      	adds	r2, #2
 800fd72:	f104 010c 	add.w	r1, r4, #12
 800fd76:	0092      	lsls	r2, r2, #2
 800fd78:	300c      	adds	r0, #12
 800fd7a:	f7ff f800 	bl	800ed7e <memcpy>
 800fd7e:	4621      	mov	r1, r4
 800fd80:	4638      	mov	r0, r7
 800fd82:	f7ff ffa5 	bl	800fcd0 <_Bfree>
 800fd86:	4644      	mov	r4, r8
 800fd88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd8c:	3501      	adds	r5, #1
 800fd8e:	615e      	str	r6, [r3, #20]
 800fd90:	6125      	str	r5, [r4, #16]
 800fd92:	4620      	mov	r0, r4
 800fd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd98:	080112c4 	.word	0x080112c4
 800fd9c:	080112d5 	.word	0x080112d5

0800fda0 <__hi0bits>:
 800fda0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fda4:	4603      	mov	r3, r0
 800fda6:	bf36      	itet	cc
 800fda8:	0403      	lslcc	r3, r0, #16
 800fdaa:	2000      	movcs	r0, #0
 800fdac:	2010      	movcc	r0, #16
 800fdae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fdb2:	bf3c      	itt	cc
 800fdb4:	021b      	lslcc	r3, r3, #8
 800fdb6:	3008      	addcc	r0, #8
 800fdb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fdbc:	bf3c      	itt	cc
 800fdbe:	011b      	lslcc	r3, r3, #4
 800fdc0:	3004      	addcc	r0, #4
 800fdc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fdc6:	bf3c      	itt	cc
 800fdc8:	009b      	lslcc	r3, r3, #2
 800fdca:	3002      	addcc	r0, #2
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	db05      	blt.n	800fddc <__hi0bits+0x3c>
 800fdd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fdd4:	f100 0001 	add.w	r0, r0, #1
 800fdd8:	bf08      	it	eq
 800fdda:	2020      	moveq	r0, #32
 800fddc:	4770      	bx	lr

0800fdde <__lo0bits>:
 800fdde:	6803      	ldr	r3, [r0, #0]
 800fde0:	4602      	mov	r2, r0
 800fde2:	f013 0007 	ands.w	r0, r3, #7
 800fde6:	d00b      	beq.n	800fe00 <__lo0bits+0x22>
 800fde8:	07d9      	lsls	r1, r3, #31
 800fdea:	d421      	bmi.n	800fe30 <__lo0bits+0x52>
 800fdec:	0798      	lsls	r0, r3, #30
 800fdee:	bf49      	itett	mi
 800fdf0:	085b      	lsrmi	r3, r3, #1
 800fdf2:	089b      	lsrpl	r3, r3, #2
 800fdf4:	2001      	movmi	r0, #1
 800fdf6:	6013      	strmi	r3, [r2, #0]
 800fdf8:	bf5c      	itt	pl
 800fdfa:	6013      	strpl	r3, [r2, #0]
 800fdfc:	2002      	movpl	r0, #2
 800fdfe:	4770      	bx	lr
 800fe00:	b299      	uxth	r1, r3
 800fe02:	b909      	cbnz	r1, 800fe08 <__lo0bits+0x2a>
 800fe04:	0c1b      	lsrs	r3, r3, #16
 800fe06:	2010      	movs	r0, #16
 800fe08:	b2d9      	uxtb	r1, r3
 800fe0a:	b909      	cbnz	r1, 800fe10 <__lo0bits+0x32>
 800fe0c:	3008      	adds	r0, #8
 800fe0e:	0a1b      	lsrs	r3, r3, #8
 800fe10:	0719      	lsls	r1, r3, #28
 800fe12:	bf04      	itt	eq
 800fe14:	091b      	lsreq	r3, r3, #4
 800fe16:	3004      	addeq	r0, #4
 800fe18:	0799      	lsls	r1, r3, #30
 800fe1a:	bf04      	itt	eq
 800fe1c:	089b      	lsreq	r3, r3, #2
 800fe1e:	3002      	addeq	r0, #2
 800fe20:	07d9      	lsls	r1, r3, #31
 800fe22:	d403      	bmi.n	800fe2c <__lo0bits+0x4e>
 800fe24:	085b      	lsrs	r3, r3, #1
 800fe26:	f100 0001 	add.w	r0, r0, #1
 800fe2a:	d003      	beq.n	800fe34 <__lo0bits+0x56>
 800fe2c:	6013      	str	r3, [r2, #0]
 800fe2e:	4770      	bx	lr
 800fe30:	2000      	movs	r0, #0
 800fe32:	4770      	bx	lr
 800fe34:	2020      	movs	r0, #32
 800fe36:	4770      	bx	lr

0800fe38 <__i2b>:
 800fe38:	b510      	push	{r4, lr}
 800fe3a:	460c      	mov	r4, r1
 800fe3c:	2101      	movs	r1, #1
 800fe3e:	f7ff ff07 	bl	800fc50 <_Balloc>
 800fe42:	4602      	mov	r2, r0
 800fe44:	b928      	cbnz	r0, 800fe52 <__i2b+0x1a>
 800fe46:	4b05      	ldr	r3, [pc, #20]	@ (800fe5c <__i2b+0x24>)
 800fe48:	4805      	ldr	r0, [pc, #20]	@ (800fe60 <__i2b+0x28>)
 800fe4a:	f240 1145 	movw	r1, #325	@ 0x145
 800fe4e:	f000 fca7 	bl	80107a0 <__assert_func>
 800fe52:	2301      	movs	r3, #1
 800fe54:	6144      	str	r4, [r0, #20]
 800fe56:	6103      	str	r3, [r0, #16]
 800fe58:	bd10      	pop	{r4, pc}
 800fe5a:	bf00      	nop
 800fe5c:	080112c4 	.word	0x080112c4
 800fe60:	080112d5 	.word	0x080112d5

0800fe64 <__multiply>:
 800fe64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe68:	4617      	mov	r7, r2
 800fe6a:	690a      	ldr	r2, [r1, #16]
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	bfa8      	it	ge
 800fe72:	463b      	movge	r3, r7
 800fe74:	4689      	mov	r9, r1
 800fe76:	bfa4      	itt	ge
 800fe78:	460f      	movge	r7, r1
 800fe7a:	4699      	movge	r9, r3
 800fe7c:	693d      	ldr	r5, [r7, #16]
 800fe7e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	6879      	ldr	r1, [r7, #4]
 800fe86:	eb05 060a 	add.w	r6, r5, sl
 800fe8a:	42b3      	cmp	r3, r6
 800fe8c:	b085      	sub	sp, #20
 800fe8e:	bfb8      	it	lt
 800fe90:	3101      	addlt	r1, #1
 800fe92:	f7ff fedd 	bl	800fc50 <_Balloc>
 800fe96:	b930      	cbnz	r0, 800fea6 <__multiply+0x42>
 800fe98:	4602      	mov	r2, r0
 800fe9a:	4b41      	ldr	r3, [pc, #260]	@ (800ffa0 <__multiply+0x13c>)
 800fe9c:	4841      	ldr	r0, [pc, #260]	@ (800ffa4 <__multiply+0x140>)
 800fe9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fea2:	f000 fc7d 	bl	80107a0 <__assert_func>
 800fea6:	f100 0414 	add.w	r4, r0, #20
 800feaa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800feae:	4623      	mov	r3, r4
 800feb0:	2200      	movs	r2, #0
 800feb2:	4573      	cmp	r3, lr
 800feb4:	d320      	bcc.n	800fef8 <__multiply+0x94>
 800feb6:	f107 0814 	add.w	r8, r7, #20
 800feba:	f109 0114 	add.w	r1, r9, #20
 800febe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fec2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fec6:	9302      	str	r3, [sp, #8]
 800fec8:	1beb      	subs	r3, r5, r7
 800feca:	3b15      	subs	r3, #21
 800fecc:	f023 0303 	bic.w	r3, r3, #3
 800fed0:	3304      	adds	r3, #4
 800fed2:	3715      	adds	r7, #21
 800fed4:	42bd      	cmp	r5, r7
 800fed6:	bf38      	it	cc
 800fed8:	2304      	movcc	r3, #4
 800feda:	9301      	str	r3, [sp, #4]
 800fedc:	9b02      	ldr	r3, [sp, #8]
 800fede:	9103      	str	r1, [sp, #12]
 800fee0:	428b      	cmp	r3, r1
 800fee2:	d80c      	bhi.n	800fefe <__multiply+0x9a>
 800fee4:	2e00      	cmp	r6, #0
 800fee6:	dd03      	ble.n	800fef0 <__multiply+0x8c>
 800fee8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800feec:	2b00      	cmp	r3, #0
 800feee:	d055      	beq.n	800ff9c <__multiply+0x138>
 800fef0:	6106      	str	r6, [r0, #16]
 800fef2:	b005      	add	sp, #20
 800fef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef8:	f843 2b04 	str.w	r2, [r3], #4
 800fefc:	e7d9      	b.n	800feb2 <__multiply+0x4e>
 800fefe:	f8b1 a000 	ldrh.w	sl, [r1]
 800ff02:	f1ba 0f00 	cmp.w	sl, #0
 800ff06:	d01f      	beq.n	800ff48 <__multiply+0xe4>
 800ff08:	46c4      	mov	ip, r8
 800ff0a:	46a1      	mov	r9, r4
 800ff0c:	2700      	movs	r7, #0
 800ff0e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ff12:	f8d9 3000 	ldr.w	r3, [r9]
 800ff16:	fa1f fb82 	uxth.w	fp, r2
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ff20:	443b      	add	r3, r7
 800ff22:	f8d9 7000 	ldr.w	r7, [r9]
 800ff26:	0c12      	lsrs	r2, r2, #16
 800ff28:	0c3f      	lsrs	r7, r7, #16
 800ff2a:	fb0a 7202 	mla	r2, sl, r2, r7
 800ff2e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff38:	4565      	cmp	r5, ip
 800ff3a:	f849 3b04 	str.w	r3, [r9], #4
 800ff3e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ff42:	d8e4      	bhi.n	800ff0e <__multiply+0xaa>
 800ff44:	9b01      	ldr	r3, [sp, #4]
 800ff46:	50e7      	str	r7, [r4, r3]
 800ff48:	9b03      	ldr	r3, [sp, #12]
 800ff4a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ff4e:	3104      	adds	r1, #4
 800ff50:	f1b9 0f00 	cmp.w	r9, #0
 800ff54:	d020      	beq.n	800ff98 <__multiply+0x134>
 800ff56:	6823      	ldr	r3, [r4, #0]
 800ff58:	4647      	mov	r7, r8
 800ff5a:	46a4      	mov	ip, r4
 800ff5c:	f04f 0a00 	mov.w	sl, #0
 800ff60:	f8b7 b000 	ldrh.w	fp, [r7]
 800ff64:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ff68:	fb09 220b 	mla	r2, r9, fp, r2
 800ff6c:	4452      	add	r2, sl
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff74:	f84c 3b04 	str.w	r3, [ip], #4
 800ff78:	f857 3b04 	ldr.w	r3, [r7], #4
 800ff7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff80:	f8bc 3000 	ldrh.w	r3, [ip]
 800ff84:	fb09 330a 	mla	r3, r9, sl, r3
 800ff88:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ff8c:	42bd      	cmp	r5, r7
 800ff8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff92:	d8e5      	bhi.n	800ff60 <__multiply+0xfc>
 800ff94:	9a01      	ldr	r2, [sp, #4]
 800ff96:	50a3      	str	r3, [r4, r2]
 800ff98:	3404      	adds	r4, #4
 800ff9a:	e79f      	b.n	800fedc <__multiply+0x78>
 800ff9c:	3e01      	subs	r6, #1
 800ff9e:	e7a1      	b.n	800fee4 <__multiply+0x80>
 800ffa0:	080112c4 	.word	0x080112c4
 800ffa4:	080112d5 	.word	0x080112d5

0800ffa8 <__pow5mult>:
 800ffa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffac:	4615      	mov	r5, r2
 800ffae:	f012 0203 	ands.w	r2, r2, #3
 800ffb2:	4607      	mov	r7, r0
 800ffb4:	460e      	mov	r6, r1
 800ffb6:	d007      	beq.n	800ffc8 <__pow5mult+0x20>
 800ffb8:	4c25      	ldr	r4, [pc, #148]	@ (8010050 <__pow5mult+0xa8>)
 800ffba:	3a01      	subs	r2, #1
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ffc2:	f7ff fea7 	bl	800fd14 <__multadd>
 800ffc6:	4606      	mov	r6, r0
 800ffc8:	10ad      	asrs	r5, r5, #2
 800ffca:	d03d      	beq.n	8010048 <__pow5mult+0xa0>
 800ffcc:	69fc      	ldr	r4, [r7, #28]
 800ffce:	b97c      	cbnz	r4, 800fff0 <__pow5mult+0x48>
 800ffd0:	2010      	movs	r0, #16
 800ffd2:	f7ff fd87 	bl	800fae4 <malloc>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	61f8      	str	r0, [r7, #28]
 800ffda:	b928      	cbnz	r0, 800ffe8 <__pow5mult+0x40>
 800ffdc:	4b1d      	ldr	r3, [pc, #116]	@ (8010054 <__pow5mult+0xac>)
 800ffde:	481e      	ldr	r0, [pc, #120]	@ (8010058 <__pow5mult+0xb0>)
 800ffe0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ffe4:	f000 fbdc 	bl	80107a0 <__assert_func>
 800ffe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffec:	6004      	str	r4, [r0, #0]
 800ffee:	60c4      	str	r4, [r0, #12]
 800fff0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fff8:	b94c      	cbnz	r4, 801000e <__pow5mult+0x66>
 800fffa:	f240 2171 	movw	r1, #625	@ 0x271
 800fffe:	4638      	mov	r0, r7
 8010000:	f7ff ff1a 	bl	800fe38 <__i2b>
 8010004:	2300      	movs	r3, #0
 8010006:	f8c8 0008 	str.w	r0, [r8, #8]
 801000a:	4604      	mov	r4, r0
 801000c:	6003      	str	r3, [r0, #0]
 801000e:	f04f 0900 	mov.w	r9, #0
 8010012:	07eb      	lsls	r3, r5, #31
 8010014:	d50a      	bpl.n	801002c <__pow5mult+0x84>
 8010016:	4631      	mov	r1, r6
 8010018:	4622      	mov	r2, r4
 801001a:	4638      	mov	r0, r7
 801001c:	f7ff ff22 	bl	800fe64 <__multiply>
 8010020:	4631      	mov	r1, r6
 8010022:	4680      	mov	r8, r0
 8010024:	4638      	mov	r0, r7
 8010026:	f7ff fe53 	bl	800fcd0 <_Bfree>
 801002a:	4646      	mov	r6, r8
 801002c:	106d      	asrs	r5, r5, #1
 801002e:	d00b      	beq.n	8010048 <__pow5mult+0xa0>
 8010030:	6820      	ldr	r0, [r4, #0]
 8010032:	b938      	cbnz	r0, 8010044 <__pow5mult+0x9c>
 8010034:	4622      	mov	r2, r4
 8010036:	4621      	mov	r1, r4
 8010038:	4638      	mov	r0, r7
 801003a:	f7ff ff13 	bl	800fe64 <__multiply>
 801003e:	6020      	str	r0, [r4, #0]
 8010040:	f8c0 9000 	str.w	r9, [r0]
 8010044:	4604      	mov	r4, r0
 8010046:	e7e4      	b.n	8010012 <__pow5mult+0x6a>
 8010048:	4630      	mov	r0, r6
 801004a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801004e:	bf00      	nop
 8010050:	08011388 	.word	0x08011388
 8010054:	08011255 	.word	0x08011255
 8010058:	080112d5 	.word	0x080112d5

0801005c <__lshift>:
 801005c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010060:	460c      	mov	r4, r1
 8010062:	6849      	ldr	r1, [r1, #4]
 8010064:	6923      	ldr	r3, [r4, #16]
 8010066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801006a:	68a3      	ldr	r3, [r4, #8]
 801006c:	4607      	mov	r7, r0
 801006e:	4691      	mov	r9, r2
 8010070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010074:	f108 0601 	add.w	r6, r8, #1
 8010078:	42b3      	cmp	r3, r6
 801007a:	db0b      	blt.n	8010094 <__lshift+0x38>
 801007c:	4638      	mov	r0, r7
 801007e:	f7ff fde7 	bl	800fc50 <_Balloc>
 8010082:	4605      	mov	r5, r0
 8010084:	b948      	cbnz	r0, 801009a <__lshift+0x3e>
 8010086:	4602      	mov	r2, r0
 8010088:	4b28      	ldr	r3, [pc, #160]	@ (801012c <__lshift+0xd0>)
 801008a:	4829      	ldr	r0, [pc, #164]	@ (8010130 <__lshift+0xd4>)
 801008c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010090:	f000 fb86 	bl	80107a0 <__assert_func>
 8010094:	3101      	adds	r1, #1
 8010096:	005b      	lsls	r3, r3, #1
 8010098:	e7ee      	b.n	8010078 <__lshift+0x1c>
 801009a:	2300      	movs	r3, #0
 801009c:	f100 0114 	add.w	r1, r0, #20
 80100a0:	f100 0210 	add.w	r2, r0, #16
 80100a4:	4618      	mov	r0, r3
 80100a6:	4553      	cmp	r3, sl
 80100a8:	db33      	blt.n	8010112 <__lshift+0xb6>
 80100aa:	6920      	ldr	r0, [r4, #16]
 80100ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80100b0:	f104 0314 	add.w	r3, r4, #20
 80100b4:	f019 091f 	ands.w	r9, r9, #31
 80100b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80100bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80100c0:	d02b      	beq.n	801011a <__lshift+0xbe>
 80100c2:	f1c9 0e20 	rsb	lr, r9, #32
 80100c6:	468a      	mov	sl, r1
 80100c8:	2200      	movs	r2, #0
 80100ca:	6818      	ldr	r0, [r3, #0]
 80100cc:	fa00 f009 	lsl.w	r0, r0, r9
 80100d0:	4310      	orrs	r0, r2
 80100d2:	f84a 0b04 	str.w	r0, [sl], #4
 80100d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80100da:	459c      	cmp	ip, r3
 80100dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80100e0:	d8f3      	bhi.n	80100ca <__lshift+0x6e>
 80100e2:	ebac 0304 	sub.w	r3, ip, r4
 80100e6:	3b15      	subs	r3, #21
 80100e8:	f023 0303 	bic.w	r3, r3, #3
 80100ec:	3304      	adds	r3, #4
 80100ee:	f104 0015 	add.w	r0, r4, #21
 80100f2:	4560      	cmp	r0, ip
 80100f4:	bf88      	it	hi
 80100f6:	2304      	movhi	r3, #4
 80100f8:	50ca      	str	r2, [r1, r3]
 80100fa:	b10a      	cbz	r2, 8010100 <__lshift+0xa4>
 80100fc:	f108 0602 	add.w	r6, r8, #2
 8010100:	3e01      	subs	r6, #1
 8010102:	4638      	mov	r0, r7
 8010104:	612e      	str	r6, [r5, #16]
 8010106:	4621      	mov	r1, r4
 8010108:	f7ff fde2 	bl	800fcd0 <_Bfree>
 801010c:	4628      	mov	r0, r5
 801010e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010112:	f842 0f04 	str.w	r0, [r2, #4]!
 8010116:	3301      	adds	r3, #1
 8010118:	e7c5      	b.n	80100a6 <__lshift+0x4a>
 801011a:	3904      	subs	r1, #4
 801011c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010120:	f841 2f04 	str.w	r2, [r1, #4]!
 8010124:	459c      	cmp	ip, r3
 8010126:	d8f9      	bhi.n	801011c <__lshift+0xc0>
 8010128:	e7ea      	b.n	8010100 <__lshift+0xa4>
 801012a:	bf00      	nop
 801012c:	080112c4 	.word	0x080112c4
 8010130:	080112d5 	.word	0x080112d5

08010134 <__mcmp>:
 8010134:	690a      	ldr	r2, [r1, #16]
 8010136:	4603      	mov	r3, r0
 8010138:	6900      	ldr	r0, [r0, #16]
 801013a:	1a80      	subs	r0, r0, r2
 801013c:	b530      	push	{r4, r5, lr}
 801013e:	d10e      	bne.n	801015e <__mcmp+0x2a>
 8010140:	3314      	adds	r3, #20
 8010142:	3114      	adds	r1, #20
 8010144:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010148:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801014c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010150:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010154:	4295      	cmp	r5, r2
 8010156:	d003      	beq.n	8010160 <__mcmp+0x2c>
 8010158:	d205      	bcs.n	8010166 <__mcmp+0x32>
 801015a:	f04f 30ff 	mov.w	r0, #4294967295
 801015e:	bd30      	pop	{r4, r5, pc}
 8010160:	42a3      	cmp	r3, r4
 8010162:	d3f3      	bcc.n	801014c <__mcmp+0x18>
 8010164:	e7fb      	b.n	801015e <__mcmp+0x2a>
 8010166:	2001      	movs	r0, #1
 8010168:	e7f9      	b.n	801015e <__mcmp+0x2a>
	...

0801016c <__mdiff>:
 801016c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010170:	4689      	mov	r9, r1
 8010172:	4606      	mov	r6, r0
 8010174:	4611      	mov	r1, r2
 8010176:	4648      	mov	r0, r9
 8010178:	4614      	mov	r4, r2
 801017a:	f7ff ffdb 	bl	8010134 <__mcmp>
 801017e:	1e05      	subs	r5, r0, #0
 8010180:	d112      	bne.n	80101a8 <__mdiff+0x3c>
 8010182:	4629      	mov	r1, r5
 8010184:	4630      	mov	r0, r6
 8010186:	f7ff fd63 	bl	800fc50 <_Balloc>
 801018a:	4602      	mov	r2, r0
 801018c:	b928      	cbnz	r0, 801019a <__mdiff+0x2e>
 801018e:	4b3f      	ldr	r3, [pc, #252]	@ (801028c <__mdiff+0x120>)
 8010190:	f240 2137 	movw	r1, #567	@ 0x237
 8010194:	483e      	ldr	r0, [pc, #248]	@ (8010290 <__mdiff+0x124>)
 8010196:	f000 fb03 	bl	80107a0 <__assert_func>
 801019a:	2301      	movs	r3, #1
 801019c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80101a0:	4610      	mov	r0, r2
 80101a2:	b003      	add	sp, #12
 80101a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a8:	bfbc      	itt	lt
 80101aa:	464b      	movlt	r3, r9
 80101ac:	46a1      	movlt	r9, r4
 80101ae:	4630      	mov	r0, r6
 80101b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80101b4:	bfba      	itte	lt
 80101b6:	461c      	movlt	r4, r3
 80101b8:	2501      	movlt	r5, #1
 80101ba:	2500      	movge	r5, #0
 80101bc:	f7ff fd48 	bl	800fc50 <_Balloc>
 80101c0:	4602      	mov	r2, r0
 80101c2:	b918      	cbnz	r0, 80101cc <__mdiff+0x60>
 80101c4:	4b31      	ldr	r3, [pc, #196]	@ (801028c <__mdiff+0x120>)
 80101c6:	f240 2145 	movw	r1, #581	@ 0x245
 80101ca:	e7e3      	b.n	8010194 <__mdiff+0x28>
 80101cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80101d0:	6926      	ldr	r6, [r4, #16]
 80101d2:	60c5      	str	r5, [r0, #12]
 80101d4:	f109 0310 	add.w	r3, r9, #16
 80101d8:	f109 0514 	add.w	r5, r9, #20
 80101dc:	f104 0e14 	add.w	lr, r4, #20
 80101e0:	f100 0b14 	add.w	fp, r0, #20
 80101e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80101e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80101ec:	9301      	str	r3, [sp, #4]
 80101ee:	46d9      	mov	r9, fp
 80101f0:	f04f 0c00 	mov.w	ip, #0
 80101f4:	9b01      	ldr	r3, [sp, #4]
 80101f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80101fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80101fe:	9301      	str	r3, [sp, #4]
 8010200:	fa1f f38a 	uxth.w	r3, sl
 8010204:	4619      	mov	r1, r3
 8010206:	b283      	uxth	r3, r0
 8010208:	1acb      	subs	r3, r1, r3
 801020a:	0c00      	lsrs	r0, r0, #16
 801020c:	4463      	add	r3, ip
 801020e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010212:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010216:	b29b      	uxth	r3, r3
 8010218:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801021c:	4576      	cmp	r6, lr
 801021e:	f849 3b04 	str.w	r3, [r9], #4
 8010222:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010226:	d8e5      	bhi.n	80101f4 <__mdiff+0x88>
 8010228:	1b33      	subs	r3, r6, r4
 801022a:	3b15      	subs	r3, #21
 801022c:	f023 0303 	bic.w	r3, r3, #3
 8010230:	3415      	adds	r4, #21
 8010232:	3304      	adds	r3, #4
 8010234:	42a6      	cmp	r6, r4
 8010236:	bf38      	it	cc
 8010238:	2304      	movcc	r3, #4
 801023a:	441d      	add	r5, r3
 801023c:	445b      	add	r3, fp
 801023e:	461e      	mov	r6, r3
 8010240:	462c      	mov	r4, r5
 8010242:	4544      	cmp	r4, r8
 8010244:	d30e      	bcc.n	8010264 <__mdiff+0xf8>
 8010246:	f108 0103 	add.w	r1, r8, #3
 801024a:	1b49      	subs	r1, r1, r5
 801024c:	f021 0103 	bic.w	r1, r1, #3
 8010250:	3d03      	subs	r5, #3
 8010252:	45a8      	cmp	r8, r5
 8010254:	bf38      	it	cc
 8010256:	2100      	movcc	r1, #0
 8010258:	440b      	add	r3, r1
 801025a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801025e:	b191      	cbz	r1, 8010286 <__mdiff+0x11a>
 8010260:	6117      	str	r7, [r2, #16]
 8010262:	e79d      	b.n	80101a0 <__mdiff+0x34>
 8010264:	f854 1b04 	ldr.w	r1, [r4], #4
 8010268:	46e6      	mov	lr, ip
 801026a:	0c08      	lsrs	r0, r1, #16
 801026c:	fa1c fc81 	uxtah	ip, ip, r1
 8010270:	4471      	add	r1, lr
 8010272:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010276:	b289      	uxth	r1, r1
 8010278:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801027c:	f846 1b04 	str.w	r1, [r6], #4
 8010280:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010284:	e7dd      	b.n	8010242 <__mdiff+0xd6>
 8010286:	3f01      	subs	r7, #1
 8010288:	e7e7      	b.n	801025a <__mdiff+0xee>
 801028a:	bf00      	nop
 801028c:	080112c4 	.word	0x080112c4
 8010290:	080112d5 	.word	0x080112d5

08010294 <__d2b>:
 8010294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010298:	460f      	mov	r7, r1
 801029a:	2101      	movs	r1, #1
 801029c:	ec59 8b10 	vmov	r8, r9, d0
 80102a0:	4616      	mov	r6, r2
 80102a2:	f7ff fcd5 	bl	800fc50 <_Balloc>
 80102a6:	4604      	mov	r4, r0
 80102a8:	b930      	cbnz	r0, 80102b8 <__d2b+0x24>
 80102aa:	4602      	mov	r2, r0
 80102ac:	4b23      	ldr	r3, [pc, #140]	@ (801033c <__d2b+0xa8>)
 80102ae:	4824      	ldr	r0, [pc, #144]	@ (8010340 <__d2b+0xac>)
 80102b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80102b4:	f000 fa74 	bl	80107a0 <__assert_func>
 80102b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80102bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80102c0:	b10d      	cbz	r5, 80102c6 <__d2b+0x32>
 80102c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80102c6:	9301      	str	r3, [sp, #4]
 80102c8:	f1b8 0300 	subs.w	r3, r8, #0
 80102cc:	d023      	beq.n	8010316 <__d2b+0x82>
 80102ce:	4668      	mov	r0, sp
 80102d0:	9300      	str	r3, [sp, #0]
 80102d2:	f7ff fd84 	bl	800fdde <__lo0bits>
 80102d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80102da:	b1d0      	cbz	r0, 8010312 <__d2b+0x7e>
 80102dc:	f1c0 0320 	rsb	r3, r0, #32
 80102e0:	fa02 f303 	lsl.w	r3, r2, r3
 80102e4:	430b      	orrs	r3, r1
 80102e6:	40c2      	lsrs	r2, r0
 80102e8:	6163      	str	r3, [r4, #20]
 80102ea:	9201      	str	r2, [sp, #4]
 80102ec:	9b01      	ldr	r3, [sp, #4]
 80102ee:	61a3      	str	r3, [r4, #24]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	bf0c      	ite	eq
 80102f4:	2201      	moveq	r2, #1
 80102f6:	2202      	movne	r2, #2
 80102f8:	6122      	str	r2, [r4, #16]
 80102fa:	b1a5      	cbz	r5, 8010326 <__d2b+0x92>
 80102fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010300:	4405      	add	r5, r0
 8010302:	603d      	str	r5, [r7, #0]
 8010304:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010308:	6030      	str	r0, [r6, #0]
 801030a:	4620      	mov	r0, r4
 801030c:	b003      	add	sp, #12
 801030e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010312:	6161      	str	r1, [r4, #20]
 8010314:	e7ea      	b.n	80102ec <__d2b+0x58>
 8010316:	a801      	add	r0, sp, #4
 8010318:	f7ff fd61 	bl	800fdde <__lo0bits>
 801031c:	9b01      	ldr	r3, [sp, #4]
 801031e:	6163      	str	r3, [r4, #20]
 8010320:	3020      	adds	r0, #32
 8010322:	2201      	movs	r2, #1
 8010324:	e7e8      	b.n	80102f8 <__d2b+0x64>
 8010326:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801032a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801032e:	6038      	str	r0, [r7, #0]
 8010330:	6918      	ldr	r0, [r3, #16]
 8010332:	f7ff fd35 	bl	800fda0 <__hi0bits>
 8010336:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801033a:	e7e5      	b.n	8010308 <__d2b+0x74>
 801033c:	080112c4 	.word	0x080112c4
 8010340:	080112d5 	.word	0x080112d5

08010344 <__ssputs_r>:
 8010344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010348:	688e      	ldr	r6, [r1, #8]
 801034a:	461f      	mov	r7, r3
 801034c:	42be      	cmp	r6, r7
 801034e:	680b      	ldr	r3, [r1, #0]
 8010350:	4682      	mov	sl, r0
 8010352:	460c      	mov	r4, r1
 8010354:	4690      	mov	r8, r2
 8010356:	d82d      	bhi.n	80103b4 <__ssputs_r+0x70>
 8010358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801035c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010360:	d026      	beq.n	80103b0 <__ssputs_r+0x6c>
 8010362:	6965      	ldr	r5, [r4, #20]
 8010364:	6909      	ldr	r1, [r1, #16]
 8010366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801036a:	eba3 0901 	sub.w	r9, r3, r1
 801036e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010372:	1c7b      	adds	r3, r7, #1
 8010374:	444b      	add	r3, r9
 8010376:	106d      	asrs	r5, r5, #1
 8010378:	429d      	cmp	r5, r3
 801037a:	bf38      	it	cc
 801037c:	461d      	movcc	r5, r3
 801037e:	0553      	lsls	r3, r2, #21
 8010380:	d527      	bpl.n	80103d2 <__ssputs_r+0x8e>
 8010382:	4629      	mov	r1, r5
 8010384:	f7ff fbd8 	bl	800fb38 <_malloc_r>
 8010388:	4606      	mov	r6, r0
 801038a:	b360      	cbz	r0, 80103e6 <__ssputs_r+0xa2>
 801038c:	6921      	ldr	r1, [r4, #16]
 801038e:	464a      	mov	r2, r9
 8010390:	f7fe fcf5 	bl	800ed7e <memcpy>
 8010394:	89a3      	ldrh	r3, [r4, #12]
 8010396:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801039a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801039e:	81a3      	strh	r3, [r4, #12]
 80103a0:	6126      	str	r6, [r4, #16]
 80103a2:	6165      	str	r5, [r4, #20]
 80103a4:	444e      	add	r6, r9
 80103a6:	eba5 0509 	sub.w	r5, r5, r9
 80103aa:	6026      	str	r6, [r4, #0]
 80103ac:	60a5      	str	r5, [r4, #8]
 80103ae:	463e      	mov	r6, r7
 80103b0:	42be      	cmp	r6, r7
 80103b2:	d900      	bls.n	80103b6 <__ssputs_r+0x72>
 80103b4:	463e      	mov	r6, r7
 80103b6:	6820      	ldr	r0, [r4, #0]
 80103b8:	4632      	mov	r2, r6
 80103ba:	4641      	mov	r1, r8
 80103bc:	f000 f9c6 	bl	801074c <memmove>
 80103c0:	68a3      	ldr	r3, [r4, #8]
 80103c2:	1b9b      	subs	r3, r3, r6
 80103c4:	60a3      	str	r3, [r4, #8]
 80103c6:	6823      	ldr	r3, [r4, #0]
 80103c8:	4433      	add	r3, r6
 80103ca:	6023      	str	r3, [r4, #0]
 80103cc:	2000      	movs	r0, #0
 80103ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d2:	462a      	mov	r2, r5
 80103d4:	f000 fa28 	bl	8010828 <_realloc_r>
 80103d8:	4606      	mov	r6, r0
 80103da:	2800      	cmp	r0, #0
 80103dc:	d1e0      	bne.n	80103a0 <__ssputs_r+0x5c>
 80103de:	6921      	ldr	r1, [r4, #16]
 80103e0:	4650      	mov	r0, sl
 80103e2:	f7ff fb35 	bl	800fa50 <_free_r>
 80103e6:	230c      	movs	r3, #12
 80103e8:	f8ca 3000 	str.w	r3, [sl]
 80103ec:	89a3      	ldrh	r3, [r4, #12]
 80103ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103f2:	81a3      	strh	r3, [r4, #12]
 80103f4:	f04f 30ff 	mov.w	r0, #4294967295
 80103f8:	e7e9      	b.n	80103ce <__ssputs_r+0x8a>
	...

080103fc <_svfiprintf_r>:
 80103fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010400:	4698      	mov	r8, r3
 8010402:	898b      	ldrh	r3, [r1, #12]
 8010404:	061b      	lsls	r3, r3, #24
 8010406:	b09d      	sub	sp, #116	@ 0x74
 8010408:	4607      	mov	r7, r0
 801040a:	460d      	mov	r5, r1
 801040c:	4614      	mov	r4, r2
 801040e:	d510      	bpl.n	8010432 <_svfiprintf_r+0x36>
 8010410:	690b      	ldr	r3, [r1, #16]
 8010412:	b973      	cbnz	r3, 8010432 <_svfiprintf_r+0x36>
 8010414:	2140      	movs	r1, #64	@ 0x40
 8010416:	f7ff fb8f 	bl	800fb38 <_malloc_r>
 801041a:	6028      	str	r0, [r5, #0]
 801041c:	6128      	str	r0, [r5, #16]
 801041e:	b930      	cbnz	r0, 801042e <_svfiprintf_r+0x32>
 8010420:	230c      	movs	r3, #12
 8010422:	603b      	str	r3, [r7, #0]
 8010424:	f04f 30ff 	mov.w	r0, #4294967295
 8010428:	b01d      	add	sp, #116	@ 0x74
 801042a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801042e:	2340      	movs	r3, #64	@ 0x40
 8010430:	616b      	str	r3, [r5, #20]
 8010432:	2300      	movs	r3, #0
 8010434:	9309      	str	r3, [sp, #36]	@ 0x24
 8010436:	2320      	movs	r3, #32
 8010438:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801043c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010440:	2330      	movs	r3, #48	@ 0x30
 8010442:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80105e0 <_svfiprintf_r+0x1e4>
 8010446:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801044a:	f04f 0901 	mov.w	r9, #1
 801044e:	4623      	mov	r3, r4
 8010450:	469a      	mov	sl, r3
 8010452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010456:	b10a      	cbz	r2, 801045c <_svfiprintf_r+0x60>
 8010458:	2a25      	cmp	r2, #37	@ 0x25
 801045a:	d1f9      	bne.n	8010450 <_svfiprintf_r+0x54>
 801045c:	ebba 0b04 	subs.w	fp, sl, r4
 8010460:	d00b      	beq.n	801047a <_svfiprintf_r+0x7e>
 8010462:	465b      	mov	r3, fp
 8010464:	4622      	mov	r2, r4
 8010466:	4629      	mov	r1, r5
 8010468:	4638      	mov	r0, r7
 801046a:	f7ff ff6b 	bl	8010344 <__ssputs_r>
 801046e:	3001      	adds	r0, #1
 8010470:	f000 80a7 	beq.w	80105c2 <_svfiprintf_r+0x1c6>
 8010474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010476:	445a      	add	r2, fp
 8010478:	9209      	str	r2, [sp, #36]	@ 0x24
 801047a:	f89a 3000 	ldrb.w	r3, [sl]
 801047e:	2b00      	cmp	r3, #0
 8010480:	f000 809f 	beq.w	80105c2 <_svfiprintf_r+0x1c6>
 8010484:	2300      	movs	r3, #0
 8010486:	f04f 32ff 	mov.w	r2, #4294967295
 801048a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801048e:	f10a 0a01 	add.w	sl, sl, #1
 8010492:	9304      	str	r3, [sp, #16]
 8010494:	9307      	str	r3, [sp, #28]
 8010496:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801049a:	931a      	str	r3, [sp, #104]	@ 0x68
 801049c:	4654      	mov	r4, sl
 801049e:	2205      	movs	r2, #5
 80104a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104a4:	484e      	ldr	r0, [pc, #312]	@ (80105e0 <_svfiprintf_r+0x1e4>)
 80104a6:	f7ef febb 	bl	8000220 <memchr>
 80104aa:	9a04      	ldr	r2, [sp, #16]
 80104ac:	b9d8      	cbnz	r0, 80104e6 <_svfiprintf_r+0xea>
 80104ae:	06d0      	lsls	r0, r2, #27
 80104b0:	bf44      	itt	mi
 80104b2:	2320      	movmi	r3, #32
 80104b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104b8:	0711      	lsls	r1, r2, #28
 80104ba:	bf44      	itt	mi
 80104bc:	232b      	movmi	r3, #43	@ 0x2b
 80104be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104c2:	f89a 3000 	ldrb.w	r3, [sl]
 80104c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80104c8:	d015      	beq.n	80104f6 <_svfiprintf_r+0xfa>
 80104ca:	9a07      	ldr	r2, [sp, #28]
 80104cc:	4654      	mov	r4, sl
 80104ce:	2000      	movs	r0, #0
 80104d0:	f04f 0c0a 	mov.w	ip, #10
 80104d4:	4621      	mov	r1, r4
 80104d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104da:	3b30      	subs	r3, #48	@ 0x30
 80104dc:	2b09      	cmp	r3, #9
 80104de:	d94b      	bls.n	8010578 <_svfiprintf_r+0x17c>
 80104e0:	b1b0      	cbz	r0, 8010510 <_svfiprintf_r+0x114>
 80104e2:	9207      	str	r2, [sp, #28]
 80104e4:	e014      	b.n	8010510 <_svfiprintf_r+0x114>
 80104e6:	eba0 0308 	sub.w	r3, r0, r8
 80104ea:	fa09 f303 	lsl.w	r3, r9, r3
 80104ee:	4313      	orrs	r3, r2
 80104f0:	9304      	str	r3, [sp, #16]
 80104f2:	46a2      	mov	sl, r4
 80104f4:	e7d2      	b.n	801049c <_svfiprintf_r+0xa0>
 80104f6:	9b03      	ldr	r3, [sp, #12]
 80104f8:	1d19      	adds	r1, r3, #4
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	9103      	str	r1, [sp, #12]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	bfbb      	ittet	lt
 8010502:	425b      	neglt	r3, r3
 8010504:	f042 0202 	orrlt.w	r2, r2, #2
 8010508:	9307      	strge	r3, [sp, #28]
 801050a:	9307      	strlt	r3, [sp, #28]
 801050c:	bfb8      	it	lt
 801050e:	9204      	strlt	r2, [sp, #16]
 8010510:	7823      	ldrb	r3, [r4, #0]
 8010512:	2b2e      	cmp	r3, #46	@ 0x2e
 8010514:	d10a      	bne.n	801052c <_svfiprintf_r+0x130>
 8010516:	7863      	ldrb	r3, [r4, #1]
 8010518:	2b2a      	cmp	r3, #42	@ 0x2a
 801051a:	d132      	bne.n	8010582 <_svfiprintf_r+0x186>
 801051c:	9b03      	ldr	r3, [sp, #12]
 801051e:	1d1a      	adds	r2, r3, #4
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	9203      	str	r2, [sp, #12]
 8010524:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010528:	3402      	adds	r4, #2
 801052a:	9305      	str	r3, [sp, #20]
 801052c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80105f0 <_svfiprintf_r+0x1f4>
 8010530:	7821      	ldrb	r1, [r4, #0]
 8010532:	2203      	movs	r2, #3
 8010534:	4650      	mov	r0, sl
 8010536:	f7ef fe73 	bl	8000220 <memchr>
 801053a:	b138      	cbz	r0, 801054c <_svfiprintf_r+0x150>
 801053c:	9b04      	ldr	r3, [sp, #16]
 801053e:	eba0 000a 	sub.w	r0, r0, sl
 8010542:	2240      	movs	r2, #64	@ 0x40
 8010544:	4082      	lsls	r2, r0
 8010546:	4313      	orrs	r3, r2
 8010548:	3401      	adds	r4, #1
 801054a:	9304      	str	r3, [sp, #16]
 801054c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010550:	4824      	ldr	r0, [pc, #144]	@ (80105e4 <_svfiprintf_r+0x1e8>)
 8010552:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010556:	2206      	movs	r2, #6
 8010558:	f7ef fe62 	bl	8000220 <memchr>
 801055c:	2800      	cmp	r0, #0
 801055e:	d036      	beq.n	80105ce <_svfiprintf_r+0x1d2>
 8010560:	4b21      	ldr	r3, [pc, #132]	@ (80105e8 <_svfiprintf_r+0x1ec>)
 8010562:	bb1b      	cbnz	r3, 80105ac <_svfiprintf_r+0x1b0>
 8010564:	9b03      	ldr	r3, [sp, #12]
 8010566:	3307      	adds	r3, #7
 8010568:	f023 0307 	bic.w	r3, r3, #7
 801056c:	3308      	adds	r3, #8
 801056e:	9303      	str	r3, [sp, #12]
 8010570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010572:	4433      	add	r3, r6
 8010574:	9309      	str	r3, [sp, #36]	@ 0x24
 8010576:	e76a      	b.n	801044e <_svfiprintf_r+0x52>
 8010578:	fb0c 3202 	mla	r2, ip, r2, r3
 801057c:	460c      	mov	r4, r1
 801057e:	2001      	movs	r0, #1
 8010580:	e7a8      	b.n	80104d4 <_svfiprintf_r+0xd8>
 8010582:	2300      	movs	r3, #0
 8010584:	3401      	adds	r4, #1
 8010586:	9305      	str	r3, [sp, #20]
 8010588:	4619      	mov	r1, r3
 801058a:	f04f 0c0a 	mov.w	ip, #10
 801058e:	4620      	mov	r0, r4
 8010590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010594:	3a30      	subs	r2, #48	@ 0x30
 8010596:	2a09      	cmp	r2, #9
 8010598:	d903      	bls.n	80105a2 <_svfiprintf_r+0x1a6>
 801059a:	2b00      	cmp	r3, #0
 801059c:	d0c6      	beq.n	801052c <_svfiprintf_r+0x130>
 801059e:	9105      	str	r1, [sp, #20]
 80105a0:	e7c4      	b.n	801052c <_svfiprintf_r+0x130>
 80105a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80105a6:	4604      	mov	r4, r0
 80105a8:	2301      	movs	r3, #1
 80105aa:	e7f0      	b.n	801058e <_svfiprintf_r+0x192>
 80105ac:	ab03      	add	r3, sp, #12
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	462a      	mov	r2, r5
 80105b2:	4b0e      	ldr	r3, [pc, #56]	@ (80105ec <_svfiprintf_r+0x1f0>)
 80105b4:	a904      	add	r1, sp, #16
 80105b6:	4638      	mov	r0, r7
 80105b8:	f7fd fe28 	bl	800e20c <_printf_float>
 80105bc:	1c42      	adds	r2, r0, #1
 80105be:	4606      	mov	r6, r0
 80105c0:	d1d6      	bne.n	8010570 <_svfiprintf_r+0x174>
 80105c2:	89ab      	ldrh	r3, [r5, #12]
 80105c4:	065b      	lsls	r3, r3, #25
 80105c6:	f53f af2d 	bmi.w	8010424 <_svfiprintf_r+0x28>
 80105ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105cc:	e72c      	b.n	8010428 <_svfiprintf_r+0x2c>
 80105ce:	ab03      	add	r3, sp, #12
 80105d0:	9300      	str	r3, [sp, #0]
 80105d2:	462a      	mov	r2, r5
 80105d4:	4b05      	ldr	r3, [pc, #20]	@ (80105ec <_svfiprintf_r+0x1f0>)
 80105d6:	a904      	add	r1, sp, #16
 80105d8:	4638      	mov	r0, r7
 80105da:	f7fe f8af 	bl	800e73c <_printf_i>
 80105de:	e7ed      	b.n	80105bc <_svfiprintf_r+0x1c0>
 80105e0:	0801132e 	.word	0x0801132e
 80105e4:	08011338 	.word	0x08011338
 80105e8:	0800e20d 	.word	0x0800e20d
 80105ec:	08010345 	.word	0x08010345
 80105f0:	08011334 	.word	0x08011334

080105f4 <__sflush_r>:
 80105f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105fc:	0716      	lsls	r6, r2, #28
 80105fe:	4605      	mov	r5, r0
 8010600:	460c      	mov	r4, r1
 8010602:	d454      	bmi.n	80106ae <__sflush_r+0xba>
 8010604:	684b      	ldr	r3, [r1, #4]
 8010606:	2b00      	cmp	r3, #0
 8010608:	dc02      	bgt.n	8010610 <__sflush_r+0x1c>
 801060a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801060c:	2b00      	cmp	r3, #0
 801060e:	dd48      	ble.n	80106a2 <__sflush_r+0xae>
 8010610:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010612:	2e00      	cmp	r6, #0
 8010614:	d045      	beq.n	80106a2 <__sflush_r+0xae>
 8010616:	2300      	movs	r3, #0
 8010618:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801061c:	682f      	ldr	r7, [r5, #0]
 801061e:	6a21      	ldr	r1, [r4, #32]
 8010620:	602b      	str	r3, [r5, #0]
 8010622:	d030      	beq.n	8010686 <__sflush_r+0x92>
 8010624:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010626:	89a3      	ldrh	r3, [r4, #12]
 8010628:	0759      	lsls	r1, r3, #29
 801062a:	d505      	bpl.n	8010638 <__sflush_r+0x44>
 801062c:	6863      	ldr	r3, [r4, #4]
 801062e:	1ad2      	subs	r2, r2, r3
 8010630:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010632:	b10b      	cbz	r3, 8010638 <__sflush_r+0x44>
 8010634:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010636:	1ad2      	subs	r2, r2, r3
 8010638:	2300      	movs	r3, #0
 801063a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801063c:	6a21      	ldr	r1, [r4, #32]
 801063e:	4628      	mov	r0, r5
 8010640:	47b0      	blx	r6
 8010642:	1c43      	adds	r3, r0, #1
 8010644:	89a3      	ldrh	r3, [r4, #12]
 8010646:	d106      	bne.n	8010656 <__sflush_r+0x62>
 8010648:	6829      	ldr	r1, [r5, #0]
 801064a:	291d      	cmp	r1, #29
 801064c:	d82b      	bhi.n	80106a6 <__sflush_r+0xb2>
 801064e:	4a2a      	ldr	r2, [pc, #168]	@ (80106f8 <__sflush_r+0x104>)
 8010650:	40ca      	lsrs	r2, r1
 8010652:	07d6      	lsls	r6, r2, #31
 8010654:	d527      	bpl.n	80106a6 <__sflush_r+0xb2>
 8010656:	2200      	movs	r2, #0
 8010658:	6062      	str	r2, [r4, #4]
 801065a:	04d9      	lsls	r1, r3, #19
 801065c:	6922      	ldr	r2, [r4, #16]
 801065e:	6022      	str	r2, [r4, #0]
 8010660:	d504      	bpl.n	801066c <__sflush_r+0x78>
 8010662:	1c42      	adds	r2, r0, #1
 8010664:	d101      	bne.n	801066a <__sflush_r+0x76>
 8010666:	682b      	ldr	r3, [r5, #0]
 8010668:	b903      	cbnz	r3, 801066c <__sflush_r+0x78>
 801066a:	6560      	str	r0, [r4, #84]	@ 0x54
 801066c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801066e:	602f      	str	r7, [r5, #0]
 8010670:	b1b9      	cbz	r1, 80106a2 <__sflush_r+0xae>
 8010672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010676:	4299      	cmp	r1, r3
 8010678:	d002      	beq.n	8010680 <__sflush_r+0x8c>
 801067a:	4628      	mov	r0, r5
 801067c:	f7ff f9e8 	bl	800fa50 <_free_r>
 8010680:	2300      	movs	r3, #0
 8010682:	6363      	str	r3, [r4, #52]	@ 0x34
 8010684:	e00d      	b.n	80106a2 <__sflush_r+0xae>
 8010686:	2301      	movs	r3, #1
 8010688:	4628      	mov	r0, r5
 801068a:	47b0      	blx	r6
 801068c:	4602      	mov	r2, r0
 801068e:	1c50      	adds	r0, r2, #1
 8010690:	d1c9      	bne.n	8010626 <__sflush_r+0x32>
 8010692:	682b      	ldr	r3, [r5, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d0c6      	beq.n	8010626 <__sflush_r+0x32>
 8010698:	2b1d      	cmp	r3, #29
 801069a:	d001      	beq.n	80106a0 <__sflush_r+0xac>
 801069c:	2b16      	cmp	r3, #22
 801069e:	d11e      	bne.n	80106de <__sflush_r+0xea>
 80106a0:	602f      	str	r7, [r5, #0]
 80106a2:	2000      	movs	r0, #0
 80106a4:	e022      	b.n	80106ec <__sflush_r+0xf8>
 80106a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106aa:	b21b      	sxth	r3, r3
 80106ac:	e01b      	b.n	80106e6 <__sflush_r+0xf2>
 80106ae:	690f      	ldr	r7, [r1, #16]
 80106b0:	2f00      	cmp	r7, #0
 80106b2:	d0f6      	beq.n	80106a2 <__sflush_r+0xae>
 80106b4:	0793      	lsls	r3, r2, #30
 80106b6:	680e      	ldr	r6, [r1, #0]
 80106b8:	bf08      	it	eq
 80106ba:	694b      	ldreq	r3, [r1, #20]
 80106bc:	600f      	str	r7, [r1, #0]
 80106be:	bf18      	it	ne
 80106c0:	2300      	movne	r3, #0
 80106c2:	eba6 0807 	sub.w	r8, r6, r7
 80106c6:	608b      	str	r3, [r1, #8]
 80106c8:	f1b8 0f00 	cmp.w	r8, #0
 80106cc:	dde9      	ble.n	80106a2 <__sflush_r+0xae>
 80106ce:	6a21      	ldr	r1, [r4, #32]
 80106d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80106d2:	4643      	mov	r3, r8
 80106d4:	463a      	mov	r2, r7
 80106d6:	4628      	mov	r0, r5
 80106d8:	47b0      	blx	r6
 80106da:	2800      	cmp	r0, #0
 80106dc:	dc08      	bgt.n	80106f0 <__sflush_r+0xfc>
 80106de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106e6:	81a3      	strh	r3, [r4, #12]
 80106e8:	f04f 30ff 	mov.w	r0, #4294967295
 80106ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106f0:	4407      	add	r7, r0
 80106f2:	eba8 0800 	sub.w	r8, r8, r0
 80106f6:	e7e7      	b.n	80106c8 <__sflush_r+0xd4>
 80106f8:	20400001 	.word	0x20400001

080106fc <_fflush_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	690b      	ldr	r3, [r1, #16]
 8010700:	4605      	mov	r5, r0
 8010702:	460c      	mov	r4, r1
 8010704:	b913      	cbnz	r3, 801070c <_fflush_r+0x10>
 8010706:	2500      	movs	r5, #0
 8010708:	4628      	mov	r0, r5
 801070a:	bd38      	pop	{r3, r4, r5, pc}
 801070c:	b118      	cbz	r0, 8010716 <_fflush_r+0x1a>
 801070e:	6a03      	ldr	r3, [r0, #32]
 8010710:	b90b      	cbnz	r3, 8010716 <_fflush_r+0x1a>
 8010712:	f7fe f9bd 	bl	800ea90 <__sinit>
 8010716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d0f3      	beq.n	8010706 <_fflush_r+0xa>
 801071e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010720:	07d0      	lsls	r0, r2, #31
 8010722:	d404      	bmi.n	801072e <_fflush_r+0x32>
 8010724:	0599      	lsls	r1, r3, #22
 8010726:	d402      	bmi.n	801072e <_fflush_r+0x32>
 8010728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801072a:	f7fe fb26 	bl	800ed7a <__retarget_lock_acquire_recursive>
 801072e:	4628      	mov	r0, r5
 8010730:	4621      	mov	r1, r4
 8010732:	f7ff ff5f 	bl	80105f4 <__sflush_r>
 8010736:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010738:	07da      	lsls	r2, r3, #31
 801073a:	4605      	mov	r5, r0
 801073c:	d4e4      	bmi.n	8010708 <_fflush_r+0xc>
 801073e:	89a3      	ldrh	r3, [r4, #12]
 8010740:	059b      	lsls	r3, r3, #22
 8010742:	d4e1      	bmi.n	8010708 <_fflush_r+0xc>
 8010744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010746:	f7fe fb19 	bl	800ed7c <__retarget_lock_release_recursive>
 801074a:	e7dd      	b.n	8010708 <_fflush_r+0xc>

0801074c <memmove>:
 801074c:	4288      	cmp	r0, r1
 801074e:	b510      	push	{r4, lr}
 8010750:	eb01 0402 	add.w	r4, r1, r2
 8010754:	d902      	bls.n	801075c <memmove+0x10>
 8010756:	4284      	cmp	r4, r0
 8010758:	4623      	mov	r3, r4
 801075a:	d807      	bhi.n	801076c <memmove+0x20>
 801075c:	1e43      	subs	r3, r0, #1
 801075e:	42a1      	cmp	r1, r4
 8010760:	d008      	beq.n	8010774 <memmove+0x28>
 8010762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010766:	f803 2f01 	strb.w	r2, [r3, #1]!
 801076a:	e7f8      	b.n	801075e <memmove+0x12>
 801076c:	4402      	add	r2, r0
 801076e:	4601      	mov	r1, r0
 8010770:	428a      	cmp	r2, r1
 8010772:	d100      	bne.n	8010776 <memmove+0x2a>
 8010774:	bd10      	pop	{r4, pc}
 8010776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801077a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801077e:	e7f7      	b.n	8010770 <memmove+0x24>

08010780 <_sbrk_r>:
 8010780:	b538      	push	{r3, r4, r5, lr}
 8010782:	4d06      	ldr	r5, [pc, #24]	@ (801079c <_sbrk_r+0x1c>)
 8010784:	2300      	movs	r3, #0
 8010786:	4604      	mov	r4, r0
 8010788:	4608      	mov	r0, r1
 801078a:	602b      	str	r3, [r5, #0]
 801078c:	f7f1 fb56 	bl	8001e3c <_sbrk>
 8010790:	1c43      	adds	r3, r0, #1
 8010792:	d102      	bne.n	801079a <_sbrk_r+0x1a>
 8010794:	682b      	ldr	r3, [r5, #0]
 8010796:	b103      	cbz	r3, 801079a <_sbrk_r+0x1a>
 8010798:	6023      	str	r3, [r4, #0]
 801079a:	bd38      	pop	{r3, r4, r5, pc}
 801079c:	2000a6c4 	.word	0x2000a6c4

080107a0 <__assert_func>:
 80107a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107a2:	4614      	mov	r4, r2
 80107a4:	461a      	mov	r2, r3
 80107a6:	4b09      	ldr	r3, [pc, #36]	@ (80107cc <__assert_func+0x2c>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	4605      	mov	r5, r0
 80107ac:	68d8      	ldr	r0, [r3, #12]
 80107ae:	b14c      	cbz	r4, 80107c4 <__assert_func+0x24>
 80107b0:	4b07      	ldr	r3, [pc, #28]	@ (80107d0 <__assert_func+0x30>)
 80107b2:	9100      	str	r1, [sp, #0]
 80107b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107b8:	4906      	ldr	r1, [pc, #24]	@ (80107d4 <__assert_func+0x34>)
 80107ba:	462b      	mov	r3, r5
 80107bc:	f000 f870 	bl	80108a0 <fiprintf>
 80107c0:	f000 f880 	bl	80108c4 <abort>
 80107c4:	4b04      	ldr	r3, [pc, #16]	@ (80107d8 <__assert_func+0x38>)
 80107c6:	461c      	mov	r4, r3
 80107c8:	e7f3      	b.n	80107b2 <__assert_func+0x12>
 80107ca:	bf00      	nop
 80107cc:	20000194 	.word	0x20000194
 80107d0:	08011349 	.word	0x08011349
 80107d4:	08011356 	.word	0x08011356
 80107d8:	08011384 	.word	0x08011384

080107dc <_calloc_r>:
 80107dc:	b570      	push	{r4, r5, r6, lr}
 80107de:	fba1 5402 	umull	r5, r4, r1, r2
 80107e2:	b934      	cbnz	r4, 80107f2 <_calloc_r+0x16>
 80107e4:	4629      	mov	r1, r5
 80107e6:	f7ff f9a7 	bl	800fb38 <_malloc_r>
 80107ea:	4606      	mov	r6, r0
 80107ec:	b928      	cbnz	r0, 80107fa <_calloc_r+0x1e>
 80107ee:	4630      	mov	r0, r6
 80107f0:	bd70      	pop	{r4, r5, r6, pc}
 80107f2:	220c      	movs	r2, #12
 80107f4:	6002      	str	r2, [r0, #0]
 80107f6:	2600      	movs	r6, #0
 80107f8:	e7f9      	b.n	80107ee <_calloc_r+0x12>
 80107fa:	462a      	mov	r2, r5
 80107fc:	4621      	mov	r1, r4
 80107fe:	f7fe f9e1 	bl	800ebc4 <memset>
 8010802:	e7f4      	b.n	80107ee <_calloc_r+0x12>

08010804 <__ascii_mbtowc>:
 8010804:	b082      	sub	sp, #8
 8010806:	b901      	cbnz	r1, 801080a <__ascii_mbtowc+0x6>
 8010808:	a901      	add	r1, sp, #4
 801080a:	b142      	cbz	r2, 801081e <__ascii_mbtowc+0x1a>
 801080c:	b14b      	cbz	r3, 8010822 <__ascii_mbtowc+0x1e>
 801080e:	7813      	ldrb	r3, [r2, #0]
 8010810:	600b      	str	r3, [r1, #0]
 8010812:	7812      	ldrb	r2, [r2, #0]
 8010814:	1e10      	subs	r0, r2, #0
 8010816:	bf18      	it	ne
 8010818:	2001      	movne	r0, #1
 801081a:	b002      	add	sp, #8
 801081c:	4770      	bx	lr
 801081e:	4610      	mov	r0, r2
 8010820:	e7fb      	b.n	801081a <__ascii_mbtowc+0x16>
 8010822:	f06f 0001 	mvn.w	r0, #1
 8010826:	e7f8      	b.n	801081a <__ascii_mbtowc+0x16>

08010828 <_realloc_r>:
 8010828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801082c:	4607      	mov	r7, r0
 801082e:	4614      	mov	r4, r2
 8010830:	460d      	mov	r5, r1
 8010832:	b921      	cbnz	r1, 801083e <_realloc_r+0x16>
 8010834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010838:	4611      	mov	r1, r2
 801083a:	f7ff b97d 	b.w	800fb38 <_malloc_r>
 801083e:	b92a      	cbnz	r2, 801084c <_realloc_r+0x24>
 8010840:	f7ff f906 	bl	800fa50 <_free_r>
 8010844:	4625      	mov	r5, r4
 8010846:	4628      	mov	r0, r5
 8010848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084c:	f000 f841 	bl	80108d2 <_malloc_usable_size_r>
 8010850:	4284      	cmp	r4, r0
 8010852:	4606      	mov	r6, r0
 8010854:	d802      	bhi.n	801085c <_realloc_r+0x34>
 8010856:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801085a:	d8f4      	bhi.n	8010846 <_realloc_r+0x1e>
 801085c:	4621      	mov	r1, r4
 801085e:	4638      	mov	r0, r7
 8010860:	f7ff f96a 	bl	800fb38 <_malloc_r>
 8010864:	4680      	mov	r8, r0
 8010866:	b908      	cbnz	r0, 801086c <_realloc_r+0x44>
 8010868:	4645      	mov	r5, r8
 801086a:	e7ec      	b.n	8010846 <_realloc_r+0x1e>
 801086c:	42b4      	cmp	r4, r6
 801086e:	4622      	mov	r2, r4
 8010870:	4629      	mov	r1, r5
 8010872:	bf28      	it	cs
 8010874:	4632      	movcs	r2, r6
 8010876:	f7fe fa82 	bl	800ed7e <memcpy>
 801087a:	4629      	mov	r1, r5
 801087c:	4638      	mov	r0, r7
 801087e:	f7ff f8e7 	bl	800fa50 <_free_r>
 8010882:	e7f1      	b.n	8010868 <_realloc_r+0x40>

08010884 <__ascii_wctomb>:
 8010884:	4603      	mov	r3, r0
 8010886:	4608      	mov	r0, r1
 8010888:	b141      	cbz	r1, 801089c <__ascii_wctomb+0x18>
 801088a:	2aff      	cmp	r2, #255	@ 0xff
 801088c:	d904      	bls.n	8010898 <__ascii_wctomb+0x14>
 801088e:	228a      	movs	r2, #138	@ 0x8a
 8010890:	601a      	str	r2, [r3, #0]
 8010892:	f04f 30ff 	mov.w	r0, #4294967295
 8010896:	4770      	bx	lr
 8010898:	700a      	strb	r2, [r1, #0]
 801089a:	2001      	movs	r0, #1
 801089c:	4770      	bx	lr
	...

080108a0 <fiprintf>:
 80108a0:	b40e      	push	{r1, r2, r3}
 80108a2:	b503      	push	{r0, r1, lr}
 80108a4:	4601      	mov	r1, r0
 80108a6:	ab03      	add	r3, sp, #12
 80108a8:	4805      	ldr	r0, [pc, #20]	@ (80108c0 <fiprintf+0x20>)
 80108aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80108ae:	6800      	ldr	r0, [r0, #0]
 80108b0:	9301      	str	r3, [sp, #4]
 80108b2:	f000 f83f 	bl	8010934 <_vfiprintf_r>
 80108b6:	b002      	add	sp, #8
 80108b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80108bc:	b003      	add	sp, #12
 80108be:	4770      	bx	lr
 80108c0:	20000194 	.word	0x20000194

080108c4 <abort>:
 80108c4:	b508      	push	{r3, lr}
 80108c6:	2006      	movs	r0, #6
 80108c8:	f000 fa08 	bl	8010cdc <raise>
 80108cc:	2001      	movs	r0, #1
 80108ce:	f7f1 fa3d 	bl	8001d4c <_exit>

080108d2 <_malloc_usable_size_r>:
 80108d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108d6:	1f18      	subs	r0, r3, #4
 80108d8:	2b00      	cmp	r3, #0
 80108da:	bfbc      	itt	lt
 80108dc:	580b      	ldrlt	r3, [r1, r0]
 80108de:	18c0      	addlt	r0, r0, r3
 80108e0:	4770      	bx	lr

080108e2 <__sfputc_r>:
 80108e2:	6893      	ldr	r3, [r2, #8]
 80108e4:	3b01      	subs	r3, #1
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	b410      	push	{r4}
 80108ea:	6093      	str	r3, [r2, #8]
 80108ec:	da08      	bge.n	8010900 <__sfputc_r+0x1e>
 80108ee:	6994      	ldr	r4, [r2, #24]
 80108f0:	42a3      	cmp	r3, r4
 80108f2:	db01      	blt.n	80108f8 <__sfputc_r+0x16>
 80108f4:	290a      	cmp	r1, #10
 80108f6:	d103      	bne.n	8010900 <__sfputc_r+0x1e>
 80108f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108fc:	f000 b932 	b.w	8010b64 <__swbuf_r>
 8010900:	6813      	ldr	r3, [r2, #0]
 8010902:	1c58      	adds	r0, r3, #1
 8010904:	6010      	str	r0, [r2, #0]
 8010906:	7019      	strb	r1, [r3, #0]
 8010908:	4608      	mov	r0, r1
 801090a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801090e:	4770      	bx	lr

08010910 <__sfputs_r>:
 8010910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010912:	4606      	mov	r6, r0
 8010914:	460f      	mov	r7, r1
 8010916:	4614      	mov	r4, r2
 8010918:	18d5      	adds	r5, r2, r3
 801091a:	42ac      	cmp	r4, r5
 801091c:	d101      	bne.n	8010922 <__sfputs_r+0x12>
 801091e:	2000      	movs	r0, #0
 8010920:	e007      	b.n	8010932 <__sfputs_r+0x22>
 8010922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010926:	463a      	mov	r2, r7
 8010928:	4630      	mov	r0, r6
 801092a:	f7ff ffda 	bl	80108e2 <__sfputc_r>
 801092e:	1c43      	adds	r3, r0, #1
 8010930:	d1f3      	bne.n	801091a <__sfputs_r+0xa>
 8010932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010934 <_vfiprintf_r>:
 8010934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010938:	460d      	mov	r5, r1
 801093a:	b09d      	sub	sp, #116	@ 0x74
 801093c:	4614      	mov	r4, r2
 801093e:	4698      	mov	r8, r3
 8010940:	4606      	mov	r6, r0
 8010942:	b118      	cbz	r0, 801094c <_vfiprintf_r+0x18>
 8010944:	6a03      	ldr	r3, [r0, #32]
 8010946:	b90b      	cbnz	r3, 801094c <_vfiprintf_r+0x18>
 8010948:	f7fe f8a2 	bl	800ea90 <__sinit>
 801094c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801094e:	07d9      	lsls	r1, r3, #31
 8010950:	d405      	bmi.n	801095e <_vfiprintf_r+0x2a>
 8010952:	89ab      	ldrh	r3, [r5, #12]
 8010954:	059a      	lsls	r2, r3, #22
 8010956:	d402      	bmi.n	801095e <_vfiprintf_r+0x2a>
 8010958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801095a:	f7fe fa0e 	bl	800ed7a <__retarget_lock_acquire_recursive>
 801095e:	89ab      	ldrh	r3, [r5, #12]
 8010960:	071b      	lsls	r3, r3, #28
 8010962:	d501      	bpl.n	8010968 <_vfiprintf_r+0x34>
 8010964:	692b      	ldr	r3, [r5, #16]
 8010966:	b99b      	cbnz	r3, 8010990 <_vfiprintf_r+0x5c>
 8010968:	4629      	mov	r1, r5
 801096a:	4630      	mov	r0, r6
 801096c:	f000 f938 	bl	8010be0 <__swsetup_r>
 8010970:	b170      	cbz	r0, 8010990 <_vfiprintf_r+0x5c>
 8010972:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010974:	07dc      	lsls	r4, r3, #31
 8010976:	d504      	bpl.n	8010982 <_vfiprintf_r+0x4e>
 8010978:	f04f 30ff 	mov.w	r0, #4294967295
 801097c:	b01d      	add	sp, #116	@ 0x74
 801097e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010982:	89ab      	ldrh	r3, [r5, #12]
 8010984:	0598      	lsls	r0, r3, #22
 8010986:	d4f7      	bmi.n	8010978 <_vfiprintf_r+0x44>
 8010988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801098a:	f7fe f9f7 	bl	800ed7c <__retarget_lock_release_recursive>
 801098e:	e7f3      	b.n	8010978 <_vfiprintf_r+0x44>
 8010990:	2300      	movs	r3, #0
 8010992:	9309      	str	r3, [sp, #36]	@ 0x24
 8010994:	2320      	movs	r3, #32
 8010996:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801099a:	f8cd 800c 	str.w	r8, [sp, #12]
 801099e:	2330      	movs	r3, #48	@ 0x30
 80109a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010b50 <_vfiprintf_r+0x21c>
 80109a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80109a8:	f04f 0901 	mov.w	r9, #1
 80109ac:	4623      	mov	r3, r4
 80109ae:	469a      	mov	sl, r3
 80109b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109b4:	b10a      	cbz	r2, 80109ba <_vfiprintf_r+0x86>
 80109b6:	2a25      	cmp	r2, #37	@ 0x25
 80109b8:	d1f9      	bne.n	80109ae <_vfiprintf_r+0x7a>
 80109ba:	ebba 0b04 	subs.w	fp, sl, r4
 80109be:	d00b      	beq.n	80109d8 <_vfiprintf_r+0xa4>
 80109c0:	465b      	mov	r3, fp
 80109c2:	4622      	mov	r2, r4
 80109c4:	4629      	mov	r1, r5
 80109c6:	4630      	mov	r0, r6
 80109c8:	f7ff ffa2 	bl	8010910 <__sfputs_r>
 80109cc:	3001      	adds	r0, #1
 80109ce:	f000 80a7 	beq.w	8010b20 <_vfiprintf_r+0x1ec>
 80109d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109d4:	445a      	add	r2, fp
 80109d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80109d8:	f89a 3000 	ldrb.w	r3, [sl]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	f000 809f 	beq.w	8010b20 <_vfiprintf_r+0x1ec>
 80109e2:	2300      	movs	r3, #0
 80109e4:	f04f 32ff 	mov.w	r2, #4294967295
 80109e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109ec:	f10a 0a01 	add.w	sl, sl, #1
 80109f0:	9304      	str	r3, [sp, #16]
 80109f2:	9307      	str	r3, [sp, #28]
 80109f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80109f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80109fa:	4654      	mov	r4, sl
 80109fc:	2205      	movs	r2, #5
 80109fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a02:	4853      	ldr	r0, [pc, #332]	@ (8010b50 <_vfiprintf_r+0x21c>)
 8010a04:	f7ef fc0c 	bl	8000220 <memchr>
 8010a08:	9a04      	ldr	r2, [sp, #16]
 8010a0a:	b9d8      	cbnz	r0, 8010a44 <_vfiprintf_r+0x110>
 8010a0c:	06d1      	lsls	r1, r2, #27
 8010a0e:	bf44      	itt	mi
 8010a10:	2320      	movmi	r3, #32
 8010a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a16:	0713      	lsls	r3, r2, #28
 8010a18:	bf44      	itt	mi
 8010a1a:	232b      	movmi	r3, #43	@ 0x2b
 8010a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a20:	f89a 3000 	ldrb.w	r3, [sl]
 8010a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a26:	d015      	beq.n	8010a54 <_vfiprintf_r+0x120>
 8010a28:	9a07      	ldr	r2, [sp, #28]
 8010a2a:	4654      	mov	r4, sl
 8010a2c:	2000      	movs	r0, #0
 8010a2e:	f04f 0c0a 	mov.w	ip, #10
 8010a32:	4621      	mov	r1, r4
 8010a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a38:	3b30      	subs	r3, #48	@ 0x30
 8010a3a:	2b09      	cmp	r3, #9
 8010a3c:	d94b      	bls.n	8010ad6 <_vfiprintf_r+0x1a2>
 8010a3e:	b1b0      	cbz	r0, 8010a6e <_vfiprintf_r+0x13a>
 8010a40:	9207      	str	r2, [sp, #28]
 8010a42:	e014      	b.n	8010a6e <_vfiprintf_r+0x13a>
 8010a44:	eba0 0308 	sub.w	r3, r0, r8
 8010a48:	fa09 f303 	lsl.w	r3, r9, r3
 8010a4c:	4313      	orrs	r3, r2
 8010a4e:	9304      	str	r3, [sp, #16]
 8010a50:	46a2      	mov	sl, r4
 8010a52:	e7d2      	b.n	80109fa <_vfiprintf_r+0xc6>
 8010a54:	9b03      	ldr	r3, [sp, #12]
 8010a56:	1d19      	adds	r1, r3, #4
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	9103      	str	r1, [sp, #12]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	bfbb      	ittet	lt
 8010a60:	425b      	neglt	r3, r3
 8010a62:	f042 0202 	orrlt.w	r2, r2, #2
 8010a66:	9307      	strge	r3, [sp, #28]
 8010a68:	9307      	strlt	r3, [sp, #28]
 8010a6a:	bfb8      	it	lt
 8010a6c:	9204      	strlt	r2, [sp, #16]
 8010a6e:	7823      	ldrb	r3, [r4, #0]
 8010a70:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a72:	d10a      	bne.n	8010a8a <_vfiprintf_r+0x156>
 8010a74:	7863      	ldrb	r3, [r4, #1]
 8010a76:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a78:	d132      	bne.n	8010ae0 <_vfiprintf_r+0x1ac>
 8010a7a:	9b03      	ldr	r3, [sp, #12]
 8010a7c:	1d1a      	adds	r2, r3, #4
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	9203      	str	r2, [sp, #12]
 8010a82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a86:	3402      	adds	r4, #2
 8010a88:	9305      	str	r3, [sp, #20]
 8010a8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010b60 <_vfiprintf_r+0x22c>
 8010a8e:	7821      	ldrb	r1, [r4, #0]
 8010a90:	2203      	movs	r2, #3
 8010a92:	4650      	mov	r0, sl
 8010a94:	f7ef fbc4 	bl	8000220 <memchr>
 8010a98:	b138      	cbz	r0, 8010aaa <_vfiprintf_r+0x176>
 8010a9a:	9b04      	ldr	r3, [sp, #16]
 8010a9c:	eba0 000a 	sub.w	r0, r0, sl
 8010aa0:	2240      	movs	r2, #64	@ 0x40
 8010aa2:	4082      	lsls	r2, r0
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	3401      	adds	r4, #1
 8010aa8:	9304      	str	r3, [sp, #16]
 8010aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aae:	4829      	ldr	r0, [pc, #164]	@ (8010b54 <_vfiprintf_r+0x220>)
 8010ab0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010ab4:	2206      	movs	r2, #6
 8010ab6:	f7ef fbb3 	bl	8000220 <memchr>
 8010aba:	2800      	cmp	r0, #0
 8010abc:	d03f      	beq.n	8010b3e <_vfiprintf_r+0x20a>
 8010abe:	4b26      	ldr	r3, [pc, #152]	@ (8010b58 <_vfiprintf_r+0x224>)
 8010ac0:	bb1b      	cbnz	r3, 8010b0a <_vfiprintf_r+0x1d6>
 8010ac2:	9b03      	ldr	r3, [sp, #12]
 8010ac4:	3307      	adds	r3, #7
 8010ac6:	f023 0307 	bic.w	r3, r3, #7
 8010aca:	3308      	adds	r3, #8
 8010acc:	9303      	str	r3, [sp, #12]
 8010ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ad0:	443b      	add	r3, r7
 8010ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ad4:	e76a      	b.n	80109ac <_vfiprintf_r+0x78>
 8010ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ada:	460c      	mov	r4, r1
 8010adc:	2001      	movs	r0, #1
 8010ade:	e7a8      	b.n	8010a32 <_vfiprintf_r+0xfe>
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	3401      	adds	r4, #1
 8010ae4:	9305      	str	r3, [sp, #20]
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	f04f 0c0a 	mov.w	ip, #10
 8010aec:	4620      	mov	r0, r4
 8010aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010af2:	3a30      	subs	r2, #48	@ 0x30
 8010af4:	2a09      	cmp	r2, #9
 8010af6:	d903      	bls.n	8010b00 <_vfiprintf_r+0x1cc>
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d0c6      	beq.n	8010a8a <_vfiprintf_r+0x156>
 8010afc:	9105      	str	r1, [sp, #20]
 8010afe:	e7c4      	b.n	8010a8a <_vfiprintf_r+0x156>
 8010b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b04:	4604      	mov	r4, r0
 8010b06:	2301      	movs	r3, #1
 8010b08:	e7f0      	b.n	8010aec <_vfiprintf_r+0x1b8>
 8010b0a:	ab03      	add	r3, sp, #12
 8010b0c:	9300      	str	r3, [sp, #0]
 8010b0e:	462a      	mov	r2, r5
 8010b10:	4b12      	ldr	r3, [pc, #72]	@ (8010b5c <_vfiprintf_r+0x228>)
 8010b12:	a904      	add	r1, sp, #16
 8010b14:	4630      	mov	r0, r6
 8010b16:	f7fd fb79 	bl	800e20c <_printf_float>
 8010b1a:	4607      	mov	r7, r0
 8010b1c:	1c78      	adds	r0, r7, #1
 8010b1e:	d1d6      	bne.n	8010ace <_vfiprintf_r+0x19a>
 8010b20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b22:	07d9      	lsls	r1, r3, #31
 8010b24:	d405      	bmi.n	8010b32 <_vfiprintf_r+0x1fe>
 8010b26:	89ab      	ldrh	r3, [r5, #12]
 8010b28:	059a      	lsls	r2, r3, #22
 8010b2a:	d402      	bmi.n	8010b32 <_vfiprintf_r+0x1fe>
 8010b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b2e:	f7fe f925 	bl	800ed7c <__retarget_lock_release_recursive>
 8010b32:	89ab      	ldrh	r3, [r5, #12]
 8010b34:	065b      	lsls	r3, r3, #25
 8010b36:	f53f af1f 	bmi.w	8010978 <_vfiprintf_r+0x44>
 8010b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b3c:	e71e      	b.n	801097c <_vfiprintf_r+0x48>
 8010b3e:	ab03      	add	r3, sp, #12
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	462a      	mov	r2, r5
 8010b44:	4b05      	ldr	r3, [pc, #20]	@ (8010b5c <_vfiprintf_r+0x228>)
 8010b46:	a904      	add	r1, sp, #16
 8010b48:	4630      	mov	r0, r6
 8010b4a:	f7fd fdf7 	bl	800e73c <_printf_i>
 8010b4e:	e7e4      	b.n	8010b1a <_vfiprintf_r+0x1e6>
 8010b50:	0801132e 	.word	0x0801132e
 8010b54:	08011338 	.word	0x08011338
 8010b58:	0800e20d 	.word	0x0800e20d
 8010b5c:	08010911 	.word	0x08010911
 8010b60:	08011334 	.word	0x08011334

08010b64 <__swbuf_r>:
 8010b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b66:	460e      	mov	r6, r1
 8010b68:	4614      	mov	r4, r2
 8010b6a:	4605      	mov	r5, r0
 8010b6c:	b118      	cbz	r0, 8010b76 <__swbuf_r+0x12>
 8010b6e:	6a03      	ldr	r3, [r0, #32]
 8010b70:	b90b      	cbnz	r3, 8010b76 <__swbuf_r+0x12>
 8010b72:	f7fd ff8d 	bl	800ea90 <__sinit>
 8010b76:	69a3      	ldr	r3, [r4, #24]
 8010b78:	60a3      	str	r3, [r4, #8]
 8010b7a:	89a3      	ldrh	r3, [r4, #12]
 8010b7c:	071a      	lsls	r2, r3, #28
 8010b7e:	d501      	bpl.n	8010b84 <__swbuf_r+0x20>
 8010b80:	6923      	ldr	r3, [r4, #16]
 8010b82:	b943      	cbnz	r3, 8010b96 <__swbuf_r+0x32>
 8010b84:	4621      	mov	r1, r4
 8010b86:	4628      	mov	r0, r5
 8010b88:	f000 f82a 	bl	8010be0 <__swsetup_r>
 8010b8c:	b118      	cbz	r0, 8010b96 <__swbuf_r+0x32>
 8010b8e:	f04f 37ff 	mov.w	r7, #4294967295
 8010b92:	4638      	mov	r0, r7
 8010b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b96:	6823      	ldr	r3, [r4, #0]
 8010b98:	6922      	ldr	r2, [r4, #16]
 8010b9a:	1a98      	subs	r0, r3, r2
 8010b9c:	6963      	ldr	r3, [r4, #20]
 8010b9e:	b2f6      	uxtb	r6, r6
 8010ba0:	4283      	cmp	r3, r0
 8010ba2:	4637      	mov	r7, r6
 8010ba4:	dc05      	bgt.n	8010bb2 <__swbuf_r+0x4e>
 8010ba6:	4621      	mov	r1, r4
 8010ba8:	4628      	mov	r0, r5
 8010baa:	f7ff fda7 	bl	80106fc <_fflush_r>
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d1ed      	bne.n	8010b8e <__swbuf_r+0x2a>
 8010bb2:	68a3      	ldr	r3, [r4, #8]
 8010bb4:	3b01      	subs	r3, #1
 8010bb6:	60a3      	str	r3, [r4, #8]
 8010bb8:	6823      	ldr	r3, [r4, #0]
 8010bba:	1c5a      	adds	r2, r3, #1
 8010bbc:	6022      	str	r2, [r4, #0]
 8010bbe:	701e      	strb	r6, [r3, #0]
 8010bc0:	6962      	ldr	r2, [r4, #20]
 8010bc2:	1c43      	adds	r3, r0, #1
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d004      	beq.n	8010bd2 <__swbuf_r+0x6e>
 8010bc8:	89a3      	ldrh	r3, [r4, #12]
 8010bca:	07db      	lsls	r3, r3, #31
 8010bcc:	d5e1      	bpl.n	8010b92 <__swbuf_r+0x2e>
 8010bce:	2e0a      	cmp	r6, #10
 8010bd0:	d1df      	bne.n	8010b92 <__swbuf_r+0x2e>
 8010bd2:	4621      	mov	r1, r4
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	f7ff fd91 	bl	80106fc <_fflush_r>
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	d0d9      	beq.n	8010b92 <__swbuf_r+0x2e>
 8010bde:	e7d6      	b.n	8010b8e <__swbuf_r+0x2a>

08010be0 <__swsetup_r>:
 8010be0:	b538      	push	{r3, r4, r5, lr}
 8010be2:	4b29      	ldr	r3, [pc, #164]	@ (8010c88 <__swsetup_r+0xa8>)
 8010be4:	4605      	mov	r5, r0
 8010be6:	6818      	ldr	r0, [r3, #0]
 8010be8:	460c      	mov	r4, r1
 8010bea:	b118      	cbz	r0, 8010bf4 <__swsetup_r+0x14>
 8010bec:	6a03      	ldr	r3, [r0, #32]
 8010bee:	b90b      	cbnz	r3, 8010bf4 <__swsetup_r+0x14>
 8010bf0:	f7fd ff4e 	bl	800ea90 <__sinit>
 8010bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bf8:	0719      	lsls	r1, r3, #28
 8010bfa:	d422      	bmi.n	8010c42 <__swsetup_r+0x62>
 8010bfc:	06da      	lsls	r2, r3, #27
 8010bfe:	d407      	bmi.n	8010c10 <__swsetup_r+0x30>
 8010c00:	2209      	movs	r2, #9
 8010c02:	602a      	str	r2, [r5, #0]
 8010c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c08:	81a3      	strh	r3, [r4, #12]
 8010c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c0e:	e033      	b.n	8010c78 <__swsetup_r+0x98>
 8010c10:	0758      	lsls	r0, r3, #29
 8010c12:	d512      	bpl.n	8010c3a <__swsetup_r+0x5a>
 8010c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c16:	b141      	cbz	r1, 8010c2a <__swsetup_r+0x4a>
 8010c18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c1c:	4299      	cmp	r1, r3
 8010c1e:	d002      	beq.n	8010c26 <__swsetup_r+0x46>
 8010c20:	4628      	mov	r0, r5
 8010c22:	f7fe ff15 	bl	800fa50 <_free_r>
 8010c26:	2300      	movs	r3, #0
 8010c28:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c2a:	89a3      	ldrh	r3, [r4, #12]
 8010c2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010c30:	81a3      	strh	r3, [r4, #12]
 8010c32:	2300      	movs	r3, #0
 8010c34:	6063      	str	r3, [r4, #4]
 8010c36:	6923      	ldr	r3, [r4, #16]
 8010c38:	6023      	str	r3, [r4, #0]
 8010c3a:	89a3      	ldrh	r3, [r4, #12]
 8010c3c:	f043 0308 	orr.w	r3, r3, #8
 8010c40:	81a3      	strh	r3, [r4, #12]
 8010c42:	6923      	ldr	r3, [r4, #16]
 8010c44:	b94b      	cbnz	r3, 8010c5a <__swsetup_r+0x7a>
 8010c46:	89a3      	ldrh	r3, [r4, #12]
 8010c48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c50:	d003      	beq.n	8010c5a <__swsetup_r+0x7a>
 8010c52:	4621      	mov	r1, r4
 8010c54:	4628      	mov	r0, r5
 8010c56:	f000 f883 	bl	8010d60 <__smakebuf_r>
 8010c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c5e:	f013 0201 	ands.w	r2, r3, #1
 8010c62:	d00a      	beq.n	8010c7a <__swsetup_r+0x9a>
 8010c64:	2200      	movs	r2, #0
 8010c66:	60a2      	str	r2, [r4, #8]
 8010c68:	6962      	ldr	r2, [r4, #20]
 8010c6a:	4252      	negs	r2, r2
 8010c6c:	61a2      	str	r2, [r4, #24]
 8010c6e:	6922      	ldr	r2, [r4, #16]
 8010c70:	b942      	cbnz	r2, 8010c84 <__swsetup_r+0xa4>
 8010c72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c76:	d1c5      	bne.n	8010c04 <__swsetup_r+0x24>
 8010c78:	bd38      	pop	{r3, r4, r5, pc}
 8010c7a:	0799      	lsls	r1, r3, #30
 8010c7c:	bf58      	it	pl
 8010c7e:	6962      	ldrpl	r2, [r4, #20]
 8010c80:	60a2      	str	r2, [r4, #8]
 8010c82:	e7f4      	b.n	8010c6e <__swsetup_r+0x8e>
 8010c84:	2000      	movs	r0, #0
 8010c86:	e7f7      	b.n	8010c78 <__swsetup_r+0x98>
 8010c88:	20000194 	.word	0x20000194

08010c8c <_raise_r>:
 8010c8c:	291f      	cmp	r1, #31
 8010c8e:	b538      	push	{r3, r4, r5, lr}
 8010c90:	4605      	mov	r5, r0
 8010c92:	460c      	mov	r4, r1
 8010c94:	d904      	bls.n	8010ca0 <_raise_r+0x14>
 8010c96:	2316      	movs	r3, #22
 8010c98:	6003      	str	r3, [r0, #0]
 8010c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9e:	bd38      	pop	{r3, r4, r5, pc}
 8010ca0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ca2:	b112      	cbz	r2, 8010caa <_raise_r+0x1e>
 8010ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ca8:	b94b      	cbnz	r3, 8010cbe <_raise_r+0x32>
 8010caa:	4628      	mov	r0, r5
 8010cac:	f000 f830 	bl	8010d10 <_getpid_r>
 8010cb0:	4622      	mov	r2, r4
 8010cb2:	4601      	mov	r1, r0
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cba:	f000 b817 	b.w	8010cec <_kill_r>
 8010cbe:	2b01      	cmp	r3, #1
 8010cc0:	d00a      	beq.n	8010cd8 <_raise_r+0x4c>
 8010cc2:	1c59      	adds	r1, r3, #1
 8010cc4:	d103      	bne.n	8010cce <_raise_r+0x42>
 8010cc6:	2316      	movs	r3, #22
 8010cc8:	6003      	str	r3, [r0, #0]
 8010cca:	2001      	movs	r0, #1
 8010ccc:	e7e7      	b.n	8010c9e <_raise_r+0x12>
 8010cce:	2100      	movs	r1, #0
 8010cd0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010cd4:	4620      	mov	r0, r4
 8010cd6:	4798      	blx	r3
 8010cd8:	2000      	movs	r0, #0
 8010cda:	e7e0      	b.n	8010c9e <_raise_r+0x12>

08010cdc <raise>:
 8010cdc:	4b02      	ldr	r3, [pc, #8]	@ (8010ce8 <raise+0xc>)
 8010cde:	4601      	mov	r1, r0
 8010ce0:	6818      	ldr	r0, [r3, #0]
 8010ce2:	f7ff bfd3 	b.w	8010c8c <_raise_r>
 8010ce6:	bf00      	nop
 8010ce8:	20000194 	.word	0x20000194

08010cec <_kill_r>:
 8010cec:	b538      	push	{r3, r4, r5, lr}
 8010cee:	4d07      	ldr	r5, [pc, #28]	@ (8010d0c <_kill_r+0x20>)
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	4608      	mov	r0, r1
 8010cf6:	4611      	mov	r1, r2
 8010cf8:	602b      	str	r3, [r5, #0]
 8010cfa:	f7f1 f817 	bl	8001d2c <_kill>
 8010cfe:	1c43      	adds	r3, r0, #1
 8010d00:	d102      	bne.n	8010d08 <_kill_r+0x1c>
 8010d02:	682b      	ldr	r3, [r5, #0]
 8010d04:	b103      	cbz	r3, 8010d08 <_kill_r+0x1c>
 8010d06:	6023      	str	r3, [r4, #0]
 8010d08:	bd38      	pop	{r3, r4, r5, pc}
 8010d0a:	bf00      	nop
 8010d0c:	2000a6c4 	.word	0x2000a6c4

08010d10 <_getpid_r>:
 8010d10:	f7f1 b804 	b.w	8001d1c <_getpid>

08010d14 <__swhatbuf_r>:
 8010d14:	b570      	push	{r4, r5, r6, lr}
 8010d16:	460c      	mov	r4, r1
 8010d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d1c:	2900      	cmp	r1, #0
 8010d1e:	b096      	sub	sp, #88	@ 0x58
 8010d20:	4615      	mov	r5, r2
 8010d22:	461e      	mov	r6, r3
 8010d24:	da0d      	bge.n	8010d42 <__swhatbuf_r+0x2e>
 8010d26:	89a3      	ldrh	r3, [r4, #12]
 8010d28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010d2c:	f04f 0100 	mov.w	r1, #0
 8010d30:	bf14      	ite	ne
 8010d32:	2340      	movne	r3, #64	@ 0x40
 8010d34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010d38:	2000      	movs	r0, #0
 8010d3a:	6031      	str	r1, [r6, #0]
 8010d3c:	602b      	str	r3, [r5, #0]
 8010d3e:	b016      	add	sp, #88	@ 0x58
 8010d40:	bd70      	pop	{r4, r5, r6, pc}
 8010d42:	466a      	mov	r2, sp
 8010d44:	f000 f848 	bl	8010dd8 <_fstat_r>
 8010d48:	2800      	cmp	r0, #0
 8010d4a:	dbec      	blt.n	8010d26 <__swhatbuf_r+0x12>
 8010d4c:	9901      	ldr	r1, [sp, #4]
 8010d4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010d52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010d56:	4259      	negs	r1, r3
 8010d58:	4159      	adcs	r1, r3
 8010d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d5e:	e7eb      	b.n	8010d38 <__swhatbuf_r+0x24>

08010d60 <__smakebuf_r>:
 8010d60:	898b      	ldrh	r3, [r1, #12]
 8010d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d64:	079d      	lsls	r5, r3, #30
 8010d66:	4606      	mov	r6, r0
 8010d68:	460c      	mov	r4, r1
 8010d6a:	d507      	bpl.n	8010d7c <__smakebuf_r+0x1c>
 8010d6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010d70:	6023      	str	r3, [r4, #0]
 8010d72:	6123      	str	r3, [r4, #16]
 8010d74:	2301      	movs	r3, #1
 8010d76:	6163      	str	r3, [r4, #20]
 8010d78:	b003      	add	sp, #12
 8010d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d7c:	ab01      	add	r3, sp, #4
 8010d7e:	466a      	mov	r2, sp
 8010d80:	f7ff ffc8 	bl	8010d14 <__swhatbuf_r>
 8010d84:	9f00      	ldr	r7, [sp, #0]
 8010d86:	4605      	mov	r5, r0
 8010d88:	4639      	mov	r1, r7
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	f7fe fed4 	bl	800fb38 <_malloc_r>
 8010d90:	b948      	cbnz	r0, 8010da6 <__smakebuf_r+0x46>
 8010d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d96:	059a      	lsls	r2, r3, #22
 8010d98:	d4ee      	bmi.n	8010d78 <__smakebuf_r+0x18>
 8010d9a:	f023 0303 	bic.w	r3, r3, #3
 8010d9e:	f043 0302 	orr.w	r3, r3, #2
 8010da2:	81a3      	strh	r3, [r4, #12]
 8010da4:	e7e2      	b.n	8010d6c <__smakebuf_r+0xc>
 8010da6:	89a3      	ldrh	r3, [r4, #12]
 8010da8:	6020      	str	r0, [r4, #0]
 8010daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dae:	81a3      	strh	r3, [r4, #12]
 8010db0:	9b01      	ldr	r3, [sp, #4]
 8010db2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010db6:	b15b      	cbz	r3, 8010dd0 <__smakebuf_r+0x70>
 8010db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dbc:	4630      	mov	r0, r6
 8010dbe:	f000 f81d 	bl	8010dfc <_isatty_r>
 8010dc2:	b128      	cbz	r0, 8010dd0 <__smakebuf_r+0x70>
 8010dc4:	89a3      	ldrh	r3, [r4, #12]
 8010dc6:	f023 0303 	bic.w	r3, r3, #3
 8010dca:	f043 0301 	orr.w	r3, r3, #1
 8010dce:	81a3      	strh	r3, [r4, #12]
 8010dd0:	89a3      	ldrh	r3, [r4, #12]
 8010dd2:	431d      	orrs	r5, r3
 8010dd4:	81a5      	strh	r5, [r4, #12]
 8010dd6:	e7cf      	b.n	8010d78 <__smakebuf_r+0x18>

08010dd8 <_fstat_r>:
 8010dd8:	b538      	push	{r3, r4, r5, lr}
 8010dda:	4d07      	ldr	r5, [pc, #28]	@ (8010df8 <_fstat_r+0x20>)
 8010ddc:	2300      	movs	r3, #0
 8010dde:	4604      	mov	r4, r0
 8010de0:	4608      	mov	r0, r1
 8010de2:	4611      	mov	r1, r2
 8010de4:	602b      	str	r3, [r5, #0]
 8010de6:	f7f1 f801 	bl	8001dec <_fstat>
 8010dea:	1c43      	adds	r3, r0, #1
 8010dec:	d102      	bne.n	8010df4 <_fstat_r+0x1c>
 8010dee:	682b      	ldr	r3, [r5, #0]
 8010df0:	b103      	cbz	r3, 8010df4 <_fstat_r+0x1c>
 8010df2:	6023      	str	r3, [r4, #0]
 8010df4:	bd38      	pop	{r3, r4, r5, pc}
 8010df6:	bf00      	nop
 8010df8:	2000a6c4 	.word	0x2000a6c4

08010dfc <_isatty_r>:
 8010dfc:	b538      	push	{r3, r4, r5, lr}
 8010dfe:	4d06      	ldr	r5, [pc, #24]	@ (8010e18 <_isatty_r+0x1c>)
 8010e00:	2300      	movs	r3, #0
 8010e02:	4604      	mov	r4, r0
 8010e04:	4608      	mov	r0, r1
 8010e06:	602b      	str	r3, [r5, #0]
 8010e08:	f7f1 f800 	bl	8001e0c <_isatty>
 8010e0c:	1c43      	adds	r3, r0, #1
 8010e0e:	d102      	bne.n	8010e16 <_isatty_r+0x1a>
 8010e10:	682b      	ldr	r3, [r5, #0]
 8010e12:	b103      	cbz	r3, 8010e16 <_isatty_r+0x1a>
 8010e14:	6023      	str	r3, [r4, #0]
 8010e16:	bd38      	pop	{r3, r4, r5, pc}
 8010e18:	2000a6c4 	.word	0x2000a6c4

08010e1c <_init>:
 8010e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e1e:	bf00      	nop
 8010e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e22:	bc08      	pop	{r3}
 8010e24:	469e      	mov	lr, r3
 8010e26:	4770      	bx	lr

08010e28 <_fini>:
 8010e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e2a:	bf00      	nop
 8010e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e2e:	bc08      	pop	{r3}
 8010e30:	469e      	mov	lr, r3
 8010e32:	4770      	bx	lr
