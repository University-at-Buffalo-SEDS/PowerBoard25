
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010eb0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08011090  08011090  00012090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011760  08011760  00013350  2**0
                  CONTENTS
  4 .ARM          00000008  08011760  08011760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011768  08011768  00013350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011768  08011768  00012768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801176c  0801176c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  08011770  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007498  20000350  08011ac0  00013350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200077e8  08011ac0  000137e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d961  00000000  00000000  00013380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005faa  00000000  00000000  00040ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024a0  00000000  00000000  00046c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c43  00000000  00000000  00049130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261f5  00000000  00000000  0004ad73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b7ba  00000000  00000000  00070f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e79ee  00000000  00000000  0009c722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000acd4  00000000  00000000  00184154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011078 	.word	0x08011078

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08011078 	.word	0x08011078

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <LTC2990_Init>:
  * @brief  Initialize the LTC2990 Chip
  * @param  Pointer to the LTC2990 handle
  * @param  Pointer to the HAL I2C HandleTypeDef
  * @retval HAL status
  */
int LTC2990_Init(LTC2990_Handle_t *handle, I2C_HandleTypeDef *hi2c) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	int8_t ack;

	handle->hi2c = hi2c;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	601a      	str	r2, [r3, #0]

	//Initialize voltages to NAN
	//Can this be changed so that it is in the struct
	//i.e. last_voltages = {NAN, NAN, NAN, NAN}
	for (int i = 0; i < 4; i++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e009      	b.n	8000f12 <LTC2990_Init+0x2a>
		handle->last_voltages[i] = NAN;
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3302      	adds	r3, #2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	4a1c      	ldr	r2, [pc, #112]	@ (8000f7c <LTC2990_Init+0x94>)
 8000f0a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	ddf2      	ble.n	8000efe <LTC2990_Init+0x16>
	}

	handle->i2c_address = LTC2990_I2C_ADDRESS;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	224c      	movs	r2, #76	@ 0x4c
 8000f1c:	711a      	strb	r2, [r3, #4]

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, VOLTAGE_MODE_MASK);
 8000f1e:	2207      	movs	r2, #7
 8000f20:	2107      	movs	r1, #7
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f8cc 	bl	80010c0 <LTC2990_Set_Mode>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	72fb      	strb	r3, [r7, #11]

	if(ack != 0) {
 8000f2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d004      	beq.n	8000f3e <LTC2990_Init+0x56>
		CDC_Transmit_Print("Failed to set in Single Voltage Mode \n");
 8000f34:	4812      	ldr	r0, [pc, #72]	@ (8000f80 <LTC2990_Init+0x98>)
 8000f36:	f000 fa2d 	bl	8001394 <CDC_Transmit_Print>
		while(1);
 8000f3a:	bf00      	nop
 8000f3c:	e7fd      	b.n	8000f3a <LTC2990_Init+0x52>
	}


	// Enable all voltage channels
	ack = LTC2990_Enable_All_Voltages(handle);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f8b0 	bl	80010a4 <LTC2990_Enable_All_Voltages>
 8000f44:	4603      	mov	r3, r0
 8000f46:	72fb      	strb	r3, [r7, #11]
	if(ack != 0) {
 8000f48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d007      	beq.n	8000f60 <LTC2990_Init+0x78>
		HAL_Delay(50);
 8000f50:	2032      	movs	r0, #50	@ 0x32
 8000f52:	f000 ffb5 	bl	8001ec0 <HAL_Delay>
		CDC_Transmit_Print("Failed to enable voltage channels. \n");
 8000f56:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <LTC2990_Init+0x9c>)
 8000f58:	f000 fa1c 	bl	8001394 <CDC_Transmit_Print>
		while(1);
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <LTC2990_Init+0x74>
	}

	HAL_Delay(100);
 8000f60:	2064      	movs	r0, #100	@ 0x64
 8000f62:	f000 ffad 	bl	8001ec0 <HAL_Delay>
	CDC_Transmit_Print("LTC2990 configured for Single-Ended Voltage Monitoring. \n");
 8000f66:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <LTC2990_Init+0xa0>)
 8000f68:	f000 fa14 	bl	8001394 <CDC_Transmit_Print>

	//Initial data reading
	LTC2990_Step(handle);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f80d 	bl	8000f8c <LTC2990_Step>

	return 0;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	7fc00000 	.word	0x7fc00000
 8000f80:	08011090 	.word	0x08011090
 8000f84:	080110b8 	.word	0x080110b8
 8000f88:	080110e0 	.word	0x080110e0

08000f8c <LTC2990_Step>:
/**
  * @brief  Tell the LTC2990 chip to refresh voltage readings,
  * 		This does not return the voltage(s) read, use LTC2990_Get_Voltage to do so
  * @param  Pointer to the LTC2990 handle
  */
void LTC2990_Step(LTC2990_Handle_t *handle) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	int8_t ack;
	int16_t adc_code;
	int8_t data_valid;
	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f8d7 	bl	8001148 <LTC2990_Trigger_Conversion>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	74fb      	strb	r3, [r7, #19]
	if(ack != 0) {
 8000f9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <LTC2990_Step+0x22>
		CDC_Transmit_Print("Failed to trigger conversion.");
 8000fa6:	4829      	ldr	r0, [pc, #164]	@ (800104c <LTC2990_Step+0xc0>)
 8000fa8:	f000 f9f4 	bl	8001394 <CDC_Transmit_Print>
 8000fac:	e04b      	b.n	8001046 <LTC2990_Step+0xba>
		return;
	}

	// Allow time for conversion
	HAL_Delay(10);
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f000 ff86 	bl	8001ec0 <HAL_Delay>

	// Read voltages V1 to V4
	uint8_t msb_registers[4] = {V1_MSB_REG, V2_MSB_REG, V3_MSB_REG, V4_MSB_REG};
 8000fb4:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <LTC2990_Step+0xc4>)
 8000fb6:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 4; i++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e040      	b.n	8001040 <LTC2990_Step+0xb4>
		ack = LTC2990_ADC_Read_New_Data(handle, msb_registers[i], &adc_code, &data_valid);
 8000fbe:	f107 0208 	add.w	r2, r7, #8
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	7819      	ldrb	r1, [r3, #0]
 8000fc8:	f107 030f 	add.w	r3, r7, #15
 8000fcc:	f107 0210 	add.w	r2, r7, #16
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f8c7 	bl	8001164 <LTC2990_ADC_Read_New_Data>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	74fb      	strb	r3, [r7, #19]
		if(ack != 0 || data_valid != 1) {
 8000fda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <LTC2990_Step+0x5e>
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d017      	beq.n	800101a <LTC2990_Step+0x8e>
			CDC_Transmit_Print("Error reading Voltage %d \n", i);
 8000fea:	6979      	ldr	r1, [r7, #20]
 8000fec:	4819      	ldr	r0, [pc, #100]	@ (8001054 <LTC2990_Step+0xc8>)
 8000fee:	f000 f9d1 	bl	8001394 <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the ack: %d \n", ack);
 8000ff2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4817      	ldr	r0, [pc, #92]	@ (8001058 <LTC2990_Step+0xcc>)
 8000ffa:	f000 f9cb 	bl	8001394 <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4619      	mov	r1, r3
 8001004:	4815      	ldr	r0, [pc, #84]	@ (800105c <LTC2990_Step+0xd0>)
 8001006:	f000 f9c5 	bl	8001394 <CDC_Transmit_Print>
			handle->last_voltages[i] = NAN;
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3302      	adds	r3, #2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <LTC2990_Step+0xd4>)
 8001016:	601a      	str	r2, [r3, #0]
			continue;
 8001018:	e00f      	b.n	800103a <LTC2990_Step+0xae>
		}
		handle->last_voltages[i] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code);
 800101a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800101e:	b29b      	uxth	r3, r3
 8001020:	4619      	mov	r1, r3
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f920 	bl	8001268 <LTC2990_Code_To_Single_Ended_Voltage>
 8001028:	eef0 7a40 	vmov.f32	s15, s0
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3302      	adds	r3, #2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 4; i++) {
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	2b03      	cmp	r3, #3
 8001044:	ddbb      	ble.n	8000fbe <LTC2990_Step+0x32>
		//CDC_Transmit_Print("Just Read Voltages, got: %x \n", handle->last_voltages[i]);
	}

}
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	0801111c 	.word	0x0801111c
 8001050:	0c0a0806 	.word	0x0c0a0806
 8001054:	0801113c 	.word	0x0801113c
 8001058:	08011158 	.word	0x08011158
 800105c:	08011170 	.word	0x08011170
 8001060:	7fc00000 	.word	0x7fc00000

08001064 <LTC2990_Get_Voltage>:
/**
  * @brief  Puts the latest voltage readings in the array passed
  * @param  Pointer to the LTC2990 handle
  * @param 	Pointer to the array to store voltage values to
  */
void LTC2990_Get_Voltage(LTC2990_Handle_t* handle, float* voltages) {
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 4; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e00d      	b.n	8001090 <LTC2990_Get_Voltage+0x2c>
		voltages[i] = handle->last_voltages[i];
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	4413      	add	r3, r2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	3202      	adds	r2, #2
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	440a      	add	r2, r1
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++) {
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b03      	cmp	r3, #3
 8001094:	ddee      	ble.n	8001074 <LTC2990_Get_Voltage+0x10>
	}
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LTC2990_Enable_All_Voltages>:


inline int8_t LTC2990_Enable_All_Voltages(LTC2990_Handle_t *handle) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	return LTC2990_Set_Mode(handle, ENABLE_ALL, TEMP_MEAS_MODE_MASK);
 80010ac:	2218      	movs	r2, #24
 80010ae:	2118      	movs	r1, #24
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f805 	bl	80010c0 <LTC2990_Set_Mode>
 80010b6:	4603      	mov	r3, r0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <LTC2990_Set_Mode>:


int8_t LTC2990_Set_Mode(LTC2990_Handle_t *handle, uint8_t bits_to_set, uint8_t bits_to_clear) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
 80010cc:	4613      	mov	r3, r2
 80010ce:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_data;
	int8_t ack;

	// Read current CONTROL_REG
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_data);
 80010d0:	f107 030e 	add.w	r3, r7, #14
 80010d4:	461a      	mov	r2, r3
 80010d6:	2101      	movs	r1, #1
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f901 	bl	80012e0 <LTC2990_Read_Register>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <LTC2990_Set_Mode+0x36>
		CDC_Transmit_Print("Failed to Read_Register in Set_Mode\n");
 80010ea:	4815      	ldr	r0, [pc, #84]	@ (8001140 <LTC2990_Set_Mode+0x80>)
 80010ec:	f000 f952 	bl	8001394 <CDC_Transmit_Print>
		return ack;
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f4:	e01f      	b.n	8001136 <LTC2990_Set_Mode+0x76>
	}

	//Modify bits
	reg_data &= ~bits_to_clear;
 80010f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	b25a      	sxtb	r2, r3
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	4013      	ands	r3, r2
 8001104:	b25b      	sxtb	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	73bb      	strb	r3, [r7, #14]
	reg_data |= bits_to_set;
 800110a:	7bba      	ldrb	r2, [r7, #14]
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	4313      	orrs	r3, r2
 8001110:	b2db      	uxtb	r3, r3
 8001112:	73bb      	strb	r3, [r7, #14]

	//Write back to CONTROL_REG
	ack = LTC2990_Write_Register(handle, CONTROL_REG, reg_data);
 8001114:	7bbb      	ldrb	r3, [r7, #14]
 8001116:	461a      	mov	r2, r3
 8001118:	2101      	movs	r1, #1
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f90c 	bl	8001338 <LTC2990_Write_Register>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 8001124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <LTC2990_Set_Mode+0x72>
		CDC_Transmit_Print("Failed to Write_Register in Set_Mode\n");
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <LTC2990_Set_Mode+0x84>)
 800112e:	f000 f931 	bl	8001394 <CDC_Transmit_Print>
	}
	return ack;
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	08011190 	.word	0x08011190
 8001144:	080111b8 	.word	0x080111b8

08001148 <LTC2990_Trigger_Conversion>:

int8_t LTC2990_Trigger_Conversion(LTC2990_Handle_t *handle) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	return LTC2990_Write_Register(handle, TRIGGER_REG, 0x00);
 8001150:	2200      	movs	r2, #0
 8001152:	2102      	movs	r1, #2
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f8ef 	bl	8001338 <LTC2990_Write_Register>
 800115a:	4603      	mov	r3, r0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <LTC2990_ADC_Read_New_Data>:


uint8_t LTC2990_ADC_Read_New_Data(LTC2990_Handle_t *handle, uint8_t msb_register_address, int16_t* adc_code, int8_t* data_valid) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	460b      	mov	r3, r1
 8001172:	72fb      	strb	r3, [r7, #11]
	uint16_t timeout = TIMEOUT;
 8001174:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001178:	83fb      	strh	r3, [r7, #30]
	int8_t ack;
	uint8_t status;
	uint8_t status_bit = (msb_register_address / 2) - 1;
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	085b      	lsrs	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	3b01      	subs	r3, #1
 8001182:	777b      	strb	r3, [r7, #29]

	// Wait for new data
	while (--timeout) {
 8001184:	e01a      	b.n	80011bc <LTC2990_ADC_Read_New_Data+0x58>
		ack = LTC2990_Read_Register(handle, STATUS_REG, &status);
 8001186:	f107 0319 	add.w	r3, r7, #25
 800118a:	461a      	mov	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 f8a6 	bl	80012e0 <LTC2990_Read_Register>
 8001194:	4603      	mov	r3, r0
 8001196:	773b      	strb	r3, [r7, #28]

		if (ack != 0) {
 8001198:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <LTC2990_ADC_Read_New_Data+0x40>
			return ack;
 80011a0:	7f3b      	ldrb	r3, [r7, #28]
 80011a2:	e05b      	b.n	800125c <LTC2990_ADC_Read_New_Data+0xf8>
		}

		if (((status >> status_bit) & 0x01) == 1) {
 80011a4:	7e7b      	ldrb	r3, [r7, #25]
 80011a6:	461a      	mov	r2, r3
 80011a8:	7f7b      	ldrb	r3, [r7, #29]
 80011aa:	fa42 f303 	asr.w	r3, r2, r3
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d109      	bne.n	80011ca <LTC2990_ADC_Read_New_Data+0x66>
			break;
		}

		//
		HAL_Delay(1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 fe82 	bl	8001ec0 <HAL_Delay>
	while (--timeout) {
 80011bc:	8bfb      	ldrh	r3, [r7, #30]
 80011be:	3b01      	subs	r3, #1
 80011c0:	83fb      	strh	r3, [r7, #30]
 80011c2:	8bfb      	ldrh	r3, [r7, #30]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1de      	bne.n	8001186 <LTC2990_ADC_Read_New_Data+0x22>
 80011c8:	e000      	b.n	80011cc <LTC2990_ADC_Read_New_Data+0x68>
			break;
 80011ca:	bf00      	nop
	}


	if (timeout == 0) {
 80011cc:	8bfb      	ldrh	r3, [r7, #30]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d104      	bne.n	80011dc <LTC2990_ADC_Read_New_Data+0x78>
		CDC_Transmit_Print("LTC2990 TIMED OUT \n");
 80011d2:	4824      	ldr	r0, [pc, #144]	@ (8001264 <LTC2990_ADC_Read_New_Data+0x100>)
 80011d4:	f000 f8de 	bl	8001394 <CDC_Transmit_Print>
		return 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	e03f      	b.n	800125c <LTC2990_ADC_Read_New_Data+0xf8>
	}

	//Read ADC data
	uint8_t msb;
	uint8_t lsb;
	ack = LTC2990_Read_Register(handle, msb_register_address, &msb);
 80011dc:	f107 0218 	add.w	r2, r7, #24
 80011e0:	7afb      	ldrb	r3, [r7, #11]
 80011e2:	4619      	mov	r1, r3
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 f87b 	bl	80012e0 <LTC2990_Read_Register>
 80011ea:	4603      	mov	r3, r0
 80011ec:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 80011ee:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <LTC2990_ADC_Read_New_Data+0x96>
		return ack;
 80011f6:	7f3b      	ldrb	r3, [r7, #28]
 80011f8:	e030      	b.n	800125c <LTC2990_ADC_Read_New_Data+0xf8>
	}

	ack = LTC2990_Read_Register(handle, msb_register_address + 1, &lsb);
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	3301      	adds	r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f107 0217 	add.w	r2, r7, #23
 8001204:	4619      	mov	r1, r3
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f000 f86a 	bl	80012e0 <LTC2990_Read_Register>
 800120c:	4603      	mov	r3, r0
 800120e:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 8001210:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <LTC2990_ADC_Read_New_Data+0xb8>
		return ack;
 8001218:	7f3b      	ldrb	r3, [r7, #28]
 800121a:	e01f      	b.n	800125c <LTC2990_ADC_Read_New_Data+0xf8>
	}


	uint16_t code = ((uint16_t)msb << 8) | lsb;
 800121c:	7e3b      	ldrb	r3, [r7, #24]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b21b      	sxth	r3, r3
 800122a:	837b      	strh	r3, [r7, #26]
	*data_valid = (code >> 15) & 0x01;  // Data valid bit
 800122c:	8b7b      	ldrh	r3, [r7, #26]
 800122e:	0bdb      	lsrs	r3, r3, #15
 8001230:	b29b      	uxth	r3, r3
 8001232:	b25b      	sxtb	r3, r3
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	b25a      	sxtb	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	701a      	strb	r2, [r3, #0]
	*adc_code = code & 0x3FFF;
 800123e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001242:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001246:	b21a      	sxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	801a      	strh	r2, [r3, #0]

	return (*data_valid == 1) ? 0 : 1;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f993 3000 	ldrsb.w	r3, [r3]
 8001252:	2b01      	cmp	r3, #1
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
	//In the actual code, it should NEVER reach this point, as this would be the timeout
	//ran out but got messed up
	CDC_Transmit_Print("the thing I said wouldn't happen \n");
	return 2;

}
 800125c:	4618      	mov	r0, r3
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	080111e0 	.word	0x080111e0

08001268 <LTC2990_Code_To_Single_Ended_Voltage>:

float LTC2990_Code_To_Single_Ended_Voltage(LTC2990_Handle_t *handle, uint16_t adc_code) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 8001274:	2301      	movs	r3, #1
 8001276:	81fb      	strh	r3, [r7, #14]

	if(adc_code & 0x4000) { //If the code is negative
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00a      	beq.n	8001298 <LTC2990_Code_To_Single_Ended_Voltage+0x30>
		adc_code = (adc_code ^ 0x7FFF) + 1;// Two's compliment
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	f483 43ff 	eor.w	r3, r3, #32640	@ 0x7f80
 8001288:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 800128c:	b29b      	uxth	r3, r3
 800128e:	3301      	adds	r3, #1
 8001290:	807b      	strh	r3, [r7, #2]
		sign = -1;
 8001292:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001296:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800129e:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * SINGLE_ENDED_LSB * sign;
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012aa:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80012dc <LTC2990_Code_To_Single_Ended_Voltage+0x74>
 80012ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c2:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	ee07 3a90 	vmov	s15, r3
}
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	39a00000 	.word	0x39a00000

080012e0 <LTC2990_Read_Register>:

int8_t LTC2990_Read_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t* data) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af04      	add	r7, sp, #16
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	460b      	mov	r3, r1
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(handle->hi2c, handle->i2c_address << 1, reg_address, 1, data, 1, TIMEOUT);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	791b      	ldrb	r3, [r3, #4]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	b299      	uxth	r1, r3
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	2301      	movs	r3, #1
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	f001 fce1 	bl	8002cd4 <HAL_I2C_Mem_Read>
 8001312:	4603      	mov	r3, r0
 8001314:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK) {
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <LTC2990_Read_Register+0x40>
		return 0;
 800131c:	2300      	movs	r3, #0
 800131e:	e005      	b.n	800132c <LTC2990_Read_Register+0x4c>
	}
	CDC_Transmit_Print("I2C Read Register failed, status: %d\n", status);
 8001320:	7dfb      	ldrb	r3, [r7, #23]
 8001322:	4619      	mov	r1, r3
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <LTC2990_Read_Register+0x54>)
 8001326:	f000 f835 	bl	8001394 <CDC_Transmit_Print>
	return 1;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	080111f4 	.word	0x080111f4

08001338 <LTC2990_Write_Register>:
//	}
//	return 0;
//}


int8_t LTC2990_Write_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t data) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af04      	add	r7, sp, #16
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
 8001344:	4613      	mov	r3, r2
 8001346:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(handle->hi2c, handle->i2c_address << 1, (uint16_t)reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, TIMEOUT);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	b299      	uxth	r1, r3
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	b29a      	uxth	r2, r3
 8001358:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	2301      	movs	r3, #1
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	1cbb      	adds	r3, r7, #2
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	f001 fba0 	bl	8002aac <HAL_I2C_Mem_Write>
 800136c:	4603      	mov	r3, r0
 800136e:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK) {
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <LTC2990_Write_Register+0x42>
		return 0;
 8001376:	2300      	movs	r3, #0
 8001378:	e005      	b.n	8001386 <LTC2990_Write_Register+0x4e>
	}
	CDC_Transmit_Print("I2C Write Register failed, status: %d\n", status);
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	4619      	mov	r1, r3
 800137e:	4804      	ldr	r0, [pc, #16]	@ (8001390 <LTC2990_Write_Register+0x58>)
 8001380:	f000 f808 	bl	8001394 <CDC_Transmit_Print>

	return 1;
 8001384:	2301      	movs	r3, #1
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	0801121c 	.word	0x0801121c

08001394 <CDC_Transmit_Print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CDC_Transmit_Print(const char *format, ...)
{
 8001394:	b40f      	push	{r0, r1, r2, r3}
 8001396:	b580      	push	{r7, lr}
 8001398:	b09c      	sub	sp, #112	@ 0x70
 800139a:	af00      	add	r7, sp, #0
  char buf[PRINT_BUFFER_SIZE];
  va_list args;
  va_start(args, format);
 800139c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013a0:	607b      	str	r3, [r7, #4]
  int n = vsprintf(buf, format, args);
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00d fcf6 	bl	800ed9c <vsiprintf>
 80013b0:	66f8      	str	r0, [r7, #108]	@ 0x6c
  va_end(args);
  CDC_Transmit_FS(buf, n);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00c fb73 	bl	800daa4 <CDC_Transmit_FS>
}
 80013be:	bf00      	nop
 80013c0:	3770      	adds	r7, #112	@ 0x70
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013c8:	b004      	add	sp, #16
 80013ca:	4770      	bx	lr

080013cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d0:	f000 fd3f 	bl	8001e52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d4:	f000 f84a 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d8:	f000 f95e 	bl	8001698 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 80013dc:	f000 f888 	bl	80014f0 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 80013e0:	f000 f8ce 	bl	8001580 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80013e4:	f000 f90c 	bl	8001600 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_FDCAN_Start(&hfdcan2);
 80013e8:	4814      	ldr	r0, [pc, #80]	@ (800143c <main+0x70>)
 80013ea:	f000 ffc5 	bl	8002378 <HAL_FDCAN_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013ee:	f009 fafb 	bl	800a9e8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorQueue */
  sensorQueueHandle = osMessageQueueNew(16, sizeof(uint16_t), &sensorQueue_attributes);
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <main+0x74>)
 80013f4:	2102      	movs	r1, #2
 80013f6:	2010      	movs	r0, #16
 80013f8:	f009 fbee 	bl	800abd8 <osMessageQueueNew>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a11      	ldr	r2, [pc, #68]	@ (8001444 <main+0x78>)
 8001400:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED */
  blinkLEDHandle = osThreadNew(StartBlink, NULL, &blinkLED_attributes);
 8001402:	4a11      	ldr	r2, [pc, #68]	@ (8001448 <main+0x7c>)
 8001404:	2100      	movs	r1, #0
 8001406:	4811      	ldr	r0, [pc, #68]	@ (800144c <main+0x80>)
 8001408:	f009 fb38 	bl	800aa7c <osThreadNew>
 800140c:	4603      	mov	r3, r0
 800140e:	4a10      	ldr	r2, [pc, #64]	@ (8001450 <main+0x84>)
 8001410:	6013      	str	r3, [r2, #0]

  /* creation of readVoltageTask */
  readVoltageTaskHandle = osThreadNew(startReadVoltageTask, NULL, &readVoltageTask_attributes);
 8001412:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <main+0x88>)
 8001414:	2100      	movs	r1, #0
 8001416:	4810      	ldr	r0, [pc, #64]	@ (8001458 <main+0x8c>)
 8001418:	f009 fb30 	bl	800aa7c <osThreadNew>
 800141c:	4603      	mov	r3, r0
 800141e:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <main+0x90>)
 8001420:	6013      	str	r3, [r2, #0]

  /* creation of sendMessage */
  sendMessageHandle = osThreadNew(StartSendMessage, NULL, &sendMessage_attributes);
 8001422:	4a0f      	ldr	r2, [pc, #60]	@ (8001460 <main+0x94>)
 8001424:	2100      	movs	r1, #0
 8001426:	480f      	ldr	r0, [pc, #60]	@ (8001464 <main+0x98>)
 8001428:	f009 fb28 	bl	800aa7c <osThreadNew>
 800142c:	4603      	mov	r3, r0
 800142e:	4a0e      	ldr	r2, [pc, #56]	@ (8001468 <main+0x9c>)
 8001430:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001432:	f009 fafd 	bl	800aa30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001436:	bf00      	nop
 8001438:	e7fd      	b.n	8001436 <main+0x6a>
 800143a:	bf00      	nop
 800143c:	2000036c 	.word	0x2000036c
 8001440:	08011374 	.word	0x08011374
 8001444:	200004c4 	.word	0x200004c4
 8001448:	08011308 	.word	0x08011308
 800144c:	08001759 	.word	0x08001759
 8001450:	200004b8 	.word	0x200004b8
 8001454:	0801132c 	.word	0x0801132c
 8001458:	0800177d 	.word	0x0800177d
 800145c:	200004bc 	.word	0x200004bc
 8001460:	08011350 	.word	0x08011350
 8001464:	0800180d 	.word	0x0800180d
 8001468:	200004c0 	.word	0x200004c0

0800146c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b094      	sub	sp, #80	@ 0x50
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	2238      	movs	r2, #56	@ 0x38
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f00d fc98 	bl	800edb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001492:	f003 fd93 	bl	8004fbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48;
 8001496:	2322      	movs	r3, #34	@ 0x22
 8001498:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a0:	2340      	movs	r3, #64	@ 0x40
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014a4:	2301      	movs	r3, #1
 80014a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 fe37 	bl	8005124 <HAL_RCC_OscConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80014bc:	f000 f9f0 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014c0:	230f      	movs	r3, #15
 80014c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 f935 	bl	8005748 <HAL_RCC_ClockConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80014e4:	f000 f9dc 	bl	80018a0 <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3750      	adds	r7, #80	@ 0x50
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <MX_FDCAN2_Init>:
 * @brief FDCAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 80014f6:	4a21      	ldr	r2, [pc, #132]	@ (800157c <MX_FDCAN2_Init+0x8c>)
 80014f8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80014fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001500:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 8001502:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001506:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 8001510:	2200      	movs	r2, #0
 8001512:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001514:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 8001516:	2200      	movs	r2, #0
 8001518:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800151a:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 800151c:	2200      	movs	r2, #0
 800151e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8001520:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 8001522:	2201      	movs	r2, #1
 8001524:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 8001526:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 8001528:	2210      	movs	r2, #16
 800152a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 800152e:	223f      	movs	r2, #63	@ 0x3f
 8001530:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 8001534:	2210      	movs	r2, #16
 8001536:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 800153a:	2201      	movs	r2, #1
 800153c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 8001540:	2204      	movs	r2, #4
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 8001546:	220d      	movs	r2, #13
 8001548:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 800154c:	2202      	movs	r2, #2
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 8001552:	2201      	movs	r2, #1
 8001554:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 8001556:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 8001558:	2201      	movs	r2, #1
 800155a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 800155e:	2200      	movs	r2, #0
 8001560:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_FDCAN2_Init+0x88>)
 8001564:	f000 fdae 	bl	80020c4 <HAL_FDCAN_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 800156e:	f000 f997 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000036c 	.word	0x2000036c
 800157c:	40006800 	.word	0x40006800

08001580 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <MX_I2C2_Init+0x74>)
 8001586:	4a1c      	ldr	r2, [pc, #112]	@ (80015f8 <MX_I2C2_Init+0x78>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <MX_I2C2_Init+0x74>)
 800158c:	4a1b      	ldr	r2, [pc, #108]	@ (80015fc <MX_I2C2_Init+0x7c>)
 800158e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001590:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <MX_I2C2_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001596:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <MX_I2C2_Init+0x74>)
 8001598:	2201      	movs	r2, #1
 800159a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <MX_I2C2_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <MX_I2C2_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <MX_I2C2_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <MX_I2C2_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <MX_I2C2_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015ba:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <MX_I2C2_Init+0x74>)
 80015bc:	f001 f9da 	bl	8002974 <HAL_I2C_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015c6:	f000 f96b 	bl	80018a0 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ca:	2100      	movs	r1, #0
 80015cc:	4809      	ldr	r0, [pc, #36]	@ (80015f4 <MX_I2C2_Init+0x74>)
 80015ce:	f001 ff5d 	bl	800348c <HAL_I2CEx_ConfigAnalogFilter>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80015d8:	f000 f962 	bl	80018a0 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_I2C2_Init+0x74>)
 80015e0:	f001 ff9f 	bl	8003522 <HAL_I2CEx_ConfigDigitalFilter>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80015ea:	f000 f959 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200003d0 	.word	0x200003d0
 80015f8:	40005800 	.word	0x40005800
 80015fc:	00503d58 	.word	0x00503d58

08001600 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 8001606:	4a23      	ldr	r2, [pc, #140]	@ (8001694 <MX_USART2_UART_Init+0x94>)
 8001608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800160a:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800163c:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001642:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001648:	4811      	ldr	r0, [pc, #68]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 800164a:	f005 f841 	bl	80066d0 <HAL_UART_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001654:	f000 f924 	bl	80018a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001658:	2100      	movs	r1, #0
 800165a:	480d      	ldr	r0, [pc, #52]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 800165c:	f005 fddc 	bl	8007218 <HAL_UARTEx_SetTxFifoThreshold>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001666:	f000 f91b 	bl	80018a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	4808      	ldr	r0, [pc, #32]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 800166e:	f005 fe11 	bl	8007294 <HAL_UARTEx_SetRxFifoThreshold>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001678:	f000 f912 	bl	80018a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	@ (8001690 <MX_USART2_UART_Init+0x90>)
 800167e:	f005 fd92 	bl	80071a6 <HAL_UARTEx_DisableFifoMode>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001688:	f000 f90a 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000424 	.word	0x20000424
 8001694:	40004400 	.word	0x40004400

08001698 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	4b27      	ldr	r3, [pc, #156]	@ (800174c <MX_GPIO_Init+0xb4>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	4a26      	ldr	r2, [pc, #152]	@ (800174c <MX_GPIO_Init+0xb4>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ba:	4b24      	ldr	r3, [pc, #144]	@ (800174c <MX_GPIO_Init+0xb4>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c6:	4b21      	ldr	r3, [pc, #132]	@ (800174c <MX_GPIO_Init+0xb4>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	4a20      	ldr	r2, [pc, #128]	@ (800174c <MX_GPIO_Init+0xb4>)
 80016cc:	f043 0320 	orr.w	r3, r3, #32
 80016d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d2:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <MX_GPIO_Init+0xb4>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <MX_GPIO_Init+0xb4>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	4a1a      	ldr	r2, [pc, #104]	@ (800174c <MX_GPIO_Init+0xb4>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <MX_GPIO_Init+0xb4>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <MX_GPIO_Init+0xb4>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	4a14      	ldr	r2, [pc, #80]	@ (800174c <MX_GPIO_Init+0xb4>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <MX_GPIO_Init+0xb4>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin | BACKLIGHT_LEDS_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001714:	480e      	ldr	r0, [pc, #56]	@ (8001750 <MX_GPIO_Init+0xb8>)
 8001716:	f001 f8fb 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRONT_LED_Pin BACKLIGHT_LEDS_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin | BACKLIGHT_LEDS_Pin;
 800171a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4807      	ldr	r0, [pc, #28]	@ (8001750 <MX_GPIO_Init+0xb8>)
 8001734:	f000 ff6a 	bl	800260c <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <MX_GPIO_Init+0xbc>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <MX_GPIO_Init+0xbc>)
 800173e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001742:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	@ 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	48000400 	.word	0x48000400
 8001754:	40010000 	.word	0x40010000

08001758 <StartBlink>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8001760:	f00c f8e2 	bl	800d928 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 8001764:	2120      	movs	r1, #32
 8001766:	4804      	ldr	r0, [pc, #16]	@ (8001778 <StartBlink+0x20>)
 8001768:	f001 f8ea 	bl	8002940 <HAL_GPIO_TogglePin>
    osDelay(100);
 800176c:	2064      	movs	r0, #100	@ 0x64
 800176e:	f009 fa18 	bl	800aba2 <osDelay>
    HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 8001772:	bf00      	nop
 8001774:	e7f6      	b.n	8001764 <StartBlink+0xc>
 8001776:	bf00      	nop
 8001778:	48000400 	.word	0x48000400

0800177c <startReadVoltageTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startReadVoltageTask */
void startReadVoltageTask(void *argument)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	@ 0x30
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadVoltageTask */
  MX_USB_Device_Init();
 8001784:	f00c f8d0 	bl	800d928 <MX_USB_Device_Init>
  LTC2990_Init(&LTC2990_Handle, &hi2c2);
 8001788:	491c      	ldr	r1, [pc, #112]	@ (80017fc <startReadVoltageTask+0x80>)
 800178a:	481d      	ldr	r0, [pc, #116]	@ (8001800 <startReadVoltageTask+0x84>)
 800178c:	f7ff fbac 	bl	8000ee8 <LTC2990_Init>
  static const float multipliers[4] = {28.0f / 10.0f, 25.0f / 10.0f, 25.0f / 10.0f, 25.0f / 10.0f};
  /* Infinite loop */
  for (;;)
  {
	LTC2990_Step(&LTC2990_Handle);
 8001790:	481b      	ldr	r0, [pc, #108]	@ (8001800 <startReadVoltageTask+0x84>)
 8001792:	f7ff fbfb 	bl	8000f8c <LTC2990_Step>
	float raw[4];
	LTC2990_Get_Voltage(&LTC2990_Handle, raw);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4818      	ldr	r0, [pc, #96]	@ (8001800 <startReadVoltageTask+0x84>)
 800179e:	f7ff fc61 	bl	8001064 <LTC2990_Get_Voltage>
	instrumentationPayload_t payload;
	for (int i = 0; i < 4; i++) {
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017a6:	e018      	b.n	80017da <startReadVoltageTask+0x5e>
	  payload.voltages[i] = raw[i] * multipliers[i];
 80017a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	3330      	adds	r3, #48	@ 0x30
 80017ae:	443b      	add	r3, r7
 80017b0:	3b14      	subs	r3, #20
 80017b2:	ed93 7a00 	vldr	s14, [r3]
 80017b6:	4a13      	ldr	r2, [pc, #76]	@ (8001804 <startReadVoltageTask+0x88>)
 80017b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	3330      	adds	r3, #48	@ 0x30
 80017cc:	443b      	add	r3, r7
 80017ce:	3b24      	subs	r3, #36	@ 0x24
 80017d0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 4; i++) {
 80017d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d6:	3301      	adds	r3, #1
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	2b03      	cmp	r3, #3
 80017de:	dde3      	ble.n	80017a8 <startReadVoltageTask+0x2c>
	}
	osMessageQueuePut(sensorQueueHandle, &payload, 0, osWaitForever);
 80017e0:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <startReadVoltageTask+0x8c>)
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	f107 010c 	add.w	r1, r7, #12
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ec:	2200      	movs	r2, #0
 80017ee:	f009 fa67 	bl	800acc0 <osMessageQueuePut>
	osDelay(50);
 80017f2:	2032      	movs	r0, #50	@ 0x32
 80017f4:	f009 f9d5 	bl	800aba2 <osDelay>
  {
 80017f8:	e7ca      	b.n	8001790 <startReadVoltageTask+0x14>
 80017fa:	bf00      	nop
 80017fc:	200003d0 	.word	0x200003d0
 8001800:	200004c8 	.word	0x200004c8
 8001804:	0801138c 	.word	0x0801138c
 8001808:	200004c4 	.word	0x200004c4

0800180c <StartSendMessage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendMessage */
void StartSendMessage(void *argument)
{
 800180c:	b5b0      	push	{r4, r5, r7, lr}
 800180e:	b094      	sub	sp, #80	@ 0x50
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendMessage */
  /* Infinite loop */
  instrumentationPayload_t payload;
  uint8_t txBuf[sizeof(instrumentationPayload_t)];
  FDCAN_TxHeaderTypeDef txHeader = {
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <StartSendMessage+0x60>)
 8001816:	f107 040c 	add.w	r4, r7, #12
 800181a:	461d      	mov	r5, r3
 800181c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	6023      	str	r3, [r4, #0]
	.TxEventFifoControl   = FDCAN_STORE_TX_EVENTS,
	.MessageMarker        = 0
  };
  for (;;)
  {
	osMessageQueueGet(sensorQueueHandle, &payload, NULL, osWaitForever);
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <StartSendMessage+0x64>)
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001830:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001834:	2200      	movs	r2, #0
 8001836:	f009 faa3 	bl	800ad80 <osMessageQueueGet>
	memcpy(txBuf, &payload, sizeof(payload));
 800183a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800183e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, txBuf) != HAL_OK) {
 8001848:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	4808      	ldr	r0, [pc, #32]	@ (8001874 <StartSendMessage+0x68>)
 8001854:	f000 fdb8 	bl	80023c8 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <StartSendMessage+0x58>
	  CDC_Transmit_Print("Error!\r\n");
 800185e:	4806      	ldr	r0, [pc, #24]	@ (8001878 <StartSendMessage+0x6c>)
 8001860:	f7ff fd98 	bl	8001394 <CDC_Transmit_Print>
    }
    osDelay(100);
 8001864:	2064      	movs	r0, #100	@ 0x64
 8001866:	f009 f99c 	bl	800aba2 <osDelay>
	osMessageQueueGet(sensorQueueHandle, &payload, NULL, osWaitForever);
 800186a:	e7dd      	b.n	8001828 <StartSendMessage+0x1c>
 800186c:	08011284 	.word	0x08011284
 8001870:	200004c4 	.word	0x200004c4
 8001874:	2000036c 	.word	0x2000036c
 8001878:	08011278 	.word	0x08011278

0800187c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d101      	bne.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800188e:	f000 faf9 	bl	8001e84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40012c00 	.word	0x40012c00

080018a0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <Error_Handler+0x8>

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <HAL_MspInit+0x50>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b6:	4a11      	ldr	r2, [pc, #68]	@ (80018fc <HAL_MspInit+0x50>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80018be:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <HAL_MspInit+0x50>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <HAL_MspInit+0x50>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <HAL_MspInit+0x50>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_MspInit+0x50>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	210f      	movs	r1, #15
 80018e6:	f06f 0001 	mvn.w	r0, #1
 80018ea:	f000 fbc3 	bl	8002074 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018ee:	f003 fc09 	bl	8005104 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b09e      	sub	sp, #120	@ 0x78
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2250      	movs	r2, #80	@ 0x50
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f00d fa45 	bl	800edb0 <memset>
  if(hfdcan->Instance==FDCAN2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a20      	ldr	r2, [pc, #128]	@ (80019ac <HAL_FDCAN_MspInit+0xac>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d138      	bne.n	80019a2 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001934:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800193a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4618      	mov	r0, r3
 8001942:	f004 f94f 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800194c:	f7ff ffa8 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001950:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <HAL_FDCAN_MspInit+0xb0>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	4a16      	ldr	r2, [pc, #88]	@ (80019b0 <HAL_FDCAN_MspInit+0xb0>)
 8001956:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800195a:	6593      	str	r3, [r2, #88]	@ 0x58
 800195c:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <HAL_FDCAN_MspInit+0xb0>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_FDCAN_MspInit+0xb0>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196c:	4a10      	ldr	r2, [pc, #64]	@ (80019b0 <HAL_FDCAN_MspInit+0xb0>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001974:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <HAL_FDCAN_MspInit+0xb0>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001980:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001984:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001992:	2309      	movs	r3, #9
 8001994:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <HAL_FDCAN_MspInit+0xb4>)
 800199e:	f000 fe35 	bl	800260c <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 80019a2:	bf00      	nop
 80019a4:	3778      	adds	r7, #120	@ 0x78
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40006800 	.word	0x40006800
 80019b0:	40021000 	.word	0x40021000
 80019b4:	48000400 	.word	0x48000400

080019b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b09e      	sub	sp, #120	@ 0x78
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2250      	movs	r2, #80	@ 0x50
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f00d f9e9 	bl	800edb0 <memset>
  if(hi2c->Instance==I2C2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a60 <HAL_I2C_MspInit+0xa8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d137      	bne.n	8001a58 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 f8f5 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a00:	f7ff ff4e 	bl	80018a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_I2C_MspInit+0xac>)
 8001a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a08:	4a16      	ldr	r2, [pc, #88]	@ (8001a64 <HAL_I2C_MspInit+0xac>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <HAL_I2C_MspInit+0xac>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a22:	2312      	movs	r3, #18
 8001a24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3c:	f000 fde6 	bl	800260c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <HAL_I2C_MspInit+0xac>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a44:	4a07      	ldr	r2, [pc, #28]	@ (8001a64 <HAL_I2C_MspInit+0xac>)
 8001a46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_I2C_MspInit+0xac>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a58:	bf00      	nop
 8001a5a:	3778      	adds	r7, #120	@ 0x78
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40005800 	.word	0x40005800
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b09e      	sub	sp, #120	@ 0x78
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2250      	movs	r2, #80	@ 0x50
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00d f991 	bl	800edb0 <memset>
  if(huart->Instance==USART2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1f      	ldr	r2, [pc, #124]	@ (8001b10 <HAL_UART_MspInit+0xa8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d136      	bne.n	8001b06 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 f89d 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ab0:	f7ff fef6 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab4:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <HAL_UART_MspInit+0xac>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	4a16      	ldr	r2, [pc, #88]	@ (8001b14 <HAL_UART_MspInit+0xac>)
 8001aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <HAL_UART_MspInit+0xac>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <HAL_UART_MspInit+0xac>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	4a10      	ldr	r2, [pc, #64]	@ (8001b14 <HAL_UART_MspInit+0xac>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <HAL_UART_MspInit+0xac>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af4:	2307      	movs	r3, #7
 8001af6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001afc:	4619      	mov	r1, r3
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b02:	f000 fd83 	bl	800260c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b06:	bf00      	nop
 8001b08:	3778      	adds	r7, #120	@ 0x78
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40004400 	.word	0x40004400
 8001b14:	40021000 	.word	0x40021000

08001b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	@ 0x30
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b28:	4b2c      	ldr	r3, [pc, #176]	@ (8001bdc <HAL_InitTick+0xc4>)
 8001b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001bdc <HAL_InitTick+0xc4>)
 8001b2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b32:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b34:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <HAL_InitTick+0xc4>)
 8001b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b40:	f107 020c 	add.w	r2, r7, #12
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 ffd2 	bl	8005af4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b50:	f003 ffba 	bl	8005ac8 <HAL_RCC_GetPCLK2Freq>
 8001b54:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b58:	4a21      	ldr	r2, [pc, #132]	@ (8001be0 <HAL_InitTick+0xc8>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9b      	lsrs	r3, r3, #18
 8001b60:	3b01      	subs	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <HAL_InitTick+0xcc>)
 8001b66:	4a20      	ldr	r2, [pc, #128]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <HAL_InitTick+0xcc>)
 8001b6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b72:	4a1c      	ldr	r2, [pc, #112]	@ (8001be4 <HAL_InitTick+0xcc>)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <HAL_InitTick+0xcc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7e:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <HAL_InitTick+0xcc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001b84:	4817      	ldr	r0, [pc, #92]	@ (8001be4 <HAL_InitTick+0xcc>)
 8001b86:	f004 fa69 	bl	800605c <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d11b      	bne.n	8001bd0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b98:	4812      	ldr	r0, [pc, #72]	@ (8001be4 <HAL_InitTick+0xcc>)
 8001b9a:	f004 fac1 	bl	8006120 <HAL_TIM_Base_Start_IT>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d111      	bne.n	8001bd0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bac:	2019      	movs	r0, #25
 8001bae:	f000 fa7b 	bl	80020a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d808      	bhi.n	8001bca <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	2019      	movs	r0, #25
 8001bbe:	f000 fa59 	bl	8002074 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <HAL_InitTick+0xd4>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	e002      	b.n	8001bd0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3730      	adds	r7, #48	@ 0x30
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	431bde83 	.word	0x431bde83
 8001be4:	200004e0 	.word	0x200004e0
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	20000004 	.word	0x20000004

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <NMI_Handler+0x4>

08001bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <HardFault_Handler+0x4>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <MemManage_Handler+0x4>

08001c08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <BusFault_Handler+0x4>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <UsageFault_Handler+0x4>

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <USB_LP_IRQHandler+0x10>)
 8001c2e:	f001 fdb4 	bl	800379a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200071a0 	.word	0x200071a0

08001c3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c40:	4802      	ldr	r0, [pc, #8]	@ (8001c4c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c42:	f004 fadd 	bl	8006200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200004e0 	.word	0x200004e0

08001c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return 1;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_kill>:

int _kill(int pid, int sig)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c6a:	f00d f903 	bl	800ee74 <__errno>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2216      	movs	r2, #22
 8001c72:	601a      	str	r2, [r3, #0]
  return -1;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_exit>:

void _exit (int status)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ffe7 	bl	8001c60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c92:	bf00      	nop
 8001c94:	e7fd      	b.n	8001c92 <_exit+0x12>

08001c96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e00a      	b.n	8001cbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca8:	f3af 8000 	nop.w
 8001cac:	4601      	mov	r1, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	60ba      	str	r2, [r7, #8]
 8001cb4:	b2ca      	uxtb	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dbf0      	blt.n	8001ca8 <_read+0x12>
  }

  return len;
 8001cc6:	687b      	ldr	r3, [r7, #4]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e009      	b.n	8001cf6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	60ba      	str	r2, [r7, #8]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dbf1      	blt.n	8001ce2 <_write+0x12>
  }
  return len;
 8001cfe:	687b      	ldr	r3, [r7, #4]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_close>:

int _close(int file)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d30:	605a      	str	r2, [r3, #4]
  return 0;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_isatty>:

int _isatty(int file)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d48:	2301      	movs	r3, #1
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b085      	sub	sp, #20
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d78:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <_sbrk+0x5c>)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <_sbrk+0x60>)
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d84:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <_sbrk+0x64>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <_sbrk+0x68>)
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d207      	bcs.n	8001db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da0:	f00d f868 	bl	800ee74 <__errno>
 8001da4:	4603      	mov	r3, r0
 8001da6:	220c      	movs	r2, #12
 8001da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dae:	e009      	b.n	8001dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db6:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a05      	ldr	r2, [pc, #20]	@ (8001dd4 <_sbrk+0x64>)
 8001dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	2001c000 	.word	0x2001c000
 8001dd0:	00000400 	.word	0x00000400
 8001dd4:	2000052c 	.word	0x2000052c
 8001dd8:	200077e8 	.word	0x200077e8

08001ddc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <SystemInit+0x20>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de6:	4a05      	ldr	r2, [pc, #20]	@ (8001dfc <SystemInit+0x20>)
 8001de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e00:	480d      	ldr	r0, [pc, #52]	@ (8001e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e04:	f7ff ffea 	bl	8001ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e08:	480c      	ldr	r0, [pc, #48]	@ (8001e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e0a:	490d      	ldr	r1, [pc, #52]	@ (8001e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <LoopForever+0xe>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e20:	4c0a      	ldr	r4, [pc, #40]	@ (8001e4c <LoopForever+0x16>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f00d f827 	bl	800ee80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e32:	f7ff facb 	bl	80013cc <main>

08001e36 <LoopForever>:

LoopForever:
    b LoopForever
 8001e36:	e7fe      	b.n	8001e36 <LoopForever>
  ldr   r0, =_estack
 8001e38:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001e44:	08011770 	.word	0x08011770
  ldr r2, =_sbss
 8001e48:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001e4c:	200077e8 	.word	0x200077e8

08001e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_2_IRQHandler>

08001e52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 f8fe 	bl	800205e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e62:	200f      	movs	r0, #15
 8001e64:	f7ff fe58 	bl	8001b18 <HAL_InitTick>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	71fb      	strb	r3, [r7, #7]
 8001e72:	e001      	b.n	8001e78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e74:	f7ff fd1a 	bl	80018ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e78:	79fb      	ldrb	r3, [r7, #7]

}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <HAL_IncTick+0x1c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <HAL_IncTick+0x20>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a03      	ldr	r2, [pc, #12]	@ (8001ea0 <HAL_IncTick+0x1c>)
 8001e94:	6013      	str	r3, [r2, #0]
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	20000530 	.word	0x20000530
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000530 	.word	0x20000530

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff ffee 	bl	8001ea8 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ed8:	d004      	beq.n	8001ee4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <HAL_Delay+0x40>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee4:	bf00      	nop
 8001ee6:	f7ff ffdf 	bl	8001ea8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d8f7      	bhi.n	8001ee6 <HAL_Delay+0x26>
  {
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000008 	.word	0x20000008

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	@ (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	@ (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	@ (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ff4c 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002082:	f7ff ff63 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 8002086:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	6978      	ldr	r0, [r7, #20]
 800208e:	f7ff ffb3 	bl	8001ff8 <NVIC_EncodePriority>
 8002092:	4602      	mov	r2, r0
 8002094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff82 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020a0:	bf00      	nop
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff56 	bl	8001f68 <__NVIC_EnableIRQ>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e147      	b.n	8002366 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fc08 	bl	8001900 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0210 	bic.w	r2, r2, #16
 80020fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002100:	f7ff fed2 	bl	8001ea8 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002106:	e012      	b.n	800212e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002108:	f7ff fece 	bl	8001ea8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b0a      	cmp	r3, #10
 8002114:	d90b      	bls.n	800212e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2203      	movs	r2, #3
 8002126:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e11b      	b.n	8002366 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b08      	cmp	r3, #8
 800213a:	d0e5      	beq.n	8002108 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699a      	ldr	r2, [r3, #24]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800214c:	f7ff feac 	bl	8001ea8 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002152:	e012      	b.n	800217a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002154:	f7ff fea8 	bl	8001ea8 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b0a      	cmp	r3, #10
 8002160:	d90b      	bls.n	800217a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2203      	movs	r2, #3
 8002172:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0f5      	b.n	8002366 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0e5      	beq.n	8002154 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0202 	orr.w	r2, r2, #2
 8002196:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a74      	ldr	r2, [pc, #464]	@ (8002370 <HAL_FDCAN_Init+0x2ac>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d103      	bne.n	80021aa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80021a2:	4a74      	ldr	r2, [pc, #464]	@ (8002374 <HAL_FDCAN_Init+0x2b0>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7c1b      	ldrb	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d108      	bne.n	80021c4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021c0:	619a      	str	r2, [r3, #24]
 80021c2:	e007      	b.n	80021d4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7c5b      	ldrb	r3, [r3, #17]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d108      	bne.n	80021ee <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021ea:	619a      	str	r2, [r3, #24]
 80021ec:	e007      	b.n	80021fe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7c9b      	ldrb	r3, [r3, #18]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d108      	bne.n	8002218 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002214:	619a      	str	r2, [r3, #24]
 8002216:	e007      	b.n	8002228 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002226:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800224c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0210 	bic.w	r2, r2, #16
 800225c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d108      	bne.n	8002278 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699a      	ldr	r2, [r3, #24]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0204 	orr.w	r2, r2, #4
 8002274:	619a      	str	r2, [r3, #24]
 8002276:	e02c      	b.n	80022d2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d028      	beq.n	80022d2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d01c      	beq.n	80022c2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699a      	ldr	r2, [r3, #24]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002296:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0210 	orr.w	r2, r2, #16
 80022a6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d110      	bne.n	80022d2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0220 	orr.w	r2, r2, #32
 80022be:	619a      	str	r2, [r3, #24]
 80022c0:	e007      	b.n	80022d2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0220 	orr.w	r2, r2, #32
 80022d0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	3b01      	subs	r3, #1
 80022e0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022e2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022ea:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022fa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022fc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002306:	d115      	bne.n	8002334 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	3b01      	subs	r3, #1
 8002314:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002316:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	3b01      	subs	r3, #1
 800231e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002320:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	3b01      	subs	r3, #1
 800232a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002330:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002332:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f880 	bl	8002450 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40006400 	.word	0x40006400
 8002374:	40006500 	.word	0x40006500

08002378 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d110      	bne.n	80023ae <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e006      	b.n	80023bc <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b2:	f043 0204 	orr.w	r2, r3, #4
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
  }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d12c      	bne.n	800243a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e023      	b.n	8002448 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f87c 	bl	8002514 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	fa01 f202 	lsl.w	r2, r1, r2
 8002428:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800242c:	2201      	movs	r2, #1
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	409a      	lsls	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e006      	b.n	8002448 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243e:	f043 0208 	orr.w	r2, r3, #8
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002458:	4b2c      	ldr	r3, [pc, #176]	@ (800250c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800245a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2b      	ldr	r2, [pc, #172]	@ (8002510 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d103      	bne.n	800246e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800246c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800247c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002484:	041a      	lsls	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024a2:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024aa:	061a      	lsls	r2, r3, #24
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e005      	b.n	80024f0 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3304      	adds	r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d3f3      	bcc.n	80024e4 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	4000a400 	.word	0x4000a400
 8002510:	40006800 	.word	0x40006800

08002514 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	@ 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10a      	bne.n	8002540 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002532:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800253a:	4313      	orrs	r3, r2
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	e00a      	b.n	8002556 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002548:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800254e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002550:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002554:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002560:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002566:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800256c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	440b      	add	r3, r1
 8002588:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	3304      	adds	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3304      	adds	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	e020      	b.n	80025ea <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3303      	adds	r3, #3
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3302      	adds	r3, #2
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	440b      	add	r3, r1
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80025c0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	440b      	add	r3, r1
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80025ce:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	440a      	add	r2, r1
 80025d6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80025d8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	3304      	adds	r3, #4
 80025e2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3304      	adds	r3, #4
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	4a06      	ldr	r2, [pc, #24]	@ (8002608 <FDCAN_CopyMessageToRAM+0xf4>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	461a      	mov	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d3d6      	bcc.n	80025a8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80025fa:	bf00      	nop
 80025fc:	bf00      	nop
 80025fe:	3724      	adds	r7, #36	@ 0x24
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	080113b4 	.word	0x080113b4

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800261a:	e15a      	b.n	80028d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 814c 	beq.w	80028cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d005      	beq.n	800264c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002648:	2b02      	cmp	r3, #2
 800264a:	d130      	bne.n	80026ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002682:	2201      	movs	r2, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 0201 	and.w	r2, r3, #1
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d017      	beq.n	80026ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d123      	bne.n	800273e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	6939      	ldr	r1, [r7, #16]
 800273a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0203 	and.w	r2, r3, #3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80a6 	beq.w	80028cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002780:	4b5b      	ldr	r3, [pc, #364]	@ (80028f0 <HAL_GPIO_Init+0x2e4>)
 8002782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002784:	4a5a      	ldr	r2, [pc, #360]	@ (80028f0 <HAL_GPIO_Init+0x2e4>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6613      	str	r3, [r2, #96]	@ 0x60
 800278c:	4b58      	ldr	r3, [pc, #352]	@ (80028f0 <HAL_GPIO_Init+0x2e4>)
 800278e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002798:	4a56      	ldr	r2, [pc, #344]	@ (80028f4 <HAL_GPIO_Init+0x2e8>)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027c2:	d01f      	beq.n	8002804 <HAL_GPIO_Init+0x1f8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a4c      	ldr	r2, [pc, #304]	@ (80028f8 <HAL_GPIO_Init+0x2ec>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d019      	beq.n	8002800 <HAL_GPIO_Init+0x1f4>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a4b      	ldr	r2, [pc, #300]	@ (80028fc <HAL_GPIO_Init+0x2f0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d013      	beq.n	80027fc <HAL_GPIO_Init+0x1f0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002900 <HAL_GPIO_Init+0x2f4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00d      	beq.n	80027f8 <HAL_GPIO_Init+0x1ec>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a49      	ldr	r2, [pc, #292]	@ (8002904 <HAL_GPIO_Init+0x2f8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d007      	beq.n	80027f4 <HAL_GPIO_Init+0x1e8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a48      	ldr	r2, [pc, #288]	@ (8002908 <HAL_GPIO_Init+0x2fc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_GPIO_Init+0x1e4>
 80027ec:	2305      	movs	r3, #5
 80027ee:	e00a      	b.n	8002806 <HAL_GPIO_Init+0x1fa>
 80027f0:	2306      	movs	r3, #6
 80027f2:	e008      	b.n	8002806 <HAL_GPIO_Init+0x1fa>
 80027f4:	2304      	movs	r3, #4
 80027f6:	e006      	b.n	8002806 <HAL_GPIO_Init+0x1fa>
 80027f8:	2303      	movs	r3, #3
 80027fa:	e004      	b.n	8002806 <HAL_GPIO_Init+0x1fa>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e002      	b.n	8002806 <HAL_GPIO_Init+0x1fa>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_GPIO_Init+0x1fa>
 8002804:	2300      	movs	r3, #0
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	f002 0203 	and.w	r2, r2, #3
 800280c:	0092      	lsls	r2, r2, #2
 800280e:	4093      	lsls	r3, r2
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002816:	4937      	ldr	r1, [pc, #220]	@ (80028f4 <HAL_GPIO_Init+0x2e8>)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002824:	4b39      	ldr	r3, [pc, #228]	@ (800290c <HAL_GPIO_Init+0x300>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002848:	4a30      	ldr	r2, [pc, #192]	@ (800290c <HAL_GPIO_Init+0x300>)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800284e:	4b2f      	ldr	r3, [pc, #188]	@ (800290c <HAL_GPIO_Init+0x300>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002872:	4a26      	ldr	r2, [pc, #152]	@ (800290c <HAL_GPIO_Init+0x300>)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002878:	4b24      	ldr	r3, [pc, #144]	@ (800290c <HAL_GPIO_Init+0x300>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800289c:	4a1b      	ldr	r2, [pc, #108]	@ (800290c <HAL_GPIO_Init+0x300>)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <HAL_GPIO_Init+0x300>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028c6:	4a11      	ldr	r2, [pc, #68]	@ (800290c <HAL_GPIO_Init+0x300>)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3301      	adds	r3, #1
 80028d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f47f ae9d 	bne.w	800261c <HAL_GPIO_Init+0x10>
  }
}
 80028e2:	bf00      	nop
 80028e4:	bf00      	nop
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40010000 	.word	0x40010000
 80028f8:	48000400 	.word	0x48000400
 80028fc:	48000800 	.word	0x48000800
 8002900:	48000c00 	.word	0x48000c00
 8002904:	48001000 	.word	0x48001000
 8002908:	48001400 	.word	0x48001400
 800290c:	40010400 	.word	0x40010400

08002910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002920:	787b      	ldrb	r3, [r7, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800292c:	e002      	b.n	8002934 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4013      	ands	r3, r2
 8002958:	041a      	lsls	r2, r3, #16
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43d9      	mvns	r1, r3
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	400b      	ands	r3, r1
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e08d      	b.n	8002aa2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff f80c 	bl	80019b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2224      	movs	r2, #36	@ 0x24
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d107      	bne.n	80029ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e006      	b.n	80029fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d108      	bne.n	8002a16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	e007      	b.n	8002a26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69d9      	ldr	r1, [r3, #28]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1a      	ldr	r2, [r3, #32]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	4608      	mov	r0, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	817b      	strh	r3, [r7, #10]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	813b      	strh	r3, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	f040 80f9 	bne.w	8002cc6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_I2C_Mem_Write+0x34>
 8002ada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ae6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0ed      	b.n	8002cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_I2C_Mem_Write+0x4e>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e0e6      	b.n	8002cc8 <HAL_I2C_Mem_Write+0x21c>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b02:	f7ff f9d1 	bl	8001ea8 <HAL_GetTick>
 8002b06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2319      	movs	r3, #25
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fac3 	bl	80030a0 <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0d1      	b.n	8002cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2221      	movs	r2, #33	@ 0x21
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2240      	movs	r2, #64	@ 0x40
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a3a      	ldr	r2, [r7, #32]
 8002b3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b4c:	88f8      	ldrh	r0, [r7, #6]
 8002b4e:	893a      	ldrh	r2, [r7, #8]
 8002b50:	8979      	ldrh	r1, [r7, #10]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f9d3 	bl	8002f08 <I2C_RequestMemoryWrite>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0a9      	b.n	8002cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2bff      	cmp	r3, #255	@ 0xff
 8002b7c:	d90e      	bls.n	8002b9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	22ff      	movs	r2, #255	@ 0xff
 8002b82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	8979      	ldrh	r1, [r7, #10]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fc47 	bl	8003428 <I2C_TransferConfig>
 8002b9a:	e00f      	b.n	8002bbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	8979      	ldrh	r1, [r7, #10]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fc36 	bl	8003428 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 fac6 	bl	8003152 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e07b      	b.n	8002cc8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d034      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x1c8>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d130      	bne.n	8002c74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2180      	movs	r1, #128	@ 0x80
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fa3f 	bl	80030a0 <I2C_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e04d      	b.n	8002cc8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2bff      	cmp	r3, #255	@ 0xff
 8002c34:	d90e      	bls.n	8002c54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	22ff      	movs	r2, #255	@ 0xff
 8002c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	8979      	ldrh	r1, [r7, #10]
 8002c44:	2300      	movs	r3, #0
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fbeb 	bl	8003428 <I2C_TransferConfig>
 8002c52:	e00f      	b.n	8002c74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	8979      	ldrh	r1, [r7, #10]
 8002c66:	2300      	movs	r3, #0
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fbda 	bl	8003428 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d19e      	bne.n	8002bbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 faac 	bl	80031e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e01a      	b.n	8002cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2220      	movs	r2, #32
 8002c98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <HAL_I2C_Mem_Write+0x224>)
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	fe00e800 	.word	0xfe00e800

08002cd4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	817b      	strh	r3, [r7, #10]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	813b      	strh	r3, [r7, #8]
 8002cea:	4613      	mov	r3, r2
 8002cec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	f040 80fd 	bne.w	8002ef6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_I2C_Mem_Read+0x34>
 8002d02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0f1      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2C_Mem_Read+0x4e>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e0ea      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x224>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d2a:	f7ff f8bd 	bl	8001ea8 <HAL_GetTick>
 8002d2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2319      	movs	r3, #25
 8002d36:	2201      	movs	r2, #1
 8002d38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f9af 	bl	80030a0 <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0d5      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2222      	movs	r2, #34	@ 0x22
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2240      	movs	r2, #64	@ 0x40
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a3a      	ldr	r2, [r7, #32]
 8002d66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d74:	88f8      	ldrh	r0, [r7, #6]
 8002d76:	893a      	ldrh	r2, [r7, #8]
 8002d78:	8979      	ldrh	r1, [r7, #10]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	4603      	mov	r3, r0
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f913 	bl	8002fb0 <I2C_RequestMemoryRead>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0ad      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2bff      	cmp	r3, #255	@ 0xff
 8002da4:	d90e      	bls.n	8002dc4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	22ff      	movs	r2, #255	@ 0xff
 8002daa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	8979      	ldrh	r1, [r7, #10]
 8002db4:	4b52      	ldr	r3, [pc, #328]	@ (8002f00 <HAL_I2C_Mem_Read+0x22c>)
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fb33 	bl	8003428 <I2C_TransferConfig>
 8002dc2:	e00f      	b.n	8002de4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	8979      	ldrh	r1, [r7, #10]
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <HAL_I2C_Mem_Read+0x22c>)
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fb22 	bl	8003428 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dea:	2200      	movs	r2, #0
 8002dec:	2104      	movs	r1, #4
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f956 	bl	80030a0 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e07c      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d034      	beq.n	8002ea4 <HAL_I2C_Mem_Read+0x1d0>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d130      	bne.n	8002ea4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2180      	movs	r1, #128	@ 0x80
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f927 	bl	80030a0 <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e04d      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2bff      	cmp	r3, #255	@ 0xff
 8002e64:	d90e      	bls.n	8002e84 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	22ff      	movs	r2, #255	@ 0xff
 8002e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	8979      	ldrh	r1, [r7, #10]
 8002e74:	2300      	movs	r3, #0
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fad3 	bl	8003428 <I2C_TransferConfig>
 8002e82:	e00f      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	8979      	ldrh	r1, [r7, #10]
 8002e96:	2300      	movs	r3, #0
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fac2 	bl	8003428 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d19a      	bne.n	8002de4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f994 	bl	80031e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e01a      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <HAL_I2C_Mem_Read+0x230>)
 8002ed6:	400b      	ands	r3, r1
 8002ed8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e000      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
  }
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	80002400 	.word	0x80002400
 8002f04:	fe00e800 	.word	0xfe00e800

08002f08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	4608      	mov	r0, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	461a      	mov	r2, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	817b      	strh	r3, [r7, #10]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	813b      	strh	r3, [r7, #8]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	8979      	ldrh	r1, [r7, #10]
 8002f28:	4b20      	ldr	r3, [pc, #128]	@ (8002fac <I2C_RequestMemoryWrite+0xa4>)
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fa79 	bl	8003428 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	69b9      	ldr	r1, [r7, #24]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f909 	bl	8003152 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e02c      	b.n	8002fa4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f50:	893b      	ldrh	r3, [r7, #8]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f5a:	e015      	b.n	8002f88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f5c:	893b      	ldrh	r3, [r7, #8]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	69b9      	ldr	r1, [r7, #24]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f8ef 	bl	8003152 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e012      	b.n	8002fa4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f7e:	893b      	ldrh	r3, [r7, #8]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2180      	movs	r1, #128	@ 0x80
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f884 	bl	80030a0 <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	80002000 	.word	0x80002000

08002fb0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	813b      	strh	r3, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	8979      	ldrh	r1, [r7, #10]
 8002fd0:	4b20      	ldr	r3, [pc, #128]	@ (8003054 <I2C_RequestMemoryRead+0xa4>)
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fa26 	bl	8003428 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	69b9      	ldr	r1, [r7, #24]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f8b6 	bl	8003152 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e02c      	b.n	800304a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d105      	bne.n	8003002 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff6:	893b      	ldrh	r3, [r7, #8]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003000:	e015      	b.n	800302e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003002:	893b      	ldrh	r3, [r7, #8]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	b29b      	uxth	r3, r3
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	69b9      	ldr	r1, [r7, #24]
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f89c 	bl	8003152 <I2C_WaitOnTXISFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e012      	b.n	800304a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003024:	893b      	ldrh	r3, [r7, #8]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2200      	movs	r2, #0
 8003036:	2140      	movs	r1, #64	@ 0x40
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f831 	bl	80030a0 <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	80002000 	.word	0x80002000

08003058 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b02      	cmp	r3, #2
 800306c:	d103      	bne.n	8003076 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d007      	beq.n	8003094 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	619a      	str	r2, [r3, #24]
  }
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b0:	e03b      	b.n	800312a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	6839      	ldr	r1, [r7, #0]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f8d6 	bl	8003268 <I2C_IsErrorOccurred>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e041      	b.n	800314a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030cc:	d02d      	beq.n	800312a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fe feeb 	bl	8001ea8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d122      	bne.n	800312a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4013      	ands	r3, r2
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d113      	bne.n	800312a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e00f      	b.n	800314a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4013      	ands	r3, r2
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	429a      	cmp	r2, r3
 8003146:	d0b4      	beq.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800315e:	e033      	b.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f87f 	bl	8003268 <I2C_IsErrorOccurred>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e031      	b.n	80031d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800317a:	d025      	beq.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317c:	f7fe fe94 	bl	8001ea8 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d11a      	bne.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b02      	cmp	r3, #2
 800319e:	d013      	beq.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e007      	b.n	80031d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d1c4      	bne.n	8003160 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ec:	e02f      	b.n	800324e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f838 	bl	8003268 <I2C_IsErrorOccurred>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e02d      	b.n	800325e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7fe fe51 	bl	8001ea8 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d11a      	bne.n	800324e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b20      	cmp	r3, #32
 8003224:	d013      	beq.n	800324e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f043 0220 	orr.w	r2, r3, #32
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e007      	b.n	800325e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b20      	cmp	r3, #32
 800325a:	d1c8      	bne.n	80031ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	@ 0x28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b00      	cmp	r3, #0
 8003292:	d068      	beq.n	8003366 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2210      	movs	r2, #16
 800329a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800329c:	e049      	b.n	8003332 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032a4:	d045      	beq.n	8003332 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fe fdff 	bl	8001ea8 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <I2C_IsErrorOccurred+0x54>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d13a      	bne.n	8003332 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032de:	d121      	bne.n	8003324 <I2C_IsErrorOccurred+0xbc>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032e6:	d01d      	beq.n	8003324 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d01a      	beq.n	8003324 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032fe:	f7fe fdd3 	bl	8001ea8 <HAL_GetTick>
 8003302:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003304:	e00e      	b.n	8003324 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003306:	f7fe fdcf 	bl	8001ea8 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b19      	cmp	r3, #25
 8003312:	d907      	bls.n	8003324 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	f043 0320 	orr.w	r3, r3, #32
 800331a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003322:	e006      	b.n	8003332 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b20      	cmp	r3, #32
 8003330:	d1e9      	bne.n	8003306 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b20      	cmp	r3, #32
 800333e:	d003      	beq.n	8003348 <I2C_IsErrorOccurred+0xe0>
 8003340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0aa      	beq.n	800329e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2220      	movs	r2, #32
 8003356:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	f043 0304 	orr.w	r3, r3, #4
 800335e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003388:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	f043 0308 	orr.w	r3, r3, #8
 80033a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f043 0302 	orr.w	r3, r3, #2
 80033c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80033d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01c      	beq.n	8003416 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff fe3b 	bl	8003058 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003424 <I2C_IsErrorOccurred+0x1bc>)
 80033ee:	400b      	ands	r3, r1
 80033f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003416:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800341a:	4618      	mov	r0, r3
 800341c:	3728      	adds	r7, #40	@ 0x28
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	fe00e800 	.word	0xfe00e800

08003428 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	817b      	strh	r3, [r7, #10]
 8003436:	4613      	mov	r3, r2
 8003438:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003440:	7a7b      	ldrb	r3, [r7, #9]
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003448:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	4313      	orrs	r3, r2
 8003452:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003456:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	0d5b      	lsrs	r3, r3, #21
 8003462:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003466:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <I2C_TransferConfig+0x60>)
 8003468:	430b      	orrs	r3, r1
 800346a:	43db      	mvns	r3, r3
 800346c:	ea02 0103 	and.w	r1, r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	03ff63ff 	.word	0x03ff63ff

0800348c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d138      	bne.n	8003514 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e032      	b.n	8003516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	@ 0x24
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6819      	ldr	r1, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b20      	cmp	r3, #32
 8003536:	d139      	bne.n	80035ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003542:	2302      	movs	r3, #2
 8003544:	e033      	b.n	80035ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2224      	movs	r2, #36	@ 0x24
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003574:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e000      	b.n	80035ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
  }
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0c0      	b.n	800374e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f00a fba7 	bl	800dd34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 fef1 	bl	80073da <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	e03e      	b.n	800367c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	440b      	add	r3, r1
 800360c:	3311      	adds	r3, #17
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	3310      	adds	r3, #16
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	440b      	add	r3, r1
 8003634:	3313      	adds	r3, #19
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	440b      	add	r3, r1
 8003648:	3320      	adds	r3, #32
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	440b      	add	r3, r1
 800365c:	3324      	adds	r3, #36	@ 0x24
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	3301      	adds	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	791b      	ldrb	r3, [r3, #4]
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	429a      	cmp	r2, r3
 8003684:	d3bb      	bcc.n	80035fe <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
 800368a:	e044      	b.n	8003716 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	440b      	add	r3, r1
 800369a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	440b      	add	r3, r1
 80036b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036b8:	7bfa      	ldrb	r2, [r7, #15]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	440b      	add	r3, r1
 80036c6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	440b      	add	r3, r1
 80036f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036fa:	7bfa      	ldrb	r2, [r7, #15]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	3301      	adds	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	791b      	ldrb	r3, [r3, #4]
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	429a      	cmp	r2, r3
 800371e:	d3b5      	bcc.n	800368c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	e893 0006 	ldmia.w	r3, {r1, r2}
 800372c:	f003 fe70 	bl	8007410 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	7a9b      	ldrb	r3, [r3, #10]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d102      	bne.n	800374c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f001 fc0e 	bl	8004f68 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_PCD_Start+0x16>
 8003768:	2302      	movs	r3, #2
 800376a:	e012      	b.n	8003792 <HAL_PCD_Start+0x3c>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f003 fe17 	bl	80073ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f005 fbf4 	bl	8008f70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f005 fbf9 	bl	8008f9e <USB_ReadInterrupts>
 80037ac:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fb06 	bl	8003dca <PCD_EP_ISR_Handler>

    return;
 80037be:	e110      	b.n	80039e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d013      	beq.n	80037f2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037dc:	b292      	uxth	r2, r2
 80037de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f00a fb37 	bl	800de56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80037e8:	2100      	movs	r1, #0
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8fc 	bl	80039e8 <HAL_PCD_SetAddress>

    return;
 80037f0:	e0f7      	b.n	80039e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00c      	beq.n	8003816 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800380e:	b292      	uxth	r2, r2
 8003810:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003814:	e0e5      	b.n	80039e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00c      	beq.n	800383a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003832:	b292      	uxth	r2, r2
 8003834:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003838:	e0d3      	b.n	80039e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d034      	beq.n	80038ae <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800384c:	b29a      	uxth	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0204 	bic.w	r2, r2, #4
 8003856:	b292      	uxth	r2, r2
 8003858:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0208 	bic.w	r2, r2, #8
 800386e:	b292      	uxth	r2, r2
 8003870:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800387a:	2b01      	cmp	r3, #1
 800387c:	d107      	bne.n	800388e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003886:	2100      	movs	r1, #0
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f00a fcd7 	bl	800e23c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f00a fb1a 	bl	800dec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038a6:	b292      	uxth	r2, r2
 80038a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038ac:	e099      	b.n	80039e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d027      	beq.n	8003908 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	b292      	uxth	r2, r2
 80038cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038d8:	b29a      	uxth	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038e2:	b292      	uxth	r2, r2
 80038e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0204 	orr.w	r2, r2, #4
 80038fa:	b292      	uxth	r2, r2
 80038fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f00a fac7 	bl	800de94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003906:	e06c      	b.n	80039e2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d040      	beq.n	8003994 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800391a:	b29a      	uxth	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003924:	b292      	uxth	r2, r2
 8003926:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d12b      	bne.n	800398c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800393c:	b29a      	uxth	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0204 	orr.w	r2, r2, #4
 8003946:	b292      	uxth	r2, r2
 8003948:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003954:	b29a      	uxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0208 	orr.w	r2, r2, #8
 800395e:	b292      	uxth	r2, r2
 8003960:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003974:	b29b      	uxth	r3, r3
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003982:	2101      	movs	r1, #1
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f00a fc59 	bl	800e23c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800398a:	e02a      	b.n	80039e2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f00a fa81 	bl	800de94 <HAL_PCD_SuspendCallback>
    return;
 8003992:	e026      	b.n	80039e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00f      	beq.n	80039be <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039b0:	b292      	uxth	r2, r2
 80039b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f00a fa3f 	bl	800de3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80039bc:	e011      	b.n	80039e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00c      	beq.n	80039e2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039da:	b292      	uxth	r2, r2
 80039dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039e0:	bf00      	nop
  }
}
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_PCD_SetAddress+0x1a>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e012      	b.n	8003a28 <HAL_PCD_SetAddress+0x40>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f005 fa95 	bl	8008f48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	70fb      	strb	r3, [r7, #3]
 8003a42:	460b      	mov	r3, r1
 8003a44:	803b      	strh	r3, [r7, #0]
 8003a46:	4613      	mov	r3, r2
 8003a48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	da0e      	bge.n	8003a74 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 0207 	and.w	r2, r3, #7
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	3310      	adds	r3, #16
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	705a      	strb	r2, [r3, #1]
 8003a72:	e00e      	b.n	8003a92 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	f003 0207 	and.w	r2, r3, #7
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003a9e:	883b      	ldrh	r3, [r7, #0]
 8003aa0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	78ba      	ldrb	r2, [r7, #2]
 8003aac:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003aae:	78bb      	ldrb	r3, [r7, #2]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d102      	bne.n	8003aba <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_PCD_EP_Open+0x98>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e00e      	b.n	8003ae6 <HAL_PCD_EP_Open+0xb6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68f9      	ldr	r1, [r7, #12]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f003 fcb8 	bl	800744c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	da0e      	bge.n	8003b20 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	f003 0207 	and.w	r2, r3, #7
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	3310      	adds	r3, #16
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	705a      	strb	r2, [r3, #1]
 8003b1e:	e00e      	b.n	8003b3e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	f003 0207 	and.w	r2, r3, #7
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_PCD_EP_Close+0x6a>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e00e      	b.n	8003b76 <HAL_PCD_EP_Close+0x88>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68f9      	ldr	r1, [r7, #12]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 f958 	bl	8007e1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	f003 0207 	and.w	r2, r3, #7
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bbe:	7afb      	ldrb	r3, [r7, #11]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6979      	ldr	r1, [r7, #20]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f004 fb10 	bl	80081f6 <USB_EPStartXfer>

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	f003 0207 	and.w	r2, r3, #7
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c20:	7afb      	ldrb	r3, [r7, #11]
 8003c22:	f003 0207 	and.w	r2, r3, #7
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	3310      	adds	r3, #16
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2200      	movs	r2, #0
 8003c54:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5c:	7afb      	ldrb	r3, [r7, #11]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6979      	ldr	r1, [r7, #20]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f004 fac1 	bl	80081f6 <USB_EPStartXfer>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	7912      	ldrb	r2, [r2, #4]
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e03e      	b.n	8003d1a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	da0e      	bge.n	8003cc2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 0207 	and.w	r2, r3, #7
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	3310      	adds	r3, #16
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	705a      	strb	r2, [r3, #1]
 8003cc0:	e00c      	b.n	8003cdc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_PCD_EP_SetStall+0x7e>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e00e      	b.n	8003d1a <HAL_PCD_EP_SetStall+0x9c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f005 f822 	bl	8008d54 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	7912      	ldrb	r2, [r2, #4]
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d901      	bls.n	8003d40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e040      	b.n	8003dc2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	da0e      	bge.n	8003d66 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	f003 0207 	and.w	r2, r3, #7
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	3310      	adds	r3, #16
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	705a      	strb	r2, [r3, #1]
 8003d64:	e00e      	b.n	8003d84 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 0207 	and.w	r2, r3, #7
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_PCD_EP_ClrStall+0x82>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e00e      	b.n	8003dc2 <HAL_PCD_EP_ClrStall+0xa0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f005 f81f 	bl	8008df6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b092      	sub	sp, #72	@ 0x48
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dd2:	e333      	b.n	800443c <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ddc:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003dde:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003dea:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f040 8108 	bne.w	8004004 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003df4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d14c      	bne.n	8003e98 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0e:	813b      	strh	r3, [r7, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	893b      	ldrh	r3, [r7, #8]
 8003e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3310      	adds	r3, #16
 8003e26:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	4413      	add	r3, r2
 8003e42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e4e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	441a      	add	r2, r3
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e5c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e5e:	2100      	movs	r1, #0
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f009 ffd0 	bl	800de06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	7b1b      	ldrb	r3, [r3, #12]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 82e5 	beq.w	800443c <PCD_EP_ISR_Handler+0x672>
 8003e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f040 82e0 	bne.w	800443c <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7b1b      	ldrb	r3, [r3, #12]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	731a      	strb	r2, [r3, #12]
 8003e96:	e2d1      	b.n	800443c <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e9e:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003ea8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d032      	beq.n	8003f18 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	f005 f8a8 	bl	8009042 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003efe:	4013      	ands	r3, r2
 8003f00:	817b      	strh	r3, [r7, #10]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	897a      	ldrh	r2, [r7, #10]
 8003f08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f0c:	b292      	uxth	r2, r2
 8003f0e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f009 ff4b 	bl	800ddac <HAL_PCD_SetupStageCallback>
 8003f16:	e291      	b.n	800443c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f18:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f280 828d 	bge.w	800443c <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f2e:	4013      	ands	r3, r2
 8003f30:	81fb      	strh	r3, [r7, #14]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	89fa      	ldrh	r2, [r7, #14]
 8003f38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f3c:	b292      	uxth	r2, r2
 8003f3e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f66:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d019      	beq.n	8003fa4 <PCD_EP_ISR_Handler+0x1da>
 8003f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f7e:	6959      	ldr	r1, [r3, #20]
 8003f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f82:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f86:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f005 f85a 	bl	8009042 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	441a      	add	r2, r3
 8003f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f009 ff16 	bl	800ddd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003fac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f040 8242 	bne.w	800443c <PCD_EP_ISR_Handler+0x672>
 8003fb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003fba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003fbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fc2:	f000 823b 	beq.w	800443c <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd6:	81bb      	strh	r3, [r7, #12]
 8003fd8:	89bb      	ldrh	r3, [r7, #12]
 8003fda:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003fde:	81bb      	strh	r3, [r7, #12]
 8003fe0:	89bb      	ldrh	r3, [r7, #12]
 8003fe2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fe6:	81bb      	strh	r3, [r7, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	89bb      	ldrh	r3, [r7, #12]
 8003fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	8013      	strh	r3, [r2, #0]
 8004002:	e21b      	b.n	800443c <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004016:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800401a:	2b00      	cmp	r3, #0
 800401c:	f280 80f1 	bge.w	8004202 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29a      	uxth	r2, r3
 8004032:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004036:	4013      	ands	r3, r2
 8004038:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800404a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800404e:	b292      	uxth	r2, r2
 8004050:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004052:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800406a:	7b1b      	ldrb	r3, [r3, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d123      	bne.n	80040b8 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004078:	b29b      	uxth	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	4413      	add	r3, r2
 800408a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004094:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8004098:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 808b 	beq.w	80041b8 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a8:	6959      	ldr	r1, [r3, #20]
 80040aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ac:	88da      	ldrh	r2, [r3, #6]
 80040ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040b2:	f004 ffc6 	bl	8009042 <USB_ReadPMA>
 80040b6:	e07f      	b.n	80041b8 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ba:	78db      	ldrb	r3, [r3, #3]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d109      	bne.n	80040d4 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80040c2:	461a      	mov	r2, r3
 80040c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f9c6 	bl	8004458 <HAL_PCD_EP_DB_Receive>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80040d2:	e071      	b.n	80041b8 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	441a      	add	r2, r3
 80040fe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800410c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004110:	b29b      	uxth	r3, r3
 8004112:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	b29b      	uxth	r3, r3
 8004126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d022      	beq.n	8004174 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004136:	b29b      	uxth	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	4413      	add	r3, r2
 8004148:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004152:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004156:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800415a:	2b00      	cmp	r3, #0
 800415c:	d02c      	beq.n	80041b8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004164:	6959      	ldr	r1, [r3, #20]
 8004166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004168:	891a      	ldrh	r2, [r3, #8]
 800416a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800416e:	f004 ff68 	bl	8009042 <USB_ReadPMA>
 8004172:	e021      	b.n	80041b8 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800417c:	b29b      	uxth	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4413      	add	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	4413      	add	r3, r2
 800418e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004198:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800419c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041aa:	6959      	ldr	r1, [r3, #20]
 80041ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ae:	895a      	ldrh	r2, [r3, #10]
 80041b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041b4:	f004 ff45 	bl	8009042 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041c0:	441a      	add	r2, r3
 80041c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c8:	695a      	ldr	r2, [r3, #20]
 80041ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041ce:	441a      	add	r2, r3
 80041d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <PCD_EP_ISR_Handler+0x41e>
 80041dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80041e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d206      	bcs.n	80041f6 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f009 fdee 	bl	800ddd0 <HAL_PCD_DataOutStageCallback>
 80041f4:	e005      	b.n	8004202 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041fc:	4618      	mov	r0, r3
 80041fe:	f003 fffa 	bl	80081f6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004202:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8117 	beq.w	800443c <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800420e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	3310      	adds	r3, #16
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	441a      	add	r2, r3
 800424c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800424e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004256:	b29b      	uxth	r3, r3
 8004258:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800425a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800425c:	78db      	ldrb	r3, [r3, #3]
 800425e:	2b01      	cmp	r3, #1
 8004260:	f040 80a1 	bne.w	80043a6 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004266:	2200      	movs	r2, #0
 8004268:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800426a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800426c:	7b1b      	ldrb	r3, [r3, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8092 	beq.w	8004398 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004274:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d046      	beq.n	800430c <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800427e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004280:	785b      	ldrb	r3, [r3, #1]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d126      	bne.n	80042d4 <PCD_EP_ISR_Handler+0x50a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4413      	add	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	00da      	lsls	r2, r3, #3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	4413      	add	r3, r2
 80042a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	801a      	strh	r2, [r3, #0]
 80042d2:	e061      	b.n	8004398 <PCD_EP_ISR_Handler+0x5ce>
 80042d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d15d      	bne.n	8004398 <PCD_EP_ISR_Handler+0x5ce>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	00da      	lsls	r2, r3, #3
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2200      	movs	r2, #0
 8004308:	801a      	strh	r2, [r3, #0]
 800430a:	e045      	b.n	8004398 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d126      	bne.n	8004368 <PCD_EP_ISR_Handler+0x59e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	4413      	add	r3, r2
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
 8004332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	00da      	lsls	r2, r3, #3
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	4413      	add	r3, r2
 800433c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004340:	623b      	str	r3, [r7, #32]
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800434c:	b29a      	uxth	r2, r3
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800435c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004360:	b29a      	uxth	r2, r3
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	801a      	strh	r2, [r3, #0]
 8004366:	e017      	b.n	8004398 <PCD_EP_ISR_Handler+0x5ce>
 8004368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d113      	bne.n	8004398 <PCD_EP_ISR_Handler+0x5ce>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004378:	b29b      	uxth	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437e:	4413      	add	r3, r2
 8004380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	00da      	lsls	r2, r3, #3
 8004388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438a:	4413      	add	r3, r2
 800438c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004394:	2200      	movs	r2, #0
 8004396:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f009 fd31 	bl	800de06 <HAL_PCD_DataInStageCallback>
 80043a4:	e04a      	b.n	800443c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80043a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d13f      	bne.n	8004430 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	4413      	add	r3, r2
 80043ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043d4:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80043d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80043dc:	429a      	cmp	r2, r3
 80043de:	d906      	bls.n	80043ee <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80043e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80043e6:	1ad2      	subs	r2, r2, r3
 80043e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043ea:	619a      	str	r2, [r3, #24]
 80043ec:	e002      	b.n	80043f4 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80043ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043f0:	2200      	movs	r2, #0
 80043f2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80043f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f009 fcff 	bl	800de06 <HAL_PCD_DataInStageCallback>
 8004408:	e018      	b.n	800443c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800440a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004410:	441a      	add	r2, r3
 8004412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004414:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800441c:	441a      	add	r2, r3
 800441e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004420:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004428:	4618      	mov	r0, r3
 800442a:	f003 fee4 	bl	80081f6 <USB_EPStartXfer>
 800442e:	e005      	b.n	800443c <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004430:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004432:	461a      	mov	r2, r3
 8004434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f917 	bl	800466a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004444:	b29b      	uxth	r3, r3
 8004446:	b21b      	sxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	f6ff acc3 	blt.w	8003dd4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3748      	adds	r7, #72	@ 0x48
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d07c      	beq.n	800456a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004478:	b29b      	uxth	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	4413      	add	r3, r2
 800448a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004494:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	8b7b      	ldrh	r3, [r7, #26]
 800449c:	429a      	cmp	r2, r3
 800449e:	d306      	bcc.n	80044ae <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	8b7b      	ldrh	r3, [r7, #26]
 80044a6:	1ad2      	subs	r2, r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	619a      	str	r2, [r3, #24]
 80044ac:	e002      	b.n	80044b4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2200      	movs	r2, #0
 80044b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d123      	bne.n	8004504 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d6:	833b      	strh	r3, [r7, #24]
 80044d8:	8b3b      	ldrh	r3, [r7, #24]
 80044da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044de:	833b      	strh	r3, [r7, #24]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	8b3b      	ldrh	r3, [r7, #24]
 80044f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004500:	b29b      	uxth	r3, r3
 8004502:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01f      	beq.n	800454e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004528:	82fb      	strh	r3, [r7, #22]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	441a      	add	r2, r3
 8004538:	8afb      	ldrh	r3, [r7, #22]
 800453a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800453e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004546:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800454a:	b29b      	uxth	r3, r3
 800454c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800454e:	8b7b      	ldrh	r3, [r7, #26]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8085 	beq.w	8004660 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6959      	ldr	r1, [r3, #20]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	891a      	ldrh	r2, [r3, #8]
 8004562:	8b7b      	ldrh	r3, [r7, #26]
 8004564:	f004 fd6d 	bl	8009042 <USB_ReadPMA>
 8004568:	e07a      	b.n	8004660 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004572:	b29b      	uxth	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	4413      	add	r3, r2
 8004584:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800458e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	8b7b      	ldrh	r3, [r7, #26]
 8004596:	429a      	cmp	r2, r3
 8004598:	d306      	bcc.n	80045a8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	8b7b      	ldrh	r3, [r7, #26]
 80045a0:	1ad2      	subs	r2, r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	619a      	str	r2, [r3, #24]
 80045a6:	e002      	b.n	80045ae <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2200      	movs	r2, #0
 80045ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d123      	bne.n	80045fe <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d0:	83fb      	strh	r3, [r7, #30]
 80045d2:	8bfb      	ldrh	r3, [r7, #30]
 80045d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045d8:	83fb      	strh	r3, [r7, #30]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	441a      	add	r2, r3
 80045e8:	8bfb      	ldrh	r3, [r7, #30]
 80045ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11f      	bne.n	8004648 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800461e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004622:	83bb      	strh	r3, [r7, #28]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	8bbb      	ldrh	r3, [r7, #28]
 8004634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800463c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004640:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004644:	b29b      	uxth	r3, r3
 8004646:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004648:	8b7b      	ldrh	r3, [r7, #26]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6959      	ldr	r1, [r3, #20]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	895a      	ldrh	r2, [r3, #10]
 800465a:	8b7b      	ldrh	r3, [r7, #26]
 800465c:	f004 fcf1 	bl	8009042 <USB_ReadPMA>
    }
  }

  return count;
 8004660:	8b7b      	ldrh	r3, [r7, #26]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b0a6      	sub	sp, #152	@ 0x98
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	4613      	mov	r3, r2
 8004676:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 81f7 	beq.w	8004a72 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800468c:	b29b      	uxth	r3, r3
 800468e:	461a      	mov	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4413      	add	r3, r2
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	4413      	add	r3, r2
 800469e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	699a      	ldr	r2, [r3, #24]
 80046b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d907      	bls.n	80046c8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	699a      	ldr	r2, [r3, #24]
 80046bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80046c0:	1ad2      	subs	r2, r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	619a      	str	r2, [r3, #24]
 80046c6:	e002      	b.n	80046ce <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2200      	movs	r2, #0
 80046cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 80e1 	bne.w	800489a <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d126      	bne.n	800472e <HAL_PCD_EP_DB_Transmit+0xc4>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	4413      	add	r3, r2
 80046f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	00da      	lsls	r2, r3, #3
 80046fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004700:	4413      	add	r3, r2
 8004702:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004712:	b29a      	uxth	r2, r3
 8004714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004726:	b29a      	uxth	r2, r3
 8004728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	e01a      	b.n	8004764 <HAL_PCD_EP_DB_Transmit+0xfa>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d116      	bne.n	8004764 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004744:	b29b      	uxth	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474a:	4413      	add	r3, r2
 800474c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	00da      	lsls	r2, r3, #3
 8004754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004756:	4413      	add	r3, r2
 8004758:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
 800475e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004760:	2200      	movs	r2, #0
 8004762:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	785b      	ldrb	r3, [r3, #1]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d126      	bne.n	80047c0 <HAL_PCD_EP_DB_Transmit+0x156>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	623b      	str	r3, [r7, #32]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	4413      	add	r3, r2
 8004788:	623b      	str	r3, [r7, #32]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	00da      	lsls	r2, r3, #3
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	4413      	add	r3, r2
 8004794:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	801a      	strh	r2, [r3, #0]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	e017      	b.n	80047f0 <HAL_PCD_EP_DB_Transmit+0x186>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d113      	bne.n	80047f0 <HAL_PCD_EP_DB_Transmit+0x186>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	4413      	add	r3, r2
 80047d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	00da      	lsls	r2, r3, #3
 80047e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e2:	4413      	add	r3, r2
 80047e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	2200      	movs	r2, #0
 80047ee:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	78db      	ldrb	r3, [r3, #3]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d123      	bne.n	8004840 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004812:	837b      	strh	r3, [r7, #26]
 8004814:	8b7b      	ldrh	r3, [r7, #26]
 8004816:	f083 0320 	eor.w	r3, r3, #32
 800481a:	837b      	strh	r3, [r7, #26]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	8b7b      	ldrh	r3, [r7, #26]
 800482c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800483c:	b29b      	uxth	r3, r3
 800483e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	4619      	mov	r1, r3
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f009 fadd 	bl	800de06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01f      	beq.n	8004896 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800486c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004870:	833b      	strh	r3, [r7, #24]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	441a      	add	r2, r3
 8004880:	8b3b      	ldrh	r3, [r7, #24]
 8004882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800488a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800488e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004892:	b29b      	uxth	r3, r3
 8004894:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e31f      	b.n	8004eda <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d021      	beq.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80048d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	f040 82ca 	bne.w	8004e88 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80048fc:	441a      	add	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800490a:	441a      	add	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6a1a      	ldr	r2, [r3, #32]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	429a      	cmp	r2, r3
 800491a:	d309      	bcc.n	8004930 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6a1a      	ldr	r2, [r3, #32]
 8004926:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004928:	1ad2      	subs	r2, r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	621a      	str	r2, [r3, #32]
 800492e:	e015      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d107      	bne.n	8004948 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8004938:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800493c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004946:	e009      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d15f      	bne.n	8004a24 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	643b      	str	r3, [r7, #64]	@ 0x40
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004978:	4413      	add	r3, r2
 800497a:	643b      	str	r3, [r7, #64]	@ 0x40
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	00da      	lsls	r2, r3, #3
 8004982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004984:	4413      	add	r3, r2
 8004986:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800498a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800498c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004996:	b29a      	uxth	r2, r3
 8004998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <HAL_PCD_EP_DB_Transmit+0x34e>
 80049a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	e051      	b.n	8004a5c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80049b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80049bc:	d816      	bhi.n	80049ec <HAL_PCD_EP_DB_Transmit+0x382>
 80049be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80049c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80049ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049d0:	3301      	adds	r3, #1
 80049d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80049d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29a      	uxth	r2, r3
 80049da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049dc:	b29b      	uxth	r3, r3
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	4313      	orrs	r3, r2
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	e037      	b.n	8004a5c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80049ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80049f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d102      	bne.n	8004a02 <HAL_PCD_EP_DB_Transmit+0x398>
 80049fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049fe:	3b01      	subs	r3, #1
 8004a00:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	029b      	lsls	r3, r3, #10
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	4313      	orrs	r3, r2
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a20:	801a      	strh	r2, [r3, #0]
 8004a22:	e01b      	b.n	8004a5c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d117      	bne.n	8004a5c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a40:	4413      	add	r3, r2
 8004a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	00da      	lsls	r2, r3, #3
 8004a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a52:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a5a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6959      	ldr	r1, [r3, #20]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	891a      	ldrh	r2, [r3, #8]
 8004a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f004 faa7 	bl	8008fbe <USB_WritePMA>
 8004a70:	e20a      	b.n	8004e88 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4413      	add	r3, r2
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a96:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d307      	bcc.n	8004ab6 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004aae:	1ad2      	subs	r2, r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	619a      	str	r2, [r3, #24]
 8004ab4:	e002      	b.n	8004abc <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f040 80f6 	bne.w	8004cb2 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d126      	bne.n	8004b1c <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae2:	4413      	add	r3, r2
 8004ae4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	00da      	lsls	r2, r3, #3
 8004aec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aee:	4413      	add	r3, r2
 8004af0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004af4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004af6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b04:	801a      	strh	r2, [r3, #0]
 8004b06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b18:	801a      	strh	r2, [r3, #0]
 8004b1a:	e01a      	b.n	8004b52 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d116      	bne.n	8004b52 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b38:	4413      	add	r3, r2
 8004b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	00da      	lsls	r2, r3, #3
 8004b42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b44:	4413      	add	r3, r2
 8004b46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b4e:	2200      	movs	r2, #0
 8004b50:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d12f      	bne.n	8004bc2 <HAL_PCD_EP_DB_Transmit+0x558>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	00da      	lsls	r2, r3, #3
 8004b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ba6:	801a      	strh	r2, [r3, #0]
 8004ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	e01c      	b.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x592>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d118      	bne.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x592>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bda:	4413      	add	r3, r2
 8004bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	00da      	lsls	r2, r3, #3
 8004be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bea:	4413      	add	r3, r2
 8004bec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004bf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	78db      	ldrb	r3, [r3, #3]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d127      	bne.n	8004c54 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c1e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004c22:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004c26:	f083 0320 	eor.w	r3, r3, #32
 8004c2a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	441a      	add	r2, r3
 8004c3c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f009 f8d3 	bl	800de06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d121      	bne.n	8004cae <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c84:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e113      	b.n	8004eda <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d121      	bne.n	8004d00 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	441a      	add	r2, r3
 8004ce8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	f040 80be 	bne.w	8004e88 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d14:	441a      	add	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d22:	441a      	add	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6a1a      	ldr	r2, [r3, #32]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d309      	bcc.n	8004d48 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d40:	1ad2      	subs	r2, r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	621a      	str	r2, [r3, #32]
 8004d46:	e015      	b.n	8004d74 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d107      	bne.n	8004d60 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004d50:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d54:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004d5e:	e009      	b.n	8004d74 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d15f      	bne.n	8004e42 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d96:	4413      	add	r3, r2
 8004d98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	00da      	lsls	r2, r3, #3
 8004da0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004da2:	4413      	add	r3, r2
 8004da4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004da8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004daa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db8:	801a      	strh	r2, [r3, #0]
 8004dba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	e04e      	b.n	8004e74 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004dda:	d816      	bhi.n	8004e0a <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004ddc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004de2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <HAL_PCD_EP_DB_Transmit+0x788>
 8004dec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dee:	3301      	adds	r3, #1
 8004df0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004df2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	029b      	lsls	r3, r3, #10
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	4313      	orrs	r3, r2
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	e034      	b.n	8004e74 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004e0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004e1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	029b      	lsls	r3, r3, #10
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e3e:	801a      	strh	r2, [r3, #0]
 8004e40:	e018      	b.n	8004e74 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	785b      	ldrb	r3, [r3, #1]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d114      	bne.n	8004e74 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e58:	4413      	add	r3, r2
 8004e5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	00da      	lsls	r2, r3, #3
 8004e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e64:	4413      	add	r3, r2
 8004e66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e72:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6959      	ldr	r1, [r3, #20]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	895a      	ldrh	r2, [r3, #10]
 8004e80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	f004 f89b 	bl	8008fbe <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ea2:	82fb      	strh	r3, [r7, #22]
 8004ea4:	8afb      	ldrh	r3, [r7, #22]
 8004ea6:	f083 0310 	eor.w	r3, r3, #16
 8004eaa:	82fb      	strh	r3, [r7, #22]
 8004eac:	8afb      	ldrh	r3, [r7, #22]
 8004eae:	f083 0320 	eor.w	r3, r3, #32
 8004eb2:	82fb      	strh	r3, [r7, #22]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	8afb      	ldrh	r3, [r7, #22]
 8004ec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3798      	adds	r7, #152	@ 0x98
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b087      	sub	sp, #28
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	817b      	strh	r3, [r7, #10]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ef4:	897b      	ldrh	r3, [r7, #10]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00b      	beq.n	8004f18 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f00:	897b      	ldrh	r3, [r7, #10]
 8004f02:	f003 0207 	and.w	r2, r3, #7
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	3310      	adds	r3, #16
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	e009      	b.n	8004f2c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f18:	897a      	ldrh	r2, [r7, #10]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f2c:	893b      	ldrh	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d107      	bne.n	8004f42 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	80da      	strh	r2, [r3, #6]
 8004f40:	e00b      	b.n	8004f5a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2201      	movs	r2, #1
 8004f46:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	0c1b      	lsrs	r3, r3, #16
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f043 0302 	orr.w	r3, r3, #2
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d141      	bne.n	800504e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fca:	4b4b      	ldr	r3, [pc, #300]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd6:	d131      	bne.n	800503c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fd8:	4b47      	ldr	r3, [pc, #284]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fde:	4a46      	ldr	r2, [pc, #280]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fe4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fe8:	4b43      	ldr	r3, [pc, #268]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ff0:	4a41      	ldr	r2, [pc, #260]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ff6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ff8:	4b40      	ldr	r3, [pc, #256]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2232      	movs	r2, #50	@ 0x32
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	4a3f      	ldr	r2, [pc, #252]	@ (8005100 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	0c9b      	lsrs	r3, r3, #18
 800500a:	3301      	adds	r3, #1
 800500c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800500e:	e002      	b.n	8005016 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3b01      	subs	r3, #1
 8005014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005016:	4b38      	ldr	r3, [pc, #224]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800501e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005022:	d102      	bne.n	800502a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f2      	bne.n	8005010 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800502a:	4b33      	ldr	r3, [pc, #204]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005036:	d158      	bne.n	80050ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e057      	b.n	80050ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800503c:	4b2e      	ldr	r3, [pc, #184]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005042:	4a2d      	ldr	r2, [pc, #180]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800504c:	e04d      	b.n	80050ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005054:	d141      	bne.n	80050da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005056:	4b28      	ldr	r3, [pc, #160]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800505e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005062:	d131      	bne.n	80050c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005064:	4b24      	ldr	r3, [pc, #144]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800506a:	4a23      	ldr	r2, [pc, #140]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005070:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005074:	4b20      	ldr	r3, [pc, #128]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800507c:	4a1e      	ldr	r2, [pc, #120]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005082:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005084:	4b1d      	ldr	r3, [pc, #116]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2232      	movs	r2, #50	@ 0x32
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	4a1c      	ldr	r2, [pc, #112]	@ (8005100 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005090:	fba2 2303 	umull	r2, r3, r2, r3
 8005094:	0c9b      	lsrs	r3, r3, #18
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800509a:	e002      	b.n	80050a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3b01      	subs	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050a2:	4b15      	ldr	r3, [pc, #84]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ae:	d102      	bne.n	80050b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f2      	bne.n	800509c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050b6:	4b10      	ldr	r3, [pc, #64]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c2:	d112      	bne.n	80050ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e011      	b.n	80050ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050c8:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ce:	4a0a      	ldr	r2, [pc, #40]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050d8:	e007      	b.n	80050ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050da:	4b07      	ldr	r3, [pc, #28]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050e2:	4a05      	ldr	r2, [pc, #20]	@ (80050f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40007000 	.word	0x40007000
 80050fc:	20000000 	.word	0x20000000
 8005100:	431bde83 	.word	0x431bde83

08005104 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005108:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a04      	ldr	r2, [pc, #16]	@ (8005120 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800510e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005112:	6093      	str	r3, [r2, #8]
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40007000 	.word	0x40007000

08005124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e2fe      	b.n	8005734 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d075      	beq.n	800522e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005142:	4b97      	ldr	r3, [pc, #604]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800514c:	4b94      	ldr	r3, [pc, #592]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b0c      	cmp	r3, #12
 800515a:	d102      	bne.n	8005162 <HAL_RCC_OscConfig+0x3e>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b03      	cmp	r3, #3
 8005160:	d002      	beq.n	8005168 <HAL_RCC_OscConfig+0x44>
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b08      	cmp	r3, #8
 8005166:	d10b      	bne.n	8005180 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005168:	4b8d      	ldr	r3, [pc, #564]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d05b      	beq.n	800522c <HAL_RCC_OscConfig+0x108>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d157      	bne.n	800522c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e2d9      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005188:	d106      	bne.n	8005198 <HAL_RCC_OscConfig+0x74>
 800518a:	4b85      	ldr	r3, [pc, #532]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a84      	ldr	r2, [pc, #528]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 8005190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e01d      	b.n	80051d4 <HAL_RCC_OscConfig+0xb0>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051a0:	d10c      	bne.n	80051bc <HAL_RCC_OscConfig+0x98>
 80051a2:	4b7f      	ldr	r3, [pc, #508]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a7e      	ldr	r2, [pc, #504]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80051a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	4b7c      	ldr	r3, [pc, #496]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a7b      	ldr	r2, [pc, #492]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e00b      	b.n	80051d4 <HAL_RCC_OscConfig+0xb0>
 80051bc:	4b78      	ldr	r3, [pc, #480]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a77      	ldr	r2, [pc, #476]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80051c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	4b75      	ldr	r3, [pc, #468]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a74      	ldr	r2, [pc, #464]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80051ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d013      	beq.n	8005204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fc fe64 	bl	8001ea8 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fc fe60 	bl	8001ea8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	@ 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e29e      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051f6:	4b6a      	ldr	r3, [pc, #424]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0xc0>
 8005202:	e014      	b.n	800522e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fc fe50 	bl	8001ea8 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800520c:	f7fc fe4c 	bl	8001ea8 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b64      	cmp	r3, #100	@ 0x64
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e28a      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800521e:	4b60      	ldr	r3, [pc, #384]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0xe8>
 800522a:	e000      	b.n	800522e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d075      	beq.n	8005326 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800523a:	4b59      	ldr	r3, [pc, #356]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005244:	4b56      	ldr	r3, [pc, #344]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b0c      	cmp	r3, #12
 8005252:	d102      	bne.n	800525a <HAL_RCC_OscConfig+0x136>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d002      	beq.n	8005260 <HAL_RCC_OscConfig+0x13c>
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	2b04      	cmp	r3, #4
 800525e:	d11f      	bne.n	80052a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005260:	4b4f      	ldr	r3, [pc, #316]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_RCC_OscConfig+0x154>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e25d      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005278:	4b49      	ldr	r3, [pc, #292]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	061b      	lsls	r3, r3, #24
 8005286:	4946      	ldr	r1, [pc, #280]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800528c:	4b45      	ldr	r3, [pc, #276]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f7fc fc41 	bl	8001b18 <HAL_InitTick>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d043      	beq.n	8005324 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e249      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d023      	beq.n	80052f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052a8:	4b3d      	ldr	r3, [pc, #244]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3c      	ldr	r2, [pc, #240]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80052ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fc fdf8 	bl	8001ea8 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052bc:	f7fc fdf4 	bl	8001ea8 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e232      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052ce:	4b34      	ldr	r3, [pc, #208]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052da:	4b31      	ldr	r3, [pc, #196]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	061b      	lsls	r3, r3, #24
 80052e8:	492d      	ldr	r1, [pc, #180]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	604b      	str	r3, [r1, #4]
 80052ee:	e01a      	b.n	8005326 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052f0:	4b2b      	ldr	r3, [pc, #172]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a2a      	ldr	r2, [pc, #168]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 80052f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7fc fdd4 	bl	8001ea8 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005304:	f7fc fdd0 	bl	8001ea8 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e20e      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005316:	4b22      	ldr	r3, [pc, #136]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <HAL_RCC_OscConfig+0x1e0>
 8005322:	e000      	b.n	8005326 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005324:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d041      	beq.n	80053b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01c      	beq.n	8005374 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800533a:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 800533c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005340:	4a17      	ldr	r2, [pc, #92]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534a:	f7fc fdad 	bl	8001ea8 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005352:	f7fc fda9 	bl	8001ea8 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e1e7      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005364:	4b0e      	ldr	r3, [pc, #56]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 8005366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0ef      	beq.n	8005352 <HAL_RCC_OscConfig+0x22e>
 8005372:	e020      	b.n	80053b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005374:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 8005376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800537a:	4a09      	ldr	r2, [pc, #36]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005384:	f7fc fd90 	bl	8001ea8 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800538a:	e00d      	b.n	80053a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800538c:	f7fc fd8c 	bl	8001ea8 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d906      	bls.n	80053a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e1ca      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
 800539e:	bf00      	nop
 80053a0:	40021000 	.word	0x40021000
 80053a4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053a8:	4b8c      	ldr	r3, [pc, #560]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 80053aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1ea      	bne.n	800538c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 80a6 	beq.w	8005510 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053c4:	2300      	movs	r3, #0
 80053c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053c8:	4b84      	ldr	r3, [pc, #528]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 80053ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_RCC_OscConfig+0x2b4>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <HAL_RCC_OscConfig+0x2b6>
 80053d8:	2300      	movs	r3, #0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053de:	4b7f      	ldr	r3, [pc, #508]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 80053e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e2:	4a7e      	ldr	r2, [pc, #504]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 80053e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ea:	4b7c      	ldr	r3, [pc, #496]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 80053ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053f6:	2301      	movs	r3, #1
 80053f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053fa:	4b79      	ldr	r3, [pc, #484]	@ (80055e0 <HAL_RCC_OscConfig+0x4bc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d118      	bne.n	8005438 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005406:	4b76      	ldr	r3, [pc, #472]	@ (80055e0 <HAL_RCC_OscConfig+0x4bc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a75      	ldr	r2, [pc, #468]	@ (80055e0 <HAL_RCC_OscConfig+0x4bc>)
 800540c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005412:	f7fc fd49 	bl	8001ea8 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800541a:	f7fc fd45 	bl	8001ea8 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e183      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800542c:	4b6c      	ldr	r3, [pc, #432]	@ (80055e0 <HAL_RCC_OscConfig+0x4bc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0f0      	beq.n	800541a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d108      	bne.n	8005452 <HAL_RCC_OscConfig+0x32e>
 8005440:	4b66      	ldr	r3, [pc, #408]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005446:	4a65      	ldr	r2, [pc, #404]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 8005448:	f043 0301 	orr.w	r3, r3, #1
 800544c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005450:	e024      	b.n	800549c <HAL_RCC_OscConfig+0x378>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b05      	cmp	r3, #5
 8005458:	d110      	bne.n	800547c <HAL_RCC_OscConfig+0x358>
 800545a:	4b60      	ldr	r3, [pc, #384]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005460:	4a5e      	ldr	r2, [pc, #376]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 8005462:	f043 0304 	orr.w	r3, r3, #4
 8005466:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800546a:	4b5c      	ldr	r3, [pc, #368]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005470:	4a5a      	ldr	r2, [pc, #360]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800547a:	e00f      	b.n	800549c <HAL_RCC_OscConfig+0x378>
 800547c:	4b57      	ldr	r3, [pc, #348]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005482:	4a56      	ldr	r2, [pc, #344]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800548c:	4b53      	ldr	r3, [pc, #332]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005492:	4a52      	ldr	r2, [pc, #328]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 8005494:	f023 0304 	bic.w	r3, r3, #4
 8005498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d016      	beq.n	80054d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a4:	f7fc fd00 	bl	8001ea8 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054aa:	e00a      	b.n	80054c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ac:	f7fc fcfc 	bl	8001ea8 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e138      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c2:	4b46      	ldr	r3, [pc, #280]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 80054c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0ed      	beq.n	80054ac <HAL_RCC_OscConfig+0x388>
 80054d0:	e015      	b.n	80054fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d2:	f7fc fce9 	bl	8001ea8 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054d8:	e00a      	b.n	80054f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054da:	f7fc fce5 	bl	8001ea8 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e121      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054f0:	4b3a      	ldr	r3, [pc, #232]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1ed      	bne.n	80054da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054fe:	7ffb      	ldrb	r3, [r7, #31]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d105      	bne.n	8005510 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005504:	4b35      	ldr	r3, [pc, #212]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005508:	4a34      	ldr	r2, [pc, #208]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 800550a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800550e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d03c      	beq.n	8005596 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01c      	beq.n	800555e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005524:	4b2d      	ldr	r3, [pc, #180]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 8005526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800552a:	4a2c      	ldr	r2, [pc, #176]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005534:	f7fc fcb8 	bl	8001ea8 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800553c:	f7fc fcb4 	bl	8001ea8 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e0f2      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800554e:	4b23      	ldr	r3, [pc, #140]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 8005550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0ef      	beq.n	800553c <HAL_RCC_OscConfig+0x418>
 800555c:	e01b      	b.n	8005596 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800555e:	4b1f      	ldr	r3, [pc, #124]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 8005560:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005564:	4a1d      	ldr	r2, [pc, #116]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556e:	f7fc fc9b 	bl	8001ea8 <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005576:	f7fc fc97 	bl	8001ea8 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e0d5      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005588:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 800558a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1ef      	bne.n	8005576 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80c9 	beq.w	8005732 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055a0:	4b0e      	ldr	r3, [pc, #56]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 030c 	and.w	r3, r3, #12
 80055a8:	2b0c      	cmp	r3, #12
 80055aa:	f000 8083 	beq.w	80056b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d15e      	bne.n	8005674 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	4b09      	ldr	r3, [pc, #36]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a08      	ldr	r2, [pc, #32]	@ (80055dc <HAL_RCC_OscConfig+0x4b8>)
 80055bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c2:	f7fc fc71 	bl	8001ea8 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055c8:	e00c      	b.n	80055e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ca:	f7fc fc6d 	bl	8001ea8 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d905      	bls.n	80055e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e0ab      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
 80055dc:	40021000 	.word	0x40021000
 80055e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e4:	4b55      	ldr	r3, [pc, #340]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ec      	bne.n	80055ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055f0:	4b52      	ldr	r3, [pc, #328]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	4b52      	ldr	r3, [pc, #328]	@ (8005740 <HAL_RCC_OscConfig+0x61c>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6a11      	ldr	r1, [r2, #32]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005600:	3a01      	subs	r2, #1
 8005602:	0112      	lsls	r2, r2, #4
 8005604:	4311      	orrs	r1, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800560a:	0212      	lsls	r2, r2, #8
 800560c:	4311      	orrs	r1, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005612:	0852      	lsrs	r2, r2, #1
 8005614:	3a01      	subs	r2, #1
 8005616:	0552      	lsls	r2, r2, #21
 8005618:	4311      	orrs	r1, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800561e:	0852      	lsrs	r2, r2, #1
 8005620:	3a01      	subs	r2, #1
 8005622:	0652      	lsls	r2, r2, #25
 8005624:	4311      	orrs	r1, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800562a:	06d2      	lsls	r2, r2, #27
 800562c:	430a      	orrs	r2, r1
 800562e:	4943      	ldr	r1, [pc, #268]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 8005630:	4313      	orrs	r3, r2
 8005632:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005634:	4b41      	ldr	r3, [pc, #260]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a40      	ldr	r2, [pc, #256]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 800563a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800563e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005640:	4b3e      	ldr	r3, [pc, #248]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a3d      	ldr	r2, [pc, #244]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 8005646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800564a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fc fc2c 	bl	8001ea8 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005654:	f7fc fc28 	bl	8001ea8 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e066      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005666:	4b35      	ldr	r3, [pc, #212]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f0      	beq.n	8005654 <HAL_RCC_OscConfig+0x530>
 8005672:	e05e      	b.n	8005732 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005674:	4b31      	ldr	r3, [pc, #196]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a30      	ldr	r2, [pc, #192]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 800567a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800567e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fc fc12 	bl	8001ea8 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005688:	f7fc fc0e 	bl	8001ea8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e04c      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569a:	4b28      	ldr	r3, [pc, #160]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056a6:	4b25      	ldr	r3, [pc, #148]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	4924      	ldr	r1, [pc, #144]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 80056ac:	4b25      	ldr	r3, [pc, #148]	@ (8005744 <HAL_RCC_OscConfig+0x620>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	60cb      	str	r3, [r1, #12]
 80056b2:	e03e      	b.n	8005732 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e039      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056c0:	4b1e      	ldr	r3, [pc, #120]	@ (800573c <HAL_RCC_OscConfig+0x618>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f003 0203 	and.w	r2, r3, #3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d12c      	bne.n	800572e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	3b01      	subs	r3, #1
 80056e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d123      	bne.n	800572e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d11b      	bne.n	800572e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005700:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005702:	429a      	cmp	r2, r3
 8005704:	d113      	bne.n	800572e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	3b01      	subs	r3, #1
 8005714:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005716:	429a      	cmp	r2, r3
 8005718:	d109      	bne.n	800572e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005724:	085b      	lsrs	r3, r3, #1
 8005726:	3b01      	subs	r3, #1
 8005728:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d001      	beq.n	8005732 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40021000 	.word	0x40021000
 8005740:	019f800c 	.word	0x019f800c
 8005744:	feeefffc 	.word	0xfeeefffc

08005748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e11e      	b.n	800599e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b91      	ldr	r3, [pc, #580]	@ (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d910      	bls.n	8005790 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b8e      	ldr	r3, [pc, #568]	@ (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 020f 	bic.w	r2, r3, #15
 8005776:	498c      	ldr	r1, [pc, #560]	@ (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b8a      	ldr	r3, [pc, #552]	@ (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e106      	b.n	800599e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d073      	beq.n	8005884 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d129      	bne.n	80057f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a4:	4b81      	ldr	r3, [pc, #516]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0f4      	b.n	800599e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057b4:	f000 f9d0 	bl	8005b58 <RCC_GetSysClockFreqFromPLLSource>
 80057b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	4a7c      	ldr	r2, [pc, #496]	@ (80059b0 <HAL_RCC_ClockConfig+0x268>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d93f      	bls.n	8005842 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057c2:	4b7a      	ldr	r3, [pc, #488]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d033      	beq.n	8005842 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d12f      	bne.n	8005842 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057e2:	4b72      	ldr	r3, [pc, #456]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057ea:	4a70      	ldr	r2, [pc, #448]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 80057ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057f2:	2380      	movs	r3, #128	@ 0x80
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e024      	b.n	8005842 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d107      	bne.n	8005810 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005800:	4b6a      	ldr	r3, [pc, #424]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d109      	bne.n	8005820 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0c6      	b.n	800599e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005810:	4b66      	ldr	r3, [pc, #408]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0be      	b.n	800599e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005820:	f000 f8ce 	bl	80059c0 <HAL_RCC_GetSysClockFreq>
 8005824:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4a61      	ldr	r2, [pc, #388]	@ (80059b0 <HAL_RCC_ClockConfig+0x268>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d909      	bls.n	8005842 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800582e:	4b5f      	ldr	r3, [pc, #380]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005836:	4a5d      	ldr	r2, [pc, #372]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 8005838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800583e:	2380      	movs	r3, #128	@ 0x80
 8005840:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005842:	4b5a      	ldr	r3, [pc, #360]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f023 0203 	bic.w	r2, r3, #3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	4957      	ldr	r1, [pc, #348]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 8005850:	4313      	orrs	r3, r2
 8005852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005854:	f7fc fb28 	bl	8001ea8 <HAL_GetTick>
 8005858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	e00a      	b.n	8005872 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800585c:	f7fc fb24 	bl	8001ea8 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e095      	b.n	800599e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005872:	4b4e      	ldr	r3, [pc, #312]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 020c 	and.w	r2, r3, #12
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	429a      	cmp	r2, r3
 8005882:	d1eb      	bne.n	800585c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d023      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800589c:	4b43      	ldr	r3, [pc, #268]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4a42      	ldr	r2, [pc, #264]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 80058a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058b4:	4b3d      	ldr	r3, [pc, #244]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058bc:	4a3b      	ldr	r2, [pc, #236]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 80058be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c4:	4b39      	ldr	r3, [pc, #228]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4936      	ldr	r1, [pc, #216]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	608b      	str	r3, [r1, #8]
 80058d6:	e008      	b.n	80058ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b80      	cmp	r3, #128	@ 0x80
 80058dc:	d105      	bne.n	80058ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058de:	4b33      	ldr	r3, [pc, #204]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	4a32      	ldr	r2, [pc, #200]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 80058e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058ea:	4b2f      	ldr	r3, [pc, #188]	@ (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d21d      	bcs.n	8005934 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f8:	4b2b      	ldr	r3, [pc, #172]	@ (80059a8 <HAL_RCC_ClockConfig+0x260>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f023 020f 	bic.w	r2, r3, #15
 8005900:	4929      	ldr	r1, [pc, #164]	@ (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	4313      	orrs	r3, r2
 8005906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005908:	f7fc face 	bl	8001ea8 <HAL_GetTick>
 800590c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800590e:	e00a      	b.n	8005926 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005910:	f7fc faca 	bl	8001ea8 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591e:	4293      	cmp	r3, r2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e03b      	b.n	800599e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005926:	4b20      	ldr	r3, [pc, #128]	@ (80059a8 <HAL_RCC_ClockConfig+0x260>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d1ed      	bne.n	8005910 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005940:	4b1a      	ldr	r3, [pc, #104]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4917      	ldr	r1, [pc, #92]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 800594e:	4313      	orrs	r3, r2
 8005950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800595e:	4b13      	ldr	r3, [pc, #76]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	490f      	ldr	r1, [pc, #60]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 800596e:	4313      	orrs	r3, r2
 8005970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005972:	f000 f825 	bl	80059c0 <HAL_RCC_GetSysClockFreq>
 8005976:	4602      	mov	r2, r0
 8005978:	4b0c      	ldr	r3, [pc, #48]	@ (80059ac <HAL_RCC_ClockConfig+0x264>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	091b      	lsrs	r3, r3, #4
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	490c      	ldr	r1, [pc, #48]	@ (80059b4 <HAL_RCC_ClockConfig+0x26c>)
 8005984:	5ccb      	ldrb	r3, [r1, r3]
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	fa22 f303 	lsr.w	r3, r2, r3
 800598e:	4a0a      	ldr	r2, [pc, #40]	@ (80059b8 <HAL_RCC_ClockConfig+0x270>)
 8005990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005992:	4b0a      	ldr	r3, [pc, #40]	@ (80059bc <HAL_RCC_ClockConfig+0x274>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f7fc f8be 	bl	8001b18 <HAL_InitTick>
 800599c:	4603      	mov	r3, r0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40022000 	.word	0x40022000
 80059ac:	40021000 	.word	0x40021000
 80059b0:	04c4b400 	.word	0x04c4b400
 80059b4:	0801139c 	.word	0x0801139c
 80059b8:	20000000 	.word	0x20000000
 80059bc:	20000004 	.word	0x20000004

080059c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d102      	bne.n	80059d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059d2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	e047      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059d8:	4b27      	ldr	r3, [pc, #156]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 030c 	and.w	r3, r3, #12
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d102      	bne.n	80059ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059e4:	4b26      	ldr	r3, [pc, #152]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	e03e      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80059ea:	4b23      	ldr	r3, [pc, #140]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
 80059f2:	2b0c      	cmp	r3, #12
 80059f4:	d136      	bne.n	8005a64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059f6:	4b20      	ldr	r3, [pc, #128]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a00:	4b1d      	ldr	r3, [pc, #116]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d10c      	bne.n	8005a2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a14:	4a1a      	ldr	r2, [pc, #104]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	4a16      	ldr	r2, [pc, #88]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a1e:	68d2      	ldr	r2, [r2, #12]
 8005a20:	0a12      	lsrs	r2, r2, #8
 8005a22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	617b      	str	r3, [r7, #20]
      break;
 8005a2c:	e00c      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a2e:	4a13      	ldr	r2, [pc, #76]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	4a10      	ldr	r2, [pc, #64]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a38:	68d2      	ldr	r2, [r2, #12]
 8005a3a:	0a12      	lsrs	r2, r2, #8
 8005a3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a40:	fb02 f303 	mul.w	r3, r2, r3
 8005a44:	617b      	str	r3, [r7, #20]
      break;
 8005a46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a48:	4b0b      	ldr	r3, [pc, #44]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	0e5b      	lsrs	r3, r3, #25
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	3301      	adds	r3, #1
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	e001      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a68:	693b      	ldr	r3, [r7, #16]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	00f42400 	.word	0x00f42400
 8005a80:	007a1200 	.word	0x007a1200

08005a84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a88:	4b03      	ldr	r3, [pc, #12]	@ (8005a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000000 	.word	0x20000000

08005a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005aa0:	f7ff fff0 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b06      	ldr	r3, [pc, #24]	@ (8005ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	0a1b      	lsrs	r3, r3, #8
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	4904      	ldr	r1, [pc, #16]	@ (8005ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ab2:	5ccb      	ldrb	r3, [r1, r3]
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	080113ac 	.word	0x080113ac

08005ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005acc:	f7ff ffda 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	0adb      	lsrs	r3, r3, #11
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	4904      	ldr	r1, [pc, #16]	@ (8005af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ade:	5ccb      	ldrb	r3, [r1, r3]
 8005ae0:	f003 031f 	and.w	r3, r3, #31
 8005ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40021000 	.word	0x40021000
 8005af0:	080113ac 	.word	0x080113ac

08005af4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	220f      	movs	r2, #15
 8005b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b04:	4b12      	ldr	r3, [pc, #72]	@ (8005b50 <HAL_RCC_GetClockConfig+0x5c>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 0203 	and.w	r2, r3, #3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b10:	4b0f      	ldr	r3, [pc, #60]	@ (8005b50 <HAL_RCC_GetClockConfig+0x5c>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b50 <HAL_RCC_GetClockConfig+0x5c>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005b28:	4b09      	ldr	r3, [pc, #36]	@ (8005b50 <HAL_RCC_GetClockConfig+0x5c>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	08db      	lsrs	r3, r3, #3
 8005b2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005b36:	4b07      	ldr	r3, [pc, #28]	@ (8005b54 <HAL_RCC_GetClockConfig+0x60>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 020f 	and.w	r2, r3, #15
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	601a      	str	r2, [r3, #0]
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40021000 	.word	0x40021000
 8005b54:	40022000 	.word	0x40022000

08005b58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b68:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d10c      	bne.n	8005b96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b7c:	4a17      	ldr	r2, [pc, #92]	@ (8005bdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b84:	4a14      	ldr	r2, [pc, #80]	@ (8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b86:	68d2      	ldr	r2, [r2, #12]
 8005b88:	0a12      	lsrs	r2, r2, #8
 8005b8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	617b      	str	r3, [r7, #20]
    break;
 8005b94:	e00c      	b.n	8005bb0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b96:	4a12      	ldr	r2, [pc, #72]	@ (8005be0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ba0:	68d2      	ldr	r2, [r2, #12]
 8005ba2:	0a12      	lsrs	r2, r2, #8
 8005ba4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ba8:	fb02 f303 	mul.w	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]
    break;
 8005bae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bb0:	4b09      	ldr	r3, [pc, #36]	@ (8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	0e5b      	lsrs	r3, r3, #25
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	3301      	adds	r3, #1
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005bca:	687b      	ldr	r3, [r7, #4]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	007a1200 	.word	0x007a1200
 8005be0:	00f42400 	.word	0x00f42400

08005be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bec:	2300      	movs	r3, #0
 8005bee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 8098 	beq.w	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c02:	2300      	movs	r3, #0
 8005c04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c06:	4b43      	ldr	r3, [pc, #268]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10d      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c12:	4b40      	ldr	r3, [pc, #256]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c16:	4a3f      	ldr	r2, [pc, #252]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a39      	ldr	r2, [pc, #228]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c3a:	f7fc f935 	bl	8001ea8 <HAL_GetTick>
 8005c3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c40:	e009      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c42:	f7fc f931 	bl	8001ea8 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d902      	bls.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	74fb      	strb	r3, [r7, #19]
        break;
 8005c54:	e005      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c56:	4b30      	ldr	r3, [pc, #192]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0ef      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c62:	7cfb      	ldrb	r3, [r7, #19]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d159      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c68:	4b2a      	ldr	r3, [pc, #168]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01e      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d019      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c84:	4b23      	ldr	r3, [pc, #140]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c90:	4b20      	ldr	r3, [pc, #128]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c96:	4a1f      	ldr	r2, [pc, #124]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cb0:	4a18      	ldr	r2, [pc, #96]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d016      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc2:	f7fc f8f1 	bl	8001ea8 <HAL_GetTick>
 8005cc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cc8:	e00b      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cca:	f7fc f8ed 	bl	8001ea8 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d902      	bls.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	74fb      	strb	r3, [r7, #19]
            break;
 8005ce0:	e006      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0ec      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005cf0:	7cfb      	ldrb	r3, [r7, #19]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cf6:	4b07      	ldr	r3, [pc, #28]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d04:	4903      	ldr	r1, [pc, #12]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d0c:	e008      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d0e:	7cfb      	ldrb	r3, [r7, #19]
 8005d10:	74bb      	strb	r3, [r7, #18]
 8005d12:	e005      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	7cfb      	ldrb	r3, [r7, #19]
 8005d1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d20:	7c7b      	ldrb	r3, [r7, #17]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d105      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d26:	4ba7      	ldr	r3, [pc, #668]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2a:	4aa6      	ldr	r2, [pc, #664]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d3e:	4ba1      	ldr	r3, [pc, #644]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d44:	f023 0203 	bic.w	r2, r3, #3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	499d      	ldr	r1, [pc, #628]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d60:	4b98      	ldr	r3, [pc, #608]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d66:	f023 020c 	bic.w	r2, r3, #12
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	4995      	ldr	r1, [pc, #596]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d82:	4b90      	ldr	r3, [pc, #576]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	498c      	ldr	r1, [pc, #560]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005da4:	4b87      	ldr	r3, [pc, #540]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005daa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	4984      	ldr	r1, [pc, #528]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0310 	and.w	r3, r3, #16
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dc6:	4b7f      	ldr	r3, [pc, #508]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	497b      	ldr	r1, [pc, #492]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005de8:	4b76      	ldr	r3, [pc, #472]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	4973      	ldr	r1, [pc, #460]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	496a      	ldr	r1, [pc, #424]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00a      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e2c:	4b65      	ldr	r3, [pc, #404]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	4962      	ldr	r1, [pc, #392]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e4e:	4b5d      	ldr	r3, [pc, #372]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	4959      	ldr	r1, [pc, #356]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e70:	4b54      	ldr	r3, [pc, #336]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e76:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7e:	4951      	ldr	r1, [pc, #324]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d015      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e92:	4b4c      	ldr	r3, [pc, #304]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e98:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea0:	4948      	ldr	r1, [pc, #288]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eb0:	d105      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eb2:	4b44      	ldr	r3, [pc, #272]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	4a43      	ldr	r2, [pc, #268]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ebc:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d015      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005eca:	4b3e      	ldr	r3, [pc, #248]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed8:	493a      	ldr	r1, [pc, #232]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ee8:	d105      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eea:	4b36      	ldr	r3, [pc, #216]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	4a35      	ldr	r2, [pc, #212]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ef4:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d015      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f02:	4b30      	ldr	r3, [pc, #192]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f08:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f10:	492c      	ldr	r1, [pc, #176]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f20:	d105      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f22:	4b28      	ldr	r3, [pc, #160]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	4a27      	ldr	r2, [pc, #156]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f2c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d015      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f3a:	4b22      	ldr	r3, [pc, #136]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f40:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	491e      	ldr	r1, [pc, #120]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f58:	d105      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	4a19      	ldr	r2, [pc, #100]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f64:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d015      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f72:	4b14      	ldr	r3, [pc, #80]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f78:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f80:	4910      	ldr	r1, [pc, #64]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f90:	d105      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f92:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	4a0b      	ldr	r2, [pc, #44]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f9c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d018      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005faa:	4b06      	ldr	r3, [pc, #24]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	4902      	ldr	r1, [pc, #8]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	e001      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fce:	d105      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fd0:	4b21      	ldr	r3, [pc, #132]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	4a20      	ldr	r2, [pc, #128]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fda:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d015      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff6:	4918      	ldr	r1, [pc, #96]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006006:	d105      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006008:	4b13      	ldr	r3, [pc, #76]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	4a12      	ldr	r2, [pc, #72]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800600e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006012:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d015      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006020:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006022:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006026:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800602e:	490a      	ldr	r1, [pc, #40]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006030:	4313      	orrs	r3, r2
 8006032:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800603a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800603e:	d105      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006040:	4b05      	ldr	r3, [pc, #20]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	4a04      	ldr	r2, [pc, #16]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800604a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800604c:	7cbb      	ldrb	r3, [r7, #18]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40021000 	.word	0x40021000

0800605c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e049      	b.n	8006102 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f841 	bl	800610a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f000 fa28 	bl	80064f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d001      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e04f      	b.n	80061d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a23      	ldr	r2, [pc, #140]	@ (80061e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01d      	beq.n	8006196 <HAL_TIM_Base_Start_IT+0x76>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006162:	d018      	beq.n	8006196 <HAL_TIM_Base_Start_IT+0x76>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1f      	ldr	r2, [pc, #124]	@ (80061e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <HAL_TIM_Base_Start_IT+0x76>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1e      	ldr	r2, [pc, #120]	@ (80061ec <HAL_TIM_Base_Start_IT+0xcc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00e      	beq.n	8006196 <HAL_TIM_Base_Start_IT+0x76>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1c      	ldr	r2, [pc, #112]	@ (80061f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d009      	beq.n	8006196 <HAL_TIM_Base_Start_IT+0x76>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1b      	ldr	r2, [pc, #108]	@ (80061f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d004      	beq.n	8006196 <HAL_TIM_Base_Start_IT+0x76>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a19      	ldr	r2, [pc, #100]	@ (80061f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d115      	bne.n	80061c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	4b17      	ldr	r3, [pc, #92]	@ (80061fc <HAL_TIM_Base_Start_IT+0xdc>)
 800619e:	4013      	ands	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b06      	cmp	r3, #6
 80061a6:	d015      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0xb4>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ae:	d011      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c0:	e008      	b.n	80061d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0201 	orr.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	e000      	b.n	80061d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	40012c00 	.word	0x40012c00
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40013400 	.word	0x40013400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40015000 	.word	0x40015000
 80061fc:	00010007 	.word	0x00010007

08006200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d020      	beq.n	8006264 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01b      	beq.n	8006264 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0202 	mvn.w	r2, #2
 8006234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f931 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 8006250:	e005      	b.n	800625e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f923 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f934 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d020      	beq.n	80062b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01b      	beq.n	80062b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0204 	mvn.w	r2, #4
 8006280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2202      	movs	r2, #2
 8006286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f90b 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 800629c:	e005      	b.n	80062aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f8fd 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f90e 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d020      	beq.n	80062fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01b      	beq.n	80062fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0208 	mvn.w	r2, #8
 80062cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2204      	movs	r2, #4
 80062d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f8e5 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 80062e8:	e005      	b.n	80062f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f8d7 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f8e8 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	d020      	beq.n	8006348 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b00      	cmp	r3, #0
 800630e:	d01b      	beq.n	8006348 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0210 	mvn.w	r2, #16
 8006318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2208      	movs	r2, #8
 800631e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f8bf 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 8006334:	e005      	b.n	8006342 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f8b1 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f8c2 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00c      	beq.n	800636c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d007      	beq.n	800636c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0201 	mvn.w	r2, #1
 8006364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fb fa88 	bl	800187c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006372:	2b00      	cmp	r3, #0
 8006374:	d104      	bne.n	8006380 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00c      	beq.n	800639a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f95f 	bl	8006658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00c      	beq.n	80063be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80063b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f957 	bl	800666c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00c      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f87c 	bl	80064da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00c      	beq.n	8006406 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f06f 0220 	mvn.w	r2, #32
 80063fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f91f 	bl	8006644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00c      	beq.n	800642a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d007      	beq.n	800642a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f92b 	bl	8006680 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00c      	beq.n	800644e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f923 	bl	8006694 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00c      	beq.n	8006472 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800646a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f91b 	bl	80066a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00c      	beq.n	8006496 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800648e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f913 	bl	80066bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
	...

080064f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a48      	ldr	r2, [pc, #288]	@ (8006624 <TIM_Base_SetConfig+0x134>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d013      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650e:	d00f      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a45      	ldr	r2, [pc, #276]	@ (8006628 <TIM_Base_SetConfig+0x138>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00b      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a44      	ldr	r2, [pc, #272]	@ (800662c <TIM_Base_SetConfig+0x13c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d007      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a43      	ldr	r2, [pc, #268]	@ (8006630 <TIM_Base_SetConfig+0x140>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_Base_SetConfig+0x40>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a42      	ldr	r2, [pc, #264]	@ (8006634 <TIM_Base_SetConfig+0x144>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d108      	bne.n	8006542 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a37      	ldr	r2, [pc, #220]	@ (8006624 <TIM_Base_SetConfig+0x134>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d01f      	beq.n	800658a <TIM_Base_SetConfig+0x9a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006550:	d01b      	beq.n	800658a <TIM_Base_SetConfig+0x9a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a34      	ldr	r2, [pc, #208]	@ (8006628 <TIM_Base_SetConfig+0x138>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d017      	beq.n	800658a <TIM_Base_SetConfig+0x9a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a33      	ldr	r2, [pc, #204]	@ (800662c <TIM_Base_SetConfig+0x13c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <TIM_Base_SetConfig+0x9a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a32      	ldr	r2, [pc, #200]	@ (8006630 <TIM_Base_SetConfig+0x140>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00f      	beq.n	800658a <TIM_Base_SetConfig+0x9a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a32      	ldr	r2, [pc, #200]	@ (8006638 <TIM_Base_SetConfig+0x148>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00b      	beq.n	800658a <TIM_Base_SetConfig+0x9a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a31      	ldr	r2, [pc, #196]	@ (800663c <TIM_Base_SetConfig+0x14c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d007      	beq.n	800658a <TIM_Base_SetConfig+0x9a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a30      	ldr	r2, [pc, #192]	@ (8006640 <TIM_Base_SetConfig+0x150>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <TIM_Base_SetConfig+0x9a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a2b      	ldr	r2, [pc, #172]	@ (8006634 <TIM_Base_SetConfig+0x144>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d108      	bne.n	800659c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a18      	ldr	r2, [pc, #96]	@ (8006624 <TIM_Base_SetConfig+0x134>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <TIM_Base_SetConfig+0x100>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a19      	ldr	r2, [pc, #100]	@ (8006630 <TIM_Base_SetConfig+0x140>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00f      	beq.n	80065f0 <TIM_Base_SetConfig+0x100>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a19      	ldr	r2, [pc, #100]	@ (8006638 <TIM_Base_SetConfig+0x148>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00b      	beq.n	80065f0 <TIM_Base_SetConfig+0x100>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a18      	ldr	r2, [pc, #96]	@ (800663c <TIM_Base_SetConfig+0x14c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d007      	beq.n	80065f0 <TIM_Base_SetConfig+0x100>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a17      	ldr	r2, [pc, #92]	@ (8006640 <TIM_Base_SetConfig+0x150>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_Base_SetConfig+0x100>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a12      	ldr	r2, [pc, #72]	@ (8006634 <TIM_Base_SetConfig+0x144>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d103      	bne.n	80065f8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b01      	cmp	r3, #1
 8006608:	d105      	bne.n	8006616 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f023 0201 	bic.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	611a      	str	r2, [r3, #16]
  }
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40012c00 	.word	0x40012c00
 8006628:	40000400 	.word	0x40000400
 800662c:	40000800 	.word	0x40000800
 8006630:	40013400 	.word	0x40013400
 8006634:	40015000 	.word	0x40015000
 8006638:	40014000 	.word	0x40014000
 800663c:	40014400 	.word	0x40014400
 8006640:	40014800 	.word	0x40014800

08006644 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e042      	b.n	8006768 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fb f9b7 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2224      	movs	r2, #36	@ 0x24
 80066fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0201 	bic.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fb24 	bl	8006d68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f825 	bl	8006770 <UART_SetConfig>
 8006726:	4603      	mov	r3, r0
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e01b      	b.n	8006768 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800673e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800674e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fba3 	bl	8006eac <UART_CheckIdleState>
 8006766:	4603      	mov	r3, r0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006774:	b08c      	sub	sp, #48	@ 0x30
 8006776:	af00      	add	r7, sp, #0
 8006778:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	431a      	orrs	r2, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	431a      	orrs	r2, r3
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	4313      	orrs	r3, r2
 8006796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4baa      	ldr	r3, [pc, #680]	@ (8006a48 <UART_SetConfig+0x2d8>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	6812      	ldr	r2, [r2, #0]
 80067a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067a8:	430b      	orrs	r3, r1
 80067aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a9f      	ldr	r2, [pc, #636]	@ (8006a4c <UART_SetConfig+0x2dc>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d004      	beq.n	80067dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067d8:	4313      	orrs	r3, r2
 80067da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80067e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067f0:	430b      	orrs	r3, r1
 80067f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fa:	f023 010f 	bic.w	r1, r3, #15
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a90      	ldr	r2, [pc, #576]	@ (8006a50 <UART_SetConfig+0x2e0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d125      	bne.n	8006860 <UART_SetConfig+0xf0>
 8006814:	4b8f      	ldr	r3, [pc, #572]	@ (8006a54 <UART_SetConfig+0x2e4>)
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b03      	cmp	r3, #3
 8006820:	d81a      	bhi.n	8006858 <UART_SetConfig+0xe8>
 8006822:	a201      	add	r2, pc, #4	@ (adr r2, 8006828 <UART_SetConfig+0xb8>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	08006839 	.word	0x08006839
 800682c:	08006849 	.word	0x08006849
 8006830:	08006841 	.word	0x08006841
 8006834:	08006851 	.word	0x08006851
 8006838:	2301      	movs	r3, #1
 800683a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683e:	e116      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006840:	2302      	movs	r3, #2
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006846:	e112      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006848:	2304      	movs	r3, #4
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684e:	e10e      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006850:	2308      	movs	r3, #8
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006856:	e10a      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006858:	2310      	movs	r3, #16
 800685a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800685e:	e106      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a7c      	ldr	r2, [pc, #496]	@ (8006a58 <UART_SetConfig+0x2e8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d138      	bne.n	80068dc <UART_SetConfig+0x16c>
 800686a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a54 <UART_SetConfig+0x2e4>)
 800686c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006870:	f003 030c 	and.w	r3, r3, #12
 8006874:	2b0c      	cmp	r3, #12
 8006876:	d82d      	bhi.n	80068d4 <UART_SetConfig+0x164>
 8006878:	a201      	add	r2, pc, #4	@ (adr r2, 8006880 <UART_SetConfig+0x110>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	080068b5 	.word	0x080068b5
 8006884:	080068d5 	.word	0x080068d5
 8006888:	080068d5 	.word	0x080068d5
 800688c:	080068d5 	.word	0x080068d5
 8006890:	080068c5 	.word	0x080068c5
 8006894:	080068d5 	.word	0x080068d5
 8006898:	080068d5 	.word	0x080068d5
 800689c:	080068d5 	.word	0x080068d5
 80068a0:	080068bd 	.word	0x080068bd
 80068a4:	080068d5 	.word	0x080068d5
 80068a8:	080068d5 	.word	0x080068d5
 80068ac:	080068d5 	.word	0x080068d5
 80068b0:	080068cd 	.word	0x080068cd
 80068b4:	2300      	movs	r3, #0
 80068b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ba:	e0d8      	b.n	8006a6e <UART_SetConfig+0x2fe>
 80068bc:	2302      	movs	r3, #2
 80068be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c2:	e0d4      	b.n	8006a6e <UART_SetConfig+0x2fe>
 80068c4:	2304      	movs	r3, #4
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ca:	e0d0      	b.n	8006a6e <UART_SetConfig+0x2fe>
 80068cc:	2308      	movs	r3, #8
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d2:	e0cc      	b.n	8006a6e <UART_SetConfig+0x2fe>
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068da:	e0c8      	b.n	8006a6e <UART_SetConfig+0x2fe>
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a5e      	ldr	r2, [pc, #376]	@ (8006a5c <UART_SetConfig+0x2ec>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d125      	bne.n	8006932 <UART_SetConfig+0x1c2>
 80068e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a54 <UART_SetConfig+0x2e4>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80068f0:	2b30      	cmp	r3, #48	@ 0x30
 80068f2:	d016      	beq.n	8006922 <UART_SetConfig+0x1b2>
 80068f4:	2b30      	cmp	r3, #48	@ 0x30
 80068f6:	d818      	bhi.n	800692a <UART_SetConfig+0x1ba>
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	d00a      	beq.n	8006912 <UART_SetConfig+0x1a2>
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d814      	bhi.n	800692a <UART_SetConfig+0x1ba>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <UART_SetConfig+0x19a>
 8006904:	2b10      	cmp	r3, #16
 8006906:	d008      	beq.n	800691a <UART_SetConfig+0x1aa>
 8006908:	e00f      	b.n	800692a <UART_SetConfig+0x1ba>
 800690a:	2300      	movs	r3, #0
 800690c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006910:	e0ad      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006912:	2302      	movs	r3, #2
 8006914:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006918:	e0a9      	b.n	8006a6e <UART_SetConfig+0x2fe>
 800691a:	2304      	movs	r3, #4
 800691c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006920:	e0a5      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006922:	2308      	movs	r3, #8
 8006924:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006928:	e0a1      	b.n	8006a6e <UART_SetConfig+0x2fe>
 800692a:	2310      	movs	r3, #16
 800692c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006930:	e09d      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a4a      	ldr	r2, [pc, #296]	@ (8006a60 <UART_SetConfig+0x2f0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d125      	bne.n	8006988 <UART_SetConfig+0x218>
 800693c:	4b45      	ldr	r3, [pc, #276]	@ (8006a54 <UART_SetConfig+0x2e4>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006942:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006946:	2bc0      	cmp	r3, #192	@ 0xc0
 8006948:	d016      	beq.n	8006978 <UART_SetConfig+0x208>
 800694a:	2bc0      	cmp	r3, #192	@ 0xc0
 800694c:	d818      	bhi.n	8006980 <UART_SetConfig+0x210>
 800694e:	2b80      	cmp	r3, #128	@ 0x80
 8006950:	d00a      	beq.n	8006968 <UART_SetConfig+0x1f8>
 8006952:	2b80      	cmp	r3, #128	@ 0x80
 8006954:	d814      	bhi.n	8006980 <UART_SetConfig+0x210>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <UART_SetConfig+0x1f0>
 800695a:	2b40      	cmp	r3, #64	@ 0x40
 800695c:	d008      	beq.n	8006970 <UART_SetConfig+0x200>
 800695e:	e00f      	b.n	8006980 <UART_SetConfig+0x210>
 8006960:	2300      	movs	r3, #0
 8006962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006966:	e082      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006968:	2302      	movs	r3, #2
 800696a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800696e:	e07e      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006976:	e07a      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800697e:	e076      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006986:	e072      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a35      	ldr	r2, [pc, #212]	@ (8006a64 <UART_SetConfig+0x2f4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d12a      	bne.n	80069e8 <UART_SetConfig+0x278>
 8006992:	4b30      	ldr	r3, [pc, #192]	@ (8006a54 <UART_SetConfig+0x2e4>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800699c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069a0:	d01a      	beq.n	80069d8 <UART_SetConfig+0x268>
 80069a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069a6:	d81b      	bhi.n	80069e0 <UART_SetConfig+0x270>
 80069a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ac:	d00c      	beq.n	80069c8 <UART_SetConfig+0x258>
 80069ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b2:	d815      	bhi.n	80069e0 <UART_SetConfig+0x270>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <UART_SetConfig+0x250>
 80069b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069bc:	d008      	beq.n	80069d0 <UART_SetConfig+0x260>
 80069be:	e00f      	b.n	80069e0 <UART_SetConfig+0x270>
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069c6:	e052      	b.n	8006a6e <UART_SetConfig+0x2fe>
 80069c8:	2302      	movs	r3, #2
 80069ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ce:	e04e      	b.n	8006a6e <UART_SetConfig+0x2fe>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069d6:	e04a      	b.n	8006a6e <UART_SetConfig+0x2fe>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069de:	e046      	b.n	8006a6e <UART_SetConfig+0x2fe>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e6:	e042      	b.n	8006a6e <UART_SetConfig+0x2fe>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a17      	ldr	r2, [pc, #92]	@ (8006a4c <UART_SetConfig+0x2dc>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d13a      	bne.n	8006a68 <UART_SetConfig+0x2f8>
 80069f2:	4b18      	ldr	r3, [pc, #96]	@ (8006a54 <UART_SetConfig+0x2e4>)
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a00:	d01a      	beq.n	8006a38 <UART_SetConfig+0x2c8>
 8006a02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a06:	d81b      	bhi.n	8006a40 <UART_SetConfig+0x2d0>
 8006a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a0c:	d00c      	beq.n	8006a28 <UART_SetConfig+0x2b8>
 8006a0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a12:	d815      	bhi.n	8006a40 <UART_SetConfig+0x2d0>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <UART_SetConfig+0x2b0>
 8006a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a1c:	d008      	beq.n	8006a30 <UART_SetConfig+0x2c0>
 8006a1e:	e00f      	b.n	8006a40 <UART_SetConfig+0x2d0>
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a26:	e022      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2e:	e01e      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006a30:	2304      	movs	r3, #4
 8006a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a36:	e01a      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006a38:	2308      	movs	r3, #8
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3e:	e016      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006a40:	2310      	movs	r3, #16
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a46:	e012      	b.n	8006a6e <UART_SetConfig+0x2fe>
 8006a48:	cfff69f3 	.word	0xcfff69f3
 8006a4c:	40008000 	.word	0x40008000
 8006a50:	40013800 	.word	0x40013800
 8006a54:	40021000 	.word	0x40021000
 8006a58:	40004400 	.word	0x40004400
 8006a5c:	40004800 	.word	0x40004800
 8006a60:	40004c00 	.word	0x40004c00
 8006a64:	40005000 	.word	0x40005000
 8006a68:	2310      	movs	r3, #16
 8006a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4aae      	ldr	r2, [pc, #696]	@ (8006d2c <UART_SetConfig+0x5bc>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	f040 8097 	bne.w	8006ba8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d823      	bhi.n	8006aca <UART_SetConfig+0x35a>
 8006a82:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <UART_SetConfig+0x318>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006aad 	.word	0x08006aad
 8006a8c:	08006acb 	.word	0x08006acb
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006acb 	.word	0x08006acb
 8006a98:	08006abb 	.word	0x08006abb
 8006a9c:	08006acb 	.word	0x08006acb
 8006aa0:	08006acb 	.word	0x08006acb
 8006aa4:	08006acb 	.word	0x08006acb
 8006aa8:	08006ac3 	.word	0x08006ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aac:	f7fe fff6 	bl	8005a9c <HAL_RCC_GetPCLK1Freq>
 8006ab0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ab2:	e010      	b.n	8006ad6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab4:	4b9e      	ldr	r3, [pc, #632]	@ (8006d30 <UART_SetConfig+0x5c0>)
 8006ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ab8:	e00d      	b.n	8006ad6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aba:	f7fe ff81 	bl	80059c0 <HAL_RCC_GetSysClockFreq>
 8006abe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ac0:	e009      	b.n	8006ad6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ac8:	e005      	b.n	8006ad6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ad4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 8130 	beq.w	8006d3e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae2:	4a94      	ldr	r2, [pc, #592]	@ (8006d34 <UART_SetConfig+0x5c4>)
 8006ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	4613      	mov	r3, r2
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	4413      	add	r3, r2
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d305      	bcc.n	8006b0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d903      	bls.n	8006b16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b14:	e113      	b.n	8006d3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	2200      	movs	r2, #0
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	60fa      	str	r2, [r7, #12]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b22:	4a84      	ldr	r2, [pc, #528]	@ (8006d34 <UART_SetConfig+0x5c4>)
 8006b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	603b      	str	r3, [r7, #0]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b38:	f7fa f85e 	bl	8000bf8 <__aeabi_uldivmod>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4610      	mov	r0, r2
 8006b42:	4619      	mov	r1, r3
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	020b      	lsls	r3, r1, #8
 8006b4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b52:	0202      	lsls	r2, r0, #8
 8006b54:	6979      	ldr	r1, [r7, #20]
 8006b56:	6849      	ldr	r1, [r1, #4]
 8006b58:	0849      	lsrs	r1, r1, #1
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	4605      	mov	r5, r0
 8006b60:	eb12 0804 	adds.w	r8, r2, r4
 8006b64:	eb43 0905 	adc.w	r9, r3, r5
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	469a      	mov	sl, r3
 8006b70:	4693      	mov	fp, r2
 8006b72:	4652      	mov	r2, sl
 8006b74:	465b      	mov	r3, fp
 8006b76:	4640      	mov	r0, r8
 8006b78:	4649      	mov	r1, r9
 8006b7a:	f7fa f83d 	bl	8000bf8 <__aeabi_uldivmod>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4613      	mov	r3, r2
 8006b84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b8c:	d308      	bcc.n	8006ba0 <UART_SetConfig+0x430>
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b94:	d204      	bcs.n	8006ba0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6a3a      	ldr	r2, [r7, #32]
 8006b9c:	60da      	str	r2, [r3, #12]
 8006b9e:	e0ce      	b.n	8006d3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ba6:	e0ca      	b.n	8006d3e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bb0:	d166      	bne.n	8006c80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006bb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d827      	bhi.n	8006c0a <UART_SetConfig+0x49a>
 8006bba:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc0 <UART_SetConfig+0x450>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006bed 	.word	0x08006bed
 8006bc8:	08006bf5 	.word	0x08006bf5
 8006bcc:	08006c0b 	.word	0x08006c0b
 8006bd0:	08006bfb 	.word	0x08006bfb
 8006bd4:	08006c0b 	.word	0x08006c0b
 8006bd8:	08006c0b 	.word	0x08006c0b
 8006bdc:	08006c0b 	.word	0x08006c0b
 8006be0:	08006c03 	.word	0x08006c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be4:	f7fe ff5a 	bl	8005a9c <HAL_RCC_GetPCLK1Freq>
 8006be8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bea:	e014      	b.n	8006c16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bec:	f7fe ff6c 	bl	8005ac8 <HAL_RCC_GetPCLK2Freq>
 8006bf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bf2:	e010      	b.n	8006c16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8006d30 <UART_SetConfig+0x5c0>)
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bf8:	e00d      	b.n	8006c16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bfa:	f7fe fee1 	bl	80059c0 <HAL_RCC_GetSysClockFreq>
 8006bfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c00:	e009      	b.n	8006c16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c08:	e005      	b.n	8006c16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8090 	beq.w	8006d3e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c22:	4a44      	ldr	r2, [pc, #272]	@ (8006d34 <UART_SetConfig+0x5c4>)
 8006c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c30:	005a      	lsls	r2, r3, #1
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	441a      	add	r2, r3
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d916      	bls.n	8006c78 <UART_SetConfig+0x508>
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c50:	d212      	bcs.n	8006c78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f023 030f 	bic.w	r3, r3, #15
 8006c5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	085b      	lsrs	r3, r3, #1
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	8bfb      	ldrh	r3, [r7, #30]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	8bfa      	ldrh	r2, [r7, #30]
 8006c74:	60da      	str	r2, [r3, #12]
 8006c76:	e062      	b.n	8006d3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c7e:	e05e      	b.n	8006d3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d828      	bhi.n	8006cda <UART_SetConfig+0x56a>
 8006c88:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <UART_SetConfig+0x520>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006cbd 	.word	0x08006cbd
 8006c98:	08006cc5 	.word	0x08006cc5
 8006c9c:	08006cdb 	.word	0x08006cdb
 8006ca0:	08006ccb 	.word	0x08006ccb
 8006ca4:	08006cdb 	.word	0x08006cdb
 8006ca8:	08006cdb 	.word	0x08006cdb
 8006cac:	08006cdb 	.word	0x08006cdb
 8006cb0:	08006cd3 	.word	0x08006cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb4:	f7fe fef2 	bl	8005a9c <HAL_RCC_GetPCLK1Freq>
 8006cb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cba:	e014      	b.n	8006ce6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cbc:	f7fe ff04 	bl	8005ac8 <HAL_RCC_GetPCLK2Freq>
 8006cc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cc2:	e010      	b.n	8006ce6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d30 <UART_SetConfig+0x5c0>)
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cc8:	e00d      	b.n	8006ce6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cca:	f7fe fe79 	bl	80059c0 <HAL_RCC_GetSysClockFreq>
 8006cce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cd0:	e009      	b.n	8006ce6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cd8:	e005      	b.n	8006ce6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ce4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d028      	beq.n	8006d3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf0:	4a10      	ldr	r2, [pc, #64]	@ (8006d34 <UART_SetConfig+0x5c4>)
 8006cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	441a      	add	r2, r3
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	2b0f      	cmp	r3, #15
 8006d14:	d910      	bls.n	8006d38 <UART_SetConfig+0x5c8>
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1c:	d20c      	bcs.n	8006d38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60da      	str	r2, [r3, #12]
 8006d28:	e009      	b.n	8006d3e <UART_SetConfig+0x5ce>
 8006d2a:	bf00      	nop
 8006d2c:	40008000 	.word	0x40008000
 8006d30:	00f42400 	.word	0x00f42400
 8006d34:	080113c4 	.word	0x080113c4
      }
      else
      {
        ret = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2200      	movs	r2, #0
 8006d52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2200      	movs	r2, #0
 8006d58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d5a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3730      	adds	r7, #48	@ 0x30
 8006d62:	46bd      	mov	sp, r7
 8006d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01a      	beq.n	8006e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e66:	d10a      	bne.n	8006e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b098      	sub	sp, #96	@ 0x60
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ebc:	f7fa fff4 	bl	8001ea8 <HAL_GetTick>
 8006ec0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d12f      	bne.n	8006f30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f88e 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d022      	beq.n	8006f30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e6      	bne.n	8006eea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e063      	b.n	8006ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d149      	bne.n	8006fd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f46:	2200      	movs	r2, #0
 8006f48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f857 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d03c      	beq.n	8006fd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	623b      	str	r3, [r7, #32]
   return(result);
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e6      	bne.n	8006f58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3308      	adds	r3, #8
 8006f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f023 0301 	bic.w	r3, r3, #1
 8006fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006faa:	61fa      	str	r2, [r7, #28]
 8006fac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	69b9      	ldr	r1, [r7, #24]
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e5      	bne.n	8006f8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e012      	b.n	8006ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3758      	adds	r7, #88	@ 0x58
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007010:	e04f      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007018:	d04b      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701a:	f7fa ff45 	bl	8001ea8 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <UART_WaitOnFlagUntilTimeout+0x30>
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e04e      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d037      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b80      	cmp	r3, #128	@ 0x80
 8007046:	d034      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b40      	cmp	r3, #64	@ 0x40
 800704c:	d031      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b08      	cmp	r3, #8
 800705a:	d110      	bne.n	800707e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2208      	movs	r2, #8
 8007062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f838 	bl	80070da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2208      	movs	r2, #8
 800706e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e029      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800708c:	d111      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 f81e 	bl	80070da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e00f      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4013      	ands	r3, r2
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	429a      	cmp	r2, r3
 80070c0:	bf0c      	ite	eq
 80070c2:	2301      	moveq	r3, #1
 80070c4:	2300      	movne	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d0a0      	beq.n	8007012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070da:	b480      	push	{r7}
 80070dc:	b095      	sub	sp, #84	@ 0x54
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007100:	643b      	str	r3, [r7, #64]	@ 0x40
 8007102:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007106:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e6      	bne.n	80070e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	61fb      	str	r3, [r7, #28]
   return(result);
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800712a:	f023 0301 	bic.w	r3, r3, #1
 800712e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3308      	adds	r3, #8
 8007136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007138:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800713a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800713e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e3      	bne.n	8007114 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007150:	2b01      	cmp	r3, #1
 8007152:	d118      	bne.n	8007186 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	60bb      	str	r3, [r7, #8]
   return(result);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f023 0310 	bic.w	r3, r3, #16
 8007168:	647b      	str	r3, [r7, #68]	@ 0x44
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007172:	61bb      	str	r3, [r7, #24]
 8007174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6979      	ldr	r1, [r7, #20]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	613b      	str	r3, [r7, #16]
   return(result);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e6      	bne.n	8007154 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800719a:	bf00      	nop
 800719c:	3754      	adds	r7, #84	@ 0x54
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_UARTEx_DisableFifoMode+0x16>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e027      	b.n	800720c <HAL_UARTEx_DisableFifoMode+0x66>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2224      	movs	r2, #36	@ 0x24
 80071c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800722c:	2302      	movs	r3, #2
 800722e:	e02d      	b.n	800728c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2224      	movs	r2, #36	@ 0x24
 800723c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0201 	bic.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f84f 	bl	8007310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e02d      	b.n	8007308 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2224      	movs	r2, #36	@ 0x24
 80072b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0201 	bic.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f811 	bl	8007310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800731c:	2b00      	cmp	r3, #0
 800731e:	d108      	bne.n	8007332 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007330:	e031      	b.n	8007396 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007332:	2308      	movs	r3, #8
 8007334:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007336:	2308      	movs	r3, #8
 8007338:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	0e5b      	lsrs	r3, r3, #25
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	0f5b      	lsrs	r3, r3, #29
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	7b3a      	ldrb	r2, [r7, #12]
 800735e:	4911      	ldr	r1, [pc, #68]	@ (80073a4 <UARTEx_SetNbDataToProcess+0x94>)
 8007360:	5c8a      	ldrb	r2, [r1, r2]
 8007362:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007366:	7b3a      	ldrb	r2, [r7, #12]
 8007368:	490f      	ldr	r1, [pc, #60]	@ (80073a8 <UARTEx_SetNbDataToProcess+0x98>)
 800736a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800736c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	7b7a      	ldrb	r2, [r7, #13]
 800737c:	4909      	ldr	r1, [pc, #36]	@ (80073a4 <UARTEx_SetNbDataToProcess+0x94>)
 800737e:	5c8a      	ldrb	r2, [r1, r2]
 8007380:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007384:	7b7a      	ldrb	r2, [r7, #13]
 8007386:	4908      	ldr	r1, [pc, #32]	@ (80073a8 <UARTEx_SetNbDataToProcess+0x98>)
 8007388:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800738a:	fb93 f3f2 	sdiv	r3, r3, r2
 800738e:	b29a      	uxth	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	080113dc 	.word	0x080113dc
 80073a8:	080113e4 	.word	0x080113e4

080073ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073bc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80073c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80073da:	b480      	push	{r7}
 80073dc:	b085      	sub	sp, #20
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073e2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80073e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	43db      	mvns	r3, r3
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	4013      	ands	r3, r2
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	1d3b      	adds	r3, r7, #4
 800741a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800744c:	b480      	push	{r7}
 800744e:	b0a7      	sub	sp, #156	@ 0x9c
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800746e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007472:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	78db      	ldrb	r3, [r3, #3]
 800747a:	2b03      	cmp	r3, #3
 800747c:	d81f      	bhi.n	80074be <USB_ActivateEndpoint+0x72>
 800747e:	a201      	add	r2, pc, #4	@ (adr r2, 8007484 <USB_ActivateEndpoint+0x38>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	08007495 	.word	0x08007495
 8007488:	080074b1 	.word	0x080074b1
 800748c:	080074c7 	.word	0x080074c7
 8007490:	080074a3 	.word	0x080074a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007494:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007498:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800749c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074a0:	e012      	b.n	80074c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80074a2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074a6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80074aa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074ae:	e00b      	b.n	80074c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80074b0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074b8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074bc:	e004      	b.n	80074c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80074c4:	e000      	b.n	80074c8 <USB_ActivateEndpoint+0x7c>
      break;
 80074c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	441a      	add	r2, r3
 80074d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	b21b      	sxth	r3, r3
 80074fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007502:	b21a      	sxth	r2, r3
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	b21b      	sxth	r3, r3
 800750a:	4313      	orrs	r3, r2
 800750c:	b21b      	sxth	r3, r3
 800750e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	441a      	add	r2, r3
 800751c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800752c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007530:	b29b      	uxth	r3, r3
 8007532:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	7b1b      	ldrb	r3, [r3, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f040 8180 	bne.w	800783e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 8084 	beq.w	8007650 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007552:	b29b      	uxth	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	4413      	add	r3, r2
 800755a:	61bb      	str	r3, [r7, #24]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	00da      	lsls	r2, r3, #3
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	88db      	ldrh	r3, [r3, #6]
 8007570:	085b      	lsrs	r3, r3, #1
 8007572:	b29b      	uxth	r3, r3
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	827b      	strh	r3, [r7, #18]
 800758a:	8a7b      	ldrh	r3, [r7, #18]
 800758c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01b      	beq.n	80075cc <USB_ActivateEndpoint+0x180>
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075aa:	823b      	strh	r3, [r7, #16]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	441a      	add	r2, r3
 80075b6:	8a3b      	ldrh	r3, [r7, #16]
 80075b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	78db      	ldrb	r3, [r3, #3]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d020      	beq.n	8007616 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075ea:	81bb      	strh	r3, [r7, #12]
 80075ec:	89bb      	ldrh	r3, [r7, #12]
 80075ee:	f083 0320 	eor.w	r3, r3, #32
 80075f2:	81bb      	strh	r3, [r7, #12]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	441a      	add	r2, r3
 80075fe:	89bb      	ldrh	r3, [r7, #12]
 8007600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800760c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007610:	b29b      	uxth	r3, r3
 8007612:	8013      	strh	r3, [r2, #0]
 8007614:	e3f9      	b.n	8007e0a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b29b      	uxth	r3, r3
 8007624:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800762c:	81fb      	strh	r3, [r7, #14]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	441a      	add	r2, r3
 8007638:	89fb      	ldrh	r3, [r7, #14]
 800763a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800763e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800764a:	b29b      	uxth	r3, r3
 800764c:	8013      	strh	r3, [r2, #0]
 800764e:	e3dc      	b.n	8007e0a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	633b      	str	r3, [r7, #48]	@ 0x30
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800765a:	b29b      	uxth	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007660:	4413      	add	r3, r2
 8007662:	633b      	str	r3, [r7, #48]	@ 0x30
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	00da      	lsls	r2, r3, #3
 800766a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766c:	4413      	add	r3, r2
 800766e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007672:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	88db      	ldrh	r3, [r3, #6]
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	b29b      	uxth	r3, r3
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	b29a      	uxth	r2, r3
 8007680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007682:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800768e:	b29b      	uxth	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007694:	4413      	add	r3, r2
 8007696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	00da      	lsls	r2, r3, #3
 800769e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a0:	4413      	add	r3, r2
 80076a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <USB_ActivateEndpoint+0x28a>
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	801a      	strh	r2, [r3, #0]
 80076d4:	e041      	b.n	800775a <USB_ActivateEndpoint+0x30e>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b3e      	cmp	r3, #62	@ 0x3e
 80076dc:	d81c      	bhi.n	8007718 <USB_ActivateEndpoint+0x2cc>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	085b      	lsrs	r3, r3, #1
 80076e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d004      	beq.n	80076fe <USB_ActivateEndpoint+0x2b2>
 80076f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076f8:	3301      	adds	r3, #1
 80076fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b29a      	uxth	r2, r3
 8007704:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007708:	b29b      	uxth	r3, r3
 800770a:	029b      	lsls	r3, r3, #10
 800770c:	b29b      	uxth	r3, r3
 800770e:	4313      	orrs	r3, r2
 8007710:	b29a      	uxth	r2, r3
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007714:	801a      	strh	r2, [r3, #0]
 8007716:	e020      	b.n	800775a <USB_ActivateEndpoint+0x30e>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	095b      	lsrs	r3, r3, #5
 800771e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	2b00      	cmp	r3, #0
 800772c:	d104      	bne.n	8007738 <USB_ActivateEndpoint+0x2ec>
 800772e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007732:	3b01      	subs	r3, #1
 8007734:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b29a      	uxth	r2, r3
 800773e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007742:	b29b      	uxth	r3, r3
 8007744:	029b      	lsls	r3, r3, #10
 8007746:	b29b      	uxth	r3, r3
 8007748:	4313      	orrs	r3, r2
 800774a:	b29b      	uxth	r3, r3
 800774c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007754:	b29a      	uxth	r2, r3
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007768:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800776a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d01b      	beq.n	80077aa <USB_ActivateEndpoint+0x35e>
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007788:	843b      	strh	r3, [r7, #32]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	441a      	add	r2, r3
 8007794:	8c3b      	ldrh	r3, [r7, #32]
 8007796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800779a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800779e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d124      	bne.n	80077fc <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077c8:	83bb      	strh	r3, [r7, #28]
 80077ca:	8bbb      	ldrh	r3, [r7, #28]
 80077cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80077d0:	83bb      	strh	r3, [r7, #28]
 80077d2:	8bbb      	ldrh	r3, [r7, #28]
 80077d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80077d8:	83bb      	strh	r3, [r7, #28]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	441a      	add	r2, r3
 80077e4:	8bbb      	ldrh	r3, [r7, #28]
 80077e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	8013      	strh	r3, [r2, #0]
 80077fa:	e306      	b.n	8007e0a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800780e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007812:	83fb      	strh	r3, [r7, #30]
 8007814:	8bfb      	ldrh	r3, [r7, #30]
 8007816:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800781a:	83fb      	strh	r3, [r7, #30]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	441a      	add	r2, r3
 8007826:	8bfb      	ldrh	r3, [r7, #30]
 8007828:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800782c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007830:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007838:	b29b      	uxth	r3, r3
 800783a:	8013      	strh	r3, [r2, #0]
 800783c:	e2e5      	b.n	8007e0a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	78db      	ldrb	r3, [r3, #3]
 8007842:	2b02      	cmp	r3, #2
 8007844:	d11e      	bne.n	8007884 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	b29b      	uxth	r3, r3
 8007854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800785c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	441a      	add	r2, r3
 800786a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800786e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007876:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800787a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800787e:	b29b      	uxth	r3, r3
 8007880:	8013      	strh	r3, [r2, #0]
 8007882:	e01d      	b.n	80078c0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800789a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	441a      	add	r2, r3
 80078a8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80078ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078bc:	b29b      	uxth	r3, r3
 80078be:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078d0:	4413      	add	r3, r2
 80078d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	00da      	lsls	r2, r3, #3
 80078da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	891b      	ldrh	r3, [r3, #8]
 80078e8:	085b      	lsrs	r3, r3, #1
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078fe:	b29b      	uxth	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007904:	4413      	add	r3, r2
 8007906:	677b      	str	r3, [r7, #116]	@ 0x74
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	00da      	lsls	r2, r3, #3
 800790e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007910:	4413      	add	r3, r2
 8007912:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007916:	673b      	str	r3, [r7, #112]	@ 0x70
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	895b      	ldrh	r3, [r3, #10]
 800791c:	085b      	lsrs	r3, r3, #1
 800791e:	b29b      	uxth	r3, r3
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007926:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 81af 	bne.w	8007c90 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8007942:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8007946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d01d      	beq.n	800798a <USB_ActivateEndpoint+0x53e>
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007964:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	441a      	add	r2, r3
 8007972:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800797a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800797e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007986:	b29b      	uxth	r3, r3
 8007988:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800799a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800799e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d01d      	beq.n	80079e2 <USB_ActivateEndpoint+0x596>
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079bc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	441a      	add	r2, r3
 80079ca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80079ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079de:	b29b      	uxth	r3, r3
 80079e0:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	785b      	ldrb	r3, [r3, #1]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d16b      	bne.n	8007ac2 <USB_ActivateEndpoint+0x676>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	461a      	mov	r2, r3
 80079f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079fa:	4413      	add	r3, r2
 80079fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	00da      	lsls	r2, r3, #3
 8007a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a06:	4413      	add	r3, r2
 8007a08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10a      	bne.n	8007a3c <USB_ActivateEndpoint+0x5f0>
 8007a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	e05d      	b.n	8007af8 <USB_ActivateEndpoint+0x6ac>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a42:	d81c      	bhi.n	8007a7e <USB_ActivateEndpoint+0x632>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d004      	beq.n	8007a64 <USB_ActivateEndpoint+0x618>
 8007a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a5e:	3301      	adds	r3, #1
 8007a60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	029b      	lsls	r3, r3, #10
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	4313      	orrs	r3, r2
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a7a:	801a      	strh	r2, [r3, #0]
 8007a7c:	e03c      	b.n	8007af8 <USB_ActivateEndpoint+0x6ac>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	f003 031f 	and.w	r3, r3, #31
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d104      	bne.n	8007a9e <USB_ActivateEndpoint+0x652>
 8007a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	029b      	lsls	r3, r3, #10
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	e01a      	b.n	8007af8 <USB_ActivateEndpoint+0x6ac>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d116      	bne.n	8007af8 <USB_ActivateEndpoint+0x6ac>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ada:	4413      	add	r3, r2
 8007adc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	00da      	lsls	r2, r3, #3
 8007ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007aec:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007af6:	801a      	strh	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	785b      	ldrb	r3, [r3, #1]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d16b      	bne.n	8007bdc <USB_ActivateEndpoint+0x790>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b14:	4413      	add	r3, r2
 8007b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	00da      	lsls	r2, r3, #3
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b20:	4413      	add	r3, r2
 8007b22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b36:	801a      	strh	r2, [r3, #0]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <USB_ActivateEndpoint+0x70a>
 8007b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b52:	801a      	strh	r2, [r3, #0]
 8007b54:	e05b      	b.n	8007c0e <USB_ActivateEndpoint+0x7c2>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b5c:	d81c      	bhi.n	8007b98 <USB_ActivateEndpoint+0x74c>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <USB_ActivateEndpoint+0x732>
 8007b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b78:	3301      	adds	r3, #1
 8007b7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	029b      	lsls	r3, r3, #10
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b94:	801a      	strh	r2, [r3, #0]
 8007b96:	e03a      	b.n	8007c0e <USB_ActivateEndpoint+0x7c2>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	095b      	lsrs	r3, r3, #5
 8007b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 031f 	and.w	r3, r3, #31
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d104      	bne.n	8007bb8 <USB_ActivateEndpoint+0x76c>
 8007bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	029b      	lsls	r3, r3, #10
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	e018      	b.n	8007c0e <USB_ActivateEndpoint+0x7c2>
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d114      	bne.n	8007c0e <USB_ActivateEndpoint+0x7c2>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bf0:	4413      	add	r3, r2
 8007bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	00da      	lsls	r2, r3, #3
 8007bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c0c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c24:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c28:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c34:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	441a      	add	r2, r3
 8007c40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c6c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	441a      	add	r2, r3
 8007c78:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	8013      	strh	r3, [r2, #0]
 8007c8e:	e0bc      	b.n	8007e0a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007ca0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01d      	beq.n	8007ce8 <USB_ActivateEndpoint+0x89c>
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cc2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	441a      	add	r2, r3
 8007cd0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007cd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007cf8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01d      	beq.n	8007d40 <USB_ActivateEndpoint+0x8f4>
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d1a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	441a      	add	r2, r3
 8007d28:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007d2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	78db      	ldrb	r3, [r3, #3]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d024      	beq.n	8007d92 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d5e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007d62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007d66:	f083 0320 	eor.w	r3, r3, #32
 8007d6a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	441a      	add	r2, r3
 8007d78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	8013      	strh	r3, [r2, #0]
 8007d90:	e01d      	b.n	8007dce <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007da8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	441a      	add	r2, r3
 8007db6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007dba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007de4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	441a      	add	r2, r3
 8007df2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007e0a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	379c      	adds	r7, #156	@ 0x9c
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop

08007e1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b08d      	sub	sp, #52	@ 0x34
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	7b1b      	ldrb	r3, [r3, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f040 808e 	bne.w	8007f4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d044      	beq.n	8007ec2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	81bb      	strh	r3, [r7, #12]
 8007e46:	89bb      	ldrh	r3, [r7, #12]
 8007e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01b      	beq.n	8007e88 <USB_DeactivateEndpoint+0x6c>
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e66:	817b      	strh	r3, [r7, #10]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	441a      	add	r2, r3
 8007e72:	897b      	ldrh	r3, [r7, #10]
 8007e74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e80:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e9e:	813b      	strh	r3, [r7, #8]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	441a      	add	r2, r3
 8007eaa:	893b      	ldrh	r3, [r7, #8]
 8007eac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	8013      	strh	r3, [r2, #0]
 8007ec0:	e192      	b.n	80081e8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	827b      	strh	r3, [r7, #18]
 8007ed0:	8a7b      	ldrh	r3, [r7, #18]
 8007ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01b      	beq.n	8007f12 <USB_DeactivateEndpoint+0xf6>
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ef0:	823b      	strh	r3, [r7, #16]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	441a      	add	r2, r3
 8007efc:	8a3b      	ldrh	r3, [r7, #16]
 8007efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f28:	81fb      	strh	r3, [r7, #14]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	441a      	add	r2, r3
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	8013      	strh	r3, [r2, #0]
 8007f4a:	e14d      	b.n	80081e8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	785b      	ldrb	r3, [r3, #1]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f040 80a5 	bne.w	80080a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	843b      	strh	r3, [r7, #32]
 8007f64:	8c3b      	ldrh	r3, [r7, #32]
 8007f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d01b      	beq.n	8007fa6 <USB_DeactivateEndpoint+0x18a>
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f84:	83fb      	strh	r3, [r7, #30]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	441a      	add	r2, r3
 8007f90:	8bfb      	ldrh	r3, [r7, #30]
 8007f92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	83bb      	strh	r3, [r7, #28]
 8007fb4:	8bbb      	ldrh	r3, [r7, #28]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d01b      	beq.n	8007ff6 <USB_DeactivateEndpoint+0x1da>
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fd4:	837b      	strh	r3, [r7, #26]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	441a      	add	r2, r3
 8007fe0:	8b7b      	ldrh	r3, [r7, #26]
 8007fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800800c:	833b      	strh	r3, [r7, #24]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	8b3b      	ldrh	r3, [r7, #24]
 800801a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800801e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008026:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800802a:	b29b      	uxth	r3, r3
 800802c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008044:	82fb      	strh	r3, [r7, #22]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	441a      	add	r2, r3
 8008050:	8afb      	ldrh	r3, [r7, #22]
 8008052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800805a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800805e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008062:	b29b      	uxth	r3, r3
 8008064:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	b29b      	uxth	r3, r3
 8008074:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800807c:	82bb      	strh	r3, [r7, #20]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	441a      	add	r2, r3
 8008088:	8abb      	ldrh	r3, [r7, #20]
 800808a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800808e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800809a:	b29b      	uxth	r3, r3
 800809c:	8013      	strh	r3, [r2, #0]
 800809e:	e0a3      	b.n	80081e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80080ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80080b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01b      	beq.n	80080f0 <USB_DeactivateEndpoint+0x2d4>
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ce:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	441a      	add	r2, r3
 80080da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80080dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80080fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01b      	beq.n	8008140 <USB_DeactivateEndpoint+0x324>
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800811a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	441a      	add	r2, r3
 800812a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800812c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008138:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800813c:	b29b      	uxth	r3, r3
 800813e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	b29b      	uxth	r3, r3
 800814e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008156:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	441a      	add	r2, r3
 8008162:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008164:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008168:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800816c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008174:	b29b      	uxth	r3, r3
 8008176:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800818a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800818e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	441a      	add	r2, r3
 800819a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800819c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	441a      	add	r2, r3
 80081d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3734      	adds	r7, #52	@ 0x34
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b0ac      	sub	sp, #176	@ 0xb0
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	2b01      	cmp	r3, #1
 8008206:	f040 84ca 	bne.w	8008b9e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	699a      	ldr	r2, [r3, #24]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	429a      	cmp	r2, r3
 8008214:	d904      	bls.n	8008220 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800821e:	e003      	b.n	8008228 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	7b1b      	ldrb	r3, [r3, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d122      	bne.n	8008276 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	6959      	ldr	r1, [r3, #20]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	88da      	ldrh	r2, [r3, #6]
 8008238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800823c:	b29b      	uxth	r3, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 febd 	bl	8008fbe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800824e:	b29b      	uxth	r3, r3
 8008250:	461a      	mov	r2, r3
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	4413      	add	r3, r2
 8008256:	613b      	str	r3, [r7, #16]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	00da      	lsls	r2, r3, #3
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	4413      	add	r3, r2
 8008262:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800826c:	b29a      	uxth	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	f000 bc6f 	b.w	8008b54 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	78db      	ldrb	r3, [r3, #3]
 800827a:	2b02      	cmp	r3, #2
 800827c:	f040 831e 	bne.w	80088bc <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	6a1a      	ldr	r2, [r3, #32]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	429a      	cmp	r2, r3
 800828a:	f240 82cf 	bls.w	800882c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	b29b      	uxth	r3, r3
 800829c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	441a      	add	r2, r3
 80082b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80082b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082be:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80082c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6a1a      	ldr	r2, [r3, #32]
 80082ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082d2:	1ad2      	subs	r2, r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 814f 	beq.w	800858e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	785b      	ldrb	r3, [r3, #1]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d16b      	bne.n	80083d4 <USB_EPStartXfer+0x1de>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008306:	b29b      	uxth	r3, r3
 8008308:	461a      	mov	r2, r3
 800830a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830c:	4413      	add	r3, r2
 800830e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	00da      	lsls	r2, r3, #3
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	4413      	add	r3, r2
 800831a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800831e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008322:	881b      	ldrh	r3, [r3, #0]
 8008324:	b29b      	uxth	r3, r3
 8008326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800832a:	b29a      	uxth	r2, r3
 800832c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832e:	801a      	strh	r2, [r3, #0]
 8008330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <USB_EPStartXfer+0x158>
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008346:	b29a      	uxth	r2, r3
 8008348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834a:	801a      	strh	r2, [r3, #0]
 800834c:	e05b      	b.n	8008406 <USB_EPStartXfer+0x210>
 800834e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008352:	2b3e      	cmp	r3, #62	@ 0x3e
 8008354:	d81c      	bhi.n	8008390 <USB_EPStartXfer+0x19a>
 8008356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800835a:	085b      	lsrs	r3, r3, #1
 800835c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d004      	beq.n	8008376 <USB_EPStartXfer+0x180>
 800836c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008370:	3301      	adds	r3, #1
 8008372:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	b29a      	uxth	r2, r3
 800837c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008380:	b29b      	uxth	r3, r3
 8008382:	029b      	lsls	r3, r3, #10
 8008384:	b29b      	uxth	r3, r3
 8008386:	4313      	orrs	r3, r2
 8008388:	b29a      	uxth	r2, r3
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	801a      	strh	r2, [r3, #0]
 800838e:	e03a      	b.n	8008406 <USB_EPStartXfer+0x210>
 8008390:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800839a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800839e:	f003 031f 	and.w	r3, r3, #31
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d104      	bne.n	80083b0 <USB_EPStartXfer+0x1ba>
 80083a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083aa:	3b01      	subs	r3, #1
 80083ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	029b      	lsls	r3, r3, #10
 80083be:	b29b      	uxth	r3, r3
 80083c0:	4313      	orrs	r3, r2
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d0:	801a      	strh	r2, [r3, #0]
 80083d2:	e018      	b.n	8008406 <USB_EPStartXfer+0x210>
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	785b      	ldrb	r3, [r3, #1]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d114      	bne.n	8008406 <USB_EPStartXfer+0x210>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	4413      	add	r3, r2
 80083ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	00da      	lsls	r2, r3, #3
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	4413      	add	r3, r2
 80083f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008400:	b29a      	uxth	r2, r3
 8008402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008404:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	895b      	ldrh	r3, [r3, #10]
 800840a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	6959      	ldr	r1, [r3, #20]
 8008412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008416:	b29b      	uxth	r3, r3
 8008418:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fdce 	bl	8008fbe <USB_WritePMA>
            ep->xfer_buff += len;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	695a      	ldr	r2, [r3, #20]
 8008426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800842a:	441a      	add	r2, r3
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	6a1a      	ldr	r2, [r3, #32]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	429a      	cmp	r2, r3
 800843a:	d907      	bls.n	800844c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	6a1a      	ldr	r2, [r3, #32]
 8008440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008444:	1ad2      	subs	r2, r2, r3
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	621a      	str	r2, [r3, #32]
 800844a:	e006      	b.n	800845a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2200      	movs	r2, #0
 8008458:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	785b      	ldrb	r3, [r3, #1]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d16b      	bne.n	800853a <USB_EPStartXfer+0x344>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	61bb      	str	r3, [r7, #24]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800846c:	b29b      	uxth	r3, r3
 800846e:	461a      	mov	r2, r3
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	4413      	add	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	00da      	lsls	r2, r3, #3
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	4413      	add	r3, r2
 8008480:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008484:	617b      	str	r3, [r7, #20]
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b29b      	uxth	r3, r3
 800848c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008490:	b29a      	uxth	r2, r3
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	801a      	strh	r2, [r3, #0]
 8008496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <USB_EPStartXfer+0x2be>
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	801a      	strh	r2, [r3, #0]
 80084b2:	e05d      	b.n	8008570 <USB_EPStartXfer+0x37a>
 80084b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80084ba:	d81c      	bhi.n	80084f6 <USB_EPStartXfer+0x300>
 80084bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084c0:	085b      	lsrs	r3, r3, #1
 80084c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <USB_EPStartXfer+0x2e6>
 80084d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084d6:	3301      	adds	r3, #1
 80084d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	029b      	lsls	r3, r3, #10
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	4313      	orrs	r3, r2
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	e03c      	b.n	8008570 <USB_EPStartXfer+0x37a>
 80084f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084fa:	095b      	lsrs	r3, r3, #5
 80084fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008504:	f003 031f 	and.w	r3, r3, #31
 8008508:	2b00      	cmp	r3, #0
 800850a:	d104      	bne.n	8008516 <USB_EPStartXfer+0x320>
 800850c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008510:	3b01      	subs	r3, #1
 8008512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	b29a      	uxth	r2, r3
 800851c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008520:	b29b      	uxth	r3, r3
 8008522:	029b      	lsls	r3, r3, #10
 8008524:	b29b      	uxth	r3, r3
 8008526:	4313      	orrs	r3, r2
 8008528:	b29b      	uxth	r3, r3
 800852a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800852e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008532:	b29a      	uxth	r2, r3
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	e01a      	b.n	8008570 <USB_EPStartXfer+0x37a>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d116      	bne.n	8008570 <USB_EPStartXfer+0x37a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	623b      	str	r3, [r7, #32]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800854c:	b29b      	uxth	r3, r3
 800854e:	461a      	mov	r2, r3
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	4413      	add	r3, r2
 8008554:	623b      	str	r3, [r7, #32]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	00da      	lsls	r2, r3, #3
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	4413      	add	r3, r2
 8008560:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008564:	61fb      	str	r3, [r7, #28]
 8008566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800856a:	b29a      	uxth	r2, r3
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	891b      	ldrh	r3, [r3, #8]
 8008574:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	6959      	ldr	r1, [r3, #20]
 800857c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008580:	b29b      	uxth	r3, r3
 8008582:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fd19 	bl	8008fbe <USB_WritePMA>
 800858c:	e2e2      	b.n	8008b54 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	785b      	ldrb	r3, [r3, #1]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d16b      	bne.n	800866e <USB_EPStartXfer+0x478>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085a6:	4413      	add	r3, r2
 80085a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	00da      	lsls	r2, r3, #3
 80085b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085b2:	4413      	add	r3, r2
 80085b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085c8:	801a      	strh	r2, [r3, #0]
 80085ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <USB_EPStartXfer+0x3f2>
 80085d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085e4:	801a      	strh	r2, [r3, #0]
 80085e6:	e05d      	b.n	80086a4 <USB_EPStartXfer+0x4ae>
 80085e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80085ee:	d81c      	bhi.n	800862a <USB_EPStartXfer+0x434>
 80085f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085f4:	085b      	lsrs	r3, r3, #1
 80085f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	d004      	beq.n	8008610 <USB_EPStartXfer+0x41a>
 8008606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800860a:	3301      	adds	r3, #1
 800860c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29a      	uxth	r2, r3
 8008616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800861a:	b29b      	uxth	r3, r3
 800861c:	029b      	lsls	r3, r3, #10
 800861e:	b29b      	uxth	r3, r3
 8008620:	4313      	orrs	r3, r2
 8008622:	b29a      	uxth	r2, r3
 8008624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008626:	801a      	strh	r2, [r3, #0]
 8008628:	e03c      	b.n	80086a4 <USB_EPStartXfer+0x4ae>
 800862a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800862e:	095b      	lsrs	r3, r3, #5
 8008630:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008638:	f003 031f 	and.w	r3, r3, #31
 800863c:	2b00      	cmp	r3, #0
 800863e:	d104      	bne.n	800864a <USB_EPStartXfer+0x454>
 8008640:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008644:	3b01      	subs	r3, #1
 8008646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800864a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29a      	uxth	r2, r3
 8008650:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008654:	b29b      	uxth	r3, r3
 8008656:	029b      	lsls	r3, r3, #10
 8008658:	b29b      	uxth	r3, r3
 800865a:	4313      	orrs	r3, r2
 800865c:	b29b      	uxth	r3, r3
 800865e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008666:	b29a      	uxth	r2, r3
 8008668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800866a:	801a      	strh	r2, [r3, #0]
 800866c:	e01a      	b.n	80086a4 <USB_EPStartXfer+0x4ae>
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d116      	bne.n	80086a4 <USB_EPStartXfer+0x4ae>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	653b      	str	r3, [r7, #80]	@ 0x50
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008680:	b29b      	uxth	r3, r3
 8008682:	461a      	mov	r2, r3
 8008684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008686:	4413      	add	r3, r2
 8008688:	653b      	str	r3, [r7, #80]	@ 0x50
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	00da      	lsls	r2, r3, #3
 8008690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008692:	4413      	add	r3, r2
 8008694:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800869a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800869e:	b29a      	uxth	r2, r3
 80086a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	891b      	ldrh	r3, [r3, #8]
 80086a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	6959      	ldr	r1, [r3, #20]
 80086b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fc7f 	bl	8008fbe <USB_WritePMA>
            ep->xfer_buff += len;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	695a      	ldr	r2, [r3, #20]
 80086c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086c8:	441a      	add	r2, r3
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6a1a      	ldr	r2, [r3, #32]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d907      	bls.n	80086ea <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	6a1a      	ldr	r2, [r3, #32]
 80086de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086e2:	1ad2      	subs	r2, r2, r3
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	621a      	str	r2, [r3, #32]
 80086e8:	e006      	b.n	80086f8 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2200      	movs	r2, #0
 80086f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	785b      	ldrb	r3, [r3, #1]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d16b      	bne.n	80087dc <USB_EPStartXfer+0x5e6>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800870e:	b29b      	uxth	r3, r3
 8008710:	461a      	mov	r2, r3
 8008712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008714:	4413      	add	r3, r2
 8008716:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	00da      	lsls	r2, r3, #3
 800871e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008720:	4413      	add	r3, r2
 8008722:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008726:	637b      	str	r3, [r7, #52]	@ 0x34
 8008728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	b29b      	uxth	r3, r3
 800872e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008732:	b29a      	uxth	r2, r3
 8008734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008736:	801a      	strh	r2, [r3, #0]
 8008738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10a      	bne.n	8008756 <USB_EPStartXfer+0x560>
 8008740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29b      	uxth	r3, r3
 8008746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800874e:	b29a      	uxth	r2, r3
 8008750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008752:	801a      	strh	r2, [r3, #0]
 8008754:	e05b      	b.n	800880e <USB_EPStartXfer+0x618>
 8008756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800875a:	2b3e      	cmp	r3, #62	@ 0x3e
 800875c:	d81c      	bhi.n	8008798 <USB_EPStartXfer+0x5a2>
 800875e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008762:	085b      	lsrs	r3, r3, #1
 8008764:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <USB_EPStartXfer+0x588>
 8008774:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008778:	3301      	adds	r3, #1
 800877a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800877e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b29a      	uxth	r2, r3
 8008784:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008788:	b29b      	uxth	r3, r3
 800878a:	029b      	lsls	r3, r3, #10
 800878c:	b29b      	uxth	r3, r3
 800878e:	4313      	orrs	r3, r2
 8008790:	b29a      	uxth	r2, r3
 8008792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008794:	801a      	strh	r2, [r3, #0]
 8008796:	e03a      	b.n	800880e <USB_EPStartXfer+0x618>
 8008798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800879c:	095b      	lsrs	r3, r3, #5
 800879e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087a6:	f003 031f 	and.w	r3, r3, #31
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d104      	bne.n	80087b8 <USB_EPStartXfer+0x5c2>
 80087ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087b2:	3b01      	subs	r3, #1
 80087b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	b29a      	uxth	r2, r3
 80087be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	029b      	lsls	r3, r3, #10
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	4313      	orrs	r3, r2
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d8:	801a      	strh	r2, [r3, #0]
 80087da:	e018      	b.n	800880e <USB_EPStartXfer+0x618>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	785b      	ldrb	r3, [r3, #1]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d114      	bne.n	800880e <USB_EPStartXfer+0x618>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	461a      	mov	r2, r3
 80087ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087f0:	4413      	add	r3, r2
 80087f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	00da      	lsls	r2, r3, #3
 80087fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087fc:	4413      	add	r3, r2
 80087fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008808:	b29a      	uxth	r2, r3
 800880a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800880c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	895b      	ldrh	r3, [r3, #10]
 8008812:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	6959      	ldr	r1, [r3, #20]
 800881a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800881e:	b29b      	uxth	r3, r3
 8008820:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fbca 	bl	8008fbe <USB_WritePMA>
 800882a:	e193      	b.n	8008b54 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	881b      	ldrh	r3, [r3, #0]
 8008840:	b29b      	uxth	r3, r3
 8008842:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800884a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	441a      	add	r2, r3
 8008858:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800885c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800886c:	b29b      	uxth	r3, r3
 800886e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800887a:	b29b      	uxth	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008880:	4413      	add	r3, r2
 8008882:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	00da      	lsls	r2, r3, #3
 800888a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800888c:	4413      	add	r3, r2
 800888e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008892:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008898:	b29a      	uxth	r2, r3
 800889a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800889c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	891b      	ldrh	r3, [r3, #8]
 80088a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	6959      	ldr	r1, [r3, #20]
 80088aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fb82 	bl	8008fbe <USB_WritePMA>
 80088ba:	e14b      	b.n	8008b54 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	6a1a      	ldr	r2, [r3, #32]
 80088c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088c4:	1ad2      	subs	r2, r2, r3
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 809a 	beq.w	8008a16 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d16b      	bne.n	80089c6 <USB_EPStartXfer+0x7d0>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	461a      	mov	r2, r3
 80088fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088fe:	4413      	add	r3, r2
 8008900:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	00da      	lsls	r2, r3, #3
 8008908:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800890a:	4413      	add	r3, r2
 800890c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008910:	667b      	str	r3, [r7, #100]	@ 0x64
 8008912:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	b29b      	uxth	r3, r3
 8008918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800891c:	b29a      	uxth	r2, r3
 800891e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008920:	801a      	strh	r2, [r3, #0]
 8008922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10a      	bne.n	8008940 <USB_EPStartXfer+0x74a>
 800892a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	b29b      	uxth	r3, r3
 8008930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008938:	b29a      	uxth	r2, r3
 800893a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800893c:	801a      	strh	r2, [r3, #0]
 800893e:	e05b      	b.n	80089f8 <USB_EPStartXfer+0x802>
 8008940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008944:	2b3e      	cmp	r3, #62	@ 0x3e
 8008946:	d81c      	bhi.n	8008982 <USB_EPStartXfer+0x78c>
 8008948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800894c:	085b      	lsrs	r3, r3, #1
 800894e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d004      	beq.n	8008968 <USB_EPStartXfer+0x772>
 800895e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008962:	3301      	adds	r3, #1
 8008964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008968:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	b29a      	uxth	r2, r3
 800896e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008972:	b29b      	uxth	r3, r3
 8008974:	029b      	lsls	r3, r3, #10
 8008976:	b29b      	uxth	r3, r3
 8008978:	4313      	orrs	r3, r2
 800897a:	b29a      	uxth	r2, r3
 800897c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	e03a      	b.n	80089f8 <USB_EPStartXfer+0x802>
 8008982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800898c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008990:	f003 031f 	and.w	r3, r3, #31
 8008994:	2b00      	cmp	r3, #0
 8008996:	d104      	bne.n	80089a2 <USB_EPStartXfer+0x7ac>
 8008998:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800899c:	3b01      	subs	r3, #1
 800899e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	029b      	lsls	r3, r3, #10
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	4313      	orrs	r3, r2
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089be:	b29a      	uxth	r2, r3
 80089c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089c2:	801a      	strh	r2, [r3, #0]
 80089c4:	e018      	b.n	80089f8 <USB_EPStartXfer+0x802>
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d114      	bne.n	80089f8 <USB_EPStartXfer+0x802>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	461a      	mov	r2, r3
 80089d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089da:	4413      	add	r3, r2
 80089dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	00da      	lsls	r2, r3, #3
 80089e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089e6:	4413      	add	r3, r2
 80089e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80089ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	895b      	ldrh	r3, [r3, #10]
 80089fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	6959      	ldr	r1, [r3, #20]
 8008a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fad5 	bl	8008fbe <USB_WritePMA>
 8008a14:	e09e      	b.n	8008b54 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	785b      	ldrb	r3, [r3, #1]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d16b      	bne.n	8008af6 <USB_EPStartXfer+0x900>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a2e:	4413      	add	r3, r2
 8008a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	00da      	lsls	r2, r3, #3
 8008a38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a50:	801a      	strh	r2, [r3, #0]
 8008a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10a      	bne.n	8008a70 <USB_EPStartXfer+0x87a>
 8008a5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a6c:	801a      	strh	r2, [r3, #0]
 8008a6e:	e063      	b.n	8008b38 <USB_EPStartXfer+0x942>
 8008a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a74:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a76:	d81c      	bhi.n	8008ab2 <USB_EPStartXfer+0x8bc>
 8008a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a7c:	085b      	lsrs	r3, r3, #1
 8008a7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <USB_EPStartXfer+0x8a2>
 8008a8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a92:	3301      	adds	r3, #1
 8008a94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	029b      	lsls	r3, r3, #10
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aae:	801a      	strh	r2, [r3, #0]
 8008ab0:	e042      	b.n	8008b38 <USB_EPStartXfer+0x942>
 8008ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ab6:	095b      	lsrs	r3, r3, #5
 8008ab8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ac0:	f003 031f 	and.w	r3, r3, #31
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d104      	bne.n	8008ad2 <USB_EPStartXfer+0x8dc>
 8008ac8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008acc:	3b01      	subs	r3, #1
 8008ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ad2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	029b      	lsls	r3, r3, #10
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008af2:	801a      	strh	r2, [r3, #0]
 8008af4:	e020      	b.n	8008b38 <USB_EPStartXfer+0x942>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	785b      	ldrb	r3, [r3, #1]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d11c      	bne.n	8008b38 <USB_EPStartXfer+0x942>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b12:	4413      	add	r3, r2
 8008b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	00da      	lsls	r2, r3, #3
 8008b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b22:	4413      	add	r3, r2
 8008b24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	891b      	ldrh	r3, [r3, #8]
 8008b3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	6959      	ldr	r1, [r3, #20]
 8008b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fa35 	bl	8008fbe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b6a:	817b      	strh	r3, [r7, #10]
 8008b6c:	897b      	ldrh	r3, [r7, #10]
 8008b6e:	f083 0310 	eor.w	r3, r3, #16
 8008b72:	817b      	strh	r3, [r7, #10]
 8008b74:	897b      	ldrh	r3, [r7, #10]
 8008b76:	f083 0320 	eor.w	r3, r3, #32
 8008b7a:	817b      	strh	r3, [r7, #10]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	441a      	add	r2, r3
 8008b86:	897b      	ldrh	r3, [r7, #10]
 8008b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	8013      	strh	r3, [r2, #0]
 8008b9c:	e0d5      	b.n	8008d4a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	7b1b      	ldrb	r3, [r3, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d156      	bne.n	8008c54 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d122      	bne.n	8008bf4 <USB_EPStartXfer+0x9fe>
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	78db      	ldrb	r3, [r3, #3]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d11e      	bne.n	8008bf4 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bcc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	441a      	add	r2, r3
 8008bda:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008be6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	8013      	strh	r3, [r2, #0]
 8008bf2:	e01d      	b.n	8008c30 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c0a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	441a      	add	r2, r3
 8008c18:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	699a      	ldr	r2, [r3, #24]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d907      	bls.n	8008c4c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	699a      	ldr	r2, [r3, #24]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	1ad2      	subs	r2, r2, r3
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	619a      	str	r2, [r3, #24]
 8008c4a:	e054      	b.n	8008cf6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	619a      	str	r2, [r3, #24]
 8008c52:	e050      	b.n	8008cf6 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	78db      	ldrb	r3, [r3, #3]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d142      	bne.n	8008ce2 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d048      	beq.n	8008cf6 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d005      	beq.n	8008c8c <USB_EPStartXfer+0xa96>
 8008c80:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10b      	bne.n	8008ca4 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c8c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d12e      	bne.n	8008cf6 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c98:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d128      	bne.n	8008cf6 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cba:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	441a      	add	r2, r3
 8008cc8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	8013      	strh	r3, [r2, #0]
 8008ce0:	e009      	b.n	8008cf6 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	78db      	ldrb	r3, [r3, #3]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d103      	bne.n	8008cf2 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2200      	movs	r2, #0
 8008cee:	619a      	str	r2, [r3, #24]
 8008cf0:	e001      	b.n	8008cf6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e02a      	b.n	8008d4c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d0c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d14:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d18:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d24:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	441a      	add	r2, r3
 8008d32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	37b0      	adds	r7, #176	@ 0xb0
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	785b      	ldrb	r3, [r3, #1]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d020      	beq.n	8008da8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d7c:	81bb      	strh	r3, [r7, #12]
 8008d7e:	89bb      	ldrh	r3, [r7, #12]
 8008d80:	f083 0310 	eor.w	r3, r3, #16
 8008d84:	81bb      	strh	r3, [r7, #12]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	441a      	add	r2, r3
 8008d90:	89bb      	ldrh	r3, [r7, #12]
 8008d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	8013      	strh	r3, [r2, #0]
 8008da6:	e01f      	b.n	8008de8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dbe:	81fb      	strh	r3, [r7, #14]
 8008dc0:	89fb      	ldrh	r3, [r7, #14]
 8008dc2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008dc6:	81fb      	strh	r3, [r7, #14]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	441a      	add	r2, r3
 8008dd2:	89fb      	ldrh	r3, [r7, #14]
 8008dd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b087      	sub	sp, #28
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	785b      	ldrb	r3, [r3, #1]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d04c      	beq.n	8008ea2 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	823b      	strh	r3, [r7, #16]
 8008e16:	8a3b      	ldrh	r3, [r7, #16]
 8008e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d01b      	beq.n	8008e58 <USB_EPClearStall+0x62>
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e36:	81fb      	strh	r3, [r7, #14]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	441a      	add	r2, r3
 8008e42:	89fb      	ldrh	r3, [r7, #14]
 8008e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	78db      	ldrb	r3, [r3, #3]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d06c      	beq.n	8008f3a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e76:	81bb      	strh	r3, [r7, #12]
 8008e78:	89bb      	ldrh	r3, [r7, #12]
 8008e7a:	f083 0320 	eor.w	r3, r3, #32
 8008e7e:	81bb      	strh	r3, [r7, #12]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	441a      	add	r2, r3
 8008e8a:	89bb      	ldrh	r3, [r7, #12]
 8008e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	8013      	strh	r3, [r2, #0]
 8008ea0:	e04b      	b.n	8008f3a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	82fb      	strh	r3, [r7, #22]
 8008eb0:	8afb      	ldrh	r3, [r7, #22]
 8008eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d01b      	beq.n	8008ef2 <USB_EPClearStall+0xfc>
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed0:	82bb      	strh	r3, [r7, #20]
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	441a      	add	r2, r3
 8008edc:	8abb      	ldrh	r3, [r7, #20]
 8008ede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ee6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f08:	827b      	strh	r3, [r7, #18]
 8008f0a:	8a7b      	ldrh	r3, [r7, #18]
 8008f0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f10:	827b      	strh	r3, [r7, #18]
 8008f12:	8a7b      	ldrh	r3, [r7, #18]
 8008f14:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f18:	827b      	strh	r3, [r7, #18]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	441a      	add	r2, r3
 8008f24:	8a7b      	ldrh	r3, [r7, #18]
 8008f26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	371c      	adds	r7, #28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d103      	bne.n	8008f62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2280      	movs	r2, #128	@ 0x80
 8008f5e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b085      	sub	sp, #20
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b08b      	sub	sp, #44	@ 0x2c
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	461a      	mov	r2, r3
 8008fcc:	460b      	mov	r3, r1
 8008fce:	80fb      	strh	r3, [r7, #6]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008fd4:	88bb      	ldrh	r3, [r7, #4]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	085b      	lsrs	r3, r3, #1
 8008fda:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fe4:	88fa      	ldrh	r2, [r7, #6]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ff4:	e01b      	b.n	800902e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	3301      	adds	r3, #1
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	021b      	lsls	r3, r3, #8
 8009004:	b21a      	sxth	r2, r3
 8009006:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800900a:	4313      	orrs	r3, r2
 800900c:	b21b      	sxth	r3, r3
 800900e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	8a7a      	ldrh	r2, [r7, #18]
 8009014:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	3302      	adds	r3, #2
 800901a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	3301      	adds	r3, #1
 8009020:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	3301      	adds	r3, #1
 8009026:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902a:	3b01      	subs	r3, #1
 800902c:	627b      	str	r3, [r7, #36]	@ 0x24
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e0      	bne.n	8008ff6 <USB_WritePMA+0x38>
  }
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop
 8009038:	372c      	adds	r7, #44	@ 0x2c
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009042:	b480      	push	{r7}
 8009044:	b08b      	sub	sp, #44	@ 0x2c
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	4611      	mov	r1, r2
 800904e:	461a      	mov	r2, r3
 8009050:	460b      	mov	r3, r1
 8009052:	80fb      	strh	r3, [r7, #6]
 8009054:	4613      	mov	r3, r2
 8009056:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009058:	88bb      	ldrh	r3, [r7, #4]
 800905a:	085b      	lsrs	r3, r3, #1
 800905c:	b29b      	uxth	r3, r3
 800905e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009068:	88fa      	ldrh	r2, [r7, #6]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009072:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	627b      	str	r3, [r7, #36]	@ 0x24
 8009078:	e018      	b.n	80090ac <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	b29b      	uxth	r3, r3
 8009080:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	3302      	adds	r3, #2
 8009086:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	b2da      	uxtb	r2, r3
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3301      	adds	r3, #1
 8009094:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	0a1b      	lsrs	r3, r3, #8
 800909a:	b2da      	uxtb	r2, r3
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	3301      	adds	r3, #1
 80090a4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	3b01      	subs	r3, #1
 80090aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80090ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e3      	bne.n	800907a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80090b2:	88bb      	ldrh	r3, [r7, #4]
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d007      	beq.n	80090ce <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	701a      	strb	r2, [r3, #0]
  }
}
 80090ce:	bf00      	nop
 80090d0:	372c      	adds	r7, #44	@ 0x2c
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090e6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80090ea:	f005 f8dd 	bl	800e2a8 <USBD_static_malloc>
 80090ee:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d105      	bne.n	8009102 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80090fe:	2302      	movs	r3, #2
 8009100:	e066      	b.n	80091d0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	7c1b      	ldrb	r3, [r3, #16]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d119      	bne.n	8009146 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009112:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009116:	2202      	movs	r2, #2
 8009118:	2181      	movs	r1, #129	@ 0x81
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f004 ff6b 	bl	800dff6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009126:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800912a:	2202      	movs	r2, #2
 800912c:	2101      	movs	r1, #1
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f004 ff61 	bl	800dff6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2210      	movs	r2, #16
 8009140:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009144:	e016      	b.n	8009174 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009146:	2340      	movs	r3, #64	@ 0x40
 8009148:	2202      	movs	r2, #2
 800914a:	2181      	movs	r1, #129	@ 0x81
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f004 ff52 	bl	800dff6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2201      	movs	r2, #1
 8009156:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009158:	2340      	movs	r3, #64	@ 0x40
 800915a:	2202      	movs	r2, #2
 800915c:	2101      	movs	r1, #1
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f004 ff49 	bl	800dff6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2210      	movs	r2, #16
 8009170:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009174:	2308      	movs	r3, #8
 8009176:	2203      	movs	r2, #3
 8009178:	2182      	movs	r1, #130	@ 0x82
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f004 ff3b 	bl	800dff6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	7c1b      	ldrb	r3, [r3, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d109      	bne.n	80091be <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091b4:	2101      	movs	r1, #1
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f005 f80c 	bl	800e1d4 <USBD_LL_PrepareReceive>
 80091bc:	e007      	b.n	80091ce <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091c4:	2340      	movs	r3, #64	@ 0x40
 80091c6:	2101      	movs	r1, #1
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f005 f803 	bl	800e1d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80091e4:	2181      	movs	r1, #129	@ 0x81
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f004 ff2b 	bl	800e042 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80091f2:	2101      	movs	r1, #1
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f004 ff24 	bl	800e042 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009202:	2182      	movs	r1, #130	@ 0x82
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f004 ff1c 	bl	800e042 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00e      	beq.n	8009242 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009234:	4618      	mov	r0, r3
 8009236:	f005 f845 	bl	800e2c4 <USBD_static_free>
    pdev->pClassData = NULL;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800925c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009270:	2303      	movs	r3, #3
 8009272:	e0af      	b.n	80093d4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800927c:	2b00      	cmp	r3, #0
 800927e:	d03f      	beq.n	8009300 <USBD_CDC_Setup+0xb4>
 8009280:	2b20      	cmp	r3, #32
 8009282:	f040 809f 	bne.w	80093c4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	88db      	ldrh	r3, [r3, #6]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d02e      	beq.n	80092ec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	b25b      	sxtb	r3, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	da16      	bge.n	80092c6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80092a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	88d2      	ldrh	r2, [r2, #6]
 80092aa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	88db      	ldrh	r3, [r3, #6]
 80092b0:	2b07      	cmp	r3, #7
 80092b2:	bf28      	it	cs
 80092b4:	2307      	movcs	r3, #7
 80092b6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	89fa      	ldrh	r2, [r7, #14]
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f001 facd 	bl	800a85e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80092c4:	e085      	b.n	80093d2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	785a      	ldrb	r2, [r3, #1]
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	88db      	ldrh	r3, [r3, #6]
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80092dc:	6939      	ldr	r1, [r7, #16]
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	88db      	ldrh	r3, [r3, #6]
 80092e2:	461a      	mov	r2, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f001 fae6 	bl	800a8b6 <USBD_CtlPrepareRx>
      break;
 80092ea:	e072      	b.n	80093d2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	7850      	ldrb	r0, [r2, #1]
 80092f8:	2200      	movs	r2, #0
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	4798      	blx	r3
      break;
 80092fe:	e068      	b.n	80093d2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	785b      	ldrb	r3, [r3, #1]
 8009304:	2b0b      	cmp	r3, #11
 8009306:	d852      	bhi.n	80093ae <USBD_CDC_Setup+0x162>
 8009308:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <USBD_CDC_Setup+0xc4>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	08009341 	.word	0x08009341
 8009314:	080093bd 	.word	0x080093bd
 8009318:	080093af 	.word	0x080093af
 800931c:	080093af 	.word	0x080093af
 8009320:	080093af 	.word	0x080093af
 8009324:	080093af 	.word	0x080093af
 8009328:	080093af 	.word	0x080093af
 800932c:	080093af 	.word	0x080093af
 8009330:	080093af 	.word	0x080093af
 8009334:	080093af 	.word	0x080093af
 8009338:	0800936b 	.word	0x0800936b
 800933c:	08009395 	.word	0x08009395
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b03      	cmp	r3, #3
 800934a:	d107      	bne.n	800935c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800934c:	f107 030a 	add.w	r3, r7, #10
 8009350:	2202      	movs	r2, #2
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 fa82 	bl	800a85e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800935a:	e032      	b.n	80093c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f001 fa0c 	bl	800a77c <USBD_CtlError>
            ret = USBD_FAIL;
 8009364:	2303      	movs	r3, #3
 8009366:	75fb      	strb	r3, [r7, #23]
          break;
 8009368:	e02b      	b.n	80093c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b03      	cmp	r3, #3
 8009374:	d107      	bne.n	8009386 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009376:	f107 030d 	add.w	r3, r7, #13
 800937a:	2201      	movs	r2, #1
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 fa6d 	bl	800a85e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009384:	e01d      	b.n	80093c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 f9f7 	bl	800a77c <USBD_CtlError>
            ret = USBD_FAIL;
 800938e:	2303      	movs	r3, #3
 8009390:	75fb      	strb	r3, [r7, #23]
          break;
 8009392:	e016      	b.n	80093c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b03      	cmp	r3, #3
 800939e:	d00f      	beq.n	80093c0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 f9ea 	bl	800a77c <USBD_CtlError>
            ret = USBD_FAIL;
 80093a8:	2303      	movs	r3, #3
 80093aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093ac:	e008      	b.n	80093c0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f001 f9e3 	bl	800a77c <USBD_CtlError>
          ret = USBD_FAIL;
 80093b6:	2303      	movs	r3, #3
 80093b8:	75fb      	strb	r3, [r7, #23]
          break;
 80093ba:	e002      	b.n	80093c2 <USBD_CDC_Setup+0x176>
          break;
 80093bc:	bf00      	nop
 80093be:	e008      	b.n	80093d2 <USBD_CDC_Setup+0x186>
          break;
 80093c0:	bf00      	nop
      }
      break;
 80093c2:	e006      	b.n	80093d2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f001 f9d8 	bl	800a77c <USBD_CtlError>
      ret = USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	75fb      	strb	r3, [r7, #23]
      break;
 80093d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80093ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e04f      	b.n	800949e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009404:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009406:	78fa      	ldrb	r2, [r7, #3]
 8009408:	6879      	ldr	r1, [r7, #4]
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	440b      	add	r3, r1
 8009414:	3318      	adds	r3, #24
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d029      	beq.n	8009470 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800941c:	78fa      	ldrb	r2, [r7, #3]
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	4613      	mov	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	3318      	adds	r3, #24
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	78f9      	ldrb	r1, [r7, #3]
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	460b      	mov	r3, r1
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	440b      	add	r3, r1
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	4403      	add	r3, r0
 800943c:	3320      	adds	r3, #32
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	fbb2 f1f3 	udiv	r1, r2, r3
 8009444:	fb01 f303 	mul.w	r3, r1, r3
 8009448:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800944a:	2b00      	cmp	r3, #0
 800944c:	d110      	bne.n	8009470 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800944e:	78fa      	ldrb	r2, [r7, #3]
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	3318      	adds	r3, #24
 800945e:	2200      	movs	r2, #0
 8009460:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009462:	78f9      	ldrb	r1, [r7, #3]
 8009464:	2300      	movs	r3, #0
 8009466:	2200      	movs	r2, #0
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f004 fe92 	bl	800e192 <USBD_LL_Transmit>
 800946e:	e015      	b.n	800949c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2200      	movs	r2, #0
 8009474:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00b      	beq.n	800949c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009498:	78fa      	ldrb	r2, [r7, #3]
 800949a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	460b      	mov	r3, r1
 80094b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e015      	b.n	80094f4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f004 fea2 	bl	800e216 <USBD_LL_GetRxDataSize>
 80094d2:	4602      	mov	r2, r0
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80094ee:	4611      	mov	r1, r2
 80094f0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800950a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009512:	2303      	movs	r3, #3
 8009514:	e01a      	b.n	800954c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d014      	beq.n	800954a <USBD_CDC_EP0_RxReady+0x4e>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009526:	2bff      	cmp	r3, #255	@ 0xff
 8009528:	d00f      	beq.n	800954a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009538:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009540:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	22ff      	movs	r2, #255	@ 0xff
 8009546:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2243      	movs	r2, #67	@ 0x43
 8009560:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009562:	4b03      	ldr	r3, [pc, #12]	@ (8009570 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	20000094 	.word	0x20000094

08009574 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2243      	movs	r2, #67	@ 0x43
 8009580:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009582:	4b03      	ldr	r3, [pc, #12]	@ (8009590 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	20000050 	.word	0x20000050

08009594 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2243      	movs	r2, #67	@ 0x43
 80095a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80095a2:	4b03      	ldr	r3, [pc, #12]	@ (80095b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	200000d8 	.word	0x200000d8

080095b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	220a      	movs	r2, #10
 80095c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80095c2:	4b03      	ldr	r3, [pc, #12]	@ (80095d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	2000000c 	.word	0x2000000c

080095d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e004      	b.n	80095f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80095fe:	b480      	push	{r7}
 8009600:	b087      	sub	sp, #28
 8009602:	af00      	add	r7, sp, #0
 8009604:	60f8      	str	r0, [r7, #12]
 8009606:	60b9      	str	r1, [r7, #8]
 8009608:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009610:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009618:	2303      	movs	r3, #3
 800961a:	e008      	b.n	800962e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	371c      	adds	r7, #28
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800963a:	b480      	push	{r7}
 800963c:	b085      	sub	sp, #20
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800964a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009652:	2303      	movs	r3, #3
 8009654:	e004      	b.n	8009660 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800967a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800967c:	2301      	movs	r3, #1
 800967e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800968a:	2303      	movs	r3, #3
 800968c:	e01a      	b.n	80096c4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009694:	2b00      	cmp	r3, #0
 8009696:	d114      	bne.n	80096c2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2201      	movs	r2, #1
 800969c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80096b6:	2181      	movs	r1, #129	@ 0x81
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f004 fd6a 	bl	800e192 <USBD_LL_Transmit>

    ret = USBD_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e016      	b.n	8009718 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	7c1b      	ldrb	r3, [r3, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d109      	bne.n	8009706 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80096f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096fc:	2101      	movs	r1, #1
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f004 fd68 	bl	800e1d4 <USBD_LL_PrepareReceive>
 8009704:	e007      	b.n	8009716 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800970c:	2340      	movs	r3, #64	@ 0x40
 800970e:	2101      	movs	r1, #1
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f004 fd5f 	bl	800e1d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	4613      	mov	r3, r2
 800972c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009734:	2303      	movs	r3, #3
 8009736:	e01f      	b.n	8009778 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	79fa      	ldrb	r2, [r7, #7]
 800976a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f004 fbc7 	bl	800df00 <USBD_LL_Init>
 8009772:	4603      	mov	r3, r0
 8009774:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009776:	7dfb      	ldrb	r3, [r7, #23]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009794:	2303      	movs	r3, #3
 8009796:	e016      	b.n	80097c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b4:	f107 020e 	add.w	r2, r7, #14
 80097b8:	4610      	mov	r0, r2
 80097ba:	4798      	blx	r3
 80097bc:	4602      	mov	r2, r0
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f004 fbf2 	bl	800dfc0 <USBD_LL_Start>
 80097dc:	4603      	mov	r3, r0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b083      	sub	sp, #12
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009808:	2303      	movs	r3, #3
 800980a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009812:	2b00      	cmp	r3, #0
 8009814:	d009      	beq.n	800982a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	78fa      	ldrb	r2, [r7, #3]
 8009820:	4611      	mov	r1, r2
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	4798      	blx	r3
 8009826:	4603      	mov	r3, r0
 8009828:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800982a:	7bfb      	ldrb	r3, [r7, #15]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009846:	2b00      	cmp	r3, #0
 8009848:	d007      	beq.n	800985a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	78fa      	ldrb	r2, [r7, #3]
 8009854:	4611      	mov	r1, r2
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	4798      	blx	r3
  }

  return USBD_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	4618      	mov	r0, r3
 8009878:	f000 ff46 	bl	800a708 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800988a:	461a      	mov	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009898:	f003 031f 	and.w	r3, r3, #31
 800989c:	2b02      	cmp	r3, #2
 800989e:	d01a      	beq.n	80098d6 <USBD_LL_SetupStage+0x72>
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d822      	bhi.n	80098ea <USBD_LL_SetupStage+0x86>
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <USBD_LL_SetupStage+0x4a>
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d00a      	beq.n	80098c2 <USBD_LL_SetupStage+0x5e>
 80098ac:	e01d      	b.n	80098ea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f9ee 	bl	8009c98 <USBD_StdDevReq>
 80098bc:	4603      	mov	r3, r0
 80098be:	73fb      	strb	r3, [r7, #15]
      break;
 80098c0:	e020      	b.n	8009904 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098c8:	4619      	mov	r1, r3
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fa52 	bl	8009d74 <USBD_StdItfReq>
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]
      break;
 80098d4:	e016      	b.n	8009904 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fa91 	bl	8009e06 <USBD_StdEPReq>
 80098e4:	4603      	mov	r3, r0
 80098e6:	73fb      	strb	r3, [r7, #15]
      break;
 80098e8:	e00c      	b.n	8009904 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80098f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f004 fbc1 	bl	800e080 <USBD_LL_StallEP>
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]
      break;
 8009902:	bf00      	nop
  }

  return ret;
 8009904:	7bfb      	ldrb	r3, [r7, #15]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b086      	sub	sp, #24
 8009912:	af00      	add	r7, sp, #0
 8009914:	60f8      	str	r0, [r7, #12]
 8009916:	460b      	mov	r3, r1
 8009918:	607a      	str	r2, [r7, #4]
 800991a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d138      	bne.n	8009994 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009928:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009930:	2b03      	cmp	r3, #3
 8009932:	d14a      	bne.n	80099ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	689a      	ldr	r2, [r3, #8]
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	429a      	cmp	r2, r3
 800993e:	d913      	bls.n	8009968 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	689a      	ldr	r2, [r3, #8]
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	1ad2      	subs	r2, r2, r3
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	4293      	cmp	r3, r2
 8009958:	bf28      	it	cs
 800995a:	4613      	movcs	r3, r2
 800995c:	461a      	mov	r2, r3
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 ffc5 	bl	800a8f0 <USBD_CtlContinueRx>
 8009966:	e030      	b.n	80099ca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b03      	cmp	r3, #3
 8009972:	d10b      	bne.n	800998c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 ffc0 	bl	800a912 <USBD_CtlSendStatus>
 8009992:	e01a      	b.n	80099ca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b03      	cmp	r3, #3
 800999e:	d114      	bne.n	80099ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00e      	beq.n	80099ca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	7afa      	ldrb	r2, [r7, #11]
 80099b6:	4611      	mov	r1, r2
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	4798      	blx	r3
 80099bc:	4603      	mov	r3, r0
 80099be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	e000      	b.n	80099cc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	460b      	mov	r3, r1
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80099e2:	7afb      	ldrb	r3, [r7, #11]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d16b      	bne.n	8009ac0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3314      	adds	r3, #20
 80099ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d156      	bne.n	8009aa6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d914      	bls.n	8009a2e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	689a      	ldr	r2, [r3, #8]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	1ad2      	subs	r2, r2, r3
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	461a      	mov	r2, r3
 8009a18:	6879      	ldr	r1, [r7, #4]
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 ff3a 	bl	800a894 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a20:	2300      	movs	r3, #0
 8009a22:	2200      	movs	r2, #0
 8009a24:	2100      	movs	r1, #0
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f004 fbd4 	bl	800e1d4 <USBD_LL_PrepareReceive>
 8009a2c:	e03b      	b.n	8009aa6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d11c      	bne.n	8009a74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d316      	bcc.n	8009a74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	685a      	ldr	r2, [r3, #4]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d20f      	bcs.n	8009a74 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a54:	2200      	movs	r2, #0
 8009a56:	2100      	movs	r1, #0
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 ff1b 	bl	800a894 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a66:	2300      	movs	r3, #0
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f004 fbb1 	bl	800e1d4 <USBD_LL_PrepareReceive>
 8009a72:	e018      	b.n	8009aa6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	d10b      	bne.n	8009a98 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d005      	beq.n	8009a98 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a98:	2180      	movs	r1, #128	@ 0x80
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f004 faf0 	bl	800e080 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 ff49 	bl	800a938 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d122      	bne.n	8009af6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f7ff fe98 	bl	80097e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009abe:	e01a      	b.n	8009af6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d114      	bne.n	8009af6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00e      	beq.n	8009af6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	7afa      	ldrb	r2, [r7, #11]
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	4798      	blx	r3
 8009ae8:	4603      	mov	r3, r0
 8009aea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009af2:	7dfb      	ldrb	r3, [r7, #23]
 8009af4:	e000      	b.n	8009af8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e02f      	b.n	8009b94 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00f      	beq.n	8009b5e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d009      	beq.n	8009b5e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	6852      	ldr	r2, [r2, #4]
 8009b56:	b2d2      	uxtb	r2, r2
 8009b58:	4611      	mov	r1, r2
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b5e:	2340      	movs	r3, #64	@ 0x40
 8009b60:	2200      	movs	r2, #0
 8009b62:	2100      	movs	r1, #0
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f004 fa46 	bl	800dff6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2240      	movs	r2, #64	@ 0x40
 8009b76:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b7a:	2340      	movs	r3, #64	@ 0x40
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2180      	movs	r1, #128	@ 0x80
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f004 fa38 	bl	800dff6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2240      	movs	r2, #64	@ 0x40
 8009b90:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	78fa      	ldrb	r2, [r7, #3]
 8009bac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2204      	movs	r2, #4
 8009bd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b04      	cmp	r3, #4
 8009bfa:	d106      	bne.n	8009c0a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e012      	b.n	8009c54 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b03      	cmp	r3, #3
 8009c38:	d10b      	bne.n	8009c52 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d005      	beq.n	8009c52 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	3301      	adds	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c7a:	8a3b      	ldrh	r3, [r7, #16]
 8009c7c:	021b      	lsls	r3, r3, #8
 8009c7e:	b21a      	sxth	r2, r3
 8009c80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	b21b      	sxth	r3, r3
 8009c88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c8a:	89fb      	ldrh	r3, [r7, #14]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	371c      	adds	r7, #28
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cae:	2b40      	cmp	r3, #64	@ 0x40
 8009cb0:	d005      	beq.n	8009cbe <USBD_StdDevReq+0x26>
 8009cb2:	2b40      	cmp	r3, #64	@ 0x40
 8009cb4:	d853      	bhi.n	8009d5e <USBD_StdDevReq+0xc6>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00b      	beq.n	8009cd2 <USBD_StdDevReq+0x3a>
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d14f      	bne.n	8009d5e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	4798      	blx	r3
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd0:	e04a      	b.n	8009d68 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	785b      	ldrb	r3, [r3, #1]
 8009cd6:	2b09      	cmp	r3, #9
 8009cd8:	d83b      	bhi.n	8009d52 <USBD_StdDevReq+0xba>
 8009cda:	a201      	add	r2, pc, #4	@ (adr r2, 8009ce0 <USBD_StdDevReq+0x48>)
 8009cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce0:	08009d35 	.word	0x08009d35
 8009ce4:	08009d49 	.word	0x08009d49
 8009ce8:	08009d53 	.word	0x08009d53
 8009cec:	08009d3f 	.word	0x08009d3f
 8009cf0:	08009d53 	.word	0x08009d53
 8009cf4:	08009d13 	.word	0x08009d13
 8009cf8:	08009d09 	.word	0x08009d09
 8009cfc:	08009d53 	.word	0x08009d53
 8009d00:	08009d2b 	.word	0x08009d2b
 8009d04:	08009d1d 	.word	0x08009d1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f9de 	bl	800a0cc <USBD_GetDescriptor>
          break;
 8009d10:	e024      	b.n	8009d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fb6d 	bl	800a3f4 <USBD_SetAddress>
          break;
 8009d1a:	e01f      	b.n	8009d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fbac 	bl	800a47c <USBD_SetConfig>
 8009d24:	4603      	mov	r3, r0
 8009d26:	73fb      	strb	r3, [r7, #15]
          break;
 8009d28:	e018      	b.n	8009d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fc4b 	bl	800a5c8 <USBD_GetConfig>
          break;
 8009d32:	e013      	b.n	8009d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fc7c 	bl	800a634 <USBD_GetStatus>
          break;
 8009d3c:	e00e      	b.n	8009d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fcab 	bl	800a69c <USBD_SetFeature>
          break;
 8009d46:	e009      	b.n	8009d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fcba 	bl	800a6c4 <USBD_ClrFeature>
          break;
 8009d50:	e004      	b.n	8009d5c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fd11 	bl	800a77c <USBD_CtlError>
          break;
 8009d5a:	bf00      	nop
      }
      break;
 8009d5c:	e004      	b.n	8009d68 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fd0b 	bl	800a77c <USBD_CtlError>
      break;
 8009d66:	bf00      	nop
  }

  return ret;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop

08009d74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d8a:	2b40      	cmp	r3, #64	@ 0x40
 8009d8c:	d005      	beq.n	8009d9a <USBD_StdItfReq+0x26>
 8009d8e:	2b40      	cmp	r3, #64	@ 0x40
 8009d90:	d82f      	bhi.n	8009df2 <USBD_StdItfReq+0x7e>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <USBD_StdItfReq+0x26>
 8009d96:	2b20      	cmp	r3, #32
 8009d98:	d12b      	bne.n	8009df2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	3b01      	subs	r3, #1
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d81d      	bhi.n	8009de4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	889b      	ldrh	r3, [r3, #4]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d813      	bhi.n	8009dda <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	4798      	blx	r3
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	88db      	ldrh	r3, [r3, #6]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d110      	bne.n	8009dee <USBD_StdItfReq+0x7a>
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10d      	bne.n	8009dee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fd9d 	bl	800a912 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009dd8:	e009      	b.n	8009dee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fccd 	bl	800a77c <USBD_CtlError>
          break;
 8009de2:	e004      	b.n	8009dee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fcc8 	bl	800a77c <USBD_CtlError>
          break;
 8009dec:	e000      	b.n	8009df0 <USBD_StdItfReq+0x7c>
          break;
 8009dee:	bf00      	nop
      }
      break;
 8009df0:	e004      	b.n	8009dfc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fcc1 	bl	800a77c <USBD_CtlError>
      break;
 8009dfa:	bf00      	nop
  }

  return ret;
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	889b      	ldrh	r3, [r3, #4]
 8009e18:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e22:	2b40      	cmp	r3, #64	@ 0x40
 8009e24:	d007      	beq.n	8009e36 <USBD_StdEPReq+0x30>
 8009e26:	2b40      	cmp	r3, #64	@ 0x40
 8009e28:	f200 8145 	bhi.w	800a0b6 <USBD_StdEPReq+0x2b0>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00c      	beq.n	8009e4a <USBD_StdEPReq+0x44>
 8009e30:	2b20      	cmp	r3, #32
 8009e32:	f040 8140 	bne.w	800a0b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	4798      	blx	r3
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]
      break;
 8009e48:	e13a      	b.n	800a0c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	785b      	ldrb	r3, [r3, #1]
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	d007      	beq.n	8009e62 <USBD_StdEPReq+0x5c>
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	f300 8129 	bgt.w	800a0aa <USBD_StdEPReq+0x2a4>
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d07f      	beq.n	8009f5c <USBD_StdEPReq+0x156>
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d03c      	beq.n	8009eda <USBD_StdEPReq+0xd4>
 8009e60:	e123      	b.n	800a0aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d002      	beq.n	8009e74 <USBD_StdEPReq+0x6e>
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	d016      	beq.n	8009ea0 <USBD_StdEPReq+0x9a>
 8009e72:	e02c      	b.n	8009ece <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e74:	7bbb      	ldrb	r3, [r7, #14]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00d      	beq.n	8009e96 <USBD_StdEPReq+0x90>
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
 8009e7c:	2b80      	cmp	r3, #128	@ 0x80
 8009e7e:	d00a      	beq.n	8009e96 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f004 f8fb 	bl	800e080 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e8a:	2180      	movs	r1, #128	@ 0x80
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f004 f8f7 	bl	800e080 <USBD_LL_StallEP>
 8009e92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e94:	e020      	b.n	8009ed8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fc6f 	bl	800a77c <USBD_CtlError>
              break;
 8009e9e:	e01b      	b.n	8009ed8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	885b      	ldrh	r3, [r3, #2]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10e      	bne.n	8009ec6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ea8:	7bbb      	ldrb	r3, [r7, #14]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <USBD_StdEPReq+0xc0>
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	2b80      	cmp	r3, #128	@ 0x80
 8009eb2:	d008      	beq.n	8009ec6 <USBD_StdEPReq+0xc0>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	88db      	ldrh	r3, [r3, #6]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d104      	bne.n	8009ec6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f004 f8dd 	bl	800e080 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fd23 	bl	800a912 <USBD_CtlSendStatus>

              break;
 8009ecc:	e004      	b.n	8009ed8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fc53 	bl	800a77c <USBD_CtlError>
              break;
 8009ed6:	bf00      	nop
          }
          break;
 8009ed8:	e0ec      	b.n	800a0b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d002      	beq.n	8009eec <USBD_StdEPReq+0xe6>
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d016      	beq.n	8009f18 <USBD_StdEPReq+0x112>
 8009eea:	e030      	b.n	8009f4e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009eec:	7bbb      	ldrb	r3, [r7, #14]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00d      	beq.n	8009f0e <USBD_StdEPReq+0x108>
 8009ef2:	7bbb      	ldrb	r3, [r7, #14]
 8009ef4:	2b80      	cmp	r3, #128	@ 0x80
 8009ef6:	d00a      	beq.n	8009f0e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f004 f8bf 	bl	800e080 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f02:	2180      	movs	r1, #128	@ 0x80
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f004 f8bb 	bl	800e080 <USBD_LL_StallEP>
 8009f0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f0c:	e025      	b.n	8009f5a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fc33 	bl	800a77c <USBD_CtlError>
              break;
 8009f16:	e020      	b.n	8009f5a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	885b      	ldrh	r3, [r3, #2]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d11b      	bne.n	8009f58 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
 8009f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d004      	beq.n	8009f34 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f004 f8c5 	bl	800e0be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fcec 	bl	800a912 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	4798      	blx	r3
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009f4c:	e004      	b.n	8009f58 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fc13 	bl	800a77c <USBD_CtlError>
              break;
 8009f56:	e000      	b.n	8009f5a <USBD_StdEPReq+0x154>
              break;
 8009f58:	bf00      	nop
          }
          break;
 8009f5a:	e0ab      	b.n	800a0b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d002      	beq.n	8009f6e <USBD_StdEPReq+0x168>
 8009f68:	2b03      	cmp	r3, #3
 8009f6a:	d032      	beq.n	8009fd2 <USBD_StdEPReq+0x1cc>
 8009f6c:	e097      	b.n	800a09e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d007      	beq.n	8009f84 <USBD_StdEPReq+0x17e>
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	2b80      	cmp	r3, #128	@ 0x80
 8009f78:	d004      	beq.n	8009f84 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fbfd 	bl	800a77c <USBD_CtlError>
                break;
 8009f82:	e091      	b.n	800a0a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	da0b      	bge.n	8009fa4 <USBD_StdEPReq+0x19e>
 8009f8c:	7bbb      	ldrb	r3, [r7, #14]
 8009f8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	3310      	adds	r3, #16
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	e00b      	b.n	8009fbc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fa4:	7bbb      	ldrb	r3, [r7, #14]
 8009fa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	4413      	add	r3, r2
 8009fba:	3304      	adds	r3, #4
 8009fbc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fc47 	bl	800a85e <USBD_CtlSendData>
              break;
 8009fd0:	e06a      	b.n	800a0a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	da11      	bge.n	8009ffe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009fda:	7bbb      	ldrb	r3, [r7, #14]
 8009fdc:	f003 020f 	and.w	r2, r3, #15
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	440b      	add	r3, r1
 8009fec:	3324      	adds	r3, #36	@ 0x24
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d117      	bne.n	800a024 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fbc0 	bl	800a77c <USBD_CtlError>
                  break;
 8009ffc:	e054      	b.n	800a0a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ffe:	7bbb      	ldrb	r3, [r7, #14]
 800a000:	f003 020f 	and.w	r2, r3, #15
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d104      	bne.n	800a024 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fbad 	bl	800a77c <USBD_CtlError>
                  break;
 800a022:	e041      	b.n	800a0a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	da0b      	bge.n	800a044 <USBD_StdEPReq+0x23e>
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	3310      	adds	r3, #16
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	4413      	add	r3, r2
 800a040:	3304      	adds	r3, #4
 800a042:	e00b      	b.n	800a05c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a044:	7bbb      	ldrb	r3, [r7, #14]
 800a046:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a04a:	4613      	mov	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	4413      	add	r3, r2
 800a05a:	3304      	adds	r3, #4
 800a05c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a05e:	7bbb      	ldrb	r3, [r7, #14]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <USBD_StdEPReq+0x264>
 800a064:	7bbb      	ldrb	r3, [r7, #14]
 800a066:	2b80      	cmp	r3, #128	@ 0x80
 800a068:	d103      	bne.n	800a072 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2200      	movs	r2, #0
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	e00e      	b.n	800a090 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a072:	7bbb      	ldrb	r3, [r7, #14]
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f004 f840 	bl	800e0fc <USBD_LL_IsStallEP>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d003      	beq.n	800a08a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	2201      	movs	r2, #1
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	e002      	b.n	800a090 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2200      	movs	r2, #0
 800a08e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2202      	movs	r2, #2
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fbe1 	bl	800a85e <USBD_CtlSendData>
              break;
 800a09c:	e004      	b.n	800a0a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fb6b 	bl	800a77c <USBD_CtlError>
              break;
 800a0a6:	bf00      	nop
          }
          break;
 800a0a8:	e004      	b.n	800a0b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fb65 	bl	800a77c <USBD_CtlError>
          break;
 800a0b2:	bf00      	nop
      }
      break;
 800a0b4:	e004      	b.n	800a0c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fb5f 	bl	800a77c <USBD_CtlError>
      break;
 800a0be:	bf00      	nop
  }

  return ret;
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	885b      	ldrh	r3, [r3, #2]
 800a0e6:	0a1b      	lsrs	r3, r3, #8
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	2b0e      	cmp	r3, #14
 800a0ee:	f200 8152 	bhi.w	800a396 <USBD_GetDescriptor+0x2ca>
 800a0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f8 <USBD_GetDescriptor+0x2c>)
 800a0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f8:	0800a169 	.word	0x0800a169
 800a0fc:	0800a181 	.word	0x0800a181
 800a100:	0800a1c1 	.word	0x0800a1c1
 800a104:	0800a397 	.word	0x0800a397
 800a108:	0800a397 	.word	0x0800a397
 800a10c:	0800a337 	.word	0x0800a337
 800a110:	0800a363 	.word	0x0800a363
 800a114:	0800a397 	.word	0x0800a397
 800a118:	0800a397 	.word	0x0800a397
 800a11c:	0800a397 	.word	0x0800a397
 800a120:	0800a397 	.word	0x0800a397
 800a124:	0800a397 	.word	0x0800a397
 800a128:	0800a397 	.word	0x0800a397
 800a12c:	0800a397 	.word	0x0800a397
 800a130:	0800a135 	.word	0x0800a135
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00b      	beq.n	800a158 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a146:	69db      	ldr	r3, [r3, #28]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	7c12      	ldrb	r2, [r2, #16]
 800a14c:	f107 0108 	add.w	r1, r7, #8
 800a150:	4610      	mov	r0, r2
 800a152:	4798      	blx	r3
 800a154:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a156:	e126      	b.n	800a3a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fb0e 	bl	800a77c <USBD_CtlError>
        err++;
 800a160:	7afb      	ldrb	r3, [r7, #11]
 800a162:	3301      	adds	r3, #1
 800a164:	72fb      	strb	r3, [r7, #11]
      break;
 800a166:	e11e      	b.n	800a3a6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	7c12      	ldrb	r2, [r2, #16]
 800a174:	f107 0108 	add.w	r1, r7, #8
 800a178:	4610      	mov	r0, r2
 800a17a:	4798      	blx	r3
 800a17c:	60f8      	str	r0, [r7, #12]
      break;
 800a17e:	e112      	b.n	800a3a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	7c1b      	ldrb	r3, [r3, #16]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10d      	bne.n	800a1a4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a190:	f107 0208 	add.w	r2, r7, #8
 800a194:	4610      	mov	r0, r2
 800a196:	4798      	blx	r3
 800a198:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3301      	adds	r3, #1
 800a19e:	2202      	movs	r2, #2
 800a1a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1a2:	e100      	b.n	800a3a6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ac:	f107 0208 	add.w	r2, r7, #8
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
 800a1b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	701a      	strb	r2, [r3, #0]
      break;
 800a1be:	e0f2      	b.n	800a3a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	885b      	ldrh	r3, [r3, #2]
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b05      	cmp	r3, #5
 800a1c8:	f200 80ac 	bhi.w	800a324 <USBD_GetDescriptor+0x258>
 800a1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d4 <USBD_GetDescriptor+0x108>)
 800a1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d2:	bf00      	nop
 800a1d4:	0800a1ed 	.word	0x0800a1ed
 800a1d8:	0800a221 	.word	0x0800a221
 800a1dc:	0800a255 	.word	0x0800a255
 800a1e0:	0800a289 	.word	0x0800a289
 800a1e4:	0800a2bd 	.word	0x0800a2bd
 800a1e8:	0800a2f1 	.word	0x0800a2f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00b      	beq.n	800a210 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	7c12      	ldrb	r2, [r2, #16]
 800a204:	f107 0108 	add.w	r1, r7, #8
 800a208:	4610      	mov	r0, r2
 800a20a:	4798      	blx	r3
 800a20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a20e:	e091      	b.n	800a334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fab2 	bl	800a77c <USBD_CtlError>
            err++;
 800a218:	7afb      	ldrb	r3, [r7, #11]
 800a21a:	3301      	adds	r3, #1
 800a21c:	72fb      	strb	r3, [r7, #11]
          break;
 800a21e:	e089      	b.n	800a334 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	7c12      	ldrb	r2, [r2, #16]
 800a238:	f107 0108 	add.w	r1, r7, #8
 800a23c:	4610      	mov	r0, r2
 800a23e:	4798      	blx	r3
 800a240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a242:	e077      	b.n	800a334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fa98 	bl	800a77c <USBD_CtlError>
            err++;
 800a24c:	7afb      	ldrb	r3, [r7, #11]
 800a24e:	3301      	adds	r3, #1
 800a250:	72fb      	strb	r3, [r7, #11]
          break;
 800a252:	e06f      	b.n	800a334 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00b      	beq.n	800a278 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	7c12      	ldrb	r2, [r2, #16]
 800a26c:	f107 0108 	add.w	r1, r7, #8
 800a270:	4610      	mov	r0, r2
 800a272:	4798      	blx	r3
 800a274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a276:	e05d      	b.n	800a334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fa7e 	bl	800a77c <USBD_CtlError>
            err++;
 800a280:	7afb      	ldrb	r3, [r7, #11]
 800a282:	3301      	adds	r3, #1
 800a284:	72fb      	strb	r3, [r7, #11]
          break;
 800a286:	e055      	b.n	800a334 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00b      	beq.n	800a2ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	7c12      	ldrb	r2, [r2, #16]
 800a2a0:	f107 0108 	add.w	r1, r7, #8
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	4798      	blx	r3
 800a2a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2aa:	e043      	b.n	800a334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fa64 	bl	800a77c <USBD_CtlError>
            err++;
 800a2b4:	7afb      	ldrb	r3, [r7, #11]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ba:	e03b      	b.n	800a334 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00b      	beq.n	800a2e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	7c12      	ldrb	r2, [r2, #16]
 800a2d4:	f107 0108 	add.w	r1, r7, #8
 800a2d8:	4610      	mov	r0, r2
 800a2da:	4798      	blx	r3
 800a2dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2de:	e029      	b.n	800a334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fa4a 	bl	800a77c <USBD_CtlError>
            err++;
 800a2e8:	7afb      	ldrb	r3, [r7, #11]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ee:	e021      	b.n	800a334 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00b      	beq.n	800a314 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	7c12      	ldrb	r2, [r2, #16]
 800a308:	f107 0108 	add.w	r1, r7, #8
 800a30c:	4610      	mov	r0, r2
 800a30e:	4798      	blx	r3
 800a310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a312:	e00f      	b.n	800a334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fa30 	bl	800a77c <USBD_CtlError>
            err++;
 800a31c:	7afb      	ldrb	r3, [r7, #11]
 800a31e:	3301      	adds	r3, #1
 800a320:	72fb      	strb	r3, [r7, #11]
          break;
 800a322:	e007      	b.n	800a334 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fa28 	bl	800a77c <USBD_CtlError>
          err++;
 800a32c:	7afb      	ldrb	r3, [r7, #11]
 800a32e:	3301      	adds	r3, #1
 800a330:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a332:	bf00      	nop
      }
      break;
 800a334:	e037      	b.n	800a3a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	7c1b      	ldrb	r3, [r3, #16]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d109      	bne.n	800a352 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a346:	f107 0208 	add.w	r2, r7, #8
 800a34a:	4610      	mov	r0, r2
 800a34c:	4798      	blx	r3
 800a34e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a350:	e029      	b.n	800a3a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fa11 	bl	800a77c <USBD_CtlError>
        err++;
 800a35a:	7afb      	ldrb	r3, [r7, #11]
 800a35c:	3301      	adds	r3, #1
 800a35e:	72fb      	strb	r3, [r7, #11]
      break;
 800a360:	e021      	b.n	800a3a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	7c1b      	ldrb	r3, [r3, #16]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10d      	bne.n	800a386 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a372:	f107 0208 	add.w	r2, r7, #8
 800a376:	4610      	mov	r0, r2
 800a378:	4798      	blx	r3
 800a37a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3301      	adds	r3, #1
 800a380:	2207      	movs	r2, #7
 800a382:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a384:	e00f      	b.n	800a3a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f9f7 	bl	800a77c <USBD_CtlError>
        err++;
 800a38e:	7afb      	ldrb	r3, [r7, #11]
 800a390:	3301      	adds	r3, #1
 800a392:	72fb      	strb	r3, [r7, #11]
      break;
 800a394:	e007      	b.n	800a3a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f9ef 	bl	800a77c <USBD_CtlError>
      err++;
 800a39e:	7afb      	ldrb	r3, [r7, #11]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3a4:	bf00      	nop
  }

  if (err != 0U)
 800a3a6:	7afb      	ldrb	r3, [r7, #11]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d11e      	bne.n	800a3ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	88db      	ldrh	r3, [r3, #6]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d016      	beq.n	800a3e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a3b4:	893b      	ldrh	r3, [r7, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00e      	beq.n	800a3d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	88da      	ldrh	r2, [r3, #6]
 800a3be:	893b      	ldrh	r3, [r7, #8]
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	bf28      	it	cs
 800a3c4:	4613      	movcs	r3, r2
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3ca:	893b      	ldrh	r3, [r7, #8]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	68f9      	ldr	r1, [r7, #12]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fa44 	bl	800a85e <USBD_CtlSendData>
 800a3d6:	e009      	b.n	800a3ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f9ce 	bl	800a77c <USBD_CtlError>
 800a3e0:	e004      	b.n	800a3ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fa95 	bl	800a912 <USBD_CtlSendStatus>
 800a3e8:	e000      	b.n	800a3ec <USBD_GetDescriptor+0x320>
    return;
 800a3ea:	bf00      	nop
  }
}
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop

0800a3f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	889b      	ldrh	r3, [r3, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d131      	bne.n	800a46a <USBD_SetAddress+0x76>
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	88db      	ldrh	r3, [r3, #6]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d12d      	bne.n	800a46a <USBD_SetAddress+0x76>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	885b      	ldrh	r3, [r3, #2]
 800a412:	2b7f      	cmp	r3, #127	@ 0x7f
 800a414:	d829      	bhi.n	800a46a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	885b      	ldrh	r3, [r3, #2]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a420:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b03      	cmp	r3, #3
 800a42c:	d104      	bne.n	800a438 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a42e:	6839      	ldr	r1, [r7, #0]
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 f9a3 	bl	800a77c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a436:	e01d      	b.n	800a474 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	7bfa      	ldrb	r2, [r7, #15]
 800a43c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a440:	7bfb      	ldrb	r3, [r7, #15]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f003 fe85 	bl	800e154 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fa61 	bl	800a912 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a450:	7bfb      	ldrb	r3, [r7, #15]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d004      	beq.n	800a460 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2202      	movs	r2, #2
 800a45a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a45e:	e009      	b.n	800a474 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a468:	e004      	b.n	800a474 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f985 	bl	800a77c <USBD_CtlError>
  }
}
 800a472:	bf00      	nop
 800a474:	bf00      	nop
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	885b      	ldrh	r3, [r3, #2]
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	4b4c      	ldr	r3, [pc, #304]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a492:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a494:	4b4b      	ldr	r3, [pc, #300]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d905      	bls.n	800a4a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f96c 	bl	800a77c <USBD_CtlError>
    return USBD_FAIL;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e088      	b.n	800a5ba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d002      	beq.n	800a4ba <USBD_SetConfig+0x3e>
 800a4b4:	2b03      	cmp	r3, #3
 800a4b6:	d025      	beq.n	800a504 <USBD_SetConfig+0x88>
 800a4b8:	e071      	b.n	800a59e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4ba:	4b42      	ldr	r3, [pc, #264]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d01c      	beq.n	800a4fc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a4c2:	4b40      	ldr	r3, [pc, #256]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4cc:	4b3d      	ldr	r3, [pc, #244]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff f992 	bl	80097fc <USBD_SetClassConfig>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d004      	beq.n	800a4ec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f949 	bl	800a77c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4ea:	e065      	b.n	800a5b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fa10 	bl	800a912 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2203      	movs	r2, #3
 800a4f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4fa:	e05d      	b.n	800a5b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fa08 	bl	800a912 <USBD_CtlSendStatus>
      break;
 800a502:	e059      	b.n	800a5b8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a504:	4b2f      	ldr	r3, [pc, #188]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d112      	bne.n	800a532 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a514:	4b2b      	ldr	r3, [pc, #172]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	461a      	mov	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a51e:	4b29      	ldr	r3, [pc, #164]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff f985 	bl	8009834 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f9f1 	bl	800a912 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a530:	e042      	b.n	800a5b8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a532:	4b24      	ldr	r3, [pc, #144]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d02a      	beq.n	800a596 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	b2db      	uxtb	r3, r3
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7ff f973 	bl	8009834 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a54e:	4b1d      	ldr	r3, [pc, #116]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a558:	4b1a      	ldr	r3, [pc, #104]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	4619      	mov	r1, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff f94c 	bl	80097fc <USBD_SetClassConfig>
 800a564:	4603      	mov	r3, r0
 800a566:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00f      	beq.n	800a58e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f903 	bl	800a77c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7ff f958 	bl	8009834 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2202      	movs	r2, #2
 800a588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a58c:	e014      	b.n	800a5b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f9bf 	bl	800a912 <USBD_CtlSendStatus>
      break;
 800a594:	e010      	b.n	800a5b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f9bb 	bl	800a912 <USBD_CtlSendStatus>
      break;
 800a59c:	e00c      	b.n	800a5b8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 f8eb 	bl	800a77c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5a6:	4b07      	ldr	r3, [pc, #28]	@ (800a5c4 <USBD_SetConfig+0x148>)
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7ff f941 	bl	8009834 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b6:	bf00      	nop
  }

  return ret;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20000534 	.word	0x20000534

0800a5c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	88db      	ldrh	r3, [r3, #6]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d004      	beq.n	800a5e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5da:	6839      	ldr	r1, [r7, #0]
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f8cd 	bl	800a77c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5e2:	e023      	b.n	800a62c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	dc02      	bgt.n	800a5f6 <USBD_GetConfig+0x2e>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	dc03      	bgt.n	800a5fc <USBD_GetConfig+0x34>
 800a5f4:	e015      	b.n	800a622 <USBD_GetConfig+0x5a>
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d00b      	beq.n	800a612 <USBD_GetConfig+0x4a>
 800a5fa:	e012      	b.n	800a622 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3308      	adds	r3, #8
 800a606:	2201      	movs	r2, #1
 800a608:	4619      	mov	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f927 	bl	800a85e <USBD_CtlSendData>
        break;
 800a610:	e00c      	b.n	800a62c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3304      	adds	r3, #4
 800a616:	2201      	movs	r2, #1
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f91f 	bl	800a85e <USBD_CtlSendData>
        break;
 800a620:	e004      	b.n	800a62c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a622:	6839      	ldr	r1, [r7, #0]
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 f8a9 	bl	800a77c <USBD_CtlError>
        break;
 800a62a:	bf00      	nop
}
 800a62c:	bf00      	nop
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a644:	b2db      	uxtb	r3, r3
 800a646:	3b01      	subs	r3, #1
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d81e      	bhi.n	800a68a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	88db      	ldrh	r3, [r3, #6]
 800a650:	2b02      	cmp	r3, #2
 800a652:	d004      	beq.n	800a65e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f890 	bl	800a77c <USBD_CtlError>
        break;
 800a65c:	e01a      	b.n	800a694 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d005      	beq.n	800a67a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	f043 0202 	orr.w	r2, r3, #2
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	330c      	adds	r3, #12
 800a67e:	2202      	movs	r2, #2
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f8eb 	bl	800a85e <USBD_CtlSendData>
      break;
 800a688:	e004      	b.n	800a694 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f875 	bl	800a77c <USBD_CtlError>
      break;
 800a692:	bf00      	nop
  }
}
 800a694:	bf00      	nop
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	885b      	ldrh	r3, [r3, #2]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d106      	bne.n	800a6bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f92b 	bl	800a912 <USBD_CtlSendStatus>
  }
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d80b      	bhi.n	800a6f4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	885b      	ldrh	r3, [r3, #2]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d10c      	bne.n	800a6fe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f910 	bl	800a912 <USBD_CtlSendStatus>
      }
      break;
 800a6f2:	e004      	b.n	800a6fe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f840 	bl	800a77c <USBD_CtlError>
      break;
 800a6fc:	e000      	b.n	800a700 <USBD_ClrFeature+0x3c>
      break;
 800a6fe:	bf00      	nop
  }
}
 800a700:	bf00      	nop
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	781a      	ldrb	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3301      	adds	r3, #1
 800a722:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	781a      	ldrb	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	3301      	adds	r3, #1
 800a730:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7ff fa92 	bl	8009c5c <SWAPBYTE>
 800a738:	4603      	mov	r3, r0
 800a73a:	461a      	mov	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	3301      	adds	r3, #1
 800a744:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3301      	adds	r3, #1
 800a74a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f7ff fa85 	bl	8009c5c <SWAPBYTE>
 800a752:	4603      	mov	r3, r0
 800a754:	461a      	mov	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	3301      	adds	r3, #1
 800a75e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3301      	adds	r3, #1
 800a764:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f7ff fa78 	bl	8009c5c <SWAPBYTE>
 800a76c:	4603      	mov	r3, r0
 800a76e:	461a      	mov	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	80da      	strh	r2, [r3, #6]
}
 800a774:	bf00      	nop
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a786:	2180      	movs	r1, #128	@ 0x80
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f003 fc79 	bl	800e080 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a78e:	2100      	movs	r1, #0
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f003 fc75 	bl	800e080 <USBD_LL_StallEP>
}
 800a796:	bf00      	nop
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b086      	sub	sp, #24
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	60b9      	str	r1, [r7, #8]
 800a7a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d036      	beq.n	800a822 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a7b8:	6938      	ldr	r0, [r7, #16]
 800a7ba:	f000 f836 	bl	800a82a <USBD_GetLen>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a7cc:	7dfb      	ldrb	r3, [r7, #23]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	7812      	ldrb	r2, [r2, #0]
 800a7d6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7d8:	7dfb      	ldrb	r3, [r7, #23]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	2203      	movs	r2, #3
 800a7e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7e8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a7ee:	e013      	b.n	800a818 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	7812      	ldrb	r2, [r2, #0]
 800a7fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	3301      	adds	r3, #1
 800a800:	613b      	str	r3, [r7, #16]
    idx++;
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	3301      	adds	r3, #1
 800a806:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	4413      	add	r3, r2
 800a80e:	2200      	movs	r2, #0
 800a810:	701a      	strb	r2, [r3, #0]
    idx++;
 800a812:	7dfb      	ldrb	r3, [r7, #23]
 800a814:	3301      	adds	r3, #1
 800a816:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1e7      	bne.n	800a7f0 <USBD_GetString+0x52>
 800a820:	e000      	b.n	800a824 <USBD_GetString+0x86>
    return;
 800a822:	bf00      	nop
  }
}
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b085      	sub	sp, #20
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a83a:	e005      	b.n	800a848 <USBD_GetLen+0x1e>
  {
    len++;
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
 800a83e:	3301      	adds	r3, #1
 800a840:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	3301      	adds	r3, #1
 800a846:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1f5      	bne.n	800a83c <USBD_GetLen+0x12>
  }

  return len;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	60f8      	str	r0, [r7, #12]
 800a866:	60b9      	str	r1, [r7, #8]
 800a868:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2202      	movs	r2, #2
 800a86e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	2100      	movs	r1, #0
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f003 fc84 	bl	800e192 <USBD_LL_Transmit>

  return USBD_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f003 fc73 	bl	800e192 <USBD_LL_Transmit>

  return USBD_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2203      	movs	r2, #3
 800a8c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	2100      	movs	r1, #0
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f003 fc77 	bl	800e1d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	2100      	movs	r1, #0
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f003 fc66 	bl	800e1d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2204      	movs	r2, #4
 800a91e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a922:	2300      	movs	r3, #0
 800a924:	2200      	movs	r2, #0
 800a926:	2100      	movs	r1, #0
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f003 fc32 	bl	800e192 <USBD_LL_Transmit>

  return USBD_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2205      	movs	r2, #5
 800a944:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a948:	2300      	movs	r3, #0
 800a94a:	2200      	movs	r2, #0
 800a94c:	2100      	movs	r1, #0
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f003 fc40 	bl	800e1d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <__NVIC_SetPriority>:
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	6039      	str	r1, [r7, #0]
 800a96a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a96c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a970:	2b00      	cmp	r3, #0
 800a972:	db0a      	blt.n	800a98a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	b2da      	uxtb	r2, r3
 800a978:	490c      	ldr	r1, [pc, #48]	@ (800a9ac <__NVIC_SetPriority+0x4c>)
 800a97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a97e:	0112      	lsls	r2, r2, #4
 800a980:	b2d2      	uxtb	r2, r2
 800a982:	440b      	add	r3, r1
 800a984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a988:	e00a      	b.n	800a9a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	4908      	ldr	r1, [pc, #32]	@ (800a9b0 <__NVIC_SetPriority+0x50>)
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	f003 030f 	and.w	r3, r3, #15
 800a996:	3b04      	subs	r3, #4
 800a998:	0112      	lsls	r2, r2, #4
 800a99a:	b2d2      	uxtb	r2, r2
 800a99c:	440b      	add	r3, r1
 800a99e:	761a      	strb	r2, [r3, #24]
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	e000e100 	.word	0xe000e100
 800a9b0:	e000ed00 	.word	0xe000ed00

0800a9b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a9b8:	4b05      	ldr	r3, [pc, #20]	@ (800a9d0 <SysTick_Handler+0x1c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a9bc:	f001 ff36 	bl	800c82c <xTaskGetSchedulerState>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d001      	beq.n	800a9ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a9c6:	f002 fd2f 	bl	800d428 <xPortSysTickHandler>
  }
}
 800a9ca:	bf00      	nop
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	e000e010 	.word	0xe000e010

0800a9d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a9d8:	2100      	movs	r1, #0
 800a9da:	f06f 0004 	mvn.w	r0, #4
 800a9de:	f7ff ffbf 	bl	800a960 <__NVIC_SetPriority>
#endif
}
 800a9e2:	bf00      	nop
 800a9e4:	bd80      	pop	{r7, pc}
	...

0800a9e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9ee:	f3ef 8305 	mrs	r3, IPSR
 800a9f2:	603b      	str	r3, [r7, #0]
  return(result);
 800a9f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d003      	beq.n	800aa02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a9fa:	f06f 0305 	mvn.w	r3, #5
 800a9fe:	607b      	str	r3, [r7, #4]
 800aa00:	e00c      	b.n	800aa1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aa02:	4b0a      	ldr	r3, [pc, #40]	@ (800aa2c <osKernelInitialize+0x44>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d105      	bne.n	800aa16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aa0a:	4b08      	ldr	r3, [pc, #32]	@ (800aa2c <osKernelInitialize+0x44>)
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	607b      	str	r3, [r7, #4]
 800aa14:	e002      	b.n	800aa1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aa16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa1c:	687b      	ldr	r3, [r7, #4]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	20000538 	.word	0x20000538

0800aa30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa36:	f3ef 8305 	mrs	r3, IPSR
 800aa3a:	603b      	str	r3, [r7, #0]
  return(result);
 800aa3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <osKernelStart+0x1a>
    stat = osErrorISR;
 800aa42:	f06f 0305 	mvn.w	r3, #5
 800aa46:	607b      	str	r3, [r7, #4]
 800aa48:	e010      	b.n	800aa6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aa4a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa78 <osKernelStart+0x48>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d109      	bne.n	800aa66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aa52:	f7ff ffbf 	bl	800a9d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aa56:	4b08      	ldr	r3, [pc, #32]	@ (800aa78 <osKernelStart+0x48>)
 800aa58:	2202      	movs	r2, #2
 800aa5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aa5c:	f001 fa82 	bl	800bf64 <vTaskStartScheduler>
      stat = osOK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	607b      	str	r3, [r7, #4]
 800aa64:	e002      	b.n	800aa6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aa66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa6c:	687b      	ldr	r3, [r7, #4]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	20000538 	.word	0x20000538

0800aa7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08e      	sub	sp, #56	@ 0x38
 800aa80:	af04      	add	r7, sp, #16
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa8c:	f3ef 8305 	mrs	r3, IPSR
 800aa90:	617b      	str	r3, [r7, #20]
  return(result);
 800aa92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d17f      	bne.n	800ab98 <osThreadNew+0x11c>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d07c      	beq.n	800ab98 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800aa9e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800aaa2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aaa4:	2318      	movs	r3, #24
 800aaa6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800aaac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aab0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d045      	beq.n	800ab44 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <osThreadNew+0x4a>
        name = attr->name;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d002      	beq.n	800aad4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d008      	beq.n	800aaec <osThreadNew+0x70>
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	2b38      	cmp	r3, #56	@ 0x38
 800aade:	d805      	bhi.n	800aaec <osThreadNew+0x70>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	f003 0301 	and.w	r3, r3, #1
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <osThreadNew+0x74>
        return (NULL);
 800aaec:	2300      	movs	r3, #0
 800aaee:	e054      	b.n	800ab9a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	695b      	ldr	r3, [r3, #20]
 800aafc:	089b      	lsrs	r3, r3, #2
 800aafe:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00e      	beq.n	800ab26 <osThreadNew+0xaa>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	2ba7      	cmp	r3, #167	@ 0xa7
 800ab0e:	d90a      	bls.n	800ab26 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d006      	beq.n	800ab26 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <osThreadNew+0xaa>
        mem = 1;
 800ab20:	2301      	movs	r3, #1
 800ab22:	61bb      	str	r3, [r7, #24]
 800ab24:	e010      	b.n	800ab48 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10c      	bne.n	800ab48 <osThreadNew+0xcc>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d108      	bne.n	800ab48 <osThreadNew+0xcc>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d104      	bne.n	800ab48 <osThreadNew+0xcc>
          mem = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	61bb      	str	r3, [r7, #24]
 800ab42:	e001      	b.n	800ab48 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d110      	bne.n	800ab70 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab56:	9202      	str	r2, [sp, #8]
 800ab58:	9301      	str	r3, [sp, #4]
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	6a3a      	ldr	r2, [r7, #32]
 800ab62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f001 f809 	bl	800bb7c <xTaskCreateStatic>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	613b      	str	r3, [r7, #16]
 800ab6e:	e013      	b.n	800ab98 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d110      	bne.n	800ab98 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ab76:	6a3b      	ldr	r3, [r7, #32]
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	f107 0310 	add.w	r3, r7, #16
 800ab7e:	9301      	str	r3, [sp, #4]
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f001 f857 	bl	800bc3c <xTaskCreate>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d001      	beq.n	800ab98 <osThreadNew+0x11c>
            hTask = NULL;
 800ab94:	2300      	movs	r3, #0
 800ab96:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ab98:	693b      	ldr	r3, [r7, #16]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3728      	adds	r7, #40	@ 0x28
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abaa:	f3ef 8305 	mrs	r3, IPSR
 800abae:	60bb      	str	r3, [r7, #8]
  return(result);
 800abb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <osDelay+0x1c>
    stat = osErrorISR;
 800abb6:	f06f 0305 	mvn.w	r3, #5
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	e007      	b.n	800abce <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <osDelay+0x2c>
      vTaskDelay(ticks);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f001 f995 	bl	800bef8 <vTaskDelay>
    }
  }

  return (stat);
 800abce:	68fb      	ldr	r3, [r7, #12]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08a      	sub	sp, #40	@ 0x28
 800abdc:	af02      	add	r7, sp, #8
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800abe4:	2300      	movs	r3, #0
 800abe6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abe8:	f3ef 8305 	mrs	r3, IPSR
 800abec:	613b      	str	r3, [r7, #16]
  return(result);
 800abee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d15f      	bne.n	800acb4 <osMessageQueueNew+0xdc>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d05c      	beq.n	800acb4 <osMessageQueueNew+0xdc>
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d059      	beq.n	800acb4 <osMessageQueueNew+0xdc>
    mem = -1;
 800ac00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac04:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d029      	beq.n	800ac60 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d012      	beq.n	800ac3a <osMessageQueueNew+0x62>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	2b4f      	cmp	r3, #79	@ 0x4f
 800ac1a:	d90e      	bls.n	800ac3a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00a      	beq.n	800ac3a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	695a      	ldr	r2, [r3, #20]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	fb01 f303 	mul.w	r3, r1, r3
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d302      	bcc.n	800ac3a <osMessageQueueNew+0x62>
        mem = 1;
 800ac34:	2301      	movs	r3, #1
 800ac36:	61bb      	str	r3, [r7, #24]
 800ac38:	e014      	b.n	800ac64 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d110      	bne.n	800ac64 <osMessageQueueNew+0x8c>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10c      	bne.n	800ac64 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d108      	bne.n	800ac64 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d104      	bne.n	800ac64 <osMessageQueueNew+0x8c>
          mem = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	61bb      	str	r3, [r7, #24]
 800ac5e:	e001      	b.n	800ac64 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d10b      	bne.n	800ac82 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691a      	ldr	r2, [r3, #16]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	2100      	movs	r1, #0
 800ac74:	9100      	str	r1, [sp, #0]
 800ac76:	68b9      	ldr	r1, [r7, #8]
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 fa31 	bl	800b0e0 <xQueueGenericCreateStatic>
 800ac7e:	61f8      	str	r0, [r7, #28]
 800ac80:	e008      	b.n	800ac94 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d105      	bne.n	800ac94 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ac88:	2200      	movs	r2, #0
 800ac8a:	68b9      	ldr	r1, [r7, #8]
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 faa4 	bl	800b1da <xQueueGenericCreate>
 800ac92:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00c      	beq.n	800acb4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	617b      	str	r3, [r7, #20]
 800aca6:	e001      	b.n	800acac <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800aca8:	2300      	movs	r3, #0
 800acaa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800acac:	6979      	ldr	r1, [r7, #20]
 800acae:	69f8      	ldr	r0, [r7, #28]
 800acb0:	f000 ff06 	bl	800bac0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800acb4:	69fb      	ldr	r3, [r7, #28]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3720      	adds	r7, #32
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b088      	sub	sp, #32
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	603b      	str	r3, [r7, #0]
 800accc:	4613      	mov	r3, r2
 800acce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acd8:	f3ef 8305 	mrs	r3, IPSR
 800acdc:	617b      	str	r3, [r7, #20]
  return(result);
 800acde:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d028      	beq.n	800ad36 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d005      	beq.n	800acf6 <osMessageQueuePut+0x36>
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <osMessageQueuePut+0x36>
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800acf6:	f06f 0303 	mvn.w	r3, #3
 800acfa:	61fb      	str	r3, [r7, #28]
 800acfc:	e038      	b.n	800ad70 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800acfe:	2300      	movs	r3, #0
 800ad00:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ad02:	f107 0210 	add.w	r2, r7, #16
 800ad06:	2300      	movs	r3, #0
 800ad08:	68b9      	ldr	r1, [r7, #8]
 800ad0a:	69b8      	ldr	r0, [r7, #24]
 800ad0c:	f000 fbc6 	bl	800b49c <xQueueGenericSendFromISR>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d003      	beq.n	800ad1e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ad16:	f06f 0302 	mvn.w	r3, #2
 800ad1a:	61fb      	str	r3, [r7, #28]
 800ad1c:	e028      	b.n	800ad70 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d025      	beq.n	800ad70 <osMessageQueuePut+0xb0>
 800ad24:	4b15      	ldr	r3, [pc, #84]	@ (800ad7c <osMessageQueuePut+0xbc>)
 800ad26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	e01c      	b.n	800ad70 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d002      	beq.n	800ad42 <osMessageQueuePut+0x82>
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d103      	bne.n	800ad4a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ad42:	f06f 0303 	mvn.w	r3, #3
 800ad46:	61fb      	str	r3, [r7, #28]
 800ad48:	e012      	b.n	800ad70 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	68b9      	ldr	r1, [r7, #8]
 800ad50:	69b8      	ldr	r0, [r7, #24]
 800ad52:	f000 faa1 	bl	800b298 <xQueueGenericSend>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d009      	beq.n	800ad70 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d003      	beq.n	800ad6a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ad62:	f06f 0301 	mvn.w	r3, #1
 800ad66:	61fb      	str	r3, [r7, #28]
 800ad68:	e002      	b.n	800ad70 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ad6a:	f06f 0302 	mvn.w	r3, #2
 800ad6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ad70:	69fb      	ldr	r3, [r7, #28]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3720      	adds	r7, #32
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	e000ed04 	.word	0xe000ed04

0800ad80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b088      	sub	sp, #32
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad96:	f3ef 8305 	mrs	r3, IPSR
 800ad9a:	617b      	str	r3, [r7, #20]
  return(result);
 800ad9c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d028      	beq.n	800adf4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d005      	beq.n	800adb4 <osMessageQueueGet+0x34>
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <osMessageQueueGet+0x34>
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d003      	beq.n	800adbc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800adb4:	f06f 0303 	mvn.w	r3, #3
 800adb8:	61fb      	str	r3, [r7, #28]
 800adba:	e037      	b.n	800ae2c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800adbc:	2300      	movs	r3, #0
 800adbe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800adc0:	f107 0310 	add.w	r3, r7, #16
 800adc4:	461a      	mov	r2, r3
 800adc6:	68b9      	ldr	r1, [r7, #8]
 800adc8:	69b8      	ldr	r0, [r7, #24]
 800adca:	f000 fce7 	bl	800b79c <xQueueReceiveFromISR>
 800adce:	4603      	mov	r3, r0
 800add0:	2b01      	cmp	r3, #1
 800add2:	d003      	beq.n	800addc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800add4:	f06f 0302 	mvn.w	r3, #2
 800add8:	61fb      	str	r3, [r7, #28]
 800adda:	e027      	b.n	800ae2c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d024      	beq.n	800ae2c <osMessageQueueGet+0xac>
 800ade2:	4b15      	ldr	r3, [pc, #84]	@ (800ae38 <osMessageQueueGet+0xb8>)
 800ade4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	e01b      	b.n	800ae2c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d002      	beq.n	800ae00 <osMessageQueueGet+0x80>
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d103      	bne.n	800ae08 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ae00:	f06f 0303 	mvn.w	r3, #3
 800ae04:	61fb      	str	r3, [r7, #28]
 800ae06:	e011      	b.n	800ae2c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	68b9      	ldr	r1, [r7, #8]
 800ae0c:	69b8      	ldr	r0, [r7, #24]
 800ae0e:	f000 fbe3 	bl	800b5d8 <xQueueReceive>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d009      	beq.n	800ae2c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d003      	beq.n	800ae26 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ae1e:	f06f 0301 	mvn.w	r3, #1
 800ae22:	61fb      	str	r3, [r7, #28]
 800ae24:	e002      	b.n	800ae2c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ae26:	f06f 0302 	mvn.w	r3, #2
 800ae2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ae2c:	69fb      	ldr	r3, [r7, #28]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3720      	adds	r7, #32
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	4a07      	ldr	r2, [pc, #28]	@ (800ae68 <vApplicationGetIdleTaskMemory+0x2c>)
 800ae4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	4a06      	ldr	r2, [pc, #24]	@ (800ae6c <vApplicationGetIdleTaskMemory+0x30>)
 800ae52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800ae5a:	601a      	str	r2, [r3, #0]
}
 800ae5c:	bf00      	nop
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	2000053c 	.word	0x2000053c
 800ae6c:	200005e4 	.word	0x200005e4

0800ae70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	4a07      	ldr	r2, [pc, #28]	@ (800ae9c <vApplicationGetTimerTaskMemory+0x2c>)
 800ae80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	4a06      	ldr	r2, [pc, #24]	@ (800aea0 <vApplicationGetTimerTaskMemory+0x30>)
 800ae86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 800ae8e:	601a      	str	r2, [r3, #0]
}
 800ae90:	bf00      	nop
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	200010d4 	.word	0x200010d4
 800aea0:	2000117c 	.word	0x2000117c

0800aea4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f103 0208 	add.w	r2, r3, #8
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aebc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f103 0208 	add.w	r2, r3, #8
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f103 0208 	add.w	r2, r3, #8
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aef2:	bf00      	nop
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aefe:	b480      	push	{r7}
 800af00:	b085      	sub	sp, #20
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	1c5a      	adds	r2, r3, #1
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	601a      	str	r2, [r3, #0]
}
 800af3a:	bf00      	nop
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af46:	b480      	push	{r7}
 800af48:	b085      	sub	sp, #20
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af5c:	d103      	bne.n	800af66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	60fb      	str	r3, [r7, #12]
 800af64:	e00c      	b.n	800af80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	3308      	adds	r3, #8
 800af6a:	60fb      	str	r3, [r7, #12]
 800af6c:	e002      	b.n	800af74 <vListInsert+0x2e>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	60fb      	str	r3, [r7, #12]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d2f6      	bcs.n	800af6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	683a      	ldr	r2, [r7, #0]
 800af9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	1c5a      	adds	r2, r3, #1
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	601a      	str	r2, [r3, #0]
}
 800afac:	bf00      	nop
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	6892      	ldr	r2, [r2, #8]
 800afce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	6852      	ldr	r2, [r2, #4]
 800afd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d103      	bne.n	800afec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	689a      	ldr	r2, [r3, #8]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	1e5a      	subs	r2, r3, #1
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10b      	bne.n	800b038 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b032:	bf00      	nop
 800b034:	bf00      	nop
 800b036:	e7fd      	b.n	800b034 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b038:	f002 f966 	bl	800d308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b044:	68f9      	ldr	r1, [r7, #12]
 800b046:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b048:	fb01 f303 	mul.w	r3, r1, r3
 800b04c:	441a      	add	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2200      	movs	r2, #0
 800b056:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b068:	3b01      	subs	r3, #1
 800b06a:	68f9      	ldr	r1, [r7, #12]
 800b06c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b06e:	fb01 f303 	mul.w	r3, r1, r3
 800b072:	441a      	add	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	22ff      	movs	r2, #255	@ 0xff
 800b07c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	22ff      	movs	r2, #255	@ 0xff
 800b084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d114      	bne.n	800b0b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d01a      	beq.n	800b0cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3310      	adds	r3, #16
 800b09a:	4618      	mov	r0, r3
 800b09c:	f001 fa00 	bl	800c4a0 <xTaskRemoveFromEventList>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d012      	beq.n	800b0cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b0dc <xQueueGenericReset+0xd0>)
 800b0a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	e009      	b.n	800b0cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	3310      	adds	r3, #16
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7ff fef1 	bl	800aea4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3324      	adds	r3, #36	@ 0x24
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7ff feec 	bl	800aea4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b0cc:	f002 f94e 	bl	800d36c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b0d0:	2301      	movs	r3, #1
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	e000ed04 	.word	0xe000ed04

0800b0e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08e      	sub	sp, #56	@ 0x38
 800b0e4:	af02      	add	r7, sp, #8
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10b      	bne.n	800b10c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b106:	bf00      	nop
 800b108:	bf00      	nop
 800b10a:	e7fd      	b.n	800b108 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10b      	bne.n	800b12a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b124:	bf00      	nop
 800b126:	bf00      	nop
 800b128:	e7fd      	b.n	800b126 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <xQueueGenericCreateStatic+0x56>
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <xQueueGenericCreateStatic+0x5a>
 800b136:	2301      	movs	r3, #1
 800b138:	e000      	b.n	800b13c <xQueueGenericCreateStatic+0x5c>
 800b13a:	2300      	movs	r3, #0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10b      	bne.n	800b158 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	623b      	str	r3, [r7, #32]
}
 800b152:	bf00      	nop
 800b154:	bf00      	nop
 800b156:	e7fd      	b.n	800b154 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d102      	bne.n	800b164 <xQueueGenericCreateStatic+0x84>
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <xQueueGenericCreateStatic+0x88>
 800b164:	2301      	movs	r3, #1
 800b166:	e000      	b.n	800b16a <xQueueGenericCreateStatic+0x8a>
 800b168:	2300      	movs	r3, #0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10b      	bne.n	800b186 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	61fb      	str	r3, [r7, #28]
}
 800b180:	bf00      	nop
 800b182:	bf00      	nop
 800b184:	e7fd      	b.n	800b182 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b186:	2350      	movs	r3, #80	@ 0x50
 800b188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	2b50      	cmp	r3, #80	@ 0x50
 800b18e:	d00b      	beq.n	800b1a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	61bb      	str	r3, [r7, #24]
}
 800b1a2:	bf00      	nop
 800b1a4:	bf00      	nop
 800b1a6:	e7fd      	b.n	800b1a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b1a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00d      	beq.n	800b1d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	68b9      	ldr	r1, [r7, #8]
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f000 f840 	bl	800b250 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3730      	adds	r7, #48	@ 0x30
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b08a      	sub	sp, #40	@ 0x28
 800b1de:	af02      	add	r7, sp, #8
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10b      	bne.n	800b206 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	613b      	str	r3, [r7, #16]
}
 800b200:	bf00      	nop
 800b202:	bf00      	nop
 800b204:	e7fd      	b.n	800b202 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	fb02 f303 	mul.w	r3, r2, r3
 800b20e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	3350      	adds	r3, #80	@ 0x50
 800b214:	4618      	mov	r0, r3
 800b216:	f002 f999 	bl	800d54c <pvPortMalloc>
 800b21a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d011      	beq.n	800b246 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	3350      	adds	r3, #80	@ 0x50
 800b22a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b234:	79fa      	ldrb	r2, [r7, #7]
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	4613      	mov	r3, r2
 800b23c:	697a      	ldr	r2, [r7, #20]
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f000 f805 	bl	800b250 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b246:	69bb      	ldr	r3, [r7, #24]
	}
 800b248:	4618      	mov	r0, r3
 800b24a:	3720      	adds	r7, #32
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d103      	bne.n	800b26c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	69ba      	ldr	r2, [r7, #24]
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	e002      	b.n	800b272 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b27e:	2101      	movs	r1, #1
 800b280:	69b8      	ldr	r0, [r7, #24]
 800b282:	f7ff fec3 	bl	800b00c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	78fa      	ldrb	r2, [r7, #3]
 800b28a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b28e:	bf00      	nop
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08e      	sub	sp, #56	@ 0x38
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10b      	bne.n	800b2cc <xQueueGenericSend+0x34>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b2c6:	bf00      	nop
 800b2c8:	bf00      	nop
 800b2ca:	e7fd      	b.n	800b2c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d103      	bne.n	800b2da <xQueueGenericSend+0x42>
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <xQueueGenericSend+0x46>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e000      	b.n	800b2e0 <xQueueGenericSend+0x48>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10b      	bne.n	800b2fc <xQueueGenericSend+0x64>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b2f6:	bf00      	nop
 800b2f8:	bf00      	nop
 800b2fa:	e7fd      	b.n	800b2f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d103      	bne.n	800b30a <xQueueGenericSend+0x72>
 800b302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b306:	2b01      	cmp	r3, #1
 800b308:	d101      	bne.n	800b30e <xQueueGenericSend+0x76>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e000      	b.n	800b310 <xQueueGenericSend+0x78>
 800b30e:	2300      	movs	r3, #0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10b      	bne.n	800b32c <xQueueGenericSend+0x94>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	623b      	str	r3, [r7, #32]
}
 800b326:	bf00      	nop
 800b328:	bf00      	nop
 800b32a:	e7fd      	b.n	800b328 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b32c:	f001 fa7e 	bl	800c82c <xTaskGetSchedulerState>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d102      	bne.n	800b33c <xQueueGenericSend+0xa4>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <xQueueGenericSend+0xa8>
 800b33c:	2301      	movs	r3, #1
 800b33e:	e000      	b.n	800b342 <xQueueGenericSend+0xaa>
 800b340:	2300      	movs	r3, #0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10b      	bne.n	800b35e <xQueueGenericSend+0xc6>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	61fb      	str	r3, [r7, #28]
}
 800b358:	bf00      	nop
 800b35a:	bf00      	nop
 800b35c:	e7fd      	b.n	800b35a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b35e:	f001 ffd3 	bl	800d308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d302      	bcc.n	800b374 <xQueueGenericSend+0xdc>
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2b02      	cmp	r3, #2
 800b372:	d129      	bne.n	800b3c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b374:	683a      	ldr	r2, [r7, #0]
 800b376:	68b9      	ldr	r1, [r7, #8]
 800b378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b37a:	f000 fa91 	bl	800b8a0 <prvCopyDataToQueue>
 800b37e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b384:	2b00      	cmp	r3, #0
 800b386:	d010      	beq.n	800b3aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38a:	3324      	adds	r3, #36	@ 0x24
 800b38c:	4618      	mov	r0, r3
 800b38e:	f001 f887 	bl	800c4a0 <xTaskRemoveFromEventList>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d013      	beq.n	800b3c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b398:	4b3f      	ldr	r3, [pc, #252]	@ (800b498 <xQueueGenericSend+0x200>)
 800b39a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	e00a      	b.n	800b3c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d007      	beq.n	800b3c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b3b0:	4b39      	ldr	r3, [pc, #228]	@ (800b498 <xQueueGenericSend+0x200>)
 800b3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b3c0:	f001 ffd4 	bl	800d36c <vPortExitCritical>
				return pdPASS;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e063      	b.n	800b490 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d103      	bne.n	800b3d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3ce:	f001 ffcd 	bl	800d36c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e05c      	b.n	800b490 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d106      	bne.n	800b3ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3dc:	f107 0314 	add.w	r3, r7, #20
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f001 f8c1 	bl	800c568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3ea:	f001 ffbf 	bl	800d36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3ee:	f000 fe29 	bl	800c044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3f2:	f001 ff89 	bl	800d308 <vPortEnterCritical>
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3fc:	b25b      	sxtb	r3, r3
 800b3fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b402:	d103      	bne.n	800b40c <xQueueGenericSend+0x174>
 800b404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b406:	2200      	movs	r2, #0
 800b408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b412:	b25b      	sxtb	r3, r3
 800b414:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b418:	d103      	bne.n	800b422 <xQueueGenericSend+0x18a>
 800b41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b422:	f001 ffa3 	bl	800d36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b426:	1d3a      	adds	r2, r7, #4
 800b428:	f107 0314 	add.w	r3, r7, #20
 800b42c:	4611      	mov	r1, r2
 800b42e:	4618      	mov	r0, r3
 800b430:	f001 f8b0 	bl	800c594 <xTaskCheckForTimeOut>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d124      	bne.n	800b484 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b43a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b43c:	f000 fb28 	bl	800ba90 <prvIsQueueFull>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d018      	beq.n	800b478 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	3310      	adds	r3, #16
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	4611      	mov	r1, r2
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 ffd4 	bl	800c3fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b456:	f000 fab3 	bl	800b9c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b45a:	f000 fe01 	bl	800c060 <xTaskResumeAll>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	f47f af7c 	bne.w	800b35e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b466:	4b0c      	ldr	r3, [pc, #48]	@ (800b498 <xQueueGenericSend+0x200>)
 800b468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	e772      	b.n	800b35e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b478:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b47a:	f000 faa1 	bl	800b9c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b47e:	f000 fdef 	bl	800c060 <xTaskResumeAll>
 800b482:	e76c      	b.n	800b35e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b484:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b486:	f000 fa9b 	bl	800b9c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b48a:	f000 fde9 	bl	800c060 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b48e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b490:	4618      	mov	r0, r3
 800b492:	3738      	adds	r7, #56	@ 0x38
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	e000ed04 	.word	0xe000ed04

0800b49c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b090      	sub	sp, #64	@ 0x40
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10b      	bne.n	800b4cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b4c6:	bf00      	nop
 800b4c8:	bf00      	nop
 800b4ca:	e7fd      	b.n	800b4c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d103      	bne.n	800b4da <xQueueGenericSendFromISR+0x3e>
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <xQueueGenericSendFromISR+0x42>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e000      	b.n	800b4e0 <xQueueGenericSendFromISR+0x44>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10b      	bne.n	800b4fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b4f6:	bf00      	nop
 800b4f8:	bf00      	nop
 800b4fa:	e7fd      	b.n	800b4f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d103      	bne.n	800b50a <xQueueGenericSendFromISR+0x6e>
 800b502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b506:	2b01      	cmp	r3, #1
 800b508:	d101      	bne.n	800b50e <xQueueGenericSendFromISR+0x72>
 800b50a:	2301      	movs	r3, #1
 800b50c:	e000      	b.n	800b510 <xQueueGenericSendFromISR+0x74>
 800b50e:	2300      	movs	r3, #0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10b      	bne.n	800b52c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	623b      	str	r3, [r7, #32]
}
 800b526:	bf00      	nop
 800b528:	bf00      	nop
 800b52a:	e7fd      	b.n	800b528 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b52c:	f001 ffcc 	bl	800d4c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b530:	f3ef 8211 	mrs	r2, BASEPRI
 800b534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	61fa      	str	r2, [r7, #28]
 800b546:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b548:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b54a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b554:	429a      	cmp	r2, r3
 800b556:	d302      	bcc.n	800b55e <xQueueGenericSendFromISR+0xc2>
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d12f      	bne.n	800b5be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b560:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b564:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b56c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	68b9      	ldr	r1, [r7, #8]
 800b572:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b574:	f000 f994 	bl	800b8a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b578:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b57c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b580:	d112      	bne.n	800b5a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	d016      	beq.n	800b5b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58c:	3324      	adds	r3, #36	@ 0x24
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 ff86 	bl	800c4a0 <xTaskRemoveFromEventList>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00e      	beq.n	800b5b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00b      	beq.n	800b5b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	601a      	str	r2, [r3, #0]
 800b5a6:	e007      	b.n	800b5b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	b25a      	sxtb	r2, r3
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b5bc:	e001      	b.n	800b5c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b5cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3740      	adds	r7, #64	@ 0x40
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08c      	sub	sp, #48	@ 0x30
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10b      	bne.n	800b60a <xQueueReceive+0x32>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	623b      	str	r3, [r7, #32]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d103      	bne.n	800b618 <xQueueReceive+0x40>
 800b610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b614:	2b00      	cmp	r3, #0
 800b616:	d101      	bne.n	800b61c <xQueueReceive+0x44>
 800b618:	2301      	movs	r3, #1
 800b61a:	e000      	b.n	800b61e <xQueueReceive+0x46>
 800b61c:	2300      	movs	r3, #0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10b      	bne.n	800b63a <xQueueReceive+0x62>
	__asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	61fb      	str	r3, [r7, #28]
}
 800b634:	bf00      	nop
 800b636:	bf00      	nop
 800b638:	e7fd      	b.n	800b636 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b63a:	f001 f8f7 	bl	800c82c <xTaskGetSchedulerState>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d102      	bne.n	800b64a <xQueueReceive+0x72>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <xQueueReceive+0x76>
 800b64a:	2301      	movs	r3, #1
 800b64c:	e000      	b.n	800b650 <xQueueReceive+0x78>
 800b64e:	2300      	movs	r3, #0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10b      	bne.n	800b66c <xQueueReceive+0x94>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	61bb      	str	r3, [r7, #24]
}
 800b666:	bf00      	nop
 800b668:	bf00      	nop
 800b66a:	e7fd      	b.n	800b668 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b66c:	f001 fe4c 	bl	800d308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b674:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d01f      	beq.n	800b6bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b67c:	68b9      	ldr	r1, [r7, #8]
 800b67e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b680:	f000 f978 	bl	800b974 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b686:	1e5a      	subs	r2, r3, #1
 800b688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00f      	beq.n	800b6b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b696:	3310      	adds	r3, #16
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 ff01 	bl	800c4a0 <xTaskRemoveFromEventList>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d007      	beq.n	800b6b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6a4:	4b3c      	ldr	r3, [pc, #240]	@ (800b798 <xQueueReceive+0x1c0>)
 800b6a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6b4:	f001 fe5a 	bl	800d36c <vPortExitCritical>
				return pdPASS;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e069      	b.n	800b790 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d103      	bne.n	800b6ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6c2:	f001 fe53 	bl	800d36c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	e062      	b.n	800b790 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d106      	bne.n	800b6de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6d0:	f107 0310 	add.w	r3, r7, #16
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f000 ff47 	bl	800c568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6de:	f001 fe45 	bl	800d36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6e2:	f000 fcaf 	bl	800c044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6e6:	f001 fe0f 	bl	800d308 <vPortEnterCritical>
 800b6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6f0:	b25b      	sxtb	r3, r3
 800b6f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6f6:	d103      	bne.n	800b700 <xQueueReceive+0x128>
 800b6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b702:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b706:	b25b      	sxtb	r3, r3
 800b708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b70c:	d103      	bne.n	800b716 <xQueueReceive+0x13e>
 800b70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b716:	f001 fe29 	bl	800d36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b71a:	1d3a      	adds	r2, r7, #4
 800b71c:	f107 0310 	add.w	r3, r7, #16
 800b720:	4611      	mov	r1, r2
 800b722:	4618      	mov	r0, r3
 800b724:	f000 ff36 	bl	800c594 <xTaskCheckForTimeOut>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d123      	bne.n	800b776 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b72e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b730:	f000 f998 	bl	800ba64 <prvIsQueueEmpty>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d017      	beq.n	800b76a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b73c:	3324      	adds	r3, #36	@ 0x24
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	4611      	mov	r1, r2
 800b742:	4618      	mov	r0, r3
 800b744:	f000 fe5a 	bl	800c3fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b74a:	f000 f939 	bl	800b9c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b74e:	f000 fc87 	bl	800c060 <xTaskResumeAll>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d189      	bne.n	800b66c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b758:	4b0f      	ldr	r3, [pc, #60]	@ (800b798 <xQueueReceive+0x1c0>)
 800b75a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	e780      	b.n	800b66c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b76a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b76c:	f000 f928 	bl	800b9c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b770:	f000 fc76 	bl	800c060 <xTaskResumeAll>
 800b774:	e77a      	b.n	800b66c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b778:	f000 f922 	bl	800b9c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b77c:	f000 fc70 	bl	800c060 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b780:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b782:	f000 f96f 	bl	800ba64 <prvIsQueueEmpty>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f43f af6f 	beq.w	800b66c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b78e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b790:	4618      	mov	r0, r3
 800b792:	3730      	adds	r7, #48	@ 0x30
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	e000ed04 	.word	0xe000ed04

0800b79c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08e      	sub	sp, #56	@ 0x38
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10b      	bne.n	800b7ca <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	623b      	str	r3, [r7, #32]
}
 800b7c4:	bf00      	nop
 800b7c6:	bf00      	nop
 800b7c8:	e7fd      	b.n	800b7c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d103      	bne.n	800b7d8 <xQueueReceiveFromISR+0x3c>
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <xQueueReceiveFromISR+0x40>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e000      	b.n	800b7de <xQueueReceiveFromISR+0x42>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10b      	bne.n	800b7fa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e6:	f383 8811 	msr	BASEPRI, r3
 800b7ea:	f3bf 8f6f 	isb	sy
 800b7ee:	f3bf 8f4f 	dsb	sy
 800b7f2:	61fb      	str	r3, [r7, #28]
}
 800b7f4:	bf00      	nop
 800b7f6:	bf00      	nop
 800b7f8:	e7fd      	b.n	800b7f6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7fa:	f001 fe65 	bl	800d4c8 <vPortValidateInterruptPriority>
	__asm volatile
 800b7fe:	f3ef 8211 	mrs	r2, BASEPRI
 800b802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	61ba      	str	r2, [r7, #24]
 800b814:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b816:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b818:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b822:	2b00      	cmp	r3, #0
 800b824:	d02f      	beq.n	800b886 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b828:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b82c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b830:	68b9      	ldr	r1, [r7, #8]
 800b832:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b834:	f000 f89e 	bl	800b974 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83a:	1e5a      	subs	r2, r3, #1
 800b83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b83e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b840:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b844:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b848:	d112      	bne.n	800b870 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d016      	beq.n	800b880 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b854:	3310      	adds	r3, #16
 800b856:	4618      	mov	r0, r3
 800b858:	f000 fe22 	bl	800c4a0 <xTaskRemoveFromEventList>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00e      	beq.n	800b880 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00b      	beq.n	800b880 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	e007      	b.n	800b880 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b874:	3301      	adds	r3, #1
 800b876:	b2db      	uxtb	r3, r3
 800b878:	b25a      	sxtb	r2, r3
 800b87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b880:	2301      	movs	r3, #1
 800b882:	637b      	str	r3, [r7, #52]	@ 0x34
 800b884:	e001      	b.n	800b88a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b886:	2300      	movs	r3, #0
 800b888:	637b      	str	r3, [r7, #52]	@ 0x34
 800b88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b88c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	f383 8811 	msr	BASEPRI, r3
}
 800b894:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3738      	adds	r7, #56	@ 0x38
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b086      	sub	sp, #24
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10d      	bne.n	800b8da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d14d      	bne.n	800b962 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 ffcc 	bl	800c868 <xTaskPriorityDisinherit>
 800b8d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	609a      	str	r2, [r3, #8]
 800b8d8:	e043      	b.n	800b962 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d119      	bne.n	800b914 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6858      	ldr	r0, [r3, #4]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	68b9      	ldr	r1, [r7, #8]
 800b8ec:	f003 faef 	bl	800eece <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8f8:	441a      	add	r2, r3
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	685a      	ldr	r2, [r3, #4]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	429a      	cmp	r2, r3
 800b908:	d32b      	bcc.n	800b962 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	605a      	str	r2, [r3, #4]
 800b912:	e026      	b.n	800b962 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	68d8      	ldr	r0, [r3, #12]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b91c:	461a      	mov	r2, r3
 800b91e:	68b9      	ldr	r1, [r7, #8]
 800b920:	f003 fad5 	bl	800eece <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	68da      	ldr	r2, [r3, #12]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b92c:	425b      	negs	r3, r3
 800b92e:	441a      	add	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	68da      	ldr	r2, [r3, #12]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d207      	bcs.n	800b950 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	689a      	ldr	r2, [r3, #8]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b948:	425b      	negs	r3, r3
 800b94a:	441a      	add	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b02      	cmp	r3, #2
 800b954:	d105      	bne.n	800b962 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	3b01      	subs	r3, #1
 800b960:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b96a:	697b      	ldr	r3, [r7, #20]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b982:	2b00      	cmp	r3, #0
 800b984:	d018      	beq.n	800b9b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	68da      	ldr	r2, [r3, #12]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b98e:	441a      	add	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	68da      	ldr	r2, [r3, #12]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d303      	bcc.n	800b9a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	68d9      	ldr	r1, [r3, #12]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	6838      	ldr	r0, [r7, #0]
 800b9b4:	f003 fa8b 	bl	800eece <memcpy>
	}
}
 800b9b8:	bf00      	nop
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b9c8:	f001 fc9e 	bl	800d308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9d4:	e011      	b.n	800b9fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d012      	beq.n	800ba04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	3324      	adds	r3, #36	@ 0x24
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 fd5c 	bl	800c4a0 <xTaskRemoveFromEventList>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d001      	beq.n	800b9f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b9ee:	f000 fe35 	bl	800c65c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	dce9      	bgt.n	800b9d6 <prvUnlockQueue+0x16>
 800ba02:	e000      	b.n	800ba06 <prvUnlockQueue+0x46>
					break;
 800ba04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	22ff      	movs	r2, #255	@ 0xff
 800ba0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ba0e:	f001 fcad 	bl	800d36c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba12:	f001 fc79 	bl	800d308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba1e:	e011      	b.n	800ba44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d012      	beq.n	800ba4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	3310      	adds	r3, #16
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 fd37 	bl	800c4a0 <xTaskRemoveFromEventList>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d001      	beq.n	800ba3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba38:	f000 fe10 	bl	800c65c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba3c:	7bbb      	ldrb	r3, [r7, #14]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	dce9      	bgt.n	800ba20 <prvUnlockQueue+0x60>
 800ba4c:	e000      	b.n	800ba50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	22ff      	movs	r2, #255	@ 0xff
 800ba54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ba58:	f001 fc88 	bl	800d36c <vPortExitCritical>
}
 800ba5c:	bf00      	nop
 800ba5e:	3710      	adds	r7, #16
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba6c:	f001 fc4c 	bl	800d308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d102      	bne.n	800ba7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	e001      	b.n	800ba82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba82:	f001 fc73 	bl	800d36c <vPortExitCritical>

	return xReturn;
 800ba86:	68fb      	ldr	r3, [r7, #12]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba98:	f001 fc36 	bl	800d308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d102      	bne.n	800baae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800baa8:	2301      	movs	r3, #1
 800baaa:	60fb      	str	r3, [r7, #12]
 800baac:	e001      	b.n	800bab2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800baae:	2300      	movs	r3, #0
 800bab0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bab2:	f001 fc5b 	bl	800d36c <vPortExitCritical>

	return xReturn;
 800bab6:	68fb      	ldr	r3, [r7, #12]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800baca:	2300      	movs	r3, #0
 800bacc:	60fb      	str	r3, [r7, #12]
 800bace:	e014      	b.n	800bafa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bad0:	4a0f      	ldr	r2, [pc, #60]	@ (800bb10 <vQueueAddToRegistry+0x50>)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10b      	bne.n	800baf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800badc:	490c      	ldr	r1, [pc, #48]	@ (800bb10 <vQueueAddToRegistry+0x50>)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	683a      	ldr	r2, [r7, #0]
 800bae2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bae6:	4a0a      	ldr	r2, [pc, #40]	@ (800bb10 <vQueueAddToRegistry+0x50>)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	00db      	lsls	r3, r3, #3
 800baec:	4413      	add	r3, r2
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800baf2:	e006      	b.n	800bb02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	3301      	adds	r3, #1
 800baf8:	60fb      	str	r3, [r7, #12]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b07      	cmp	r3, #7
 800bafe:	d9e7      	bls.n	800bad0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bb00:	bf00      	nop
 800bb02:	bf00      	nop
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	2000275c 	.word	0x2000275c

0800bb14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb24:	f001 fbf0 	bl	800d308 <vPortEnterCritical>
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb2e:	b25b      	sxtb	r3, r3
 800bb30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb34:	d103      	bne.n	800bb3e <vQueueWaitForMessageRestricted+0x2a>
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb44:	b25b      	sxtb	r3, r3
 800bb46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb4a:	d103      	bne.n	800bb54 <vQueueWaitForMessageRestricted+0x40>
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb54:	f001 fc0a 	bl	800d36c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d106      	bne.n	800bb6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	3324      	adds	r3, #36	@ 0x24
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	68b9      	ldr	r1, [r7, #8]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 fc6d 	bl	800c448 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb6e:	6978      	ldr	r0, [r7, #20]
 800bb70:	f7ff ff26 	bl	800b9c0 <prvUnlockQueue>
	}
 800bb74:	bf00      	nop
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b08e      	sub	sp, #56	@ 0x38
 800bb80:	af04      	add	r7, sp, #16
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
 800bb88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10b      	bne.n	800bba8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	623b      	str	r3, [r7, #32]
}
 800bba2:	bf00      	nop
 800bba4:	bf00      	nop
 800bba6:	e7fd      	b.n	800bba4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10b      	bne.n	800bbc6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	61fb      	str	r3, [r7, #28]
}
 800bbc0:	bf00      	nop
 800bbc2:	bf00      	nop
 800bbc4:	e7fd      	b.n	800bbc2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bbc6:	23a8      	movs	r3, #168	@ 0xa8
 800bbc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	2ba8      	cmp	r3, #168	@ 0xa8
 800bbce:	d00b      	beq.n	800bbe8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	61bb      	str	r3, [r7, #24]
}
 800bbe2:	bf00      	nop
 800bbe4:	bf00      	nop
 800bbe6:	e7fd      	b.n	800bbe4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bbe8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d01e      	beq.n	800bc2e <xTaskCreateStatic+0xb2>
 800bbf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d01b      	beq.n	800bc2e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbfe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc02:	2202      	movs	r2, #2
 800bc04:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc08:	2300      	movs	r3, #0
 800bc0a:	9303      	str	r3, [sp, #12]
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0e:	9302      	str	r3, [sp, #8]
 800bc10:	f107 0314 	add.w	r3, r7, #20
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	68b9      	ldr	r1, [r7, #8]
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f000 f851 	bl	800bcc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc28:	f000 f8f6 	bl	800be18 <prvAddNewTaskToReadyList>
 800bc2c:	e001      	b.n	800bc32 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc32:	697b      	ldr	r3, [r7, #20]
	}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3728      	adds	r7, #40	@ 0x28
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08c      	sub	sp, #48	@ 0x30
 800bc40:	af04      	add	r7, sp, #16
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	603b      	str	r3, [r7, #0]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc4c:	88fb      	ldrh	r3, [r7, #6]
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4618      	mov	r0, r3
 800bc52:	f001 fc7b 	bl	800d54c <pvPortMalloc>
 800bc56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00e      	beq.n	800bc7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc5e:	20a8      	movs	r0, #168	@ 0xa8
 800bc60:	f001 fc74 	bl	800d54c <pvPortMalloc>
 800bc64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d003      	beq.n	800bc74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc72:	e005      	b.n	800bc80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc74:	6978      	ldr	r0, [r7, #20]
 800bc76:	f001 fd37 	bl	800d6e8 <vPortFree>
 800bc7a:	e001      	b.n	800bc80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d017      	beq.n	800bcb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc8e:	88fa      	ldrh	r2, [r7, #6]
 800bc90:	2300      	movs	r3, #0
 800bc92:	9303      	str	r3, [sp, #12]
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	9302      	str	r3, [sp, #8]
 800bc98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	68b9      	ldr	r1, [r7, #8]
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f000 f80f 	bl	800bcc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcaa:	69f8      	ldr	r0, [r7, #28]
 800bcac:	f000 f8b4 	bl	800be18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	61bb      	str	r3, [r7, #24]
 800bcb4:	e002      	b.n	800bcbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bcb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bcbc:	69bb      	ldr	r3, [r7, #24]
	}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3720      	adds	r7, #32
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
	...

0800bcc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	461a      	mov	r2, r3
 800bce0:	21a5      	movs	r1, #165	@ 0xa5
 800bce2:	f003 f865 	bl	800edb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	f023 0307 	bic.w	r3, r3, #7
 800bcfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	f003 0307 	and.w	r3, r3, #7
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00b      	beq.n	800bd22 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	617b      	str	r3, [r7, #20]
}
 800bd1c:	bf00      	nop
 800bd1e:	bf00      	nop
 800bd20:	e7fd      	b.n	800bd1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d01f      	beq.n	800bd68 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd28:	2300      	movs	r3, #0
 800bd2a:	61fb      	str	r3, [r7, #28]
 800bd2c:	e012      	b.n	800bd54 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	4413      	add	r3, r2
 800bd34:	7819      	ldrb	r1, [r3, #0]
 800bd36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	3334      	adds	r3, #52	@ 0x34
 800bd3e:	460a      	mov	r2, r1
 800bd40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	4413      	add	r3, r2
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d006      	beq.n	800bd5c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	3301      	adds	r3, #1
 800bd52:	61fb      	str	r3, [r7, #28]
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	2b0f      	cmp	r3, #15
 800bd58:	d9e9      	bls.n	800bd2e <prvInitialiseNewTask+0x66>
 800bd5a:	e000      	b.n	800bd5e <prvInitialiseNewTask+0x96>
			{
				break;
 800bd5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bd66:	e003      	b.n	800bd70 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd72:	2b37      	cmp	r3, #55	@ 0x37
 800bd74:	d901      	bls.n	800bd7a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd76:	2337      	movs	r3, #55	@ 0x37
 800bd78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd88:	2200      	movs	r2, #0
 800bd8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8e:	3304      	adds	r3, #4
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7ff f8a7 	bl	800aee4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd98:	3318      	adds	r3, #24
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7ff f8a2 	bl	800aee4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bda4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bdac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdb4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc8:	3354      	adds	r3, #84	@ 0x54
 800bdca:	224c      	movs	r2, #76	@ 0x4c
 800bdcc:	2100      	movs	r1, #0
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f002 ffee 	bl	800edb0 <memset>
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd6:	4a0d      	ldr	r2, [pc, #52]	@ (800be0c <prvInitialiseNewTask+0x144>)
 800bdd8:	659a      	str	r2, [r3, #88]	@ 0x58
 800bdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bddc:	4a0c      	ldr	r2, [pc, #48]	@ (800be10 <prvInitialiseNewTask+0x148>)
 800bdde:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde2:	4a0c      	ldr	r2, [pc, #48]	@ (800be14 <prvInitialiseNewTask+0x14c>)
 800bde4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	68f9      	ldr	r1, [r7, #12]
 800bdea:	69b8      	ldr	r0, [r7, #24]
 800bdec:	f001 f95a 	bl	800d0a4 <pxPortInitialiseStack>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bdf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d002      	beq.n	800be02 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be02:	bf00      	nop
 800be04:	3720      	adds	r7, #32
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	2000769c 	.word	0x2000769c
 800be10:	20007704 	.word	0x20007704
 800be14:	2000776c 	.word	0x2000776c

0800be18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be20:	f001 fa72 	bl	800d308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be24:	4b2d      	ldr	r3, [pc, #180]	@ (800bedc <prvAddNewTaskToReadyList+0xc4>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	3301      	adds	r3, #1
 800be2a:	4a2c      	ldr	r2, [pc, #176]	@ (800bedc <prvAddNewTaskToReadyList+0xc4>)
 800be2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be2e:	4b2c      	ldr	r3, [pc, #176]	@ (800bee0 <prvAddNewTaskToReadyList+0xc8>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d109      	bne.n	800be4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be36:	4a2a      	ldr	r2, [pc, #168]	@ (800bee0 <prvAddNewTaskToReadyList+0xc8>)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be3c:	4b27      	ldr	r3, [pc, #156]	@ (800bedc <prvAddNewTaskToReadyList+0xc4>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d110      	bne.n	800be66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be44:	f000 fc2e 	bl	800c6a4 <prvInitialiseTaskLists>
 800be48:	e00d      	b.n	800be66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be4a:	4b26      	ldr	r3, [pc, #152]	@ (800bee4 <prvAddNewTaskToReadyList+0xcc>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d109      	bne.n	800be66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be52:	4b23      	ldr	r3, [pc, #140]	@ (800bee0 <prvAddNewTaskToReadyList+0xc8>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d802      	bhi.n	800be66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be60:	4a1f      	ldr	r2, [pc, #124]	@ (800bee0 <prvAddNewTaskToReadyList+0xc8>)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be66:	4b20      	ldr	r3, [pc, #128]	@ (800bee8 <prvAddNewTaskToReadyList+0xd0>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	3301      	adds	r3, #1
 800be6c:	4a1e      	ldr	r2, [pc, #120]	@ (800bee8 <prvAddNewTaskToReadyList+0xd0>)
 800be6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be70:	4b1d      	ldr	r3, [pc, #116]	@ (800bee8 <prvAddNewTaskToReadyList+0xd0>)
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be7c:	4b1b      	ldr	r3, [pc, #108]	@ (800beec <prvAddNewTaskToReadyList+0xd4>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	d903      	bls.n	800be8c <prvAddNewTaskToReadyList+0x74>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be88:	4a18      	ldr	r2, [pc, #96]	@ (800beec <prvAddNewTaskToReadyList+0xd4>)
 800be8a:	6013      	str	r3, [r2, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be90:	4613      	mov	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4a15      	ldr	r2, [pc, #84]	@ (800bef0 <prvAddNewTaskToReadyList+0xd8>)
 800be9a:	441a      	add	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	3304      	adds	r3, #4
 800bea0:	4619      	mov	r1, r3
 800bea2:	4610      	mov	r0, r2
 800bea4:	f7ff f82b 	bl	800aefe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bea8:	f001 fa60 	bl	800d36c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800beac:	4b0d      	ldr	r3, [pc, #52]	@ (800bee4 <prvAddNewTaskToReadyList+0xcc>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00e      	beq.n	800bed2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800beb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bee0 <prvAddNewTaskToReadyList+0xc8>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d207      	bcs.n	800bed2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bec2:	4b0c      	ldr	r3, [pc, #48]	@ (800bef4 <prvAddNewTaskToReadyList+0xdc>)
 800bec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bec8:	601a      	str	r2, [r3, #0]
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bed2:	bf00      	nop
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20002c70 	.word	0x20002c70
 800bee0:	2000279c 	.word	0x2000279c
 800bee4:	20002c7c 	.word	0x20002c7c
 800bee8:	20002c8c 	.word	0x20002c8c
 800beec:	20002c78 	.word	0x20002c78
 800bef0:	200027a0 	.word	0x200027a0
 800bef4:	e000ed04 	.word	0xe000ed04

0800bef8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bf00:	2300      	movs	r3, #0
 800bf02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d018      	beq.n	800bf3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bf0a:	4b14      	ldr	r3, [pc, #80]	@ (800bf5c <vTaskDelay+0x64>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00b      	beq.n	800bf2a <vTaskDelay+0x32>
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	60bb      	str	r3, [r7, #8]
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop
 800bf28:	e7fd      	b.n	800bf26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bf2a:	f000 f88b 	bl	800c044 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bf2e:	2100      	movs	r1, #0
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fd09 	bl	800c948 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bf36:	f000 f893 	bl	800c060 <xTaskResumeAll>
 800bf3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d107      	bne.n	800bf52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bf42:	4b07      	ldr	r3, [pc, #28]	@ (800bf60 <vTaskDelay+0x68>)
 800bf44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf48:	601a      	str	r2, [r3, #0]
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf52:	bf00      	nop
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	20002c98 	.word	0x20002c98
 800bf60:	e000ed04 	.word	0xe000ed04

0800bf64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b08a      	sub	sp, #40	@ 0x28
 800bf68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf72:	463a      	mov	r2, r7
 800bf74:	1d39      	adds	r1, r7, #4
 800bf76:	f107 0308 	add.w	r3, r7, #8
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe ff5e 	bl	800ae3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	9202      	str	r2, [sp, #8]
 800bf88:	9301      	str	r3, [sp, #4]
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	2300      	movs	r3, #0
 800bf90:	460a      	mov	r2, r1
 800bf92:	4924      	ldr	r1, [pc, #144]	@ (800c024 <vTaskStartScheduler+0xc0>)
 800bf94:	4824      	ldr	r0, [pc, #144]	@ (800c028 <vTaskStartScheduler+0xc4>)
 800bf96:	f7ff fdf1 	bl	800bb7c <xTaskCreateStatic>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	4a23      	ldr	r2, [pc, #140]	@ (800c02c <vTaskStartScheduler+0xc8>)
 800bf9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bfa0:	4b22      	ldr	r3, [pc, #136]	@ (800c02c <vTaskStartScheduler+0xc8>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d002      	beq.n	800bfae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	e001      	b.n	800bfb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d102      	bne.n	800bfbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bfb8:	f000 fd1a 	bl	800c9f0 <xTimerCreateTimerTask>
 800bfbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d11b      	bne.n	800bffc <vTaskStartScheduler+0x98>
	__asm volatile
 800bfc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	613b      	str	r3, [r7, #16]
}
 800bfd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bfd8:	4b15      	ldr	r3, [pc, #84]	@ (800c030 <vTaskStartScheduler+0xcc>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	3354      	adds	r3, #84	@ 0x54
 800bfde:	4a15      	ldr	r2, [pc, #84]	@ (800c034 <vTaskStartScheduler+0xd0>)
 800bfe0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bfe2:	4b15      	ldr	r3, [pc, #84]	@ (800c038 <vTaskStartScheduler+0xd4>)
 800bfe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfe8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bfea:	4b14      	ldr	r3, [pc, #80]	@ (800c03c <vTaskStartScheduler+0xd8>)
 800bfec:	2201      	movs	r2, #1
 800bfee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bff0:	4b13      	ldr	r3, [pc, #76]	@ (800c040 <vTaskStartScheduler+0xdc>)
 800bff2:	2200      	movs	r2, #0
 800bff4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bff6:	f001 f8e3 	bl	800d1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bffa:	e00f      	b.n	800c01c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c002:	d10b      	bne.n	800c01c <vTaskStartScheduler+0xb8>
	__asm volatile
 800c004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	60fb      	str	r3, [r7, #12]
}
 800c016:	bf00      	nop
 800c018:	bf00      	nop
 800c01a:	e7fd      	b.n	800c018 <vTaskStartScheduler+0xb4>
}
 800c01c:	bf00      	nop
 800c01e:	3718      	adds	r7, #24
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	080112a8 	.word	0x080112a8
 800c028:	0800c675 	.word	0x0800c675
 800c02c:	20002c94 	.word	0x20002c94
 800c030:	2000279c 	.word	0x2000279c
 800c034:	20000194 	.word	0x20000194
 800c038:	20002c90 	.word	0x20002c90
 800c03c:	20002c7c 	.word	0x20002c7c
 800c040:	20002c74 	.word	0x20002c74

0800c044 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c044:	b480      	push	{r7}
 800c046:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c048:	4b04      	ldr	r3, [pc, #16]	@ (800c05c <vTaskSuspendAll+0x18>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3301      	adds	r3, #1
 800c04e:	4a03      	ldr	r2, [pc, #12]	@ (800c05c <vTaskSuspendAll+0x18>)
 800c050:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c052:	bf00      	nop
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr
 800c05c:	20002c98 	.word	0x20002c98

0800c060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c066:	2300      	movs	r3, #0
 800c068:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c06a:	2300      	movs	r3, #0
 800c06c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c06e:	4b42      	ldr	r3, [pc, #264]	@ (800c178 <xTaskResumeAll+0x118>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10b      	bne.n	800c08e <xTaskResumeAll+0x2e>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	603b      	str	r3, [r7, #0]
}
 800c088:	bf00      	nop
 800c08a:	bf00      	nop
 800c08c:	e7fd      	b.n	800c08a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c08e:	f001 f93b 	bl	800d308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c092:	4b39      	ldr	r3, [pc, #228]	@ (800c178 <xTaskResumeAll+0x118>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3b01      	subs	r3, #1
 800c098:	4a37      	ldr	r2, [pc, #220]	@ (800c178 <xTaskResumeAll+0x118>)
 800c09a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c09c:	4b36      	ldr	r3, [pc, #216]	@ (800c178 <xTaskResumeAll+0x118>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d162      	bne.n	800c16a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c0a4:	4b35      	ldr	r3, [pc, #212]	@ (800c17c <xTaskResumeAll+0x11c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d05e      	beq.n	800c16a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0ac:	e02f      	b.n	800c10e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ae:	4b34      	ldr	r3, [pc, #208]	@ (800c180 <xTaskResumeAll+0x120>)
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3318      	adds	r3, #24
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fe ff7c 	bl	800afb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe ff77 	bl	800afb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0ce:	4b2d      	ldr	r3, [pc, #180]	@ (800c184 <xTaskResumeAll+0x124>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d903      	bls.n	800c0de <xTaskResumeAll+0x7e>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0da:	4a2a      	ldr	r2, [pc, #168]	@ (800c184 <xTaskResumeAll+0x124>)
 800c0dc:	6013      	str	r3, [r2, #0]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4a27      	ldr	r2, [pc, #156]	@ (800c188 <xTaskResumeAll+0x128>)
 800c0ec:	441a      	add	r2, r3
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	f7fe ff02 	bl	800aefe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0fe:	4b23      	ldr	r3, [pc, #140]	@ (800c18c <xTaskResumeAll+0x12c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c104:	429a      	cmp	r2, r3
 800c106:	d302      	bcc.n	800c10e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c108:	4b21      	ldr	r3, [pc, #132]	@ (800c190 <xTaskResumeAll+0x130>)
 800c10a:	2201      	movs	r2, #1
 800c10c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c10e:	4b1c      	ldr	r3, [pc, #112]	@ (800c180 <xTaskResumeAll+0x120>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1cb      	bne.n	800c0ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d001      	beq.n	800c120 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c11c:	f000 fb66 	bl	800c7ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c120:	4b1c      	ldr	r3, [pc, #112]	@ (800c194 <xTaskResumeAll+0x134>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d010      	beq.n	800c14e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c12c:	f000 f846 	bl	800c1bc <xTaskIncrementTick>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d002      	beq.n	800c13c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c136:	4b16      	ldr	r3, [pc, #88]	@ (800c190 <xTaskResumeAll+0x130>)
 800c138:	2201      	movs	r2, #1
 800c13a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	3b01      	subs	r3, #1
 800c140:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d1f1      	bne.n	800c12c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c148:	4b12      	ldr	r3, [pc, #72]	@ (800c194 <xTaskResumeAll+0x134>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c14e:	4b10      	ldr	r3, [pc, #64]	@ (800c190 <xTaskResumeAll+0x130>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d009      	beq.n	800c16a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c156:	2301      	movs	r3, #1
 800c158:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c15a:	4b0f      	ldr	r3, [pc, #60]	@ (800c198 <xTaskResumeAll+0x138>)
 800c15c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c16a:	f001 f8ff 	bl	800d36c <vPortExitCritical>

	return xAlreadyYielded;
 800c16e:	68bb      	ldr	r3, [r7, #8]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	20002c98 	.word	0x20002c98
 800c17c:	20002c70 	.word	0x20002c70
 800c180:	20002c30 	.word	0x20002c30
 800c184:	20002c78 	.word	0x20002c78
 800c188:	200027a0 	.word	0x200027a0
 800c18c:	2000279c 	.word	0x2000279c
 800c190:	20002c84 	.word	0x20002c84
 800c194:	20002c80 	.word	0x20002c80
 800c198:	e000ed04 	.word	0xe000ed04

0800c19c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c1a2:	4b05      	ldr	r3, [pc, #20]	@ (800c1b8 <xTaskGetTickCount+0x1c>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c1a8:	687b      	ldr	r3, [r7, #4]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	20002c74 	.word	0x20002c74

0800c1bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b086      	sub	sp, #24
 800c1c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1c6:	4b4f      	ldr	r3, [pc, #316]	@ (800c304 <xTaskIncrementTick+0x148>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f040 8090 	bne.w	800c2f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c1d0:	4b4d      	ldr	r3, [pc, #308]	@ (800c308 <xTaskIncrementTick+0x14c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c1d8:	4a4b      	ldr	r2, [pc, #300]	@ (800c308 <xTaskIncrementTick+0x14c>)
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d121      	bne.n	800c228 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1e4:	4b49      	ldr	r3, [pc, #292]	@ (800c30c <xTaskIncrementTick+0x150>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d00b      	beq.n	800c206 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	603b      	str	r3, [r7, #0]
}
 800c200:	bf00      	nop
 800c202:	bf00      	nop
 800c204:	e7fd      	b.n	800c202 <xTaskIncrementTick+0x46>
 800c206:	4b41      	ldr	r3, [pc, #260]	@ (800c30c <xTaskIncrementTick+0x150>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	4b40      	ldr	r3, [pc, #256]	@ (800c310 <xTaskIncrementTick+0x154>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a3e      	ldr	r2, [pc, #248]	@ (800c30c <xTaskIncrementTick+0x150>)
 800c212:	6013      	str	r3, [r2, #0]
 800c214:	4a3e      	ldr	r2, [pc, #248]	@ (800c310 <xTaskIncrementTick+0x154>)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6013      	str	r3, [r2, #0]
 800c21a:	4b3e      	ldr	r3, [pc, #248]	@ (800c314 <xTaskIncrementTick+0x158>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3301      	adds	r3, #1
 800c220:	4a3c      	ldr	r2, [pc, #240]	@ (800c314 <xTaskIncrementTick+0x158>)
 800c222:	6013      	str	r3, [r2, #0]
 800c224:	f000 fae2 	bl	800c7ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c228:	4b3b      	ldr	r3, [pc, #236]	@ (800c318 <xTaskIncrementTick+0x15c>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d349      	bcc.n	800c2c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c232:	4b36      	ldr	r3, [pc, #216]	@ (800c30c <xTaskIncrementTick+0x150>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d104      	bne.n	800c246 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c23c:	4b36      	ldr	r3, [pc, #216]	@ (800c318 <xTaskIncrementTick+0x15c>)
 800c23e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c242:	601a      	str	r2, [r3, #0]
					break;
 800c244:	e03f      	b.n	800c2c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c246:	4b31      	ldr	r3, [pc, #196]	@ (800c30c <xTaskIncrementTick+0x150>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c256:	693a      	ldr	r2, [r7, #16]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d203      	bcs.n	800c266 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c25e:	4a2e      	ldr	r2, [pc, #184]	@ (800c318 <xTaskIncrementTick+0x15c>)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c264:	e02f      	b.n	800c2c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	3304      	adds	r3, #4
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fe fea4 	bl	800afb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c274:	2b00      	cmp	r3, #0
 800c276:	d004      	beq.n	800c282 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	3318      	adds	r3, #24
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7fe fe9b 	bl	800afb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c286:	4b25      	ldr	r3, [pc, #148]	@ (800c31c <xTaskIncrementTick+0x160>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d903      	bls.n	800c296 <xTaskIncrementTick+0xda>
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c292:	4a22      	ldr	r2, [pc, #136]	@ (800c31c <xTaskIncrementTick+0x160>)
 800c294:	6013      	str	r3, [r2, #0]
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c29a:	4613      	mov	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	4a1f      	ldr	r2, [pc, #124]	@ (800c320 <xTaskIncrementTick+0x164>)
 800c2a4:	441a      	add	r2, r3
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	f7fe fe26 	bl	800aefe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2b6:	4b1b      	ldr	r3, [pc, #108]	@ (800c324 <xTaskIncrementTick+0x168>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d3b8      	bcc.n	800c232 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2c4:	e7b5      	b.n	800c232 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c2c6:	4b17      	ldr	r3, [pc, #92]	@ (800c324 <xTaskIncrementTick+0x168>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2cc:	4914      	ldr	r1, [pc, #80]	@ (800c320 <xTaskIncrementTick+0x164>)
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4413      	add	r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	440b      	add	r3, r1
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d901      	bls.n	800c2e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c2e2:	4b11      	ldr	r3, [pc, #68]	@ (800c328 <xTaskIncrementTick+0x16c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d007      	beq.n	800c2fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	617b      	str	r3, [r7, #20]
 800c2ee:	e004      	b.n	800c2fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c2f0:	4b0e      	ldr	r3, [pc, #56]	@ (800c32c <xTaskIncrementTick+0x170>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	4a0d      	ldr	r2, [pc, #52]	@ (800c32c <xTaskIncrementTick+0x170>)
 800c2f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c2fa:	697b      	ldr	r3, [r7, #20]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	20002c98 	.word	0x20002c98
 800c308:	20002c74 	.word	0x20002c74
 800c30c:	20002c28 	.word	0x20002c28
 800c310:	20002c2c 	.word	0x20002c2c
 800c314:	20002c88 	.word	0x20002c88
 800c318:	20002c90 	.word	0x20002c90
 800c31c:	20002c78 	.word	0x20002c78
 800c320:	200027a0 	.word	0x200027a0
 800c324:	2000279c 	.word	0x2000279c
 800c328:	20002c84 	.word	0x20002c84
 800c32c:	20002c80 	.word	0x20002c80

0800c330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c336:	4b2b      	ldr	r3, [pc, #172]	@ (800c3e4 <vTaskSwitchContext+0xb4>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d003      	beq.n	800c346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c33e:	4b2a      	ldr	r3, [pc, #168]	@ (800c3e8 <vTaskSwitchContext+0xb8>)
 800c340:	2201      	movs	r2, #1
 800c342:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c344:	e047      	b.n	800c3d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c346:	4b28      	ldr	r3, [pc, #160]	@ (800c3e8 <vTaskSwitchContext+0xb8>)
 800c348:	2200      	movs	r2, #0
 800c34a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c34c:	4b27      	ldr	r3, [pc, #156]	@ (800c3ec <vTaskSwitchContext+0xbc>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	60fb      	str	r3, [r7, #12]
 800c352:	e011      	b.n	800c378 <vTaskSwitchContext+0x48>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10b      	bne.n	800c372 <vTaskSwitchContext+0x42>
	__asm volatile
 800c35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	607b      	str	r3, [r7, #4]
}
 800c36c:	bf00      	nop
 800c36e:	bf00      	nop
 800c370:	e7fd      	b.n	800c36e <vTaskSwitchContext+0x3e>
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	3b01      	subs	r3, #1
 800c376:	60fb      	str	r3, [r7, #12]
 800c378:	491d      	ldr	r1, [pc, #116]	@ (800c3f0 <vTaskSwitchContext+0xc0>)
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	440b      	add	r3, r1
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d0e3      	beq.n	800c354 <vTaskSwitchContext+0x24>
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	4613      	mov	r3, r2
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	4413      	add	r3, r2
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	4a16      	ldr	r2, [pc, #88]	@ (800c3f0 <vTaskSwitchContext+0xc0>)
 800c398:	4413      	add	r3, r2
 800c39a:	60bb      	str	r3, [r7, #8]
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	685a      	ldr	r2, [r3, #4]
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	605a      	str	r2, [r3, #4]
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	685a      	ldr	r2, [r3, #4]
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	3308      	adds	r3, #8
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d104      	bne.n	800c3bc <vTaskSwitchContext+0x8c>
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	605a      	str	r2, [r3, #4]
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	4a0c      	ldr	r2, [pc, #48]	@ (800c3f4 <vTaskSwitchContext+0xc4>)
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	4a09      	ldr	r2, [pc, #36]	@ (800c3ec <vTaskSwitchContext+0xbc>)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3cc:	4b09      	ldr	r3, [pc, #36]	@ (800c3f4 <vTaskSwitchContext+0xc4>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	3354      	adds	r3, #84	@ 0x54
 800c3d2:	4a09      	ldr	r2, [pc, #36]	@ (800c3f8 <vTaskSwitchContext+0xc8>)
 800c3d4:	6013      	str	r3, [r2, #0]
}
 800c3d6:	bf00      	nop
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	20002c98 	.word	0x20002c98
 800c3e8:	20002c84 	.word	0x20002c84
 800c3ec:	20002c78 	.word	0x20002c78
 800c3f0:	200027a0 	.word	0x200027a0
 800c3f4:	2000279c 	.word	0x2000279c
 800c3f8:	20000194 	.word	0x20000194

0800c3fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10b      	bne.n	800c424 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	60fb      	str	r3, [r7, #12]
}
 800c41e:	bf00      	nop
 800c420:	bf00      	nop
 800c422:	e7fd      	b.n	800c420 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c424:	4b07      	ldr	r3, [pc, #28]	@ (800c444 <vTaskPlaceOnEventList+0x48>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3318      	adds	r3, #24
 800c42a:	4619      	mov	r1, r3
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f7fe fd8a 	bl	800af46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c432:	2101      	movs	r1, #1
 800c434:	6838      	ldr	r0, [r7, #0]
 800c436:	f000 fa87 	bl	800c948 <prvAddCurrentTaskToDelayedList>
}
 800c43a:	bf00      	nop
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	2000279c 	.word	0x2000279c

0800c448 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10b      	bne.n	800c472 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	617b      	str	r3, [r7, #20]
}
 800c46c:	bf00      	nop
 800c46e:	bf00      	nop
 800c470:	e7fd      	b.n	800c46e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c472:	4b0a      	ldr	r3, [pc, #40]	@ (800c49c <vTaskPlaceOnEventListRestricted+0x54>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3318      	adds	r3, #24
 800c478:	4619      	mov	r1, r3
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f7fe fd3f 	bl	800aefe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d002      	beq.n	800c48c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c486:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c48a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c48c:	6879      	ldr	r1, [r7, #4]
 800c48e:	68b8      	ldr	r0, [r7, #8]
 800c490:	f000 fa5a 	bl	800c948 <prvAddCurrentTaskToDelayedList>
	}
 800c494:	bf00      	nop
 800c496:	3718      	adds	r7, #24
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	2000279c 	.word	0x2000279c

0800c4a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10b      	bne.n	800c4ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	60fb      	str	r3, [r7, #12]
}
 800c4c8:	bf00      	nop
 800c4ca:	bf00      	nop
 800c4cc:	e7fd      	b.n	800c4ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	3318      	adds	r3, #24
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fe fd70 	bl	800afb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4d8:	4b1d      	ldr	r3, [pc, #116]	@ (800c550 <xTaskRemoveFromEventList+0xb0>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d11d      	bne.n	800c51c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	3304      	adds	r3, #4
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fe fd67 	bl	800afb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4ee:	4b19      	ldr	r3, [pc, #100]	@ (800c554 <xTaskRemoveFromEventList+0xb4>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d903      	bls.n	800c4fe <xTaskRemoveFromEventList+0x5e>
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4fa:	4a16      	ldr	r2, [pc, #88]	@ (800c554 <xTaskRemoveFromEventList+0xb4>)
 800c4fc:	6013      	str	r3, [r2, #0]
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4a13      	ldr	r2, [pc, #76]	@ (800c558 <xTaskRemoveFromEventList+0xb8>)
 800c50c:	441a      	add	r2, r3
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	3304      	adds	r3, #4
 800c512:	4619      	mov	r1, r3
 800c514:	4610      	mov	r0, r2
 800c516:	f7fe fcf2 	bl	800aefe <vListInsertEnd>
 800c51a:	e005      	b.n	800c528 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	3318      	adds	r3, #24
 800c520:	4619      	mov	r1, r3
 800c522:	480e      	ldr	r0, [pc, #56]	@ (800c55c <xTaskRemoveFromEventList+0xbc>)
 800c524:	f7fe fceb 	bl	800aefe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c52c:	4b0c      	ldr	r3, [pc, #48]	@ (800c560 <xTaskRemoveFromEventList+0xc0>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c532:	429a      	cmp	r2, r3
 800c534:	d905      	bls.n	800c542 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c536:	2301      	movs	r3, #1
 800c538:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c53a:	4b0a      	ldr	r3, [pc, #40]	@ (800c564 <xTaskRemoveFromEventList+0xc4>)
 800c53c:	2201      	movs	r2, #1
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	e001      	b.n	800c546 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c542:	2300      	movs	r3, #0
 800c544:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c546:	697b      	ldr	r3, [r7, #20]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20002c98 	.word	0x20002c98
 800c554:	20002c78 	.word	0x20002c78
 800c558:	200027a0 	.word	0x200027a0
 800c55c:	20002c30 	.word	0x20002c30
 800c560:	2000279c 	.word	0x2000279c
 800c564:	20002c84 	.word	0x20002c84

0800c568 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c570:	4b06      	ldr	r3, [pc, #24]	@ (800c58c <vTaskInternalSetTimeOutState+0x24>)
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c578:	4b05      	ldr	r3, [pc, #20]	@ (800c590 <vTaskInternalSetTimeOutState+0x28>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	605a      	str	r2, [r3, #4]
}
 800c580:	bf00      	nop
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr
 800c58c:	20002c88 	.word	0x20002c88
 800c590:	20002c74 	.word	0x20002c74

0800c594 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b088      	sub	sp, #32
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10b      	bne.n	800c5bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	613b      	str	r3, [r7, #16]
}
 800c5b6:	bf00      	nop
 800c5b8:	bf00      	nop
 800c5ba:	e7fd      	b.n	800c5b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10b      	bne.n	800c5da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	60fb      	str	r3, [r7, #12]
}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop
 800c5d8:	e7fd      	b.n	800c5d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c5da:	f000 fe95 	bl	800d308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c5de:	4b1d      	ldr	r3, [pc, #116]	@ (800c654 <xTaskCheckForTimeOut+0xc0>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	69ba      	ldr	r2, [r7, #24]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5f6:	d102      	bne.n	800c5fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	61fb      	str	r3, [r7, #28]
 800c5fc:	e023      	b.n	800c646 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	4b15      	ldr	r3, [pc, #84]	@ (800c658 <xTaskCheckForTimeOut+0xc4>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	429a      	cmp	r2, r3
 800c608:	d007      	beq.n	800c61a <xTaskCheckForTimeOut+0x86>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	69ba      	ldr	r2, [r7, #24]
 800c610:	429a      	cmp	r2, r3
 800c612:	d302      	bcc.n	800c61a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c614:	2301      	movs	r3, #1
 800c616:	61fb      	str	r3, [r7, #28]
 800c618:	e015      	b.n	800c646 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	429a      	cmp	r2, r3
 800c622:	d20b      	bcs.n	800c63c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	1ad2      	subs	r2, r2, r3
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7ff ff99 	bl	800c568 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c636:	2300      	movs	r3, #0
 800c638:	61fb      	str	r3, [r7, #28]
 800c63a:	e004      	b.n	800c646 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	2200      	movs	r2, #0
 800c640:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c642:	2301      	movs	r3, #1
 800c644:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c646:	f000 fe91 	bl	800d36c <vPortExitCritical>

	return xReturn;
 800c64a:	69fb      	ldr	r3, [r7, #28]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	20002c74 	.word	0x20002c74
 800c658:	20002c88 	.word	0x20002c88

0800c65c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c65c:	b480      	push	{r7}
 800c65e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c660:	4b03      	ldr	r3, [pc, #12]	@ (800c670 <vTaskMissedYield+0x14>)
 800c662:	2201      	movs	r2, #1
 800c664:	601a      	str	r2, [r3, #0]
}
 800c666:	bf00      	nop
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	20002c84 	.word	0x20002c84

0800c674 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c67c:	f000 f852 	bl	800c724 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c680:	4b06      	ldr	r3, [pc, #24]	@ (800c69c <prvIdleTask+0x28>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d9f9      	bls.n	800c67c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c688:	4b05      	ldr	r3, [pc, #20]	@ (800c6a0 <prvIdleTask+0x2c>)
 800c68a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c68e:	601a      	str	r2, [r3, #0]
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c698:	e7f0      	b.n	800c67c <prvIdleTask+0x8>
 800c69a:	bf00      	nop
 800c69c:	200027a0 	.word	0x200027a0
 800c6a0:	e000ed04 	.word	0xe000ed04

0800c6a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	607b      	str	r3, [r7, #4]
 800c6ae:	e00c      	b.n	800c6ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4a12      	ldr	r2, [pc, #72]	@ (800c704 <prvInitialiseTaskLists+0x60>)
 800c6bc:	4413      	add	r3, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe fbf0 	bl	800aea4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	607b      	str	r3, [r7, #4]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b37      	cmp	r3, #55	@ 0x37
 800c6ce:	d9ef      	bls.n	800c6b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6d0:	480d      	ldr	r0, [pc, #52]	@ (800c708 <prvInitialiseTaskLists+0x64>)
 800c6d2:	f7fe fbe7 	bl	800aea4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c6d6:	480d      	ldr	r0, [pc, #52]	@ (800c70c <prvInitialiseTaskLists+0x68>)
 800c6d8:	f7fe fbe4 	bl	800aea4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c6dc:	480c      	ldr	r0, [pc, #48]	@ (800c710 <prvInitialiseTaskLists+0x6c>)
 800c6de:	f7fe fbe1 	bl	800aea4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c6e2:	480c      	ldr	r0, [pc, #48]	@ (800c714 <prvInitialiseTaskLists+0x70>)
 800c6e4:	f7fe fbde 	bl	800aea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c6e8:	480b      	ldr	r0, [pc, #44]	@ (800c718 <prvInitialiseTaskLists+0x74>)
 800c6ea:	f7fe fbdb 	bl	800aea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c71c <prvInitialiseTaskLists+0x78>)
 800c6f0:	4a05      	ldr	r2, [pc, #20]	@ (800c708 <prvInitialiseTaskLists+0x64>)
 800c6f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c6f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c720 <prvInitialiseTaskLists+0x7c>)
 800c6f6:	4a05      	ldr	r2, [pc, #20]	@ (800c70c <prvInitialiseTaskLists+0x68>)
 800c6f8:	601a      	str	r2, [r3, #0]
}
 800c6fa:	bf00      	nop
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	200027a0 	.word	0x200027a0
 800c708:	20002c00 	.word	0x20002c00
 800c70c:	20002c14 	.word	0x20002c14
 800c710:	20002c30 	.word	0x20002c30
 800c714:	20002c44 	.word	0x20002c44
 800c718:	20002c5c 	.word	0x20002c5c
 800c71c:	20002c28 	.word	0x20002c28
 800c720:	20002c2c 	.word	0x20002c2c

0800c724 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c72a:	e019      	b.n	800c760 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c72c:	f000 fdec 	bl	800d308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c730:	4b10      	ldr	r3, [pc, #64]	@ (800c774 <prvCheckTasksWaitingTermination+0x50>)
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	3304      	adds	r3, #4
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fe fc3b 	bl	800afb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c742:	4b0d      	ldr	r3, [pc, #52]	@ (800c778 <prvCheckTasksWaitingTermination+0x54>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3b01      	subs	r3, #1
 800c748:	4a0b      	ldr	r2, [pc, #44]	@ (800c778 <prvCheckTasksWaitingTermination+0x54>)
 800c74a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c74c:	4b0b      	ldr	r3, [pc, #44]	@ (800c77c <prvCheckTasksWaitingTermination+0x58>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3b01      	subs	r3, #1
 800c752:	4a0a      	ldr	r2, [pc, #40]	@ (800c77c <prvCheckTasksWaitingTermination+0x58>)
 800c754:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c756:	f000 fe09 	bl	800d36c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f810 	bl	800c780 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c760:	4b06      	ldr	r3, [pc, #24]	@ (800c77c <prvCheckTasksWaitingTermination+0x58>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1e1      	bne.n	800c72c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	20002c44 	.word	0x20002c44
 800c778:	20002c70 	.word	0x20002c70
 800c77c:	20002c58 	.word	0x20002c58

0800c780 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	3354      	adds	r3, #84	@ 0x54
 800c78c:	4618      	mov	r0, r3
 800c78e:	f002 fb1b 	bl	800edc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d108      	bne.n	800c7ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 ffa1 	bl	800d6e8 <vPortFree>
				vPortFree( pxTCB );
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 ff9e 	bl	800d6e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7ac:	e019      	b.n	800c7e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d103      	bne.n	800c7c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 ff95 	bl	800d6e8 <vPortFree>
	}
 800c7be:	e010      	b.n	800c7e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	d00b      	beq.n	800c7e2 <prvDeleteTCB+0x62>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	60fb      	str	r3, [r7, #12]
}
 800c7dc:	bf00      	nop
 800c7de:	bf00      	nop
 800c7e0:	e7fd      	b.n	800c7de <prvDeleteTCB+0x5e>
	}
 800c7e2:	bf00      	nop
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
	...

0800c7ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c824 <prvResetNextTaskUnblockTime+0x38>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d104      	bne.n	800c806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c828 <prvResetNextTaskUnblockTime+0x3c>)
 800c7fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c804:	e008      	b.n	800c818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c806:	4b07      	ldr	r3, [pc, #28]	@ (800c824 <prvResetNextTaskUnblockTime+0x38>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	4a04      	ldr	r2, [pc, #16]	@ (800c828 <prvResetNextTaskUnblockTime+0x3c>)
 800c816:	6013      	str	r3, [r2, #0]
}
 800c818:	bf00      	nop
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	20002c28 	.word	0x20002c28
 800c828:	20002c90 	.word	0x20002c90

0800c82c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c832:	4b0b      	ldr	r3, [pc, #44]	@ (800c860 <xTaskGetSchedulerState+0x34>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d102      	bne.n	800c840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c83a:	2301      	movs	r3, #1
 800c83c:	607b      	str	r3, [r7, #4]
 800c83e:	e008      	b.n	800c852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c840:	4b08      	ldr	r3, [pc, #32]	@ (800c864 <xTaskGetSchedulerState+0x38>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d102      	bne.n	800c84e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c848:	2302      	movs	r3, #2
 800c84a:	607b      	str	r3, [r7, #4]
 800c84c:	e001      	b.n	800c852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c84e:	2300      	movs	r3, #0
 800c850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c852:	687b      	ldr	r3, [r7, #4]
	}
 800c854:	4618      	mov	r0, r3
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	20002c7c 	.word	0x20002c7c
 800c864:	20002c98 	.word	0x20002c98

0800c868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c874:	2300      	movs	r3, #0
 800c876:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d058      	beq.n	800c930 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c87e:	4b2f      	ldr	r3, [pc, #188]	@ (800c93c <xTaskPriorityDisinherit+0xd4>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	693a      	ldr	r2, [r7, #16]
 800c884:	429a      	cmp	r2, r3
 800c886:	d00b      	beq.n	800c8a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	60fb      	str	r3, [r7, #12]
}
 800c89a:	bf00      	nop
 800c89c:	bf00      	nop
 800c89e:	e7fd      	b.n	800c89c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10b      	bne.n	800c8c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ac:	f383 8811 	msr	BASEPRI, r3
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	60bb      	str	r3, [r7, #8]
}
 800c8ba:	bf00      	nop
 800c8bc:	bf00      	nop
 800c8be:	e7fd      	b.n	800c8bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8c4:	1e5a      	subs	r2, r3, #1
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d02c      	beq.n	800c930 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d128      	bne.n	800c930 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	3304      	adds	r3, #4
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fe fb68 	bl	800afb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c900:	4b0f      	ldr	r3, [pc, #60]	@ (800c940 <xTaskPriorityDisinherit+0xd8>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	429a      	cmp	r2, r3
 800c906:	d903      	bls.n	800c910 <xTaskPriorityDisinherit+0xa8>
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c90c:	4a0c      	ldr	r2, [pc, #48]	@ (800c940 <xTaskPriorityDisinherit+0xd8>)
 800c90e:	6013      	str	r3, [r2, #0]
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c914:	4613      	mov	r3, r2
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	4413      	add	r3, r2
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	4a09      	ldr	r2, [pc, #36]	@ (800c944 <xTaskPriorityDisinherit+0xdc>)
 800c91e:	441a      	add	r2, r3
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	3304      	adds	r3, #4
 800c924:	4619      	mov	r1, r3
 800c926:	4610      	mov	r0, r2
 800c928:	f7fe fae9 	bl	800aefe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c92c:	2301      	movs	r3, #1
 800c92e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c930:	697b      	ldr	r3, [r7, #20]
	}
 800c932:	4618      	mov	r0, r3
 800c934:	3718      	adds	r7, #24
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	2000279c 	.word	0x2000279c
 800c940:	20002c78 	.word	0x20002c78
 800c944:	200027a0 	.word	0x200027a0

0800c948 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c952:	4b21      	ldr	r3, [pc, #132]	@ (800c9d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c958:	4b20      	ldr	r3, [pc, #128]	@ (800c9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3304      	adds	r3, #4
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe fb2a 	bl	800afb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c96a:	d10a      	bne.n	800c982 <prvAddCurrentTaskToDelayedList+0x3a>
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d007      	beq.n	800c982 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c972:	4b1a      	ldr	r3, [pc, #104]	@ (800c9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3304      	adds	r3, #4
 800c978:	4619      	mov	r1, r3
 800c97a:	4819      	ldr	r0, [pc, #100]	@ (800c9e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c97c:	f7fe fabf 	bl	800aefe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c980:	e026      	b.n	800c9d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4413      	add	r3, r2
 800c988:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c98a:	4b14      	ldr	r3, [pc, #80]	@ (800c9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	429a      	cmp	r2, r3
 800c998:	d209      	bcs.n	800c9ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c99a:	4b12      	ldr	r3, [pc, #72]	@ (800c9e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	4b0f      	ldr	r3, [pc, #60]	@ (800c9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	3304      	adds	r3, #4
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	f7fe facd 	bl	800af46 <vListInsert>
}
 800c9ac:	e010      	b.n	800c9d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c9e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	4610      	mov	r0, r2
 800c9bc:	f7fe fac3 	bl	800af46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c9c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d202      	bcs.n	800c9d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c9ca:	4a08      	ldr	r2, [pc, #32]	@ (800c9ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	6013      	str	r3, [r2, #0]
}
 800c9d0:	bf00      	nop
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	20002c74 	.word	0x20002c74
 800c9dc:	2000279c 	.word	0x2000279c
 800c9e0:	20002c5c 	.word	0x20002c5c
 800c9e4:	20002c2c 	.word	0x20002c2c
 800c9e8:	20002c28 	.word	0x20002c28
 800c9ec:	20002c90 	.word	0x20002c90

0800c9f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b08a      	sub	sp, #40	@ 0x28
 800c9f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9fa:	f000 fb13 	bl	800d024 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9fe:	4b1d      	ldr	r3, [pc, #116]	@ (800ca74 <xTimerCreateTimerTask+0x84>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d021      	beq.n	800ca4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ca0e:	1d3a      	adds	r2, r7, #4
 800ca10:	f107 0108 	add.w	r1, r7, #8
 800ca14:	f107 030c 	add.w	r3, r7, #12
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fe fa29 	bl	800ae70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ca1e:	6879      	ldr	r1, [r7, #4]
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	9202      	str	r2, [sp, #8]
 800ca26:	9301      	str	r3, [sp, #4]
 800ca28:	2302      	movs	r3, #2
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	460a      	mov	r2, r1
 800ca30:	4911      	ldr	r1, [pc, #68]	@ (800ca78 <xTimerCreateTimerTask+0x88>)
 800ca32:	4812      	ldr	r0, [pc, #72]	@ (800ca7c <xTimerCreateTimerTask+0x8c>)
 800ca34:	f7ff f8a2 	bl	800bb7c <xTaskCreateStatic>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	4a11      	ldr	r2, [pc, #68]	@ (800ca80 <xTimerCreateTimerTask+0x90>)
 800ca3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca3e:	4b10      	ldr	r3, [pc, #64]	@ (800ca80 <xTimerCreateTimerTask+0x90>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca46:	2301      	movs	r3, #1
 800ca48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10b      	bne.n	800ca68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	613b      	str	r3, [r7, #16]
}
 800ca62:	bf00      	nop
 800ca64:	bf00      	nop
 800ca66:	e7fd      	b.n	800ca64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca68:	697b      	ldr	r3, [r7, #20]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3718      	adds	r7, #24
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	20002ccc 	.word	0x20002ccc
 800ca78:	080112b0 	.word	0x080112b0
 800ca7c:	0800cbbd 	.word	0x0800cbbd
 800ca80:	20002cd0 	.word	0x20002cd0

0800ca84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b08a      	sub	sp, #40	@ 0x28
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
 800ca90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca92:	2300      	movs	r3, #0
 800ca94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10b      	bne.n	800cab4 <xTimerGenericCommand+0x30>
	__asm volatile
 800ca9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	623b      	str	r3, [r7, #32]
}
 800caae:	bf00      	nop
 800cab0:	bf00      	nop
 800cab2:	e7fd      	b.n	800cab0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cab4:	4b19      	ldr	r3, [pc, #100]	@ (800cb1c <xTimerGenericCommand+0x98>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d02a      	beq.n	800cb12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	2b05      	cmp	r3, #5
 800cacc:	dc18      	bgt.n	800cb00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cace:	f7ff fead 	bl	800c82c <xTaskGetSchedulerState>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d109      	bne.n	800caec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cad8:	4b10      	ldr	r3, [pc, #64]	@ (800cb1c <xTimerGenericCommand+0x98>)
 800cada:	6818      	ldr	r0, [r3, #0]
 800cadc:	f107 0110 	add.w	r1, r7, #16
 800cae0:	2300      	movs	r3, #0
 800cae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cae4:	f7fe fbd8 	bl	800b298 <xQueueGenericSend>
 800cae8:	6278      	str	r0, [r7, #36]	@ 0x24
 800caea:	e012      	b.n	800cb12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800caec:	4b0b      	ldr	r3, [pc, #44]	@ (800cb1c <xTimerGenericCommand+0x98>)
 800caee:	6818      	ldr	r0, [r3, #0]
 800caf0:	f107 0110 	add.w	r1, r7, #16
 800caf4:	2300      	movs	r3, #0
 800caf6:	2200      	movs	r2, #0
 800caf8:	f7fe fbce 	bl	800b298 <xQueueGenericSend>
 800cafc:	6278      	str	r0, [r7, #36]	@ 0x24
 800cafe:	e008      	b.n	800cb12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb00:	4b06      	ldr	r3, [pc, #24]	@ (800cb1c <xTimerGenericCommand+0x98>)
 800cb02:	6818      	ldr	r0, [r3, #0]
 800cb04:	f107 0110 	add.w	r1, r7, #16
 800cb08:	2300      	movs	r3, #0
 800cb0a:	683a      	ldr	r2, [r7, #0]
 800cb0c:	f7fe fcc6 	bl	800b49c <xQueueGenericSendFromISR>
 800cb10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3728      	adds	r7, #40	@ 0x28
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	20002ccc 	.word	0x20002ccc

0800cb20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b088      	sub	sp, #32
 800cb24:	af02      	add	r7, sp, #8
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb2a:	4b23      	ldr	r3, [pc, #140]	@ (800cbb8 <prvProcessExpiredTimer+0x98>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	68db      	ldr	r3, [r3, #12]
 800cb32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	3304      	adds	r3, #4
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fe fa3d 	bl	800afb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb44:	f003 0304 	and.w	r3, r3, #4
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d023      	beq.n	800cb94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	699a      	ldr	r2, [r3, #24]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	18d1      	adds	r1, r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	683a      	ldr	r2, [r7, #0]
 800cb58:	6978      	ldr	r0, [r7, #20]
 800cb5a:	f000 f8d5 	bl	800cd08 <prvInsertTimerInActiveList>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d020      	beq.n	800cba6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb64:	2300      	movs	r3, #0
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	2300      	movs	r3, #0
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	6978      	ldr	r0, [r7, #20]
 800cb70:	f7ff ff88 	bl	800ca84 <xTimerGenericCommand>
 800cb74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d114      	bne.n	800cba6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	60fb      	str	r3, [r7, #12]
}
 800cb8e:	bf00      	nop
 800cb90:	bf00      	nop
 800cb92:	e7fd      	b.n	800cb90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb9a:	f023 0301 	bic.w	r3, r3, #1
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	6a1b      	ldr	r3, [r3, #32]
 800cbaa:	6978      	ldr	r0, [r7, #20]
 800cbac:	4798      	blx	r3
}
 800cbae:	bf00      	nop
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	20002cc4 	.word	0x20002cc4

0800cbbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbc4:	f107 0308 	add.w	r3, r7, #8
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 f859 	bl	800cc80 <prvGetNextExpireTime>
 800cbce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f000 f805 	bl	800cbe4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cbda:	f000 f8d7 	bl	800cd8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbde:	bf00      	nop
 800cbe0:	e7f0      	b.n	800cbc4 <prvTimerTask+0x8>
	...

0800cbe4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cbee:	f7ff fa29 	bl	800c044 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbf2:	f107 0308 	add.w	r3, r7, #8
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 f866 	bl	800ccc8 <prvSampleTimeNow>
 800cbfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d130      	bne.n	800cc66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10a      	bne.n	800cc20 <prvProcessTimerOrBlockTask+0x3c>
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d806      	bhi.n	800cc20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cc12:	f7ff fa25 	bl	800c060 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cc16:	68f9      	ldr	r1, [r7, #12]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7ff ff81 	bl	800cb20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cc1e:	e024      	b.n	800cc6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d008      	beq.n	800cc38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cc26:	4b13      	ldr	r3, [pc, #76]	@ (800cc74 <prvProcessTimerOrBlockTask+0x90>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d101      	bne.n	800cc34 <prvProcessTimerOrBlockTask+0x50>
 800cc30:	2301      	movs	r3, #1
 800cc32:	e000      	b.n	800cc36 <prvProcessTimerOrBlockTask+0x52>
 800cc34:	2300      	movs	r3, #0
 800cc36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cc38:	4b0f      	ldr	r3, [pc, #60]	@ (800cc78 <prvProcessTimerOrBlockTask+0x94>)
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	4619      	mov	r1, r3
 800cc46:	f7fe ff65 	bl	800bb14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc4a:	f7ff fa09 	bl	800c060 <xTaskResumeAll>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10a      	bne.n	800cc6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc54:	4b09      	ldr	r3, [pc, #36]	@ (800cc7c <prvProcessTimerOrBlockTask+0x98>)
 800cc56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc5a:	601a      	str	r2, [r3, #0]
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	f3bf 8f6f 	isb	sy
}
 800cc64:	e001      	b.n	800cc6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc66:	f7ff f9fb 	bl	800c060 <xTaskResumeAll>
}
 800cc6a:	bf00      	nop
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20002cc8 	.word	0x20002cc8
 800cc78:	20002ccc 	.word	0x20002ccc
 800cc7c:	e000ed04 	.word	0xe000ed04

0800cc80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc80:	b480      	push	{r7}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc88:	4b0e      	ldr	r3, [pc, #56]	@ (800ccc4 <prvGetNextExpireTime+0x44>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d101      	bne.n	800cc96 <prvGetNextExpireTime+0x16>
 800cc92:	2201      	movs	r2, #1
 800cc94:	e000      	b.n	800cc98 <prvGetNextExpireTime+0x18>
 800cc96:	2200      	movs	r2, #0
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d105      	bne.n	800ccb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cca4:	4b07      	ldr	r3, [pc, #28]	@ (800ccc4 <prvGetNextExpireTime+0x44>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	60fb      	str	r3, [r7, #12]
 800ccae:	e001      	b.n	800ccb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	20002cc4 	.word	0x20002cc4

0800ccc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ccd0:	f7ff fa64 	bl	800c19c <xTaskGetTickCount>
 800ccd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ccd6:	4b0b      	ldr	r3, [pc, #44]	@ (800cd04 <prvSampleTimeNow+0x3c>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d205      	bcs.n	800ccec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cce0:	f000 f93a 	bl	800cf58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	601a      	str	r2, [r3, #0]
 800ccea:	e002      	b.n	800ccf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ccf2:	4a04      	ldr	r2, [pc, #16]	@ (800cd04 <prvSampleTimeNow+0x3c>)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	20002cd4 	.word	0x20002cd4

0800cd08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
 800cd14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cd16:	2300      	movs	r3, #0
 800cd18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d812      	bhi.n	800cd54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	1ad2      	subs	r2, r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	699b      	ldr	r3, [r3, #24]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d302      	bcc.n	800cd42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	617b      	str	r3, [r7, #20]
 800cd40:	e01b      	b.n	800cd7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd42:	4b10      	ldr	r3, [pc, #64]	@ (800cd84 <prvInsertTimerInActiveList+0x7c>)
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	f7fe f8fa 	bl	800af46 <vListInsert>
 800cd52:	e012      	b.n	800cd7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d206      	bcs.n	800cd6a <prvInsertTimerInActiveList+0x62>
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d302      	bcc.n	800cd6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd64:	2301      	movs	r3, #1
 800cd66:	617b      	str	r3, [r7, #20]
 800cd68:	e007      	b.n	800cd7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd6a:	4b07      	ldr	r3, [pc, #28]	@ (800cd88 <prvInsertTimerInActiveList+0x80>)
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	3304      	adds	r3, #4
 800cd72:	4619      	mov	r1, r3
 800cd74:	4610      	mov	r0, r2
 800cd76:	f7fe f8e6 	bl	800af46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd7a:	697b      	ldr	r3, [r7, #20]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	20002cc8 	.word	0x20002cc8
 800cd88:	20002cc4 	.word	0x20002cc4

0800cd8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08e      	sub	sp, #56	@ 0x38
 800cd90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd92:	e0ce      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	da19      	bge.n	800cdce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd9a:	1d3b      	adds	r3, r7, #4
 800cd9c:	3304      	adds	r3, #4
 800cd9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d10b      	bne.n	800cdbe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	61fb      	str	r3, [r7, #28]
}
 800cdb8:	bf00      	nop
 800cdba:	bf00      	nop
 800cdbc:	e7fd      	b.n	800cdba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdc4:	6850      	ldr	r0, [r2, #4]
 800cdc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdc8:	6892      	ldr	r2, [r2, #8]
 800cdca:	4611      	mov	r1, r2
 800cdcc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f2c0 80ae 	blt.w	800cf32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cddc:	695b      	ldr	r3, [r3, #20]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d004      	beq.n	800cdec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde4:	3304      	adds	r3, #4
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7fe f8e6 	bl	800afb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdec:	463b      	mov	r3, r7
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff ff6a 	bl	800ccc8 <prvSampleTimeNow>
 800cdf4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b09      	cmp	r3, #9
 800cdfa:	f200 8097 	bhi.w	800cf2c <prvProcessReceivedCommands+0x1a0>
 800cdfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ce04 <prvProcessReceivedCommands+0x78>)
 800ce00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce04:	0800ce2d 	.word	0x0800ce2d
 800ce08:	0800ce2d 	.word	0x0800ce2d
 800ce0c:	0800ce2d 	.word	0x0800ce2d
 800ce10:	0800cea3 	.word	0x0800cea3
 800ce14:	0800ceb7 	.word	0x0800ceb7
 800ce18:	0800cf03 	.word	0x0800cf03
 800ce1c:	0800ce2d 	.word	0x0800ce2d
 800ce20:	0800ce2d 	.word	0x0800ce2d
 800ce24:	0800cea3 	.word	0x0800cea3
 800ce28:	0800ceb7 	.word	0x0800ceb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce32:	f043 0301 	orr.w	r3, r3, #1
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce3e:	68ba      	ldr	r2, [r7, #8]
 800ce40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	18d1      	adds	r1, r2, r3
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce4c:	f7ff ff5c 	bl	800cd08 <prvInsertTimerInActiveList>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d06c      	beq.n	800cf30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce58:	6a1b      	ldr	r3, [r3, #32]
 800ce5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce64:	f003 0304 	and.w	r3, r3, #4
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d061      	beq.n	800cf30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce70:	699b      	ldr	r3, [r3, #24]
 800ce72:	441a      	add	r2, r3
 800ce74:	2300      	movs	r3, #0
 800ce76:	9300      	str	r3, [sp, #0]
 800ce78:	2300      	movs	r3, #0
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce7e:	f7ff fe01 	bl	800ca84 <xTimerGenericCommand>
 800ce82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce84:	6a3b      	ldr	r3, [r7, #32]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d152      	bne.n	800cf30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ce8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	61bb      	str	r3, [r7, #24]
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	e7fd      	b.n	800ce9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cea8:	f023 0301 	bic.w	r3, r3, #1
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ceb4:	e03d      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ceb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cebc:	f043 0301 	orr.w	r3, r3, #1
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cecc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced0:	699b      	ldr	r3, [r3, #24]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10b      	bne.n	800ceee <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ced6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	617b      	str	r3, [r7, #20]
}
 800cee8:	bf00      	nop
 800ceea:	bf00      	nop
 800ceec:	e7fd      	b.n	800ceea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ceee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef0:	699a      	ldr	r2, [r3, #24]
 800cef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef4:	18d1      	adds	r1, r2, r3
 800cef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cefa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cefc:	f7ff ff04 	bl	800cd08 <prvInsertTimerInActiveList>
					break;
 800cf00:	e017      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf08:	f003 0302 	and.w	r3, r3, #2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d103      	bne.n	800cf18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cf10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf12:	f000 fbe9 	bl	800d6e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cf16:	e00c      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf1e:	f023 0301 	bic.w	r3, r3, #1
 800cf22:	b2da      	uxtb	r2, r3
 800cf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cf2a:	e002      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cf2c:	bf00      	nop
 800cf2e:	e000      	b.n	800cf32 <prvProcessReceivedCommands+0x1a6>
					break;
 800cf30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf32:	4b08      	ldr	r3, [pc, #32]	@ (800cf54 <prvProcessReceivedCommands+0x1c8>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	1d39      	adds	r1, r7, #4
 800cf38:	2200      	movs	r2, #0
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fe fb4c 	bl	800b5d8 <xQueueReceive>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f47f af26 	bne.w	800cd94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cf48:	bf00      	nop
 800cf4a:	bf00      	nop
 800cf4c:	3730      	adds	r7, #48	@ 0x30
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	20002ccc 	.word	0x20002ccc

0800cf58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b088      	sub	sp, #32
 800cf5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf5e:	e049      	b.n	800cff4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf60:	4b2e      	ldr	r3, [pc, #184]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf6a:	4b2c      	ldr	r3, [pc, #176]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	3304      	adds	r3, #4
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7fe f81d 	bl	800afb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6a1b      	ldr	r3, [r3, #32]
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf8c:	f003 0304 	and.w	r3, r3, #4
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d02f      	beq.n	800cff4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	693a      	ldr	r2, [r7, #16]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d90e      	bls.n	800cfc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfb2:	4b1a      	ldr	r3, [pc, #104]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	4619      	mov	r1, r3
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	f7fd ffc2 	bl	800af46 <vListInsert>
 800cfc2:	e017      	b.n	800cff4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	9300      	str	r3, [sp, #0]
 800cfc8:	2300      	movs	r3, #0
 800cfca:	693a      	ldr	r2, [r7, #16]
 800cfcc:	2100      	movs	r1, #0
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f7ff fd58 	bl	800ca84 <xTimerGenericCommand>
 800cfd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10b      	bne.n	800cff4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	603b      	str	r3, [r7, #0]
}
 800cfee:	bf00      	nop
 800cff0:	bf00      	nop
 800cff2:	e7fd      	b.n	800cff0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cff4:	4b09      	ldr	r3, [pc, #36]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1b0      	bne.n	800cf60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cffe:	4b07      	ldr	r3, [pc, #28]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d004:	4b06      	ldr	r3, [pc, #24]	@ (800d020 <prvSwitchTimerLists+0xc8>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a04      	ldr	r2, [pc, #16]	@ (800d01c <prvSwitchTimerLists+0xc4>)
 800d00a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d00c:	4a04      	ldr	r2, [pc, #16]	@ (800d020 <prvSwitchTimerLists+0xc8>)
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	6013      	str	r3, [r2, #0]
}
 800d012:	bf00      	nop
 800d014:	3718      	adds	r7, #24
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	20002cc4 	.word	0x20002cc4
 800d020:	20002cc8 	.word	0x20002cc8

0800d024 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d02a:	f000 f96d 	bl	800d308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d02e:	4b15      	ldr	r3, [pc, #84]	@ (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d120      	bne.n	800d078 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d036:	4814      	ldr	r0, [pc, #80]	@ (800d088 <prvCheckForValidListAndQueue+0x64>)
 800d038:	f7fd ff34 	bl	800aea4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d03c:	4813      	ldr	r0, [pc, #76]	@ (800d08c <prvCheckForValidListAndQueue+0x68>)
 800d03e:	f7fd ff31 	bl	800aea4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d042:	4b13      	ldr	r3, [pc, #76]	@ (800d090 <prvCheckForValidListAndQueue+0x6c>)
 800d044:	4a10      	ldr	r2, [pc, #64]	@ (800d088 <prvCheckForValidListAndQueue+0x64>)
 800d046:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d048:	4b12      	ldr	r3, [pc, #72]	@ (800d094 <prvCheckForValidListAndQueue+0x70>)
 800d04a:	4a10      	ldr	r2, [pc, #64]	@ (800d08c <prvCheckForValidListAndQueue+0x68>)
 800d04c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d04e:	2300      	movs	r3, #0
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	4b11      	ldr	r3, [pc, #68]	@ (800d098 <prvCheckForValidListAndQueue+0x74>)
 800d054:	4a11      	ldr	r2, [pc, #68]	@ (800d09c <prvCheckForValidListAndQueue+0x78>)
 800d056:	2110      	movs	r1, #16
 800d058:	200a      	movs	r0, #10
 800d05a:	f7fe f841 	bl	800b0e0 <xQueueGenericCreateStatic>
 800d05e:	4603      	mov	r3, r0
 800d060:	4a08      	ldr	r2, [pc, #32]	@ (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d062:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d064:	4b07      	ldr	r3, [pc, #28]	@ (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d005      	beq.n	800d078 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d06c:	4b05      	ldr	r3, [pc, #20]	@ (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	490b      	ldr	r1, [pc, #44]	@ (800d0a0 <prvCheckForValidListAndQueue+0x7c>)
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe fd24 	bl	800bac0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d078:	f000 f978 	bl	800d36c <vPortExitCritical>
}
 800d07c:	bf00      	nop
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20002ccc 	.word	0x20002ccc
 800d088:	20002c9c 	.word	0x20002c9c
 800d08c:	20002cb0 	.word	0x20002cb0
 800d090:	20002cc4 	.word	0x20002cc4
 800d094:	20002cc8 	.word	0x20002cc8
 800d098:	20002d78 	.word	0x20002d78
 800d09c:	20002cd8 	.word	0x20002cd8
 800d0a0:	080112b8 	.word	0x080112b8

0800d0a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3b04      	subs	r3, #4
 800d0b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d0bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	3b04      	subs	r3, #4
 800d0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	f023 0201 	bic.w	r2, r3, #1
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	3b04      	subs	r3, #4
 800d0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d0d4:	4a0c      	ldr	r2, [pc, #48]	@ (800d108 <pxPortInitialiseStack+0x64>)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3b14      	subs	r3, #20
 800d0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	3b04      	subs	r3, #4
 800d0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f06f 0202 	mvn.w	r2, #2
 800d0f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	3b20      	subs	r3, #32
 800d0f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	0800d10d 	.word	0x0800d10d

0800d10c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d112:	2300      	movs	r3, #0
 800d114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d116:	4b13      	ldr	r3, [pc, #76]	@ (800d164 <prvTaskExitError+0x58>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d11e:	d00b      	beq.n	800d138 <prvTaskExitError+0x2c>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	60fb      	str	r3, [r7, #12]
}
 800d132:	bf00      	nop
 800d134:	bf00      	nop
 800d136:	e7fd      	b.n	800d134 <prvTaskExitError+0x28>
	__asm volatile
 800d138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d13c:	f383 8811 	msr	BASEPRI, r3
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	60bb      	str	r3, [r7, #8]
}
 800d14a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d14c:	bf00      	nop
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d0fc      	beq.n	800d14e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d154:	bf00      	nop
 800d156:	bf00      	nop
 800d158:	3714      	adds	r7, #20
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	2000011c 	.word	0x2000011c
	...

0800d170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d170:	4b07      	ldr	r3, [pc, #28]	@ (800d190 <pxCurrentTCBConst2>)
 800d172:	6819      	ldr	r1, [r3, #0]
 800d174:	6808      	ldr	r0, [r1, #0]
 800d176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17a:	f380 8809 	msr	PSP, r0
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f04f 0000 	mov.w	r0, #0
 800d186:	f380 8811 	msr	BASEPRI, r0
 800d18a:	4770      	bx	lr
 800d18c:	f3af 8000 	nop.w

0800d190 <pxCurrentTCBConst2>:
 800d190:	2000279c 	.word	0x2000279c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop

0800d198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d198:	4808      	ldr	r0, [pc, #32]	@ (800d1bc <prvPortStartFirstTask+0x24>)
 800d19a:	6800      	ldr	r0, [r0, #0]
 800d19c:	6800      	ldr	r0, [r0, #0]
 800d19e:	f380 8808 	msr	MSP, r0
 800d1a2:	f04f 0000 	mov.w	r0, #0
 800d1a6:	f380 8814 	msr	CONTROL, r0
 800d1aa:	b662      	cpsie	i
 800d1ac:	b661      	cpsie	f
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	df00      	svc	0
 800d1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1ba:	bf00      	nop
 800d1bc:	e000ed08 	.word	0xe000ed08

0800d1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d1c6:	4b47      	ldr	r3, [pc, #284]	@ (800d2e4 <xPortStartScheduler+0x124>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a47      	ldr	r2, [pc, #284]	@ (800d2e8 <xPortStartScheduler+0x128>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d10b      	bne.n	800d1e8 <xPortStartScheduler+0x28>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	613b      	str	r3, [r7, #16]
}
 800d1e2:	bf00      	nop
 800d1e4:	bf00      	nop
 800d1e6:	e7fd      	b.n	800d1e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d1e8:	4b3e      	ldr	r3, [pc, #248]	@ (800d2e4 <xPortStartScheduler+0x124>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a3f      	ldr	r2, [pc, #252]	@ (800d2ec <xPortStartScheduler+0x12c>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d10b      	bne.n	800d20a <xPortStartScheduler+0x4a>
	__asm volatile
 800d1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	60fb      	str	r3, [r7, #12]
}
 800d204:	bf00      	nop
 800d206:	bf00      	nop
 800d208:	e7fd      	b.n	800d206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d20a:	4b39      	ldr	r3, [pc, #228]	@ (800d2f0 <xPortStartScheduler+0x130>)
 800d20c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	b2db      	uxtb	r3, r3
 800d214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	22ff      	movs	r2, #255	@ 0xff
 800d21a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	b2db      	uxtb	r3, r3
 800d222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d224:	78fb      	ldrb	r3, [r7, #3]
 800d226:	b2db      	uxtb	r3, r3
 800d228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d22c:	b2da      	uxtb	r2, r3
 800d22e:	4b31      	ldr	r3, [pc, #196]	@ (800d2f4 <xPortStartScheduler+0x134>)
 800d230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d232:	4b31      	ldr	r3, [pc, #196]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d234:	2207      	movs	r2, #7
 800d236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d238:	e009      	b.n	800d24e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d23a:	4b2f      	ldr	r3, [pc, #188]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	3b01      	subs	r3, #1
 800d240:	4a2d      	ldr	r2, [pc, #180]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	b2db      	uxtb	r3, r3
 800d248:	005b      	lsls	r3, r3, #1
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d24e:	78fb      	ldrb	r3, [r7, #3]
 800d250:	b2db      	uxtb	r3, r3
 800d252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d256:	2b80      	cmp	r3, #128	@ 0x80
 800d258:	d0ef      	beq.n	800d23a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d25a:	4b27      	ldr	r3, [pc, #156]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f1c3 0307 	rsb	r3, r3, #7
 800d262:	2b04      	cmp	r3, #4
 800d264:	d00b      	beq.n	800d27e <xPortStartScheduler+0xbe>
	__asm volatile
 800d266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	60bb      	str	r3, [r7, #8]
}
 800d278:	bf00      	nop
 800d27a:	bf00      	nop
 800d27c:	e7fd      	b.n	800d27a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d27e:	4b1e      	ldr	r3, [pc, #120]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	021b      	lsls	r3, r3, #8
 800d284:	4a1c      	ldr	r2, [pc, #112]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d288:	4b1b      	ldr	r3, [pc, #108]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d290:	4a19      	ldr	r2, [pc, #100]	@ (800d2f8 <xPortStartScheduler+0x138>)
 800d292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	b2da      	uxtb	r2, r3
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d29c:	4b17      	ldr	r3, [pc, #92]	@ (800d2fc <xPortStartScheduler+0x13c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a16      	ldr	r2, [pc, #88]	@ (800d2fc <xPortStartScheduler+0x13c>)
 800d2a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d2a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2a8:	4b14      	ldr	r3, [pc, #80]	@ (800d2fc <xPortStartScheduler+0x13c>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a13      	ldr	r2, [pc, #76]	@ (800d2fc <xPortStartScheduler+0x13c>)
 800d2ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d2b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2b4:	f000 f8da 	bl	800d46c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2b8:	4b11      	ldr	r3, [pc, #68]	@ (800d300 <xPortStartScheduler+0x140>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2be:	f000 f8f9 	bl	800d4b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2c2:	4b10      	ldr	r3, [pc, #64]	@ (800d304 <xPortStartScheduler+0x144>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a0f      	ldr	r2, [pc, #60]	@ (800d304 <xPortStartScheduler+0x144>)
 800d2c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d2cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d2ce:	f7ff ff63 	bl	800d198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d2d2:	f7ff f82d 	bl	800c330 <vTaskSwitchContext>
	prvTaskExitError();
 800d2d6:	f7ff ff19 	bl	800d10c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	e000ed00 	.word	0xe000ed00
 800d2e8:	410fc271 	.word	0x410fc271
 800d2ec:	410fc270 	.word	0x410fc270
 800d2f0:	e000e400 	.word	0xe000e400
 800d2f4:	20002dc8 	.word	0x20002dc8
 800d2f8:	20002dcc 	.word	0x20002dcc
 800d2fc:	e000ed20 	.word	0xe000ed20
 800d300:	2000011c 	.word	0x2000011c
 800d304:	e000ef34 	.word	0xe000ef34

0800d308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
	__asm volatile
 800d30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d312:	f383 8811 	msr	BASEPRI, r3
 800d316:	f3bf 8f6f 	isb	sy
 800d31a:	f3bf 8f4f 	dsb	sy
 800d31e:	607b      	str	r3, [r7, #4]
}
 800d320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d322:	4b10      	ldr	r3, [pc, #64]	@ (800d364 <vPortEnterCritical+0x5c>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	3301      	adds	r3, #1
 800d328:	4a0e      	ldr	r2, [pc, #56]	@ (800d364 <vPortEnterCritical+0x5c>)
 800d32a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d32c:	4b0d      	ldr	r3, [pc, #52]	@ (800d364 <vPortEnterCritical+0x5c>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d110      	bne.n	800d356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d334:	4b0c      	ldr	r3, [pc, #48]	@ (800d368 <vPortEnterCritical+0x60>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00b      	beq.n	800d356 <vPortEnterCritical+0x4e>
	__asm volatile
 800d33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	603b      	str	r3, [r7, #0]
}
 800d350:	bf00      	nop
 800d352:	bf00      	nop
 800d354:	e7fd      	b.n	800d352 <vPortEnterCritical+0x4a>
	}
}
 800d356:	bf00      	nop
 800d358:	370c      	adds	r7, #12
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	2000011c 	.word	0x2000011c
 800d368:	e000ed04 	.word	0xe000ed04

0800d36c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d372:	4b12      	ldr	r3, [pc, #72]	@ (800d3bc <vPortExitCritical+0x50>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10b      	bne.n	800d392 <vPortExitCritical+0x26>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	607b      	str	r3, [r7, #4]
}
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	e7fd      	b.n	800d38e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d392:	4b0a      	ldr	r3, [pc, #40]	@ (800d3bc <vPortExitCritical+0x50>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	3b01      	subs	r3, #1
 800d398:	4a08      	ldr	r2, [pc, #32]	@ (800d3bc <vPortExitCritical+0x50>)
 800d39a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d39c:	4b07      	ldr	r3, [pc, #28]	@ (800d3bc <vPortExitCritical+0x50>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d105      	bne.n	800d3b0 <vPortExitCritical+0x44>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	f383 8811 	msr	BASEPRI, r3
}
 800d3ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr
 800d3bc:	2000011c 	.word	0x2000011c

0800d3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d3c0:	f3ef 8009 	mrs	r0, PSP
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	4b15      	ldr	r3, [pc, #84]	@ (800d420 <pxCurrentTCBConst>)
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	f01e 0f10 	tst.w	lr, #16
 800d3d0:	bf08      	it	eq
 800d3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3da:	6010      	str	r0, [r2, #0]
 800d3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d3e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d3e4:	f380 8811 	msr	BASEPRI, r0
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f7fe ff9e 	bl	800c330 <vTaskSwitchContext>
 800d3f4:	f04f 0000 	mov.w	r0, #0
 800d3f8:	f380 8811 	msr	BASEPRI, r0
 800d3fc:	bc09      	pop	{r0, r3}
 800d3fe:	6819      	ldr	r1, [r3, #0]
 800d400:	6808      	ldr	r0, [r1, #0]
 800d402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d406:	f01e 0f10 	tst.w	lr, #16
 800d40a:	bf08      	it	eq
 800d40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d410:	f380 8809 	msr	PSP, r0
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	f3af 8000 	nop.w

0800d420 <pxCurrentTCBConst>:
 800d420:	2000279c 	.word	0x2000279c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d424:	bf00      	nop
 800d426:	bf00      	nop

0800d428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	607b      	str	r3, [r7, #4]
}
 800d440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d442:	f7fe febb 	bl	800c1bc <xTaskIncrementTick>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d003      	beq.n	800d454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d44c:	4b06      	ldr	r3, [pc, #24]	@ (800d468 <xPortSysTickHandler+0x40>)
 800d44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d452:	601a      	str	r2, [r3, #0]
 800d454:	2300      	movs	r3, #0
 800d456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	f383 8811 	msr	BASEPRI, r3
}
 800d45e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d460:	bf00      	nop
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	e000ed04 	.word	0xe000ed04

0800d46c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d46c:	b480      	push	{r7}
 800d46e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d470:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a0 <vPortSetupTimerInterrupt+0x34>)
 800d472:	2200      	movs	r2, #0
 800d474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d476:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a4 <vPortSetupTimerInterrupt+0x38>)
 800d478:	2200      	movs	r2, #0
 800d47a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d47c:	4b0a      	ldr	r3, [pc, #40]	@ (800d4a8 <vPortSetupTimerInterrupt+0x3c>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a0a      	ldr	r2, [pc, #40]	@ (800d4ac <vPortSetupTimerInterrupt+0x40>)
 800d482:	fba2 2303 	umull	r2, r3, r2, r3
 800d486:	099b      	lsrs	r3, r3, #6
 800d488:	4a09      	ldr	r2, [pc, #36]	@ (800d4b0 <vPortSetupTimerInterrupt+0x44>)
 800d48a:	3b01      	subs	r3, #1
 800d48c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d48e:	4b04      	ldr	r3, [pc, #16]	@ (800d4a0 <vPortSetupTimerInterrupt+0x34>)
 800d490:	2207      	movs	r2, #7
 800d492:	601a      	str	r2, [r3, #0]
}
 800d494:	bf00      	nop
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	e000e010 	.word	0xe000e010
 800d4a4:	e000e018 	.word	0xe000e018
 800d4a8:	20000000 	.word	0x20000000
 800d4ac:	10624dd3 	.word	0x10624dd3
 800d4b0:	e000e014 	.word	0xe000e014

0800d4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d4c4 <vPortEnableVFP+0x10>
 800d4b8:	6801      	ldr	r1, [r0, #0]
 800d4ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d4be:	6001      	str	r1, [r0, #0]
 800d4c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4c2:	bf00      	nop
 800d4c4:	e000ed88 	.word	0xe000ed88

0800d4c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d4ce:	f3ef 8305 	mrs	r3, IPSR
 800d4d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2b0f      	cmp	r3, #15
 800d4d8:	d915      	bls.n	800d506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d4da:	4a18      	ldr	r2, [pc, #96]	@ (800d53c <vPortValidateInterruptPriority+0x74>)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	4413      	add	r3, r2
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d4e4:	4b16      	ldr	r3, [pc, #88]	@ (800d540 <vPortValidateInterruptPriority+0x78>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	7afa      	ldrb	r2, [r7, #11]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d20b      	bcs.n	800d506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	607b      	str	r3, [r7, #4]
}
 800d500:	bf00      	nop
 800d502:	bf00      	nop
 800d504:	e7fd      	b.n	800d502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d506:	4b0f      	ldr	r3, [pc, #60]	@ (800d544 <vPortValidateInterruptPriority+0x7c>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d50e:	4b0e      	ldr	r3, [pc, #56]	@ (800d548 <vPortValidateInterruptPriority+0x80>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	429a      	cmp	r2, r3
 800d514:	d90b      	bls.n	800d52e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	603b      	str	r3, [r7, #0]
}
 800d528:	bf00      	nop
 800d52a:	bf00      	nop
 800d52c:	e7fd      	b.n	800d52a <vPortValidateInterruptPriority+0x62>
	}
 800d52e:	bf00      	nop
 800d530:	3714      	adds	r7, #20
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	e000e3f0 	.word	0xe000e3f0
 800d540:	20002dc8 	.word	0x20002dc8
 800d544:	e000ed0c 	.word	0xe000ed0c
 800d548:	20002dcc 	.word	0x20002dcc

0800d54c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b08a      	sub	sp, #40	@ 0x28
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d554:	2300      	movs	r3, #0
 800d556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d558:	f7fe fd74 	bl	800c044 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d55c:	4b5c      	ldr	r3, [pc, #368]	@ (800d6d0 <pvPortMalloc+0x184>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d564:	f000 f924 	bl	800d7b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d568:	4b5a      	ldr	r3, [pc, #360]	@ (800d6d4 <pvPortMalloc+0x188>)
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	4013      	ands	r3, r2
 800d570:	2b00      	cmp	r3, #0
 800d572:	f040 8095 	bne.w	800d6a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d01e      	beq.n	800d5ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d57c:	2208      	movs	r2, #8
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4413      	add	r3, r2
 800d582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f003 0307 	and.w	r3, r3, #7
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d015      	beq.n	800d5ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f023 0307 	bic.w	r3, r3, #7
 800d594:	3308      	adds	r3, #8
 800d596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f003 0307 	and.w	r3, r3, #7
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00b      	beq.n	800d5ba <pvPortMalloc+0x6e>
	__asm volatile
 800d5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	617b      	str	r3, [r7, #20]
}
 800d5b4:	bf00      	nop
 800d5b6:	bf00      	nop
 800d5b8:	e7fd      	b.n	800d5b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d06f      	beq.n	800d6a0 <pvPortMalloc+0x154>
 800d5c0:	4b45      	ldr	r3, [pc, #276]	@ (800d6d8 <pvPortMalloc+0x18c>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d86a      	bhi.n	800d6a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d5ca:	4b44      	ldr	r3, [pc, #272]	@ (800d6dc <pvPortMalloc+0x190>)
 800d5cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d5ce:	4b43      	ldr	r3, [pc, #268]	@ (800d6dc <pvPortMalloc+0x190>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5d4:	e004      	b.n	800d5e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d903      	bls.n	800d5f2 <pvPortMalloc+0xa6>
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1f1      	bne.n	800d5d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d5f2:	4b37      	ldr	r3, [pc, #220]	@ (800d6d0 <pvPortMalloc+0x184>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d051      	beq.n	800d6a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d5fc:	6a3b      	ldr	r3, [r7, #32]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2208      	movs	r2, #8
 800d602:	4413      	add	r3, r2
 800d604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	6a3b      	ldr	r3, [r7, #32]
 800d60c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d610:	685a      	ldr	r2, [r3, #4]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	1ad2      	subs	r2, r2, r3
 800d616:	2308      	movs	r3, #8
 800d618:	005b      	lsls	r3, r3, #1
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d920      	bls.n	800d660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4413      	add	r3, r2
 800d624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	f003 0307 	and.w	r3, r3, #7
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00b      	beq.n	800d648 <pvPortMalloc+0xfc>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	613b      	str	r3, [r7, #16]
}
 800d642:	bf00      	nop
 800d644:	bf00      	nop
 800d646:	e7fd      	b.n	800d644 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64a:	685a      	ldr	r2, [r3, #4]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	1ad2      	subs	r2, r2, r3
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d65a:	69b8      	ldr	r0, [r7, #24]
 800d65c:	f000 f90a 	bl	800d874 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d660:	4b1d      	ldr	r3, [pc, #116]	@ (800d6d8 <pvPortMalloc+0x18c>)
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	1ad3      	subs	r3, r2, r3
 800d66a:	4a1b      	ldr	r2, [pc, #108]	@ (800d6d8 <pvPortMalloc+0x18c>)
 800d66c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d66e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6d8 <pvPortMalloc+0x18c>)
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	4b1b      	ldr	r3, [pc, #108]	@ (800d6e0 <pvPortMalloc+0x194>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	429a      	cmp	r2, r3
 800d678:	d203      	bcs.n	800d682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d67a:	4b17      	ldr	r3, [pc, #92]	@ (800d6d8 <pvPortMalloc+0x18c>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a18      	ldr	r2, [pc, #96]	@ (800d6e0 <pvPortMalloc+0x194>)
 800d680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d684:	685a      	ldr	r2, [r3, #4]
 800d686:	4b13      	ldr	r3, [pc, #76]	@ (800d6d4 <pvPortMalloc+0x188>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	431a      	orrs	r2, r3
 800d68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d692:	2200      	movs	r2, #0
 800d694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d696:	4b13      	ldr	r3, [pc, #76]	@ (800d6e4 <pvPortMalloc+0x198>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3301      	adds	r3, #1
 800d69c:	4a11      	ldr	r2, [pc, #68]	@ (800d6e4 <pvPortMalloc+0x198>)
 800d69e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6a0:	f7fe fcde 	bl	800c060 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	f003 0307 	and.w	r3, r3, #7
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00b      	beq.n	800d6c6 <pvPortMalloc+0x17a>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	60fb      	str	r3, [r7, #12]
}
 800d6c0:	bf00      	nop
 800d6c2:	bf00      	nop
 800d6c4:	e7fd      	b.n	800d6c2 <pvPortMalloc+0x176>
	return pvReturn;
 800d6c6:	69fb      	ldr	r3, [r7, #28]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3728      	adds	r7, #40	@ 0x28
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	20005cb8 	.word	0x20005cb8
 800d6d4:	20005ccc 	.word	0x20005ccc
 800d6d8:	20005cbc 	.word	0x20005cbc
 800d6dc:	20005cb0 	.word	0x20005cb0
 800d6e0:	20005cc0 	.word	0x20005cc0
 800d6e4:	20005cc4 	.word	0x20005cc4

0800d6e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d04f      	beq.n	800d79a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d6fa:	2308      	movs	r3, #8
 800d6fc:	425b      	negs	r3, r3
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	4413      	add	r3, r2
 800d702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	4b25      	ldr	r3, [pc, #148]	@ (800d7a4 <vPortFree+0xbc>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4013      	ands	r3, r2
 800d712:	2b00      	cmp	r3, #0
 800d714:	d10b      	bne.n	800d72e <vPortFree+0x46>
	__asm volatile
 800d716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	60fb      	str	r3, [r7, #12]
}
 800d728:	bf00      	nop
 800d72a:	bf00      	nop
 800d72c:	e7fd      	b.n	800d72a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00b      	beq.n	800d74e <vPortFree+0x66>
	__asm volatile
 800d736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d73a:	f383 8811 	msr	BASEPRI, r3
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	60bb      	str	r3, [r7, #8]
}
 800d748:	bf00      	nop
 800d74a:	bf00      	nop
 800d74c:	e7fd      	b.n	800d74a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	685a      	ldr	r2, [r3, #4]
 800d752:	4b14      	ldr	r3, [pc, #80]	@ (800d7a4 <vPortFree+0xbc>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4013      	ands	r3, r2
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d01e      	beq.n	800d79a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d11a      	bne.n	800d79a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	685a      	ldr	r2, [r3, #4]
 800d768:	4b0e      	ldr	r3, [pc, #56]	@ (800d7a4 <vPortFree+0xbc>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	43db      	mvns	r3, r3
 800d76e:	401a      	ands	r2, r3
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d774:	f7fe fc66 	bl	800c044 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	4b0a      	ldr	r3, [pc, #40]	@ (800d7a8 <vPortFree+0xc0>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4413      	add	r3, r2
 800d782:	4a09      	ldr	r2, [pc, #36]	@ (800d7a8 <vPortFree+0xc0>)
 800d784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d786:	6938      	ldr	r0, [r7, #16]
 800d788:	f000 f874 	bl	800d874 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d78c:	4b07      	ldr	r3, [pc, #28]	@ (800d7ac <vPortFree+0xc4>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3301      	adds	r3, #1
 800d792:	4a06      	ldr	r2, [pc, #24]	@ (800d7ac <vPortFree+0xc4>)
 800d794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d796:	f7fe fc63 	bl	800c060 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d79a:	bf00      	nop
 800d79c:	3718      	adds	r7, #24
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	20005ccc 	.word	0x20005ccc
 800d7a8:	20005cbc 	.word	0x20005cbc
 800d7ac:	20005cc8 	.word	0x20005cc8

0800d7b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7b6:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800d7ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7bc:	4b27      	ldr	r3, [pc, #156]	@ (800d85c <prvHeapInit+0xac>)
 800d7be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f003 0307 	and.w	r3, r3, #7
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00c      	beq.n	800d7e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	3307      	adds	r3, #7
 800d7ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f023 0307 	bic.w	r3, r3, #7
 800d7d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	1ad3      	subs	r3, r2, r3
 800d7de:	4a1f      	ldr	r2, [pc, #124]	@ (800d85c <prvHeapInit+0xac>)
 800d7e0:	4413      	add	r3, r2
 800d7e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d860 <prvHeapInit+0xb0>)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d7ee:	4b1c      	ldr	r3, [pc, #112]	@ (800d860 <prvHeapInit+0xb0>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d7fc:	2208      	movs	r2, #8
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	1a9b      	subs	r3, r3, r2
 800d802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f023 0307 	bic.w	r3, r3, #7
 800d80a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	4a15      	ldr	r2, [pc, #84]	@ (800d864 <prvHeapInit+0xb4>)
 800d810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d812:	4b14      	ldr	r3, [pc, #80]	@ (800d864 <prvHeapInit+0xb4>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2200      	movs	r2, #0
 800d818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d81a:	4b12      	ldr	r3, [pc, #72]	@ (800d864 <prvHeapInit+0xb4>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2200      	movs	r2, #0
 800d820:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	1ad2      	subs	r2, r2, r3
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d830:	4b0c      	ldr	r3, [pc, #48]	@ (800d864 <prvHeapInit+0xb4>)
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	4a0a      	ldr	r2, [pc, #40]	@ (800d868 <prvHeapInit+0xb8>)
 800d83e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	4a09      	ldr	r2, [pc, #36]	@ (800d86c <prvHeapInit+0xbc>)
 800d846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d848:	4b09      	ldr	r3, [pc, #36]	@ (800d870 <prvHeapInit+0xc0>)
 800d84a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d84e:	601a      	str	r2, [r3, #0]
}
 800d850:	bf00      	nop
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr
 800d85c:	20002dd0 	.word	0x20002dd0
 800d860:	20005cb0 	.word	0x20005cb0
 800d864:	20005cb8 	.word	0x20005cb8
 800d868:	20005cc0 	.word	0x20005cc0
 800d86c:	20005cbc 	.word	0x20005cbc
 800d870:	20005ccc 	.word	0x20005ccc

0800d874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d874:	b480      	push	{r7}
 800d876:	b085      	sub	sp, #20
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d87c:	4b28      	ldr	r3, [pc, #160]	@ (800d920 <prvInsertBlockIntoFreeList+0xac>)
 800d87e:	60fb      	str	r3, [r7, #12]
 800d880:	e002      	b.n	800d888 <prvInsertBlockIntoFreeList+0x14>
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	60fb      	str	r3, [r7, #12]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d8f7      	bhi.n	800d882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	4413      	add	r3, r2
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d108      	bne.n	800d8b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	685a      	ldr	r2, [r3, #4]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	441a      	add	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	441a      	add	r2, r3
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d118      	bne.n	800d8fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	4b15      	ldr	r3, [pc, #84]	@ (800d924 <prvInsertBlockIntoFreeList+0xb0>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d00d      	beq.n	800d8f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	441a      	add	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	601a      	str	r2, [r3, #0]
 800d8f0:	e008      	b.n	800d904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d924 <prvInsertBlockIntoFreeList+0xb0>)
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	601a      	str	r2, [r3, #0]
 800d8fa:	e003      	b.n	800d904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d002      	beq.n	800d912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d912:	bf00      	nop
 800d914:	3714      	adds	r7, #20
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	20005cb0 	.word	0x20005cb0
 800d924:	20005cb8 	.word	0x20005cb8

0800d928 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d92c:	2200      	movs	r2, #0
 800d92e:	4912      	ldr	r1, [pc, #72]	@ (800d978 <MX_USB_Device_Init+0x50>)
 800d930:	4812      	ldr	r0, [pc, #72]	@ (800d97c <MX_USB_Device_Init+0x54>)
 800d932:	f7fb fef5 	bl	8009720 <USBD_Init>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d93c:	f7f3 ffb0 	bl	80018a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d940:	490f      	ldr	r1, [pc, #60]	@ (800d980 <MX_USB_Device_Init+0x58>)
 800d942:	480e      	ldr	r0, [pc, #56]	@ (800d97c <MX_USB_Device_Init+0x54>)
 800d944:	f7fb ff1c 	bl	8009780 <USBD_RegisterClass>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d001      	beq.n	800d952 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d94e:	f7f3 ffa7 	bl	80018a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d952:	490c      	ldr	r1, [pc, #48]	@ (800d984 <MX_USB_Device_Init+0x5c>)
 800d954:	4809      	ldr	r0, [pc, #36]	@ (800d97c <MX_USB_Device_Init+0x54>)
 800d956:	f7fb fe3d 	bl	80095d4 <USBD_CDC_RegisterInterface>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d001      	beq.n	800d964 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d960:	f7f3 ff9e 	bl	80018a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d964:	4805      	ldr	r0, [pc, #20]	@ (800d97c <MX_USB_Device_Init+0x54>)
 800d966:	f7fb ff32 	bl	80097ce <USBD_Start>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d970:	f7f3 ff96 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d974:	bf00      	nop
 800d976:	bd80      	pop	{r7, pc}
 800d978:	20000134 	.word	0x20000134
 800d97c:	20005cd0 	.word	0x20005cd0
 800d980:	20000018 	.word	0x20000018
 800d984:	20000120 	.word	0x20000120

0800d988 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d98c:	2200      	movs	r2, #0
 800d98e:	4905      	ldr	r1, [pc, #20]	@ (800d9a4 <CDC_Init_FS+0x1c>)
 800d990:	4805      	ldr	r0, [pc, #20]	@ (800d9a8 <CDC_Init_FS+0x20>)
 800d992:	f7fb fe34 	bl	80095fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d996:	4905      	ldr	r1, [pc, #20]	@ (800d9ac <CDC_Init_FS+0x24>)
 800d998:	4803      	ldr	r0, [pc, #12]	@ (800d9a8 <CDC_Init_FS+0x20>)
 800d99a:	f7fb fe4e 	bl	800963a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d99e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	200067a0 	.word	0x200067a0
 800d9a8:	20005cd0 	.word	0x20005cd0
 800d9ac:	20005fa0 	.word	0x20005fa0

0800d9b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d9b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	6039      	str	r1, [r7, #0]
 800d9ca:	71fb      	strb	r3, [r7, #7]
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d9d0:	79fb      	ldrb	r3, [r7, #7]
 800d9d2:	2b23      	cmp	r3, #35	@ 0x23
 800d9d4:	d84a      	bhi.n	800da6c <CDC_Control_FS+0xac>
 800d9d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9dc <CDC_Control_FS+0x1c>)
 800d9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9dc:	0800da6d 	.word	0x0800da6d
 800d9e0:	0800da6d 	.word	0x0800da6d
 800d9e4:	0800da6d 	.word	0x0800da6d
 800d9e8:	0800da6d 	.word	0x0800da6d
 800d9ec:	0800da6d 	.word	0x0800da6d
 800d9f0:	0800da6d 	.word	0x0800da6d
 800d9f4:	0800da6d 	.word	0x0800da6d
 800d9f8:	0800da6d 	.word	0x0800da6d
 800d9fc:	0800da6d 	.word	0x0800da6d
 800da00:	0800da6d 	.word	0x0800da6d
 800da04:	0800da6d 	.word	0x0800da6d
 800da08:	0800da6d 	.word	0x0800da6d
 800da0c:	0800da6d 	.word	0x0800da6d
 800da10:	0800da6d 	.word	0x0800da6d
 800da14:	0800da6d 	.word	0x0800da6d
 800da18:	0800da6d 	.word	0x0800da6d
 800da1c:	0800da6d 	.word	0x0800da6d
 800da20:	0800da6d 	.word	0x0800da6d
 800da24:	0800da6d 	.word	0x0800da6d
 800da28:	0800da6d 	.word	0x0800da6d
 800da2c:	0800da6d 	.word	0x0800da6d
 800da30:	0800da6d 	.word	0x0800da6d
 800da34:	0800da6d 	.word	0x0800da6d
 800da38:	0800da6d 	.word	0x0800da6d
 800da3c:	0800da6d 	.word	0x0800da6d
 800da40:	0800da6d 	.word	0x0800da6d
 800da44:	0800da6d 	.word	0x0800da6d
 800da48:	0800da6d 	.word	0x0800da6d
 800da4c:	0800da6d 	.word	0x0800da6d
 800da50:	0800da6d 	.word	0x0800da6d
 800da54:	0800da6d 	.word	0x0800da6d
 800da58:	0800da6d 	.word	0x0800da6d
 800da5c:	0800da6d 	.word	0x0800da6d
 800da60:	0800da6d 	.word	0x0800da6d
 800da64:	0800da6d 	.word	0x0800da6d
 800da68:	0800da6d 	.word	0x0800da6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800da6c:	bf00      	nop
  }

  return (USBD_OK);
 800da6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800da70:	4618      	mov	r0, r3
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800da86:	6879      	ldr	r1, [r7, #4]
 800da88:	4805      	ldr	r0, [pc, #20]	@ (800daa0 <CDC_Receive_FS+0x24>)
 800da8a:	f7fb fdd6 	bl	800963a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800da8e:	4804      	ldr	r0, [pc, #16]	@ (800daa0 <CDC_Receive_FS+0x24>)
 800da90:	f7fb fe1c 	bl	80096cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800da94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800da96:	4618      	mov	r0, r3
 800da98:	3708      	adds	r7, #8
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	20005cd0 	.word	0x20005cd0

0800daa4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	460b      	mov	r3, r1
 800daae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dab0:	2300      	movs	r3, #0
 800dab2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dab4:	4b0d      	ldr	r3, [pc, #52]	@ (800daec <CDC_Transmit_FS+0x48>)
 800dab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800daba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d001      	beq.n	800daca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dac6:	2301      	movs	r3, #1
 800dac8:	e00b      	b.n	800dae2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800daca:	887b      	ldrh	r3, [r7, #2]
 800dacc:	461a      	mov	r2, r3
 800dace:	6879      	ldr	r1, [r7, #4]
 800dad0:	4806      	ldr	r0, [pc, #24]	@ (800daec <CDC_Transmit_FS+0x48>)
 800dad2:	f7fb fd94 	bl	80095fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dad6:	4805      	ldr	r0, [pc, #20]	@ (800daec <CDC_Transmit_FS+0x48>)
 800dad8:	f7fb fdc8 	bl	800966c <USBD_CDC_TransmitPacket>
 800dadc:	4603      	mov	r3, r0
 800dade:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	20005cd0 	.word	0x20005cd0

0800daf0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b087      	sub	sp, #28
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	4613      	mov	r3, r2
 800dafc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800db02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db06:	4618      	mov	r0, r3
 800db08:	371c      	adds	r7, #28
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
	...

0800db14 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
 800db1a:	4603      	mov	r3, r0
 800db1c:	6039      	str	r1, [r7, #0]
 800db1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	2212      	movs	r2, #18
 800db24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800db26:	4b03      	ldr	r3, [pc, #12]	@ (800db34 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800db28:	4618      	mov	r0, r3
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr
 800db34:	20000154 	.word	0x20000154

0800db38 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	4603      	mov	r3, r0
 800db40:	6039      	str	r1, [r7, #0]
 800db42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	2204      	movs	r2, #4
 800db48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db4a:	4b03      	ldr	r3, [pc, #12]	@ (800db58 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr
 800db58:	20000168 	.word	0x20000168

0800db5c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	4603      	mov	r3, r0
 800db64:	6039      	str	r1, [r7, #0]
 800db66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db68:	79fb      	ldrb	r3, [r7, #7]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d105      	bne.n	800db7a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	4907      	ldr	r1, [pc, #28]	@ (800db90 <USBD_CDC_ProductStrDescriptor+0x34>)
 800db72:	4808      	ldr	r0, [pc, #32]	@ (800db94 <USBD_CDC_ProductStrDescriptor+0x38>)
 800db74:	f7fc fe13 	bl	800a79e <USBD_GetString>
 800db78:	e004      	b.n	800db84 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800db7a:	683a      	ldr	r2, [r7, #0]
 800db7c:	4904      	ldr	r1, [pc, #16]	@ (800db90 <USBD_CDC_ProductStrDescriptor+0x34>)
 800db7e:	4805      	ldr	r0, [pc, #20]	@ (800db94 <USBD_CDC_ProductStrDescriptor+0x38>)
 800db80:	f7fc fe0d 	bl	800a79e <USBD_GetString>
  }
  return USBD_StrDesc;
 800db84:	4b02      	ldr	r3, [pc, #8]	@ (800db90 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800db86:	4618      	mov	r0, r3
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	20006fa0 	.word	0x20006fa0
 800db94:	080112c0 	.word	0x080112c0

0800db98 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	4603      	mov	r3, r0
 800dba0:	6039      	str	r1, [r7, #0]
 800dba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	4904      	ldr	r1, [pc, #16]	@ (800dbb8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800dba8:	4804      	ldr	r0, [pc, #16]	@ (800dbbc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800dbaa:	f7fc fdf8 	bl	800a79e <USBD_GetString>
  return USBD_StrDesc;
 800dbae:	4b02      	ldr	r3, [pc, #8]	@ (800dbb8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	20006fa0 	.word	0x20006fa0
 800dbbc:	080112d8 	.word	0x080112d8

0800dbc0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	6039      	str	r1, [r7, #0]
 800dbca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	221a      	movs	r2, #26
 800dbd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dbd2:	f000 f843 	bl	800dc5c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dbd6:	4b02      	ldr	r3, [pc, #8]	@ (800dbe0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	2000016c 	.word	0x2000016c

0800dbe4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	4603      	mov	r3, r0
 800dbec:	6039      	str	r1, [r7, #0]
 800dbee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dbf0:	79fb      	ldrb	r3, [r7, #7]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d105      	bne.n	800dc02 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dbf6:	683a      	ldr	r2, [r7, #0]
 800dbf8:	4907      	ldr	r1, [pc, #28]	@ (800dc18 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dbfa:	4808      	ldr	r0, [pc, #32]	@ (800dc1c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dbfc:	f7fc fdcf 	bl	800a79e <USBD_GetString>
 800dc00:	e004      	b.n	800dc0c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	4904      	ldr	r1, [pc, #16]	@ (800dc18 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dc06:	4805      	ldr	r0, [pc, #20]	@ (800dc1c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dc08:	f7fc fdc9 	bl	800a79e <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc0c:	4b02      	ldr	r3, [pc, #8]	@ (800dc18 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	20006fa0 	.word	0x20006fa0
 800dc1c:	080112ec 	.word	0x080112ec

0800dc20 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	4603      	mov	r3, r0
 800dc28:	6039      	str	r1, [r7, #0]
 800dc2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc2c:	79fb      	ldrb	r3, [r7, #7]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d105      	bne.n	800dc3e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dc32:	683a      	ldr	r2, [r7, #0]
 800dc34:	4907      	ldr	r1, [pc, #28]	@ (800dc54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dc36:	4808      	ldr	r0, [pc, #32]	@ (800dc58 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dc38:	f7fc fdb1 	bl	800a79e <USBD_GetString>
 800dc3c:	e004      	b.n	800dc48 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	4904      	ldr	r1, [pc, #16]	@ (800dc54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dc42:	4805      	ldr	r0, [pc, #20]	@ (800dc58 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dc44:	f7fc fdab 	bl	800a79e <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc48:	4b02      	ldr	r3, [pc, #8]	@ (800dc54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3708      	adds	r7, #8
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	20006fa0 	.word	0x20006fa0
 800dc58:	080112f8 	.word	0x080112f8

0800dc5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dc62:	4b0f      	ldr	r3, [pc, #60]	@ (800dca0 <Get_SerialNum+0x44>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dc68:	4b0e      	ldr	r3, [pc, #56]	@ (800dca4 <Get_SerialNum+0x48>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dc6e:	4b0e      	ldr	r3, [pc, #56]	@ (800dca8 <Get_SerialNum+0x4c>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	4413      	add	r3, r2
 800dc7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d009      	beq.n	800dc96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dc82:	2208      	movs	r2, #8
 800dc84:	4909      	ldr	r1, [pc, #36]	@ (800dcac <Get_SerialNum+0x50>)
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	f000 f814 	bl	800dcb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dc8c:	2204      	movs	r2, #4
 800dc8e:	4908      	ldr	r1, [pc, #32]	@ (800dcb0 <Get_SerialNum+0x54>)
 800dc90:	68b8      	ldr	r0, [r7, #8]
 800dc92:	f000 f80f 	bl	800dcb4 <IntToUnicode>
  }
}
 800dc96:	bf00      	nop
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	1fff7590 	.word	0x1fff7590
 800dca4:	1fff7594 	.word	0x1fff7594
 800dca8:	1fff7598 	.word	0x1fff7598
 800dcac:	2000016e 	.word	0x2000016e
 800dcb0:	2000017e 	.word	0x2000017e

0800dcb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b087      	sub	sp, #28
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	75fb      	strb	r3, [r7, #23]
 800dcca:	e027      	b.n	800dd1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	0f1b      	lsrs	r3, r3, #28
 800dcd0:	2b09      	cmp	r3, #9
 800dcd2:	d80b      	bhi.n	800dcec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	0f1b      	lsrs	r3, r3, #28
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	7dfb      	ldrb	r3, [r7, #23]
 800dcdc:	005b      	lsls	r3, r3, #1
 800dcde:	4619      	mov	r1, r3
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	440b      	add	r3, r1
 800dce4:	3230      	adds	r2, #48	@ 0x30
 800dce6:	b2d2      	uxtb	r2, r2
 800dce8:	701a      	strb	r2, [r3, #0]
 800dcea:	e00a      	b.n	800dd02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	0f1b      	lsrs	r3, r3, #28
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	7dfb      	ldrb	r3, [r7, #23]
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	440b      	add	r3, r1
 800dcfc:	3237      	adds	r2, #55	@ 0x37
 800dcfe:	b2d2      	uxtb	r2, r2
 800dd00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	011b      	lsls	r3, r3, #4
 800dd06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
 800dd0a:	005b      	lsls	r3, r3, #1
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	68ba      	ldr	r2, [r7, #8]
 800dd10:	4413      	add	r3, r2
 800dd12:	2200      	movs	r2, #0
 800dd14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd16:	7dfb      	ldrb	r3, [r7, #23]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	75fb      	strb	r3, [r7, #23]
 800dd1c:	7dfa      	ldrb	r2, [r7, #23]
 800dd1e:	79fb      	ldrb	r3, [r7, #7]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d3d3      	bcc.n	800dccc <IntToUnicode+0x18>
  }
}
 800dd24:	bf00      	nop
 800dd26:	bf00      	nop
 800dd28:	371c      	adds	r7, #28
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
	...

0800dd34 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b098      	sub	sp, #96	@ 0x60
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dd3c:	f107 0310 	add.w	r3, r7, #16
 800dd40:	2250      	movs	r2, #80	@ 0x50
 800dd42:	2100      	movs	r1, #0
 800dd44:	4618      	mov	r0, r3
 800dd46:	f001 f833 	bl	800edb0 <memset>
  if(pcdHandle->Instance==USB)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a15      	ldr	r2, [pc, #84]	@ (800dda4 <HAL_PCD_MspInit+0x70>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d122      	bne.n	800dd9a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dd54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dd58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dd5e:	f107 0310 	add.w	r3, r7, #16
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7f7 ff3e 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800dd6e:	f7f3 fd97 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dd72:	4b0d      	ldr	r3, [pc, #52]	@ (800dda8 <HAL_PCD_MspInit+0x74>)
 800dd74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd76:	4a0c      	ldr	r2, [pc, #48]	@ (800dda8 <HAL_PCD_MspInit+0x74>)
 800dd78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dd7c:	6593      	str	r3, [r2, #88]	@ 0x58
 800dd7e:	4b0a      	ldr	r3, [pc, #40]	@ (800dda8 <HAL_PCD_MspInit+0x74>)
 800dd80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd86:	60fb      	str	r3, [r7, #12]
 800dd88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	2105      	movs	r1, #5
 800dd8e:	2014      	movs	r0, #20
 800dd90:	f7f4 f970 	bl	8002074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800dd94:	2014      	movs	r0, #20
 800dd96:	f7f4 f987 	bl	80020a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800dd9a:	bf00      	nop
 800dd9c:	3760      	adds	r7, #96	@ 0x60
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	40005c00 	.word	0x40005c00
 800dda8:	40021000 	.word	0x40021000

0800ddac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	4610      	mov	r0, r2
 800ddc4:	f7fb fd4e 	bl	8009864 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ddc8:	bf00      	nop
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	460b      	mov	r3, r1
 800ddda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800dde2:	78fa      	ldrb	r2, [r7, #3]
 800dde4:	6879      	ldr	r1, [r7, #4]
 800dde6:	4613      	mov	r3, r2
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4413      	add	r3, r2
 800ddec:	00db      	lsls	r3, r3, #3
 800ddee:	440b      	add	r3, r1
 800ddf0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	78fb      	ldrb	r3, [r7, #3]
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	f7fb fd88 	bl	800990e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ddfe:	bf00      	nop
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de06:	b580      	push	{r7, lr}
 800de08:	b082      	sub	sp, #8
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	460b      	mov	r3, r1
 800de10:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800de18:	78fa      	ldrb	r2, [r7, #3]
 800de1a:	6879      	ldr	r1, [r7, #4]
 800de1c:	4613      	mov	r3, r2
 800de1e:	009b      	lsls	r3, r3, #2
 800de20:	4413      	add	r3, r2
 800de22:	00db      	lsls	r3, r3, #3
 800de24:	440b      	add	r3, r1
 800de26:	3324      	adds	r3, #36	@ 0x24
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	78fb      	ldrb	r3, [r7, #3]
 800de2c:	4619      	mov	r1, r3
 800de2e:	f7fb fdd1 	bl	80099d4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800de32:	bf00      	nop
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b082      	sub	sp, #8
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fb fee5 	bl	8009c18 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800de4e:	bf00      	nop
 800de50:	3708      	adds	r7, #8
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}

0800de56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de56:	b580      	push	{r7, lr}
 800de58:	b084      	sub	sp, #16
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800de5e:	2301      	movs	r3, #1
 800de60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	795b      	ldrb	r3, [r3, #5]
 800de66:	2b02      	cmp	r3, #2
 800de68:	d001      	beq.n	800de6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800de6a:	f7f3 fd19 	bl	80018a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800de74:	7bfa      	ldrb	r2, [r7, #15]
 800de76:	4611      	mov	r1, r2
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fb fe8f 	bl	8009b9c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800de84:	4618      	mov	r0, r3
 800de86:	f7fb fe3b 	bl	8009b00 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800de8a:	bf00      	nop
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
	...

0800de94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fb fe8a 	bl	8009bbc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	7a5b      	ldrb	r3, [r3, #9]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d005      	beq.n	800debc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800deb0:	4b04      	ldr	r3, [pc, #16]	@ (800dec4 <HAL_PCD_SuspendCallback+0x30>)
 800deb2:	691b      	ldr	r3, [r3, #16]
 800deb4:	4a03      	ldr	r2, [pc, #12]	@ (800dec4 <HAL_PCD_SuspendCallback+0x30>)
 800deb6:	f043 0306 	orr.w	r3, r3, #6
 800deba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800debc:	bf00      	nop
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	e000ed00 	.word	0xe000ed00

0800dec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	7a5b      	ldrb	r3, [r3, #9]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d007      	beq.n	800dee8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ded8:	4b08      	ldr	r3, [pc, #32]	@ (800defc <HAL_PCD_ResumeCallback+0x34>)
 800deda:	691b      	ldr	r3, [r3, #16]
 800dedc:	4a07      	ldr	r2, [pc, #28]	@ (800defc <HAL_PCD_ResumeCallback+0x34>)
 800dede:	f023 0306 	bic.w	r3, r3, #6
 800dee2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dee4:	f000 f9f8 	bl	800e2d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800deee:	4618      	mov	r0, r3
 800def0:	f7fb fe7a 	bl	8009be8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800def4:	bf00      	nop
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	e000ed00 	.word	0xe000ed00

0800df00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800df08:	4a2b      	ldr	r2, [pc, #172]	@ (800dfb8 <USBD_LL_Init+0xb8>)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	4a29      	ldr	r2, [pc, #164]	@ (800dfb8 <USBD_LL_Init+0xb8>)
 800df14:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800df18:	4b27      	ldr	r3, [pc, #156]	@ (800dfb8 <USBD_LL_Init+0xb8>)
 800df1a:	4a28      	ldr	r2, [pc, #160]	@ (800dfbc <USBD_LL_Init+0xbc>)
 800df1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800df1e:	4b26      	ldr	r3, [pc, #152]	@ (800dfb8 <USBD_LL_Init+0xb8>)
 800df20:	2208      	movs	r2, #8
 800df22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800df24:	4b24      	ldr	r3, [pc, #144]	@ (800dfb8 <USBD_LL_Init+0xb8>)
 800df26:	2202      	movs	r2, #2
 800df28:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800df2a:	4b23      	ldr	r3, [pc, #140]	@ (800dfb8 <USBD_LL_Init+0xb8>)
 800df2c:	2202      	movs	r2, #2
 800df2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800df30:	4b21      	ldr	r3, [pc, #132]	@ (800dfb8 <USBD_LL_Init+0xb8>)
 800df32:	2200      	movs	r2, #0
 800df34:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800df36:	4b20      	ldr	r3, [pc, #128]	@ (800dfb8 <USBD_LL_Init+0xb8>)
 800df38:	2200      	movs	r2, #0
 800df3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800df3c:	4b1e      	ldr	r3, [pc, #120]	@ (800dfb8 <USBD_LL_Init+0xb8>)
 800df3e:	2200      	movs	r2, #0
 800df40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800df42:	4b1d      	ldr	r3, [pc, #116]	@ (800dfb8 <USBD_LL_Init+0xb8>)
 800df44:	2200      	movs	r2, #0
 800df46:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800df48:	481b      	ldr	r0, [pc, #108]	@ (800dfb8 <USBD_LL_Init+0xb8>)
 800df4a:	f7f5 fb36 	bl	80035ba <HAL_PCD_Init>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d001      	beq.n	800df58 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800df54:	f7f3 fca4 	bl	80018a0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800df5e:	2318      	movs	r3, #24
 800df60:	2200      	movs	r2, #0
 800df62:	2100      	movs	r1, #0
 800df64:	f7f6 ffbd 	bl	8004ee2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800df6e:	2358      	movs	r3, #88	@ 0x58
 800df70:	2200      	movs	r2, #0
 800df72:	2180      	movs	r1, #128	@ 0x80
 800df74:	f7f6 ffb5 	bl	8004ee2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800df7e:	23c0      	movs	r3, #192	@ 0xc0
 800df80:	2200      	movs	r2, #0
 800df82:	2181      	movs	r1, #129	@ 0x81
 800df84:	f7f6 ffad 	bl	8004ee2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800df8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800df92:	2200      	movs	r2, #0
 800df94:	2101      	movs	r1, #1
 800df96:	f7f6 ffa4 	bl	8004ee2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dfa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	2182      	movs	r1, #130	@ 0x82
 800dfa8:	f7f6 ff9b 	bl	8004ee2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	200071a0 	.word	0x200071a0
 800dfbc:	40005c00 	.word	0x40005c00

0800dfc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7f5 fbbd 	bl	8003756 <HAL_PCD_Start>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f000 f97e 	bl	800e2e4 <USBD_Get_USB_Status>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfec:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b084      	sub	sp, #16
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
 800dffe:	4608      	mov	r0, r1
 800e000:	4611      	mov	r1, r2
 800e002:	461a      	mov	r2, r3
 800e004:	4603      	mov	r3, r0
 800e006:	70fb      	strb	r3, [r7, #3]
 800e008:	460b      	mov	r3, r1
 800e00a:	70bb      	strb	r3, [r7, #2]
 800e00c:	4613      	mov	r3, r2
 800e00e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e010:	2300      	movs	r3, #0
 800e012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e014:	2300      	movs	r3, #0
 800e016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e01e:	78bb      	ldrb	r3, [r7, #2]
 800e020:	883a      	ldrh	r2, [r7, #0]
 800e022:	78f9      	ldrb	r1, [r7, #3]
 800e024:	f7f5 fd04 	bl	8003a30 <HAL_PCD_EP_Open>
 800e028:	4603      	mov	r3, r0
 800e02a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e02c:	7bfb      	ldrb	r3, [r7, #15]
 800e02e:	4618      	mov	r0, r3
 800e030:	f000 f958 	bl	800e2e4 <USBD_Get_USB_Status>
 800e034:	4603      	mov	r3, r0
 800e036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e038:	7bbb      	ldrb	r3, [r7, #14]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b084      	sub	sp, #16
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	460b      	mov	r3, r1
 800e04c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e052:	2300      	movs	r3, #0
 800e054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e05c:	78fa      	ldrb	r2, [r7, #3]
 800e05e:	4611      	mov	r1, r2
 800e060:	4618      	mov	r0, r3
 800e062:	f7f5 fd44 	bl	8003aee <HAL_PCD_EP_Close>
 800e066:	4603      	mov	r3, r0
 800e068:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e06a:	7bfb      	ldrb	r3, [r7, #15]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f000 f939 	bl	800e2e4 <USBD_Get_USB_Status>
 800e072:	4603      	mov	r3, r0
 800e074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e076:	7bbb      	ldrb	r3, [r7, #14]
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	460b      	mov	r3, r1
 800e08a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e08c:	2300      	movs	r3, #0
 800e08e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e090:	2300      	movs	r3, #0
 800e092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e09a:	78fa      	ldrb	r2, [r7, #3]
 800e09c:	4611      	mov	r1, r2
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7f5 fded 	bl	8003c7e <HAL_PCD_EP_SetStall>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0a8:	7bfb      	ldrb	r3, [r7, #15]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f000 f91a 	bl	800e2e4 <USBD_Get_USB_Status>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b084      	sub	sp, #16
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e0d8:	78fa      	ldrb	r2, [r7, #3]
 800e0da:	4611      	mov	r1, r2
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7f5 fe20 	bl	8003d22 <HAL_PCD_EP_ClrStall>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0e6:	7bfb      	ldrb	r3, [r7, #15]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f000 f8fb 	bl	800e2e4 <USBD_Get_USB_Status>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	460b      	mov	r3, r1
 800e106:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e10e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e114:	2b00      	cmp	r3, #0
 800e116:	da0b      	bge.n	800e130 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e118:	78fb      	ldrb	r3, [r7, #3]
 800e11a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e11e:	68f9      	ldr	r1, [r7, #12]
 800e120:	4613      	mov	r3, r2
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	4413      	add	r3, r2
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	440b      	add	r3, r1
 800e12a:	3312      	adds	r3, #18
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	e00b      	b.n	800e148 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e130:	78fb      	ldrb	r3, [r7, #3]
 800e132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e136:	68f9      	ldr	r1, [r7, #12]
 800e138:	4613      	mov	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4413      	add	r3, r2
 800e13e:	00db      	lsls	r3, r3, #3
 800e140:	440b      	add	r3, r1
 800e142:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e146:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3714      	adds	r7, #20
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	460b      	mov	r3, r1
 800e15e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e160:	2300      	movs	r3, #0
 800e162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e164:	2300      	movs	r3, #0
 800e166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e16e:	78fa      	ldrb	r2, [r7, #3]
 800e170:	4611      	mov	r1, r2
 800e172:	4618      	mov	r0, r3
 800e174:	f7f5 fc38 	bl	80039e8 <HAL_PCD_SetAddress>
 800e178:	4603      	mov	r3, r0
 800e17a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e17c:	7bfb      	ldrb	r3, [r7, #15]
 800e17e:	4618      	mov	r0, r3
 800e180:	f000 f8b0 	bl	800e2e4 <USBD_Get_USB_Status>
 800e184:	4603      	mov	r3, r0
 800e186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e188:	7bbb      	ldrb	r3, [r7, #14]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b086      	sub	sp, #24
 800e196:	af00      	add	r7, sp, #0
 800e198:	60f8      	str	r0, [r7, #12]
 800e19a:	607a      	str	r2, [r7, #4]
 800e19c:	603b      	str	r3, [r7, #0]
 800e19e:	460b      	mov	r3, r1
 800e1a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e1b0:	7af9      	ldrb	r1, [r7, #11]
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	f7f5 fd2b 	bl	8003c10 <HAL_PCD_EP_Transmit>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1be:	7dfb      	ldrb	r3, [r7, #23]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f000 f88f 	bl	800e2e4 <USBD_Get_USB_Status>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e1ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	607a      	str	r2, [r7, #4]
 800e1de:	603b      	str	r3, [r7, #0]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e1f2:	7af9      	ldrb	r1, [r7, #11]
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	f7f5 fcc1 	bl	8003b7e <HAL_PCD_EP_Receive>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e200:	7dfb      	ldrb	r3, [r7, #23]
 800e202:	4618      	mov	r0, r3
 800e204:	f000 f86e 	bl	800e2e4 <USBD_Get_USB_Status>
 800e208:	4603      	mov	r3, r0
 800e20a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e20c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3718      	adds	r7, #24
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b082      	sub	sp, #8
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	460b      	mov	r3, r1
 800e220:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e228:	78fa      	ldrb	r2, [r7, #3]
 800e22a:	4611      	mov	r1, r2
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7f5 fcd7 	bl	8003be0 <HAL_PCD_EP_GetRxCount>
 800e232:	4603      	mov	r3, r0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	460b      	mov	r3, r1
 800e246:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e248:	78fb      	ldrb	r3, [r7, #3]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d002      	beq.n	800e254 <HAL_PCDEx_LPM_Callback+0x18>
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d013      	beq.n	800e27a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e252:	e023      	b.n	800e29c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	7a5b      	ldrb	r3, [r3, #9]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d007      	beq.n	800e26c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e25c:	f000 f83c 	bl	800e2d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e260:	4b10      	ldr	r3, [pc, #64]	@ (800e2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e262:	691b      	ldr	r3, [r3, #16]
 800e264:	4a0f      	ldr	r2, [pc, #60]	@ (800e2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e266:	f023 0306 	bic.w	r3, r3, #6
 800e26a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e272:	4618      	mov	r0, r3
 800e274:	f7fb fcb8 	bl	8009be8 <USBD_LL_Resume>
    break;
 800e278:	e010      	b.n	800e29c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e280:	4618      	mov	r0, r3
 800e282:	f7fb fc9b 	bl	8009bbc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	7a5b      	ldrb	r3, [r3, #9]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d005      	beq.n	800e29a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e28e:	4b05      	ldr	r3, [pc, #20]	@ (800e2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e290:	691b      	ldr	r3, [r3, #16]
 800e292:	4a04      	ldr	r2, [pc, #16]	@ (800e2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e294:	f043 0306 	orr.w	r3, r3, #6
 800e298:	6113      	str	r3, [r2, #16]
    break;
 800e29a:	bf00      	nop
}
 800e29c:	bf00      	nop
 800e29e:	3708      	adds	r7, #8
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	e000ed00 	.word	0xe000ed00

0800e2a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e2b0:	4b03      	ldr	r3, [pc, #12]	@ (800e2c0 <USBD_static_malloc+0x18>)
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	370c      	adds	r7, #12
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	2000747c 	.word	0x2000747c

0800e2c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]

}
 800e2cc:	bf00      	nop
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e2dc:	f7f3 f8c6 	bl	800146c <SystemClock_Config>
}
 800e2e0:	bf00      	nop
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b085      	sub	sp, #20
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e2f2:	79fb      	ldrb	r3, [r7, #7]
 800e2f4:	2b03      	cmp	r3, #3
 800e2f6:	d817      	bhi.n	800e328 <USBD_Get_USB_Status+0x44>
 800e2f8:	a201      	add	r2, pc, #4	@ (adr r2, 800e300 <USBD_Get_USB_Status+0x1c>)
 800e2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2fe:	bf00      	nop
 800e300:	0800e311 	.word	0x0800e311
 800e304:	0800e317 	.word	0x0800e317
 800e308:	0800e31d 	.word	0x0800e31d
 800e30c:	0800e323 	.word	0x0800e323
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	73fb      	strb	r3, [r7, #15]
    break;
 800e314:	e00b      	b.n	800e32e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e316:	2303      	movs	r3, #3
 800e318:	73fb      	strb	r3, [r7, #15]
    break;
 800e31a:	e008      	b.n	800e32e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e31c:	2301      	movs	r3, #1
 800e31e:	73fb      	strb	r3, [r7, #15]
    break;
 800e320:	e005      	b.n	800e32e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e322:	2303      	movs	r3, #3
 800e324:	73fb      	strb	r3, [r7, #15]
    break;
 800e326:	e002      	b.n	800e32e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e328:	2303      	movs	r3, #3
 800e32a:	73fb      	strb	r3, [r7, #15]
    break;
 800e32c:	bf00      	nop
  }
  return usb_status;
 800e32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3714      	adds	r7, #20
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <__cvt>:
 800e33c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e340:	ec57 6b10 	vmov	r6, r7, d0
 800e344:	2f00      	cmp	r7, #0
 800e346:	460c      	mov	r4, r1
 800e348:	4619      	mov	r1, r3
 800e34a:	463b      	mov	r3, r7
 800e34c:	bfbb      	ittet	lt
 800e34e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e352:	461f      	movlt	r7, r3
 800e354:	2300      	movge	r3, #0
 800e356:	232d      	movlt	r3, #45	@ 0x2d
 800e358:	700b      	strb	r3, [r1, #0]
 800e35a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e35c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e360:	4691      	mov	r9, r2
 800e362:	f023 0820 	bic.w	r8, r3, #32
 800e366:	bfbc      	itt	lt
 800e368:	4632      	movlt	r2, r6
 800e36a:	4616      	movlt	r6, r2
 800e36c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e370:	d005      	beq.n	800e37e <__cvt+0x42>
 800e372:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e376:	d100      	bne.n	800e37a <__cvt+0x3e>
 800e378:	3401      	adds	r4, #1
 800e37a:	2102      	movs	r1, #2
 800e37c:	e000      	b.n	800e380 <__cvt+0x44>
 800e37e:	2103      	movs	r1, #3
 800e380:	ab03      	add	r3, sp, #12
 800e382:	9301      	str	r3, [sp, #4]
 800e384:	ab02      	add	r3, sp, #8
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	ec47 6b10 	vmov	d0, r6, r7
 800e38c:	4653      	mov	r3, sl
 800e38e:	4622      	mov	r2, r4
 800e390:	f000 fe36 	bl	800f000 <_dtoa_r>
 800e394:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e398:	4605      	mov	r5, r0
 800e39a:	d119      	bne.n	800e3d0 <__cvt+0x94>
 800e39c:	f019 0f01 	tst.w	r9, #1
 800e3a0:	d00e      	beq.n	800e3c0 <__cvt+0x84>
 800e3a2:	eb00 0904 	add.w	r9, r0, r4
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	f7f2 fbb3 	bl	8000b18 <__aeabi_dcmpeq>
 800e3b2:	b108      	cbz	r0, 800e3b8 <__cvt+0x7c>
 800e3b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3b8:	2230      	movs	r2, #48	@ 0x30
 800e3ba:	9b03      	ldr	r3, [sp, #12]
 800e3bc:	454b      	cmp	r3, r9
 800e3be:	d31e      	bcc.n	800e3fe <__cvt+0xc2>
 800e3c0:	9b03      	ldr	r3, [sp, #12]
 800e3c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3c4:	1b5b      	subs	r3, r3, r5
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	6013      	str	r3, [r2, #0]
 800e3ca:	b004      	add	sp, #16
 800e3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e3d4:	eb00 0904 	add.w	r9, r0, r4
 800e3d8:	d1e5      	bne.n	800e3a6 <__cvt+0x6a>
 800e3da:	7803      	ldrb	r3, [r0, #0]
 800e3dc:	2b30      	cmp	r3, #48	@ 0x30
 800e3de:	d10a      	bne.n	800e3f6 <__cvt+0xba>
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	4639      	mov	r1, r7
 800e3e8:	f7f2 fb96 	bl	8000b18 <__aeabi_dcmpeq>
 800e3ec:	b918      	cbnz	r0, 800e3f6 <__cvt+0xba>
 800e3ee:	f1c4 0401 	rsb	r4, r4, #1
 800e3f2:	f8ca 4000 	str.w	r4, [sl]
 800e3f6:	f8da 3000 	ldr.w	r3, [sl]
 800e3fa:	4499      	add	r9, r3
 800e3fc:	e7d3      	b.n	800e3a6 <__cvt+0x6a>
 800e3fe:	1c59      	adds	r1, r3, #1
 800e400:	9103      	str	r1, [sp, #12]
 800e402:	701a      	strb	r2, [r3, #0]
 800e404:	e7d9      	b.n	800e3ba <__cvt+0x7e>

0800e406 <__exponent>:
 800e406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e408:	2900      	cmp	r1, #0
 800e40a:	bfba      	itte	lt
 800e40c:	4249      	neglt	r1, r1
 800e40e:	232d      	movlt	r3, #45	@ 0x2d
 800e410:	232b      	movge	r3, #43	@ 0x2b
 800e412:	2909      	cmp	r1, #9
 800e414:	7002      	strb	r2, [r0, #0]
 800e416:	7043      	strb	r3, [r0, #1]
 800e418:	dd29      	ble.n	800e46e <__exponent+0x68>
 800e41a:	f10d 0307 	add.w	r3, sp, #7
 800e41e:	461d      	mov	r5, r3
 800e420:	270a      	movs	r7, #10
 800e422:	461a      	mov	r2, r3
 800e424:	fbb1 f6f7 	udiv	r6, r1, r7
 800e428:	fb07 1416 	mls	r4, r7, r6, r1
 800e42c:	3430      	adds	r4, #48	@ 0x30
 800e42e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e432:	460c      	mov	r4, r1
 800e434:	2c63      	cmp	r4, #99	@ 0x63
 800e436:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e43a:	4631      	mov	r1, r6
 800e43c:	dcf1      	bgt.n	800e422 <__exponent+0x1c>
 800e43e:	3130      	adds	r1, #48	@ 0x30
 800e440:	1e94      	subs	r4, r2, #2
 800e442:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e446:	1c41      	adds	r1, r0, #1
 800e448:	4623      	mov	r3, r4
 800e44a:	42ab      	cmp	r3, r5
 800e44c:	d30a      	bcc.n	800e464 <__exponent+0x5e>
 800e44e:	f10d 0309 	add.w	r3, sp, #9
 800e452:	1a9b      	subs	r3, r3, r2
 800e454:	42ac      	cmp	r4, r5
 800e456:	bf88      	it	hi
 800e458:	2300      	movhi	r3, #0
 800e45a:	3302      	adds	r3, #2
 800e45c:	4403      	add	r3, r0
 800e45e:	1a18      	subs	r0, r3, r0
 800e460:	b003      	add	sp, #12
 800e462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e464:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e468:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e46c:	e7ed      	b.n	800e44a <__exponent+0x44>
 800e46e:	2330      	movs	r3, #48	@ 0x30
 800e470:	3130      	adds	r1, #48	@ 0x30
 800e472:	7083      	strb	r3, [r0, #2]
 800e474:	70c1      	strb	r1, [r0, #3]
 800e476:	1d03      	adds	r3, r0, #4
 800e478:	e7f1      	b.n	800e45e <__exponent+0x58>
	...

0800e47c <_printf_float>:
 800e47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e480:	b08d      	sub	sp, #52	@ 0x34
 800e482:	460c      	mov	r4, r1
 800e484:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e488:	4616      	mov	r6, r2
 800e48a:	461f      	mov	r7, r3
 800e48c:	4605      	mov	r5, r0
 800e48e:	f000 fc97 	bl	800edc0 <_localeconv_r>
 800e492:	6803      	ldr	r3, [r0, #0]
 800e494:	9304      	str	r3, [sp, #16]
 800e496:	4618      	mov	r0, r3
 800e498:	f7f1 ff12 	bl	80002c0 <strlen>
 800e49c:	2300      	movs	r3, #0
 800e49e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4a0:	f8d8 3000 	ldr.w	r3, [r8]
 800e4a4:	9005      	str	r0, [sp, #20]
 800e4a6:	3307      	adds	r3, #7
 800e4a8:	f023 0307 	bic.w	r3, r3, #7
 800e4ac:	f103 0208 	add.w	r2, r3, #8
 800e4b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e4b4:	f8d4 b000 	ldr.w	fp, [r4]
 800e4b8:	f8c8 2000 	str.w	r2, [r8]
 800e4bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e4c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e4c4:	9307      	str	r3, [sp, #28]
 800e4c6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e4ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4d2:	4b9c      	ldr	r3, [pc, #624]	@ (800e744 <_printf_float+0x2c8>)
 800e4d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e4d8:	f7f2 fb50 	bl	8000b7c <__aeabi_dcmpun>
 800e4dc:	bb70      	cbnz	r0, 800e53c <_printf_float+0xc0>
 800e4de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4e2:	4b98      	ldr	r3, [pc, #608]	@ (800e744 <_printf_float+0x2c8>)
 800e4e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e4e8:	f7f2 fb2a 	bl	8000b40 <__aeabi_dcmple>
 800e4ec:	bb30      	cbnz	r0, 800e53c <_printf_float+0xc0>
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	4640      	mov	r0, r8
 800e4f4:	4649      	mov	r1, r9
 800e4f6:	f7f2 fb19 	bl	8000b2c <__aeabi_dcmplt>
 800e4fa:	b110      	cbz	r0, 800e502 <_printf_float+0x86>
 800e4fc:	232d      	movs	r3, #45	@ 0x2d
 800e4fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e502:	4a91      	ldr	r2, [pc, #580]	@ (800e748 <_printf_float+0x2cc>)
 800e504:	4b91      	ldr	r3, [pc, #580]	@ (800e74c <_printf_float+0x2d0>)
 800e506:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e50a:	bf94      	ite	ls
 800e50c:	4690      	movls	r8, r2
 800e50e:	4698      	movhi	r8, r3
 800e510:	2303      	movs	r3, #3
 800e512:	6123      	str	r3, [r4, #16]
 800e514:	f02b 0304 	bic.w	r3, fp, #4
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	f04f 0900 	mov.w	r9, #0
 800e51e:	9700      	str	r7, [sp, #0]
 800e520:	4633      	mov	r3, r6
 800e522:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e524:	4621      	mov	r1, r4
 800e526:	4628      	mov	r0, r5
 800e528:	f000 f9d2 	bl	800e8d0 <_printf_common>
 800e52c:	3001      	adds	r0, #1
 800e52e:	f040 808d 	bne.w	800e64c <_printf_float+0x1d0>
 800e532:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e536:	b00d      	add	sp, #52	@ 0x34
 800e538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e53c:	4642      	mov	r2, r8
 800e53e:	464b      	mov	r3, r9
 800e540:	4640      	mov	r0, r8
 800e542:	4649      	mov	r1, r9
 800e544:	f7f2 fb1a 	bl	8000b7c <__aeabi_dcmpun>
 800e548:	b140      	cbz	r0, 800e55c <_printf_float+0xe0>
 800e54a:	464b      	mov	r3, r9
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	bfbc      	itt	lt
 800e550:	232d      	movlt	r3, #45	@ 0x2d
 800e552:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e556:	4a7e      	ldr	r2, [pc, #504]	@ (800e750 <_printf_float+0x2d4>)
 800e558:	4b7e      	ldr	r3, [pc, #504]	@ (800e754 <_printf_float+0x2d8>)
 800e55a:	e7d4      	b.n	800e506 <_printf_float+0x8a>
 800e55c:	6863      	ldr	r3, [r4, #4]
 800e55e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e562:	9206      	str	r2, [sp, #24]
 800e564:	1c5a      	adds	r2, r3, #1
 800e566:	d13b      	bne.n	800e5e0 <_printf_float+0x164>
 800e568:	2306      	movs	r3, #6
 800e56a:	6063      	str	r3, [r4, #4]
 800e56c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e570:	2300      	movs	r3, #0
 800e572:	6022      	str	r2, [r4, #0]
 800e574:	9303      	str	r3, [sp, #12]
 800e576:	ab0a      	add	r3, sp, #40	@ 0x28
 800e578:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e57c:	ab09      	add	r3, sp, #36	@ 0x24
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	6861      	ldr	r1, [r4, #4]
 800e582:	ec49 8b10 	vmov	d0, r8, r9
 800e586:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e58a:	4628      	mov	r0, r5
 800e58c:	f7ff fed6 	bl	800e33c <__cvt>
 800e590:	9b06      	ldr	r3, [sp, #24]
 800e592:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e594:	2b47      	cmp	r3, #71	@ 0x47
 800e596:	4680      	mov	r8, r0
 800e598:	d129      	bne.n	800e5ee <_printf_float+0x172>
 800e59a:	1cc8      	adds	r0, r1, #3
 800e59c:	db02      	blt.n	800e5a4 <_printf_float+0x128>
 800e59e:	6863      	ldr	r3, [r4, #4]
 800e5a0:	4299      	cmp	r1, r3
 800e5a2:	dd41      	ble.n	800e628 <_printf_float+0x1ac>
 800e5a4:	f1aa 0a02 	sub.w	sl, sl, #2
 800e5a8:	fa5f fa8a 	uxtb.w	sl, sl
 800e5ac:	3901      	subs	r1, #1
 800e5ae:	4652      	mov	r2, sl
 800e5b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e5b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e5b6:	f7ff ff26 	bl	800e406 <__exponent>
 800e5ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5bc:	1813      	adds	r3, r2, r0
 800e5be:	2a01      	cmp	r2, #1
 800e5c0:	4681      	mov	r9, r0
 800e5c2:	6123      	str	r3, [r4, #16]
 800e5c4:	dc02      	bgt.n	800e5cc <_printf_float+0x150>
 800e5c6:	6822      	ldr	r2, [r4, #0]
 800e5c8:	07d2      	lsls	r2, r2, #31
 800e5ca:	d501      	bpl.n	800e5d0 <_printf_float+0x154>
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	6123      	str	r3, [r4, #16]
 800e5d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d0a2      	beq.n	800e51e <_printf_float+0xa2>
 800e5d8:	232d      	movs	r3, #45	@ 0x2d
 800e5da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5de:	e79e      	b.n	800e51e <_printf_float+0xa2>
 800e5e0:	9a06      	ldr	r2, [sp, #24]
 800e5e2:	2a47      	cmp	r2, #71	@ 0x47
 800e5e4:	d1c2      	bne.n	800e56c <_printf_float+0xf0>
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1c0      	bne.n	800e56c <_printf_float+0xf0>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e7bd      	b.n	800e56a <_printf_float+0xee>
 800e5ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e5f2:	d9db      	bls.n	800e5ac <_printf_float+0x130>
 800e5f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e5f8:	d118      	bne.n	800e62c <_printf_float+0x1b0>
 800e5fa:	2900      	cmp	r1, #0
 800e5fc:	6863      	ldr	r3, [r4, #4]
 800e5fe:	dd0b      	ble.n	800e618 <_printf_float+0x19c>
 800e600:	6121      	str	r1, [r4, #16]
 800e602:	b913      	cbnz	r3, 800e60a <_printf_float+0x18e>
 800e604:	6822      	ldr	r2, [r4, #0]
 800e606:	07d0      	lsls	r0, r2, #31
 800e608:	d502      	bpl.n	800e610 <_printf_float+0x194>
 800e60a:	3301      	adds	r3, #1
 800e60c:	440b      	add	r3, r1
 800e60e:	6123      	str	r3, [r4, #16]
 800e610:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e612:	f04f 0900 	mov.w	r9, #0
 800e616:	e7db      	b.n	800e5d0 <_printf_float+0x154>
 800e618:	b913      	cbnz	r3, 800e620 <_printf_float+0x1a4>
 800e61a:	6822      	ldr	r2, [r4, #0]
 800e61c:	07d2      	lsls	r2, r2, #31
 800e61e:	d501      	bpl.n	800e624 <_printf_float+0x1a8>
 800e620:	3302      	adds	r3, #2
 800e622:	e7f4      	b.n	800e60e <_printf_float+0x192>
 800e624:	2301      	movs	r3, #1
 800e626:	e7f2      	b.n	800e60e <_printf_float+0x192>
 800e628:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e62c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e62e:	4299      	cmp	r1, r3
 800e630:	db05      	blt.n	800e63e <_printf_float+0x1c2>
 800e632:	6823      	ldr	r3, [r4, #0]
 800e634:	6121      	str	r1, [r4, #16]
 800e636:	07d8      	lsls	r0, r3, #31
 800e638:	d5ea      	bpl.n	800e610 <_printf_float+0x194>
 800e63a:	1c4b      	adds	r3, r1, #1
 800e63c:	e7e7      	b.n	800e60e <_printf_float+0x192>
 800e63e:	2900      	cmp	r1, #0
 800e640:	bfd4      	ite	le
 800e642:	f1c1 0202 	rsble	r2, r1, #2
 800e646:	2201      	movgt	r2, #1
 800e648:	4413      	add	r3, r2
 800e64a:	e7e0      	b.n	800e60e <_printf_float+0x192>
 800e64c:	6823      	ldr	r3, [r4, #0]
 800e64e:	055a      	lsls	r2, r3, #21
 800e650:	d407      	bmi.n	800e662 <_printf_float+0x1e6>
 800e652:	6923      	ldr	r3, [r4, #16]
 800e654:	4642      	mov	r2, r8
 800e656:	4631      	mov	r1, r6
 800e658:	4628      	mov	r0, r5
 800e65a:	47b8      	blx	r7
 800e65c:	3001      	adds	r0, #1
 800e65e:	d12b      	bne.n	800e6b8 <_printf_float+0x23c>
 800e660:	e767      	b.n	800e532 <_printf_float+0xb6>
 800e662:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e666:	f240 80dd 	bls.w	800e824 <_printf_float+0x3a8>
 800e66a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e66e:	2200      	movs	r2, #0
 800e670:	2300      	movs	r3, #0
 800e672:	f7f2 fa51 	bl	8000b18 <__aeabi_dcmpeq>
 800e676:	2800      	cmp	r0, #0
 800e678:	d033      	beq.n	800e6e2 <_printf_float+0x266>
 800e67a:	4a37      	ldr	r2, [pc, #220]	@ (800e758 <_printf_float+0x2dc>)
 800e67c:	2301      	movs	r3, #1
 800e67e:	4631      	mov	r1, r6
 800e680:	4628      	mov	r0, r5
 800e682:	47b8      	blx	r7
 800e684:	3001      	adds	r0, #1
 800e686:	f43f af54 	beq.w	800e532 <_printf_float+0xb6>
 800e68a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e68e:	4543      	cmp	r3, r8
 800e690:	db02      	blt.n	800e698 <_printf_float+0x21c>
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	07d8      	lsls	r0, r3, #31
 800e696:	d50f      	bpl.n	800e6b8 <_printf_float+0x23c>
 800e698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e69c:	4631      	mov	r1, r6
 800e69e:	4628      	mov	r0, r5
 800e6a0:	47b8      	blx	r7
 800e6a2:	3001      	adds	r0, #1
 800e6a4:	f43f af45 	beq.w	800e532 <_printf_float+0xb6>
 800e6a8:	f04f 0900 	mov.w	r9, #0
 800e6ac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e6b0:	f104 0a1a 	add.w	sl, r4, #26
 800e6b4:	45c8      	cmp	r8, r9
 800e6b6:	dc09      	bgt.n	800e6cc <_printf_float+0x250>
 800e6b8:	6823      	ldr	r3, [r4, #0]
 800e6ba:	079b      	lsls	r3, r3, #30
 800e6bc:	f100 8103 	bmi.w	800e8c6 <_printf_float+0x44a>
 800e6c0:	68e0      	ldr	r0, [r4, #12]
 800e6c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6c4:	4298      	cmp	r0, r3
 800e6c6:	bfb8      	it	lt
 800e6c8:	4618      	movlt	r0, r3
 800e6ca:	e734      	b.n	800e536 <_printf_float+0xba>
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	4652      	mov	r2, sl
 800e6d0:	4631      	mov	r1, r6
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	47b8      	blx	r7
 800e6d6:	3001      	adds	r0, #1
 800e6d8:	f43f af2b 	beq.w	800e532 <_printf_float+0xb6>
 800e6dc:	f109 0901 	add.w	r9, r9, #1
 800e6e0:	e7e8      	b.n	800e6b4 <_printf_float+0x238>
 800e6e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	dc39      	bgt.n	800e75c <_printf_float+0x2e0>
 800e6e8:	4a1b      	ldr	r2, [pc, #108]	@ (800e758 <_printf_float+0x2dc>)
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	4631      	mov	r1, r6
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	47b8      	blx	r7
 800e6f2:	3001      	adds	r0, #1
 800e6f4:	f43f af1d 	beq.w	800e532 <_printf_float+0xb6>
 800e6f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e6fc:	ea59 0303 	orrs.w	r3, r9, r3
 800e700:	d102      	bne.n	800e708 <_printf_float+0x28c>
 800e702:	6823      	ldr	r3, [r4, #0]
 800e704:	07d9      	lsls	r1, r3, #31
 800e706:	d5d7      	bpl.n	800e6b8 <_printf_float+0x23c>
 800e708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e70c:	4631      	mov	r1, r6
 800e70e:	4628      	mov	r0, r5
 800e710:	47b8      	blx	r7
 800e712:	3001      	adds	r0, #1
 800e714:	f43f af0d 	beq.w	800e532 <_printf_float+0xb6>
 800e718:	f04f 0a00 	mov.w	sl, #0
 800e71c:	f104 0b1a 	add.w	fp, r4, #26
 800e720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e722:	425b      	negs	r3, r3
 800e724:	4553      	cmp	r3, sl
 800e726:	dc01      	bgt.n	800e72c <_printf_float+0x2b0>
 800e728:	464b      	mov	r3, r9
 800e72a:	e793      	b.n	800e654 <_printf_float+0x1d8>
 800e72c:	2301      	movs	r3, #1
 800e72e:	465a      	mov	r2, fp
 800e730:	4631      	mov	r1, r6
 800e732:	4628      	mov	r0, r5
 800e734:	47b8      	blx	r7
 800e736:	3001      	adds	r0, #1
 800e738:	f43f aefb 	beq.w	800e532 <_printf_float+0xb6>
 800e73c:	f10a 0a01 	add.w	sl, sl, #1
 800e740:	e7ee      	b.n	800e720 <_printf_float+0x2a4>
 800e742:	bf00      	nop
 800e744:	7fefffff 	.word	0x7fefffff
 800e748:	080113ec 	.word	0x080113ec
 800e74c:	080113f0 	.word	0x080113f0
 800e750:	080113f4 	.word	0x080113f4
 800e754:	080113f8 	.word	0x080113f8
 800e758:	080113fc 	.word	0x080113fc
 800e75c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e75e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e762:	4553      	cmp	r3, sl
 800e764:	bfa8      	it	ge
 800e766:	4653      	movge	r3, sl
 800e768:	2b00      	cmp	r3, #0
 800e76a:	4699      	mov	r9, r3
 800e76c:	dc36      	bgt.n	800e7dc <_printf_float+0x360>
 800e76e:	f04f 0b00 	mov.w	fp, #0
 800e772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e776:	f104 021a 	add.w	r2, r4, #26
 800e77a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e77c:	9306      	str	r3, [sp, #24]
 800e77e:	eba3 0309 	sub.w	r3, r3, r9
 800e782:	455b      	cmp	r3, fp
 800e784:	dc31      	bgt.n	800e7ea <_printf_float+0x36e>
 800e786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e788:	459a      	cmp	sl, r3
 800e78a:	dc3a      	bgt.n	800e802 <_printf_float+0x386>
 800e78c:	6823      	ldr	r3, [r4, #0]
 800e78e:	07da      	lsls	r2, r3, #31
 800e790:	d437      	bmi.n	800e802 <_printf_float+0x386>
 800e792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e794:	ebaa 0903 	sub.w	r9, sl, r3
 800e798:	9b06      	ldr	r3, [sp, #24]
 800e79a:	ebaa 0303 	sub.w	r3, sl, r3
 800e79e:	4599      	cmp	r9, r3
 800e7a0:	bfa8      	it	ge
 800e7a2:	4699      	movge	r9, r3
 800e7a4:	f1b9 0f00 	cmp.w	r9, #0
 800e7a8:	dc33      	bgt.n	800e812 <_printf_float+0x396>
 800e7aa:	f04f 0800 	mov.w	r8, #0
 800e7ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7b2:	f104 0b1a 	add.w	fp, r4, #26
 800e7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7b8:	ebaa 0303 	sub.w	r3, sl, r3
 800e7bc:	eba3 0309 	sub.w	r3, r3, r9
 800e7c0:	4543      	cmp	r3, r8
 800e7c2:	f77f af79 	ble.w	800e6b8 <_printf_float+0x23c>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	465a      	mov	r2, fp
 800e7ca:	4631      	mov	r1, r6
 800e7cc:	4628      	mov	r0, r5
 800e7ce:	47b8      	blx	r7
 800e7d0:	3001      	adds	r0, #1
 800e7d2:	f43f aeae 	beq.w	800e532 <_printf_float+0xb6>
 800e7d6:	f108 0801 	add.w	r8, r8, #1
 800e7da:	e7ec      	b.n	800e7b6 <_printf_float+0x33a>
 800e7dc:	4642      	mov	r2, r8
 800e7de:	4631      	mov	r1, r6
 800e7e0:	4628      	mov	r0, r5
 800e7e2:	47b8      	blx	r7
 800e7e4:	3001      	adds	r0, #1
 800e7e6:	d1c2      	bne.n	800e76e <_printf_float+0x2f2>
 800e7e8:	e6a3      	b.n	800e532 <_printf_float+0xb6>
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	4631      	mov	r1, r6
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	9206      	str	r2, [sp, #24]
 800e7f2:	47b8      	blx	r7
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	f43f ae9c 	beq.w	800e532 <_printf_float+0xb6>
 800e7fa:	9a06      	ldr	r2, [sp, #24]
 800e7fc:	f10b 0b01 	add.w	fp, fp, #1
 800e800:	e7bb      	b.n	800e77a <_printf_float+0x2fe>
 800e802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e806:	4631      	mov	r1, r6
 800e808:	4628      	mov	r0, r5
 800e80a:	47b8      	blx	r7
 800e80c:	3001      	adds	r0, #1
 800e80e:	d1c0      	bne.n	800e792 <_printf_float+0x316>
 800e810:	e68f      	b.n	800e532 <_printf_float+0xb6>
 800e812:	9a06      	ldr	r2, [sp, #24]
 800e814:	464b      	mov	r3, r9
 800e816:	4442      	add	r2, r8
 800e818:	4631      	mov	r1, r6
 800e81a:	4628      	mov	r0, r5
 800e81c:	47b8      	blx	r7
 800e81e:	3001      	adds	r0, #1
 800e820:	d1c3      	bne.n	800e7aa <_printf_float+0x32e>
 800e822:	e686      	b.n	800e532 <_printf_float+0xb6>
 800e824:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e828:	f1ba 0f01 	cmp.w	sl, #1
 800e82c:	dc01      	bgt.n	800e832 <_printf_float+0x3b6>
 800e82e:	07db      	lsls	r3, r3, #31
 800e830:	d536      	bpl.n	800e8a0 <_printf_float+0x424>
 800e832:	2301      	movs	r3, #1
 800e834:	4642      	mov	r2, r8
 800e836:	4631      	mov	r1, r6
 800e838:	4628      	mov	r0, r5
 800e83a:	47b8      	blx	r7
 800e83c:	3001      	adds	r0, #1
 800e83e:	f43f ae78 	beq.w	800e532 <_printf_float+0xb6>
 800e842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e846:	4631      	mov	r1, r6
 800e848:	4628      	mov	r0, r5
 800e84a:	47b8      	blx	r7
 800e84c:	3001      	adds	r0, #1
 800e84e:	f43f ae70 	beq.w	800e532 <_printf_float+0xb6>
 800e852:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e856:	2200      	movs	r2, #0
 800e858:	2300      	movs	r3, #0
 800e85a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e85e:	f7f2 f95b 	bl	8000b18 <__aeabi_dcmpeq>
 800e862:	b9c0      	cbnz	r0, 800e896 <_printf_float+0x41a>
 800e864:	4653      	mov	r3, sl
 800e866:	f108 0201 	add.w	r2, r8, #1
 800e86a:	4631      	mov	r1, r6
 800e86c:	4628      	mov	r0, r5
 800e86e:	47b8      	blx	r7
 800e870:	3001      	adds	r0, #1
 800e872:	d10c      	bne.n	800e88e <_printf_float+0x412>
 800e874:	e65d      	b.n	800e532 <_printf_float+0xb6>
 800e876:	2301      	movs	r3, #1
 800e878:	465a      	mov	r2, fp
 800e87a:	4631      	mov	r1, r6
 800e87c:	4628      	mov	r0, r5
 800e87e:	47b8      	blx	r7
 800e880:	3001      	adds	r0, #1
 800e882:	f43f ae56 	beq.w	800e532 <_printf_float+0xb6>
 800e886:	f108 0801 	add.w	r8, r8, #1
 800e88a:	45d0      	cmp	r8, sl
 800e88c:	dbf3      	blt.n	800e876 <_printf_float+0x3fa>
 800e88e:	464b      	mov	r3, r9
 800e890:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e894:	e6df      	b.n	800e656 <_printf_float+0x1da>
 800e896:	f04f 0800 	mov.w	r8, #0
 800e89a:	f104 0b1a 	add.w	fp, r4, #26
 800e89e:	e7f4      	b.n	800e88a <_printf_float+0x40e>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	4642      	mov	r2, r8
 800e8a4:	e7e1      	b.n	800e86a <_printf_float+0x3ee>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	464a      	mov	r2, r9
 800e8aa:	4631      	mov	r1, r6
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	47b8      	blx	r7
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	f43f ae3e 	beq.w	800e532 <_printf_float+0xb6>
 800e8b6:	f108 0801 	add.w	r8, r8, #1
 800e8ba:	68e3      	ldr	r3, [r4, #12]
 800e8bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e8be:	1a5b      	subs	r3, r3, r1
 800e8c0:	4543      	cmp	r3, r8
 800e8c2:	dcf0      	bgt.n	800e8a6 <_printf_float+0x42a>
 800e8c4:	e6fc      	b.n	800e6c0 <_printf_float+0x244>
 800e8c6:	f04f 0800 	mov.w	r8, #0
 800e8ca:	f104 0919 	add.w	r9, r4, #25
 800e8ce:	e7f4      	b.n	800e8ba <_printf_float+0x43e>

0800e8d0 <_printf_common>:
 800e8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d4:	4616      	mov	r6, r2
 800e8d6:	4698      	mov	r8, r3
 800e8d8:	688a      	ldr	r2, [r1, #8]
 800e8da:	690b      	ldr	r3, [r1, #16]
 800e8dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	bfb8      	it	lt
 800e8e4:	4613      	movlt	r3, r2
 800e8e6:	6033      	str	r3, [r6, #0]
 800e8e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e8ec:	4607      	mov	r7, r0
 800e8ee:	460c      	mov	r4, r1
 800e8f0:	b10a      	cbz	r2, 800e8f6 <_printf_common+0x26>
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	6033      	str	r3, [r6, #0]
 800e8f6:	6823      	ldr	r3, [r4, #0]
 800e8f8:	0699      	lsls	r1, r3, #26
 800e8fa:	bf42      	ittt	mi
 800e8fc:	6833      	ldrmi	r3, [r6, #0]
 800e8fe:	3302      	addmi	r3, #2
 800e900:	6033      	strmi	r3, [r6, #0]
 800e902:	6825      	ldr	r5, [r4, #0]
 800e904:	f015 0506 	ands.w	r5, r5, #6
 800e908:	d106      	bne.n	800e918 <_printf_common+0x48>
 800e90a:	f104 0a19 	add.w	sl, r4, #25
 800e90e:	68e3      	ldr	r3, [r4, #12]
 800e910:	6832      	ldr	r2, [r6, #0]
 800e912:	1a9b      	subs	r3, r3, r2
 800e914:	42ab      	cmp	r3, r5
 800e916:	dc26      	bgt.n	800e966 <_printf_common+0x96>
 800e918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e91c:	6822      	ldr	r2, [r4, #0]
 800e91e:	3b00      	subs	r3, #0
 800e920:	bf18      	it	ne
 800e922:	2301      	movne	r3, #1
 800e924:	0692      	lsls	r2, r2, #26
 800e926:	d42b      	bmi.n	800e980 <_printf_common+0xb0>
 800e928:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e92c:	4641      	mov	r1, r8
 800e92e:	4638      	mov	r0, r7
 800e930:	47c8      	blx	r9
 800e932:	3001      	adds	r0, #1
 800e934:	d01e      	beq.n	800e974 <_printf_common+0xa4>
 800e936:	6823      	ldr	r3, [r4, #0]
 800e938:	6922      	ldr	r2, [r4, #16]
 800e93a:	f003 0306 	and.w	r3, r3, #6
 800e93e:	2b04      	cmp	r3, #4
 800e940:	bf02      	ittt	eq
 800e942:	68e5      	ldreq	r5, [r4, #12]
 800e944:	6833      	ldreq	r3, [r6, #0]
 800e946:	1aed      	subeq	r5, r5, r3
 800e948:	68a3      	ldr	r3, [r4, #8]
 800e94a:	bf0c      	ite	eq
 800e94c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e950:	2500      	movne	r5, #0
 800e952:	4293      	cmp	r3, r2
 800e954:	bfc4      	itt	gt
 800e956:	1a9b      	subgt	r3, r3, r2
 800e958:	18ed      	addgt	r5, r5, r3
 800e95a:	2600      	movs	r6, #0
 800e95c:	341a      	adds	r4, #26
 800e95e:	42b5      	cmp	r5, r6
 800e960:	d11a      	bne.n	800e998 <_printf_common+0xc8>
 800e962:	2000      	movs	r0, #0
 800e964:	e008      	b.n	800e978 <_printf_common+0xa8>
 800e966:	2301      	movs	r3, #1
 800e968:	4652      	mov	r2, sl
 800e96a:	4641      	mov	r1, r8
 800e96c:	4638      	mov	r0, r7
 800e96e:	47c8      	blx	r9
 800e970:	3001      	adds	r0, #1
 800e972:	d103      	bne.n	800e97c <_printf_common+0xac>
 800e974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e97c:	3501      	adds	r5, #1
 800e97e:	e7c6      	b.n	800e90e <_printf_common+0x3e>
 800e980:	18e1      	adds	r1, r4, r3
 800e982:	1c5a      	adds	r2, r3, #1
 800e984:	2030      	movs	r0, #48	@ 0x30
 800e986:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e98a:	4422      	add	r2, r4
 800e98c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e990:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e994:	3302      	adds	r3, #2
 800e996:	e7c7      	b.n	800e928 <_printf_common+0x58>
 800e998:	2301      	movs	r3, #1
 800e99a:	4622      	mov	r2, r4
 800e99c:	4641      	mov	r1, r8
 800e99e:	4638      	mov	r0, r7
 800e9a0:	47c8      	blx	r9
 800e9a2:	3001      	adds	r0, #1
 800e9a4:	d0e6      	beq.n	800e974 <_printf_common+0xa4>
 800e9a6:	3601      	adds	r6, #1
 800e9a8:	e7d9      	b.n	800e95e <_printf_common+0x8e>
	...

0800e9ac <_printf_i>:
 800e9ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b0:	7e0f      	ldrb	r7, [r1, #24]
 800e9b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e9b4:	2f78      	cmp	r7, #120	@ 0x78
 800e9b6:	4691      	mov	r9, r2
 800e9b8:	4680      	mov	r8, r0
 800e9ba:	460c      	mov	r4, r1
 800e9bc:	469a      	mov	sl, r3
 800e9be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9c2:	d807      	bhi.n	800e9d4 <_printf_i+0x28>
 800e9c4:	2f62      	cmp	r7, #98	@ 0x62
 800e9c6:	d80a      	bhi.n	800e9de <_printf_i+0x32>
 800e9c8:	2f00      	cmp	r7, #0
 800e9ca:	f000 80d2 	beq.w	800eb72 <_printf_i+0x1c6>
 800e9ce:	2f58      	cmp	r7, #88	@ 0x58
 800e9d0:	f000 80b9 	beq.w	800eb46 <_printf_i+0x19a>
 800e9d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9dc:	e03a      	b.n	800ea54 <_printf_i+0xa8>
 800e9de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9e2:	2b15      	cmp	r3, #21
 800e9e4:	d8f6      	bhi.n	800e9d4 <_printf_i+0x28>
 800e9e6:	a101      	add	r1, pc, #4	@ (adr r1, 800e9ec <_printf_i+0x40>)
 800e9e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9ec:	0800ea45 	.word	0x0800ea45
 800e9f0:	0800ea59 	.word	0x0800ea59
 800e9f4:	0800e9d5 	.word	0x0800e9d5
 800e9f8:	0800e9d5 	.word	0x0800e9d5
 800e9fc:	0800e9d5 	.word	0x0800e9d5
 800ea00:	0800e9d5 	.word	0x0800e9d5
 800ea04:	0800ea59 	.word	0x0800ea59
 800ea08:	0800e9d5 	.word	0x0800e9d5
 800ea0c:	0800e9d5 	.word	0x0800e9d5
 800ea10:	0800e9d5 	.word	0x0800e9d5
 800ea14:	0800e9d5 	.word	0x0800e9d5
 800ea18:	0800eb59 	.word	0x0800eb59
 800ea1c:	0800ea83 	.word	0x0800ea83
 800ea20:	0800eb13 	.word	0x0800eb13
 800ea24:	0800e9d5 	.word	0x0800e9d5
 800ea28:	0800e9d5 	.word	0x0800e9d5
 800ea2c:	0800eb7b 	.word	0x0800eb7b
 800ea30:	0800e9d5 	.word	0x0800e9d5
 800ea34:	0800ea83 	.word	0x0800ea83
 800ea38:	0800e9d5 	.word	0x0800e9d5
 800ea3c:	0800e9d5 	.word	0x0800e9d5
 800ea40:	0800eb1b 	.word	0x0800eb1b
 800ea44:	6833      	ldr	r3, [r6, #0]
 800ea46:	1d1a      	adds	r2, r3, #4
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	6032      	str	r2, [r6, #0]
 800ea4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea54:	2301      	movs	r3, #1
 800ea56:	e09d      	b.n	800eb94 <_printf_i+0x1e8>
 800ea58:	6833      	ldr	r3, [r6, #0]
 800ea5a:	6820      	ldr	r0, [r4, #0]
 800ea5c:	1d19      	adds	r1, r3, #4
 800ea5e:	6031      	str	r1, [r6, #0]
 800ea60:	0606      	lsls	r6, r0, #24
 800ea62:	d501      	bpl.n	800ea68 <_printf_i+0xbc>
 800ea64:	681d      	ldr	r5, [r3, #0]
 800ea66:	e003      	b.n	800ea70 <_printf_i+0xc4>
 800ea68:	0645      	lsls	r5, r0, #25
 800ea6a:	d5fb      	bpl.n	800ea64 <_printf_i+0xb8>
 800ea6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea70:	2d00      	cmp	r5, #0
 800ea72:	da03      	bge.n	800ea7c <_printf_i+0xd0>
 800ea74:	232d      	movs	r3, #45	@ 0x2d
 800ea76:	426d      	negs	r5, r5
 800ea78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea7c:	4859      	ldr	r0, [pc, #356]	@ (800ebe4 <_printf_i+0x238>)
 800ea7e:	230a      	movs	r3, #10
 800ea80:	e011      	b.n	800eaa6 <_printf_i+0xfa>
 800ea82:	6821      	ldr	r1, [r4, #0]
 800ea84:	6833      	ldr	r3, [r6, #0]
 800ea86:	0608      	lsls	r0, r1, #24
 800ea88:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea8c:	d402      	bmi.n	800ea94 <_printf_i+0xe8>
 800ea8e:	0649      	lsls	r1, r1, #25
 800ea90:	bf48      	it	mi
 800ea92:	b2ad      	uxthmi	r5, r5
 800ea94:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea96:	4853      	ldr	r0, [pc, #332]	@ (800ebe4 <_printf_i+0x238>)
 800ea98:	6033      	str	r3, [r6, #0]
 800ea9a:	bf14      	ite	ne
 800ea9c:	230a      	movne	r3, #10
 800ea9e:	2308      	moveq	r3, #8
 800eaa0:	2100      	movs	r1, #0
 800eaa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eaa6:	6866      	ldr	r6, [r4, #4]
 800eaa8:	60a6      	str	r6, [r4, #8]
 800eaaa:	2e00      	cmp	r6, #0
 800eaac:	bfa2      	ittt	ge
 800eaae:	6821      	ldrge	r1, [r4, #0]
 800eab0:	f021 0104 	bicge.w	r1, r1, #4
 800eab4:	6021      	strge	r1, [r4, #0]
 800eab6:	b90d      	cbnz	r5, 800eabc <_printf_i+0x110>
 800eab8:	2e00      	cmp	r6, #0
 800eaba:	d04b      	beq.n	800eb54 <_printf_i+0x1a8>
 800eabc:	4616      	mov	r6, r2
 800eabe:	fbb5 f1f3 	udiv	r1, r5, r3
 800eac2:	fb03 5711 	mls	r7, r3, r1, r5
 800eac6:	5dc7      	ldrb	r7, [r0, r7]
 800eac8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eacc:	462f      	mov	r7, r5
 800eace:	42bb      	cmp	r3, r7
 800ead0:	460d      	mov	r5, r1
 800ead2:	d9f4      	bls.n	800eabe <_printf_i+0x112>
 800ead4:	2b08      	cmp	r3, #8
 800ead6:	d10b      	bne.n	800eaf0 <_printf_i+0x144>
 800ead8:	6823      	ldr	r3, [r4, #0]
 800eada:	07df      	lsls	r7, r3, #31
 800eadc:	d508      	bpl.n	800eaf0 <_printf_i+0x144>
 800eade:	6923      	ldr	r3, [r4, #16]
 800eae0:	6861      	ldr	r1, [r4, #4]
 800eae2:	4299      	cmp	r1, r3
 800eae4:	bfde      	ittt	le
 800eae6:	2330      	movle	r3, #48	@ 0x30
 800eae8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eaec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800eaf0:	1b92      	subs	r2, r2, r6
 800eaf2:	6122      	str	r2, [r4, #16]
 800eaf4:	f8cd a000 	str.w	sl, [sp]
 800eaf8:	464b      	mov	r3, r9
 800eafa:	aa03      	add	r2, sp, #12
 800eafc:	4621      	mov	r1, r4
 800eafe:	4640      	mov	r0, r8
 800eb00:	f7ff fee6 	bl	800e8d0 <_printf_common>
 800eb04:	3001      	adds	r0, #1
 800eb06:	d14a      	bne.n	800eb9e <_printf_i+0x1f2>
 800eb08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb0c:	b004      	add	sp, #16
 800eb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb12:	6823      	ldr	r3, [r4, #0]
 800eb14:	f043 0320 	orr.w	r3, r3, #32
 800eb18:	6023      	str	r3, [r4, #0]
 800eb1a:	4833      	ldr	r0, [pc, #204]	@ (800ebe8 <_printf_i+0x23c>)
 800eb1c:	2778      	movs	r7, #120	@ 0x78
 800eb1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb22:	6823      	ldr	r3, [r4, #0]
 800eb24:	6831      	ldr	r1, [r6, #0]
 800eb26:	061f      	lsls	r7, r3, #24
 800eb28:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb2c:	d402      	bmi.n	800eb34 <_printf_i+0x188>
 800eb2e:	065f      	lsls	r7, r3, #25
 800eb30:	bf48      	it	mi
 800eb32:	b2ad      	uxthmi	r5, r5
 800eb34:	6031      	str	r1, [r6, #0]
 800eb36:	07d9      	lsls	r1, r3, #31
 800eb38:	bf44      	itt	mi
 800eb3a:	f043 0320 	orrmi.w	r3, r3, #32
 800eb3e:	6023      	strmi	r3, [r4, #0]
 800eb40:	b11d      	cbz	r5, 800eb4a <_printf_i+0x19e>
 800eb42:	2310      	movs	r3, #16
 800eb44:	e7ac      	b.n	800eaa0 <_printf_i+0xf4>
 800eb46:	4827      	ldr	r0, [pc, #156]	@ (800ebe4 <_printf_i+0x238>)
 800eb48:	e7e9      	b.n	800eb1e <_printf_i+0x172>
 800eb4a:	6823      	ldr	r3, [r4, #0]
 800eb4c:	f023 0320 	bic.w	r3, r3, #32
 800eb50:	6023      	str	r3, [r4, #0]
 800eb52:	e7f6      	b.n	800eb42 <_printf_i+0x196>
 800eb54:	4616      	mov	r6, r2
 800eb56:	e7bd      	b.n	800ead4 <_printf_i+0x128>
 800eb58:	6833      	ldr	r3, [r6, #0]
 800eb5a:	6825      	ldr	r5, [r4, #0]
 800eb5c:	6961      	ldr	r1, [r4, #20]
 800eb5e:	1d18      	adds	r0, r3, #4
 800eb60:	6030      	str	r0, [r6, #0]
 800eb62:	062e      	lsls	r6, r5, #24
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	d501      	bpl.n	800eb6c <_printf_i+0x1c0>
 800eb68:	6019      	str	r1, [r3, #0]
 800eb6a:	e002      	b.n	800eb72 <_printf_i+0x1c6>
 800eb6c:	0668      	lsls	r0, r5, #25
 800eb6e:	d5fb      	bpl.n	800eb68 <_printf_i+0x1bc>
 800eb70:	8019      	strh	r1, [r3, #0]
 800eb72:	2300      	movs	r3, #0
 800eb74:	6123      	str	r3, [r4, #16]
 800eb76:	4616      	mov	r6, r2
 800eb78:	e7bc      	b.n	800eaf4 <_printf_i+0x148>
 800eb7a:	6833      	ldr	r3, [r6, #0]
 800eb7c:	1d1a      	adds	r2, r3, #4
 800eb7e:	6032      	str	r2, [r6, #0]
 800eb80:	681e      	ldr	r6, [r3, #0]
 800eb82:	6862      	ldr	r2, [r4, #4]
 800eb84:	2100      	movs	r1, #0
 800eb86:	4630      	mov	r0, r6
 800eb88:	f7f1 fb4a 	bl	8000220 <memchr>
 800eb8c:	b108      	cbz	r0, 800eb92 <_printf_i+0x1e6>
 800eb8e:	1b80      	subs	r0, r0, r6
 800eb90:	6060      	str	r0, [r4, #4]
 800eb92:	6863      	ldr	r3, [r4, #4]
 800eb94:	6123      	str	r3, [r4, #16]
 800eb96:	2300      	movs	r3, #0
 800eb98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb9c:	e7aa      	b.n	800eaf4 <_printf_i+0x148>
 800eb9e:	6923      	ldr	r3, [r4, #16]
 800eba0:	4632      	mov	r2, r6
 800eba2:	4649      	mov	r1, r9
 800eba4:	4640      	mov	r0, r8
 800eba6:	47d0      	blx	sl
 800eba8:	3001      	adds	r0, #1
 800ebaa:	d0ad      	beq.n	800eb08 <_printf_i+0x15c>
 800ebac:	6823      	ldr	r3, [r4, #0]
 800ebae:	079b      	lsls	r3, r3, #30
 800ebb0:	d413      	bmi.n	800ebda <_printf_i+0x22e>
 800ebb2:	68e0      	ldr	r0, [r4, #12]
 800ebb4:	9b03      	ldr	r3, [sp, #12]
 800ebb6:	4298      	cmp	r0, r3
 800ebb8:	bfb8      	it	lt
 800ebba:	4618      	movlt	r0, r3
 800ebbc:	e7a6      	b.n	800eb0c <_printf_i+0x160>
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	4632      	mov	r2, r6
 800ebc2:	4649      	mov	r1, r9
 800ebc4:	4640      	mov	r0, r8
 800ebc6:	47d0      	blx	sl
 800ebc8:	3001      	adds	r0, #1
 800ebca:	d09d      	beq.n	800eb08 <_printf_i+0x15c>
 800ebcc:	3501      	adds	r5, #1
 800ebce:	68e3      	ldr	r3, [r4, #12]
 800ebd0:	9903      	ldr	r1, [sp, #12]
 800ebd2:	1a5b      	subs	r3, r3, r1
 800ebd4:	42ab      	cmp	r3, r5
 800ebd6:	dcf2      	bgt.n	800ebbe <_printf_i+0x212>
 800ebd8:	e7eb      	b.n	800ebb2 <_printf_i+0x206>
 800ebda:	2500      	movs	r5, #0
 800ebdc:	f104 0619 	add.w	r6, r4, #25
 800ebe0:	e7f5      	b.n	800ebce <_printf_i+0x222>
 800ebe2:	bf00      	nop
 800ebe4:	080113fe 	.word	0x080113fe
 800ebe8:	0801140f 	.word	0x0801140f

0800ebec <std>:
 800ebec:	2300      	movs	r3, #0
 800ebee:	b510      	push	{r4, lr}
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	e9c0 3300 	strd	r3, r3, [r0]
 800ebf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebfa:	6083      	str	r3, [r0, #8]
 800ebfc:	8181      	strh	r1, [r0, #12]
 800ebfe:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec00:	81c2      	strh	r2, [r0, #14]
 800ec02:	6183      	str	r3, [r0, #24]
 800ec04:	4619      	mov	r1, r3
 800ec06:	2208      	movs	r2, #8
 800ec08:	305c      	adds	r0, #92	@ 0x5c
 800ec0a:	f000 f8d1 	bl	800edb0 <memset>
 800ec0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec44 <std+0x58>)
 800ec10:	6263      	str	r3, [r4, #36]	@ 0x24
 800ec12:	4b0d      	ldr	r3, [pc, #52]	@ (800ec48 <std+0x5c>)
 800ec14:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ec16:	4b0d      	ldr	r3, [pc, #52]	@ (800ec4c <std+0x60>)
 800ec18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ec1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ec50 <std+0x64>)
 800ec1c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ec1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec54 <std+0x68>)
 800ec20:	6224      	str	r4, [r4, #32]
 800ec22:	429c      	cmp	r4, r3
 800ec24:	d006      	beq.n	800ec34 <std+0x48>
 800ec26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ec2a:	4294      	cmp	r4, r2
 800ec2c:	d002      	beq.n	800ec34 <std+0x48>
 800ec2e:	33d0      	adds	r3, #208	@ 0xd0
 800ec30:	429c      	cmp	r4, r3
 800ec32:	d105      	bne.n	800ec40 <std+0x54>
 800ec34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ec38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec3c:	f000 b944 	b.w	800eec8 <__retarget_lock_init_recursive>
 800ec40:	bd10      	pop	{r4, pc}
 800ec42:	bf00      	nop
 800ec44:	08010895 	.word	0x08010895
 800ec48:	080108b7 	.word	0x080108b7
 800ec4c:	080108ef 	.word	0x080108ef
 800ec50:	08010913 	.word	0x08010913
 800ec54:	2000769c 	.word	0x2000769c

0800ec58 <stdio_exit_handler>:
 800ec58:	4a02      	ldr	r2, [pc, #8]	@ (800ec64 <stdio_exit_handler+0xc>)
 800ec5a:	4903      	ldr	r1, [pc, #12]	@ (800ec68 <stdio_exit_handler+0x10>)
 800ec5c:	4803      	ldr	r0, [pc, #12]	@ (800ec6c <stdio_exit_handler+0x14>)
 800ec5e:	f000 b869 	b.w	800ed34 <_fwalk_sglue>
 800ec62:	bf00      	nop
 800ec64:	20000188 	.word	0x20000188
 800ec68:	08010129 	.word	0x08010129
 800ec6c:	20000198 	.word	0x20000198

0800ec70 <cleanup_stdio>:
 800ec70:	6841      	ldr	r1, [r0, #4]
 800ec72:	4b0c      	ldr	r3, [pc, #48]	@ (800eca4 <cleanup_stdio+0x34>)
 800ec74:	4299      	cmp	r1, r3
 800ec76:	b510      	push	{r4, lr}
 800ec78:	4604      	mov	r4, r0
 800ec7a:	d001      	beq.n	800ec80 <cleanup_stdio+0x10>
 800ec7c:	f001 fa54 	bl	8010128 <_fflush_r>
 800ec80:	68a1      	ldr	r1, [r4, #8]
 800ec82:	4b09      	ldr	r3, [pc, #36]	@ (800eca8 <cleanup_stdio+0x38>)
 800ec84:	4299      	cmp	r1, r3
 800ec86:	d002      	beq.n	800ec8e <cleanup_stdio+0x1e>
 800ec88:	4620      	mov	r0, r4
 800ec8a:	f001 fa4d 	bl	8010128 <_fflush_r>
 800ec8e:	68e1      	ldr	r1, [r4, #12]
 800ec90:	4b06      	ldr	r3, [pc, #24]	@ (800ecac <cleanup_stdio+0x3c>)
 800ec92:	4299      	cmp	r1, r3
 800ec94:	d004      	beq.n	800eca0 <cleanup_stdio+0x30>
 800ec96:	4620      	mov	r0, r4
 800ec98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec9c:	f001 ba44 	b.w	8010128 <_fflush_r>
 800eca0:	bd10      	pop	{r4, pc}
 800eca2:	bf00      	nop
 800eca4:	2000769c 	.word	0x2000769c
 800eca8:	20007704 	.word	0x20007704
 800ecac:	2000776c 	.word	0x2000776c

0800ecb0 <global_stdio_init.part.0>:
 800ecb0:	b510      	push	{r4, lr}
 800ecb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ece0 <global_stdio_init.part.0+0x30>)
 800ecb4:	4c0b      	ldr	r4, [pc, #44]	@ (800ece4 <global_stdio_init.part.0+0x34>)
 800ecb6:	4a0c      	ldr	r2, [pc, #48]	@ (800ece8 <global_stdio_init.part.0+0x38>)
 800ecb8:	601a      	str	r2, [r3, #0]
 800ecba:	4620      	mov	r0, r4
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	2104      	movs	r1, #4
 800ecc0:	f7ff ff94 	bl	800ebec <std>
 800ecc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ecc8:	2201      	movs	r2, #1
 800ecca:	2109      	movs	r1, #9
 800eccc:	f7ff ff8e 	bl	800ebec <std>
 800ecd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ecd4:	2202      	movs	r2, #2
 800ecd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecda:	2112      	movs	r1, #18
 800ecdc:	f7ff bf86 	b.w	800ebec <std>
 800ece0:	200077d4 	.word	0x200077d4
 800ece4:	2000769c 	.word	0x2000769c
 800ece8:	0800ec59 	.word	0x0800ec59

0800ecec <__sfp_lock_acquire>:
 800ecec:	4801      	ldr	r0, [pc, #4]	@ (800ecf4 <__sfp_lock_acquire+0x8>)
 800ecee:	f000 b8ec 	b.w	800eeca <__retarget_lock_acquire_recursive>
 800ecf2:	bf00      	nop
 800ecf4:	200077dd 	.word	0x200077dd

0800ecf8 <__sfp_lock_release>:
 800ecf8:	4801      	ldr	r0, [pc, #4]	@ (800ed00 <__sfp_lock_release+0x8>)
 800ecfa:	f000 b8e7 	b.w	800eecc <__retarget_lock_release_recursive>
 800ecfe:	bf00      	nop
 800ed00:	200077dd 	.word	0x200077dd

0800ed04 <__sinit>:
 800ed04:	b510      	push	{r4, lr}
 800ed06:	4604      	mov	r4, r0
 800ed08:	f7ff fff0 	bl	800ecec <__sfp_lock_acquire>
 800ed0c:	6a23      	ldr	r3, [r4, #32]
 800ed0e:	b11b      	cbz	r3, 800ed18 <__sinit+0x14>
 800ed10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed14:	f7ff bff0 	b.w	800ecf8 <__sfp_lock_release>
 800ed18:	4b04      	ldr	r3, [pc, #16]	@ (800ed2c <__sinit+0x28>)
 800ed1a:	6223      	str	r3, [r4, #32]
 800ed1c:	4b04      	ldr	r3, [pc, #16]	@ (800ed30 <__sinit+0x2c>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1f5      	bne.n	800ed10 <__sinit+0xc>
 800ed24:	f7ff ffc4 	bl	800ecb0 <global_stdio_init.part.0>
 800ed28:	e7f2      	b.n	800ed10 <__sinit+0xc>
 800ed2a:	bf00      	nop
 800ed2c:	0800ec71 	.word	0x0800ec71
 800ed30:	200077d4 	.word	0x200077d4

0800ed34 <_fwalk_sglue>:
 800ed34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed38:	4607      	mov	r7, r0
 800ed3a:	4688      	mov	r8, r1
 800ed3c:	4614      	mov	r4, r2
 800ed3e:	2600      	movs	r6, #0
 800ed40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed44:	f1b9 0901 	subs.w	r9, r9, #1
 800ed48:	d505      	bpl.n	800ed56 <_fwalk_sglue+0x22>
 800ed4a:	6824      	ldr	r4, [r4, #0]
 800ed4c:	2c00      	cmp	r4, #0
 800ed4e:	d1f7      	bne.n	800ed40 <_fwalk_sglue+0xc>
 800ed50:	4630      	mov	r0, r6
 800ed52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed56:	89ab      	ldrh	r3, [r5, #12]
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d907      	bls.n	800ed6c <_fwalk_sglue+0x38>
 800ed5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed60:	3301      	adds	r3, #1
 800ed62:	d003      	beq.n	800ed6c <_fwalk_sglue+0x38>
 800ed64:	4629      	mov	r1, r5
 800ed66:	4638      	mov	r0, r7
 800ed68:	47c0      	blx	r8
 800ed6a:	4306      	orrs	r6, r0
 800ed6c:	3568      	adds	r5, #104	@ 0x68
 800ed6e:	e7e9      	b.n	800ed44 <_fwalk_sglue+0x10>

0800ed70 <_vsiprintf_r>:
 800ed70:	b500      	push	{lr}
 800ed72:	b09b      	sub	sp, #108	@ 0x6c
 800ed74:	9100      	str	r1, [sp, #0]
 800ed76:	9104      	str	r1, [sp, #16]
 800ed78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ed7c:	9105      	str	r1, [sp, #20]
 800ed7e:	9102      	str	r1, [sp, #8]
 800ed80:	4905      	ldr	r1, [pc, #20]	@ (800ed98 <_vsiprintf_r+0x28>)
 800ed82:	9103      	str	r1, [sp, #12]
 800ed84:	4669      	mov	r1, sp
 800ed86:	f000 ffa5 	bl	800fcd4 <_svfiprintf_r>
 800ed8a:	9b00      	ldr	r3, [sp, #0]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	701a      	strb	r2, [r3, #0]
 800ed90:	b01b      	add	sp, #108	@ 0x6c
 800ed92:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed96:	bf00      	nop
 800ed98:	ffff0208 	.word	0xffff0208

0800ed9c <vsiprintf>:
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	460a      	mov	r2, r1
 800eda0:	4601      	mov	r1, r0
 800eda2:	4802      	ldr	r0, [pc, #8]	@ (800edac <vsiprintf+0x10>)
 800eda4:	6800      	ldr	r0, [r0, #0]
 800eda6:	f7ff bfe3 	b.w	800ed70 <_vsiprintf_r>
 800edaa:	bf00      	nop
 800edac:	20000194 	.word	0x20000194

0800edb0 <memset>:
 800edb0:	4402      	add	r2, r0
 800edb2:	4603      	mov	r3, r0
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d100      	bne.n	800edba <memset+0xa>
 800edb8:	4770      	bx	lr
 800edba:	f803 1b01 	strb.w	r1, [r3], #1
 800edbe:	e7f9      	b.n	800edb4 <memset+0x4>

0800edc0 <_localeconv_r>:
 800edc0:	4800      	ldr	r0, [pc, #0]	@ (800edc4 <_localeconv_r+0x4>)
 800edc2:	4770      	bx	lr
 800edc4:	200002d4 	.word	0x200002d4

0800edc8 <_reclaim_reent>:
 800edc8:	4b29      	ldr	r3, [pc, #164]	@ (800ee70 <_reclaim_reent+0xa8>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4283      	cmp	r3, r0
 800edce:	b570      	push	{r4, r5, r6, lr}
 800edd0:	4604      	mov	r4, r0
 800edd2:	d04b      	beq.n	800ee6c <_reclaim_reent+0xa4>
 800edd4:	69c3      	ldr	r3, [r0, #28]
 800edd6:	b1ab      	cbz	r3, 800ee04 <_reclaim_reent+0x3c>
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	b16b      	cbz	r3, 800edf8 <_reclaim_reent+0x30>
 800eddc:	2500      	movs	r5, #0
 800edde:	69e3      	ldr	r3, [r4, #28]
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	5959      	ldr	r1, [r3, r5]
 800ede4:	2900      	cmp	r1, #0
 800ede6:	d13b      	bne.n	800ee60 <_reclaim_reent+0x98>
 800ede8:	3504      	adds	r5, #4
 800edea:	2d80      	cmp	r5, #128	@ 0x80
 800edec:	d1f7      	bne.n	800edde <_reclaim_reent+0x16>
 800edee:	69e3      	ldr	r3, [r4, #28]
 800edf0:	4620      	mov	r0, r4
 800edf2:	68d9      	ldr	r1, [r3, #12]
 800edf4:	f000 fec8 	bl	800fb88 <_free_r>
 800edf8:	69e3      	ldr	r3, [r4, #28]
 800edfa:	6819      	ldr	r1, [r3, #0]
 800edfc:	b111      	cbz	r1, 800ee04 <_reclaim_reent+0x3c>
 800edfe:	4620      	mov	r0, r4
 800ee00:	f000 fec2 	bl	800fb88 <_free_r>
 800ee04:	6961      	ldr	r1, [r4, #20]
 800ee06:	b111      	cbz	r1, 800ee0e <_reclaim_reent+0x46>
 800ee08:	4620      	mov	r0, r4
 800ee0a:	f000 febd 	bl	800fb88 <_free_r>
 800ee0e:	69e1      	ldr	r1, [r4, #28]
 800ee10:	b111      	cbz	r1, 800ee18 <_reclaim_reent+0x50>
 800ee12:	4620      	mov	r0, r4
 800ee14:	f000 feb8 	bl	800fb88 <_free_r>
 800ee18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ee1a:	b111      	cbz	r1, 800ee22 <_reclaim_reent+0x5a>
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f000 feb3 	bl	800fb88 <_free_r>
 800ee22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee24:	b111      	cbz	r1, 800ee2c <_reclaim_reent+0x64>
 800ee26:	4620      	mov	r0, r4
 800ee28:	f000 feae 	bl	800fb88 <_free_r>
 800ee2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ee2e:	b111      	cbz	r1, 800ee36 <_reclaim_reent+0x6e>
 800ee30:	4620      	mov	r0, r4
 800ee32:	f000 fea9 	bl	800fb88 <_free_r>
 800ee36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ee38:	b111      	cbz	r1, 800ee40 <_reclaim_reent+0x78>
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f000 fea4 	bl	800fb88 <_free_r>
 800ee40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ee42:	b111      	cbz	r1, 800ee4a <_reclaim_reent+0x82>
 800ee44:	4620      	mov	r0, r4
 800ee46:	f000 fe9f 	bl	800fb88 <_free_r>
 800ee4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ee4c:	b111      	cbz	r1, 800ee54 <_reclaim_reent+0x8c>
 800ee4e:	4620      	mov	r0, r4
 800ee50:	f000 fe9a 	bl	800fb88 <_free_r>
 800ee54:	6a23      	ldr	r3, [r4, #32]
 800ee56:	b14b      	cbz	r3, 800ee6c <_reclaim_reent+0xa4>
 800ee58:	4620      	mov	r0, r4
 800ee5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee5e:	4718      	bx	r3
 800ee60:	680e      	ldr	r6, [r1, #0]
 800ee62:	4620      	mov	r0, r4
 800ee64:	f000 fe90 	bl	800fb88 <_free_r>
 800ee68:	4631      	mov	r1, r6
 800ee6a:	e7bb      	b.n	800ede4 <_reclaim_reent+0x1c>
 800ee6c:	bd70      	pop	{r4, r5, r6, pc}
 800ee6e:	bf00      	nop
 800ee70:	20000194 	.word	0x20000194

0800ee74 <__errno>:
 800ee74:	4b01      	ldr	r3, [pc, #4]	@ (800ee7c <__errno+0x8>)
 800ee76:	6818      	ldr	r0, [r3, #0]
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	20000194 	.word	0x20000194

0800ee80 <__libc_init_array>:
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	4d0d      	ldr	r5, [pc, #52]	@ (800eeb8 <__libc_init_array+0x38>)
 800ee84:	4c0d      	ldr	r4, [pc, #52]	@ (800eebc <__libc_init_array+0x3c>)
 800ee86:	1b64      	subs	r4, r4, r5
 800ee88:	10a4      	asrs	r4, r4, #2
 800ee8a:	2600      	movs	r6, #0
 800ee8c:	42a6      	cmp	r6, r4
 800ee8e:	d109      	bne.n	800eea4 <__libc_init_array+0x24>
 800ee90:	4d0b      	ldr	r5, [pc, #44]	@ (800eec0 <__libc_init_array+0x40>)
 800ee92:	4c0c      	ldr	r4, [pc, #48]	@ (800eec4 <__libc_init_array+0x44>)
 800ee94:	f002 f8f0 	bl	8011078 <_init>
 800ee98:	1b64      	subs	r4, r4, r5
 800ee9a:	10a4      	asrs	r4, r4, #2
 800ee9c:	2600      	movs	r6, #0
 800ee9e:	42a6      	cmp	r6, r4
 800eea0:	d105      	bne.n	800eeae <__libc_init_array+0x2e>
 800eea2:	bd70      	pop	{r4, r5, r6, pc}
 800eea4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eea8:	4798      	blx	r3
 800eeaa:	3601      	adds	r6, #1
 800eeac:	e7ee      	b.n	800ee8c <__libc_init_array+0xc>
 800eeae:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeb2:	4798      	blx	r3
 800eeb4:	3601      	adds	r6, #1
 800eeb6:	e7f2      	b.n	800ee9e <__libc_init_array+0x1e>
 800eeb8:	08011768 	.word	0x08011768
 800eebc:	08011768 	.word	0x08011768
 800eec0:	08011768 	.word	0x08011768
 800eec4:	0801176c 	.word	0x0801176c

0800eec8 <__retarget_lock_init_recursive>:
 800eec8:	4770      	bx	lr

0800eeca <__retarget_lock_acquire_recursive>:
 800eeca:	4770      	bx	lr

0800eecc <__retarget_lock_release_recursive>:
 800eecc:	4770      	bx	lr

0800eece <memcpy>:
 800eece:	440a      	add	r2, r1
 800eed0:	4291      	cmp	r1, r2
 800eed2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800eed6:	d100      	bne.n	800eeda <memcpy+0xc>
 800eed8:	4770      	bx	lr
 800eeda:	b510      	push	{r4, lr}
 800eedc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eee4:	4291      	cmp	r1, r2
 800eee6:	d1f9      	bne.n	800eedc <memcpy+0xe>
 800eee8:	bd10      	pop	{r4, pc}

0800eeea <quorem>:
 800eeea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeee:	6903      	ldr	r3, [r0, #16]
 800eef0:	690c      	ldr	r4, [r1, #16]
 800eef2:	42a3      	cmp	r3, r4
 800eef4:	4607      	mov	r7, r0
 800eef6:	db7e      	blt.n	800eff6 <quorem+0x10c>
 800eef8:	3c01      	subs	r4, #1
 800eefa:	f101 0814 	add.w	r8, r1, #20
 800eefe:	00a3      	lsls	r3, r4, #2
 800ef00:	f100 0514 	add.w	r5, r0, #20
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef0a:	9301      	str	r3, [sp, #4]
 800ef0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef14:	3301      	adds	r3, #1
 800ef16:	429a      	cmp	r2, r3
 800ef18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef1c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef20:	d32e      	bcc.n	800ef80 <quorem+0x96>
 800ef22:	f04f 0a00 	mov.w	sl, #0
 800ef26:	46c4      	mov	ip, r8
 800ef28:	46ae      	mov	lr, r5
 800ef2a:	46d3      	mov	fp, sl
 800ef2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef30:	b298      	uxth	r0, r3
 800ef32:	fb06 a000 	mla	r0, r6, r0, sl
 800ef36:	0c02      	lsrs	r2, r0, #16
 800ef38:	0c1b      	lsrs	r3, r3, #16
 800ef3a:	fb06 2303 	mla	r3, r6, r3, r2
 800ef3e:	f8de 2000 	ldr.w	r2, [lr]
 800ef42:	b280      	uxth	r0, r0
 800ef44:	b292      	uxth	r2, r2
 800ef46:	1a12      	subs	r2, r2, r0
 800ef48:	445a      	add	r2, fp
 800ef4a:	f8de 0000 	ldr.w	r0, [lr]
 800ef4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ef58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ef5c:	b292      	uxth	r2, r2
 800ef5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ef62:	45e1      	cmp	r9, ip
 800ef64:	f84e 2b04 	str.w	r2, [lr], #4
 800ef68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ef6c:	d2de      	bcs.n	800ef2c <quorem+0x42>
 800ef6e:	9b00      	ldr	r3, [sp, #0]
 800ef70:	58eb      	ldr	r3, [r5, r3]
 800ef72:	b92b      	cbnz	r3, 800ef80 <quorem+0x96>
 800ef74:	9b01      	ldr	r3, [sp, #4]
 800ef76:	3b04      	subs	r3, #4
 800ef78:	429d      	cmp	r5, r3
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	d32f      	bcc.n	800efde <quorem+0xf4>
 800ef7e:	613c      	str	r4, [r7, #16]
 800ef80:	4638      	mov	r0, r7
 800ef82:	f001 fb7f 	bl	8010684 <__mcmp>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	db25      	blt.n	800efd6 <quorem+0xec>
 800ef8a:	4629      	mov	r1, r5
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef92:	f8d1 c000 	ldr.w	ip, [r1]
 800ef96:	fa1f fe82 	uxth.w	lr, r2
 800ef9a:	fa1f f38c 	uxth.w	r3, ip
 800ef9e:	eba3 030e 	sub.w	r3, r3, lr
 800efa2:	4403      	add	r3, r0
 800efa4:	0c12      	lsrs	r2, r2, #16
 800efa6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800efaa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800efae:	b29b      	uxth	r3, r3
 800efb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efb4:	45c1      	cmp	r9, r8
 800efb6:	f841 3b04 	str.w	r3, [r1], #4
 800efba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800efbe:	d2e6      	bcs.n	800ef8e <quorem+0xa4>
 800efc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efc8:	b922      	cbnz	r2, 800efd4 <quorem+0xea>
 800efca:	3b04      	subs	r3, #4
 800efcc:	429d      	cmp	r5, r3
 800efce:	461a      	mov	r2, r3
 800efd0:	d30b      	bcc.n	800efea <quorem+0x100>
 800efd2:	613c      	str	r4, [r7, #16]
 800efd4:	3601      	adds	r6, #1
 800efd6:	4630      	mov	r0, r6
 800efd8:	b003      	add	sp, #12
 800efda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efde:	6812      	ldr	r2, [r2, #0]
 800efe0:	3b04      	subs	r3, #4
 800efe2:	2a00      	cmp	r2, #0
 800efe4:	d1cb      	bne.n	800ef7e <quorem+0x94>
 800efe6:	3c01      	subs	r4, #1
 800efe8:	e7c6      	b.n	800ef78 <quorem+0x8e>
 800efea:	6812      	ldr	r2, [r2, #0]
 800efec:	3b04      	subs	r3, #4
 800efee:	2a00      	cmp	r2, #0
 800eff0:	d1ef      	bne.n	800efd2 <quorem+0xe8>
 800eff2:	3c01      	subs	r4, #1
 800eff4:	e7ea      	b.n	800efcc <quorem+0xe2>
 800eff6:	2000      	movs	r0, #0
 800eff8:	e7ee      	b.n	800efd8 <quorem+0xee>
 800effa:	0000      	movs	r0, r0
 800effc:	0000      	movs	r0, r0
	...

0800f000 <_dtoa_r>:
 800f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f004:	69c7      	ldr	r7, [r0, #28]
 800f006:	b099      	sub	sp, #100	@ 0x64
 800f008:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f00c:	ec55 4b10 	vmov	r4, r5, d0
 800f010:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f012:	9109      	str	r1, [sp, #36]	@ 0x24
 800f014:	4683      	mov	fp, r0
 800f016:	920e      	str	r2, [sp, #56]	@ 0x38
 800f018:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f01a:	b97f      	cbnz	r7, 800f03c <_dtoa_r+0x3c>
 800f01c:	2010      	movs	r0, #16
 800f01e:	f000 ff55 	bl	800fecc <malloc>
 800f022:	4602      	mov	r2, r0
 800f024:	f8cb 001c 	str.w	r0, [fp, #28]
 800f028:	b920      	cbnz	r0, 800f034 <_dtoa_r+0x34>
 800f02a:	4ba7      	ldr	r3, [pc, #668]	@ (800f2c8 <_dtoa_r+0x2c8>)
 800f02c:	21ef      	movs	r1, #239	@ 0xef
 800f02e:	48a7      	ldr	r0, [pc, #668]	@ (800f2cc <_dtoa_r+0x2cc>)
 800f030:	f001 fd12 	bl	8010a58 <__assert_func>
 800f034:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f038:	6007      	str	r7, [r0, #0]
 800f03a:	60c7      	str	r7, [r0, #12]
 800f03c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f040:	6819      	ldr	r1, [r3, #0]
 800f042:	b159      	cbz	r1, 800f05c <_dtoa_r+0x5c>
 800f044:	685a      	ldr	r2, [r3, #4]
 800f046:	604a      	str	r2, [r1, #4]
 800f048:	2301      	movs	r3, #1
 800f04a:	4093      	lsls	r3, r2
 800f04c:	608b      	str	r3, [r1, #8]
 800f04e:	4658      	mov	r0, fp
 800f050:	f001 f8de 	bl	8010210 <_Bfree>
 800f054:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f058:	2200      	movs	r2, #0
 800f05a:	601a      	str	r2, [r3, #0]
 800f05c:	1e2b      	subs	r3, r5, #0
 800f05e:	bfb9      	ittee	lt
 800f060:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f064:	9303      	strlt	r3, [sp, #12]
 800f066:	2300      	movge	r3, #0
 800f068:	6033      	strge	r3, [r6, #0]
 800f06a:	9f03      	ldr	r7, [sp, #12]
 800f06c:	4b98      	ldr	r3, [pc, #608]	@ (800f2d0 <_dtoa_r+0x2d0>)
 800f06e:	bfbc      	itt	lt
 800f070:	2201      	movlt	r2, #1
 800f072:	6032      	strlt	r2, [r6, #0]
 800f074:	43bb      	bics	r3, r7
 800f076:	d112      	bne.n	800f09e <_dtoa_r+0x9e>
 800f078:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f07a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f07e:	6013      	str	r3, [r2, #0]
 800f080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f084:	4323      	orrs	r3, r4
 800f086:	f000 854d 	beq.w	800fb24 <_dtoa_r+0xb24>
 800f08a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f08c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f2e4 <_dtoa_r+0x2e4>
 800f090:	2b00      	cmp	r3, #0
 800f092:	f000 854f 	beq.w	800fb34 <_dtoa_r+0xb34>
 800f096:	f10a 0303 	add.w	r3, sl, #3
 800f09a:	f000 bd49 	b.w	800fb30 <_dtoa_r+0xb30>
 800f09e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	ec51 0b17 	vmov	r0, r1, d7
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f0ae:	f7f1 fd33 	bl	8000b18 <__aeabi_dcmpeq>
 800f0b2:	4680      	mov	r8, r0
 800f0b4:	b158      	cbz	r0, 800f0ce <_dtoa_r+0xce>
 800f0b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	6013      	str	r3, [r2, #0]
 800f0bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0be:	b113      	cbz	r3, 800f0c6 <_dtoa_r+0xc6>
 800f0c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f0c2:	4b84      	ldr	r3, [pc, #528]	@ (800f2d4 <_dtoa_r+0x2d4>)
 800f0c4:	6013      	str	r3, [r2, #0]
 800f0c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f2e8 <_dtoa_r+0x2e8>
 800f0ca:	f000 bd33 	b.w	800fb34 <_dtoa_r+0xb34>
 800f0ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f0d2:	aa16      	add	r2, sp, #88	@ 0x58
 800f0d4:	a917      	add	r1, sp, #92	@ 0x5c
 800f0d6:	4658      	mov	r0, fp
 800f0d8:	f001 fb84 	bl	80107e4 <__d2b>
 800f0dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f0e0:	4681      	mov	r9, r0
 800f0e2:	2e00      	cmp	r6, #0
 800f0e4:	d077      	beq.n	800f1d6 <_dtoa_r+0x1d6>
 800f0e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f0ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f0f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f0fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f100:	4619      	mov	r1, r3
 800f102:	2200      	movs	r2, #0
 800f104:	4b74      	ldr	r3, [pc, #464]	@ (800f2d8 <_dtoa_r+0x2d8>)
 800f106:	f7f1 f8e7 	bl	80002d8 <__aeabi_dsub>
 800f10a:	a369      	add	r3, pc, #420	@ (adr r3, 800f2b0 <_dtoa_r+0x2b0>)
 800f10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f110:	f7f1 fa9a 	bl	8000648 <__aeabi_dmul>
 800f114:	a368      	add	r3, pc, #416	@ (adr r3, 800f2b8 <_dtoa_r+0x2b8>)
 800f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11a:	f7f1 f8df 	bl	80002dc <__adddf3>
 800f11e:	4604      	mov	r4, r0
 800f120:	4630      	mov	r0, r6
 800f122:	460d      	mov	r5, r1
 800f124:	f7f1 fa26 	bl	8000574 <__aeabi_i2d>
 800f128:	a365      	add	r3, pc, #404	@ (adr r3, 800f2c0 <_dtoa_r+0x2c0>)
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	f7f1 fa8b 	bl	8000648 <__aeabi_dmul>
 800f132:	4602      	mov	r2, r0
 800f134:	460b      	mov	r3, r1
 800f136:	4620      	mov	r0, r4
 800f138:	4629      	mov	r1, r5
 800f13a:	f7f1 f8cf 	bl	80002dc <__adddf3>
 800f13e:	4604      	mov	r4, r0
 800f140:	460d      	mov	r5, r1
 800f142:	f7f1 fd31 	bl	8000ba8 <__aeabi_d2iz>
 800f146:	2200      	movs	r2, #0
 800f148:	4607      	mov	r7, r0
 800f14a:	2300      	movs	r3, #0
 800f14c:	4620      	mov	r0, r4
 800f14e:	4629      	mov	r1, r5
 800f150:	f7f1 fcec 	bl	8000b2c <__aeabi_dcmplt>
 800f154:	b140      	cbz	r0, 800f168 <_dtoa_r+0x168>
 800f156:	4638      	mov	r0, r7
 800f158:	f7f1 fa0c 	bl	8000574 <__aeabi_i2d>
 800f15c:	4622      	mov	r2, r4
 800f15e:	462b      	mov	r3, r5
 800f160:	f7f1 fcda 	bl	8000b18 <__aeabi_dcmpeq>
 800f164:	b900      	cbnz	r0, 800f168 <_dtoa_r+0x168>
 800f166:	3f01      	subs	r7, #1
 800f168:	2f16      	cmp	r7, #22
 800f16a:	d851      	bhi.n	800f210 <_dtoa_r+0x210>
 800f16c:	4b5b      	ldr	r3, [pc, #364]	@ (800f2dc <_dtoa_r+0x2dc>)
 800f16e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f17a:	f7f1 fcd7 	bl	8000b2c <__aeabi_dcmplt>
 800f17e:	2800      	cmp	r0, #0
 800f180:	d048      	beq.n	800f214 <_dtoa_r+0x214>
 800f182:	3f01      	subs	r7, #1
 800f184:	2300      	movs	r3, #0
 800f186:	9312      	str	r3, [sp, #72]	@ 0x48
 800f188:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f18a:	1b9b      	subs	r3, r3, r6
 800f18c:	1e5a      	subs	r2, r3, #1
 800f18e:	bf44      	itt	mi
 800f190:	f1c3 0801 	rsbmi	r8, r3, #1
 800f194:	2300      	movmi	r3, #0
 800f196:	9208      	str	r2, [sp, #32]
 800f198:	bf54      	ite	pl
 800f19a:	f04f 0800 	movpl.w	r8, #0
 800f19e:	9308      	strmi	r3, [sp, #32]
 800f1a0:	2f00      	cmp	r7, #0
 800f1a2:	db39      	blt.n	800f218 <_dtoa_r+0x218>
 800f1a4:	9b08      	ldr	r3, [sp, #32]
 800f1a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f1a8:	443b      	add	r3, r7
 800f1aa:	9308      	str	r3, [sp, #32]
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1b2:	2b09      	cmp	r3, #9
 800f1b4:	d864      	bhi.n	800f280 <_dtoa_r+0x280>
 800f1b6:	2b05      	cmp	r3, #5
 800f1b8:	bfc4      	itt	gt
 800f1ba:	3b04      	subgt	r3, #4
 800f1bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1c0:	f1a3 0302 	sub.w	r3, r3, #2
 800f1c4:	bfcc      	ite	gt
 800f1c6:	2400      	movgt	r4, #0
 800f1c8:	2401      	movle	r4, #1
 800f1ca:	2b03      	cmp	r3, #3
 800f1cc:	d863      	bhi.n	800f296 <_dtoa_r+0x296>
 800f1ce:	e8df f003 	tbb	[pc, r3]
 800f1d2:	372a      	.short	0x372a
 800f1d4:	5535      	.short	0x5535
 800f1d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f1da:	441e      	add	r6, r3
 800f1dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f1e0:	2b20      	cmp	r3, #32
 800f1e2:	bfc1      	itttt	gt
 800f1e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f1e8:	409f      	lslgt	r7, r3
 800f1ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f1ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f1f2:	bfd6      	itet	le
 800f1f4:	f1c3 0320 	rsble	r3, r3, #32
 800f1f8:	ea47 0003 	orrgt.w	r0, r7, r3
 800f1fc:	fa04 f003 	lslle.w	r0, r4, r3
 800f200:	f7f1 f9a8 	bl	8000554 <__aeabi_ui2d>
 800f204:	2201      	movs	r2, #1
 800f206:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f20a:	3e01      	subs	r6, #1
 800f20c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f20e:	e777      	b.n	800f100 <_dtoa_r+0x100>
 800f210:	2301      	movs	r3, #1
 800f212:	e7b8      	b.n	800f186 <_dtoa_r+0x186>
 800f214:	9012      	str	r0, [sp, #72]	@ 0x48
 800f216:	e7b7      	b.n	800f188 <_dtoa_r+0x188>
 800f218:	427b      	negs	r3, r7
 800f21a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f21c:	2300      	movs	r3, #0
 800f21e:	eba8 0807 	sub.w	r8, r8, r7
 800f222:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f224:	e7c4      	b.n	800f1b0 <_dtoa_r+0x1b0>
 800f226:	2300      	movs	r3, #0
 800f228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f22a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	dc35      	bgt.n	800f29c <_dtoa_r+0x29c>
 800f230:	2301      	movs	r3, #1
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	9307      	str	r3, [sp, #28]
 800f236:	461a      	mov	r2, r3
 800f238:	920e      	str	r2, [sp, #56]	@ 0x38
 800f23a:	e00b      	b.n	800f254 <_dtoa_r+0x254>
 800f23c:	2301      	movs	r3, #1
 800f23e:	e7f3      	b.n	800f228 <_dtoa_r+0x228>
 800f240:	2300      	movs	r3, #0
 800f242:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f246:	18fb      	adds	r3, r7, r3
 800f248:	9300      	str	r3, [sp, #0]
 800f24a:	3301      	adds	r3, #1
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	9307      	str	r3, [sp, #28]
 800f250:	bfb8      	it	lt
 800f252:	2301      	movlt	r3, #1
 800f254:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f258:	2100      	movs	r1, #0
 800f25a:	2204      	movs	r2, #4
 800f25c:	f102 0514 	add.w	r5, r2, #20
 800f260:	429d      	cmp	r5, r3
 800f262:	d91f      	bls.n	800f2a4 <_dtoa_r+0x2a4>
 800f264:	6041      	str	r1, [r0, #4]
 800f266:	4658      	mov	r0, fp
 800f268:	f000 ff92 	bl	8010190 <_Balloc>
 800f26c:	4682      	mov	sl, r0
 800f26e:	2800      	cmp	r0, #0
 800f270:	d13c      	bne.n	800f2ec <_dtoa_r+0x2ec>
 800f272:	4b1b      	ldr	r3, [pc, #108]	@ (800f2e0 <_dtoa_r+0x2e0>)
 800f274:	4602      	mov	r2, r0
 800f276:	f240 11af 	movw	r1, #431	@ 0x1af
 800f27a:	e6d8      	b.n	800f02e <_dtoa_r+0x2e>
 800f27c:	2301      	movs	r3, #1
 800f27e:	e7e0      	b.n	800f242 <_dtoa_r+0x242>
 800f280:	2401      	movs	r4, #1
 800f282:	2300      	movs	r3, #0
 800f284:	9309      	str	r3, [sp, #36]	@ 0x24
 800f286:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f288:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	9307      	str	r3, [sp, #28]
 800f290:	2200      	movs	r2, #0
 800f292:	2312      	movs	r3, #18
 800f294:	e7d0      	b.n	800f238 <_dtoa_r+0x238>
 800f296:	2301      	movs	r3, #1
 800f298:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f29a:	e7f5      	b.n	800f288 <_dtoa_r+0x288>
 800f29c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	9307      	str	r3, [sp, #28]
 800f2a2:	e7d7      	b.n	800f254 <_dtoa_r+0x254>
 800f2a4:	3101      	adds	r1, #1
 800f2a6:	0052      	lsls	r2, r2, #1
 800f2a8:	e7d8      	b.n	800f25c <_dtoa_r+0x25c>
 800f2aa:	bf00      	nop
 800f2ac:	f3af 8000 	nop.w
 800f2b0:	636f4361 	.word	0x636f4361
 800f2b4:	3fd287a7 	.word	0x3fd287a7
 800f2b8:	8b60c8b3 	.word	0x8b60c8b3
 800f2bc:	3fc68a28 	.word	0x3fc68a28
 800f2c0:	509f79fb 	.word	0x509f79fb
 800f2c4:	3fd34413 	.word	0x3fd34413
 800f2c8:	0801142d 	.word	0x0801142d
 800f2cc:	08011444 	.word	0x08011444
 800f2d0:	7ff00000 	.word	0x7ff00000
 800f2d4:	080113fd 	.word	0x080113fd
 800f2d8:	3ff80000 	.word	0x3ff80000
 800f2dc:	08011550 	.word	0x08011550
 800f2e0:	0801149c 	.word	0x0801149c
 800f2e4:	08011429 	.word	0x08011429
 800f2e8:	080113fc 	.word	0x080113fc
 800f2ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f2f0:	6018      	str	r0, [r3, #0]
 800f2f2:	9b07      	ldr	r3, [sp, #28]
 800f2f4:	2b0e      	cmp	r3, #14
 800f2f6:	f200 80a4 	bhi.w	800f442 <_dtoa_r+0x442>
 800f2fa:	2c00      	cmp	r4, #0
 800f2fc:	f000 80a1 	beq.w	800f442 <_dtoa_r+0x442>
 800f300:	2f00      	cmp	r7, #0
 800f302:	dd33      	ble.n	800f36c <_dtoa_r+0x36c>
 800f304:	4bad      	ldr	r3, [pc, #692]	@ (800f5bc <_dtoa_r+0x5bc>)
 800f306:	f007 020f 	and.w	r2, r7, #15
 800f30a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f30e:	ed93 7b00 	vldr	d7, [r3]
 800f312:	05f8      	lsls	r0, r7, #23
 800f314:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f318:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f31c:	d516      	bpl.n	800f34c <_dtoa_r+0x34c>
 800f31e:	4ba8      	ldr	r3, [pc, #672]	@ (800f5c0 <_dtoa_r+0x5c0>)
 800f320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f328:	f7f1 fab8 	bl	800089c <__aeabi_ddiv>
 800f32c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f330:	f004 040f 	and.w	r4, r4, #15
 800f334:	2603      	movs	r6, #3
 800f336:	4da2      	ldr	r5, [pc, #648]	@ (800f5c0 <_dtoa_r+0x5c0>)
 800f338:	b954      	cbnz	r4, 800f350 <_dtoa_r+0x350>
 800f33a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f342:	f7f1 faab 	bl	800089c <__aeabi_ddiv>
 800f346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f34a:	e028      	b.n	800f39e <_dtoa_r+0x39e>
 800f34c:	2602      	movs	r6, #2
 800f34e:	e7f2      	b.n	800f336 <_dtoa_r+0x336>
 800f350:	07e1      	lsls	r1, r4, #31
 800f352:	d508      	bpl.n	800f366 <_dtoa_r+0x366>
 800f354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f358:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f35c:	f7f1 f974 	bl	8000648 <__aeabi_dmul>
 800f360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f364:	3601      	adds	r6, #1
 800f366:	1064      	asrs	r4, r4, #1
 800f368:	3508      	adds	r5, #8
 800f36a:	e7e5      	b.n	800f338 <_dtoa_r+0x338>
 800f36c:	f000 80d2 	beq.w	800f514 <_dtoa_r+0x514>
 800f370:	427c      	negs	r4, r7
 800f372:	4b92      	ldr	r3, [pc, #584]	@ (800f5bc <_dtoa_r+0x5bc>)
 800f374:	4d92      	ldr	r5, [pc, #584]	@ (800f5c0 <_dtoa_r+0x5c0>)
 800f376:	f004 020f 	and.w	r2, r4, #15
 800f37a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f386:	f7f1 f95f 	bl	8000648 <__aeabi_dmul>
 800f38a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f38e:	1124      	asrs	r4, r4, #4
 800f390:	2300      	movs	r3, #0
 800f392:	2602      	movs	r6, #2
 800f394:	2c00      	cmp	r4, #0
 800f396:	f040 80b2 	bne.w	800f4fe <_dtoa_r+0x4fe>
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d1d3      	bne.n	800f346 <_dtoa_r+0x346>
 800f39e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f3a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f000 80b7 	beq.w	800f518 <_dtoa_r+0x518>
 800f3aa:	4b86      	ldr	r3, [pc, #536]	@ (800f5c4 <_dtoa_r+0x5c4>)
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	4629      	mov	r1, r5
 800f3b2:	f7f1 fbbb 	bl	8000b2c <__aeabi_dcmplt>
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	f000 80ae 	beq.w	800f518 <_dtoa_r+0x518>
 800f3bc:	9b07      	ldr	r3, [sp, #28]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f000 80aa 	beq.w	800f518 <_dtoa_r+0x518>
 800f3c4:	9b00      	ldr	r3, [sp, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	dd37      	ble.n	800f43a <_dtoa_r+0x43a>
 800f3ca:	1e7b      	subs	r3, r7, #1
 800f3cc:	9304      	str	r3, [sp, #16]
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	4b7d      	ldr	r3, [pc, #500]	@ (800f5c8 <_dtoa_r+0x5c8>)
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	4629      	mov	r1, r5
 800f3d6:	f7f1 f937 	bl	8000648 <__aeabi_dmul>
 800f3da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3de:	9c00      	ldr	r4, [sp, #0]
 800f3e0:	3601      	adds	r6, #1
 800f3e2:	4630      	mov	r0, r6
 800f3e4:	f7f1 f8c6 	bl	8000574 <__aeabi_i2d>
 800f3e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3ec:	f7f1 f92c 	bl	8000648 <__aeabi_dmul>
 800f3f0:	4b76      	ldr	r3, [pc, #472]	@ (800f5cc <_dtoa_r+0x5cc>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f7f0 ff72 	bl	80002dc <__adddf3>
 800f3f8:	4605      	mov	r5, r0
 800f3fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f3fe:	2c00      	cmp	r4, #0
 800f400:	f040 808d 	bne.w	800f51e <_dtoa_r+0x51e>
 800f404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f408:	4b71      	ldr	r3, [pc, #452]	@ (800f5d0 <_dtoa_r+0x5d0>)
 800f40a:	2200      	movs	r2, #0
 800f40c:	f7f0 ff64 	bl	80002d8 <__aeabi_dsub>
 800f410:	4602      	mov	r2, r0
 800f412:	460b      	mov	r3, r1
 800f414:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f418:	462a      	mov	r2, r5
 800f41a:	4633      	mov	r3, r6
 800f41c:	f7f1 fba4 	bl	8000b68 <__aeabi_dcmpgt>
 800f420:	2800      	cmp	r0, #0
 800f422:	f040 828b 	bne.w	800f93c <_dtoa_r+0x93c>
 800f426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f42a:	462a      	mov	r2, r5
 800f42c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f430:	f7f1 fb7c 	bl	8000b2c <__aeabi_dcmplt>
 800f434:	2800      	cmp	r0, #0
 800f436:	f040 8128 	bne.w	800f68a <_dtoa_r+0x68a>
 800f43a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f43e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f442:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f444:	2b00      	cmp	r3, #0
 800f446:	f2c0 815a 	blt.w	800f6fe <_dtoa_r+0x6fe>
 800f44a:	2f0e      	cmp	r7, #14
 800f44c:	f300 8157 	bgt.w	800f6fe <_dtoa_r+0x6fe>
 800f450:	4b5a      	ldr	r3, [pc, #360]	@ (800f5bc <_dtoa_r+0x5bc>)
 800f452:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f456:	ed93 7b00 	vldr	d7, [r3]
 800f45a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	ed8d 7b00 	vstr	d7, [sp]
 800f462:	da03      	bge.n	800f46c <_dtoa_r+0x46c>
 800f464:	9b07      	ldr	r3, [sp, #28]
 800f466:	2b00      	cmp	r3, #0
 800f468:	f340 8101 	ble.w	800f66e <_dtoa_r+0x66e>
 800f46c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f470:	4656      	mov	r6, sl
 800f472:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f476:	4620      	mov	r0, r4
 800f478:	4629      	mov	r1, r5
 800f47a:	f7f1 fa0f 	bl	800089c <__aeabi_ddiv>
 800f47e:	f7f1 fb93 	bl	8000ba8 <__aeabi_d2iz>
 800f482:	4680      	mov	r8, r0
 800f484:	f7f1 f876 	bl	8000574 <__aeabi_i2d>
 800f488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f48c:	f7f1 f8dc 	bl	8000648 <__aeabi_dmul>
 800f490:	4602      	mov	r2, r0
 800f492:	460b      	mov	r3, r1
 800f494:	4620      	mov	r0, r4
 800f496:	4629      	mov	r1, r5
 800f498:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f49c:	f7f0 ff1c 	bl	80002d8 <__aeabi_dsub>
 800f4a0:	f806 4b01 	strb.w	r4, [r6], #1
 800f4a4:	9d07      	ldr	r5, [sp, #28]
 800f4a6:	eba6 040a 	sub.w	r4, r6, sl
 800f4aa:	42a5      	cmp	r5, r4
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	f040 8117 	bne.w	800f6e2 <_dtoa_r+0x6e2>
 800f4b4:	f7f0 ff12 	bl	80002dc <__adddf3>
 800f4b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4bc:	4604      	mov	r4, r0
 800f4be:	460d      	mov	r5, r1
 800f4c0:	f7f1 fb52 	bl	8000b68 <__aeabi_dcmpgt>
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	f040 80f9 	bne.w	800f6bc <_dtoa_r+0x6bc>
 800f4ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	f7f1 fb21 	bl	8000b18 <__aeabi_dcmpeq>
 800f4d6:	b118      	cbz	r0, 800f4e0 <_dtoa_r+0x4e0>
 800f4d8:	f018 0f01 	tst.w	r8, #1
 800f4dc:	f040 80ee 	bne.w	800f6bc <_dtoa_r+0x6bc>
 800f4e0:	4649      	mov	r1, r9
 800f4e2:	4658      	mov	r0, fp
 800f4e4:	f000 fe94 	bl	8010210 <_Bfree>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	7033      	strb	r3, [r6, #0]
 800f4ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f4ee:	3701      	adds	r7, #1
 800f4f0:	601f      	str	r7, [r3, #0]
 800f4f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f000 831d 	beq.w	800fb34 <_dtoa_r+0xb34>
 800f4fa:	601e      	str	r6, [r3, #0]
 800f4fc:	e31a      	b.n	800fb34 <_dtoa_r+0xb34>
 800f4fe:	07e2      	lsls	r2, r4, #31
 800f500:	d505      	bpl.n	800f50e <_dtoa_r+0x50e>
 800f502:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f506:	f7f1 f89f 	bl	8000648 <__aeabi_dmul>
 800f50a:	3601      	adds	r6, #1
 800f50c:	2301      	movs	r3, #1
 800f50e:	1064      	asrs	r4, r4, #1
 800f510:	3508      	adds	r5, #8
 800f512:	e73f      	b.n	800f394 <_dtoa_r+0x394>
 800f514:	2602      	movs	r6, #2
 800f516:	e742      	b.n	800f39e <_dtoa_r+0x39e>
 800f518:	9c07      	ldr	r4, [sp, #28]
 800f51a:	9704      	str	r7, [sp, #16]
 800f51c:	e761      	b.n	800f3e2 <_dtoa_r+0x3e2>
 800f51e:	4b27      	ldr	r3, [pc, #156]	@ (800f5bc <_dtoa_r+0x5bc>)
 800f520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f526:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f52a:	4454      	add	r4, sl
 800f52c:	2900      	cmp	r1, #0
 800f52e:	d053      	beq.n	800f5d8 <_dtoa_r+0x5d8>
 800f530:	4928      	ldr	r1, [pc, #160]	@ (800f5d4 <_dtoa_r+0x5d4>)
 800f532:	2000      	movs	r0, #0
 800f534:	f7f1 f9b2 	bl	800089c <__aeabi_ddiv>
 800f538:	4633      	mov	r3, r6
 800f53a:	462a      	mov	r2, r5
 800f53c:	f7f0 fecc 	bl	80002d8 <__aeabi_dsub>
 800f540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f544:	4656      	mov	r6, sl
 800f546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f54a:	f7f1 fb2d 	bl	8000ba8 <__aeabi_d2iz>
 800f54e:	4605      	mov	r5, r0
 800f550:	f7f1 f810 	bl	8000574 <__aeabi_i2d>
 800f554:	4602      	mov	r2, r0
 800f556:	460b      	mov	r3, r1
 800f558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f55c:	f7f0 febc 	bl	80002d8 <__aeabi_dsub>
 800f560:	3530      	adds	r5, #48	@ 0x30
 800f562:	4602      	mov	r2, r0
 800f564:	460b      	mov	r3, r1
 800f566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f56a:	f806 5b01 	strb.w	r5, [r6], #1
 800f56e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f572:	f7f1 fadb 	bl	8000b2c <__aeabi_dcmplt>
 800f576:	2800      	cmp	r0, #0
 800f578:	d171      	bne.n	800f65e <_dtoa_r+0x65e>
 800f57a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f57e:	4911      	ldr	r1, [pc, #68]	@ (800f5c4 <_dtoa_r+0x5c4>)
 800f580:	2000      	movs	r0, #0
 800f582:	f7f0 fea9 	bl	80002d8 <__aeabi_dsub>
 800f586:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f58a:	f7f1 facf 	bl	8000b2c <__aeabi_dcmplt>
 800f58e:	2800      	cmp	r0, #0
 800f590:	f040 8095 	bne.w	800f6be <_dtoa_r+0x6be>
 800f594:	42a6      	cmp	r6, r4
 800f596:	f43f af50 	beq.w	800f43a <_dtoa_r+0x43a>
 800f59a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f59e:	4b0a      	ldr	r3, [pc, #40]	@ (800f5c8 <_dtoa_r+0x5c8>)
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f7f1 f851 	bl	8000648 <__aeabi_dmul>
 800f5a6:	4b08      	ldr	r3, [pc, #32]	@ (800f5c8 <_dtoa_r+0x5c8>)
 800f5a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5b2:	f7f1 f849 	bl	8000648 <__aeabi_dmul>
 800f5b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5ba:	e7c4      	b.n	800f546 <_dtoa_r+0x546>
 800f5bc:	08011550 	.word	0x08011550
 800f5c0:	08011528 	.word	0x08011528
 800f5c4:	3ff00000 	.word	0x3ff00000
 800f5c8:	40240000 	.word	0x40240000
 800f5cc:	401c0000 	.word	0x401c0000
 800f5d0:	40140000 	.word	0x40140000
 800f5d4:	3fe00000 	.word	0x3fe00000
 800f5d8:	4631      	mov	r1, r6
 800f5da:	4628      	mov	r0, r5
 800f5dc:	f7f1 f834 	bl	8000648 <__aeabi_dmul>
 800f5e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800f5e6:	4656      	mov	r6, sl
 800f5e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ec:	f7f1 fadc 	bl	8000ba8 <__aeabi_d2iz>
 800f5f0:	4605      	mov	r5, r0
 800f5f2:	f7f0 ffbf 	bl	8000574 <__aeabi_i2d>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	460b      	mov	r3, r1
 800f5fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5fe:	f7f0 fe6b 	bl	80002d8 <__aeabi_dsub>
 800f602:	3530      	adds	r5, #48	@ 0x30
 800f604:	f806 5b01 	strb.w	r5, [r6], #1
 800f608:	4602      	mov	r2, r0
 800f60a:	460b      	mov	r3, r1
 800f60c:	42a6      	cmp	r6, r4
 800f60e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f612:	f04f 0200 	mov.w	r2, #0
 800f616:	d124      	bne.n	800f662 <_dtoa_r+0x662>
 800f618:	4bac      	ldr	r3, [pc, #688]	@ (800f8cc <_dtoa_r+0x8cc>)
 800f61a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f61e:	f7f0 fe5d 	bl	80002dc <__adddf3>
 800f622:	4602      	mov	r2, r0
 800f624:	460b      	mov	r3, r1
 800f626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f62a:	f7f1 fa9d 	bl	8000b68 <__aeabi_dcmpgt>
 800f62e:	2800      	cmp	r0, #0
 800f630:	d145      	bne.n	800f6be <_dtoa_r+0x6be>
 800f632:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f636:	49a5      	ldr	r1, [pc, #660]	@ (800f8cc <_dtoa_r+0x8cc>)
 800f638:	2000      	movs	r0, #0
 800f63a:	f7f0 fe4d 	bl	80002d8 <__aeabi_dsub>
 800f63e:	4602      	mov	r2, r0
 800f640:	460b      	mov	r3, r1
 800f642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f646:	f7f1 fa71 	bl	8000b2c <__aeabi_dcmplt>
 800f64a:	2800      	cmp	r0, #0
 800f64c:	f43f aef5 	beq.w	800f43a <_dtoa_r+0x43a>
 800f650:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f652:	1e73      	subs	r3, r6, #1
 800f654:	9315      	str	r3, [sp, #84]	@ 0x54
 800f656:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f65a:	2b30      	cmp	r3, #48	@ 0x30
 800f65c:	d0f8      	beq.n	800f650 <_dtoa_r+0x650>
 800f65e:	9f04      	ldr	r7, [sp, #16]
 800f660:	e73e      	b.n	800f4e0 <_dtoa_r+0x4e0>
 800f662:	4b9b      	ldr	r3, [pc, #620]	@ (800f8d0 <_dtoa_r+0x8d0>)
 800f664:	f7f0 fff0 	bl	8000648 <__aeabi_dmul>
 800f668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f66c:	e7bc      	b.n	800f5e8 <_dtoa_r+0x5e8>
 800f66e:	d10c      	bne.n	800f68a <_dtoa_r+0x68a>
 800f670:	4b98      	ldr	r3, [pc, #608]	@ (800f8d4 <_dtoa_r+0x8d4>)
 800f672:	2200      	movs	r2, #0
 800f674:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f678:	f7f0 ffe6 	bl	8000648 <__aeabi_dmul>
 800f67c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f680:	f7f1 fa68 	bl	8000b54 <__aeabi_dcmpge>
 800f684:	2800      	cmp	r0, #0
 800f686:	f000 8157 	beq.w	800f938 <_dtoa_r+0x938>
 800f68a:	2400      	movs	r4, #0
 800f68c:	4625      	mov	r5, r4
 800f68e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f690:	43db      	mvns	r3, r3
 800f692:	9304      	str	r3, [sp, #16]
 800f694:	4656      	mov	r6, sl
 800f696:	2700      	movs	r7, #0
 800f698:	4621      	mov	r1, r4
 800f69a:	4658      	mov	r0, fp
 800f69c:	f000 fdb8 	bl	8010210 <_Bfree>
 800f6a0:	2d00      	cmp	r5, #0
 800f6a2:	d0dc      	beq.n	800f65e <_dtoa_r+0x65e>
 800f6a4:	b12f      	cbz	r7, 800f6b2 <_dtoa_r+0x6b2>
 800f6a6:	42af      	cmp	r7, r5
 800f6a8:	d003      	beq.n	800f6b2 <_dtoa_r+0x6b2>
 800f6aa:	4639      	mov	r1, r7
 800f6ac:	4658      	mov	r0, fp
 800f6ae:	f000 fdaf 	bl	8010210 <_Bfree>
 800f6b2:	4629      	mov	r1, r5
 800f6b4:	4658      	mov	r0, fp
 800f6b6:	f000 fdab 	bl	8010210 <_Bfree>
 800f6ba:	e7d0      	b.n	800f65e <_dtoa_r+0x65e>
 800f6bc:	9704      	str	r7, [sp, #16]
 800f6be:	4633      	mov	r3, r6
 800f6c0:	461e      	mov	r6, r3
 800f6c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6c6:	2a39      	cmp	r2, #57	@ 0x39
 800f6c8:	d107      	bne.n	800f6da <_dtoa_r+0x6da>
 800f6ca:	459a      	cmp	sl, r3
 800f6cc:	d1f8      	bne.n	800f6c0 <_dtoa_r+0x6c0>
 800f6ce:	9a04      	ldr	r2, [sp, #16]
 800f6d0:	3201      	adds	r2, #1
 800f6d2:	9204      	str	r2, [sp, #16]
 800f6d4:	2230      	movs	r2, #48	@ 0x30
 800f6d6:	f88a 2000 	strb.w	r2, [sl]
 800f6da:	781a      	ldrb	r2, [r3, #0]
 800f6dc:	3201      	adds	r2, #1
 800f6de:	701a      	strb	r2, [r3, #0]
 800f6e0:	e7bd      	b.n	800f65e <_dtoa_r+0x65e>
 800f6e2:	4b7b      	ldr	r3, [pc, #492]	@ (800f8d0 <_dtoa_r+0x8d0>)
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f7f0 ffaf 	bl	8000648 <__aeabi_dmul>
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	460d      	mov	r5, r1
 800f6f2:	f7f1 fa11 	bl	8000b18 <__aeabi_dcmpeq>
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	f43f aebb 	beq.w	800f472 <_dtoa_r+0x472>
 800f6fc:	e6f0      	b.n	800f4e0 <_dtoa_r+0x4e0>
 800f6fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f700:	2a00      	cmp	r2, #0
 800f702:	f000 80db 	beq.w	800f8bc <_dtoa_r+0x8bc>
 800f706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f708:	2a01      	cmp	r2, #1
 800f70a:	f300 80bf 	bgt.w	800f88c <_dtoa_r+0x88c>
 800f70e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f710:	2a00      	cmp	r2, #0
 800f712:	f000 80b7 	beq.w	800f884 <_dtoa_r+0x884>
 800f716:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f71a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f71c:	4646      	mov	r6, r8
 800f71e:	9a08      	ldr	r2, [sp, #32]
 800f720:	2101      	movs	r1, #1
 800f722:	441a      	add	r2, r3
 800f724:	4658      	mov	r0, fp
 800f726:	4498      	add	r8, r3
 800f728:	9208      	str	r2, [sp, #32]
 800f72a:	f000 fe25 	bl	8010378 <__i2b>
 800f72e:	4605      	mov	r5, r0
 800f730:	b15e      	cbz	r6, 800f74a <_dtoa_r+0x74a>
 800f732:	9b08      	ldr	r3, [sp, #32]
 800f734:	2b00      	cmp	r3, #0
 800f736:	dd08      	ble.n	800f74a <_dtoa_r+0x74a>
 800f738:	42b3      	cmp	r3, r6
 800f73a:	9a08      	ldr	r2, [sp, #32]
 800f73c:	bfa8      	it	ge
 800f73e:	4633      	movge	r3, r6
 800f740:	eba8 0803 	sub.w	r8, r8, r3
 800f744:	1af6      	subs	r6, r6, r3
 800f746:	1ad3      	subs	r3, r2, r3
 800f748:	9308      	str	r3, [sp, #32]
 800f74a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f74c:	b1f3      	cbz	r3, 800f78c <_dtoa_r+0x78c>
 800f74e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f750:	2b00      	cmp	r3, #0
 800f752:	f000 80b7 	beq.w	800f8c4 <_dtoa_r+0x8c4>
 800f756:	b18c      	cbz	r4, 800f77c <_dtoa_r+0x77c>
 800f758:	4629      	mov	r1, r5
 800f75a:	4622      	mov	r2, r4
 800f75c:	4658      	mov	r0, fp
 800f75e:	f000 fecb 	bl	80104f8 <__pow5mult>
 800f762:	464a      	mov	r2, r9
 800f764:	4601      	mov	r1, r0
 800f766:	4605      	mov	r5, r0
 800f768:	4658      	mov	r0, fp
 800f76a:	f000 fe1b 	bl	80103a4 <__multiply>
 800f76e:	4649      	mov	r1, r9
 800f770:	9004      	str	r0, [sp, #16]
 800f772:	4658      	mov	r0, fp
 800f774:	f000 fd4c 	bl	8010210 <_Bfree>
 800f778:	9b04      	ldr	r3, [sp, #16]
 800f77a:	4699      	mov	r9, r3
 800f77c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f77e:	1b1a      	subs	r2, r3, r4
 800f780:	d004      	beq.n	800f78c <_dtoa_r+0x78c>
 800f782:	4649      	mov	r1, r9
 800f784:	4658      	mov	r0, fp
 800f786:	f000 feb7 	bl	80104f8 <__pow5mult>
 800f78a:	4681      	mov	r9, r0
 800f78c:	2101      	movs	r1, #1
 800f78e:	4658      	mov	r0, fp
 800f790:	f000 fdf2 	bl	8010378 <__i2b>
 800f794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f796:	4604      	mov	r4, r0
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f000 81cf 	beq.w	800fb3c <_dtoa_r+0xb3c>
 800f79e:	461a      	mov	r2, r3
 800f7a0:	4601      	mov	r1, r0
 800f7a2:	4658      	mov	r0, fp
 800f7a4:	f000 fea8 	bl	80104f8 <__pow5mult>
 800f7a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	f300 8095 	bgt.w	800f8dc <_dtoa_r+0x8dc>
 800f7b2:	9b02      	ldr	r3, [sp, #8]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	f040 8087 	bne.w	800f8c8 <_dtoa_r+0x8c8>
 800f7ba:	9b03      	ldr	r3, [sp, #12]
 800f7bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	f040 8089 	bne.w	800f8d8 <_dtoa_r+0x8d8>
 800f7c6:	9b03      	ldr	r3, [sp, #12]
 800f7c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f7cc:	0d1b      	lsrs	r3, r3, #20
 800f7ce:	051b      	lsls	r3, r3, #20
 800f7d0:	b12b      	cbz	r3, 800f7de <_dtoa_r+0x7de>
 800f7d2:	9b08      	ldr	r3, [sp, #32]
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	9308      	str	r3, [sp, #32]
 800f7d8:	f108 0801 	add.w	r8, r8, #1
 800f7dc:	2301      	movs	r3, #1
 800f7de:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f000 81b0 	beq.w	800fb48 <_dtoa_r+0xb48>
 800f7e8:	6923      	ldr	r3, [r4, #16]
 800f7ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f7ee:	6918      	ldr	r0, [r3, #16]
 800f7f0:	f000 fd76 	bl	80102e0 <__hi0bits>
 800f7f4:	f1c0 0020 	rsb	r0, r0, #32
 800f7f8:	9b08      	ldr	r3, [sp, #32]
 800f7fa:	4418      	add	r0, r3
 800f7fc:	f010 001f 	ands.w	r0, r0, #31
 800f800:	d077      	beq.n	800f8f2 <_dtoa_r+0x8f2>
 800f802:	f1c0 0320 	rsb	r3, r0, #32
 800f806:	2b04      	cmp	r3, #4
 800f808:	dd6b      	ble.n	800f8e2 <_dtoa_r+0x8e2>
 800f80a:	9b08      	ldr	r3, [sp, #32]
 800f80c:	f1c0 001c 	rsb	r0, r0, #28
 800f810:	4403      	add	r3, r0
 800f812:	4480      	add	r8, r0
 800f814:	4406      	add	r6, r0
 800f816:	9308      	str	r3, [sp, #32]
 800f818:	f1b8 0f00 	cmp.w	r8, #0
 800f81c:	dd05      	ble.n	800f82a <_dtoa_r+0x82a>
 800f81e:	4649      	mov	r1, r9
 800f820:	4642      	mov	r2, r8
 800f822:	4658      	mov	r0, fp
 800f824:	f000 fec2 	bl	80105ac <__lshift>
 800f828:	4681      	mov	r9, r0
 800f82a:	9b08      	ldr	r3, [sp, #32]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	dd05      	ble.n	800f83c <_dtoa_r+0x83c>
 800f830:	4621      	mov	r1, r4
 800f832:	461a      	mov	r2, r3
 800f834:	4658      	mov	r0, fp
 800f836:	f000 feb9 	bl	80105ac <__lshift>
 800f83a:	4604      	mov	r4, r0
 800f83c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d059      	beq.n	800f8f6 <_dtoa_r+0x8f6>
 800f842:	4621      	mov	r1, r4
 800f844:	4648      	mov	r0, r9
 800f846:	f000 ff1d 	bl	8010684 <__mcmp>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	da53      	bge.n	800f8f6 <_dtoa_r+0x8f6>
 800f84e:	1e7b      	subs	r3, r7, #1
 800f850:	9304      	str	r3, [sp, #16]
 800f852:	4649      	mov	r1, r9
 800f854:	2300      	movs	r3, #0
 800f856:	220a      	movs	r2, #10
 800f858:	4658      	mov	r0, fp
 800f85a:	f000 fcfb 	bl	8010254 <__multadd>
 800f85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f860:	4681      	mov	r9, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	f000 8172 	beq.w	800fb4c <_dtoa_r+0xb4c>
 800f868:	2300      	movs	r3, #0
 800f86a:	4629      	mov	r1, r5
 800f86c:	220a      	movs	r2, #10
 800f86e:	4658      	mov	r0, fp
 800f870:	f000 fcf0 	bl	8010254 <__multadd>
 800f874:	9b00      	ldr	r3, [sp, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	4605      	mov	r5, r0
 800f87a:	dc67      	bgt.n	800f94c <_dtoa_r+0x94c>
 800f87c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f87e:	2b02      	cmp	r3, #2
 800f880:	dc41      	bgt.n	800f906 <_dtoa_r+0x906>
 800f882:	e063      	b.n	800f94c <_dtoa_r+0x94c>
 800f884:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f886:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f88a:	e746      	b.n	800f71a <_dtoa_r+0x71a>
 800f88c:	9b07      	ldr	r3, [sp, #28]
 800f88e:	1e5c      	subs	r4, r3, #1
 800f890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f892:	42a3      	cmp	r3, r4
 800f894:	bfbf      	itttt	lt
 800f896:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f898:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f89a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f89c:	1ae3      	sublt	r3, r4, r3
 800f89e:	bfb4      	ite	lt
 800f8a0:	18d2      	addlt	r2, r2, r3
 800f8a2:	1b1c      	subge	r4, r3, r4
 800f8a4:	9b07      	ldr	r3, [sp, #28]
 800f8a6:	bfbc      	itt	lt
 800f8a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f8aa:	2400      	movlt	r4, #0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	bfb5      	itete	lt
 800f8b0:	eba8 0603 	sublt.w	r6, r8, r3
 800f8b4:	9b07      	ldrge	r3, [sp, #28]
 800f8b6:	2300      	movlt	r3, #0
 800f8b8:	4646      	movge	r6, r8
 800f8ba:	e730      	b.n	800f71e <_dtoa_r+0x71e>
 800f8bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f8be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f8c0:	4646      	mov	r6, r8
 800f8c2:	e735      	b.n	800f730 <_dtoa_r+0x730>
 800f8c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f8c6:	e75c      	b.n	800f782 <_dtoa_r+0x782>
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	e788      	b.n	800f7de <_dtoa_r+0x7de>
 800f8cc:	3fe00000 	.word	0x3fe00000
 800f8d0:	40240000 	.word	0x40240000
 800f8d4:	40140000 	.word	0x40140000
 800f8d8:	9b02      	ldr	r3, [sp, #8]
 800f8da:	e780      	b.n	800f7de <_dtoa_r+0x7de>
 800f8dc:	2300      	movs	r3, #0
 800f8de:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8e0:	e782      	b.n	800f7e8 <_dtoa_r+0x7e8>
 800f8e2:	d099      	beq.n	800f818 <_dtoa_r+0x818>
 800f8e4:	9a08      	ldr	r2, [sp, #32]
 800f8e6:	331c      	adds	r3, #28
 800f8e8:	441a      	add	r2, r3
 800f8ea:	4498      	add	r8, r3
 800f8ec:	441e      	add	r6, r3
 800f8ee:	9208      	str	r2, [sp, #32]
 800f8f0:	e792      	b.n	800f818 <_dtoa_r+0x818>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	e7f6      	b.n	800f8e4 <_dtoa_r+0x8e4>
 800f8f6:	9b07      	ldr	r3, [sp, #28]
 800f8f8:	9704      	str	r7, [sp, #16]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	dc20      	bgt.n	800f940 <_dtoa_r+0x940>
 800f8fe:	9300      	str	r3, [sp, #0]
 800f900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f902:	2b02      	cmp	r3, #2
 800f904:	dd1e      	ble.n	800f944 <_dtoa_r+0x944>
 800f906:	9b00      	ldr	r3, [sp, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	f47f aec0 	bne.w	800f68e <_dtoa_r+0x68e>
 800f90e:	4621      	mov	r1, r4
 800f910:	2205      	movs	r2, #5
 800f912:	4658      	mov	r0, fp
 800f914:	f000 fc9e 	bl	8010254 <__multadd>
 800f918:	4601      	mov	r1, r0
 800f91a:	4604      	mov	r4, r0
 800f91c:	4648      	mov	r0, r9
 800f91e:	f000 feb1 	bl	8010684 <__mcmp>
 800f922:	2800      	cmp	r0, #0
 800f924:	f77f aeb3 	ble.w	800f68e <_dtoa_r+0x68e>
 800f928:	4656      	mov	r6, sl
 800f92a:	2331      	movs	r3, #49	@ 0x31
 800f92c:	f806 3b01 	strb.w	r3, [r6], #1
 800f930:	9b04      	ldr	r3, [sp, #16]
 800f932:	3301      	adds	r3, #1
 800f934:	9304      	str	r3, [sp, #16]
 800f936:	e6ae      	b.n	800f696 <_dtoa_r+0x696>
 800f938:	9c07      	ldr	r4, [sp, #28]
 800f93a:	9704      	str	r7, [sp, #16]
 800f93c:	4625      	mov	r5, r4
 800f93e:	e7f3      	b.n	800f928 <_dtoa_r+0x928>
 800f940:	9b07      	ldr	r3, [sp, #28]
 800f942:	9300      	str	r3, [sp, #0]
 800f944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f946:	2b00      	cmp	r3, #0
 800f948:	f000 8104 	beq.w	800fb54 <_dtoa_r+0xb54>
 800f94c:	2e00      	cmp	r6, #0
 800f94e:	dd05      	ble.n	800f95c <_dtoa_r+0x95c>
 800f950:	4629      	mov	r1, r5
 800f952:	4632      	mov	r2, r6
 800f954:	4658      	mov	r0, fp
 800f956:	f000 fe29 	bl	80105ac <__lshift>
 800f95a:	4605      	mov	r5, r0
 800f95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d05a      	beq.n	800fa18 <_dtoa_r+0xa18>
 800f962:	6869      	ldr	r1, [r5, #4]
 800f964:	4658      	mov	r0, fp
 800f966:	f000 fc13 	bl	8010190 <_Balloc>
 800f96a:	4606      	mov	r6, r0
 800f96c:	b928      	cbnz	r0, 800f97a <_dtoa_r+0x97a>
 800f96e:	4b84      	ldr	r3, [pc, #528]	@ (800fb80 <_dtoa_r+0xb80>)
 800f970:	4602      	mov	r2, r0
 800f972:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f976:	f7ff bb5a 	b.w	800f02e <_dtoa_r+0x2e>
 800f97a:	692a      	ldr	r2, [r5, #16]
 800f97c:	3202      	adds	r2, #2
 800f97e:	0092      	lsls	r2, r2, #2
 800f980:	f105 010c 	add.w	r1, r5, #12
 800f984:	300c      	adds	r0, #12
 800f986:	f7ff faa2 	bl	800eece <memcpy>
 800f98a:	2201      	movs	r2, #1
 800f98c:	4631      	mov	r1, r6
 800f98e:	4658      	mov	r0, fp
 800f990:	f000 fe0c 	bl	80105ac <__lshift>
 800f994:	f10a 0301 	add.w	r3, sl, #1
 800f998:	9307      	str	r3, [sp, #28]
 800f99a:	9b00      	ldr	r3, [sp, #0]
 800f99c:	4453      	add	r3, sl
 800f99e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9a0:	9b02      	ldr	r3, [sp, #8]
 800f9a2:	f003 0301 	and.w	r3, r3, #1
 800f9a6:	462f      	mov	r7, r5
 800f9a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9aa:	4605      	mov	r5, r0
 800f9ac:	9b07      	ldr	r3, [sp, #28]
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	4648      	mov	r0, r9
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	f7ff fa98 	bl	800eeea <quorem>
 800f9ba:	4639      	mov	r1, r7
 800f9bc:	9002      	str	r0, [sp, #8]
 800f9be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f9c2:	4648      	mov	r0, r9
 800f9c4:	f000 fe5e 	bl	8010684 <__mcmp>
 800f9c8:	462a      	mov	r2, r5
 800f9ca:	9008      	str	r0, [sp, #32]
 800f9cc:	4621      	mov	r1, r4
 800f9ce:	4658      	mov	r0, fp
 800f9d0:	f000 fe74 	bl	80106bc <__mdiff>
 800f9d4:	68c2      	ldr	r2, [r0, #12]
 800f9d6:	4606      	mov	r6, r0
 800f9d8:	bb02      	cbnz	r2, 800fa1c <_dtoa_r+0xa1c>
 800f9da:	4601      	mov	r1, r0
 800f9dc:	4648      	mov	r0, r9
 800f9de:	f000 fe51 	bl	8010684 <__mcmp>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	4631      	mov	r1, r6
 800f9e6:	4658      	mov	r0, fp
 800f9e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9ea:	f000 fc11 	bl	8010210 <_Bfree>
 800f9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9f2:	9e07      	ldr	r6, [sp, #28]
 800f9f4:	ea43 0102 	orr.w	r1, r3, r2
 800f9f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9fa:	4319      	orrs	r1, r3
 800f9fc:	d110      	bne.n	800fa20 <_dtoa_r+0xa20>
 800f9fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa02:	d029      	beq.n	800fa58 <_dtoa_r+0xa58>
 800fa04:	9b08      	ldr	r3, [sp, #32]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	dd02      	ble.n	800fa10 <_dtoa_r+0xa10>
 800fa0a:	9b02      	ldr	r3, [sp, #8]
 800fa0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fa10:	9b00      	ldr	r3, [sp, #0]
 800fa12:	f883 8000 	strb.w	r8, [r3]
 800fa16:	e63f      	b.n	800f698 <_dtoa_r+0x698>
 800fa18:	4628      	mov	r0, r5
 800fa1a:	e7bb      	b.n	800f994 <_dtoa_r+0x994>
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	e7e1      	b.n	800f9e4 <_dtoa_r+0x9e4>
 800fa20:	9b08      	ldr	r3, [sp, #32]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	db04      	blt.n	800fa30 <_dtoa_r+0xa30>
 800fa26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa28:	430b      	orrs	r3, r1
 800fa2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa2c:	430b      	orrs	r3, r1
 800fa2e:	d120      	bne.n	800fa72 <_dtoa_r+0xa72>
 800fa30:	2a00      	cmp	r2, #0
 800fa32:	dded      	ble.n	800fa10 <_dtoa_r+0xa10>
 800fa34:	4649      	mov	r1, r9
 800fa36:	2201      	movs	r2, #1
 800fa38:	4658      	mov	r0, fp
 800fa3a:	f000 fdb7 	bl	80105ac <__lshift>
 800fa3e:	4621      	mov	r1, r4
 800fa40:	4681      	mov	r9, r0
 800fa42:	f000 fe1f 	bl	8010684 <__mcmp>
 800fa46:	2800      	cmp	r0, #0
 800fa48:	dc03      	bgt.n	800fa52 <_dtoa_r+0xa52>
 800fa4a:	d1e1      	bne.n	800fa10 <_dtoa_r+0xa10>
 800fa4c:	f018 0f01 	tst.w	r8, #1
 800fa50:	d0de      	beq.n	800fa10 <_dtoa_r+0xa10>
 800fa52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa56:	d1d8      	bne.n	800fa0a <_dtoa_r+0xa0a>
 800fa58:	9a00      	ldr	r2, [sp, #0]
 800fa5a:	2339      	movs	r3, #57	@ 0x39
 800fa5c:	7013      	strb	r3, [r2, #0]
 800fa5e:	4633      	mov	r3, r6
 800fa60:	461e      	mov	r6, r3
 800fa62:	3b01      	subs	r3, #1
 800fa64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fa68:	2a39      	cmp	r2, #57	@ 0x39
 800fa6a:	d052      	beq.n	800fb12 <_dtoa_r+0xb12>
 800fa6c:	3201      	adds	r2, #1
 800fa6e:	701a      	strb	r2, [r3, #0]
 800fa70:	e612      	b.n	800f698 <_dtoa_r+0x698>
 800fa72:	2a00      	cmp	r2, #0
 800fa74:	dd07      	ble.n	800fa86 <_dtoa_r+0xa86>
 800fa76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa7a:	d0ed      	beq.n	800fa58 <_dtoa_r+0xa58>
 800fa7c:	9a00      	ldr	r2, [sp, #0]
 800fa7e:	f108 0301 	add.w	r3, r8, #1
 800fa82:	7013      	strb	r3, [r2, #0]
 800fa84:	e608      	b.n	800f698 <_dtoa_r+0x698>
 800fa86:	9b07      	ldr	r3, [sp, #28]
 800fa88:	9a07      	ldr	r2, [sp, #28]
 800fa8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fa8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d028      	beq.n	800fae6 <_dtoa_r+0xae6>
 800fa94:	4649      	mov	r1, r9
 800fa96:	2300      	movs	r3, #0
 800fa98:	220a      	movs	r2, #10
 800fa9a:	4658      	mov	r0, fp
 800fa9c:	f000 fbda 	bl	8010254 <__multadd>
 800faa0:	42af      	cmp	r7, r5
 800faa2:	4681      	mov	r9, r0
 800faa4:	f04f 0300 	mov.w	r3, #0
 800faa8:	f04f 020a 	mov.w	r2, #10
 800faac:	4639      	mov	r1, r7
 800faae:	4658      	mov	r0, fp
 800fab0:	d107      	bne.n	800fac2 <_dtoa_r+0xac2>
 800fab2:	f000 fbcf 	bl	8010254 <__multadd>
 800fab6:	4607      	mov	r7, r0
 800fab8:	4605      	mov	r5, r0
 800faba:	9b07      	ldr	r3, [sp, #28]
 800fabc:	3301      	adds	r3, #1
 800fabe:	9307      	str	r3, [sp, #28]
 800fac0:	e774      	b.n	800f9ac <_dtoa_r+0x9ac>
 800fac2:	f000 fbc7 	bl	8010254 <__multadd>
 800fac6:	4629      	mov	r1, r5
 800fac8:	4607      	mov	r7, r0
 800faca:	2300      	movs	r3, #0
 800facc:	220a      	movs	r2, #10
 800face:	4658      	mov	r0, fp
 800fad0:	f000 fbc0 	bl	8010254 <__multadd>
 800fad4:	4605      	mov	r5, r0
 800fad6:	e7f0      	b.n	800faba <_dtoa_r+0xaba>
 800fad8:	9b00      	ldr	r3, [sp, #0]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	bfcc      	ite	gt
 800fade:	461e      	movgt	r6, r3
 800fae0:	2601      	movle	r6, #1
 800fae2:	4456      	add	r6, sl
 800fae4:	2700      	movs	r7, #0
 800fae6:	4649      	mov	r1, r9
 800fae8:	2201      	movs	r2, #1
 800faea:	4658      	mov	r0, fp
 800faec:	f000 fd5e 	bl	80105ac <__lshift>
 800faf0:	4621      	mov	r1, r4
 800faf2:	4681      	mov	r9, r0
 800faf4:	f000 fdc6 	bl	8010684 <__mcmp>
 800faf8:	2800      	cmp	r0, #0
 800fafa:	dcb0      	bgt.n	800fa5e <_dtoa_r+0xa5e>
 800fafc:	d102      	bne.n	800fb04 <_dtoa_r+0xb04>
 800fafe:	f018 0f01 	tst.w	r8, #1
 800fb02:	d1ac      	bne.n	800fa5e <_dtoa_r+0xa5e>
 800fb04:	4633      	mov	r3, r6
 800fb06:	461e      	mov	r6, r3
 800fb08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb0c:	2a30      	cmp	r2, #48	@ 0x30
 800fb0e:	d0fa      	beq.n	800fb06 <_dtoa_r+0xb06>
 800fb10:	e5c2      	b.n	800f698 <_dtoa_r+0x698>
 800fb12:	459a      	cmp	sl, r3
 800fb14:	d1a4      	bne.n	800fa60 <_dtoa_r+0xa60>
 800fb16:	9b04      	ldr	r3, [sp, #16]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	9304      	str	r3, [sp, #16]
 800fb1c:	2331      	movs	r3, #49	@ 0x31
 800fb1e:	f88a 3000 	strb.w	r3, [sl]
 800fb22:	e5b9      	b.n	800f698 <_dtoa_r+0x698>
 800fb24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fb84 <_dtoa_r+0xb84>
 800fb2a:	b11b      	cbz	r3, 800fb34 <_dtoa_r+0xb34>
 800fb2c:	f10a 0308 	add.w	r3, sl, #8
 800fb30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fb32:	6013      	str	r3, [r2, #0]
 800fb34:	4650      	mov	r0, sl
 800fb36:	b019      	add	sp, #100	@ 0x64
 800fb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	f77f ae37 	ble.w	800f7b2 <_dtoa_r+0x7b2>
 800fb44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb46:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb48:	2001      	movs	r0, #1
 800fb4a:	e655      	b.n	800f7f8 <_dtoa_r+0x7f8>
 800fb4c:	9b00      	ldr	r3, [sp, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	f77f aed6 	ble.w	800f900 <_dtoa_r+0x900>
 800fb54:	4656      	mov	r6, sl
 800fb56:	4621      	mov	r1, r4
 800fb58:	4648      	mov	r0, r9
 800fb5a:	f7ff f9c6 	bl	800eeea <quorem>
 800fb5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fb62:	f806 8b01 	strb.w	r8, [r6], #1
 800fb66:	9b00      	ldr	r3, [sp, #0]
 800fb68:	eba6 020a 	sub.w	r2, r6, sl
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	ddb3      	ble.n	800fad8 <_dtoa_r+0xad8>
 800fb70:	4649      	mov	r1, r9
 800fb72:	2300      	movs	r3, #0
 800fb74:	220a      	movs	r2, #10
 800fb76:	4658      	mov	r0, fp
 800fb78:	f000 fb6c 	bl	8010254 <__multadd>
 800fb7c:	4681      	mov	r9, r0
 800fb7e:	e7ea      	b.n	800fb56 <_dtoa_r+0xb56>
 800fb80:	0801149c 	.word	0x0801149c
 800fb84:	08011420 	.word	0x08011420

0800fb88 <_free_r>:
 800fb88:	b538      	push	{r3, r4, r5, lr}
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	2900      	cmp	r1, #0
 800fb8e:	d041      	beq.n	800fc14 <_free_r+0x8c>
 800fb90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb94:	1f0c      	subs	r4, r1, #4
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	bfb8      	it	lt
 800fb9a:	18e4      	addlt	r4, r4, r3
 800fb9c:	f000 faec 	bl	8010178 <__malloc_lock>
 800fba0:	4a1d      	ldr	r2, [pc, #116]	@ (800fc18 <_free_r+0x90>)
 800fba2:	6813      	ldr	r3, [r2, #0]
 800fba4:	b933      	cbnz	r3, 800fbb4 <_free_r+0x2c>
 800fba6:	6063      	str	r3, [r4, #4]
 800fba8:	6014      	str	r4, [r2, #0]
 800fbaa:	4628      	mov	r0, r5
 800fbac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbb0:	f000 bae8 	b.w	8010184 <__malloc_unlock>
 800fbb4:	42a3      	cmp	r3, r4
 800fbb6:	d908      	bls.n	800fbca <_free_r+0x42>
 800fbb8:	6820      	ldr	r0, [r4, #0]
 800fbba:	1821      	adds	r1, r4, r0
 800fbbc:	428b      	cmp	r3, r1
 800fbbe:	bf01      	itttt	eq
 800fbc0:	6819      	ldreq	r1, [r3, #0]
 800fbc2:	685b      	ldreq	r3, [r3, #4]
 800fbc4:	1809      	addeq	r1, r1, r0
 800fbc6:	6021      	streq	r1, [r4, #0]
 800fbc8:	e7ed      	b.n	800fba6 <_free_r+0x1e>
 800fbca:	461a      	mov	r2, r3
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	b10b      	cbz	r3, 800fbd4 <_free_r+0x4c>
 800fbd0:	42a3      	cmp	r3, r4
 800fbd2:	d9fa      	bls.n	800fbca <_free_r+0x42>
 800fbd4:	6811      	ldr	r1, [r2, #0]
 800fbd6:	1850      	adds	r0, r2, r1
 800fbd8:	42a0      	cmp	r0, r4
 800fbda:	d10b      	bne.n	800fbf4 <_free_r+0x6c>
 800fbdc:	6820      	ldr	r0, [r4, #0]
 800fbde:	4401      	add	r1, r0
 800fbe0:	1850      	adds	r0, r2, r1
 800fbe2:	4283      	cmp	r3, r0
 800fbe4:	6011      	str	r1, [r2, #0]
 800fbe6:	d1e0      	bne.n	800fbaa <_free_r+0x22>
 800fbe8:	6818      	ldr	r0, [r3, #0]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	6053      	str	r3, [r2, #4]
 800fbee:	4408      	add	r0, r1
 800fbf0:	6010      	str	r0, [r2, #0]
 800fbf2:	e7da      	b.n	800fbaa <_free_r+0x22>
 800fbf4:	d902      	bls.n	800fbfc <_free_r+0x74>
 800fbf6:	230c      	movs	r3, #12
 800fbf8:	602b      	str	r3, [r5, #0]
 800fbfa:	e7d6      	b.n	800fbaa <_free_r+0x22>
 800fbfc:	6820      	ldr	r0, [r4, #0]
 800fbfe:	1821      	adds	r1, r4, r0
 800fc00:	428b      	cmp	r3, r1
 800fc02:	bf04      	itt	eq
 800fc04:	6819      	ldreq	r1, [r3, #0]
 800fc06:	685b      	ldreq	r3, [r3, #4]
 800fc08:	6063      	str	r3, [r4, #4]
 800fc0a:	bf04      	itt	eq
 800fc0c:	1809      	addeq	r1, r1, r0
 800fc0e:	6021      	streq	r1, [r4, #0]
 800fc10:	6054      	str	r4, [r2, #4]
 800fc12:	e7ca      	b.n	800fbaa <_free_r+0x22>
 800fc14:	bd38      	pop	{r3, r4, r5, pc}
 800fc16:	bf00      	nop
 800fc18:	200077e4 	.word	0x200077e4

0800fc1c <__ssputs_r>:
 800fc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc20:	688e      	ldr	r6, [r1, #8]
 800fc22:	461f      	mov	r7, r3
 800fc24:	42be      	cmp	r6, r7
 800fc26:	680b      	ldr	r3, [r1, #0]
 800fc28:	4682      	mov	sl, r0
 800fc2a:	460c      	mov	r4, r1
 800fc2c:	4690      	mov	r8, r2
 800fc2e:	d82d      	bhi.n	800fc8c <__ssputs_r+0x70>
 800fc30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc38:	d026      	beq.n	800fc88 <__ssputs_r+0x6c>
 800fc3a:	6965      	ldr	r5, [r4, #20]
 800fc3c:	6909      	ldr	r1, [r1, #16]
 800fc3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc42:	eba3 0901 	sub.w	r9, r3, r1
 800fc46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc4a:	1c7b      	adds	r3, r7, #1
 800fc4c:	444b      	add	r3, r9
 800fc4e:	106d      	asrs	r5, r5, #1
 800fc50:	429d      	cmp	r5, r3
 800fc52:	bf38      	it	cc
 800fc54:	461d      	movcc	r5, r3
 800fc56:	0553      	lsls	r3, r2, #21
 800fc58:	d527      	bpl.n	800fcaa <__ssputs_r+0x8e>
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	f000 f960 	bl	800ff20 <_malloc_r>
 800fc60:	4606      	mov	r6, r0
 800fc62:	b360      	cbz	r0, 800fcbe <__ssputs_r+0xa2>
 800fc64:	6921      	ldr	r1, [r4, #16]
 800fc66:	464a      	mov	r2, r9
 800fc68:	f7ff f931 	bl	800eece <memcpy>
 800fc6c:	89a3      	ldrh	r3, [r4, #12]
 800fc6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fc72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc76:	81a3      	strh	r3, [r4, #12]
 800fc78:	6126      	str	r6, [r4, #16]
 800fc7a:	6165      	str	r5, [r4, #20]
 800fc7c:	444e      	add	r6, r9
 800fc7e:	eba5 0509 	sub.w	r5, r5, r9
 800fc82:	6026      	str	r6, [r4, #0]
 800fc84:	60a5      	str	r5, [r4, #8]
 800fc86:	463e      	mov	r6, r7
 800fc88:	42be      	cmp	r6, r7
 800fc8a:	d900      	bls.n	800fc8e <__ssputs_r+0x72>
 800fc8c:	463e      	mov	r6, r7
 800fc8e:	6820      	ldr	r0, [r4, #0]
 800fc90:	4632      	mov	r2, r6
 800fc92:	4641      	mov	r1, r8
 800fc94:	f000 fe6f 	bl	8010976 <memmove>
 800fc98:	68a3      	ldr	r3, [r4, #8]
 800fc9a:	1b9b      	subs	r3, r3, r6
 800fc9c:	60a3      	str	r3, [r4, #8]
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	4433      	add	r3, r6
 800fca2:	6023      	str	r3, [r4, #0]
 800fca4:	2000      	movs	r0, #0
 800fca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcaa:	462a      	mov	r2, r5
 800fcac:	f000 fe35 	bl	801091a <_realloc_r>
 800fcb0:	4606      	mov	r6, r0
 800fcb2:	2800      	cmp	r0, #0
 800fcb4:	d1e0      	bne.n	800fc78 <__ssputs_r+0x5c>
 800fcb6:	6921      	ldr	r1, [r4, #16]
 800fcb8:	4650      	mov	r0, sl
 800fcba:	f7ff ff65 	bl	800fb88 <_free_r>
 800fcbe:	230c      	movs	r3, #12
 800fcc0:	f8ca 3000 	str.w	r3, [sl]
 800fcc4:	89a3      	ldrh	r3, [r4, #12]
 800fcc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcca:	81a3      	strh	r3, [r4, #12]
 800fccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fcd0:	e7e9      	b.n	800fca6 <__ssputs_r+0x8a>
	...

0800fcd4 <_svfiprintf_r>:
 800fcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd8:	4698      	mov	r8, r3
 800fcda:	898b      	ldrh	r3, [r1, #12]
 800fcdc:	061b      	lsls	r3, r3, #24
 800fcde:	b09d      	sub	sp, #116	@ 0x74
 800fce0:	4607      	mov	r7, r0
 800fce2:	460d      	mov	r5, r1
 800fce4:	4614      	mov	r4, r2
 800fce6:	d510      	bpl.n	800fd0a <_svfiprintf_r+0x36>
 800fce8:	690b      	ldr	r3, [r1, #16]
 800fcea:	b973      	cbnz	r3, 800fd0a <_svfiprintf_r+0x36>
 800fcec:	2140      	movs	r1, #64	@ 0x40
 800fcee:	f000 f917 	bl	800ff20 <_malloc_r>
 800fcf2:	6028      	str	r0, [r5, #0]
 800fcf4:	6128      	str	r0, [r5, #16]
 800fcf6:	b930      	cbnz	r0, 800fd06 <_svfiprintf_r+0x32>
 800fcf8:	230c      	movs	r3, #12
 800fcfa:	603b      	str	r3, [r7, #0]
 800fcfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd00:	b01d      	add	sp, #116	@ 0x74
 800fd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd06:	2340      	movs	r3, #64	@ 0x40
 800fd08:	616b      	str	r3, [r5, #20]
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd0e:	2320      	movs	r3, #32
 800fd10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd14:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd18:	2330      	movs	r3, #48	@ 0x30
 800fd1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800feb8 <_svfiprintf_r+0x1e4>
 800fd1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd22:	f04f 0901 	mov.w	r9, #1
 800fd26:	4623      	mov	r3, r4
 800fd28:	469a      	mov	sl, r3
 800fd2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd2e:	b10a      	cbz	r2, 800fd34 <_svfiprintf_r+0x60>
 800fd30:	2a25      	cmp	r2, #37	@ 0x25
 800fd32:	d1f9      	bne.n	800fd28 <_svfiprintf_r+0x54>
 800fd34:	ebba 0b04 	subs.w	fp, sl, r4
 800fd38:	d00b      	beq.n	800fd52 <_svfiprintf_r+0x7e>
 800fd3a:	465b      	mov	r3, fp
 800fd3c:	4622      	mov	r2, r4
 800fd3e:	4629      	mov	r1, r5
 800fd40:	4638      	mov	r0, r7
 800fd42:	f7ff ff6b 	bl	800fc1c <__ssputs_r>
 800fd46:	3001      	adds	r0, #1
 800fd48:	f000 80a7 	beq.w	800fe9a <_svfiprintf_r+0x1c6>
 800fd4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd4e:	445a      	add	r2, fp
 800fd50:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd52:	f89a 3000 	ldrb.w	r3, [sl]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	f000 809f 	beq.w	800fe9a <_svfiprintf_r+0x1c6>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fd62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd66:	f10a 0a01 	add.w	sl, sl, #1
 800fd6a:	9304      	str	r3, [sp, #16]
 800fd6c:	9307      	str	r3, [sp, #28]
 800fd6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd72:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd74:	4654      	mov	r4, sl
 800fd76:	2205      	movs	r2, #5
 800fd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd7c:	484e      	ldr	r0, [pc, #312]	@ (800feb8 <_svfiprintf_r+0x1e4>)
 800fd7e:	f7f0 fa4f 	bl	8000220 <memchr>
 800fd82:	9a04      	ldr	r2, [sp, #16]
 800fd84:	b9d8      	cbnz	r0, 800fdbe <_svfiprintf_r+0xea>
 800fd86:	06d0      	lsls	r0, r2, #27
 800fd88:	bf44      	itt	mi
 800fd8a:	2320      	movmi	r3, #32
 800fd8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd90:	0711      	lsls	r1, r2, #28
 800fd92:	bf44      	itt	mi
 800fd94:	232b      	movmi	r3, #43	@ 0x2b
 800fd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd9a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fda0:	d015      	beq.n	800fdce <_svfiprintf_r+0xfa>
 800fda2:	9a07      	ldr	r2, [sp, #28]
 800fda4:	4654      	mov	r4, sl
 800fda6:	2000      	movs	r0, #0
 800fda8:	f04f 0c0a 	mov.w	ip, #10
 800fdac:	4621      	mov	r1, r4
 800fdae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdb2:	3b30      	subs	r3, #48	@ 0x30
 800fdb4:	2b09      	cmp	r3, #9
 800fdb6:	d94b      	bls.n	800fe50 <_svfiprintf_r+0x17c>
 800fdb8:	b1b0      	cbz	r0, 800fde8 <_svfiprintf_r+0x114>
 800fdba:	9207      	str	r2, [sp, #28]
 800fdbc:	e014      	b.n	800fde8 <_svfiprintf_r+0x114>
 800fdbe:	eba0 0308 	sub.w	r3, r0, r8
 800fdc2:	fa09 f303 	lsl.w	r3, r9, r3
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	9304      	str	r3, [sp, #16]
 800fdca:	46a2      	mov	sl, r4
 800fdcc:	e7d2      	b.n	800fd74 <_svfiprintf_r+0xa0>
 800fdce:	9b03      	ldr	r3, [sp, #12]
 800fdd0:	1d19      	adds	r1, r3, #4
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	9103      	str	r1, [sp, #12]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	bfbb      	ittet	lt
 800fdda:	425b      	neglt	r3, r3
 800fddc:	f042 0202 	orrlt.w	r2, r2, #2
 800fde0:	9307      	strge	r3, [sp, #28]
 800fde2:	9307      	strlt	r3, [sp, #28]
 800fde4:	bfb8      	it	lt
 800fde6:	9204      	strlt	r2, [sp, #16]
 800fde8:	7823      	ldrb	r3, [r4, #0]
 800fdea:	2b2e      	cmp	r3, #46	@ 0x2e
 800fdec:	d10a      	bne.n	800fe04 <_svfiprintf_r+0x130>
 800fdee:	7863      	ldrb	r3, [r4, #1]
 800fdf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdf2:	d132      	bne.n	800fe5a <_svfiprintf_r+0x186>
 800fdf4:	9b03      	ldr	r3, [sp, #12]
 800fdf6:	1d1a      	adds	r2, r3, #4
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	9203      	str	r2, [sp, #12]
 800fdfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe00:	3402      	adds	r4, #2
 800fe02:	9305      	str	r3, [sp, #20]
 800fe04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fec8 <_svfiprintf_r+0x1f4>
 800fe08:	7821      	ldrb	r1, [r4, #0]
 800fe0a:	2203      	movs	r2, #3
 800fe0c:	4650      	mov	r0, sl
 800fe0e:	f7f0 fa07 	bl	8000220 <memchr>
 800fe12:	b138      	cbz	r0, 800fe24 <_svfiprintf_r+0x150>
 800fe14:	9b04      	ldr	r3, [sp, #16]
 800fe16:	eba0 000a 	sub.w	r0, r0, sl
 800fe1a:	2240      	movs	r2, #64	@ 0x40
 800fe1c:	4082      	lsls	r2, r0
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	3401      	adds	r4, #1
 800fe22:	9304      	str	r3, [sp, #16]
 800fe24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe28:	4824      	ldr	r0, [pc, #144]	@ (800febc <_svfiprintf_r+0x1e8>)
 800fe2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe2e:	2206      	movs	r2, #6
 800fe30:	f7f0 f9f6 	bl	8000220 <memchr>
 800fe34:	2800      	cmp	r0, #0
 800fe36:	d036      	beq.n	800fea6 <_svfiprintf_r+0x1d2>
 800fe38:	4b21      	ldr	r3, [pc, #132]	@ (800fec0 <_svfiprintf_r+0x1ec>)
 800fe3a:	bb1b      	cbnz	r3, 800fe84 <_svfiprintf_r+0x1b0>
 800fe3c:	9b03      	ldr	r3, [sp, #12]
 800fe3e:	3307      	adds	r3, #7
 800fe40:	f023 0307 	bic.w	r3, r3, #7
 800fe44:	3308      	adds	r3, #8
 800fe46:	9303      	str	r3, [sp, #12]
 800fe48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe4a:	4433      	add	r3, r6
 800fe4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe4e:	e76a      	b.n	800fd26 <_svfiprintf_r+0x52>
 800fe50:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe54:	460c      	mov	r4, r1
 800fe56:	2001      	movs	r0, #1
 800fe58:	e7a8      	b.n	800fdac <_svfiprintf_r+0xd8>
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	3401      	adds	r4, #1
 800fe5e:	9305      	str	r3, [sp, #20]
 800fe60:	4619      	mov	r1, r3
 800fe62:	f04f 0c0a 	mov.w	ip, #10
 800fe66:	4620      	mov	r0, r4
 800fe68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe6c:	3a30      	subs	r2, #48	@ 0x30
 800fe6e:	2a09      	cmp	r2, #9
 800fe70:	d903      	bls.n	800fe7a <_svfiprintf_r+0x1a6>
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d0c6      	beq.n	800fe04 <_svfiprintf_r+0x130>
 800fe76:	9105      	str	r1, [sp, #20]
 800fe78:	e7c4      	b.n	800fe04 <_svfiprintf_r+0x130>
 800fe7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe7e:	4604      	mov	r4, r0
 800fe80:	2301      	movs	r3, #1
 800fe82:	e7f0      	b.n	800fe66 <_svfiprintf_r+0x192>
 800fe84:	ab03      	add	r3, sp, #12
 800fe86:	9300      	str	r3, [sp, #0]
 800fe88:	462a      	mov	r2, r5
 800fe8a:	4b0e      	ldr	r3, [pc, #56]	@ (800fec4 <_svfiprintf_r+0x1f0>)
 800fe8c:	a904      	add	r1, sp, #16
 800fe8e:	4638      	mov	r0, r7
 800fe90:	f7fe faf4 	bl	800e47c <_printf_float>
 800fe94:	1c42      	adds	r2, r0, #1
 800fe96:	4606      	mov	r6, r0
 800fe98:	d1d6      	bne.n	800fe48 <_svfiprintf_r+0x174>
 800fe9a:	89ab      	ldrh	r3, [r5, #12]
 800fe9c:	065b      	lsls	r3, r3, #25
 800fe9e:	f53f af2d 	bmi.w	800fcfc <_svfiprintf_r+0x28>
 800fea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fea4:	e72c      	b.n	800fd00 <_svfiprintf_r+0x2c>
 800fea6:	ab03      	add	r3, sp, #12
 800fea8:	9300      	str	r3, [sp, #0]
 800feaa:	462a      	mov	r2, r5
 800feac:	4b05      	ldr	r3, [pc, #20]	@ (800fec4 <_svfiprintf_r+0x1f0>)
 800feae:	a904      	add	r1, sp, #16
 800feb0:	4638      	mov	r0, r7
 800feb2:	f7fe fd7b 	bl	800e9ac <_printf_i>
 800feb6:	e7ed      	b.n	800fe94 <_svfiprintf_r+0x1c0>
 800feb8:	080114ad 	.word	0x080114ad
 800febc:	080114b7 	.word	0x080114b7
 800fec0:	0800e47d 	.word	0x0800e47d
 800fec4:	0800fc1d 	.word	0x0800fc1d
 800fec8:	080114b3 	.word	0x080114b3

0800fecc <malloc>:
 800fecc:	4b02      	ldr	r3, [pc, #8]	@ (800fed8 <malloc+0xc>)
 800fece:	4601      	mov	r1, r0
 800fed0:	6818      	ldr	r0, [r3, #0]
 800fed2:	f000 b825 	b.w	800ff20 <_malloc_r>
 800fed6:	bf00      	nop
 800fed8:	20000194 	.word	0x20000194

0800fedc <sbrk_aligned>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	4e0f      	ldr	r6, [pc, #60]	@ (800ff1c <sbrk_aligned+0x40>)
 800fee0:	460c      	mov	r4, r1
 800fee2:	6831      	ldr	r1, [r6, #0]
 800fee4:	4605      	mov	r5, r0
 800fee6:	b911      	cbnz	r1, 800feee <sbrk_aligned+0x12>
 800fee8:	f000 fd94 	bl	8010a14 <_sbrk_r>
 800feec:	6030      	str	r0, [r6, #0]
 800feee:	4621      	mov	r1, r4
 800fef0:	4628      	mov	r0, r5
 800fef2:	f000 fd8f 	bl	8010a14 <_sbrk_r>
 800fef6:	1c43      	adds	r3, r0, #1
 800fef8:	d103      	bne.n	800ff02 <sbrk_aligned+0x26>
 800fefa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800fefe:	4620      	mov	r0, r4
 800ff00:	bd70      	pop	{r4, r5, r6, pc}
 800ff02:	1cc4      	adds	r4, r0, #3
 800ff04:	f024 0403 	bic.w	r4, r4, #3
 800ff08:	42a0      	cmp	r0, r4
 800ff0a:	d0f8      	beq.n	800fefe <sbrk_aligned+0x22>
 800ff0c:	1a21      	subs	r1, r4, r0
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f000 fd80 	bl	8010a14 <_sbrk_r>
 800ff14:	3001      	adds	r0, #1
 800ff16:	d1f2      	bne.n	800fefe <sbrk_aligned+0x22>
 800ff18:	e7ef      	b.n	800fefa <sbrk_aligned+0x1e>
 800ff1a:	bf00      	nop
 800ff1c:	200077e0 	.word	0x200077e0

0800ff20 <_malloc_r>:
 800ff20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff24:	1ccd      	adds	r5, r1, #3
 800ff26:	f025 0503 	bic.w	r5, r5, #3
 800ff2a:	3508      	adds	r5, #8
 800ff2c:	2d0c      	cmp	r5, #12
 800ff2e:	bf38      	it	cc
 800ff30:	250c      	movcc	r5, #12
 800ff32:	2d00      	cmp	r5, #0
 800ff34:	4606      	mov	r6, r0
 800ff36:	db01      	blt.n	800ff3c <_malloc_r+0x1c>
 800ff38:	42a9      	cmp	r1, r5
 800ff3a:	d904      	bls.n	800ff46 <_malloc_r+0x26>
 800ff3c:	230c      	movs	r3, #12
 800ff3e:	6033      	str	r3, [r6, #0]
 800ff40:	2000      	movs	r0, #0
 800ff42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801001c <_malloc_r+0xfc>
 800ff4a:	f000 f915 	bl	8010178 <__malloc_lock>
 800ff4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff52:	461c      	mov	r4, r3
 800ff54:	bb44      	cbnz	r4, 800ffa8 <_malloc_r+0x88>
 800ff56:	4629      	mov	r1, r5
 800ff58:	4630      	mov	r0, r6
 800ff5a:	f7ff ffbf 	bl	800fedc <sbrk_aligned>
 800ff5e:	1c43      	adds	r3, r0, #1
 800ff60:	4604      	mov	r4, r0
 800ff62:	d158      	bne.n	8010016 <_malloc_r+0xf6>
 800ff64:	f8d8 4000 	ldr.w	r4, [r8]
 800ff68:	4627      	mov	r7, r4
 800ff6a:	2f00      	cmp	r7, #0
 800ff6c:	d143      	bne.n	800fff6 <_malloc_r+0xd6>
 800ff6e:	2c00      	cmp	r4, #0
 800ff70:	d04b      	beq.n	801000a <_malloc_r+0xea>
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	4639      	mov	r1, r7
 800ff76:	4630      	mov	r0, r6
 800ff78:	eb04 0903 	add.w	r9, r4, r3
 800ff7c:	f000 fd4a 	bl	8010a14 <_sbrk_r>
 800ff80:	4581      	cmp	r9, r0
 800ff82:	d142      	bne.n	801000a <_malloc_r+0xea>
 800ff84:	6821      	ldr	r1, [r4, #0]
 800ff86:	1a6d      	subs	r5, r5, r1
 800ff88:	4629      	mov	r1, r5
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	f7ff ffa6 	bl	800fedc <sbrk_aligned>
 800ff90:	3001      	adds	r0, #1
 800ff92:	d03a      	beq.n	801000a <_malloc_r+0xea>
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	442b      	add	r3, r5
 800ff98:	6023      	str	r3, [r4, #0]
 800ff9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ff9e:	685a      	ldr	r2, [r3, #4]
 800ffa0:	bb62      	cbnz	r2, 800fffc <_malloc_r+0xdc>
 800ffa2:	f8c8 7000 	str.w	r7, [r8]
 800ffa6:	e00f      	b.n	800ffc8 <_malloc_r+0xa8>
 800ffa8:	6822      	ldr	r2, [r4, #0]
 800ffaa:	1b52      	subs	r2, r2, r5
 800ffac:	d420      	bmi.n	800fff0 <_malloc_r+0xd0>
 800ffae:	2a0b      	cmp	r2, #11
 800ffb0:	d917      	bls.n	800ffe2 <_malloc_r+0xc2>
 800ffb2:	1961      	adds	r1, r4, r5
 800ffb4:	42a3      	cmp	r3, r4
 800ffb6:	6025      	str	r5, [r4, #0]
 800ffb8:	bf18      	it	ne
 800ffba:	6059      	strne	r1, [r3, #4]
 800ffbc:	6863      	ldr	r3, [r4, #4]
 800ffbe:	bf08      	it	eq
 800ffc0:	f8c8 1000 	streq.w	r1, [r8]
 800ffc4:	5162      	str	r2, [r4, r5]
 800ffc6:	604b      	str	r3, [r1, #4]
 800ffc8:	4630      	mov	r0, r6
 800ffca:	f000 f8db 	bl	8010184 <__malloc_unlock>
 800ffce:	f104 000b 	add.w	r0, r4, #11
 800ffd2:	1d23      	adds	r3, r4, #4
 800ffd4:	f020 0007 	bic.w	r0, r0, #7
 800ffd8:	1ac2      	subs	r2, r0, r3
 800ffda:	bf1c      	itt	ne
 800ffdc:	1a1b      	subne	r3, r3, r0
 800ffde:	50a3      	strne	r3, [r4, r2]
 800ffe0:	e7af      	b.n	800ff42 <_malloc_r+0x22>
 800ffe2:	6862      	ldr	r2, [r4, #4]
 800ffe4:	42a3      	cmp	r3, r4
 800ffe6:	bf0c      	ite	eq
 800ffe8:	f8c8 2000 	streq.w	r2, [r8]
 800ffec:	605a      	strne	r2, [r3, #4]
 800ffee:	e7eb      	b.n	800ffc8 <_malloc_r+0xa8>
 800fff0:	4623      	mov	r3, r4
 800fff2:	6864      	ldr	r4, [r4, #4]
 800fff4:	e7ae      	b.n	800ff54 <_malloc_r+0x34>
 800fff6:	463c      	mov	r4, r7
 800fff8:	687f      	ldr	r7, [r7, #4]
 800fffa:	e7b6      	b.n	800ff6a <_malloc_r+0x4a>
 800fffc:	461a      	mov	r2, r3
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	42a3      	cmp	r3, r4
 8010002:	d1fb      	bne.n	800fffc <_malloc_r+0xdc>
 8010004:	2300      	movs	r3, #0
 8010006:	6053      	str	r3, [r2, #4]
 8010008:	e7de      	b.n	800ffc8 <_malloc_r+0xa8>
 801000a:	230c      	movs	r3, #12
 801000c:	6033      	str	r3, [r6, #0]
 801000e:	4630      	mov	r0, r6
 8010010:	f000 f8b8 	bl	8010184 <__malloc_unlock>
 8010014:	e794      	b.n	800ff40 <_malloc_r+0x20>
 8010016:	6005      	str	r5, [r0, #0]
 8010018:	e7d6      	b.n	800ffc8 <_malloc_r+0xa8>
 801001a:	bf00      	nop
 801001c:	200077e4 	.word	0x200077e4

08010020 <__sflush_r>:
 8010020:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010028:	0716      	lsls	r6, r2, #28
 801002a:	4605      	mov	r5, r0
 801002c:	460c      	mov	r4, r1
 801002e:	d454      	bmi.n	80100da <__sflush_r+0xba>
 8010030:	684b      	ldr	r3, [r1, #4]
 8010032:	2b00      	cmp	r3, #0
 8010034:	dc02      	bgt.n	801003c <__sflush_r+0x1c>
 8010036:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010038:	2b00      	cmp	r3, #0
 801003a:	dd48      	ble.n	80100ce <__sflush_r+0xae>
 801003c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801003e:	2e00      	cmp	r6, #0
 8010040:	d045      	beq.n	80100ce <__sflush_r+0xae>
 8010042:	2300      	movs	r3, #0
 8010044:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010048:	682f      	ldr	r7, [r5, #0]
 801004a:	6a21      	ldr	r1, [r4, #32]
 801004c:	602b      	str	r3, [r5, #0]
 801004e:	d030      	beq.n	80100b2 <__sflush_r+0x92>
 8010050:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010052:	89a3      	ldrh	r3, [r4, #12]
 8010054:	0759      	lsls	r1, r3, #29
 8010056:	d505      	bpl.n	8010064 <__sflush_r+0x44>
 8010058:	6863      	ldr	r3, [r4, #4]
 801005a:	1ad2      	subs	r2, r2, r3
 801005c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801005e:	b10b      	cbz	r3, 8010064 <__sflush_r+0x44>
 8010060:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010062:	1ad2      	subs	r2, r2, r3
 8010064:	2300      	movs	r3, #0
 8010066:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010068:	6a21      	ldr	r1, [r4, #32]
 801006a:	4628      	mov	r0, r5
 801006c:	47b0      	blx	r6
 801006e:	1c43      	adds	r3, r0, #1
 8010070:	89a3      	ldrh	r3, [r4, #12]
 8010072:	d106      	bne.n	8010082 <__sflush_r+0x62>
 8010074:	6829      	ldr	r1, [r5, #0]
 8010076:	291d      	cmp	r1, #29
 8010078:	d82b      	bhi.n	80100d2 <__sflush_r+0xb2>
 801007a:	4a2a      	ldr	r2, [pc, #168]	@ (8010124 <__sflush_r+0x104>)
 801007c:	410a      	asrs	r2, r1
 801007e:	07d6      	lsls	r6, r2, #31
 8010080:	d427      	bmi.n	80100d2 <__sflush_r+0xb2>
 8010082:	2200      	movs	r2, #0
 8010084:	6062      	str	r2, [r4, #4]
 8010086:	04d9      	lsls	r1, r3, #19
 8010088:	6922      	ldr	r2, [r4, #16]
 801008a:	6022      	str	r2, [r4, #0]
 801008c:	d504      	bpl.n	8010098 <__sflush_r+0x78>
 801008e:	1c42      	adds	r2, r0, #1
 8010090:	d101      	bne.n	8010096 <__sflush_r+0x76>
 8010092:	682b      	ldr	r3, [r5, #0]
 8010094:	b903      	cbnz	r3, 8010098 <__sflush_r+0x78>
 8010096:	6560      	str	r0, [r4, #84]	@ 0x54
 8010098:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801009a:	602f      	str	r7, [r5, #0]
 801009c:	b1b9      	cbz	r1, 80100ce <__sflush_r+0xae>
 801009e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80100a2:	4299      	cmp	r1, r3
 80100a4:	d002      	beq.n	80100ac <__sflush_r+0x8c>
 80100a6:	4628      	mov	r0, r5
 80100a8:	f7ff fd6e 	bl	800fb88 <_free_r>
 80100ac:	2300      	movs	r3, #0
 80100ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80100b0:	e00d      	b.n	80100ce <__sflush_r+0xae>
 80100b2:	2301      	movs	r3, #1
 80100b4:	4628      	mov	r0, r5
 80100b6:	47b0      	blx	r6
 80100b8:	4602      	mov	r2, r0
 80100ba:	1c50      	adds	r0, r2, #1
 80100bc:	d1c9      	bne.n	8010052 <__sflush_r+0x32>
 80100be:	682b      	ldr	r3, [r5, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d0c6      	beq.n	8010052 <__sflush_r+0x32>
 80100c4:	2b1d      	cmp	r3, #29
 80100c6:	d001      	beq.n	80100cc <__sflush_r+0xac>
 80100c8:	2b16      	cmp	r3, #22
 80100ca:	d11e      	bne.n	801010a <__sflush_r+0xea>
 80100cc:	602f      	str	r7, [r5, #0]
 80100ce:	2000      	movs	r0, #0
 80100d0:	e022      	b.n	8010118 <__sflush_r+0xf8>
 80100d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100d6:	b21b      	sxth	r3, r3
 80100d8:	e01b      	b.n	8010112 <__sflush_r+0xf2>
 80100da:	690f      	ldr	r7, [r1, #16]
 80100dc:	2f00      	cmp	r7, #0
 80100de:	d0f6      	beq.n	80100ce <__sflush_r+0xae>
 80100e0:	0793      	lsls	r3, r2, #30
 80100e2:	680e      	ldr	r6, [r1, #0]
 80100e4:	bf08      	it	eq
 80100e6:	694b      	ldreq	r3, [r1, #20]
 80100e8:	600f      	str	r7, [r1, #0]
 80100ea:	bf18      	it	ne
 80100ec:	2300      	movne	r3, #0
 80100ee:	eba6 0807 	sub.w	r8, r6, r7
 80100f2:	608b      	str	r3, [r1, #8]
 80100f4:	f1b8 0f00 	cmp.w	r8, #0
 80100f8:	dde9      	ble.n	80100ce <__sflush_r+0xae>
 80100fa:	6a21      	ldr	r1, [r4, #32]
 80100fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80100fe:	4643      	mov	r3, r8
 8010100:	463a      	mov	r2, r7
 8010102:	4628      	mov	r0, r5
 8010104:	47b0      	blx	r6
 8010106:	2800      	cmp	r0, #0
 8010108:	dc08      	bgt.n	801011c <__sflush_r+0xfc>
 801010a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801010e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010112:	81a3      	strh	r3, [r4, #12]
 8010114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801011c:	4407      	add	r7, r0
 801011e:	eba8 0800 	sub.w	r8, r8, r0
 8010122:	e7e7      	b.n	80100f4 <__sflush_r+0xd4>
 8010124:	dfbffffe 	.word	0xdfbffffe

08010128 <_fflush_r>:
 8010128:	b538      	push	{r3, r4, r5, lr}
 801012a:	690b      	ldr	r3, [r1, #16]
 801012c:	4605      	mov	r5, r0
 801012e:	460c      	mov	r4, r1
 8010130:	b913      	cbnz	r3, 8010138 <_fflush_r+0x10>
 8010132:	2500      	movs	r5, #0
 8010134:	4628      	mov	r0, r5
 8010136:	bd38      	pop	{r3, r4, r5, pc}
 8010138:	b118      	cbz	r0, 8010142 <_fflush_r+0x1a>
 801013a:	6a03      	ldr	r3, [r0, #32]
 801013c:	b90b      	cbnz	r3, 8010142 <_fflush_r+0x1a>
 801013e:	f7fe fde1 	bl	800ed04 <__sinit>
 8010142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d0f3      	beq.n	8010132 <_fflush_r+0xa>
 801014a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801014c:	07d0      	lsls	r0, r2, #31
 801014e:	d404      	bmi.n	801015a <_fflush_r+0x32>
 8010150:	0599      	lsls	r1, r3, #22
 8010152:	d402      	bmi.n	801015a <_fflush_r+0x32>
 8010154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010156:	f7fe feb8 	bl	800eeca <__retarget_lock_acquire_recursive>
 801015a:	4628      	mov	r0, r5
 801015c:	4621      	mov	r1, r4
 801015e:	f7ff ff5f 	bl	8010020 <__sflush_r>
 8010162:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010164:	07da      	lsls	r2, r3, #31
 8010166:	4605      	mov	r5, r0
 8010168:	d4e4      	bmi.n	8010134 <_fflush_r+0xc>
 801016a:	89a3      	ldrh	r3, [r4, #12]
 801016c:	059b      	lsls	r3, r3, #22
 801016e:	d4e1      	bmi.n	8010134 <_fflush_r+0xc>
 8010170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010172:	f7fe feab 	bl	800eecc <__retarget_lock_release_recursive>
 8010176:	e7dd      	b.n	8010134 <_fflush_r+0xc>

08010178 <__malloc_lock>:
 8010178:	4801      	ldr	r0, [pc, #4]	@ (8010180 <__malloc_lock+0x8>)
 801017a:	f7fe bea6 	b.w	800eeca <__retarget_lock_acquire_recursive>
 801017e:	bf00      	nop
 8010180:	200077dc 	.word	0x200077dc

08010184 <__malloc_unlock>:
 8010184:	4801      	ldr	r0, [pc, #4]	@ (801018c <__malloc_unlock+0x8>)
 8010186:	f7fe bea1 	b.w	800eecc <__retarget_lock_release_recursive>
 801018a:	bf00      	nop
 801018c:	200077dc 	.word	0x200077dc

08010190 <_Balloc>:
 8010190:	b570      	push	{r4, r5, r6, lr}
 8010192:	69c6      	ldr	r6, [r0, #28]
 8010194:	4604      	mov	r4, r0
 8010196:	460d      	mov	r5, r1
 8010198:	b976      	cbnz	r6, 80101b8 <_Balloc+0x28>
 801019a:	2010      	movs	r0, #16
 801019c:	f7ff fe96 	bl	800fecc <malloc>
 80101a0:	4602      	mov	r2, r0
 80101a2:	61e0      	str	r0, [r4, #28]
 80101a4:	b920      	cbnz	r0, 80101b0 <_Balloc+0x20>
 80101a6:	4b18      	ldr	r3, [pc, #96]	@ (8010208 <_Balloc+0x78>)
 80101a8:	4818      	ldr	r0, [pc, #96]	@ (801020c <_Balloc+0x7c>)
 80101aa:	216b      	movs	r1, #107	@ 0x6b
 80101ac:	f000 fc54 	bl	8010a58 <__assert_func>
 80101b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101b4:	6006      	str	r6, [r0, #0]
 80101b6:	60c6      	str	r6, [r0, #12]
 80101b8:	69e6      	ldr	r6, [r4, #28]
 80101ba:	68f3      	ldr	r3, [r6, #12]
 80101bc:	b183      	cbz	r3, 80101e0 <_Balloc+0x50>
 80101be:	69e3      	ldr	r3, [r4, #28]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80101c6:	b9b8      	cbnz	r0, 80101f8 <_Balloc+0x68>
 80101c8:	2101      	movs	r1, #1
 80101ca:	fa01 f605 	lsl.w	r6, r1, r5
 80101ce:	1d72      	adds	r2, r6, #5
 80101d0:	0092      	lsls	r2, r2, #2
 80101d2:	4620      	mov	r0, r4
 80101d4:	f000 fc5e 	bl	8010a94 <_calloc_r>
 80101d8:	b160      	cbz	r0, 80101f4 <_Balloc+0x64>
 80101da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80101de:	e00e      	b.n	80101fe <_Balloc+0x6e>
 80101e0:	2221      	movs	r2, #33	@ 0x21
 80101e2:	2104      	movs	r1, #4
 80101e4:	4620      	mov	r0, r4
 80101e6:	f000 fc55 	bl	8010a94 <_calloc_r>
 80101ea:	69e3      	ldr	r3, [r4, #28]
 80101ec:	60f0      	str	r0, [r6, #12]
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d1e4      	bne.n	80101be <_Balloc+0x2e>
 80101f4:	2000      	movs	r0, #0
 80101f6:	bd70      	pop	{r4, r5, r6, pc}
 80101f8:	6802      	ldr	r2, [r0, #0]
 80101fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80101fe:	2300      	movs	r3, #0
 8010200:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010204:	e7f7      	b.n	80101f6 <_Balloc+0x66>
 8010206:	bf00      	nop
 8010208:	0801142d 	.word	0x0801142d
 801020c:	080114be 	.word	0x080114be

08010210 <_Bfree>:
 8010210:	b570      	push	{r4, r5, r6, lr}
 8010212:	69c6      	ldr	r6, [r0, #28]
 8010214:	4605      	mov	r5, r0
 8010216:	460c      	mov	r4, r1
 8010218:	b976      	cbnz	r6, 8010238 <_Bfree+0x28>
 801021a:	2010      	movs	r0, #16
 801021c:	f7ff fe56 	bl	800fecc <malloc>
 8010220:	4602      	mov	r2, r0
 8010222:	61e8      	str	r0, [r5, #28]
 8010224:	b920      	cbnz	r0, 8010230 <_Bfree+0x20>
 8010226:	4b09      	ldr	r3, [pc, #36]	@ (801024c <_Bfree+0x3c>)
 8010228:	4809      	ldr	r0, [pc, #36]	@ (8010250 <_Bfree+0x40>)
 801022a:	218f      	movs	r1, #143	@ 0x8f
 801022c:	f000 fc14 	bl	8010a58 <__assert_func>
 8010230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010234:	6006      	str	r6, [r0, #0]
 8010236:	60c6      	str	r6, [r0, #12]
 8010238:	b13c      	cbz	r4, 801024a <_Bfree+0x3a>
 801023a:	69eb      	ldr	r3, [r5, #28]
 801023c:	6862      	ldr	r2, [r4, #4]
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010244:	6021      	str	r1, [r4, #0]
 8010246:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801024a:	bd70      	pop	{r4, r5, r6, pc}
 801024c:	0801142d 	.word	0x0801142d
 8010250:	080114be 	.word	0x080114be

08010254 <__multadd>:
 8010254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010258:	690d      	ldr	r5, [r1, #16]
 801025a:	4607      	mov	r7, r0
 801025c:	460c      	mov	r4, r1
 801025e:	461e      	mov	r6, r3
 8010260:	f101 0c14 	add.w	ip, r1, #20
 8010264:	2000      	movs	r0, #0
 8010266:	f8dc 3000 	ldr.w	r3, [ip]
 801026a:	b299      	uxth	r1, r3
 801026c:	fb02 6101 	mla	r1, r2, r1, r6
 8010270:	0c1e      	lsrs	r6, r3, #16
 8010272:	0c0b      	lsrs	r3, r1, #16
 8010274:	fb02 3306 	mla	r3, r2, r6, r3
 8010278:	b289      	uxth	r1, r1
 801027a:	3001      	adds	r0, #1
 801027c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010280:	4285      	cmp	r5, r0
 8010282:	f84c 1b04 	str.w	r1, [ip], #4
 8010286:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801028a:	dcec      	bgt.n	8010266 <__multadd+0x12>
 801028c:	b30e      	cbz	r6, 80102d2 <__multadd+0x7e>
 801028e:	68a3      	ldr	r3, [r4, #8]
 8010290:	42ab      	cmp	r3, r5
 8010292:	dc19      	bgt.n	80102c8 <__multadd+0x74>
 8010294:	6861      	ldr	r1, [r4, #4]
 8010296:	4638      	mov	r0, r7
 8010298:	3101      	adds	r1, #1
 801029a:	f7ff ff79 	bl	8010190 <_Balloc>
 801029e:	4680      	mov	r8, r0
 80102a0:	b928      	cbnz	r0, 80102ae <__multadd+0x5a>
 80102a2:	4602      	mov	r2, r0
 80102a4:	4b0c      	ldr	r3, [pc, #48]	@ (80102d8 <__multadd+0x84>)
 80102a6:	480d      	ldr	r0, [pc, #52]	@ (80102dc <__multadd+0x88>)
 80102a8:	21ba      	movs	r1, #186	@ 0xba
 80102aa:	f000 fbd5 	bl	8010a58 <__assert_func>
 80102ae:	6922      	ldr	r2, [r4, #16]
 80102b0:	3202      	adds	r2, #2
 80102b2:	f104 010c 	add.w	r1, r4, #12
 80102b6:	0092      	lsls	r2, r2, #2
 80102b8:	300c      	adds	r0, #12
 80102ba:	f7fe fe08 	bl	800eece <memcpy>
 80102be:	4621      	mov	r1, r4
 80102c0:	4638      	mov	r0, r7
 80102c2:	f7ff ffa5 	bl	8010210 <_Bfree>
 80102c6:	4644      	mov	r4, r8
 80102c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80102cc:	3501      	adds	r5, #1
 80102ce:	615e      	str	r6, [r3, #20]
 80102d0:	6125      	str	r5, [r4, #16]
 80102d2:	4620      	mov	r0, r4
 80102d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102d8:	0801149c 	.word	0x0801149c
 80102dc:	080114be 	.word	0x080114be

080102e0 <__hi0bits>:
 80102e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80102e4:	4603      	mov	r3, r0
 80102e6:	bf36      	itet	cc
 80102e8:	0403      	lslcc	r3, r0, #16
 80102ea:	2000      	movcs	r0, #0
 80102ec:	2010      	movcc	r0, #16
 80102ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80102f2:	bf3c      	itt	cc
 80102f4:	021b      	lslcc	r3, r3, #8
 80102f6:	3008      	addcc	r0, #8
 80102f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80102fc:	bf3c      	itt	cc
 80102fe:	011b      	lslcc	r3, r3, #4
 8010300:	3004      	addcc	r0, #4
 8010302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010306:	bf3c      	itt	cc
 8010308:	009b      	lslcc	r3, r3, #2
 801030a:	3002      	addcc	r0, #2
 801030c:	2b00      	cmp	r3, #0
 801030e:	db05      	blt.n	801031c <__hi0bits+0x3c>
 8010310:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010314:	f100 0001 	add.w	r0, r0, #1
 8010318:	bf08      	it	eq
 801031a:	2020      	moveq	r0, #32
 801031c:	4770      	bx	lr

0801031e <__lo0bits>:
 801031e:	6803      	ldr	r3, [r0, #0]
 8010320:	4602      	mov	r2, r0
 8010322:	f013 0007 	ands.w	r0, r3, #7
 8010326:	d00b      	beq.n	8010340 <__lo0bits+0x22>
 8010328:	07d9      	lsls	r1, r3, #31
 801032a:	d421      	bmi.n	8010370 <__lo0bits+0x52>
 801032c:	0798      	lsls	r0, r3, #30
 801032e:	bf49      	itett	mi
 8010330:	085b      	lsrmi	r3, r3, #1
 8010332:	089b      	lsrpl	r3, r3, #2
 8010334:	2001      	movmi	r0, #1
 8010336:	6013      	strmi	r3, [r2, #0]
 8010338:	bf5c      	itt	pl
 801033a:	6013      	strpl	r3, [r2, #0]
 801033c:	2002      	movpl	r0, #2
 801033e:	4770      	bx	lr
 8010340:	b299      	uxth	r1, r3
 8010342:	b909      	cbnz	r1, 8010348 <__lo0bits+0x2a>
 8010344:	0c1b      	lsrs	r3, r3, #16
 8010346:	2010      	movs	r0, #16
 8010348:	b2d9      	uxtb	r1, r3
 801034a:	b909      	cbnz	r1, 8010350 <__lo0bits+0x32>
 801034c:	3008      	adds	r0, #8
 801034e:	0a1b      	lsrs	r3, r3, #8
 8010350:	0719      	lsls	r1, r3, #28
 8010352:	bf04      	itt	eq
 8010354:	091b      	lsreq	r3, r3, #4
 8010356:	3004      	addeq	r0, #4
 8010358:	0799      	lsls	r1, r3, #30
 801035a:	bf04      	itt	eq
 801035c:	089b      	lsreq	r3, r3, #2
 801035e:	3002      	addeq	r0, #2
 8010360:	07d9      	lsls	r1, r3, #31
 8010362:	d403      	bmi.n	801036c <__lo0bits+0x4e>
 8010364:	085b      	lsrs	r3, r3, #1
 8010366:	f100 0001 	add.w	r0, r0, #1
 801036a:	d003      	beq.n	8010374 <__lo0bits+0x56>
 801036c:	6013      	str	r3, [r2, #0]
 801036e:	4770      	bx	lr
 8010370:	2000      	movs	r0, #0
 8010372:	4770      	bx	lr
 8010374:	2020      	movs	r0, #32
 8010376:	4770      	bx	lr

08010378 <__i2b>:
 8010378:	b510      	push	{r4, lr}
 801037a:	460c      	mov	r4, r1
 801037c:	2101      	movs	r1, #1
 801037e:	f7ff ff07 	bl	8010190 <_Balloc>
 8010382:	4602      	mov	r2, r0
 8010384:	b928      	cbnz	r0, 8010392 <__i2b+0x1a>
 8010386:	4b05      	ldr	r3, [pc, #20]	@ (801039c <__i2b+0x24>)
 8010388:	4805      	ldr	r0, [pc, #20]	@ (80103a0 <__i2b+0x28>)
 801038a:	f240 1145 	movw	r1, #325	@ 0x145
 801038e:	f000 fb63 	bl	8010a58 <__assert_func>
 8010392:	2301      	movs	r3, #1
 8010394:	6144      	str	r4, [r0, #20]
 8010396:	6103      	str	r3, [r0, #16]
 8010398:	bd10      	pop	{r4, pc}
 801039a:	bf00      	nop
 801039c:	0801149c 	.word	0x0801149c
 80103a0:	080114be 	.word	0x080114be

080103a4 <__multiply>:
 80103a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a8:	4614      	mov	r4, r2
 80103aa:	690a      	ldr	r2, [r1, #16]
 80103ac:	6923      	ldr	r3, [r4, #16]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	bfa8      	it	ge
 80103b2:	4623      	movge	r3, r4
 80103b4:	460f      	mov	r7, r1
 80103b6:	bfa4      	itt	ge
 80103b8:	460c      	movge	r4, r1
 80103ba:	461f      	movge	r7, r3
 80103bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80103c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80103c4:	68a3      	ldr	r3, [r4, #8]
 80103c6:	6861      	ldr	r1, [r4, #4]
 80103c8:	eb0a 0609 	add.w	r6, sl, r9
 80103cc:	42b3      	cmp	r3, r6
 80103ce:	b085      	sub	sp, #20
 80103d0:	bfb8      	it	lt
 80103d2:	3101      	addlt	r1, #1
 80103d4:	f7ff fedc 	bl	8010190 <_Balloc>
 80103d8:	b930      	cbnz	r0, 80103e8 <__multiply+0x44>
 80103da:	4602      	mov	r2, r0
 80103dc:	4b44      	ldr	r3, [pc, #272]	@ (80104f0 <__multiply+0x14c>)
 80103de:	4845      	ldr	r0, [pc, #276]	@ (80104f4 <__multiply+0x150>)
 80103e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80103e4:	f000 fb38 	bl	8010a58 <__assert_func>
 80103e8:	f100 0514 	add.w	r5, r0, #20
 80103ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80103f0:	462b      	mov	r3, r5
 80103f2:	2200      	movs	r2, #0
 80103f4:	4543      	cmp	r3, r8
 80103f6:	d321      	bcc.n	801043c <__multiply+0x98>
 80103f8:	f107 0114 	add.w	r1, r7, #20
 80103fc:	f104 0214 	add.w	r2, r4, #20
 8010400:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010404:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010408:	9302      	str	r3, [sp, #8]
 801040a:	1b13      	subs	r3, r2, r4
 801040c:	3b15      	subs	r3, #21
 801040e:	f023 0303 	bic.w	r3, r3, #3
 8010412:	3304      	adds	r3, #4
 8010414:	f104 0715 	add.w	r7, r4, #21
 8010418:	42ba      	cmp	r2, r7
 801041a:	bf38      	it	cc
 801041c:	2304      	movcc	r3, #4
 801041e:	9301      	str	r3, [sp, #4]
 8010420:	9b02      	ldr	r3, [sp, #8]
 8010422:	9103      	str	r1, [sp, #12]
 8010424:	428b      	cmp	r3, r1
 8010426:	d80c      	bhi.n	8010442 <__multiply+0x9e>
 8010428:	2e00      	cmp	r6, #0
 801042a:	dd03      	ble.n	8010434 <__multiply+0x90>
 801042c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010430:	2b00      	cmp	r3, #0
 8010432:	d05b      	beq.n	80104ec <__multiply+0x148>
 8010434:	6106      	str	r6, [r0, #16]
 8010436:	b005      	add	sp, #20
 8010438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801043c:	f843 2b04 	str.w	r2, [r3], #4
 8010440:	e7d8      	b.n	80103f4 <__multiply+0x50>
 8010442:	f8b1 a000 	ldrh.w	sl, [r1]
 8010446:	f1ba 0f00 	cmp.w	sl, #0
 801044a:	d024      	beq.n	8010496 <__multiply+0xf2>
 801044c:	f104 0e14 	add.w	lr, r4, #20
 8010450:	46a9      	mov	r9, r5
 8010452:	f04f 0c00 	mov.w	ip, #0
 8010456:	f85e 7b04 	ldr.w	r7, [lr], #4
 801045a:	f8d9 3000 	ldr.w	r3, [r9]
 801045e:	fa1f fb87 	uxth.w	fp, r7
 8010462:	b29b      	uxth	r3, r3
 8010464:	fb0a 330b 	mla	r3, sl, fp, r3
 8010468:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801046c:	f8d9 7000 	ldr.w	r7, [r9]
 8010470:	4463      	add	r3, ip
 8010472:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010476:	fb0a c70b 	mla	r7, sl, fp, ip
 801047a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801047e:	b29b      	uxth	r3, r3
 8010480:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010484:	4572      	cmp	r2, lr
 8010486:	f849 3b04 	str.w	r3, [r9], #4
 801048a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801048e:	d8e2      	bhi.n	8010456 <__multiply+0xb2>
 8010490:	9b01      	ldr	r3, [sp, #4]
 8010492:	f845 c003 	str.w	ip, [r5, r3]
 8010496:	9b03      	ldr	r3, [sp, #12]
 8010498:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801049c:	3104      	adds	r1, #4
 801049e:	f1b9 0f00 	cmp.w	r9, #0
 80104a2:	d021      	beq.n	80104e8 <__multiply+0x144>
 80104a4:	682b      	ldr	r3, [r5, #0]
 80104a6:	f104 0c14 	add.w	ip, r4, #20
 80104aa:	46ae      	mov	lr, r5
 80104ac:	f04f 0a00 	mov.w	sl, #0
 80104b0:	f8bc b000 	ldrh.w	fp, [ip]
 80104b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80104b8:	fb09 770b 	mla	r7, r9, fp, r7
 80104bc:	4457      	add	r7, sl
 80104be:	b29b      	uxth	r3, r3
 80104c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80104c4:	f84e 3b04 	str.w	r3, [lr], #4
 80104c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80104cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80104d0:	f8be 3000 	ldrh.w	r3, [lr]
 80104d4:	fb09 330a 	mla	r3, r9, sl, r3
 80104d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80104dc:	4562      	cmp	r2, ip
 80104de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80104e2:	d8e5      	bhi.n	80104b0 <__multiply+0x10c>
 80104e4:	9f01      	ldr	r7, [sp, #4]
 80104e6:	51eb      	str	r3, [r5, r7]
 80104e8:	3504      	adds	r5, #4
 80104ea:	e799      	b.n	8010420 <__multiply+0x7c>
 80104ec:	3e01      	subs	r6, #1
 80104ee:	e79b      	b.n	8010428 <__multiply+0x84>
 80104f0:	0801149c 	.word	0x0801149c
 80104f4:	080114be 	.word	0x080114be

080104f8 <__pow5mult>:
 80104f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104fc:	4615      	mov	r5, r2
 80104fe:	f012 0203 	ands.w	r2, r2, #3
 8010502:	4607      	mov	r7, r0
 8010504:	460e      	mov	r6, r1
 8010506:	d007      	beq.n	8010518 <__pow5mult+0x20>
 8010508:	4c25      	ldr	r4, [pc, #148]	@ (80105a0 <__pow5mult+0xa8>)
 801050a:	3a01      	subs	r2, #1
 801050c:	2300      	movs	r3, #0
 801050e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010512:	f7ff fe9f 	bl	8010254 <__multadd>
 8010516:	4606      	mov	r6, r0
 8010518:	10ad      	asrs	r5, r5, #2
 801051a:	d03d      	beq.n	8010598 <__pow5mult+0xa0>
 801051c:	69fc      	ldr	r4, [r7, #28]
 801051e:	b97c      	cbnz	r4, 8010540 <__pow5mult+0x48>
 8010520:	2010      	movs	r0, #16
 8010522:	f7ff fcd3 	bl	800fecc <malloc>
 8010526:	4602      	mov	r2, r0
 8010528:	61f8      	str	r0, [r7, #28]
 801052a:	b928      	cbnz	r0, 8010538 <__pow5mult+0x40>
 801052c:	4b1d      	ldr	r3, [pc, #116]	@ (80105a4 <__pow5mult+0xac>)
 801052e:	481e      	ldr	r0, [pc, #120]	@ (80105a8 <__pow5mult+0xb0>)
 8010530:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010534:	f000 fa90 	bl	8010a58 <__assert_func>
 8010538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801053c:	6004      	str	r4, [r0, #0]
 801053e:	60c4      	str	r4, [r0, #12]
 8010540:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010548:	b94c      	cbnz	r4, 801055e <__pow5mult+0x66>
 801054a:	f240 2171 	movw	r1, #625	@ 0x271
 801054e:	4638      	mov	r0, r7
 8010550:	f7ff ff12 	bl	8010378 <__i2b>
 8010554:	2300      	movs	r3, #0
 8010556:	f8c8 0008 	str.w	r0, [r8, #8]
 801055a:	4604      	mov	r4, r0
 801055c:	6003      	str	r3, [r0, #0]
 801055e:	f04f 0900 	mov.w	r9, #0
 8010562:	07eb      	lsls	r3, r5, #31
 8010564:	d50a      	bpl.n	801057c <__pow5mult+0x84>
 8010566:	4631      	mov	r1, r6
 8010568:	4622      	mov	r2, r4
 801056a:	4638      	mov	r0, r7
 801056c:	f7ff ff1a 	bl	80103a4 <__multiply>
 8010570:	4631      	mov	r1, r6
 8010572:	4680      	mov	r8, r0
 8010574:	4638      	mov	r0, r7
 8010576:	f7ff fe4b 	bl	8010210 <_Bfree>
 801057a:	4646      	mov	r6, r8
 801057c:	106d      	asrs	r5, r5, #1
 801057e:	d00b      	beq.n	8010598 <__pow5mult+0xa0>
 8010580:	6820      	ldr	r0, [r4, #0]
 8010582:	b938      	cbnz	r0, 8010594 <__pow5mult+0x9c>
 8010584:	4622      	mov	r2, r4
 8010586:	4621      	mov	r1, r4
 8010588:	4638      	mov	r0, r7
 801058a:	f7ff ff0b 	bl	80103a4 <__multiply>
 801058e:	6020      	str	r0, [r4, #0]
 8010590:	f8c0 9000 	str.w	r9, [r0]
 8010594:	4604      	mov	r4, r0
 8010596:	e7e4      	b.n	8010562 <__pow5mult+0x6a>
 8010598:	4630      	mov	r0, r6
 801059a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801059e:	bf00      	nop
 80105a0:	08011518 	.word	0x08011518
 80105a4:	0801142d 	.word	0x0801142d
 80105a8:	080114be 	.word	0x080114be

080105ac <__lshift>:
 80105ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105b0:	460c      	mov	r4, r1
 80105b2:	6849      	ldr	r1, [r1, #4]
 80105b4:	6923      	ldr	r3, [r4, #16]
 80105b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80105ba:	68a3      	ldr	r3, [r4, #8]
 80105bc:	4607      	mov	r7, r0
 80105be:	4691      	mov	r9, r2
 80105c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80105c4:	f108 0601 	add.w	r6, r8, #1
 80105c8:	42b3      	cmp	r3, r6
 80105ca:	db0b      	blt.n	80105e4 <__lshift+0x38>
 80105cc:	4638      	mov	r0, r7
 80105ce:	f7ff fddf 	bl	8010190 <_Balloc>
 80105d2:	4605      	mov	r5, r0
 80105d4:	b948      	cbnz	r0, 80105ea <__lshift+0x3e>
 80105d6:	4602      	mov	r2, r0
 80105d8:	4b28      	ldr	r3, [pc, #160]	@ (801067c <__lshift+0xd0>)
 80105da:	4829      	ldr	r0, [pc, #164]	@ (8010680 <__lshift+0xd4>)
 80105dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80105e0:	f000 fa3a 	bl	8010a58 <__assert_func>
 80105e4:	3101      	adds	r1, #1
 80105e6:	005b      	lsls	r3, r3, #1
 80105e8:	e7ee      	b.n	80105c8 <__lshift+0x1c>
 80105ea:	2300      	movs	r3, #0
 80105ec:	f100 0114 	add.w	r1, r0, #20
 80105f0:	f100 0210 	add.w	r2, r0, #16
 80105f4:	4618      	mov	r0, r3
 80105f6:	4553      	cmp	r3, sl
 80105f8:	db33      	blt.n	8010662 <__lshift+0xb6>
 80105fa:	6920      	ldr	r0, [r4, #16]
 80105fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010600:	f104 0314 	add.w	r3, r4, #20
 8010604:	f019 091f 	ands.w	r9, r9, #31
 8010608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801060c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010610:	d02b      	beq.n	801066a <__lshift+0xbe>
 8010612:	f1c9 0e20 	rsb	lr, r9, #32
 8010616:	468a      	mov	sl, r1
 8010618:	2200      	movs	r2, #0
 801061a:	6818      	ldr	r0, [r3, #0]
 801061c:	fa00 f009 	lsl.w	r0, r0, r9
 8010620:	4310      	orrs	r0, r2
 8010622:	f84a 0b04 	str.w	r0, [sl], #4
 8010626:	f853 2b04 	ldr.w	r2, [r3], #4
 801062a:	459c      	cmp	ip, r3
 801062c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010630:	d8f3      	bhi.n	801061a <__lshift+0x6e>
 8010632:	ebac 0304 	sub.w	r3, ip, r4
 8010636:	3b15      	subs	r3, #21
 8010638:	f023 0303 	bic.w	r3, r3, #3
 801063c:	3304      	adds	r3, #4
 801063e:	f104 0015 	add.w	r0, r4, #21
 8010642:	4584      	cmp	ip, r0
 8010644:	bf38      	it	cc
 8010646:	2304      	movcc	r3, #4
 8010648:	50ca      	str	r2, [r1, r3]
 801064a:	b10a      	cbz	r2, 8010650 <__lshift+0xa4>
 801064c:	f108 0602 	add.w	r6, r8, #2
 8010650:	3e01      	subs	r6, #1
 8010652:	4638      	mov	r0, r7
 8010654:	612e      	str	r6, [r5, #16]
 8010656:	4621      	mov	r1, r4
 8010658:	f7ff fdda 	bl	8010210 <_Bfree>
 801065c:	4628      	mov	r0, r5
 801065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010662:	f842 0f04 	str.w	r0, [r2, #4]!
 8010666:	3301      	adds	r3, #1
 8010668:	e7c5      	b.n	80105f6 <__lshift+0x4a>
 801066a:	3904      	subs	r1, #4
 801066c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010670:	f841 2f04 	str.w	r2, [r1, #4]!
 8010674:	459c      	cmp	ip, r3
 8010676:	d8f9      	bhi.n	801066c <__lshift+0xc0>
 8010678:	e7ea      	b.n	8010650 <__lshift+0xa4>
 801067a:	bf00      	nop
 801067c:	0801149c 	.word	0x0801149c
 8010680:	080114be 	.word	0x080114be

08010684 <__mcmp>:
 8010684:	690a      	ldr	r2, [r1, #16]
 8010686:	4603      	mov	r3, r0
 8010688:	6900      	ldr	r0, [r0, #16]
 801068a:	1a80      	subs	r0, r0, r2
 801068c:	b530      	push	{r4, r5, lr}
 801068e:	d10e      	bne.n	80106ae <__mcmp+0x2a>
 8010690:	3314      	adds	r3, #20
 8010692:	3114      	adds	r1, #20
 8010694:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010698:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801069c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80106a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80106a4:	4295      	cmp	r5, r2
 80106a6:	d003      	beq.n	80106b0 <__mcmp+0x2c>
 80106a8:	d205      	bcs.n	80106b6 <__mcmp+0x32>
 80106aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80106ae:	bd30      	pop	{r4, r5, pc}
 80106b0:	42a3      	cmp	r3, r4
 80106b2:	d3f3      	bcc.n	801069c <__mcmp+0x18>
 80106b4:	e7fb      	b.n	80106ae <__mcmp+0x2a>
 80106b6:	2001      	movs	r0, #1
 80106b8:	e7f9      	b.n	80106ae <__mcmp+0x2a>
	...

080106bc <__mdiff>:
 80106bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c0:	4689      	mov	r9, r1
 80106c2:	4606      	mov	r6, r0
 80106c4:	4611      	mov	r1, r2
 80106c6:	4648      	mov	r0, r9
 80106c8:	4614      	mov	r4, r2
 80106ca:	f7ff ffdb 	bl	8010684 <__mcmp>
 80106ce:	1e05      	subs	r5, r0, #0
 80106d0:	d112      	bne.n	80106f8 <__mdiff+0x3c>
 80106d2:	4629      	mov	r1, r5
 80106d4:	4630      	mov	r0, r6
 80106d6:	f7ff fd5b 	bl	8010190 <_Balloc>
 80106da:	4602      	mov	r2, r0
 80106dc:	b928      	cbnz	r0, 80106ea <__mdiff+0x2e>
 80106de:	4b3f      	ldr	r3, [pc, #252]	@ (80107dc <__mdiff+0x120>)
 80106e0:	f240 2137 	movw	r1, #567	@ 0x237
 80106e4:	483e      	ldr	r0, [pc, #248]	@ (80107e0 <__mdiff+0x124>)
 80106e6:	f000 f9b7 	bl	8010a58 <__assert_func>
 80106ea:	2301      	movs	r3, #1
 80106ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80106f0:	4610      	mov	r0, r2
 80106f2:	b003      	add	sp, #12
 80106f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106f8:	bfbc      	itt	lt
 80106fa:	464b      	movlt	r3, r9
 80106fc:	46a1      	movlt	r9, r4
 80106fe:	4630      	mov	r0, r6
 8010700:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010704:	bfba      	itte	lt
 8010706:	461c      	movlt	r4, r3
 8010708:	2501      	movlt	r5, #1
 801070a:	2500      	movge	r5, #0
 801070c:	f7ff fd40 	bl	8010190 <_Balloc>
 8010710:	4602      	mov	r2, r0
 8010712:	b918      	cbnz	r0, 801071c <__mdiff+0x60>
 8010714:	4b31      	ldr	r3, [pc, #196]	@ (80107dc <__mdiff+0x120>)
 8010716:	f240 2145 	movw	r1, #581	@ 0x245
 801071a:	e7e3      	b.n	80106e4 <__mdiff+0x28>
 801071c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010720:	6926      	ldr	r6, [r4, #16]
 8010722:	60c5      	str	r5, [r0, #12]
 8010724:	f109 0310 	add.w	r3, r9, #16
 8010728:	f109 0514 	add.w	r5, r9, #20
 801072c:	f104 0e14 	add.w	lr, r4, #20
 8010730:	f100 0b14 	add.w	fp, r0, #20
 8010734:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010738:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801073c:	9301      	str	r3, [sp, #4]
 801073e:	46d9      	mov	r9, fp
 8010740:	f04f 0c00 	mov.w	ip, #0
 8010744:	9b01      	ldr	r3, [sp, #4]
 8010746:	f85e 0b04 	ldr.w	r0, [lr], #4
 801074a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801074e:	9301      	str	r3, [sp, #4]
 8010750:	fa1f f38a 	uxth.w	r3, sl
 8010754:	4619      	mov	r1, r3
 8010756:	b283      	uxth	r3, r0
 8010758:	1acb      	subs	r3, r1, r3
 801075a:	0c00      	lsrs	r0, r0, #16
 801075c:	4463      	add	r3, ip
 801075e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010762:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010766:	b29b      	uxth	r3, r3
 8010768:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801076c:	4576      	cmp	r6, lr
 801076e:	f849 3b04 	str.w	r3, [r9], #4
 8010772:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010776:	d8e5      	bhi.n	8010744 <__mdiff+0x88>
 8010778:	1b33      	subs	r3, r6, r4
 801077a:	3b15      	subs	r3, #21
 801077c:	f023 0303 	bic.w	r3, r3, #3
 8010780:	3415      	adds	r4, #21
 8010782:	3304      	adds	r3, #4
 8010784:	42a6      	cmp	r6, r4
 8010786:	bf38      	it	cc
 8010788:	2304      	movcc	r3, #4
 801078a:	441d      	add	r5, r3
 801078c:	445b      	add	r3, fp
 801078e:	461e      	mov	r6, r3
 8010790:	462c      	mov	r4, r5
 8010792:	4544      	cmp	r4, r8
 8010794:	d30e      	bcc.n	80107b4 <__mdiff+0xf8>
 8010796:	f108 0103 	add.w	r1, r8, #3
 801079a:	1b49      	subs	r1, r1, r5
 801079c:	f021 0103 	bic.w	r1, r1, #3
 80107a0:	3d03      	subs	r5, #3
 80107a2:	45a8      	cmp	r8, r5
 80107a4:	bf38      	it	cc
 80107a6:	2100      	movcc	r1, #0
 80107a8:	440b      	add	r3, r1
 80107aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107ae:	b191      	cbz	r1, 80107d6 <__mdiff+0x11a>
 80107b0:	6117      	str	r7, [r2, #16]
 80107b2:	e79d      	b.n	80106f0 <__mdiff+0x34>
 80107b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80107b8:	46e6      	mov	lr, ip
 80107ba:	0c08      	lsrs	r0, r1, #16
 80107bc:	fa1c fc81 	uxtah	ip, ip, r1
 80107c0:	4471      	add	r1, lr
 80107c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80107c6:	b289      	uxth	r1, r1
 80107c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80107cc:	f846 1b04 	str.w	r1, [r6], #4
 80107d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80107d4:	e7dd      	b.n	8010792 <__mdiff+0xd6>
 80107d6:	3f01      	subs	r7, #1
 80107d8:	e7e7      	b.n	80107aa <__mdiff+0xee>
 80107da:	bf00      	nop
 80107dc:	0801149c 	.word	0x0801149c
 80107e0:	080114be 	.word	0x080114be

080107e4 <__d2b>:
 80107e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80107e8:	460f      	mov	r7, r1
 80107ea:	2101      	movs	r1, #1
 80107ec:	ec59 8b10 	vmov	r8, r9, d0
 80107f0:	4616      	mov	r6, r2
 80107f2:	f7ff fccd 	bl	8010190 <_Balloc>
 80107f6:	4604      	mov	r4, r0
 80107f8:	b930      	cbnz	r0, 8010808 <__d2b+0x24>
 80107fa:	4602      	mov	r2, r0
 80107fc:	4b23      	ldr	r3, [pc, #140]	@ (801088c <__d2b+0xa8>)
 80107fe:	4824      	ldr	r0, [pc, #144]	@ (8010890 <__d2b+0xac>)
 8010800:	f240 310f 	movw	r1, #783	@ 0x30f
 8010804:	f000 f928 	bl	8010a58 <__assert_func>
 8010808:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801080c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010810:	b10d      	cbz	r5, 8010816 <__d2b+0x32>
 8010812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010816:	9301      	str	r3, [sp, #4]
 8010818:	f1b8 0300 	subs.w	r3, r8, #0
 801081c:	d023      	beq.n	8010866 <__d2b+0x82>
 801081e:	4668      	mov	r0, sp
 8010820:	9300      	str	r3, [sp, #0]
 8010822:	f7ff fd7c 	bl	801031e <__lo0bits>
 8010826:	e9dd 1200 	ldrd	r1, r2, [sp]
 801082a:	b1d0      	cbz	r0, 8010862 <__d2b+0x7e>
 801082c:	f1c0 0320 	rsb	r3, r0, #32
 8010830:	fa02 f303 	lsl.w	r3, r2, r3
 8010834:	430b      	orrs	r3, r1
 8010836:	40c2      	lsrs	r2, r0
 8010838:	6163      	str	r3, [r4, #20]
 801083a:	9201      	str	r2, [sp, #4]
 801083c:	9b01      	ldr	r3, [sp, #4]
 801083e:	61a3      	str	r3, [r4, #24]
 8010840:	2b00      	cmp	r3, #0
 8010842:	bf0c      	ite	eq
 8010844:	2201      	moveq	r2, #1
 8010846:	2202      	movne	r2, #2
 8010848:	6122      	str	r2, [r4, #16]
 801084a:	b1a5      	cbz	r5, 8010876 <__d2b+0x92>
 801084c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010850:	4405      	add	r5, r0
 8010852:	603d      	str	r5, [r7, #0]
 8010854:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010858:	6030      	str	r0, [r6, #0]
 801085a:	4620      	mov	r0, r4
 801085c:	b003      	add	sp, #12
 801085e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010862:	6161      	str	r1, [r4, #20]
 8010864:	e7ea      	b.n	801083c <__d2b+0x58>
 8010866:	a801      	add	r0, sp, #4
 8010868:	f7ff fd59 	bl	801031e <__lo0bits>
 801086c:	9b01      	ldr	r3, [sp, #4]
 801086e:	6163      	str	r3, [r4, #20]
 8010870:	3020      	adds	r0, #32
 8010872:	2201      	movs	r2, #1
 8010874:	e7e8      	b.n	8010848 <__d2b+0x64>
 8010876:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801087a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801087e:	6038      	str	r0, [r7, #0]
 8010880:	6918      	ldr	r0, [r3, #16]
 8010882:	f7ff fd2d 	bl	80102e0 <__hi0bits>
 8010886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801088a:	e7e5      	b.n	8010858 <__d2b+0x74>
 801088c:	0801149c 	.word	0x0801149c
 8010890:	080114be 	.word	0x080114be

08010894 <__sread>:
 8010894:	b510      	push	{r4, lr}
 8010896:	460c      	mov	r4, r1
 8010898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801089c:	f000 f8a8 	bl	80109f0 <_read_r>
 80108a0:	2800      	cmp	r0, #0
 80108a2:	bfab      	itete	ge
 80108a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80108a6:	89a3      	ldrhlt	r3, [r4, #12]
 80108a8:	181b      	addge	r3, r3, r0
 80108aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80108ae:	bfac      	ite	ge
 80108b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80108b2:	81a3      	strhlt	r3, [r4, #12]
 80108b4:	bd10      	pop	{r4, pc}

080108b6 <__swrite>:
 80108b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ba:	461f      	mov	r7, r3
 80108bc:	898b      	ldrh	r3, [r1, #12]
 80108be:	05db      	lsls	r3, r3, #23
 80108c0:	4605      	mov	r5, r0
 80108c2:	460c      	mov	r4, r1
 80108c4:	4616      	mov	r6, r2
 80108c6:	d505      	bpl.n	80108d4 <__swrite+0x1e>
 80108c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108cc:	2302      	movs	r3, #2
 80108ce:	2200      	movs	r2, #0
 80108d0:	f000 f87c 	bl	80109cc <_lseek_r>
 80108d4:	89a3      	ldrh	r3, [r4, #12]
 80108d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80108de:	81a3      	strh	r3, [r4, #12]
 80108e0:	4632      	mov	r2, r6
 80108e2:	463b      	mov	r3, r7
 80108e4:	4628      	mov	r0, r5
 80108e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108ea:	f000 b8a3 	b.w	8010a34 <_write_r>

080108ee <__sseek>:
 80108ee:	b510      	push	{r4, lr}
 80108f0:	460c      	mov	r4, r1
 80108f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108f6:	f000 f869 	bl	80109cc <_lseek_r>
 80108fa:	1c43      	adds	r3, r0, #1
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	bf15      	itete	ne
 8010900:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801090a:	81a3      	strheq	r3, [r4, #12]
 801090c:	bf18      	it	ne
 801090e:	81a3      	strhne	r3, [r4, #12]
 8010910:	bd10      	pop	{r4, pc}

08010912 <__sclose>:
 8010912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010916:	f000 b849 	b.w	80109ac <_close_r>

0801091a <_realloc_r>:
 801091a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801091e:	4680      	mov	r8, r0
 8010920:	4615      	mov	r5, r2
 8010922:	460c      	mov	r4, r1
 8010924:	b921      	cbnz	r1, 8010930 <_realloc_r+0x16>
 8010926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801092a:	4611      	mov	r1, r2
 801092c:	f7ff baf8 	b.w	800ff20 <_malloc_r>
 8010930:	b92a      	cbnz	r2, 801093e <_realloc_r+0x24>
 8010932:	f7ff f929 	bl	800fb88 <_free_r>
 8010936:	2400      	movs	r4, #0
 8010938:	4620      	mov	r0, r4
 801093a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801093e:	f000 f8cf 	bl	8010ae0 <_malloc_usable_size_r>
 8010942:	4285      	cmp	r5, r0
 8010944:	4606      	mov	r6, r0
 8010946:	d802      	bhi.n	801094e <_realloc_r+0x34>
 8010948:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801094c:	d8f4      	bhi.n	8010938 <_realloc_r+0x1e>
 801094e:	4629      	mov	r1, r5
 8010950:	4640      	mov	r0, r8
 8010952:	f7ff fae5 	bl	800ff20 <_malloc_r>
 8010956:	4607      	mov	r7, r0
 8010958:	2800      	cmp	r0, #0
 801095a:	d0ec      	beq.n	8010936 <_realloc_r+0x1c>
 801095c:	42b5      	cmp	r5, r6
 801095e:	462a      	mov	r2, r5
 8010960:	4621      	mov	r1, r4
 8010962:	bf28      	it	cs
 8010964:	4632      	movcs	r2, r6
 8010966:	f7fe fab2 	bl	800eece <memcpy>
 801096a:	4621      	mov	r1, r4
 801096c:	4640      	mov	r0, r8
 801096e:	f7ff f90b 	bl	800fb88 <_free_r>
 8010972:	463c      	mov	r4, r7
 8010974:	e7e0      	b.n	8010938 <_realloc_r+0x1e>

08010976 <memmove>:
 8010976:	4288      	cmp	r0, r1
 8010978:	b510      	push	{r4, lr}
 801097a:	eb01 0402 	add.w	r4, r1, r2
 801097e:	d902      	bls.n	8010986 <memmove+0x10>
 8010980:	4284      	cmp	r4, r0
 8010982:	4623      	mov	r3, r4
 8010984:	d807      	bhi.n	8010996 <memmove+0x20>
 8010986:	1e43      	subs	r3, r0, #1
 8010988:	42a1      	cmp	r1, r4
 801098a:	d008      	beq.n	801099e <memmove+0x28>
 801098c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010990:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010994:	e7f8      	b.n	8010988 <memmove+0x12>
 8010996:	4402      	add	r2, r0
 8010998:	4601      	mov	r1, r0
 801099a:	428a      	cmp	r2, r1
 801099c:	d100      	bne.n	80109a0 <memmove+0x2a>
 801099e:	bd10      	pop	{r4, pc}
 80109a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109a8:	e7f7      	b.n	801099a <memmove+0x24>
	...

080109ac <_close_r>:
 80109ac:	b538      	push	{r3, r4, r5, lr}
 80109ae:	4d06      	ldr	r5, [pc, #24]	@ (80109c8 <_close_r+0x1c>)
 80109b0:	2300      	movs	r3, #0
 80109b2:	4604      	mov	r4, r0
 80109b4:	4608      	mov	r0, r1
 80109b6:	602b      	str	r3, [r5, #0]
 80109b8:	f7f1 f9a6 	bl	8001d08 <_close>
 80109bc:	1c43      	adds	r3, r0, #1
 80109be:	d102      	bne.n	80109c6 <_close_r+0x1a>
 80109c0:	682b      	ldr	r3, [r5, #0]
 80109c2:	b103      	cbz	r3, 80109c6 <_close_r+0x1a>
 80109c4:	6023      	str	r3, [r4, #0]
 80109c6:	bd38      	pop	{r3, r4, r5, pc}
 80109c8:	200077d8 	.word	0x200077d8

080109cc <_lseek_r>:
 80109cc:	b538      	push	{r3, r4, r5, lr}
 80109ce:	4d07      	ldr	r5, [pc, #28]	@ (80109ec <_lseek_r+0x20>)
 80109d0:	4604      	mov	r4, r0
 80109d2:	4608      	mov	r0, r1
 80109d4:	4611      	mov	r1, r2
 80109d6:	2200      	movs	r2, #0
 80109d8:	602a      	str	r2, [r5, #0]
 80109da:	461a      	mov	r2, r3
 80109dc:	f7f1 f9bb 	bl	8001d56 <_lseek>
 80109e0:	1c43      	adds	r3, r0, #1
 80109e2:	d102      	bne.n	80109ea <_lseek_r+0x1e>
 80109e4:	682b      	ldr	r3, [r5, #0]
 80109e6:	b103      	cbz	r3, 80109ea <_lseek_r+0x1e>
 80109e8:	6023      	str	r3, [r4, #0]
 80109ea:	bd38      	pop	{r3, r4, r5, pc}
 80109ec:	200077d8 	.word	0x200077d8

080109f0 <_read_r>:
 80109f0:	b538      	push	{r3, r4, r5, lr}
 80109f2:	4d07      	ldr	r5, [pc, #28]	@ (8010a10 <_read_r+0x20>)
 80109f4:	4604      	mov	r4, r0
 80109f6:	4608      	mov	r0, r1
 80109f8:	4611      	mov	r1, r2
 80109fa:	2200      	movs	r2, #0
 80109fc:	602a      	str	r2, [r5, #0]
 80109fe:	461a      	mov	r2, r3
 8010a00:	f7f1 f949 	bl	8001c96 <_read>
 8010a04:	1c43      	adds	r3, r0, #1
 8010a06:	d102      	bne.n	8010a0e <_read_r+0x1e>
 8010a08:	682b      	ldr	r3, [r5, #0]
 8010a0a:	b103      	cbz	r3, 8010a0e <_read_r+0x1e>
 8010a0c:	6023      	str	r3, [r4, #0]
 8010a0e:	bd38      	pop	{r3, r4, r5, pc}
 8010a10:	200077d8 	.word	0x200077d8

08010a14 <_sbrk_r>:
 8010a14:	b538      	push	{r3, r4, r5, lr}
 8010a16:	4d06      	ldr	r5, [pc, #24]	@ (8010a30 <_sbrk_r+0x1c>)
 8010a18:	2300      	movs	r3, #0
 8010a1a:	4604      	mov	r4, r0
 8010a1c:	4608      	mov	r0, r1
 8010a1e:	602b      	str	r3, [r5, #0]
 8010a20:	f7f1 f9a6 	bl	8001d70 <_sbrk>
 8010a24:	1c43      	adds	r3, r0, #1
 8010a26:	d102      	bne.n	8010a2e <_sbrk_r+0x1a>
 8010a28:	682b      	ldr	r3, [r5, #0]
 8010a2a:	b103      	cbz	r3, 8010a2e <_sbrk_r+0x1a>
 8010a2c:	6023      	str	r3, [r4, #0]
 8010a2e:	bd38      	pop	{r3, r4, r5, pc}
 8010a30:	200077d8 	.word	0x200077d8

08010a34 <_write_r>:
 8010a34:	b538      	push	{r3, r4, r5, lr}
 8010a36:	4d07      	ldr	r5, [pc, #28]	@ (8010a54 <_write_r+0x20>)
 8010a38:	4604      	mov	r4, r0
 8010a3a:	4608      	mov	r0, r1
 8010a3c:	4611      	mov	r1, r2
 8010a3e:	2200      	movs	r2, #0
 8010a40:	602a      	str	r2, [r5, #0]
 8010a42:	461a      	mov	r2, r3
 8010a44:	f7f1 f944 	bl	8001cd0 <_write>
 8010a48:	1c43      	adds	r3, r0, #1
 8010a4a:	d102      	bne.n	8010a52 <_write_r+0x1e>
 8010a4c:	682b      	ldr	r3, [r5, #0]
 8010a4e:	b103      	cbz	r3, 8010a52 <_write_r+0x1e>
 8010a50:	6023      	str	r3, [r4, #0]
 8010a52:	bd38      	pop	{r3, r4, r5, pc}
 8010a54:	200077d8 	.word	0x200077d8

08010a58 <__assert_func>:
 8010a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a5a:	4614      	mov	r4, r2
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	4b09      	ldr	r3, [pc, #36]	@ (8010a84 <__assert_func+0x2c>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	4605      	mov	r5, r0
 8010a64:	68d8      	ldr	r0, [r3, #12]
 8010a66:	b954      	cbnz	r4, 8010a7e <__assert_func+0x26>
 8010a68:	4b07      	ldr	r3, [pc, #28]	@ (8010a88 <__assert_func+0x30>)
 8010a6a:	461c      	mov	r4, r3
 8010a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a70:	9100      	str	r1, [sp, #0]
 8010a72:	462b      	mov	r3, r5
 8010a74:	4905      	ldr	r1, [pc, #20]	@ (8010a8c <__assert_func+0x34>)
 8010a76:	f000 f83b 	bl	8010af0 <fiprintf>
 8010a7a:	f000 f858 	bl	8010b2e <abort>
 8010a7e:	4b04      	ldr	r3, [pc, #16]	@ (8010a90 <__assert_func+0x38>)
 8010a80:	e7f4      	b.n	8010a6c <__assert_func+0x14>
 8010a82:	bf00      	nop
 8010a84:	20000194 	.word	0x20000194
 8010a88:	0801175e 	.word	0x0801175e
 8010a8c:	08011730 	.word	0x08011730
 8010a90:	08011723 	.word	0x08011723

08010a94 <_calloc_r>:
 8010a94:	b570      	push	{r4, r5, r6, lr}
 8010a96:	fba1 5402 	umull	r5, r4, r1, r2
 8010a9a:	b93c      	cbnz	r4, 8010aac <_calloc_r+0x18>
 8010a9c:	4629      	mov	r1, r5
 8010a9e:	f7ff fa3f 	bl	800ff20 <_malloc_r>
 8010aa2:	4606      	mov	r6, r0
 8010aa4:	b928      	cbnz	r0, 8010ab2 <_calloc_r+0x1e>
 8010aa6:	2600      	movs	r6, #0
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	bd70      	pop	{r4, r5, r6, pc}
 8010aac:	220c      	movs	r2, #12
 8010aae:	6002      	str	r2, [r0, #0]
 8010ab0:	e7f9      	b.n	8010aa6 <_calloc_r+0x12>
 8010ab2:	462a      	mov	r2, r5
 8010ab4:	4621      	mov	r1, r4
 8010ab6:	f7fe f97b 	bl	800edb0 <memset>
 8010aba:	e7f5      	b.n	8010aa8 <_calloc_r+0x14>

08010abc <__ascii_mbtowc>:
 8010abc:	b082      	sub	sp, #8
 8010abe:	b901      	cbnz	r1, 8010ac2 <__ascii_mbtowc+0x6>
 8010ac0:	a901      	add	r1, sp, #4
 8010ac2:	b142      	cbz	r2, 8010ad6 <__ascii_mbtowc+0x1a>
 8010ac4:	b14b      	cbz	r3, 8010ada <__ascii_mbtowc+0x1e>
 8010ac6:	7813      	ldrb	r3, [r2, #0]
 8010ac8:	600b      	str	r3, [r1, #0]
 8010aca:	7812      	ldrb	r2, [r2, #0]
 8010acc:	1e10      	subs	r0, r2, #0
 8010ace:	bf18      	it	ne
 8010ad0:	2001      	movne	r0, #1
 8010ad2:	b002      	add	sp, #8
 8010ad4:	4770      	bx	lr
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	e7fb      	b.n	8010ad2 <__ascii_mbtowc+0x16>
 8010ada:	f06f 0001 	mvn.w	r0, #1
 8010ade:	e7f8      	b.n	8010ad2 <__ascii_mbtowc+0x16>

08010ae0 <_malloc_usable_size_r>:
 8010ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ae4:	1f18      	subs	r0, r3, #4
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	bfbc      	itt	lt
 8010aea:	580b      	ldrlt	r3, [r1, r0]
 8010aec:	18c0      	addlt	r0, r0, r3
 8010aee:	4770      	bx	lr

08010af0 <fiprintf>:
 8010af0:	b40e      	push	{r1, r2, r3}
 8010af2:	b503      	push	{r0, r1, lr}
 8010af4:	4601      	mov	r1, r0
 8010af6:	ab03      	add	r3, sp, #12
 8010af8:	4805      	ldr	r0, [pc, #20]	@ (8010b10 <fiprintf+0x20>)
 8010afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010afe:	6800      	ldr	r0, [r0, #0]
 8010b00:	9301      	str	r3, [sp, #4]
 8010b02:	f000 f845 	bl	8010b90 <_vfiprintf_r>
 8010b06:	b002      	add	sp, #8
 8010b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b0c:	b003      	add	sp, #12
 8010b0e:	4770      	bx	lr
 8010b10:	20000194 	.word	0x20000194

08010b14 <__ascii_wctomb>:
 8010b14:	4603      	mov	r3, r0
 8010b16:	4608      	mov	r0, r1
 8010b18:	b141      	cbz	r1, 8010b2c <__ascii_wctomb+0x18>
 8010b1a:	2aff      	cmp	r2, #255	@ 0xff
 8010b1c:	d904      	bls.n	8010b28 <__ascii_wctomb+0x14>
 8010b1e:	228a      	movs	r2, #138	@ 0x8a
 8010b20:	601a      	str	r2, [r3, #0]
 8010b22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b26:	4770      	bx	lr
 8010b28:	700a      	strb	r2, [r1, #0]
 8010b2a:	2001      	movs	r0, #1
 8010b2c:	4770      	bx	lr

08010b2e <abort>:
 8010b2e:	b508      	push	{r3, lr}
 8010b30:	2006      	movs	r0, #6
 8010b32:	f000 fa85 	bl	8011040 <raise>
 8010b36:	2001      	movs	r0, #1
 8010b38:	f7f1 f8a2 	bl	8001c80 <_exit>

08010b3c <__sfputc_r>:
 8010b3c:	6893      	ldr	r3, [r2, #8]
 8010b3e:	3b01      	subs	r3, #1
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	b410      	push	{r4}
 8010b44:	6093      	str	r3, [r2, #8]
 8010b46:	da08      	bge.n	8010b5a <__sfputc_r+0x1e>
 8010b48:	6994      	ldr	r4, [r2, #24]
 8010b4a:	42a3      	cmp	r3, r4
 8010b4c:	db01      	blt.n	8010b52 <__sfputc_r+0x16>
 8010b4e:	290a      	cmp	r1, #10
 8010b50:	d103      	bne.n	8010b5a <__sfputc_r+0x1e>
 8010b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b56:	f000 b933 	b.w	8010dc0 <__swbuf_r>
 8010b5a:	6813      	ldr	r3, [r2, #0]
 8010b5c:	1c58      	adds	r0, r3, #1
 8010b5e:	6010      	str	r0, [r2, #0]
 8010b60:	7019      	strb	r1, [r3, #0]
 8010b62:	4608      	mov	r0, r1
 8010b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b68:	4770      	bx	lr

08010b6a <__sfputs_r>:
 8010b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b6c:	4606      	mov	r6, r0
 8010b6e:	460f      	mov	r7, r1
 8010b70:	4614      	mov	r4, r2
 8010b72:	18d5      	adds	r5, r2, r3
 8010b74:	42ac      	cmp	r4, r5
 8010b76:	d101      	bne.n	8010b7c <__sfputs_r+0x12>
 8010b78:	2000      	movs	r0, #0
 8010b7a:	e007      	b.n	8010b8c <__sfputs_r+0x22>
 8010b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b80:	463a      	mov	r2, r7
 8010b82:	4630      	mov	r0, r6
 8010b84:	f7ff ffda 	bl	8010b3c <__sfputc_r>
 8010b88:	1c43      	adds	r3, r0, #1
 8010b8a:	d1f3      	bne.n	8010b74 <__sfputs_r+0xa>
 8010b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010b90 <_vfiprintf_r>:
 8010b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b94:	460d      	mov	r5, r1
 8010b96:	b09d      	sub	sp, #116	@ 0x74
 8010b98:	4614      	mov	r4, r2
 8010b9a:	4698      	mov	r8, r3
 8010b9c:	4606      	mov	r6, r0
 8010b9e:	b118      	cbz	r0, 8010ba8 <_vfiprintf_r+0x18>
 8010ba0:	6a03      	ldr	r3, [r0, #32]
 8010ba2:	b90b      	cbnz	r3, 8010ba8 <_vfiprintf_r+0x18>
 8010ba4:	f7fe f8ae 	bl	800ed04 <__sinit>
 8010ba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010baa:	07d9      	lsls	r1, r3, #31
 8010bac:	d405      	bmi.n	8010bba <_vfiprintf_r+0x2a>
 8010bae:	89ab      	ldrh	r3, [r5, #12]
 8010bb0:	059a      	lsls	r2, r3, #22
 8010bb2:	d402      	bmi.n	8010bba <_vfiprintf_r+0x2a>
 8010bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010bb6:	f7fe f988 	bl	800eeca <__retarget_lock_acquire_recursive>
 8010bba:	89ab      	ldrh	r3, [r5, #12]
 8010bbc:	071b      	lsls	r3, r3, #28
 8010bbe:	d501      	bpl.n	8010bc4 <_vfiprintf_r+0x34>
 8010bc0:	692b      	ldr	r3, [r5, #16]
 8010bc2:	b99b      	cbnz	r3, 8010bec <_vfiprintf_r+0x5c>
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	f000 f938 	bl	8010e3c <__swsetup_r>
 8010bcc:	b170      	cbz	r0, 8010bec <_vfiprintf_r+0x5c>
 8010bce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010bd0:	07dc      	lsls	r4, r3, #31
 8010bd2:	d504      	bpl.n	8010bde <_vfiprintf_r+0x4e>
 8010bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010bd8:	b01d      	add	sp, #116	@ 0x74
 8010bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bde:	89ab      	ldrh	r3, [r5, #12]
 8010be0:	0598      	lsls	r0, r3, #22
 8010be2:	d4f7      	bmi.n	8010bd4 <_vfiprintf_r+0x44>
 8010be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010be6:	f7fe f971 	bl	800eecc <__retarget_lock_release_recursive>
 8010bea:	e7f3      	b.n	8010bd4 <_vfiprintf_r+0x44>
 8010bec:	2300      	movs	r3, #0
 8010bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bf0:	2320      	movs	r3, #32
 8010bf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010bfa:	2330      	movs	r3, #48	@ 0x30
 8010bfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010dac <_vfiprintf_r+0x21c>
 8010c00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010c04:	f04f 0901 	mov.w	r9, #1
 8010c08:	4623      	mov	r3, r4
 8010c0a:	469a      	mov	sl, r3
 8010c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c10:	b10a      	cbz	r2, 8010c16 <_vfiprintf_r+0x86>
 8010c12:	2a25      	cmp	r2, #37	@ 0x25
 8010c14:	d1f9      	bne.n	8010c0a <_vfiprintf_r+0x7a>
 8010c16:	ebba 0b04 	subs.w	fp, sl, r4
 8010c1a:	d00b      	beq.n	8010c34 <_vfiprintf_r+0xa4>
 8010c1c:	465b      	mov	r3, fp
 8010c1e:	4622      	mov	r2, r4
 8010c20:	4629      	mov	r1, r5
 8010c22:	4630      	mov	r0, r6
 8010c24:	f7ff ffa1 	bl	8010b6a <__sfputs_r>
 8010c28:	3001      	adds	r0, #1
 8010c2a:	f000 80a7 	beq.w	8010d7c <_vfiprintf_r+0x1ec>
 8010c2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c30:	445a      	add	r2, fp
 8010c32:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c34:	f89a 3000 	ldrb.w	r3, [sl]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f000 809f 	beq.w	8010d7c <_vfiprintf_r+0x1ec>
 8010c3e:	2300      	movs	r3, #0
 8010c40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c48:	f10a 0a01 	add.w	sl, sl, #1
 8010c4c:	9304      	str	r3, [sp, #16]
 8010c4e:	9307      	str	r3, [sp, #28]
 8010c50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010c54:	931a      	str	r3, [sp, #104]	@ 0x68
 8010c56:	4654      	mov	r4, sl
 8010c58:	2205      	movs	r2, #5
 8010c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c5e:	4853      	ldr	r0, [pc, #332]	@ (8010dac <_vfiprintf_r+0x21c>)
 8010c60:	f7ef fade 	bl	8000220 <memchr>
 8010c64:	9a04      	ldr	r2, [sp, #16]
 8010c66:	b9d8      	cbnz	r0, 8010ca0 <_vfiprintf_r+0x110>
 8010c68:	06d1      	lsls	r1, r2, #27
 8010c6a:	bf44      	itt	mi
 8010c6c:	2320      	movmi	r3, #32
 8010c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c72:	0713      	lsls	r3, r2, #28
 8010c74:	bf44      	itt	mi
 8010c76:	232b      	movmi	r3, #43	@ 0x2b
 8010c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8010c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c82:	d015      	beq.n	8010cb0 <_vfiprintf_r+0x120>
 8010c84:	9a07      	ldr	r2, [sp, #28]
 8010c86:	4654      	mov	r4, sl
 8010c88:	2000      	movs	r0, #0
 8010c8a:	f04f 0c0a 	mov.w	ip, #10
 8010c8e:	4621      	mov	r1, r4
 8010c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c94:	3b30      	subs	r3, #48	@ 0x30
 8010c96:	2b09      	cmp	r3, #9
 8010c98:	d94b      	bls.n	8010d32 <_vfiprintf_r+0x1a2>
 8010c9a:	b1b0      	cbz	r0, 8010cca <_vfiprintf_r+0x13a>
 8010c9c:	9207      	str	r2, [sp, #28]
 8010c9e:	e014      	b.n	8010cca <_vfiprintf_r+0x13a>
 8010ca0:	eba0 0308 	sub.w	r3, r0, r8
 8010ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	9304      	str	r3, [sp, #16]
 8010cac:	46a2      	mov	sl, r4
 8010cae:	e7d2      	b.n	8010c56 <_vfiprintf_r+0xc6>
 8010cb0:	9b03      	ldr	r3, [sp, #12]
 8010cb2:	1d19      	adds	r1, r3, #4
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	9103      	str	r1, [sp, #12]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	bfbb      	ittet	lt
 8010cbc:	425b      	neglt	r3, r3
 8010cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8010cc2:	9307      	strge	r3, [sp, #28]
 8010cc4:	9307      	strlt	r3, [sp, #28]
 8010cc6:	bfb8      	it	lt
 8010cc8:	9204      	strlt	r2, [sp, #16]
 8010cca:	7823      	ldrb	r3, [r4, #0]
 8010ccc:	2b2e      	cmp	r3, #46	@ 0x2e
 8010cce:	d10a      	bne.n	8010ce6 <_vfiprintf_r+0x156>
 8010cd0:	7863      	ldrb	r3, [r4, #1]
 8010cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010cd4:	d132      	bne.n	8010d3c <_vfiprintf_r+0x1ac>
 8010cd6:	9b03      	ldr	r3, [sp, #12]
 8010cd8:	1d1a      	adds	r2, r3, #4
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	9203      	str	r2, [sp, #12]
 8010cde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010ce2:	3402      	adds	r4, #2
 8010ce4:	9305      	str	r3, [sp, #20]
 8010ce6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010dbc <_vfiprintf_r+0x22c>
 8010cea:	7821      	ldrb	r1, [r4, #0]
 8010cec:	2203      	movs	r2, #3
 8010cee:	4650      	mov	r0, sl
 8010cf0:	f7ef fa96 	bl	8000220 <memchr>
 8010cf4:	b138      	cbz	r0, 8010d06 <_vfiprintf_r+0x176>
 8010cf6:	9b04      	ldr	r3, [sp, #16]
 8010cf8:	eba0 000a 	sub.w	r0, r0, sl
 8010cfc:	2240      	movs	r2, #64	@ 0x40
 8010cfe:	4082      	lsls	r2, r0
 8010d00:	4313      	orrs	r3, r2
 8010d02:	3401      	adds	r4, #1
 8010d04:	9304      	str	r3, [sp, #16]
 8010d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d0a:	4829      	ldr	r0, [pc, #164]	@ (8010db0 <_vfiprintf_r+0x220>)
 8010d0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010d10:	2206      	movs	r2, #6
 8010d12:	f7ef fa85 	bl	8000220 <memchr>
 8010d16:	2800      	cmp	r0, #0
 8010d18:	d03f      	beq.n	8010d9a <_vfiprintf_r+0x20a>
 8010d1a:	4b26      	ldr	r3, [pc, #152]	@ (8010db4 <_vfiprintf_r+0x224>)
 8010d1c:	bb1b      	cbnz	r3, 8010d66 <_vfiprintf_r+0x1d6>
 8010d1e:	9b03      	ldr	r3, [sp, #12]
 8010d20:	3307      	adds	r3, #7
 8010d22:	f023 0307 	bic.w	r3, r3, #7
 8010d26:	3308      	adds	r3, #8
 8010d28:	9303      	str	r3, [sp, #12]
 8010d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d2c:	443b      	add	r3, r7
 8010d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d30:	e76a      	b.n	8010c08 <_vfiprintf_r+0x78>
 8010d32:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d36:	460c      	mov	r4, r1
 8010d38:	2001      	movs	r0, #1
 8010d3a:	e7a8      	b.n	8010c8e <_vfiprintf_r+0xfe>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	3401      	adds	r4, #1
 8010d40:	9305      	str	r3, [sp, #20]
 8010d42:	4619      	mov	r1, r3
 8010d44:	f04f 0c0a 	mov.w	ip, #10
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d4e:	3a30      	subs	r2, #48	@ 0x30
 8010d50:	2a09      	cmp	r2, #9
 8010d52:	d903      	bls.n	8010d5c <_vfiprintf_r+0x1cc>
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d0c6      	beq.n	8010ce6 <_vfiprintf_r+0x156>
 8010d58:	9105      	str	r1, [sp, #20]
 8010d5a:	e7c4      	b.n	8010ce6 <_vfiprintf_r+0x156>
 8010d5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d60:	4604      	mov	r4, r0
 8010d62:	2301      	movs	r3, #1
 8010d64:	e7f0      	b.n	8010d48 <_vfiprintf_r+0x1b8>
 8010d66:	ab03      	add	r3, sp, #12
 8010d68:	9300      	str	r3, [sp, #0]
 8010d6a:	462a      	mov	r2, r5
 8010d6c:	4b12      	ldr	r3, [pc, #72]	@ (8010db8 <_vfiprintf_r+0x228>)
 8010d6e:	a904      	add	r1, sp, #16
 8010d70:	4630      	mov	r0, r6
 8010d72:	f7fd fb83 	bl	800e47c <_printf_float>
 8010d76:	4607      	mov	r7, r0
 8010d78:	1c78      	adds	r0, r7, #1
 8010d7a:	d1d6      	bne.n	8010d2a <_vfiprintf_r+0x19a>
 8010d7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d7e:	07d9      	lsls	r1, r3, #31
 8010d80:	d405      	bmi.n	8010d8e <_vfiprintf_r+0x1fe>
 8010d82:	89ab      	ldrh	r3, [r5, #12]
 8010d84:	059a      	lsls	r2, r3, #22
 8010d86:	d402      	bmi.n	8010d8e <_vfiprintf_r+0x1fe>
 8010d88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d8a:	f7fe f89f 	bl	800eecc <__retarget_lock_release_recursive>
 8010d8e:	89ab      	ldrh	r3, [r5, #12]
 8010d90:	065b      	lsls	r3, r3, #25
 8010d92:	f53f af1f 	bmi.w	8010bd4 <_vfiprintf_r+0x44>
 8010d96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d98:	e71e      	b.n	8010bd8 <_vfiprintf_r+0x48>
 8010d9a:	ab03      	add	r3, sp, #12
 8010d9c:	9300      	str	r3, [sp, #0]
 8010d9e:	462a      	mov	r2, r5
 8010da0:	4b05      	ldr	r3, [pc, #20]	@ (8010db8 <_vfiprintf_r+0x228>)
 8010da2:	a904      	add	r1, sp, #16
 8010da4:	4630      	mov	r0, r6
 8010da6:	f7fd fe01 	bl	800e9ac <_printf_i>
 8010daa:	e7e4      	b.n	8010d76 <_vfiprintf_r+0x1e6>
 8010dac:	080114ad 	.word	0x080114ad
 8010db0:	080114b7 	.word	0x080114b7
 8010db4:	0800e47d 	.word	0x0800e47d
 8010db8:	08010b6b 	.word	0x08010b6b
 8010dbc:	080114b3 	.word	0x080114b3

08010dc0 <__swbuf_r>:
 8010dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dc2:	460e      	mov	r6, r1
 8010dc4:	4614      	mov	r4, r2
 8010dc6:	4605      	mov	r5, r0
 8010dc8:	b118      	cbz	r0, 8010dd2 <__swbuf_r+0x12>
 8010dca:	6a03      	ldr	r3, [r0, #32]
 8010dcc:	b90b      	cbnz	r3, 8010dd2 <__swbuf_r+0x12>
 8010dce:	f7fd ff99 	bl	800ed04 <__sinit>
 8010dd2:	69a3      	ldr	r3, [r4, #24]
 8010dd4:	60a3      	str	r3, [r4, #8]
 8010dd6:	89a3      	ldrh	r3, [r4, #12]
 8010dd8:	071a      	lsls	r2, r3, #28
 8010dda:	d501      	bpl.n	8010de0 <__swbuf_r+0x20>
 8010ddc:	6923      	ldr	r3, [r4, #16]
 8010dde:	b943      	cbnz	r3, 8010df2 <__swbuf_r+0x32>
 8010de0:	4621      	mov	r1, r4
 8010de2:	4628      	mov	r0, r5
 8010de4:	f000 f82a 	bl	8010e3c <__swsetup_r>
 8010de8:	b118      	cbz	r0, 8010df2 <__swbuf_r+0x32>
 8010dea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010dee:	4638      	mov	r0, r7
 8010df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010df2:	6823      	ldr	r3, [r4, #0]
 8010df4:	6922      	ldr	r2, [r4, #16]
 8010df6:	1a98      	subs	r0, r3, r2
 8010df8:	6963      	ldr	r3, [r4, #20]
 8010dfa:	b2f6      	uxtb	r6, r6
 8010dfc:	4283      	cmp	r3, r0
 8010dfe:	4637      	mov	r7, r6
 8010e00:	dc05      	bgt.n	8010e0e <__swbuf_r+0x4e>
 8010e02:	4621      	mov	r1, r4
 8010e04:	4628      	mov	r0, r5
 8010e06:	f7ff f98f 	bl	8010128 <_fflush_r>
 8010e0a:	2800      	cmp	r0, #0
 8010e0c:	d1ed      	bne.n	8010dea <__swbuf_r+0x2a>
 8010e0e:	68a3      	ldr	r3, [r4, #8]
 8010e10:	3b01      	subs	r3, #1
 8010e12:	60a3      	str	r3, [r4, #8]
 8010e14:	6823      	ldr	r3, [r4, #0]
 8010e16:	1c5a      	adds	r2, r3, #1
 8010e18:	6022      	str	r2, [r4, #0]
 8010e1a:	701e      	strb	r6, [r3, #0]
 8010e1c:	6962      	ldr	r2, [r4, #20]
 8010e1e:	1c43      	adds	r3, r0, #1
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d004      	beq.n	8010e2e <__swbuf_r+0x6e>
 8010e24:	89a3      	ldrh	r3, [r4, #12]
 8010e26:	07db      	lsls	r3, r3, #31
 8010e28:	d5e1      	bpl.n	8010dee <__swbuf_r+0x2e>
 8010e2a:	2e0a      	cmp	r6, #10
 8010e2c:	d1df      	bne.n	8010dee <__swbuf_r+0x2e>
 8010e2e:	4621      	mov	r1, r4
 8010e30:	4628      	mov	r0, r5
 8010e32:	f7ff f979 	bl	8010128 <_fflush_r>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d0d9      	beq.n	8010dee <__swbuf_r+0x2e>
 8010e3a:	e7d6      	b.n	8010dea <__swbuf_r+0x2a>

08010e3c <__swsetup_r>:
 8010e3c:	b538      	push	{r3, r4, r5, lr}
 8010e3e:	4b29      	ldr	r3, [pc, #164]	@ (8010ee4 <__swsetup_r+0xa8>)
 8010e40:	4605      	mov	r5, r0
 8010e42:	6818      	ldr	r0, [r3, #0]
 8010e44:	460c      	mov	r4, r1
 8010e46:	b118      	cbz	r0, 8010e50 <__swsetup_r+0x14>
 8010e48:	6a03      	ldr	r3, [r0, #32]
 8010e4a:	b90b      	cbnz	r3, 8010e50 <__swsetup_r+0x14>
 8010e4c:	f7fd ff5a 	bl	800ed04 <__sinit>
 8010e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e54:	0719      	lsls	r1, r3, #28
 8010e56:	d422      	bmi.n	8010e9e <__swsetup_r+0x62>
 8010e58:	06da      	lsls	r2, r3, #27
 8010e5a:	d407      	bmi.n	8010e6c <__swsetup_r+0x30>
 8010e5c:	2209      	movs	r2, #9
 8010e5e:	602a      	str	r2, [r5, #0]
 8010e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e64:	81a3      	strh	r3, [r4, #12]
 8010e66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e6a:	e033      	b.n	8010ed4 <__swsetup_r+0x98>
 8010e6c:	0758      	lsls	r0, r3, #29
 8010e6e:	d512      	bpl.n	8010e96 <__swsetup_r+0x5a>
 8010e70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e72:	b141      	cbz	r1, 8010e86 <__swsetup_r+0x4a>
 8010e74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e78:	4299      	cmp	r1, r3
 8010e7a:	d002      	beq.n	8010e82 <__swsetup_r+0x46>
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	f7fe fe83 	bl	800fb88 <_free_r>
 8010e82:	2300      	movs	r3, #0
 8010e84:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e86:	89a3      	ldrh	r3, [r4, #12]
 8010e88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010e8c:	81a3      	strh	r3, [r4, #12]
 8010e8e:	2300      	movs	r3, #0
 8010e90:	6063      	str	r3, [r4, #4]
 8010e92:	6923      	ldr	r3, [r4, #16]
 8010e94:	6023      	str	r3, [r4, #0]
 8010e96:	89a3      	ldrh	r3, [r4, #12]
 8010e98:	f043 0308 	orr.w	r3, r3, #8
 8010e9c:	81a3      	strh	r3, [r4, #12]
 8010e9e:	6923      	ldr	r3, [r4, #16]
 8010ea0:	b94b      	cbnz	r3, 8010eb6 <__swsetup_r+0x7a>
 8010ea2:	89a3      	ldrh	r3, [r4, #12]
 8010ea4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010eac:	d003      	beq.n	8010eb6 <__swsetup_r+0x7a>
 8010eae:	4621      	mov	r1, r4
 8010eb0:	4628      	mov	r0, r5
 8010eb2:	f000 f83f 	bl	8010f34 <__smakebuf_r>
 8010eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eba:	f013 0201 	ands.w	r2, r3, #1
 8010ebe:	d00a      	beq.n	8010ed6 <__swsetup_r+0x9a>
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	60a2      	str	r2, [r4, #8]
 8010ec4:	6962      	ldr	r2, [r4, #20]
 8010ec6:	4252      	negs	r2, r2
 8010ec8:	61a2      	str	r2, [r4, #24]
 8010eca:	6922      	ldr	r2, [r4, #16]
 8010ecc:	b942      	cbnz	r2, 8010ee0 <__swsetup_r+0xa4>
 8010ece:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010ed2:	d1c5      	bne.n	8010e60 <__swsetup_r+0x24>
 8010ed4:	bd38      	pop	{r3, r4, r5, pc}
 8010ed6:	0799      	lsls	r1, r3, #30
 8010ed8:	bf58      	it	pl
 8010eda:	6962      	ldrpl	r2, [r4, #20]
 8010edc:	60a2      	str	r2, [r4, #8]
 8010ede:	e7f4      	b.n	8010eca <__swsetup_r+0x8e>
 8010ee0:	2000      	movs	r0, #0
 8010ee2:	e7f7      	b.n	8010ed4 <__swsetup_r+0x98>
 8010ee4:	20000194 	.word	0x20000194

08010ee8 <__swhatbuf_r>:
 8010ee8:	b570      	push	{r4, r5, r6, lr}
 8010eea:	460c      	mov	r4, r1
 8010eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ef0:	2900      	cmp	r1, #0
 8010ef2:	b096      	sub	sp, #88	@ 0x58
 8010ef4:	4615      	mov	r5, r2
 8010ef6:	461e      	mov	r6, r3
 8010ef8:	da0d      	bge.n	8010f16 <__swhatbuf_r+0x2e>
 8010efa:	89a3      	ldrh	r3, [r4, #12]
 8010efc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010f00:	f04f 0100 	mov.w	r1, #0
 8010f04:	bf14      	ite	ne
 8010f06:	2340      	movne	r3, #64	@ 0x40
 8010f08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010f0c:	2000      	movs	r0, #0
 8010f0e:	6031      	str	r1, [r6, #0]
 8010f10:	602b      	str	r3, [r5, #0]
 8010f12:	b016      	add	sp, #88	@ 0x58
 8010f14:	bd70      	pop	{r4, r5, r6, pc}
 8010f16:	466a      	mov	r2, sp
 8010f18:	f000 f848 	bl	8010fac <_fstat_r>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	dbec      	blt.n	8010efa <__swhatbuf_r+0x12>
 8010f20:	9901      	ldr	r1, [sp, #4]
 8010f22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010f26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010f2a:	4259      	negs	r1, r3
 8010f2c:	4159      	adcs	r1, r3
 8010f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f32:	e7eb      	b.n	8010f0c <__swhatbuf_r+0x24>

08010f34 <__smakebuf_r>:
 8010f34:	898b      	ldrh	r3, [r1, #12]
 8010f36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f38:	079d      	lsls	r5, r3, #30
 8010f3a:	4606      	mov	r6, r0
 8010f3c:	460c      	mov	r4, r1
 8010f3e:	d507      	bpl.n	8010f50 <__smakebuf_r+0x1c>
 8010f40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010f44:	6023      	str	r3, [r4, #0]
 8010f46:	6123      	str	r3, [r4, #16]
 8010f48:	2301      	movs	r3, #1
 8010f4a:	6163      	str	r3, [r4, #20]
 8010f4c:	b003      	add	sp, #12
 8010f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f50:	ab01      	add	r3, sp, #4
 8010f52:	466a      	mov	r2, sp
 8010f54:	f7ff ffc8 	bl	8010ee8 <__swhatbuf_r>
 8010f58:	9f00      	ldr	r7, [sp, #0]
 8010f5a:	4605      	mov	r5, r0
 8010f5c:	4639      	mov	r1, r7
 8010f5e:	4630      	mov	r0, r6
 8010f60:	f7fe ffde 	bl	800ff20 <_malloc_r>
 8010f64:	b948      	cbnz	r0, 8010f7a <__smakebuf_r+0x46>
 8010f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f6a:	059a      	lsls	r2, r3, #22
 8010f6c:	d4ee      	bmi.n	8010f4c <__smakebuf_r+0x18>
 8010f6e:	f023 0303 	bic.w	r3, r3, #3
 8010f72:	f043 0302 	orr.w	r3, r3, #2
 8010f76:	81a3      	strh	r3, [r4, #12]
 8010f78:	e7e2      	b.n	8010f40 <__smakebuf_r+0xc>
 8010f7a:	89a3      	ldrh	r3, [r4, #12]
 8010f7c:	6020      	str	r0, [r4, #0]
 8010f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f82:	81a3      	strh	r3, [r4, #12]
 8010f84:	9b01      	ldr	r3, [sp, #4]
 8010f86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010f8a:	b15b      	cbz	r3, 8010fa4 <__smakebuf_r+0x70>
 8010f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f90:	4630      	mov	r0, r6
 8010f92:	f000 f81d 	bl	8010fd0 <_isatty_r>
 8010f96:	b128      	cbz	r0, 8010fa4 <__smakebuf_r+0x70>
 8010f98:	89a3      	ldrh	r3, [r4, #12]
 8010f9a:	f023 0303 	bic.w	r3, r3, #3
 8010f9e:	f043 0301 	orr.w	r3, r3, #1
 8010fa2:	81a3      	strh	r3, [r4, #12]
 8010fa4:	89a3      	ldrh	r3, [r4, #12]
 8010fa6:	431d      	orrs	r5, r3
 8010fa8:	81a5      	strh	r5, [r4, #12]
 8010faa:	e7cf      	b.n	8010f4c <__smakebuf_r+0x18>

08010fac <_fstat_r>:
 8010fac:	b538      	push	{r3, r4, r5, lr}
 8010fae:	4d07      	ldr	r5, [pc, #28]	@ (8010fcc <_fstat_r+0x20>)
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	4608      	mov	r0, r1
 8010fb6:	4611      	mov	r1, r2
 8010fb8:	602b      	str	r3, [r5, #0]
 8010fba:	f7f0 feb1 	bl	8001d20 <_fstat>
 8010fbe:	1c43      	adds	r3, r0, #1
 8010fc0:	d102      	bne.n	8010fc8 <_fstat_r+0x1c>
 8010fc2:	682b      	ldr	r3, [r5, #0]
 8010fc4:	b103      	cbz	r3, 8010fc8 <_fstat_r+0x1c>
 8010fc6:	6023      	str	r3, [r4, #0]
 8010fc8:	bd38      	pop	{r3, r4, r5, pc}
 8010fca:	bf00      	nop
 8010fcc:	200077d8 	.word	0x200077d8

08010fd0 <_isatty_r>:
 8010fd0:	b538      	push	{r3, r4, r5, lr}
 8010fd2:	4d06      	ldr	r5, [pc, #24]	@ (8010fec <_isatty_r+0x1c>)
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	4608      	mov	r0, r1
 8010fda:	602b      	str	r3, [r5, #0]
 8010fdc:	f7f0 feb0 	bl	8001d40 <_isatty>
 8010fe0:	1c43      	adds	r3, r0, #1
 8010fe2:	d102      	bne.n	8010fea <_isatty_r+0x1a>
 8010fe4:	682b      	ldr	r3, [r5, #0]
 8010fe6:	b103      	cbz	r3, 8010fea <_isatty_r+0x1a>
 8010fe8:	6023      	str	r3, [r4, #0]
 8010fea:	bd38      	pop	{r3, r4, r5, pc}
 8010fec:	200077d8 	.word	0x200077d8

08010ff0 <_raise_r>:
 8010ff0:	291f      	cmp	r1, #31
 8010ff2:	b538      	push	{r3, r4, r5, lr}
 8010ff4:	4605      	mov	r5, r0
 8010ff6:	460c      	mov	r4, r1
 8010ff8:	d904      	bls.n	8011004 <_raise_r+0x14>
 8010ffa:	2316      	movs	r3, #22
 8010ffc:	6003      	str	r3, [r0, #0]
 8010ffe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011002:	bd38      	pop	{r3, r4, r5, pc}
 8011004:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011006:	b112      	cbz	r2, 801100e <_raise_r+0x1e>
 8011008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801100c:	b94b      	cbnz	r3, 8011022 <_raise_r+0x32>
 801100e:	4628      	mov	r0, r5
 8011010:	f000 f830 	bl	8011074 <_getpid_r>
 8011014:	4622      	mov	r2, r4
 8011016:	4601      	mov	r1, r0
 8011018:	4628      	mov	r0, r5
 801101a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801101e:	f000 b817 	b.w	8011050 <_kill_r>
 8011022:	2b01      	cmp	r3, #1
 8011024:	d00a      	beq.n	801103c <_raise_r+0x4c>
 8011026:	1c59      	adds	r1, r3, #1
 8011028:	d103      	bne.n	8011032 <_raise_r+0x42>
 801102a:	2316      	movs	r3, #22
 801102c:	6003      	str	r3, [r0, #0]
 801102e:	2001      	movs	r0, #1
 8011030:	e7e7      	b.n	8011002 <_raise_r+0x12>
 8011032:	2100      	movs	r1, #0
 8011034:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011038:	4620      	mov	r0, r4
 801103a:	4798      	blx	r3
 801103c:	2000      	movs	r0, #0
 801103e:	e7e0      	b.n	8011002 <_raise_r+0x12>

08011040 <raise>:
 8011040:	4b02      	ldr	r3, [pc, #8]	@ (801104c <raise+0xc>)
 8011042:	4601      	mov	r1, r0
 8011044:	6818      	ldr	r0, [r3, #0]
 8011046:	f7ff bfd3 	b.w	8010ff0 <_raise_r>
 801104a:	bf00      	nop
 801104c:	20000194 	.word	0x20000194

08011050 <_kill_r>:
 8011050:	b538      	push	{r3, r4, r5, lr}
 8011052:	4d07      	ldr	r5, [pc, #28]	@ (8011070 <_kill_r+0x20>)
 8011054:	2300      	movs	r3, #0
 8011056:	4604      	mov	r4, r0
 8011058:	4608      	mov	r0, r1
 801105a:	4611      	mov	r1, r2
 801105c:	602b      	str	r3, [r5, #0]
 801105e:	f7f0 fdff 	bl	8001c60 <_kill>
 8011062:	1c43      	adds	r3, r0, #1
 8011064:	d102      	bne.n	801106c <_kill_r+0x1c>
 8011066:	682b      	ldr	r3, [r5, #0]
 8011068:	b103      	cbz	r3, 801106c <_kill_r+0x1c>
 801106a:	6023      	str	r3, [r4, #0]
 801106c:	bd38      	pop	{r3, r4, r5, pc}
 801106e:	bf00      	nop
 8011070:	200077d8 	.word	0x200077d8

08011074 <_getpid_r>:
 8011074:	f7f0 bdec 	b.w	8001c50 <_getpid>

08011078 <_init>:
 8011078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801107a:	bf00      	nop
 801107c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801107e:	bc08      	pop	{r3}
 8011080:	469e      	mov	lr, r3
 8011082:	4770      	bx	lr

08011084 <_fini>:
 8011084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011086:	bf00      	nop
 8011088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801108a:	bc08      	pop	{r3}
 801108c:	469e      	mov	lr, r3
 801108e:	4770      	bx	lr
