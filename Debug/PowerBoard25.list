
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009308  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080094e8  080094e8  0000a4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009750  08009750  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009750  08009750  0000a750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009758  08009758  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009758  08009758  0000a758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800975c  0800975c  0000a75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009760  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  200001d4  08009934  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dc8  08009934  0000bdc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f30  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000373d  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00023878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  00024a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004cf0  00000000  00000000  0002581a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f34  00000000  00000000  0002a50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4b78  00000000  00000000  0004143e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105fb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f24  00000000  00000000  00105ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0010af20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080094d0 	.word	0x080094d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	080094d0 	.word	0x080094d0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <CDC_Transmit_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CDC_Transmit_Print(const char * format, ...) {
 80002c0:	b40f      	push	{r0, r1, r2, r3}
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b09c      	sub	sp, #112	@ 0x70
 80002c6:	af00      	add	r7, sp, #0
	char buf[PRINT_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
 80002c8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80002cc:	607b      	str	r3, [r7, #4]
	int n = vsprintf(buf, format, args);
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80002d6:	4618      	mov	r0, r3
 80002d8:	f008 fc70 	bl	8008bbc <vsiprintf>
 80002dc:	66f8      	str	r0, [r7, #108]	@ 0x6c
	va_end(args);
	CDC_Transmit_FS(buf, n);
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80002e4:	4618      	mov	r0, r3
 80002e6:	f007 ffe7 	bl	80082b8 <CDC_Transmit_FS>
}
 80002ea:	bf00      	nop
 80002ec:	3770      	adds	r7, #112	@ 0x70
 80002ee:	46bd      	mov	sp, r7
 80002f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002f4:	b004      	add	sp, #16
 80002f6:	4770      	bx	lr

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b09e      	sub	sp, #120	@ 0x78
 80002fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fe:	f000 fb8c 	bl	8000a1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000302:	f000 f8e1 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000306:	f000 f9a9 	bl	800065c <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800030a:	f000 f91f 	bl	800054c <MX_FDCAN2_Init>
  MX_I2C2_Init();
 800030e:	f000 f965 	bl	80005dc <MX_I2C2_Init>
  MX_USB_Device_Init();
 8000312:	f007 ff13 	bl	800813c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  	  FDCAN_FilterTypeDef sFilterConfig;

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000316:	2300      	movs	r3, #0
 8000318:	647b      	str	r3, [r7, #68]	@ 0x44
	sFilterConfig.FilterIndex = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	64bb      	str	r3, [r7, #72]	@ 0x48
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800031e:	2302      	movs	r3, #2
 8000320:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000322:	2301      	movs	r3, #1
 8000324:	653b      	str	r3, [r7, #80]	@ 0x50
	sFilterConfig.FilterID1 = 0x321;
 8000326:	f240 3321 	movw	r3, #801	@ 0x321
 800032a:	657b      	str	r3, [r7, #84]	@ 0x54
	sFilterConfig.FilterID2 = 0x7FF;
 800032c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000330:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000332:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000336:	4619      	mov	r1, r3
 8000338:	4854      	ldr	r0, [pc, #336]	@ (800048c <main+0x194>)
 800033a:	f000 fe6b 	bl	8001014 <HAL_FDCAN_ConfigFilter>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d002      	beq.n	800034a <main+0x52>
	{
	  CDC_Transmit_Print("Error while configuring filter for FDCAN2");
 8000344:	4852      	ldr	r0, [pc, #328]	@ (8000490 <main+0x198>)
 8000346:	f7ff ffbb 	bl	80002c0 <CDC_Transmit_Print>
	}

	/* Configure global filter:
	   Filter all remote frames with STD and EXT ID
	   Reject non matching frames with STD ID and EXT ID */
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 800034a:	2300      	movs	r3, #0
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	2300      	movs	r3, #0
 8000350:	2202      	movs	r2, #2
 8000352:	2102      	movs	r1, #2
 8000354:	484d      	ldr	r0, [pc, #308]	@ (800048c <main+0x194>)
 8000356:	f000 feb7 	bl	80010c8 <HAL_FDCAN_ConfigGlobalFilter>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <main+0x6e>
	{
		CDC_Transmit_Print("Error while configuring global filter\n");
 8000360:	484c      	ldr	r0, [pc, #304]	@ (8000494 <main+0x19c>)
 8000362:	f7ff ffad 	bl	80002c0 <CDC_Transmit_Print>
	}

  HAL_StatusTypeDef err = HAL_FDCAN_Start(&hfdcan2);
 8000366:	4849      	ldr	r0, [pc, #292]	@ (800048c <main+0x194>)
 8000368:	f000 fedf 	bl	800112a <HAL_FDCAN_Start>
 800036c:	4603      	mov	r3, r0
 800036e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (err != HAL_OK) {
 8000372:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000376:	2b00      	cmp	r3, #0
 8000378:	d00c      	beq.n	8000394 <main+0x9c>
  	  char buf[60];// to send
  	  int n = sprintf(buf, "init err: = 0x%02x\n", err);
 800037a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4945      	ldr	r1, [pc, #276]	@ (8000498 <main+0x1a0>)
 8000382:	4618      	mov	r0, r3
 8000384:	f008 fbe4 	bl	8008b50 <siprintf>
 8000388:	6638      	str	r0, [r7, #96]	@ 0x60
  	  CDC_Transmit_FS(buf, n);
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800038e:	4618      	mov	r0, r3
 8000390:	f007 ff92 	bl	80082b8 <CDC_Transmit_FS>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (0)
 8000394:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  HAL_Delay(2000);
 8000396:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800039a:	f000 fbaf 	bl	8000afc <HAL_Delay>

	  //To initialize the chip, we need to:
	  //Set the voltage mode
	  //Enable all Voltages

	  CDC_Transmit_Print("Stating Init \n \n");
 800039e:	483f      	ldr	r0, [pc, #252]	@ (800049c <main+0x1a4>)
 80003a0:	f7ff ff8e 	bl	80002c0 <CDC_Transmit_Print>


	  CDC_Transmit_Print("Starting to set mode \n");
 80003a4:	483e      	ldr	r0, [pc, #248]	@ (80004a0 <main+0x1a8>)
 80003a6:	f7ff ff8b 	bl	80002c0 <CDC_Transmit_Print>
	  //Set the voltage mode, we start by:
	  //Reading the control register
	  //This is done to make sure everything is okay and
	  //see the current settings of the chip

	  CDC_Transmit_Print("Reading Control Register...\n");
 80003aa:	483e      	ldr	r0, [pc, #248]	@ (80004a4 <main+0x1ac>)
 80003ac:	f7ff ff88 	bl	80002c0 <CDC_Transmit_Print>
	  status = HAL_I2C_Mem_Read(&hi2c2, 0x4C << 1, 0x01, 1, &data, 1, 1000);
 80003b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003b4:	9302      	str	r3, [sp, #8]
 80003b6:	2301      	movs	r3, #1
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2301      	movs	r3, #1
 80003c2:	2201      	movs	r2, #1
 80003c4:	2198      	movs	r1, #152	@ 0x98
 80003c6:	4838      	ldr	r0, [pc, #224]	@ (80004a8 <main+0x1b0>)
 80003c8:	f001 fa84 	bl	80018d4 <HAL_I2C_Mem_Read>
 80003cc:	4603      	mov	r3, r0
 80003ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	  if(status != HAL_OK) {
 80003d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d004      	beq.n	80003e4 <main+0xec>
		  CDC_Transmit_Print("Failed to read Control Register\n");
 80003da:	4834      	ldr	r0, [pc, #208]	@ (80004ac <main+0x1b4>)
 80003dc:	f7ff ff70 	bl	80002c0 <CDC_Transmit_Print>
		  while(1);
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <main+0xe8>
	  }
	  CDC_Transmit_Print("Successfully read Control Register.\n");
 80003e4:	4832      	ldr	r0, [pc, #200]	@ (80004b0 <main+0x1b8>)
 80003e6:	f7ff ff6b 	bl	80002c0 <CDC_Transmit_Print>

	  //Control register is default filled with 0x00
	  CDC_Transmit_Print("Data in data buffer, i.e. values in control register - %u \n", data);
 80003ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80003ee:	4619      	mov	r1, r3
 80003f0:	4830      	ldr	r0, [pc, #192]	@ (80004b4 <main+0x1bc>)
 80003f2:	f7ff ff65 	bl	80002c0 <CDC_Transmit_Print>

	  //Enabling all voltages(and we also set other settings)
	  //We want to write 00011111(0x07) to the register
	  CDC_Transmit_Print("Writing to Control Register... \n");
 80003f6:	4830      	ldr	r0, [pc, #192]	@ (80004b8 <main+0x1c0>)
 80003f8:	f7ff ff62 	bl	80002c0 <CDC_Transmit_Print>
	  data_write = 0x07;
 80003fc:	2307      	movs	r3, #7
 80003fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	  status = HAL_I2C_Mem_Write(&hi2c2, 0x4C << 1, 0x01, 1, &data_write, 1, 1000);
 8000402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000406:	9302      	str	r3, [sp, #8]
 8000408:	2301      	movs	r3, #1
 800040a:	9301      	str	r3, [sp, #4]
 800040c:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2301      	movs	r3, #1
 8000414:	2201      	movs	r2, #1
 8000416:	2198      	movs	r1, #152	@ 0x98
 8000418:	4823      	ldr	r0, [pc, #140]	@ (80004a8 <main+0x1b0>)
 800041a:	f001 f947 	bl	80016ac <HAL_I2C_Mem_Write>
 800041e:	4603      	mov	r3, r0
 8000420:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	  if(status != HAL_OK) {
 8000424:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000428:	2b00      	cmp	r3, #0
 800042a:	d004      	beq.n	8000436 <main+0x13e>
		  CDC_Transmit_Print("Failed to write to Control Register\n");
 800042c:	4823      	ldr	r0, [pc, #140]	@ (80004bc <main+0x1c4>)
 800042e:	f7ff ff47 	bl	80002c0 <CDC_Transmit_Print>
		  while(1);
 8000432:	bf00      	nop
 8000434:	e7fd      	b.n	8000432 <main+0x13a>
	  }
	  CDC_Transmit_Print("Successfully wrote to Control Register...\n");
 8000436:	4822      	ldr	r0, [pc, #136]	@ (80004c0 <main+0x1c8>)
 8000438:	f7ff ff42 	bl	80002c0 <CDC_Transmit_Print>

	  //Let's read back the data in the control register to make sure everything
	  //Is good, it should read 00000111
	  CDC_Transmit_Print("Reading Control Register...\n");
 800043c:	4819      	ldr	r0, [pc, #100]	@ (80004a4 <main+0x1ac>)
 800043e:	f7ff ff3f 	bl	80002c0 <CDC_Transmit_Print>
	  	  status = HAL_I2C_Mem_Read(&hi2c2, 0x4C << 1, 0x01, 1, &data, 1, 1000);
 8000442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000446:	9302      	str	r3, [sp, #8]
 8000448:	2301      	movs	r3, #1
 800044a:	9301      	str	r3, [sp, #4]
 800044c:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	2301      	movs	r3, #1
 8000454:	2201      	movs	r2, #1
 8000456:	2198      	movs	r1, #152	@ 0x98
 8000458:	4813      	ldr	r0, [pc, #76]	@ (80004a8 <main+0x1b0>)
 800045a:	f001 fa3b 	bl	80018d4 <HAL_I2C_Mem_Read>
 800045e:	4603      	mov	r3, r0
 8000460:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	  	  if(status != HAL_OK) {
 8000464:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000468:	2b00      	cmp	r3, #0
 800046a:	d004      	beq.n	8000476 <main+0x17e>
	  		  CDC_Transmit_Print("Failed to read Control Register\n");
 800046c:	480f      	ldr	r0, [pc, #60]	@ (80004ac <main+0x1b4>)
 800046e:	f7ff ff27 	bl	80002c0 <CDC_Transmit_Print>
	  		  while(1);
 8000472:	bf00      	nop
 8000474:	e7fd      	b.n	8000472 <main+0x17a>
	  	  }
	  CDC_Transmit_Print("Successfully read Control Register...\n");
 8000476:	4813      	ldr	r0, [pc, #76]	@ (80004c4 <main+0x1cc>)
 8000478:	f7ff ff22 	bl	80002c0 <CDC_Transmit_Print>

	  //Data in control register should be the 0x07 that we set it to
	  CDC_Transmit_Print("Data in data buffer, i.e. values in control register - %u \n", data);
 800047c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000480:	4619      	mov	r1, r3
 8000482:	480c      	ldr	r0, [pc, #48]	@ (80004b4 <main+0x1bc>)
 8000484:	f7ff ff1c 	bl	80002c0 <CDC_Transmit_Print>

	  //all done :D review debug messages
	  while(1) {
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <main+0x190>
 800048c:	200001f0 	.word	0x200001f0
 8000490:	080094e8 	.word	0x080094e8
 8000494:	08009514 	.word	0x08009514
 8000498:	0800953c 	.word	0x0800953c
 800049c:	08009550 	.word	0x08009550
 80004a0:	08009564 	.word	0x08009564
 80004a4:	0800957c 	.word	0x0800957c
 80004a8:	20000254 	.word	0x20000254
 80004ac:	0800959c 	.word	0x0800959c
 80004b0:	080095c0 	.word	0x080095c0
 80004b4:	080095e8 	.word	0x080095e8
 80004b8:	08009624 	.word	0x08009624
 80004bc:	08009648 	.word	0x08009648
 80004c0:	08009670 	.word	0x08009670
 80004c4:	0800969c 	.word	0x0800969c

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b094      	sub	sp, #80	@ 0x50
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	2238      	movs	r2, #56	@ 0x38
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f008 fb7a 	bl	8008bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004ee:	f003 fb65 	bl	8003bbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80004f2:	2322      	movs	r3, #34	@ 0x22
 80004f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fc:	2340      	movs	r3, #64	@ 0x40
 80004fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000500:	2301      	movs	r3, #1
 8000502:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000504:	2300      	movs	r3, #0
 8000506:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000508:	f107 0318 	add.w	r3, r7, #24
 800050c:	4618      	mov	r0, r3
 800050e:	f003 fc09 	bl	8003d24 <HAL_RCC_OscConfig>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000518:	f000 f8f6 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051c:	230f      	movs	r3, #15
 800051e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000520:	2301      	movs	r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f003 ff07 	bl	8004348 <HAL_RCC_ClockConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000540:	f000 f8e2 	bl	8000708 <Error_Handler>
  }
}
 8000544:	bf00      	nop
 8000546:	3750      	adds	r7, #80	@ 0x50
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000550:	4b20      	ldr	r3, [pc, #128]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 8000552:	4a21      	ldr	r2, [pc, #132]	@ (80005d8 <MX_FDCAN2_Init+0x8c>)
 8000554:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000556:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800055c:	4b1d      	ldr	r3, [pc, #116]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 800055e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000562:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000564:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800056a:	4b1a      	ldr	r3, [pc, #104]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 800056c:	2200      	movs	r2, #0
 800056e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000570:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 8000572:	2200      	movs	r2, #0
 8000574:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000576:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 8000578:	2200      	movs	r2, #0
 800057a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800057c:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 800057e:	2201      	movs	r2, #1
 8000580:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 8000582:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 8000584:	2210      	movs	r2, #16
 8000586:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 8000588:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 800058a:	223f      	movs	r2, #63	@ 0x3f
 800058c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 800058e:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 8000590:	2210      	movs	r2, #16
 8000592:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000594:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 8000596:	2201      	movs	r2, #1
 8000598:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 800059c:	2204      	movs	r2, #4
 800059e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 80005a2:	220d      	movs	r2, #13
 80005a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 80005ac:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 80005b2:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <MX_FDCAN2_Init+0x88>)
 80005c0:	f000 fbce 	bl	8000d60 <HAL_FDCAN_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 80005ca:	f000 f89d 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001f0 	.word	0x200001f0
 80005d8:	40006800 	.word	0x40006800

080005dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <MX_I2C2_Init+0x74>)
 80005e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000654 <MX_I2C2_Init+0x78>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_I2C2_Init+0x74>)
 80005e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000658 <MX_I2C2_Init+0x7c>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005ec:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <MX_I2C2_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f2:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_I2C2_Init+0x74>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f8:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <MX_I2C2_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_I2C2_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_I2C2_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_I2C2_Init+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_I2C2_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000616:	480e      	ldr	r0, [pc, #56]	@ (8000650 <MX_I2C2_Init+0x74>)
 8000618:	f000 ffac 	bl	8001574 <HAL_I2C_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000622:	f000 f871 	bl	8000708 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000626:	2100      	movs	r1, #0
 8000628:	4809      	ldr	r0, [pc, #36]	@ (8000650 <MX_I2C2_Init+0x74>)
 800062a:	f001 fd2f 	bl	800208c <HAL_I2CEx_ConfigAnalogFilter>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000634:	f000 f868 	bl	8000708 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000638:	2100      	movs	r1, #0
 800063a:	4805      	ldr	r0, [pc, #20]	@ (8000650 <MX_I2C2_Init+0x74>)
 800063c:	f001 fd71 	bl	8002122 <HAL_I2CEx_ConfigDigitalFilter>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000646:	f000 f85f 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000254 	.word	0x20000254
 8000654:	40005800 	.word	0x40005800
 8000658:	00503d58 	.word	0x00503d58

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <MX_GPIO_Init+0xa4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a22      	ldr	r2, [pc, #136]	@ (8000700 <MX_GPIO_Init+0xa4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_GPIO_Init+0xa4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800068a:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <MX_GPIO_Init+0xa4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a1c      	ldr	r2, [pc, #112]	@ (8000700 <MX_GPIO_Init+0xa4>)
 8000690:	f043 0320 	orr.w	r3, r3, #32
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_GPIO_Init+0xa4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0320 	and.w	r3, r3, #32
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_GPIO_Init+0xa4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	4a16      	ldr	r2, [pc, #88]	@ (8000700 <MX_GPIO_Init+0xa4>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_GPIO_Init+0xa4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_GPIO_Init+0xa4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a10      	ldr	r2, [pc, #64]	@ (8000700 <MX_GPIO_Init+0xa4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_GPIO_Init+0xa4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	480b      	ldr	r0, [pc, #44]	@ (8000704 <MX_GPIO_Init+0xa8>)
 80006d8:	f000 ff34 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006dc:	2320      	movs	r3, #32
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_GPIO_Init+0xa8>)
 80006f4:	f000 fda4 	bl	8001240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	@ 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000
 8000704:	48000400 	.word	0x48000400

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <Error_Handler+0x8>

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <HAL_MspInit+0x44>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800071e:	4a0e      	ldr	r2, [pc, #56]	@ (8000758 <HAL_MspInit+0x44>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6613      	str	r3, [r2, #96]	@ 0x60
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <HAL_MspInit+0x44>)
 8000728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <HAL_MspInit+0x44>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000736:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <HAL_MspInit+0x44>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073c:	6593      	str	r3, [r2, #88]	@ 0x58
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_MspInit+0x44>)
 8000740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800074a:	f003 fadb 	bl	8003d04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b09e      	sub	sp, #120	@ 0x78
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2250      	movs	r2, #80	@ 0x50
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f008 fa27 	bl	8008bd0 <memset>
  if(hfdcan->Instance==FDCAN2)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a20      	ldr	r2, [pc, #128]	@ (8000808 <HAL_FDCAN_MspInit+0xac>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d138      	bne.n	80007fe <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800078c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000790:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000792:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000796:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4618      	mov	r0, r3
 800079e:	f003 ffb7 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80007a8:	f7ff ffae 	bl	8000708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80007ac:	4b17      	ldr	r3, [pc, #92]	@ (800080c <HAL_FDCAN_MspInit+0xb0>)
 80007ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b0:	4a16      	ldr	r2, [pc, #88]	@ (800080c <HAL_FDCAN_MspInit+0xb0>)
 80007b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <HAL_FDCAN_MspInit+0xb0>)
 80007ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <HAL_FDCAN_MspInit+0xb0>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c8:	4a10      	ldr	r2, [pc, #64]	@ (800080c <HAL_FDCAN_MspInit+0xb0>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d0:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <HAL_FDCAN_MspInit+0xb0>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d4:	f003 0302 	and.w	r3, r3, #2
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007dc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80007e0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80007ee:	2309      	movs	r3, #9
 80007f0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <HAL_FDCAN_MspInit+0xb4>)
 80007fa:	f000 fd21 	bl	8001240 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 80007fe:	bf00      	nop
 8000800:	3778      	adds	r7, #120	@ 0x78
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40006800 	.word	0x40006800
 800080c:	40021000 	.word	0x40021000
 8000810:	48000400 	.word	0x48000400

08000814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09e      	sub	sp, #120	@ 0x78
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2250      	movs	r2, #80	@ 0x50
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f008 f9cb 	bl	8008bd0 <memset>
  if(hi2c->Instance==I2C2)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1f      	ldr	r2, [pc, #124]	@ (80008bc <HAL_I2C_MspInit+0xa8>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d137      	bne.n	80008b4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000844:	2380      	movs	r3, #128	@ 0x80
 8000846:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4618      	mov	r0, r3
 8000852:	f003 ff5d 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800085c:	f7ff ff54 	bl	8000708 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <HAL_I2C_MspInit+0xac>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000864:	4a16      	ldr	r2, [pc, #88]	@ (80008c0 <HAL_I2C_MspInit+0xac>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086c:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <HAL_I2C_MspInit+0xac>)
 800086e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000878:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800087c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087e:	2312      	movs	r3, #18
 8000880:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800088a:	2304      	movs	r3, #4
 800088c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000898:	f000 fcd2 	bl	8001240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <HAL_I2C_MspInit+0xac>)
 800089e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a0:	4a07      	ldr	r2, [pc, #28]	@ (80008c0 <HAL_I2C_MspInit+0xac>)
 80008a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <HAL_I2C_MspInit+0xac>)
 80008aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80008b4:	bf00      	nop
 80008b6:	3778      	adds	r7, #120	@ 0x78
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40005800 	.word	0x40005800
 80008c0:	40021000 	.word	0x40021000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <MemManage_Handler+0x4>

080008dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 f8d1 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <USB_LP_IRQHandler+0x10>)
 800092a:	f001 fd36 	bl	800239a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20001784 	.word	0x20001784

08000938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000940:	4a14      	ldr	r2, [pc, #80]	@ (8000994 <_sbrk+0x5c>)
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <_sbrk+0x60>)
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800094c:	4b13      	ldr	r3, [pc, #76]	@ (800099c <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000954:	4b11      	ldr	r3, [pc, #68]	@ (800099c <_sbrk+0x64>)
 8000956:	4a12      	ldr	r2, [pc, #72]	@ (80009a0 <_sbrk+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	429a      	cmp	r2, r3
 8000966:	d207      	bcs.n	8000978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000968:	f008 f93a 	bl	8008be0 <__errno>
 800096c:	4603      	mov	r3, r0
 800096e:	220c      	movs	r2, #12
 8000970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	e009      	b.n	800098c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097e:	4b07      	ldr	r3, [pc, #28]	@ (800099c <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	4a05      	ldr	r2, [pc, #20]	@ (800099c <_sbrk+0x64>)
 8000988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2001c000 	.word	0x2001c000
 8000998:	00000400 	.word	0x00000400
 800099c:	200002a8 	.word	0x200002a8
 80009a0:	20001dc8 	.word	0x20001dc8

080009a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <SystemInit+0x20>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ae:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <SystemInit+0x20>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c8:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009cc:	f7ff ffea 	bl	80009a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80009d2:	490d      	ldr	r1, [pc, #52]	@ (8000a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <LoopForever+0xe>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a14 <LoopForever+0x16>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f6:	f008 f8f9 	bl	8008bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009fa:	f7ff fc7d 	bl	80002f8 <main>

080009fe <LoopForever>:

LoopForever:
    b LoopForever
 80009fe:	e7fe      	b.n	80009fe <LoopForever>
  ldr   r0, =_estack
 8000a00:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000a0c:	08009760 	.word	0x08009760
  ldr r2, =_sbss
 8000a10:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000a14:	20001dc8 	.word	0x20001dc8

08000a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_2_IRQHandler>

08000a1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f95b 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f000 f80e 	bl	8000a4c <HAL_InitTick>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	e001      	b.n	8000a40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3c:	f7ff fe6a 	bl	8000714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a40:	79fb      	ldrb	r3, [r7, #7]

}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a58:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <HAL_InitTick+0x68>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d022      	beq.n	8000aa6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a60:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_InitTick+0x6c>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <HAL_InitTick+0x68>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 f966 	bl	8000d46 <HAL_SYSTICK_Config>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10f      	bne.n	8000aa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b0f      	cmp	r3, #15
 8000a84:	d809      	bhi.n	8000a9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a86:	2200      	movs	r2, #0
 8000a88:	6879      	ldr	r1, [r7, #4]
 8000a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8e:	f000 f932 	bl	8000cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <HAL_InitTick+0x70>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e007      	b.n	8000aaa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e004      	b.n	8000aaa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e001      	b.n	8000aaa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <HAL_IncTick+0x20>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a03      	ldr	r2, [pc, #12]	@ (8000adc <HAL_IncTick+0x1c>)
 8000ad0:	6013      	str	r3, [r2, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	200002ac 	.word	0x200002ac
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200002ac 	.word	0x200002ac

08000afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff ffee 	bl	8000ae4 <HAL_GetTick>
 8000b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b14:	d004      	beq.n	8000b20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_Delay+0x40>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b20:	bf00      	nop
 8000b22:	f7ff ffdf 	bl	8000ae4 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d8f7      	bhi.n	8000b22 <HAL_Delay+0x26>
  {
  }
}
 8000b32:	bf00      	nop
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000008 	.word	0x20000008

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4907      	ldr	r1, [pc, #28]	@ (8000bdc <__NVIC_EnableIRQ+0x38>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	@ (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	@ (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	@ 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff8e 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff29 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff40 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff90 	bl	8000c34 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5f 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff33 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffa4 	bl	8000c9c <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e147      	b.n	8001002 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d106      	bne.n	8000d8c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fce8 	bl	800075c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	699a      	ldr	r2, [r3, #24]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0210 	bic.w	r2, r2, #16
 8000d9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d9c:	f7ff fea2 	bl	8000ae4 <HAL_GetTick>
 8000da0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000da2:	e012      	b.n	8000dca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000da4:	f7ff fe9e 	bl	8000ae4 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b0a      	cmp	r3, #10
 8000db0:	d90b      	bls.n	8000dca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db6:	f043 0201 	orr.w	r2, r3, #1
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e11b      	b.n	8001002 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d0e5      	beq.n	8000da4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	699a      	ldr	r2, [r3, #24]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0201 	orr.w	r2, r2, #1
 8000de6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000de8:	f7ff fe7c 	bl	8000ae4 <HAL_GetTick>
 8000dec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000dee:	e012      	b.n	8000e16 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000df0:	f7ff fe78 	bl	8000ae4 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b0a      	cmp	r3, #10
 8000dfc:	d90b      	bls.n	8000e16 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e02:	f043 0201 	orr.w	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e0f5      	b.n	8001002 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0e5      	beq.n	8000df0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0202 	orr.w	r2, r2, #2
 8000e32:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a74      	ldr	r2, [pc, #464]	@ (800100c <HAL_FDCAN_Init+0x2ac>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d103      	bne.n	8000e46 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000e3e:	4a74      	ldr	r2, [pc, #464]	@ (8001010 <HAL_FDCAN_Init+0x2b0>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7c1b      	ldrb	r3, [r3, #16]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d108      	bne.n	8000e60 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	699a      	ldr	r2, [r3, #24]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e5c:	619a      	str	r2, [r3, #24]
 8000e5e:	e007      	b.n	8000e70 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	699a      	ldr	r2, [r3, #24]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e6e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7c5b      	ldrb	r3, [r3, #17]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d108      	bne.n	8000e8a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	699a      	ldr	r2, [r3, #24]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000e86:	619a      	str	r2, [r3, #24]
 8000e88:	e007      	b.n	8000e9a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	699a      	ldr	r2, [r3, #24]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000e98:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7c9b      	ldrb	r3, [r3, #18]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d108      	bne.n	8000eb4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	699a      	ldr	r2, [r3, #24]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000eb0:	619a      	str	r2, [r3, #24]
 8000eb2:	e007      	b.n	8000ec4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	699a      	ldr	r2, [r3, #24]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000ec2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	699a      	ldr	r2, [r3, #24]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000ee8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0210 	bic.w	r2, r2, #16
 8000ef8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d108      	bne.n	8000f14 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	699a      	ldr	r2, [r3, #24]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f042 0204 	orr.w	r2, r2, #4
 8000f10:	619a      	str	r2, [r3, #24]
 8000f12:	e02c      	b.n	8000f6e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d028      	beq.n	8000f6e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d01c      	beq.n	8000f5e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	699a      	ldr	r2, [r3, #24]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f32:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0210 	orr.w	r2, r2, #16
 8000f42:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d110      	bne.n	8000f6e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 0220 	orr.w	r2, r2, #32
 8000f5a:	619a      	str	r2, [r3, #24]
 8000f5c:	e007      	b.n	8000f6e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	699a      	ldr	r2, [r3, #24]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0220 	orr.w	r2, r2, #32
 8000f6c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f7e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f86:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f96:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f98:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000fa2:	d115      	bne.n	8000fd0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fb2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000fbc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000fcc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f8c8 	bl	800117c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40006400 	.word	0x40006400
 8001010:	40006500 	.word	0x40006500

08001014 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001024:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d002      	beq.n	8001032 <HAL_FDCAN_ConfigFilter+0x1e>
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d13d      	bne.n	80010ae <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d119      	bne.n	800106e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001046:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800104e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e01d      	b.n	80010aa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	075a      	lsls	r2, r3, #29
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	079a      	lsls	r2, r3, #30
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4313      	orrs	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3304      	adds	r3, #4
 80010a2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e006      	b.n	80010bc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b2:	f043 0202 	orr.w	r2, r3, #2
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
  }
}
 80010bc:	4618      	mov	r0, r3
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d116      	bne.n	8001110 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ea:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	011a      	lsls	r2, r3, #4
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	431a      	orrs	r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	431a      	orrs	r2, r3
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	431a      	orrs	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	e006      	b.n	800111e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001114:	f043 0204 	orr.w	r2, r3, #4
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
  }
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d110      	bne.n	8001160 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2202      	movs	r2, #2
 8001142:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	699a      	ldr	r2, [r3, #24]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0201 	bic.w	r2, r2, #1
 8001154:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	e006      	b.n	800116e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001164:	f043 0204 	orr.w	r2, r3, #4
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
  }
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001184:	4b2c      	ldr	r3, [pc, #176]	@ (8001238 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001186:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d103      	bne.n	800119a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001198:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011a8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b0:	041a      	lsls	r2, r3, #16
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ce:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d6:	061a      	lsls	r2, r3, #24
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	e005      	b.n	800121c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3304      	adds	r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d3f3      	bcc.n	8001210 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	4000a400 	.word	0x4000a400
 800123c:	40006800 	.word	0x40006800

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800124e:	e15a      	b.n	8001506 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2101      	movs	r1, #1
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 814c 	beq.w	8001500 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d005      	beq.n	8001280 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800127c:	2b02      	cmp	r3, #2
 800127e:	d130      	bne.n	80012e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b6:	2201      	movs	r2, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 0201 	and.w	r2, r3, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d017      	beq.n	800131e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d123      	bne.n	8001372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	6939      	ldr	r1, [r7, #16]
 800136e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0203 	and.w	r2, r3, #3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80a6 	beq.w	8001500 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001524 <HAL_GPIO_Init+0x2e4>)
 80013b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001524 <HAL_GPIO_Init+0x2e4>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c0:	4b58      	ldr	r3, [pc, #352]	@ (8001524 <HAL_GPIO_Init+0x2e4>)
 80013c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013cc:	4a56      	ldr	r2, [pc, #344]	@ (8001528 <HAL_GPIO_Init+0x2e8>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013f6:	d01f      	beq.n	8001438 <HAL_GPIO_Init+0x1f8>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a4c      	ldr	r2, [pc, #304]	@ (800152c <HAL_GPIO_Init+0x2ec>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d019      	beq.n	8001434 <HAL_GPIO_Init+0x1f4>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a4b      	ldr	r2, [pc, #300]	@ (8001530 <HAL_GPIO_Init+0x2f0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d013      	beq.n	8001430 <HAL_GPIO_Init+0x1f0>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a4a      	ldr	r2, [pc, #296]	@ (8001534 <HAL_GPIO_Init+0x2f4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d00d      	beq.n	800142c <HAL_GPIO_Init+0x1ec>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a49      	ldr	r2, [pc, #292]	@ (8001538 <HAL_GPIO_Init+0x2f8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d007      	beq.n	8001428 <HAL_GPIO_Init+0x1e8>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a48      	ldr	r2, [pc, #288]	@ (800153c <HAL_GPIO_Init+0x2fc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_GPIO_Init+0x1e4>
 8001420:	2305      	movs	r3, #5
 8001422:	e00a      	b.n	800143a <HAL_GPIO_Init+0x1fa>
 8001424:	2306      	movs	r3, #6
 8001426:	e008      	b.n	800143a <HAL_GPIO_Init+0x1fa>
 8001428:	2304      	movs	r3, #4
 800142a:	e006      	b.n	800143a <HAL_GPIO_Init+0x1fa>
 800142c:	2303      	movs	r3, #3
 800142e:	e004      	b.n	800143a <HAL_GPIO_Init+0x1fa>
 8001430:	2302      	movs	r3, #2
 8001432:	e002      	b.n	800143a <HAL_GPIO_Init+0x1fa>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_GPIO_Init+0x1fa>
 8001438:	2300      	movs	r3, #0
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	f002 0203 	and.w	r2, r2, #3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4093      	lsls	r3, r2
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800144a:	4937      	ldr	r1, [pc, #220]	@ (8001528 <HAL_GPIO_Init+0x2e8>)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001458:	4b39      	ldr	r3, [pc, #228]	@ (8001540 <HAL_GPIO_Init+0x300>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800147c:	4a30      	ldr	r2, [pc, #192]	@ (8001540 <HAL_GPIO_Init+0x300>)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001482:	4b2f      	ldr	r3, [pc, #188]	@ (8001540 <HAL_GPIO_Init+0x300>)
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014a6:	4a26      	ldr	r2, [pc, #152]	@ (8001540 <HAL_GPIO_Init+0x300>)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014ac:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <HAL_GPIO_Init+0x300>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001540 <HAL_GPIO_Init+0x300>)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_GPIO_Init+0x300>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014fa:	4a11      	ldr	r2, [pc, #68]	@ (8001540 <HAL_GPIO_Init+0x300>)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	f47f ae9d 	bne.w	8001250 <HAL_GPIO_Init+0x10>
  }
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40021000 	.word	0x40021000
 8001528:	40010000 	.word	0x40010000
 800152c:	48000400 	.word	0x48000400
 8001530:	48000800 	.word	0x48000800
 8001534:	48000c00 	.word	0x48000c00
 8001538:	48001000 	.word	0x48001000
 800153c:	48001400 	.word	0x48001400
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001560:	e002      	b.n	8001568 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e08d      	b.n	80016a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff f93a 	bl	8000814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2224      	movs	r2, #36	@ 0x24
 80015a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d107      	bne.n	80015ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	e006      	b.n	80015fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80015fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d108      	bne.n	8001616 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	e007      	b.n	8001626 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001624:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001638:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001648:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69d9      	ldr	r1, [r3, #28]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1a      	ldr	r2, [r3, #32]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4603      	mov	r3, r0
 80016bc:	817b      	strh	r3, [r7, #10]
 80016be:	460b      	mov	r3, r1
 80016c0:	813b      	strh	r3, [r7, #8]
 80016c2:	4613      	mov	r3, r2
 80016c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	f040 80f9 	bne.w	80018c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <HAL_I2C_Mem_Write+0x34>
 80016da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0ed      	b.n	80018c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_I2C_Mem_Write+0x4e>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e0e6      	b.n	80018c8 <HAL_I2C_Mem_Write+0x21c>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001702:	f7ff f9ef 	bl	8000ae4 <HAL_GetTick>
 8001706:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2319      	movs	r3, #25
 800170e:	2201      	movs	r2, #1
 8001710:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 fac3 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0d1      	b.n	80018c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2221      	movs	r2, #33	@ 0x21
 8001728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2240      	movs	r2, #64	@ 0x40
 8001730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a3a      	ldr	r2, [r7, #32]
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001744:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800174c:	88f8      	ldrh	r0, [r7, #6]
 800174e:	893a      	ldrh	r2, [r7, #8]
 8001750:	8979      	ldrh	r1, [r7, #10]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4603      	mov	r3, r0
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 f9d3 	bl	8001b08 <I2C_RequestMemoryWrite>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0a9      	b.n	80018c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001778:	b29b      	uxth	r3, r3
 800177a:	2bff      	cmp	r3, #255	@ 0xff
 800177c:	d90e      	bls.n	800179c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	22ff      	movs	r2, #255	@ 0xff
 8001782:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001788:	b2da      	uxtb	r2, r3
 800178a:	8979      	ldrh	r1, [r7, #10]
 800178c:	2300      	movs	r3, #0
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 fc47 	bl	8002028 <I2C_TransferConfig>
 800179a:	e00f      	b.n	80017bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	8979      	ldrh	r1, [r7, #10]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 fc36 	bl	8002028 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 fac6 	bl	8001d52 <I2C_WaitOnTXISFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e07b      	b.n	80018c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d034      	beq.n	8001874 <HAL_I2C_Mem_Write+0x1c8>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180e:	2b00      	cmp	r3, #0
 8001810:	d130      	bne.n	8001874 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001818:	2200      	movs	r2, #0
 800181a:	2180      	movs	r1, #128	@ 0x80
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 fa3f 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e04d      	b.n	80018c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001830:	b29b      	uxth	r3, r3
 8001832:	2bff      	cmp	r3, #255	@ 0xff
 8001834:	d90e      	bls.n	8001854 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	22ff      	movs	r2, #255	@ 0xff
 800183a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001840:	b2da      	uxtb	r2, r3
 8001842:	8979      	ldrh	r1, [r7, #10]
 8001844:	2300      	movs	r3, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 fbeb 	bl	8002028 <I2C_TransferConfig>
 8001852:	e00f      	b.n	8001874 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001862:	b2da      	uxtb	r2, r3
 8001864:	8979      	ldrh	r1, [r7, #10]
 8001866:	2300      	movs	r3, #0
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 fbda 	bl	8002028 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d19e      	bne.n	80017bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 faac 	bl	8001de0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e01a      	b.n	80018c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2220      	movs	r2, #32
 8001898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <HAL_I2C_Mem_Write+0x224>)
 80018a6:	400b      	ands	r3, r1
 80018a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
  }
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	fe00e800 	.word	0xfe00e800

080018d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af02      	add	r7, sp, #8
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	817b      	strh	r3, [r7, #10]
 80018e6:	460b      	mov	r3, r1
 80018e8:	813b      	strh	r3, [r7, #8]
 80018ea:	4613      	mov	r3, r2
 80018ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	f040 80fd 	bne.w	8001af6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <HAL_I2C_Mem_Read+0x34>
 8001902:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800190e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0f1      	b.n	8001af8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_I2C_Mem_Read+0x4e>
 800191e:	2302      	movs	r3, #2
 8001920:	e0ea      	b.n	8001af8 <HAL_I2C_Mem_Read+0x224>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800192a:	f7ff f8db 	bl	8000ae4 <HAL_GetTick>
 800192e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2319      	movs	r3, #25
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f9af 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0d5      	b.n	8001af8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2222      	movs	r2, #34	@ 0x22
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2240      	movs	r2, #64	@ 0x40
 8001958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a3a      	ldr	r2, [r7, #32]
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800196c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001974:	88f8      	ldrh	r0, [r7, #6]
 8001976:	893a      	ldrh	r2, [r7, #8]
 8001978:	8979      	ldrh	r1, [r7, #10]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4603      	mov	r3, r0
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f913 	bl	8001bb0 <I2C_RequestMemoryRead>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0ad      	b.n	8001af8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	2bff      	cmp	r3, #255	@ 0xff
 80019a4:	d90e      	bls.n	80019c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	22ff      	movs	r2, #255	@ 0xff
 80019aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	8979      	ldrh	r1, [r7, #10]
 80019b4:	4b52      	ldr	r3, [pc, #328]	@ (8001b00 <HAL_I2C_Mem_Read+0x22c>)
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 fb33 	bl	8002028 <I2C_TransferConfig>
 80019c2:	e00f      	b.n	80019e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	8979      	ldrh	r1, [r7, #10]
 80019d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001b00 <HAL_I2C_Mem_Read+0x22c>)
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fb22 	bl	8002028 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ea:	2200      	movs	r2, #0
 80019ec:	2104      	movs	r1, #4
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f956 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e07c      	b.n	8001af8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d034      	beq.n	8001aa4 <HAL_I2C_Mem_Read+0x1d0>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d130      	bne.n	8001aa4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2180      	movs	r1, #128	@ 0x80
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f927 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e04d      	b.n	8001af8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	2bff      	cmp	r3, #255	@ 0xff
 8001a64:	d90e      	bls.n	8001a84 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	22ff      	movs	r2, #255	@ 0xff
 8001a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	8979      	ldrh	r1, [r7, #10]
 8001a74:	2300      	movs	r3, #0
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fad3 	bl	8002028 <I2C_TransferConfig>
 8001a82:	e00f      	b.n	8001aa4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	8979      	ldrh	r1, [r7, #10]
 8001a96:	2300      	movs	r3, #0
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fac2 	bl	8002028 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d19a      	bne.n	80019e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f994 	bl	8001de0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e01a      	b.n	8001af8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <HAL_I2C_Mem_Read+0x230>)
 8001ad6:	400b      	ands	r3, r1
 8001ad8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2220      	movs	r2, #32
 8001ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001af6:	2302      	movs	r3, #2
  }
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	80002400 	.word	0x80002400
 8001b04:	fe00e800 	.word	0xfe00e800

08001b08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	817b      	strh	r3, [r7, #10]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	813b      	strh	r3, [r7, #8]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	8979      	ldrh	r1, [r7, #10]
 8001b28:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <I2C_RequestMemoryWrite+0xa4>)
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 fa79 	bl	8002028 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	69b9      	ldr	r1, [r7, #24]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f909 	bl	8001d52 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e02c      	b.n	8001ba4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b50:	893b      	ldrh	r3, [r7, #8]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b5a:	e015      	b.n	8001b88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b5c:	893b      	ldrh	r3, [r7, #8]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	69b9      	ldr	r1, [r7, #24]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 f8ef 	bl	8001d52 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e012      	b.n	8001ba4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b7e:	893b      	ldrh	r3, [r7, #8]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2180      	movs	r1, #128	@ 0x80
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f884 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	80002000 	.word	0x80002000

08001bb0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	4608      	mov	r0, r1
 8001bba:	4611      	mov	r1, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	817b      	strh	r3, [r7, #10]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	813b      	strh	r3, [r7, #8]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	8979      	ldrh	r1, [r7, #10]
 8001bd0:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <I2C_RequestMemoryRead+0xa4>)
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 fa26 	bl	8002028 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f8b6 	bl	8001d52 <I2C_WaitOnTXISFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e02c      	b.n	8001c4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d105      	bne.n	8001c02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bf6:	893b      	ldrh	r3, [r7, #8]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c00:	e015      	b.n	8001c2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c02:	893b      	ldrh	r3, [r7, #8]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f89c 	bl	8001d52 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e012      	b.n	8001c4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c24:	893b      	ldrh	r3, [r7, #8]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2200      	movs	r2, #0
 8001c36:	2140      	movs	r1, #64	@ 0x40
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f831 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	80002000 	.word	0x80002000

08001c58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d103      	bne.n	8001c76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2200      	movs	r2, #0
 8001c74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d007      	beq.n	8001c94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	619a      	str	r2, [r3, #24]
  }
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	4613      	mov	r3, r2
 8001cae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb0:	e03b      	b.n	8001d2a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	6839      	ldr	r1, [r7, #0]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f8d6 	bl	8001e68 <I2C_IsErrorOccurred>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e041      	b.n	8001d4a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d02d      	beq.n	8001d2a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cce:	f7fe ff09 	bl	8000ae4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d302      	bcc.n	8001ce4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d122      	bne.n	8001d2a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4013      	ands	r3, r2
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d113      	bne.n	8001d2a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f043 0220 	orr.w	r2, r3, #32
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00f      	b.n	8001d4a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699a      	ldr	r2, [r3, #24]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4013      	ands	r3, r2
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d0b4      	beq.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d5e:	e033      	b.n	8001dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f87f 	bl	8001e68 <I2C_IsErrorOccurred>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e031      	b.n	8001dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7a:	d025      	beq.n	8001dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7c:	f7fe feb2 	bl	8000ae4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d302      	bcc.n	8001d92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d11a      	bne.n	8001dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d013      	beq.n	8001dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da4:	f043 0220 	orr.w	r2, r3, #32
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e007      	b.n	8001dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d1c4      	bne.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dec:	e02f      	b.n	8001e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f838 	bl	8001e68 <I2C_IsErrorOccurred>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e02d      	b.n	8001e5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e02:	f7fe fe6f 	bl	8000ae4 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d302      	bcc.n	8001e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d11a      	bne.n	8001e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d013      	beq.n	8001e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f043 0220 	orr.w	r2, r3, #32
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2220      	movs	r2, #32
 8001e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e007      	b.n	8001e5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d1c8      	bne.n	8001dee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	@ 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d068      	beq.n	8001f66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2210      	movs	r2, #16
 8001e9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e9c:	e049      	b.n	8001f32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d045      	beq.n	8001f32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ea6:	f7fe fe1d 	bl	8000ae4 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d302      	bcc.n	8001ebc <I2C_IsErrorOccurred+0x54>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d13a      	bne.n	8001f32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ece:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ede:	d121      	bne.n	8001f24 <I2C_IsErrorOccurred+0xbc>
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ee6:	d01d      	beq.n	8001f24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	d01a      	beq.n	8001f24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001efc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001efe:	f7fe fdf1 	bl	8000ae4 <HAL_GetTick>
 8001f02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f04:	e00e      	b.n	8001f24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f06:	f7fe fded 	bl	8000ae4 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b19      	cmp	r3, #25
 8001f12:	d907      	bls.n	8001f24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	f043 0320 	orr.w	r3, r3, #32
 8001f1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001f22:	e006      	b.n	8001f32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d1e9      	bne.n	8001f06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d003      	beq.n	8001f48 <I2C_IsErrorOccurred+0xe0>
 8001f40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0aa      	beq.n	8001e9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d103      	bne.n	8001f58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2220      	movs	r2, #32
 8001f56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00b      	beq.n	8001f90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001faa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00b      	beq.n	8001fd4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01c      	beq.n	8002016 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f7ff fe3b 	bl	8001c58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <I2C_IsErrorOccurred+0x1bc>)
 8001fee:	400b      	ands	r3, r1
 8001ff0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002016:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800201a:	4618      	mov	r0, r3
 800201c:	3728      	adds	r7, #40	@ 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	fe00e800 	.word	0xfe00e800

08002028 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	817b      	strh	r3, [r7, #10]
 8002036:	4613      	mov	r3, r2
 8002038:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002040:	7a7b      	ldrb	r3, [r7, #9]
 8002042:	041b      	lsls	r3, r3, #16
 8002044:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002048:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	4313      	orrs	r3, r2
 8002052:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002056:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	0d5b      	lsrs	r3, r3, #21
 8002062:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <I2C_TransferConfig+0x60>)
 8002068:	430b      	orrs	r3, r1
 800206a:	43db      	mvns	r3, r3
 800206c:	ea02 0103 	and.w	r1, r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	430a      	orrs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800207a:	bf00      	nop
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	03ff63ff 	.word	0x03ff63ff

0800208c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d138      	bne.n	8002114 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e032      	b.n	8002116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2224      	movs	r2, #36	@ 0x24
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b20      	cmp	r3, #32
 8002136:	d139      	bne.n	80021ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002142:	2302      	movs	r3, #2
 8002144:	e033      	b.n	80021ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2224      	movs	r2, #36	@ 0x24
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002174:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
  }
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0c0      	b.n	800234e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d106      	bne.n	80021e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f006 f9b1 	bl	8008548 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 fcdf 	bl	8004bb6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e03e      	b.n	800227c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021fe:	7bfa      	ldrb	r2, [r7, #15]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	3311      	adds	r3, #17
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	3310      	adds	r3, #16
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	3313      	adds	r3, #19
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	3320      	adds	r3, #32
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	3324      	adds	r3, #36	@ 0x24
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	3301      	adds	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	791b      	ldrb	r3, [r3, #4]
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	429a      	cmp	r2, r3
 8002284:	d3bb      	bcc.n	80021fe <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	e044      	b.n	8002316 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	440b      	add	r3, r1
 80022dc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	791b      	ldrb	r3, [r3, #4]
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	429a      	cmp	r2, r3
 800231e:	d3b5      	bcc.n	800228c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	e893 0006 	ldmia.w	r3, {r1, r2}
 800232c:	f002 fc5e 	bl	8004bec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7a9b      	ldrb	r3, [r3, #10]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f001 fc0e 	bl	8003b68 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_PCD_Start+0x16>
 8002368:	2302      	movs	r3, #2
 800236a:	e012      	b.n	8002392 <HAL_PCD_Start+0x3c>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f002 fc05 	bl	8004b88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f004 f9e2 	bl	800674c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 f9e7 	bl	800677a <USB_ReadInterrupts>
 80023ac:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fb06 	bl	80029ca <PCD_EP_ISR_Handler>

    return;
 80023be:	e110      	b.n	80025e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d013      	beq.n	80023f2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023dc:	b292      	uxth	r2, r2
 80023de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f006 f941 	bl	800866a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023e8:	2100      	movs	r1, #0
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f8fc 	bl	80025e8 <HAL_PCD_SetAddress>

    return;
 80023f0:	e0f7      	b.n	80025e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00c      	beq.n	8002416 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002404:	b29a      	uxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800240e:	b292      	uxth	r2, r2
 8002410:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002414:	e0e5      	b.n	80025e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00c      	beq.n	800243a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002428:	b29a      	uxth	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002432:	b292      	uxth	r2, r2
 8002434:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002438:	e0d3      	b.n	80025e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d034      	beq.n	80024ae <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800244c:	b29a      	uxth	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0204 	bic.w	r2, r2, #4
 8002456:	b292      	uxth	r2, r2
 8002458:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002464:	b29a      	uxth	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0208 	bic.w	r2, r2, #8
 800246e:	b292      	uxth	r2, r2
 8002470:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002486:	2100      	movs	r1, #0
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f006 fae1 	bl	8008a50 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f006 f924 	bl	80086dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024a6:	b292      	uxth	r2, r2
 80024a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024ac:	e099      	b.n	80025e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d027      	beq.n	8002508 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0208 	orr.w	r2, r2, #8
 80024ca:	b292      	uxth	r2, r2
 80024cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024d8:	b29a      	uxth	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e2:	b292      	uxth	r2, r2
 80024e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0204 	orr.w	r2, r2, #4
 80024fa:	b292      	uxth	r2, r2
 80024fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f006 f8d1 	bl	80086a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002506:	e06c      	b.n	80025e2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	d040      	beq.n	8002594 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800251a:	b29a      	uxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002524:	b292      	uxth	r2, r2
 8002526:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d12b      	bne.n	800258c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800253c:	b29a      	uxth	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0204 	orr.w	r2, r2, #4
 8002546:	b292      	uxth	r2, r2
 8002548:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0208 	orr.w	r2, r2, #8
 800255e:	b292      	uxth	r2, r2
 8002560:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002574:	b29b      	uxth	r3, r3
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002582:	2101      	movs	r1, #1
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f006 fa63 	bl	8008a50 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800258a:	e02a      	b.n	80025e2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f006 f88b 	bl	80086a8 <HAL_PCD_SuspendCallback>
    return;
 8002592:	e026      	b.n	80025e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00f      	beq.n	80025be <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025b0:	b292      	uxth	r2, r2
 80025b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f006 f849 	bl	800864e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025bc:	e011      	b.n	80025e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00c      	beq.n	80025e2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025da:	b292      	uxth	r2, r2
 80025dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80025e0:	bf00      	nop
  }
}
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_PCD_SetAddress+0x1a>
 80025fe:	2302      	movs	r3, #2
 8002600:	e012      	b.n	8002628 <HAL_PCD_SetAddress+0x40>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f004 f883 	bl	8006724 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	461a      	mov	r2, r3
 800263e:	4603      	mov	r3, r0
 8002640:	70fb      	strb	r3, [r7, #3]
 8002642:	460b      	mov	r3, r1
 8002644:	803b      	strh	r3, [r7, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800264e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002652:	2b00      	cmp	r3, #0
 8002654:	da0e      	bge.n	8002674 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	f003 0207 	and.w	r2, r3, #7
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	3310      	adds	r3, #16
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	705a      	strb	r2, [r3, #1]
 8002672:	e00e      	b.n	8002692 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	f003 0207 	and.w	r2, r3, #7
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	b2da      	uxtb	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800269e:	883b      	ldrh	r3, [r7, #0]
 80026a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	78ba      	ldrb	r2, [r7, #2]
 80026ac:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026ae:	78bb      	ldrb	r3, [r7, #2]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d102      	bne.n	80026ba <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_PCD_EP_Open+0x98>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e00e      	b.n	80026e6 <HAL_PCD_EP_Open+0xb6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f002 faa6 	bl	8004c28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80026e4:	7afb      	ldrb	r3, [r7, #11]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da0e      	bge.n	8002720 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	f003 0207 	and.w	r2, r3, #7
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	3310      	adds	r3, #16
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	705a      	strb	r2, [r3, #1]
 800271e:	e00e      	b.n	800273e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 0207 	and.w	r2, r3, #7
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_PCD_EP_Close+0x6a>
 8002754:	2302      	movs	r3, #2
 8002756:	e00e      	b.n	8002776 <HAL_PCD_EP_Close+0x88>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68f9      	ldr	r1, [r7, #12]
 8002766:	4618      	mov	r0, r3
 8002768:	f002 ff46 	bl	80055f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	460b      	mov	r3, r1
 800278c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	f003 0207 	and.w	r2, r3, #7
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027be:	7afb      	ldrb	r3, [r7, #11]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6979      	ldr	r1, [r7, #20]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 f8fe 	bl	80059d2 <USB_EPStartXfer>

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 0207 	and.w	r2, r3, #7
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	460b      	mov	r3, r1
 800281e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002820:	7afb      	ldrb	r3, [r7, #11]
 8002822:	f003 0207 	and.w	r2, r3, #7
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	3310      	adds	r3, #16
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2201      	movs	r2, #1
 800285a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800285c:	7afb      	ldrb	r3, [r7, #11]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	b2da      	uxtb	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6979      	ldr	r1, [r7, #20]
 800286e:	4618      	mov	r0, r3
 8002870:	f003 f8af 	bl	80059d2 <USB_EPStartXfer>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	7912      	ldrb	r2, [r2, #4]
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e03e      	b.n	800291a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800289c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da0e      	bge.n	80028c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	f003 0207 	and.w	r2, r3, #7
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	3310      	adds	r3, #16
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	705a      	strb	r2, [r3, #1]
 80028c0:	e00c      	b.n	80028dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_PCD_EP_SetStall+0x7e>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e00e      	b.n	800291a <HAL_PCD_EP_SetStall+0x9c>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68f9      	ldr	r1, [r7, #12]
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fe10 	bl	8006530 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	7912      	ldrb	r2, [r2, #4]
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e040      	b.n	80029c2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002944:	2b00      	cmp	r3, #0
 8002946:	da0e      	bge.n	8002966 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	f003 0207 	and.w	r2, r3, #7
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	3310      	adds	r3, #16
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	705a      	strb	r2, [r3, #1]
 8002964:	e00e      	b.n	8002984 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 0207 	and.w	r2, r3, #7
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_PCD_EP_ClrStall+0x82>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e00e      	b.n	80029c2 <HAL_PCD_EP_ClrStall+0xa0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68f9      	ldr	r1, [r7, #12]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 fe0d 	bl	80065d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b092      	sub	sp, #72	@ 0x48
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029d2:	e333      	b.n	800303c <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029dc:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80029de:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80029ea:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f040 8108 	bne.w	8002c04 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d14c      	bne.n	8002a98 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a0e:	813b      	strh	r3, [r7, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	893b      	ldrh	r3, [r7, #8]
 8002a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3310      	adds	r3, #16
 8002a26:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a4e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	441a      	add	r2, r3
 8002a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a5c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a5e:	2100      	movs	r1, #0
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f005 fdda 	bl	800861a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7b1b      	ldrb	r3, [r3, #12]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 82e5 	beq.w	800303c <PCD_EP_ISR_Handler+0x672>
 8002a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 82e0 	bne.w	800303c <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7b1b      	ldrb	r3, [r3, #12]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	731a      	strb	r2, [r3, #12]
 8002a96:	e2d1      	b.n	800303c <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a9e:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002aa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002aaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d032      	beq.n	8002b18 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ad8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f003 fe96 	bl	800681e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002afe:	4013      	ands	r3, r2
 8002b00:	817b      	strh	r3, [r7, #10]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	897a      	ldrh	r2, [r7, #10]
 8002b08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b0c:	b292      	uxth	r2, r2
 8002b0e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f005 fd55 	bl	80085c0 <HAL_PCD_SetupStageCallback>
 8002b16:	e291      	b.n	800303c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b18:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f280 828d 	bge.w	800303c <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002b2e:	4013      	ands	r3, r2
 8002b30:	81fb      	strh	r3, [r7, #14]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	89fa      	ldrh	r2, [r7, #14]
 8002b38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b66:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d019      	beq.n	8002ba4 <PCD_EP_ISR_Handler+0x1da>
 8002b70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d015      	beq.n	8002ba4 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7e:	6959      	ldr	r1, [r3, #20]
 8002b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b82:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b86:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f003 fe48 	bl	800681e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	441a      	add	r2, r3
 8002b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b9a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f005 fd20 	bl	80085e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002bac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 8242 	bne.w	800303c <PCD_EP_ISR_Handler+0x672>
 8002bb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002bba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002bbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bc2:	f000 823b 	beq.w	800303c <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd6:	81bb      	strh	r3, [r7, #12]
 8002bd8:	89bb      	ldrh	r3, [r7, #12]
 8002bda:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002bde:	81bb      	strh	r3, [r7, #12]
 8002be0:	89bb      	ldrh	r3, [r7, #12]
 8002be2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002be6:	81bb      	strh	r3, [r7, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	89bb      	ldrh	r3, [r7, #12]
 8002bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	8013      	strh	r3, [r2, #0]
 8002c02:	e21b      	b.n	800303c <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c16:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f280 80f1 	bge.w	8002e02 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c36:	4013      	ands	r3, r2
 8002c38:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c52:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c6a:	7b1b      	ldrb	r3, [r3, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d123      	bne.n	8002cb8 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c94:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8002c98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 808b 	beq.w	8002db8 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ca8:	6959      	ldr	r1, [r3, #20]
 8002caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cac:	88da      	ldrh	r2, [r3, #6]
 8002cae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002cb2:	f003 fdb4 	bl	800681e <USB_ReadPMA>
 8002cb6:	e07f      	b.n	8002db8 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cba:	78db      	ldrb	r3, [r3, #3]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d109      	bne.n	8002cd4 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002cc0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f9c6 	bl	8003058 <HAL_PCD_EP_DB_Receive>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002cd2:	e071      	b.n	8002db8 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	441a      	add	r2, r3
 8002cfe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d022      	beq.n	8002d74 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d52:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002d56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02c      	beq.n	8002db8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d64:	6959      	ldr	r1, [r3, #20]
 8002d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d68:	891a      	ldrh	r2, [r3, #8]
 8002d6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d6e:	f003 fd56 	bl	800681e <USB_ReadPMA>
 8002d72:	e021      	b.n	8002db8 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d98:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002d9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d009      	beq.n	8002db8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002daa:	6959      	ldr	r1, [r3, #20]
 8002dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dae:	895a      	ldrh	r2, [r3, #10]
 8002db0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002db4:	f003 fd33 	bl	800681e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002dc0:	441a      	add	r2, r3
 8002dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002dce:	441a      	add	r2, r3
 8002dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <PCD_EP_ISR_Handler+0x41e>
 8002ddc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d206      	bcs.n	8002df6 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f005 fbf8 	bl	80085e4 <HAL_PCD_DataOutStageCallback>
 8002df4:	e005      	b.n	8002e02 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 fde8 	bl	80059d2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8117 	beq.w	800303c <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e0e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	3310      	adds	r3, #16
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	441a      	add	r2, r3
 8002e4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e5c:	78db      	ldrb	r3, [r3, #3]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 80a1 	bne.w	8002fa6 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8002e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e6c:	7b1b      	ldrb	r3, [r3, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8092 	beq.w	8002f98 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d046      	beq.n	8002f0c <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e80:	785b      	ldrb	r3, [r3, #1]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d126      	bne.n	8002ed4 <PCD_EP_ISR_Handler+0x50a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	00da      	lsls	r2, r3, #3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	801a      	strh	r2, [r3, #0]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	e061      	b.n	8002f98 <PCD_EP_ISR_Handler+0x5ce>
 8002ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ed6:	785b      	ldrb	r3, [r3, #1]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d15d      	bne.n	8002f98 <PCD_EP_ISR_Handler+0x5ce>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	00da      	lsls	r2, r3, #3
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2200      	movs	r2, #0
 8002f08:	801a      	strh	r2, [r3, #0]
 8002f0a:	e045      	b.n	8002f98 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d126      	bne.n	8002f68 <PCD_EP_ISR_Handler+0x59e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	4413      	add	r3, r2
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	00da      	lsls	r2, r3, #3
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f40:	623b      	str	r3, [r7, #32]
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	801a      	strh	r2, [r3, #0]
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	e017      	b.n	8002f98 <PCD_EP_ISR_Handler+0x5ce>
 8002f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d113      	bne.n	8002f98 <PCD_EP_ISR_Handler+0x5ce>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7e:	4413      	add	r3, r2
 8002f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	00da      	lsls	r2, r3, #3
 8002f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f94:	2200      	movs	r2, #0
 8002f96:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f005 fb3b 	bl	800861a <HAL_PCD_DataInStageCallback>
 8002fa4:	e04a      	b.n	800303c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002fa6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d13f      	bne.n	8003030 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd4:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8002fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d906      	bls.n	8002fee <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8002fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fe2:	699a      	ldr	r2, [r3, #24]
 8002fe4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002fe6:	1ad2      	subs	r2, r2, r3
 8002fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fea:	619a      	str	r2, [r3, #24]
 8002fec:	e002      	b.n	8002ff4 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f005 fb09 	bl	800861a <HAL_PCD_DataInStageCallback>
 8003008:	e018      	b.n	800303c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800300a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003010:	441a      	add	r2, r3
 8003012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003014:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800301c:	441a      	add	r2, r3
 800301e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003020:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003028:	4618      	mov	r0, r3
 800302a:	f002 fcd2 	bl	80059d2 <USB_EPStartXfer>
 800302e:	e005      	b.n	800303c <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003030:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003032:	461a      	mov	r2, r3
 8003034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f917 	bl	800326a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003044:	b29b      	uxth	r3, r3
 8003046:	b21b      	sxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	f6ff acc3 	blt.w	80029d4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3748      	adds	r7, #72	@ 0x48
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d07c      	beq.n	800316a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003078:	b29b      	uxth	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	4413      	add	r3, r2
 800308a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003094:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	8b7b      	ldrh	r3, [r7, #26]
 800309c:	429a      	cmp	r2, r3
 800309e:	d306      	bcc.n	80030ae <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	8b7b      	ldrh	r3, [r7, #26]
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	619a      	str	r2, [r3, #24]
 80030ac:	e002      	b.n	80030b4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d123      	bne.n	8003104 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030d6:	833b      	strh	r3, [r7, #24]
 80030d8:	8b3b      	ldrh	r3, [r7, #24]
 80030da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030de:	833b      	strh	r3, [r7, #24]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	8b3b      	ldrh	r3, [r7, #24]
 80030f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003100:	b29b      	uxth	r3, r3
 8003102:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01f      	beq.n	800314e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003128:	82fb      	strh	r3, [r7, #22]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	441a      	add	r2, r3
 8003138:	8afb      	ldrh	r3, [r7, #22]
 800313a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800313e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003146:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800314a:	b29b      	uxth	r3, r3
 800314c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800314e:	8b7b      	ldrh	r3, [r7, #26]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8085 	beq.w	8003260 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6959      	ldr	r1, [r3, #20]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	891a      	ldrh	r2, [r3, #8]
 8003162:	8b7b      	ldrh	r3, [r7, #26]
 8003164:	f003 fb5b 	bl	800681e <USB_ReadPMA>
 8003168:	e07a      	b.n	8003260 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	4413      	add	r3, r2
 8003184:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	8b7b      	ldrh	r3, [r7, #26]
 8003196:	429a      	cmp	r2, r3
 8003198:	d306      	bcc.n	80031a8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	8b7b      	ldrh	r3, [r7, #26]
 80031a0:	1ad2      	subs	r2, r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	619a      	str	r2, [r3, #24]
 80031a6:	e002      	b.n	80031ae <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2200      	movs	r2, #0
 80031ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d123      	bne.n	80031fe <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d0:	83fb      	strh	r3, [r7, #30]
 80031d2:	8bfb      	ldrh	r3, [r7, #30]
 80031d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80031d8:	83fb      	strh	r3, [r7, #30]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	441a      	add	r2, r3
 80031e8:	8bfb      	ldrh	r3, [r7, #30]
 80031ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d11f      	bne.n	8003248 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800321e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003222:	83bb      	strh	r3, [r7, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	8bbb      	ldrh	r3, [r7, #28]
 8003234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800323c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003240:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003244:	b29b      	uxth	r3, r3
 8003246:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003248:	8b7b      	ldrh	r3, [r7, #26]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	6959      	ldr	r1, [r3, #20]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	895a      	ldrh	r2, [r3, #10]
 800325a:	8b7b      	ldrh	r3, [r7, #26]
 800325c:	f003 fadf 	bl	800681e <USB_ReadPMA>
    }
  }

  return count;
 8003260:	8b7b      	ldrh	r3, [r7, #26]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b0a6      	sub	sp, #152	@ 0x98
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	4613      	mov	r3, r2
 8003276:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 81f7 	beq.w	8003672 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800328c:	b29b      	uxth	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	4413      	add	r3, r2
 800329e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d907      	bls.n	80032c8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	699a      	ldr	r2, [r3, #24]
 80032bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80032c0:	1ad2      	subs	r2, r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	619a      	str	r2, [r3, #24]
 80032c6:	e002      	b.n	80032ce <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 80e1 	bne.w	800349a <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	785b      	ldrb	r3, [r3, #1]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d126      	bne.n	800332e <HAL_PCD_EP_DB_Transmit+0xc4>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f4:	4413      	add	r3, r2
 80032f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	00da      	lsls	r2, r3, #3
 80032fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003300:	4413      	add	r3, r2
 8003302:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003312:	b29a      	uxth	r2, r3
 8003314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003316:	801a      	strh	r2, [r3, #0]
 8003318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003326:	b29a      	uxth	r2, r3
 8003328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332a:	801a      	strh	r2, [r3, #0]
 800332c:	e01a      	b.n	8003364 <HAL_PCD_EP_DB_Transmit+0xfa>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d116      	bne.n	8003364 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003344:	b29b      	uxth	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334a:	4413      	add	r3, r2
 800334c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	00da      	lsls	r2, r3, #3
 8003354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003356:	4413      	add	r3, r2
 8003358:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800335c:	637b      	str	r3, [r7, #52]	@ 0x34
 800335e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003360:	2200      	movs	r2, #0
 8003362:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d126      	bne.n	80033c0 <HAL_PCD_EP_DB_Transmit+0x156>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	623b      	str	r3, [r7, #32]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003380:	b29b      	uxth	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	4413      	add	r3, r2
 8003388:	623b      	str	r3, [r7, #32]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	00da      	lsls	r2, r3, #3
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	4413      	add	r3, r2
 8003394:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	801a      	strh	r2, [r3, #0]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	801a      	strh	r2, [r3, #0]
 80033be:	e017      	b.n	80033f0 <HAL_PCD_EP_DB_Transmit+0x186>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	785b      	ldrb	r3, [r3, #1]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d113      	bne.n	80033f0 <HAL_PCD_EP_DB_Transmit+0x186>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	4413      	add	r3, r2
 80033d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	00da      	lsls	r2, r3, #3
 80033e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e2:	4413      	add	r3, r2
 80033e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	2200      	movs	r2, #0
 80033ee:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	78db      	ldrb	r3, [r3, #3]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d123      	bne.n	8003440 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800340e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003412:	837b      	strh	r3, [r7, #26]
 8003414:	8b7b      	ldrh	r3, [r7, #26]
 8003416:	f083 0320 	eor.w	r3, r3, #32
 800341a:	837b      	strh	r3, [r7, #26]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	441a      	add	r2, r3
 800342a:	8b7b      	ldrh	r3, [r7, #26]
 800342c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003430:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003434:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800343c:	b29b      	uxth	r3, r3
 800343e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	4619      	mov	r1, r3
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f005 f8e7 	bl	800861a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01f      	beq.n	8003496 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800346c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003470:	833b      	strh	r3, [r7, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	441a      	add	r2, r3
 8003480:	8b3b      	ldrh	r3, [r7, #24]
 8003482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800348a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800348e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003492:	b29b      	uxth	r3, r3
 8003494:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	e31f      	b.n	8003ada <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d021      	beq.n	80034e8 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	441a      	add	r2, r3
 80034d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80034d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	f040 82ca 	bne.w	8003a88 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80034fc:	441a      	add	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	69da      	ldr	r2, [r3, #28]
 8003506:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800350a:	441a      	add	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6a1a      	ldr	r2, [r3, #32]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	429a      	cmp	r2, r3
 800351a:	d309      	bcc.n	8003530 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	6a1a      	ldr	r2, [r3, #32]
 8003526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003528:	1ad2      	subs	r2, r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	621a      	str	r2, [r3, #32]
 800352e:	e015      	b.n	800355c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d107      	bne.n	8003548 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003538:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800353c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003546:	e009      	b.n	800355c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2200      	movs	r2, #0
 800355a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	785b      	ldrb	r3, [r3, #1]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d15f      	bne.n	8003624 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	643b      	str	r3, [r7, #64]	@ 0x40
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003578:	4413      	add	r3, r2
 800357a:	643b      	str	r3, [r7, #64]	@ 0x40
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	00da      	lsls	r2, r3, #3
 8003582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003584:	4413      	add	r3, r2
 8003586:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800358a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800358c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003596:	b29a      	uxth	r2, r3
 8003598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800359a:	801a      	strh	r2, [r3, #0]
 800359c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_PCD_EP_DB_Transmit+0x34e>
 80035a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	e051      	b.n	800365c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80035b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80035bc:	d816      	bhi.n	80035ec <HAL_PCD_EP_DB_Transmit+0x382>
 80035be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80035c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80035ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d0:	3301      	adds	r3, #1
 80035d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80035d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	b29a      	uxth	r2, r3
 80035da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035dc:	b29b      	uxth	r3, r3
 80035de:	029b      	lsls	r3, r3, #10
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	e037      	b.n	800365c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80035ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80035f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <HAL_PCD_EP_DB_Transmit+0x398>
 80035fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035fe:	3b01      	subs	r3, #1
 8003600:	653b      	str	r3, [r7, #80]	@ 0x50
 8003602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	b29a      	uxth	r2, r3
 8003608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800360a:	b29b      	uxth	r3, r3
 800360c:	029b      	lsls	r3, r3, #10
 800360e:	b29b      	uxth	r3, r3
 8003610:	4313      	orrs	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800361c:	b29a      	uxth	r2, r3
 800361e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	e01b      	b.n	800365c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	785b      	ldrb	r3, [r3, #1]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d117      	bne.n	800365c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800363a:	b29b      	uxth	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003640:	4413      	add	r3, r2
 8003642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	00da      	lsls	r2, r3, #3
 800364a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800364c:	4413      	add	r3, r2
 800364e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003652:	647b      	str	r3, [r7, #68]	@ 0x44
 8003654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003656:	b29a      	uxth	r2, r3
 8003658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800365a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	6959      	ldr	r1, [r3, #20]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	891a      	ldrh	r2, [r3, #8]
 8003668:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800366a:	b29b      	uxth	r3, r3
 800366c:	f003 f895 	bl	800679a <USB_WritePMA>
 8003670:	e20a      	b.n	8003a88 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800367a:	b29b      	uxth	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	4413      	add	r3, r2
 800368c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003696:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d307      	bcc.n	80036b6 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80036ae:	1ad2      	subs	r2, r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	619a      	str	r2, [r3, #24]
 80036b4:	e002      	b.n	80036bc <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f040 80f6 	bne.w	80038b2 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	785b      	ldrb	r3, [r3, #1]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d126      	bne.n	800371c <HAL_PCD_EP_DB_Transmit+0x4b2>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036dc:	b29b      	uxth	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036e2:	4413      	add	r3, r2
 80036e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	00da      	lsls	r2, r3, #3
 80036ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ee:	4413      	add	r3, r2
 80036f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80036f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003700:	b29a      	uxth	r2, r3
 8003702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003704:	801a      	strh	r2, [r3, #0]
 8003706:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003714:	b29a      	uxth	r2, r3
 8003716:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	e01a      	b.n	8003752 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d116      	bne.n	8003752 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003732:	b29b      	uxth	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003738:	4413      	add	r3, r2
 800373a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	00da      	lsls	r2, r3, #3
 8003742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003744:	4413      	add	r3, r2
 8003746:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800374a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800374c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800374e:	2200      	movs	r2, #0
 8003750:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d12f      	bne.n	80037c2 <HAL_PCD_EP_DB_Transmit+0x558>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003772:	b29b      	uxth	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800377a:	4413      	add	r3, r2
 800377c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	00da      	lsls	r2, r3, #3
 8003786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800378a:	4413      	add	r3, r2
 800378c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003794:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037a6:	801a      	strh	r2, [r3, #0]
 80037a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	e01c      	b.n	80037fc <HAL_PCD_EP_DB_Transmit+0x592>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d118      	bne.n	80037fc <HAL_PCD_EP_DB_Transmit+0x592>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037da:	4413      	add	r3, r2
 80037dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	00da      	lsls	r2, r3, #3
 80037e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037ea:	4413      	add	r3, r2
 80037ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037f8:	2200      	movs	r2, #0
 80037fa:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	78db      	ldrb	r3, [r3, #3]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d127      	bne.n	8003854 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800381a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800381e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003822:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003826:	f083 0320 	eor.w	r3, r3, #32
 800382a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	441a      	add	r2, r3
 800383c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003840:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003844:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800384c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003850:	b29b      	uxth	r3, r3
 8003852:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f004 fedd 	bl	800861a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d121      	bne.n	80038ae <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003884:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800389a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800389e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e113      	b.n	8003ada <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d121      	bne.n	8003900 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	441a      	add	r2, r3
 80038e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80038ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003906:	2b01      	cmp	r3, #1
 8003908:	f040 80be 	bne.w	8003a88 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003914:	441a      	add	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003922:	441a      	add	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	6a1a      	ldr	r2, [r3, #32]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	429a      	cmp	r2, r3
 8003932:	d309      	bcc.n	8003948 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003940:	1ad2      	subs	r2, r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	621a      	str	r2, [r3, #32]
 8003946:	e015      	b.n	8003974 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d107      	bne.n	8003960 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003950:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003954:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800395e:	e009      	b.n	8003974 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2200      	movs	r2, #0
 800396a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	785b      	ldrb	r3, [r3, #1]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d15f      	bne.n	8003a42 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003990:	b29b      	uxth	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003996:	4413      	add	r3, r2
 8003998:	66bb      	str	r3, [r7, #104]	@ 0x68
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	00da      	lsls	r2, r3, #3
 80039a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039a2:	4413      	add	r3, r2
 80039a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80039aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039b8:	801a      	strh	r2, [r3, #0]
 80039ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x76c>
 80039c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	e04e      	b.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x80a>
 80039d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80039da:	d816      	bhi.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x7a0>
 80039dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80039e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_PCD_EP_DB_Transmit+0x788>
 80039ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039ee:	3301      	adds	r3, #1
 80039f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80039f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	029b      	lsls	r3, r3, #10
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	4313      	orrs	r3, r2
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a06:	801a      	strh	r2, [r3, #0]
 8003a08:	e034      	b.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003a0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d102      	bne.n	8003a20 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003a1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	029b      	lsls	r3, r3, #10
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a3e:	801a      	strh	r2, [r3, #0]
 8003a40:	e018      	b.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	785b      	ldrb	r3, [r3, #1]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d114      	bne.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a58:	4413      	add	r3, r2
 8003a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	00da      	lsls	r2, r3, #3
 8003a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a64:	4413      	add	r3, r2
 8003a66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a72:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6959      	ldr	r1, [r3, #20]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	895a      	ldrh	r2, [r3, #10]
 8003a80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f002 fe89 	bl	800679a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aa2:	82fb      	strh	r3, [r7, #22]
 8003aa4:	8afb      	ldrh	r3, [r7, #22]
 8003aa6:	f083 0310 	eor.w	r3, r3, #16
 8003aaa:	82fb      	strh	r3, [r7, #22]
 8003aac:	8afb      	ldrh	r3, [r7, #22]
 8003aae:	f083 0320 	eor.w	r3, r3, #32
 8003ab2:	82fb      	strh	r3, [r7, #22]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	441a      	add	r2, r3
 8003ac2:	8afb      	ldrh	r3, [r7, #22]
 8003ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003acc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3798      	adds	r7, #152	@ 0x98
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b087      	sub	sp, #28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	817b      	strh	r3, [r7, #10]
 8003af0:	4613      	mov	r3, r2
 8003af2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003af4:	897b      	ldrh	r3, [r7, #10]
 8003af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b00:	897b      	ldrh	r3, [r7, #10]
 8003b02:	f003 0207 	and.w	r2, r3, #7
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	3310      	adds	r3, #16
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e009      	b.n	8003b2c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b18:	897a      	ldrh	r2, [r7, #10]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4413      	add	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b2c:	893b      	ldrh	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	80da      	strh	r2, [r3, #6]
 8003b40:	e00b      	b.n	8003b5a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2201      	movs	r2, #1
 8003b46:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	0c1b      	lsrs	r3, r3, #16
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	371c      	adds	r7, #28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f043 0302 	orr.w	r3, r3, #2
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d141      	bne.n	8003c4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bca:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd6:	d131      	bne.n	8003c3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd8:	4b47      	ldr	r3, [pc, #284]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bde:	4a46      	ldr	r2, [pc, #280]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003be4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003be8:	4b43      	ldr	r3, [pc, #268]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bf0:	4a41      	ldr	r2, [pc, #260]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bf8:	4b40      	ldr	r3, [pc, #256]	@ (8003cfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2232      	movs	r2, #50	@ 0x32
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	4a3f      	ldr	r2, [pc, #252]	@ (8003d00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	0c9b      	lsrs	r3, r3, #18
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c0e:	e002      	b.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c16:	4b38      	ldr	r3, [pc, #224]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c22:	d102      	bne.n	8003c2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f2      	bne.n	8003c10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c2a:	4b33      	ldr	r3, [pc, #204]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c36:	d158      	bne.n	8003cea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e057      	b.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c42:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c4c:	e04d      	b.n	8003cea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c54:	d141      	bne.n	8003cda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c56:	4b28      	ldr	r3, [pc, #160]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c62:	d131      	bne.n	8003cc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c64:	4b24      	ldr	r3, [pc, #144]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c6a:	4a23      	ldr	r2, [pc, #140]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c74:	4b20      	ldr	r3, [pc, #128]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c84:	4b1d      	ldr	r3, [pc, #116]	@ (8003cfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2232      	movs	r2, #50	@ 0x32
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003d00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	0c9b      	lsrs	r3, r3, #18
 8003c96:	3301      	adds	r3, #1
 8003c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c9a:	e002      	b.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ca2:	4b15      	ldr	r3, [pc, #84]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cae:	d102      	bne.n	8003cb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f2      	bne.n	8003c9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cb6:	4b10      	ldr	r3, [pc, #64]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc2:	d112      	bne.n	8003cea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e011      	b.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cce:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003cd8:	e007      	b.n	8003cea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cda:	4b07      	ldr	r3, [pc, #28]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ce2:	4a05      	ldr	r2, [pc, #20]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ce8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40007000 	.word	0x40007000
 8003cfc:	20000000 	.word	0x20000000
 8003d00:	431bde83 	.word	0x431bde83

08003d04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d08:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a04      	ldr	r2, [pc, #16]	@ (8003d20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d12:	6093      	str	r3, [r2, #8]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40007000 	.word	0x40007000

08003d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e2fe      	b.n	8004334 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d075      	beq.n	8003e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d42:	4b97      	ldr	r3, [pc, #604]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d4c:	4b94      	ldr	r3, [pc, #592]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d102      	bne.n	8003d62 <HAL_RCC_OscConfig+0x3e>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d002      	beq.n	8003d68 <HAL_RCC_OscConfig+0x44>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b8d      	ldr	r3, [pc, #564]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05b      	beq.n	8003e2c <HAL_RCC_OscConfig+0x108>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d157      	bne.n	8003e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e2d9      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x74>
 8003d8a:	4b85      	ldr	r3, [pc, #532]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a84      	ldr	r2, [pc, #528]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x98>
 8003da2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7e      	ldr	r2, [pc, #504]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b7c      	ldr	r3, [pc, #496]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7b      	ldr	r2, [pc, #492]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003dbc:	4b78      	ldr	r3, [pc, #480]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a77      	ldr	r2, [pc, #476]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b75      	ldr	r3, [pc, #468]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a74      	ldr	r2, [pc, #464]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fc fe82 	bl	8000ae4 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fc fe7e 	bl	8000ae4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e29e      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df6:	4b6a      	ldr	r3, [pc, #424]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xc0>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fc fe6e 	bl	8000ae4 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fc fe6a 	bl	8000ae4 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	@ 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e28a      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1e:	4b60      	ldr	r3, [pc, #384]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0xe8>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d075      	beq.n	8003f26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3a:	4b59      	ldr	r3, [pc, #356]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e44:	4b56      	ldr	r3, [pc, #344]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	d102      	bne.n	8003e5a <HAL_RCC_OscConfig+0x136>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d002      	beq.n	8003e60 <HAL_RCC_OscConfig+0x13c>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d11f      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e60:	4b4f      	ldr	r3, [pc, #316]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_OscConfig+0x154>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e25d      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b49      	ldr	r3, [pc, #292]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	4946      	ldr	r1, [pc, #280]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e8c:	4b45      	ldr	r3, [pc, #276]	@ (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fc fddb 	bl	8000a4c <HAL_InitTick>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d043      	beq.n	8003f24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e249      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d023      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea8:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a3c      	ldr	r2, [pc, #240]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fc fe16 	bl	8000ae4 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fc fe12 	bl	8000ae4 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e232      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ece:	4b34      	ldr	r3, [pc, #208]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	4b31      	ldr	r3, [pc, #196]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	492d      	ldr	r1, [pc, #180]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
 8003eee:	e01a      	b.n	8003f26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fc fdf2 	bl	8000ae4 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fc fdee 	bl	8000ae4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e20e      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f16:	4b22      	ldr	r3, [pc, #136]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1e0>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d041      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3a:	4b19      	ldr	r3, [pc, #100]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f40:	4a17      	ldr	r2, [pc, #92]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fc fdcb 	bl	8000ae4 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f52:	f7fc fdc7 	bl	8000ae4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e1e7      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f64:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0ef      	beq.n	8003f52 <HAL_RCC_OscConfig+0x22e>
 8003f72:	e020      	b.n	8003fb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f7a:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fc fdae 	bl	8000ae4 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f8a:	e00d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8c:	f7fc fdaa 	bl	8000ae4 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d906      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1ca      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fa8:	4b8c      	ldr	r3, [pc, #560]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1ea      	bne.n	8003f8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 80a6 	beq.w	8004110 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fc8:	4b84      	ldr	r3, [pc, #528]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x2b4>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x2b6>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	4b7f      	ldr	r3, [pc, #508]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fea:	4b7c      	ldr	r3, [pc, #496]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffa:	4b79      	ldr	r3, [pc, #484]	@ (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d118      	bne.n	8004038 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004006:	4b76      	ldr	r3, [pc, #472]	@ (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a75      	ldr	r2, [pc, #468]	@ (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004012:	f7fc fd67 	bl	8000ae4 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401a:	f7fc fd63 	bl	8000ae4 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e183      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402c:	4b6c      	ldr	r3, [pc, #432]	@ (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d108      	bne.n	8004052 <HAL_RCC_OscConfig+0x32e>
 8004040:	4b66      	ldr	r3, [pc, #408]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	4a65      	ldr	r2, [pc, #404]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004050:	e024      	b.n	800409c <HAL_RCC_OscConfig+0x378>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b05      	cmp	r3, #5
 8004058:	d110      	bne.n	800407c <HAL_RCC_OscConfig+0x358>
 800405a:	4b60      	ldr	r3, [pc, #384]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004060:	4a5e      	ldr	r2, [pc, #376]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800406a:	4b5c      	ldr	r3, [pc, #368]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004070:	4a5a      	ldr	r2, [pc, #360]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800407a:	e00f      	b.n	800409c <HAL_RCC_OscConfig+0x378>
 800407c:	4b57      	ldr	r3, [pc, #348]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004082:	4a56      	ldr	r2, [pc, #344]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800408c:	4b53      	ldr	r3, [pc, #332]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004092:	4a52      	ldr	r2, [pc, #328]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d016      	beq.n	80040d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a4:	f7fc fd1e 	bl	8000ae4 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f7fc fd1a 	bl	8000ae4 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e138      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c2:	4b46      	ldr	r3, [pc, #280]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ed      	beq.n	80040ac <HAL_RCC_OscConfig+0x388>
 80040d0:	e015      	b.n	80040fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fc fd07 	bl	8000ae4 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fc fd03 	bl	8000ae4 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e121      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040f0:	4b3a      	ldr	r3, [pc, #232]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ed      	bne.n	80040da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040fe:	7ffb      	ldrb	r3, [r7, #31]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004104:	4b35      	ldr	r3, [pc, #212]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004108:	4a34      	ldr	r2, [pc, #208]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800410e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d03c      	beq.n	8004196 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01c      	beq.n	800415e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004124:	4b2d      	ldr	r3, [pc, #180]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004126:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800412a:	4a2c      	ldr	r2, [pc, #176]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fc fcd6 	bl	8000ae4 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800413c:	f7fc fcd2 	bl	8000ae4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e0f2      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800414e:	4b23      	ldr	r3, [pc, #140]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004150:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ef      	beq.n	800413c <HAL_RCC_OscConfig+0x418>
 800415c:	e01b      	b.n	8004196 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800415e:	4b1f      	ldr	r3, [pc, #124]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004160:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004164:	4a1d      	ldr	r2, [pc, #116]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416e:	f7fc fcb9 	bl	8000ae4 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004176:	f7fc fcb5 	bl	8000ae4 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e0d5      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004188:	4b14      	ldr	r3, [pc, #80]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800418a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1ef      	bne.n	8004176 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80c9 	beq.w	8004332 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a0:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	f000 8083 	beq.w	80042b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d15e      	bne.n	8004274 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b6:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a08      	ldr	r2, [pc, #32]	@ (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fc fc8f 	bl	8000ae4 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c8:	e00c      	b.n	80041e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fc fc8b 	bl	8000ae4 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d905      	bls.n	80041e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e0ab      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e4:	4b55      	ldr	r3, [pc, #340]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ec      	bne.n	80041ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f0:	4b52      	ldr	r3, [pc, #328]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	4b52      	ldr	r3, [pc, #328]	@ (8004340 <HAL_RCC_OscConfig+0x61c>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6a11      	ldr	r1, [r2, #32]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004200:	3a01      	subs	r2, #1
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800420a:	0212      	lsls	r2, r2, #8
 800420c:	4311      	orrs	r1, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004212:	0852      	lsrs	r2, r2, #1
 8004214:	3a01      	subs	r2, #1
 8004216:	0552      	lsls	r2, r2, #21
 8004218:	4311      	orrs	r1, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800421e:	0852      	lsrs	r2, r2, #1
 8004220:	3a01      	subs	r2, #1
 8004222:	0652      	lsls	r2, r2, #25
 8004224:	4311      	orrs	r1, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800422a:	06d2      	lsls	r2, r2, #27
 800422c:	430a      	orrs	r2, r1
 800422e:	4943      	ldr	r1, [pc, #268]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 8004230:	4313      	orrs	r3, r2
 8004232:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004234:	4b41      	ldr	r3, [pc, #260]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a40      	ldr	r2, [pc, #256]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 800423a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800423e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004240:	4b3e      	ldr	r3, [pc, #248]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a3d      	ldr	r2, [pc, #244]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 8004246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800424a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fc fc4a 	bl	8000ae4 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004254:	f7fc fc46 	bl	8000ae4 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e066      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004266:	4b35      	ldr	r3, [pc, #212]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x530>
 8004272:	e05e      	b.n	8004332 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004274:	4b31      	ldr	r3, [pc, #196]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a30      	ldr	r2, [pc, #192]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 800427a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800427e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fc fc30 	bl	8000ae4 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004288:	f7fc fc2c 	bl	8000ae4 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e04c      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429a:	4b28      	ldr	r3, [pc, #160]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042a6:	4b25      	ldr	r3, [pc, #148]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	4924      	ldr	r1, [pc, #144]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 80042ac:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <HAL_RCC_OscConfig+0x620>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	60cb      	str	r3, [r1, #12]
 80042b2:	e03e      	b.n	8004332 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e039      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042c0:	4b1e      	ldr	r3, [pc, #120]	@ (800433c <HAL_RCC_OscConfig+0x618>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0203 	and.w	r2, r3, #3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d12c      	bne.n	800432e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	3b01      	subs	r3, #1
 80042e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d123      	bne.n	800432e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d11b      	bne.n	800432e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d113      	bne.n	800432e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	3b01      	subs	r3, #1
 8004314:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d109      	bne.n	800432e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	3b01      	subs	r3, #1
 8004328:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3720      	adds	r7, #32
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	019f800c 	.word	0x019f800c
 8004344:	feeefffc 	.word	0xfeeefffc

08004348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e11e      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004360:	4b91      	ldr	r3, [pc, #580]	@ (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d910      	bls.n	8004390 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b8e      	ldr	r3, [pc, #568]	@ (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 020f 	bic.w	r2, r3, #15
 8004376:	498c      	ldr	r1, [pc, #560]	@ (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b8a      	ldr	r3, [pc, #552]	@ (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e106      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d073      	beq.n	8004484 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d129      	bne.n	80043f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a4:	4b81      	ldr	r3, [pc, #516]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0f4      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043b4:	f000 f966 	bl	8004684 <RCC_GetSysClockFreqFromPLLSource>
 80043b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4a7c      	ldr	r2, [pc, #496]	@ (80045b0 <HAL_RCC_ClockConfig+0x268>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d93f      	bls.n	8004442 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043c2:	4b7a      	ldr	r3, [pc, #488]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d033      	beq.n	8004442 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d12f      	bne.n	8004442 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043e2:	4b72      	ldr	r3, [pc, #456]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043ea:	4a70      	ldr	r2, [pc, #448]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 80043ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043f2:	2380      	movs	r3, #128	@ 0x80
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e024      	b.n	8004442 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004400:	4b6a      	ldr	r3, [pc, #424]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0c6      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004410:	4b66      	ldr	r3, [pc, #408]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0be      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004420:	f000 f8ce 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8004424:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4a61      	ldr	r2, [pc, #388]	@ (80045b0 <HAL_RCC_ClockConfig+0x268>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d909      	bls.n	8004442 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800442e:	4b5f      	ldr	r3, [pc, #380]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004436:	4a5d      	ldr	r2, [pc, #372]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800443c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800443e:	2380      	movs	r3, #128	@ 0x80
 8004440:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b5a      	ldr	r3, [pc, #360]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4957      	ldr	r1, [pc, #348]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004450:	4313      	orrs	r3, r2
 8004452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004454:	f7fc fb46 	bl	8000ae4 <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fc fb42 	bl	8000ae4 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e095      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b4e      	ldr	r3, [pc, #312]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d023      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800449c:	4b43      	ldr	r3, [pc, #268]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a42      	ldr	r2, [pc, #264]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044b4:	4b3d      	ldr	r3, [pc, #244]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80044bc:	4a3b      	ldr	r2, [pc, #236]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c4:	4b39      	ldr	r3, [pc, #228]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4936      	ldr	r1, [pc, #216]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
 80044d6:	e008      	b.n	80044ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b80      	cmp	r3, #128	@ 0x80
 80044dc:	d105      	bne.n	80044ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044de:	4b33      	ldr	r3, [pc, #204]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4a32      	ldr	r2, [pc, #200]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ea:	4b2f      	ldr	r3, [pc, #188]	@ (80045a8 <HAL_RCC_ClockConfig+0x260>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d21d      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f8:	4b2b      	ldr	r3, [pc, #172]	@ (80045a8 <HAL_RCC_ClockConfig+0x260>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 020f 	bic.w	r2, r3, #15
 8004500:	4929      	ldr	r1, [pc, #164]	@ (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004508:	f7fc faec 	bl	8000ae4 <HAL_GetTick>
 800450c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fc fae8 	bl	8000ae4 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e03b      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b20      	ldr	r3, [pc, #128]	@ (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d1ed      	bne.n	8004510 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004540:	4b1a      	ldr	r3, [pc, #104]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4917      	ldr	r1, [pc, #92]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800455e:	4b13      	ldr	r3, [pc, #76]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	490f      	ldr	r1, [pc, #60]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004572:	f000 f825 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8004576:	4602      	mov	r2, r0
 8004578:	4b0c      	ldr	r3, [pc, #48]	@ (80045ac <HAL_RCC_ClockConfig+0x264>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	490c      	ldr	r1, [pc, #48]	@ (80045b4 <HAL_RCC_ClockConfig+0x26c>)
 8004584:	5ccb      	ldrb	r3, [r1, r3]
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	fa22 f303 	lsr.w	r3, r2, r3
 800458e:	4a0a      	ldr	r2, [pc, #40]	@ (80045b8 <HAL_RCC_ClockConfig+0x270>)
 8004590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004592:	4b0a      	ldr	r3, [pc, #40]	@ (80045bc <HAL_RCC_ClockConfig+0x274>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7fc fa58 	bl	8000a4c <HAL_InitTick>
 800459c:	4603      	mov	r3, r0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40022000 	.word	0x40022000
 80045ac:	40021000 	.word	0x40021000
 80045b0:	04c4b400 	.word	0x04c4b400
 80045b4:	0800970c 	.word	0x0800970c
 80045b8:	20000000 	.word	0x20000000
 80045bc:	20000004 	.word	0x20000004

080045c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d102      	bne.n	80045d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045d2:	4b2a      	ldr	r3, [pc, #168]	@ (800467c <HAL_RCC_GetSysClockFreq+0xbc>)
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	e047      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045d8:	4b27      	ldr	r3, [pc, #156]	@ (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d102      	bne.n	80045ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045e4:	4b26      	ldr	r3, [pc, #152]	@ (8004680 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	e03e      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045ea:	4b23      	ldr	r3, [pc, #140]	@ (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d136      	bne.n	8004664 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045f6:	4b20      	ldr	r3, [pc, #128]	@ (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004600:	4b1d      	ldr	r3, [pc, #116]	@ (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	3301      	adds	r3, #1
 800460c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d10c      	bne.n	800462e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004614:	4a1a      	ldr	r2, [pc, #104]	@ (8004680 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	4a16      	ldr	r2, [pc, #88]	@ (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800461e:	68d2      	ldr	r2, [r2, #12]
 8004620:	0a12      	lsrs	r2, r2, #8
 8004622:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004626:	fb02 f303 	mul.w	r3, r2, r3
 800462a:	617b      	str	r3, [r7, #20]
      break;
 800462c:	e00c      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800462e:	4a13      	ldr	r2, [pc, #76]	@ (800467c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	4a10      	ldr	r2, [pc, #64]	@ (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004638:	68d2      	ldr	r2, [r2, #12]
 800463a:	0a12      	lsrs	r2, r2, #8
 800463c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004640:	fb02 f303 	mul.w	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]
      break;
 8004646:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004648:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	0e5b      	lsrs	r3, r3, #25
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	3301      	adds	r3, #1
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	e001      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004668:	693b      	ldr	r3, [r7, #16]
}
 800466a:	4618      	mov	r0, r3
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000
 800467c:	00f42400 	.word	0x00f42400
 8004680:	007a1200 	.word	0x007a1200

08004684 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800468a:	4b1e      	ldr	r3, [pc, #120]	@ (8004704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004694:	4b1b      	ldr	r3, [pc, #108]	@ (8004704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	3301      	adds	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d10c      	bne.n	80046c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046a8:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	4a14      	ldr	r2, [pc, #80]	@ (8004704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046b2:	68d2      	ldr	r2, [r2, #12]
 80046b4:	0a12      	lsrs	r2, r2, #8
 80046b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	617b      	str	r3, [r7, #20]
    break;
 80046c0:	e00c      	b.n	80046dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046c2:	4a12      	ldr	r2, [pc, #72]	@ (800470c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046cc:	68d2      	ldr	r2, [r2, #12]
 80046ce:	0a12      	lsrs	r2, r2, #8
 80046d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046d4:	fb02 f303 	mul.w	r3, r2, r3
 80046d8:	617b      	str	r3, [r7, #20]
    break;
 80046da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046dc:	4b09      	ldr	r3, [pc, #36]	@ (8004704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	0e5b      	lsrs	r3, r3, #25
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	3301      	adds	r3, #1
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80046f6:	687b      	ldr	r3, [r7, #4]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40021000 	.word	0x40021000
 8004708:	007a1200 	.word	0x007a1200
 800470c:	00f42400 	.word	0x00f42400

08004710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004718:	2300      	movs	r3, #0
 800471a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800471c:	2300      	movs	r3, #0
 800471e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8098 	beq.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2300      	movs	r3, #0
 8004730:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004732:	4b43      	ldr	r3, [pc, #268]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10d      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	4b40      	ldr	r3, [pc, #256]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004742:	4a3f      	ldr	r2, [pc, #252]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004748:	6593      	str	r3, [r2, #88]	@ 0x58
 800474a:	4b3d      	ldr	r3, [pc, #244]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004756:	2301      	movs	r3, #1
 8004758:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800475a:	4b3a      	ldr	r3, [pc, #232]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a39      	ldr	r2, [pc, #228]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004764:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004766:	f7fc f9bd 	bl	8000ae4 <HAL_GetTick>
 800476a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800476c:	e009      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476e:	f7fc f9b9 	bl	8000ae4 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d902      	bls.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	74fb      	strb	r3, [r7, #19]
        break;
 8004780:	e005      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004782:	4b30      	ldr	r3, [pc, #192]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0ef      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d159      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004794:	4b2a      	ldr	r3, [pc, #168]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800479e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d01e      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d019      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047b0:	4b23      	ldr	r3, [pc, #140]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047bc:	4b20      	ldr	r3, [pc, #128]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047dc:	4a18      	ldr	r2, [pc, #96]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ee:	f7fc f979 	bl	8000ae4 <HAL_GetTick>
 80047f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f4:	e00b      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fc f975 	bl	8000ae4 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d902      	bls.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	74fb      	strb	r3, [r7, #19]
            break;
 800480c:	e006      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800480e:	4b0c      	ldr	r3, [pc, #48]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0ec      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800481c:	7cfb      	ldrb	r3, [r7, #19]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004822:	4b07      	ldr	r3, [pc, #28]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004830:	4903      	ldr	r1, [pc, #12]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004838:	e008      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800483a:	7cfb      	ldrb	r3, [r7, #19]
 800483c:	74bb      	strb	r3, [r7, #18]
 800483e:	e005      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004840:	40021000 	.word	0x40021000
 8004844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004848:	7cfb      	ldrb	r3, [r7, #19]
 800484a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484c:	7c7b      	ldrb	r3, [r7, #17]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d105      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004852:	4ba7      	ldr	r3, [pc, #668]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004856:	4aa6      	ldr	r2, [pc, #664]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800485c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800486a:	4ba1      	ldr	r3, [pc, #644]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004870:	f023 0203 	bic.w	r2, r3, #3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	499d      	ldr	r1, [pc, #628]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800488c:	4b98      	ldr	r3, [pc, #608]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004892:	f023 020c 	bic.w	r2, r3, #12
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	4995      	ldr	r1, [pc, #596]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048ae:	4b90      	ldr	r3, [pc, #576]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	498c      	ldr	r1, [pc, #560]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048d0:	4b87      	ldr	r3, [pc, #540]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	4984      	ldr	r1, [pc, #528]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048f2:	4b7f      	ldr	r3, [pc, #508]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	497b      	ldr	r1, [pc, #492]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004914:	4b76      	ldr	r3, [pc, #472]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	4973      	ldr	r1, [pc, #460]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004936:	4b6e      	ldr	r3, [pc, #440]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	496a      	ldr	r1, [pc, #424]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004958:	4b65      	ldr	r3, [pc, #404]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	4962      	ldr	r1, [pc, #392]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800497a:	4b5d      	ldr	r3, [pc, #372]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004980:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	4959      	ldr	r1, [pc, #356]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800499c:	4b54      	ldr	r3, [pc, #336]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	4951      	ldr	r1, [pc, #324]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d015      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049be:	4b4c      	ldr	r3, [pc, #304]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	4948      	ldr	r1, [pc, #288]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049dc:	d105      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049de:	4b44      	ldr	r3, [pc, #272]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4a43      	ldr	r2, [pc, #268]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049e8:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d015      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049f6:	4b3e      	ldr	r3, [pc, #248]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a04:	493a      	ldr	r1, [pc, #232]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a14:	d105      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a16:	4b36      	ldr	r3, [pc, #216]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	4a35      	ldr	r2, [pc, #212]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a20:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d015      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a2e:	4b30      	ldr	r3, [pc, #192]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a34:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a3c:	492c      	ldr	r1, [pc, #176]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a4c:	d105      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a4e:	4b28      	ldr	r3, [pc, #160]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4a27      	ldr	r2, [pc, #156]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a58:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d015      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a66:	4b22      	ldr	r3, [pc, #136]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a74:	491e      	ldr	r1, [pc, #120]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a84:	d105      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a86:	4b1a      	ldr	r3, [pc, #104]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	4a19      	ldr	r2, [pc, #100]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a90:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d015      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a9e:	4b14      	ldr	r3, [pc, #80]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aac:	4910      	ldr	r1, [pc, #64]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004abc:	d105      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004abe:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ac8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d018      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ad6:	4b06      	ldr	r3, [pc, #24]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004adc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	4902      	ldr	r1, [pc, #8]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	e001      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004af0:	40021000 	.word	0x40021000
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004afa:	d105      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004afc:	4b21      	ldr	r3, [pc, #132]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4a20      	ldr	r2, [pc, #128]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b06:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d015      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b14:	4b1b      	ldr	r3, [pc, #108]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b22:	4918      	ldr	r1, [pc, #96]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b32:	d105      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b34:	4b13      	ldr	r3, [pc, #76]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4a12      	ldr	r2, [pc, #72]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d015      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b5a:	490a      	ldr	r1, [pc, #40]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b6a:	d105      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b6c:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a04      	ldr	r2, [pc, #16]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b78:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000

08004b88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b98:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004b9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bbe:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004bc2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	1d3b      	adds	r3, r7, #4
 8004bf6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b0a7      	sub	sp, #156	@ 0x9c
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	78db      	ldrb	r3, [r3, #3]
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d81f      	bhi.n	8004c9a <USB_ActivateEndpoint+0x72>
 8004c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c60 <USB_ActivateEndpoint+0x38>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	08004ca3 	.word	0x08004ca3
 8004c6c:	08004c7f 	.word	0x08004c7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c70:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004c74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c78:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004c7c:	e012      	b.n	8004ca4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004c82:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004c86:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004c8a:	e00b      	b.n	8004ca4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c8c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004c90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c94:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004c98:	e004      	b.n	8004ca4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8004ca0:	e000      	b.n	8004ca4 <USB_ActivateEndpoint+0x7c>
      break;
 8004ca2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	b21b      	sxth	r3, r3
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cde:	b21a      	sxth	r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	b21b      	sxth	r3, r3
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	b21b      	sxth	r3, r3
 8004cea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	441a      	add	r2, r3
 8004cf8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	7b1b      	ldrb	r3, [r3, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f040 8180 	bne.w	800501a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	785b      	ldrb	r3, [r3, #1]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 8084 	beq.w	8004e2c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4413      	add	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	00da      	lsls	r2, r3, #3
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	88db      	ldrh	r3, [r3, #6]
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	827b      	strh	r3, [r7, #18]
 8004d66:	8a7b      	ldrh	r3, [r7, #18]
 8004d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01b      	beq.n	8004da8 <USB_ActivateEndpoint+0x180>
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d86:	823b      	strh	r3, [r7, #16]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	8a3b      	ldrh	r3, [r7, #16]
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	78db      	ldrb	r3, [r3, #3]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d020      	beq.n	8004df2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dc6:	81bb      	strh	r3, [r7, #12]
 8004dc8:	89bb      	ldrh	r3, [r7, #12]
 8004dca:	f083 0320 	eor.w	r3, r3, #32
 8004dce:	81bb      	strh	r3, [r7, #12]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	441a      	add	r2, r3
 8004dda:	89bb      	ldrh	r3, [r7, #12]
 8004ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	8013      	strh	r3, [r2, #0]
 8004df0:	e3f9      	b.n	80055e6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e08:	81fb      	strh	r3, [r7, #14]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	441a      	add	r2, r3
 8004e14:	89fb      	ldrh	r3, [r7, #14]
 8004e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	8013      	strh	r3, [r2, #0]
 8004e2a:	e3dc      	b.n	80055e6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3c:	4413      	add	r3, r2
 8004e3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	00da      	lsls	r2, r3, #3
 8004e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e48:	4413      	add	r3, r2
 8004e4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	88db      	ldrh	r3, [r3, #6]
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e70:	4413      	add	r3, r2
 8004e72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	00da      	lsls	r2, r3, #3
 8004e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	801a      	strh	r2, [r3, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <USB_ActivateEndpoint+0x28a>
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	801a      	strh	r2, [r3, #0]
 8004eb0:	e041      	b.n	8004f36 <USB_ActivateEndpoint+0x30e>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004eb8:	d81c      	bhi.n	8004ef4 <USB_ActivateEndpoint+0x2cc>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <USB_ActivateEndpoint+0x2b2>
 8004ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	029b      	lsls	r3, r3, #10
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	4313      	orrs	r3, r2
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	801a      	strh	r2, [r3, #0]
 8004ef2:	e020      	b.n	8004f36 <USB_ActivateEndpoint+0x30e>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <USB_ActivateEndpoint+0x2ec>
 8004f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	029b      	lsls	r3, r3, #10
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	4313      	orrs	r3, r2
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004f44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01b      	beq.n	8004f86 <USB_ActivateEndpoint+0x35e>
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f64:	843b      	strh	r3, [r7, #32]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	441a      	add	r2, r3
 8004f70:	8c3b      	ldrh	r3, [r7, #32]
 8004f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d124      	bne.n	8004fd8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa4:	83bb      	strh	r3, [r7, #28]
 8004fa6:	8bbb      	ldrh	r3, [r7, #28]
 8004fa8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004fac:	83bb      	strh	r3, [r7, #28]
 8004fae:	8bbb      	ldrh	r3, [r7, #28]
 8004fb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004fb4:	83bb      	strh	r3, [r7, #28]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	8bbb      	ldrh	r3, [r7, #28]
 8004fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	8013      	strh	r3, [r2, #0]
 8004fd6:	e306      	b.n	80055e6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fee:	83fb      	strh	r3, [r7, #30]
 8004ff0:	8bfb      	ldrh	r3, [r7, #30]
 8004ff2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ff6:	83fb      	strh	r3, [r7, #30]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	8bfb      	ldrh	r3, [r7, #30]
 8005004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800500c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005014:	b29b      	uxth	r3, r3
 8005016:	8013      	strh	r3, [r2, #0]
 8005018:	e2e5      	b.n	80055e6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	78db      	ldrb	r3, [r3, #3]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d11e      	bne.n	8005060 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005038:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800504a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800504e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005052:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800505a:	b29b      	uxth	r3, r3
 800505c:	8013      	strh	r3, [r2, #0]
 800505e:	e01d      	b.n	800509c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005076:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8005088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800508c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005098:	b29b      	uxth	r3, r3
 800509a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050ac:	4413      	add	r3, r2
 80050ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	00da      	lsls	r2, r3, #3
 80050b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	891b      	ldrh	r3, [r3, #8]
 80050c4:	085b      	lsrs	r3, r3, #1
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050ce:	801a      	strh	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050da:	b29b      	uxth	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050e0:	4413      	add	r3, r2
 80050e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	00da      	lsls	r2, r3, #3
 80050ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ec:	4413      	add	r3, r2
 80050ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	895b      	ldrh	r3, [r3, #10]
 80050f8:	085b      	lsrs	r3, r3, #1
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005102:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	785b      	ldrb	r3, [r3, #1]
 8005108:	2b00      	cmp	r3, #0
 800510a:	f040 81af 	bne.w	800546c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800511e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8005122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01d      	beq.n	8005166 <USB_ActivateEndpoint+0x53e>
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800513c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005140:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8005152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800515a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800515e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8005176:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800517a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01d      	beq.n	80051be <USB_ActivateEndpoint+0x596>
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005198:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	441a      	add	r2, r3
 80051a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80051aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	785b      	ldrb	r3, [r3, #1]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d16b      	bne.n	800529e <USB_ActivateEndpoint+0x676>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051d6:	4413      	add	r3, r2
 80051d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	00da      	lsls	r2, r3, #3
 80051e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051e2:	4413      	add	r3, r2
 80051e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051f8:	801a      	strh	r2, [r3, #0]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <USB_ActivateEndpoint+0x5f0>
 8005202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005210:	b29a      	uxth	r2, r3
 8005212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	e05d      	b.n	80052d4 <USB_ActivateEndpoint+0x6ac>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b3e      	cmp	r3, #62	@ 0x3e
 800521e:	d81c      	bhi.n	800525a <USB_ActivateEndpoint+0x632>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	085b      	lsrs	r3, r3, #1
 8005226:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d004      	beq.n	8005240 <USB_ActivateEndpoint+0x618>
 8005236:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800523a:	3301      	adds	r3, #1
 800523c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29a      	uxth	r2, r3
 8005246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800524a:	b29b      	uxth	r3, r3
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	b29b      	uxth	r3, r3
 8005250:	4313      	orrs	r3, r2
 8005252:	b29a      	uxth	r2, r3
 8005254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e03c      	b.n	80052d4 <USB_ActivateEndpoint+0x6ac>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <USB_ActivateEndpoint+0x652>
 8005270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005274:	3b01      	subs	r3, #1
 8005276:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800527a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	b29a      	uxth	r2, r3
 8005280:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005284:	b29b      	uxth	r3, r3
 8005286:	029b      	lsls	r3, r3, #10
 8005288:	b29b      	uxth	r3, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	b29b      	uxth	r3, r3
 800528e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005296:	b29a      	uxth	r2, r3
 8005298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	e01a      	b.n	80052d4 <USB_ActivateEndpoint+0x6ac>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	785b      	ldrb	r3, [r3, #1]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d116      	bne.n	80052d4 <USB_ActivateEndpoint+0x6ac>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b6:	4413      	add	r3, r2
 80052b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	00da      	lsls	r2, r3, #3
 80052c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c2:	4413      	add	r3, r2
 80052c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052d2:	801a      	strh	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	785b      	ldrb	r3, [r3, #1]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d16b      	bne.n	80053b8 <USB_ActivateEndpoint+0x790>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f0:	4413      	add	r3, r2
 80052f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	00da      	lsls	r2, r3, #3
 80052fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052fc:	4413      	add	r3, r2
 80052fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005302:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800530e:	b29a      	uxth	r2, r3
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <USB_ActivateEndpoint+0x70a>
 800531c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29a      	uxth	r2, r3
 800532c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532e:	801a      	strh	r2, [r3, #0]
 8005330:	e05b      	b.n	80053ea <USB_ActivateEndpoint+0x7c2>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b3e      	cmp	r3, #62	@ 0x3e
 8005338:	d81c      	bhi.n	8005374 <USB_ActivateEndpoint+0x74c>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <USB_ActivateEndpoint+0x732>
 8005350:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005354:	3301      	adds	r3, #1
 8005356:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29a      	uxth	r2, r3
 8005360:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005364:	b29b      	uxth	r3, r3
 8005366:	029b      	lsls	r3, r3, #10
 8005368:	b29b      	uxth	r3, r3
 800536a:	4313      	orrs	r3, r2
 800536c:	b29a      	uxth	r2, r3
 800536e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	e03a      	b.n	80053ea <USB_ActivateEndpoint+0x7c2>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	2b00      	cmp	r3, #0
 8005388:	d104      	bne.n	8005394 <USB_ActivateEndpoint+0x76c>
 800538a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800538e:	3b01      	subs	r3, #1
 8005390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29a      	uxth	r2, r3
 800539a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800539e:	b29b      	uxth	r3, r3
 80053a0:	029b      	lsls	r3, r3, #10
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	4313      	orrs	r3, r2
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	e018      	b.n	80053ea <USB_ActivateEndpoint+0x7c2>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d114      	bne.n	80053ea <USB_ActivateEndpoint+0x7c2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053cc:	4413      	add	r3, r2
 80053ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	00da      	lsls	r2, r3, #3
 80053d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053d8:	4413      	add	r3, r2
 80053da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053de:	643b      	str	r3, [r7, #64]	@ 0x40
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053e8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005400:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005402:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005404:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005408:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800540a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800540c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005410:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	441a      	add	r2, r3
 800541c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800541e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800542a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800542e:	b29b      	uxth	r3, r3
 8005430:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005448:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	441a      	add	r2, r3
 8005454:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800545a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800545e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005466:	b29b      	uxth	r3, r3
 8005468:	8013      	strh	r3, [r2, #0]
 800546a:	e0bc      	b.n	80055e6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800547c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01d      	beq.n	80054c4 <USB_ActivateEndpoint+0x89c>
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800549a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800549e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	441a      	add	r2, r3
 80054ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80054d4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80054d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01d      	beq.n	800551c <USB_ActivateEndpoint+0x8f4>
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8005508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005514:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005518:	b29b      	uxth	r3, r3
 800551a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	78db      	ldrb	r3, [r3, #3]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d024      	beq.n	800556e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800553a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800553e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005542:	f083 0320 	eor.w	r3, r3, #32
 8005546:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	441a      	add	r2, r3
 8005554:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800555c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005568:	b29b      	uxth	r3, r3
 800556a:	8013      	strh	r3, [r2, #0]
 800556c:	e01d      	b.n	80055aa <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b29b      	uxth	r3, r3
 800557c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005584:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	441a      	add	r2, r3
 8005592:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005596:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800559a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800559e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	441a      	add	r2, r3
 80055ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80055d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80055e6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	379c      	adds	r7, #156	@ 0x9c
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop

080055f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b08d      	sub	sp, #52	@ 0x34
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	7b1b      	ldrb	r3, [r3, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f040 808e 	bne.w	8005728 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d044      	beq.n	800569e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	81bb      	strh	r3, [r7, #12]
 8005622:	89bb      	ldrh	r3, [r7, #12]
 8005624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01b      	beq.n	8005664 <USB_DeactivateEndpoint+0x6c>
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800563e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005642:	817b      	strh	r3, [r7, #10]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	897b      	ldrh	r3, [r7, #10]
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800567a:	813b      	strh	r3, [r7, #8]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	441a      	add	r2, r3
 8005686:	893b      	ldrh	r3, [r7, #8]
 8005688:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800568c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005690:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005698:	b29b      	uxth	r3, r3
 800569a:	8013      	strh	r3, [r2, #0]
 800569c:	e192      	b.n	80059c4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	827b      	strh	r3, [r7, #18]
 80056ac:	8a7b      	ldrh	r3, [r7, #18]
 80056ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01b      	beq.n	80056ee <USB_DeactivateEndpoint+0xf6>
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056cc:	823b      	strh	r3, [r7, #16]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	8a3b      	ldrh	r3, [r7, #16]
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005704:	81fb      	strh	r3, [r7, #14]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	441a      	add	r2, r3
 8005710:	89fb      	ldrh	r3, [r7, #14]
 8005712:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005716:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800571a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800571e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005722:	b29b      	uxth	r3, r3
 8005724:	8013      	strh	r3, [r2, #0]
 8005726:	e14d      	b.n	80059c4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f040 80a5 	bne.w	800587c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	843b      	strh	r3, [r7, #32]
 8005740:	8c3b      	ldrh	r3, [r7, #32]
 8005742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d01b      	beq.n	8005782 <USB_DeactivateEndpoint+0x18a>
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29b      	uxth	r3, r3
 8005758:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800575c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005760:	83fb      	strh	r3, [r7, #30]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	441a      	add	r2, r3
 800576c:	8bfb      	ldrh	r3, [r7, #30]
 800576e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005776:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800577a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800577e:	b29b      	uxth	r3, r3
 8005780:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	83bb      	strh	r3, [r7, #28]
 8005790:	8bbb      	ldrh	r3, [r7, #28]
 8005792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d01b      	beq.n	80057d2 <USB_DeactivateEndpoint+0x1da>
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b0:	837b      	strh	r3, [r7, #26]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	441a      	add	r2, r3
 80057bc:	8b7b      	ldrh	r3, [r7, #26]
 80057be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e8:	833b      	strh	r3, [r7, #24]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	441a      	add	r2, r3
 80057f4:	8b3b      	ldrh	r3, [r7, #24]
 80057f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005802:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005806:	b29b      	uxth	r3, r3
 8005808:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800581c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005820:	82fb      	strh	r3, [r7, #22]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	441a      	add	r2, r3
 800582c:	8afb      	ldrh	r3, [r7, #22]
 800582e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800583a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583e:	b29b      	uxth	r3, r3
 8005840:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005858:	82bb      	strh	r3, [r7, #20]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	441a      	add	r2, r3
 8005864:	8abb      	ldrh	r3, [r7, #20]
 8005866:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800586a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800586e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005876:	b29b      	uxth	r3, r3
 8005878:	8013      	strh	r3, [r2, #0]
 800587a:	e0a3      	b.n	80059c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800588a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800588c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01b      	beq.n	80058cc <USB_DeactivateEndpoint+0x2d4>
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058aa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80058b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80058da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01b      	beq.n	800591c <USB_DeactivateEndpoint+0x324>
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800590c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005914:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005918:	b29b      	uxth	r3, r3
 800591a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800592e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005932:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005948:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800594c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005950:	b29b      	uxth	r3, r3
 8005952:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800596a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005978:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800597c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005988:	b29b      	uxth	r3, r3
 800598a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800599e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	441a      	add	r2, r3
 80059ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3734      	adds	r7, #52	@ 0x34
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b0ac      	sub	sp, #176	@ 0xb0
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	f040 84ca 	bne.w	800637a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d904      	bls.n	80059fc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059fa:	e003      	b.n	8005a04 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	7b1b      	ldrb	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d122      	bne.n	8005a52 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6959      	ldr	r1, [r3, #20]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	88da      	ldrh	r2, [r3, #6]
 8005a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 febd 	bl	800679a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4413      	add	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	00da      	lsls	r2, r3, #3
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	f000 bc6f 	b.w	8006330 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	78db      	ldrb	r3, [r3, #3]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	f040 831e 	bne.w	8006098 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6a1a      	ldr	r2, [r3, #32]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	f240 82cf 	bls.w	8006008 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a80:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	441a      	add	r2, r3
 8005a8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a9a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6a1a      	ldr	r2, [r3, #32]
 8005aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 814f 	beq.w	8005d6a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d16b      	bne.n	8005bb0 <USB_EPStartXfer+0x1de>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae8:	4413      	add	r3, r2
 8005aea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	00da      	lsls	r2, r3, #3
 8005af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af4:	4413      	add	r3, r2
 8005af6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <USB_EPStartXfer+0x158>
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	e05b      	b.n	8005be2 <USB_EPStartXfer+0x210>
 8005b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b30:	d81c      	bhi.n	8005b6c <USB_EPStartXfer+0x19a>
 8005b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b36:	085b      	lsrs	r3, r3, #1
 8005b38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <USB_EPStartXfer+0x180>
 8005b48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	029b      	lsls	r3, r3, #10
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	4313      	orrs	r3, r2
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	801a      	strh	r2, [r3, #0]
 8005b6a:	e03a      	b.n	8005be2 <USB_EPStartXfer+0x210>
 8005b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b7a:	f003 031f 	and.w	r3, r3, #31
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <USB_EPStartXfer+0x1ba>
 8005b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b86:	3b01      	subs	r3, #1
 8005b88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	029b      	lsls	r3, r3, #10
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	e018      	b.n	8005be2 <USB_EPStartXfer+0x210>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d114      	bne.n	8005be2 <USB_EPStartXfer+0x210>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	4413      	add	r3, r2
 8005bc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	00da      	lsls	r2, r3, #3
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	895b      	ldrh	r3, [r3, #10]
 8005be6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6959      	ldr	r1, [r3, #20]
 8005bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fdce 	bl	800679a <USB_WritePMA>
            ep->xfer_buff += len;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c06:	441a      	add	r2, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	6a1a      	ldr	r2, [r3, #32]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d907      	bls.n	8005c28 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6a1a      	ldr	r2, [r3, #32]
 8005c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c20:	1ad2      	subs	r2, r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	621a      	str	r2, [r3, #32]
 8005c26:	e006      	b.n	8005c36 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d16b      	bne.n	8005d16 <USB_EPStartXfer+0x344>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4413      	add	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	00da      	lsls	r2, r3, #3
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <USB_EPStartXfer+0x2be>
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e05d      	b.n	8005d4c <USB_EPStartXfer+0x37a>
 8005c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c94:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c96:	d81c      	bhi.n	8005cd2 <USB_EPStartXfer+0x300>
 8005c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c9c:	085b      	lsrs	r3, r3, #1
 8005c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d004      	beq.n	8005cb8 <USB_EPStartXfer+0x2e6>
 8005cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	029b      	lsls	r3, r3, #10
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	e03c      	b.n	8005d4c <USB_EPStartXfer+0x37a>
 8005cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005cdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <USB_EPStartXfer+0x320>
 8005ce8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005cec:	3b01      	subs	r3, #1
 8005cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	029b      	lsls	r3, r3, #10
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	4313      	orrs	r3, r2
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	e01a      	b.n	8005d4c <USB_EPStartXfer+0x37a>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d116      	bne.n	8005d4c <USB_EPStartXfer+0x37a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	623b      	str	r3, [r7, #32]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	4413      	add	r3, r2
 8005d30:	623b      	str	r3, [r7, #32]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	00da      	lsls	r2, r3, #3
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	891b      	ldrh	r3, [r3, #8]
 8005d50:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	6959      	ldr	r1, [r3, #20]
 8005d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fd19 	bl	800679a <USB_WritePMA>
 8005d68:	e2e2      	b.n	8006330 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d16b      	bne.n	8005e4a <USB_EPStartXfer+0x478>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d82:	4413      	add	r3, r2
 8005d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	00da      	lsls	r2, r3, #3
 8005d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d8e:	4413      	add	r3, r2
 8005d90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <USB_EPStartXfer+0x3f2>
 8005dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dc0:	801a      	strh	r2, [r3, #0]
 8005dc2:	e05d      	b.n	8005e80 <USB_EPStartXfer+0x4ae>
 8005dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dca:	d81c      	bhi.n	8005e06 <USB_EPStartXfer+0x434>
 8005dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dd0:	085b      	lsrs	r3, r3, #1
 8005dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <USB_EPStartXfer+0x41a>
 8005de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005de6:	3301      	adds	r3, #1
 8005de8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	029b      	lsls	r3, r3, #10
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	e03c      	b.n	8005e80 <USB_EPStartXfer+0x4ae>
 8005e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <USB_EPStartXfer+0x454>
 8005e1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e20:	3b01      	subs	r3, #1
 8005e22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	029b      	lsls	r3, r3, #10
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4313      	orrs	r3, r2
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e01a      	b.n	8005e80 <USB_EPStartXfer+0x4ae>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d116      	bne.n	8005e80 <USB_EPStartXfer+0x4ae>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e62:	4413      	add	r3, r2
 8005e64:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	00da      	lsls	r2, r3, #3
 8005e6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e6e:	4413      	add	r3, r2
 8005e70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	891b      	ldrh	r3, [r3, #8]
 8005e84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	6959      	ldr	r1, [r3, #20]
 8005e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fc7f 	bl	800679a <USB_WritePMA>
            ep->xfer_buff += len;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	695a      	ldr	r2, [r3, #20]
 8005ea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ea4:	441a      	add	r2, r3
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6a1a      	ldr	r2, [r3, #32]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d907      	bls.n	8005ec6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6a1a      	ldr	r2, [r3, #32]
 8005eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	621a      	str	r2, [r3, #32]
 8005ec4:	e006      	b.n	8005ed4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d16b      	bne.n	8005fb8 <USB_EPStartXfer+0x5e6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef0:	4413      	add	r3, r2
 8005ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	00da      	lsls	r2, r3, #3
 8005efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efc:	4413      	add	r3, r2
 8005efe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <USB_EPStartXfer+0x560>
 8005f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	e05b      	b.n	8005fea <USB_EPStartXfer+0x618>
 8005f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f36:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f38:	d81c      	bhi.n	8005f74 <USB_EPStartXfer+0x5a2>
 8005f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f3e:	085b      	lsrs	r3, r3, #1
 8005f40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d004      	beq.n	8005f5a <USB_EPStartXfer+0x588>
 8005f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f54:	3301      	adds	r3, #1
 8005f56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	029b      	lsls	r3, r3, #10
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	e03a      	b.n	8005fea <USB_EPStartXfer+0x618>
 8005f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <USB_EPStartXfer+0x5c2>
 8005f8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	029b      	lsls	r3, r3, #10
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb4:	801a      	strh	r2, [r3, #0]
 8005fb6:	e018      	b.n	8005fea <USB_EPStartXfer+0x618>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d114      	bne.n	8005fea <USB_EPStartXfer+0x618>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fcc:	4413      	add	r3, r2
 8005fce:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	00da      	lsls	r2, r3, #3
 8005fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd8:	4413      	add	r3, r2
 8005fda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fe8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	895b      	ldrh	r3, [r3, #10]
 8005fee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6959      	ldr	r1, [r3, #20]
 8005ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fbca 	bl	800679a <USB_WritePMA>
 8006006:	e193      	b.n	8006330 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006026:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	441a      	add	r2, r3
 8006034:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800603c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006040:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006048:	b29b      	uxth	r3, r3
 800604a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006056:	b29b      	uxth	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800605c:	4413      	add	r3, r2
 800605e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	00da      	lsls	r2, r3, #3
 8006066:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006068:	4413      	add	r3, r2
 800606a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800606e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006074:	b29a      	uxth	r2, r3
 8006076:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006078:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	891b      	ldrh	r3, [r3, #8]
 800607e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6959      	ldr	r1, [r3, #20]
 8006086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800608a:	b29b      	uxth	r3, r3
 800608c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fb82 	bl	800679a <USB_WritePMA>
 8006096:	e14b      	b.n	8006330 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	6a1a      	ldr	r2, [r3, #32]
 800609c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060a0:	1ad2      	subs	r2, r2, r3
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 809a 	beq.w	80061f2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	785b      	ldrb	r3, [r3, #1]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d16b      	bne.n	80061a2 <USB_EPStartXfer+0x7d0>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060da:	4413      	add	r3, r2
 80060dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	00da      	lsls	r2, r3, #3
 80060e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060e6:	4413      	add	r3, r2
 80060e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80060ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <USB_EPStartXfer+0x74a>
 8006106:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006114:	b29a      	uxth	r2, r3
 8006116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e05b      	b.n	80061d4 <USB_EPStartXfer+0x802>
 800611c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006120:	2b3e      	cmp	r3, #62	@ 0x3e
 8006122:	d81c      	bhi.n	800615e <USB_EPStartXfer+0x78c>
 8006124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006128:	085b      	lsrs	r3, r3, #1
 800612a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800612e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <USB_EPStartXfer+0x772>
 800613a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800613e:	3301      	adds	r3, #1
 8006140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29a      	uxth	r2, r3
 800614a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800614e:	b29b      	uxth	r3, r3
 8006150:	029b      	lsls	r3, r3, #10
 8006152:	b29b      	uxth	r3, r3
 8006154:	4313      	orrs	r3, r2
 8006156:	b29a      	uxth	r2, r3
 8006158:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	e03a      	b.n	80061d4 <USB_EPStartXfer+0x802>
 800615e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800616c:	f003 031f 	and.w	r3, r3, #31
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <USB_EPStartXfer+0x7ac>
 8006174:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006178:	3b01      	subs	r3, #1
 800617a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800617e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29a      	uxth	r2, r3
 8006184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006188:	b29b      	uxth	r3, r3
 800618a:	029b      	lsls	r3, r3, #10
 800618c:	b29b      	uxth	r3, r3
 800618e:	4313      	orrs	r3, r2
 8006190:	b29b      	uxth	r3, r3
 8006192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619a:	b29a      	uxth	r2, r3
 800619c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800619e:	801a      	strh	r2, [r3, #0]
 80061a0:	e018      	b.n	80061d4 <USB_EPStartXfer+0x802>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d114      	bne.n	80061d4 <USB_EPStartXfer+0x802>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061b6:	4413      	add	r3, r2
 80061b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	00da      	lsls	r2, r3, #3
 80061c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061c2:	4413      	add	r3, r2
 80061c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	895b      	ldrh	r3, [r3, #10]
 80061d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6959      	ldr	r1, [r3, #20]
 80061e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fad5 	bl	800679a <USB_WritePMA>
 80061f0:	e09e      	b.n	8006330 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d16b      	bne.n	80062d2 <USB_EPStartXfer+0x900>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006204:	b29b      	uxth	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800620a:	4413      	add	r3, r2
 800620c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	00da      	lsls	r2, r3, #3
 8006214:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006216:	4413      	add	r3, r2
 8006218:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800621c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800621e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006228:	b29a      	uxth	r2, r3
 800622a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <USB_EPStartXfer+0x87a>
 8006236:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006244:	b29a      	uxth	r2, r3
 8006246:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	e063      	b.n	8006314 <USB_EPStartXfer+0x942>
 800624c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006250:	2b3e      	cmp	r3, #62	@ 0x3e
 8006252:	d81c      	bhi.n	800628e <USB_EPStartXfer+0x8bc>
 8006254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800625e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <USB_EPStartXfer+0x8a2>
 800626a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800626e:	3301      	adds	r3, #1
 8006270:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800627e:	b29b      	uxth	r3, r3
 8006280:	029b      	lsls	r3, r3, #10
 8006282:	b29b      	uxth	r3, r3
 8006284:	4313      	orrs	r3, r2
 8006286:	b29a      	uxth	r2, r3
 8006288:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	e042      	b.n	8006314 <USB_EPStartXfer+0x942>
 800628e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d104      	bne.n	80062ae <USB_EPStartXfer+0x8dc>
 80062a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80062a8:	3b01      	subs	r3, #1
 80062aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	b29b      	uxth	r3, r3
 80062be:	4313      	orrs	r3, r2
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e020      	b.n	8006314 <USB_EPStartXfer+0x942>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d11c      	bne.n	8006314 <USB_EPStartXfer+0x942>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062ee:	4413      	add	r3, r2
 80062f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	00da      	lsls	r2, r3, #3
 80062fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062fe:	4413      	add	r3, r2
 8006300:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006304:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800630c:	b29a      	uxth	r2, r3
 800630e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006312:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	891b      	ldrh	r3, [r3, #8]
 8006318:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6959      	ldr	r1, [r3, #20]
 8006320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006324:	b29b      	uxth	r3, r3
 8006326:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fa35 	bl	800679a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006346:	817b      	strh	r3, [r7, #10]
 8006348:	897b      	ldrh	r3, [r7, #10]
 800634a:	f083 0310 	eor.w	r3, r3, #16
 800634e:	817b      	strh	r3, [r7, #10]
 8006350:	897b      	ldrh	r3, [r7, #10]
 8006352:	f083 0320 	eor.w	r3, r3, #32
 8006356:	817b      	strh	r3, [r7, #10]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	441a      	add	r2, r3
 8006362:	897b      	ldrh	r3, [r7, #10]
 8006364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800636c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006374:	b29b      	uxth	r3, r3
 8006376:	8013      	strh	r3, [r2, #0]
 8006378:	e0d5      	b.n	8006526 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	7b1b      	ldrb	r3, [r3, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d156      	bne.n	8006430 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d122      	bne.n	80063d0 <USB_EPStartXfer+0x9fe>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	78db      	ldrb	r3, [r3, #3]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11e      	bne.n	80063d0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	441a      	add	r2, r3
 80063b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80063ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063c2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80063c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	8013      	strh	r3, [r2, #0]
 80063ce:	e01d      	b.n	800640c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80063e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	441a      	add	r2, r3
 80063f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80063f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006400:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006408:	b29b      	uxth	r3, r3
 800640a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	429a      	cmp	r2, r3
 8006416:	d907      	bls.n	8006428 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	1ad2      	subs	r2, r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	619a      	str	r2, [r3, #24]
 8006426:	e054      	b.n	80064d2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	619a      	str	r2, [r3, #24]
 800642e:	e050      	b.n	80064d2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	78db      	ldrb	r3, [r3, #3]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d142      	bne.n	80064be <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d048      	beq.n	80064d2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006450:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006454:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <USB_EPStartXfer+0xa96>
 800645c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006468:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800646c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006470:	2b00      	cmp	r3, #0
 8006472:	d12e      	bne.n	80064d2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006474:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	d128      	bne.n	80064d2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	b29b      	uxth	r3, r3
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006496:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	441a      	add	r2, r3
 80064a4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80064a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	8013      	strh	r3, [r2, #0]
 80064bc:	e009      	b.n	80064d2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	78db      	ldrb	r3, [r3, #3]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d103      	bne.n	80064ce <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2200      	movs	r2, #0
 80064ca:	619a      	str	r2, [r3, #24]
 80064cc:	e001      	b.n	80064d2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e02a      	b.n	8006528 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80064ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80064f0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80064f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80064fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006500:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800651a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800651e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006522:	b29b      	uxth	r3, r3
 8006524:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	37b0      	adds	r7, #176	@ 0xb0
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d020      	beq.n	8006584 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006558:	81bb      	strh	r3, [r7, #12]
 800655a:	89bb      	ldrh	r3, [r7, #12]
 800655c:	f083 0310 	eor.w	r3, r3, #16
 8006560:	81bb      	strh	r3, [r7, #12]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	441a      	add	r2, r3
 800656c:	89bb      	ldrh	r3, [r7, #12]
 800656e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800657a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657e:	b29b      	uxth	r3, r3
 8006580:	8013      	strh	r3, [r2, #0]
 8006582:	e01f      	b.n	80065c4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659a:	81fb      	strh	r3, [r7, #14]
 800659c:	89fb      	ldrh	r3, [r7, #14]
 800659e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065a2:	81fb      	strh	r3, [r7, #14]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	441a      	add	r2, r3
 80065ae:	89fb      	ldrh	r3, [r7, #14]
 80065b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b087      	sub	sp, #28
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d04c      	beq.n	800667e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	823b      	strh	r3, [r7, #16]
 80065f2:	8a3b      	ldrh	r3, [r7, #16]
 80065f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01b      	beq.n	8006634 <USB_EPClearStall+0x62>
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800660e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006612:	81fb      	strh	r3, [r7, #14]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	441a      	add	r2, r3
 800661e:	89fb      	ldrh	r3, [r7, #14]
 8006620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800662c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006630:	b29b      	uxth	r3, r3
 8006632:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	78db      	ldrb	r3, [r3, #3]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d06c      	beq.n	8006716 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800664e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006652:	81bb      	strh	r3, [r7, #12]
 8006654:	89bb      	ldrh	r3, [r7, #12]
 8006656:	f083 0320 	eor.w	r3, r3, #32
 800665a:	81bb      	strh	r3, [r7, #12]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	89bb      	ldrh	r3, [r7, #12]
 8006668:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800666c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006678:	b29b      	uxth	r3, r3
 800667a:	8013      	strh	r3, [r2, #0]
 800667c:	e04b      	b.n	8006716 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	82fb      	strh	r3, [r7, #22]
 800668c:	8afb      	ldrh	r3, [r7, #22]
 800668e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d01b      	beq.n	80066ce <USB_EPClearStall+0xfc>
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ac:	82bb      	strh	r3, [r7, #20]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	441a      	add	r2, r3
 80066b8:	8abb      	ldrh	r3, [r7, #20]
 80066ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e4:	827b      	strh	r3, [r7, #18]
 80066e6:	8a7b      	ldrh	r3, [r7, #18]
 80066e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066ec:	827b      	strh	r3, [r7, #18]
 80066ee:	8a7b      	ldrh	r3, [r7, #18]
 80066f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80066f4:	827b      	strh	r3, [r7, #18]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	441a      	add	r2, r3
 8006700:	8a7b      	ldrh	r3, [r7, #18]
 8006702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800670a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800670e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006712:	b29b      	uxth	r3, r3
 8006714:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	371c      	adds	r7, #28
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d103      	bne.n	800673e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2280      	movs	r2, #128	@ 0x80
 800673a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800675a:	b29b      	uxth	r3, r3
 800675c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006764:	b29a      	uxth	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006788:	b29b      	uxth	r3, r3
 800678a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800678c:	68fb      	ldr	r3, [r7, #12]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800679a:	b480      	push	{r7}
 800679c:	b08b      	sub	sp, #44	@ 0x2c
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	4611      	mov	r1, r2
 80067a6:	461a      	mov	r2, r3
 80067a8:	460b      	mov	r3, r1
 80067aa:	80fb      	strh	r3, [r7, #6]
 80067ac:	4613      	mov	r3, r2
 80067ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80067b0:	88bb      	ldrh	r3, [r7, #4]
 80067b2:	3301      	adds	r3, #1
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067c0:	88fa      	ldrh	r2, [r7, #6]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067ca:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80067d0:	e01b      	b.n	800680a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	3301      	adds	r3, #1
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	b21a      	sxth	r2, r3
 80067e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	b21b      	sxth	r3, r3
 80067ea:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	8a7a      	ldrh	r2, [r7, #18]
 80067f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	3302      	adds	r3, #2
 80067f6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	3301      	adds	r3, #1
 80067fc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	3301      	adds	r3, #1
 8006802:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	3b01      	subs	r3, #1
 8006808:	627b      	str	r3, [r7, #36]	@ 0x24
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e0      	bne.n	80067d2 <USB_WritePMA+0x38>
  }
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	372c      	adds	r7, #44	@ 0x2c
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800681e:	b480      	push	{r7}
 8006820:	b08b      	sub	sp, #44	@ 0x2c
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	4611      	mov	r1, r2
 800682a:	461a      	mov	r2, r3
 800682c:	460b      	mov	r3, r1
 800682e:	80fb      	strh	r3, [r7, #6]
 8006830:	4613      	mov	r3, r2
 8006832:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006834:	88bb      	ldrh	r3, [r7, #4]
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	b29b      	uxth	r3, r3
 800683a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006844:	88fa      	ldrh	r2, [r7, #6]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800684e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	627b      	str	r3, [r7, #36]	@ 0x24
 8006854:	e018      	b.n	8006888 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	3302      	adds	r3, #2
 8006862:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	b2da      	uxtb	r2, r3
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	3301      	adds	r3, #1
 8006870:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	0a1b      	lsrs	r3, r3, #8
 8006876:	b2da      	uxtb	r2, r3
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	3301      	adds	r3, #1
 8006880:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	3b01      	subs	r3, #1
 8006886:	627b      	str	r3, [r7, #36]	@ 0x24
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e3      	bne.n	8006856 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800688e:	88bb      	ldrh	r3, [r7, #4]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	701a      	strb	r2, [r3, #0]
  }
}
 80068aa:	bf00      	nop
 80068ac:	372c      	adds	r7, #44	@ 0x2c
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	460b      	mov	r3, r1
 80068c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068c2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80068c6:	f002 f8f9 	bl	8008abc <USBD_static_malloc>
 80068ca:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d105      	bne.n	80068de <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80068da:	2302      	movs	r3, #2
 80068dc:	e066      	b.n	80069ac <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	7c1b      	ldrb	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d119      	bne.n	8006922 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068f2:	2202      	movs	r2, #2
 80068f4:	2181      	movs	r1, #129	@ 0x81
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 ff87 	bl	800880a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006902:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006906:	2202      	movs	r2, #2
 8006908:	2101      	movs	r1, #1
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 ff7d 	bl	800880a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2210      	movs	r2, #16
 800691c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8006920:	e016      	b.n	8006950 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006922:	2340      	movs	r3, #64	@ 0x40
 8006924:	2202      	movs	r2, #2
 8006926:	2181      	movs	r1, #129	@ 0x81
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 ff6e 	bl	800880a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006934:	2340      	movs	r3, #64	@ 0x40
 8006936:	2202      	movs	r2, #2
 8006938:	2101      	movs	r1, #1
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 ff65 	bl	800880a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2210      	movs	r2, #16
 800694c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006950:	2308      	movs	r3, #8
 8006952:	2203      	movs	r2, #3
 8006954:	2182      	movs	r1, #130	@ 0x82
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 ff57 	bl	800880a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	7c1b      	ldrb	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800698c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006990:	2101      	movs	r1, #1
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f002 f828 	bl	80089e8 <USBD_LL_PrepareReceive>
 8006998:	e007      	b.n	80069aa <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069a0:	2340      	movs	r3, #64	@ 0x40
 80069a2:	2101      	movs	r1, #1
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f002 f81f 	bl	80089e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80069c0:	2181      	movs	r1, #129	@ 0x81
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 ff47 	bl	8008856 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80069ce:	2101      	movs	r1, #1
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f001 ff40 	bl	8008856 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80069de:	2182      	movs	r1, #130	@ 0x82
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 ff38 	bl	8008856 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00e      	beq.n	8006a1e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a10:	4618      	mov	r0, r3
 8006a12:	f002 f861 	bl	8008ad8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e0af      	b.n	8006bb0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d03f      	beq.n	8006adc <USBD_CDC_Setup+0xb4>
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	f040 809f 	bne.w	8006ba0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	88db      	ldrh	r3, [r3, #6]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d02e      	beq.n	8006ac8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	b25b      	sxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	da16      	bge.n	8006aa2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006a80:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	88d2      	ldrh	r2, [r2, #6]
 8006a86:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	88db      	ldrh	r3, [r3, #6]
 8006a8c:	2b07      	cmp	r3, #7
 8006a8e:	bf28      	it	cs
 8006a90:	2307      	movcs	r3, #7
 8006a92:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	89fa      	ldrh	r2, [r7, #14]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 facd 	bl	800803a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006aa0:	e085      	b.n	8006bae <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	785a      	ldrb	r2, [r3, #1]
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	88db      	ldrh	r3, [r3, #6]
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ab8:	6939      	ldr	r1, [r7, #16]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	88db      	ldrh	r3, [r3, #6]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 fae6 	bl	8008092 <USBD_CtlPrepareRx>
      break;
 8006ac6:	e072      	b.n	8006bae <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	7850      	ldrb	r0, [r2, #1]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	4798      	blx	r3
      break;
 8006ada:	e068      	b.n	8006bae <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b0b      	cmp	r3, #11
 8006ae2:	d852      	bhi.n	8006b8a <USBD_CDC_Setup+0x162>
 8006ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <USBD_CDC_Setup+0xc4>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b1d 	.word	0x08006b1d
 8006af0:	08006b99 	.word	0x08006b99
 8006af4:	08006b8b 	.word	0x08006b8b
 8006af8:	08006b8b 	.word	0x08006b8b
 8006afc:	08006b8b 	.word	0x08006b8b
 8006b00:	08006b8b 	.word	0x08006b8b
 8006b04:	08006b8b 	.word	0x08006b8b
 8006b08:	08006b8b 	.word	0x08006b8b
 8006b0c:	08006b8b 	.word	0x08006b8b
 8006b10:	08006b8b 	.word	0x08006b8b
 8006b14:	08006b47 	.word	0x08006b47
 8006b18:	08006b71 	.word	0x08006b71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d107      	bne.n	8006b38 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b28:	f107 030a 	add.w	r3, r7, #10
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 fa82 	bl	800803a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b36:	e032      	b.n	8006b9e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 fa0c 	bl	8007f58 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b40:	2303      	movs	r3, #3
 8006b42:	75fb      	strb	r3, [r7, #23]
          break;
 8006b44:	e02b      	b.n	8006b9e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d107      	bne.n	8006b62 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b52:	f107 030d 	add.w	r3, r7, #13
 8006b56:	2201      	movs	r2, #1
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 fa6d 	bl	800803a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b60:	e01d      	b.n	8006b9e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 f9f7 	bl	8007f58 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b6e:	e016      	b.n	8006b9e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d00f      	beq.n	8006b9c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 f9ea 	bl	8007f58 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b84:	2303      	movs	r3, #3
 8006b86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b88:	e008      	b.n	8006b9c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f9e3 	bl	8007f58 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b92:	2303      	movs	r3, #3
 8006b94:	75fb      	strb	r3, [r7, #23]
          break;
 8006b96:	e002      	b.n	8006b9e <USBD_CDC_Setup+0x176>
          break;
 8006b98:	bf00      	nop
 8006b9a:	e008      	b.n	8006bae <USBD_CDC_Setup+0x186>
          break;
 8006b9c:	bf00      	nop
      }
      break;
 8006b9e:	e006      	b.n	8006bae <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f001 f9d8 	bl	8007f58 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	75fb      	strb	r3, [r7, #23]
      break;
 8006bac:	bf00      	nop
  }

  return (uint8_t)ret;
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8006bca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e04f      	b.n	8006c7a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006be0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	3318      	adds	r3, #24
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d029      	beq.n	8006c4c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006bf8:	78fa      	ldrb	r2, [r7, #3]
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	440b      	add	r3, r1
 8006c06:	3318      	adds	r3, #24
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	78f9      	ldrb	r1, [r7, #3]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	440b      	add	r3, r1
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	4403      	add	r3, r0
 8006c18:	3320      	adds	r3, #32
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c20:	fb01 f303 	mul.w	r3, r1, r3
 8006c24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d110      	bne.n	8006c4c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006c2a:	78fa      	ldrb	r2, [r7, #3]
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	3318      	adds	r3, #24
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c3e:	78f9      	ldrb	r1, [r7, #3]
 8006c40:	2300      	movs	r3, #0
 8006c42:	2200      	movs	r2, #0
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 feae 	bl	80089a6 <USBD_LL_Transmit>
 8006c4a:	e015      	b.n	8006c78 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006c74:	78fa      	ldrb	r2, [r7, #3]
 8006c76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e015      	b.n	8006cd0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 febe 	bl	8008a2a <USBD_LL_GetRxDataSize>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ce6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e01a      	b.n	8006d28 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d014      	beq.n	8006d26 <USBD_CDC_EP0_RxReady+0x4e>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006d02:	2bff      	cmp	r3, #255	@ 0xff
 8006d04:	d00f      	beq.n	8006d26 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8006d14:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	22ff      	movs	r2, #255	@ 0xff
 8006d22:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2243      	movs	r2, #67	@ 0x43
 8006d3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006d3e:	4b03      	ldr	r3, [pc, #12]	@ (8006d4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	20000094 	.word	0x20000094

08006d50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2243      	movs	r2, #67	@ 0x43
 8006d5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006d5e:	4b03      	ldr	r3, [pc, #12]	@ (8006d6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	20000050 	.word	0x20000050

08006d70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2243      	movs	r2, #67	@ 0x43
 8006d7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006d7e:	4b03      	ldr	r3, [pc, #12]	@ (8006d8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	200000d8 	.word	0x200000d8

08006d90 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	220a      	movs	r2, #10
 8006d9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d9e:	4b03      	ldr	r3, [pc, #12]	@ (8006dac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	2000000c 	.word	0x2000000c

08006db0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e004      	b.n	8006dce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b087      	sub	sp, #28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006dec:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e008      	b.n	8006e0a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e004      	b.n	8006e3c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e56:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e01a      	b.n	8006ea0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d114      	bne.n	8006e9e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006e92:	2181      	movs	r1, #129	@ 0x81
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fd86 	bl	80089a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006eb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e016      	b.n	8006ef4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	7c1b      	ldrb	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ed4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ed8:	2101      	movs	r1, #1
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 fd84 	bl	80089e8 <USBD_LL_PrepareReceive>
 8006ee0:	e007      	b.n	8006ef2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ee8:	2340      	movs	r3, #64	@ 0x40
 8006eea:	2101      	movs	r1, #1
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fd7b 	bl	80089e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	4613      	mov	r3, r2
 8006f08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e01f      	b.n	8006f54 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	79fa      	ldrb	r2, [r7, #7]
 8006f46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f001 fbe3 	bl	8008714 <USBD_LL_Init>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e016      	b.n	8006fa2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f90:	f107 020e 	add.w	r2, r7, #14
 8006f94:	4610      	mov	r0, r2
 8006f96:	4798      	blx	r3
 8006f98:	4602      	mov	r2, r0
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fc0e 	bl	80087d4 <USBD_LL_Start>
 8006fb8:	4603      	mov	r3, r0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
 8007002:	4603      	mov	r3, r0
 8007004:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007022:	2b00      	cmp	r3, #0
 8007024:	d007      	beq.n	8007036 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	78fa      	ldrb	r2, [r7, #3]
 8007030:	4611      	mov	r1, r2
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
  }

  return USBD_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 ff46 	bl	8007ee4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007066:	461a      	mov	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	2b02      	cmp	r3, #2
 800707a:	d01a      	beq.n	80070b2 <USBD_LL_SetupStage+0x72>
 800707c:	2b02      	cmp	r3, #2
 800707e:	d822      	bhi.n	80070c6 <USBD_LL_SetupStage+0x86>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <USBD_LL_SetupStage+0x4a>
 8007084:	2b01      	cmp	r3, #1
 8007086:	d00a      	beq.n	800709e <USBD_LL_SetupStage+0x5e>
 8007088:	e01d      	b.n	80070c6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9ee 	bl	8007474 <USBD_StdDevReq>
 8007098:	4603      	mov	r3, r0
 800709a:	73fb      	strb	r3, [r7, #15]
      break;
 800709c:	e020      	b.n	80070e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa52 	bl	8007550 <USBD_StdItfReq>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]
      break;
 80070b0:	e016      	b.n	80070e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa91 	bl	80075e2 <USBD_StdEPReq>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]
      break;
 80070c4:	e00c      	b.n	80070e0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f001 fbdd 	bl	8008894 <USBD_LL_StallEP>
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]
      break;
 80070de:	bf00      	nop
  }

  return ret;
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b086      	sub	sp, #24
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	460b      	mov	r3, r1
 80070f4:	607a      	str	r2, [r7, #4]
 80070f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d138      	bne.n	8007170 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007104:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800710c:	2b03      	cmp	r3, #3
 800710e:	d14a      	bne.n	80071a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	429a      	cmp	r2, r3
 800711a:	d913      	bls.n	8007144 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	1ad2      	subs	r2, r2, r3
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	4293      	cmp	r3, r2
 8007134:	bf28      	it	cs
 8007136:	4613      	movcs	r3, r2
 8007138:	461a      	mov	r2, r3
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 ffc5 	bl	80080cc <USBD_CtlContinueRx>
 8007142:	e030      	b.n	80071a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b03      	cmp	r3, #3
 800714e:	d10b      	bne.n	8007168 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 ffc0 	bl	80080ee <USBD_CtlSendStatus>
 800716e:	e01a      	b.n	80071a6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b03      	cmp	r3, #3
 800717a:	d114      	bne.n	80071a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00e      	beq.n	80071a6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	7afa      	ldrb	r2, [r7, #11]
 8007192:	4611      	mov	r1, r2
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	4798      	blx	r3
 8007198:	4603      	mov	r3, r0
 800719a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	e000      	b.n	80071a8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	460b      	mov	r3, r1
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80071be:	7afb      	ldrb	r3, [r7, #11]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d16b      	bne.n	800729c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3314      	adds	r3, #20
 80071c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d156      	bne.n	8007282 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d914      	bls.n	800720a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	1ad2      	subs	r2, r2, r3
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 ff3a 	bl	8008070 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071fc:	2300      	movs	r3, #0
 80071fe:	2200      	movs	r2, #0
 8007200:	2100      	movs	r1, #0
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f001 fbf0 	bl	80089e8 <USBD_LL_PrepareReceive>
 8007208:	e03b      	b.n	8007282 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	429a      	cmp	r2, r3
 8007214:	d11c      	bne.n	8007250 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800721e:	429a      	cmp	r2, r3
 8007220:	d316      	bcc.n	8007250 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800722c:	429a      	cmp	r2, r3
 800722e:	d20f      	bcs.n	8007250 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007230:	2200      	movs	r2, #0
 8007232:	2100      	movs	r1, #0
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 ff1b 	bl	8008070 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007242:	2300      	movs	r3, #0
 8007244:	2200      	movs	r2, #0
 8007246:	2100      	movs	r1, #0
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f001 fbcd 	bl	80089e8 <USBD_LL_PrepareReceive>
 800724e:	e018      	b.n	8007282 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b03      	cmp	r3, #3
 800725a:	d10b      	bne.n	8007274 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007274:	2180      	movs	r1, #128	@ 0x80
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f001 fb0c 	bl	8008894 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 ff49 	bl	8008114 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007288:	2b01      	cmp	r3, #1
 800728a:	d122      	bne.n	80072d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff fe98 	bl	8006fc2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800729a:	e01a      	b.n	80072d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d114      	bne.n	80072d2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00e      	beq.n	80072d2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	7afa      	ldrb	r2, [r7, #11]
 80072be:	4611      	mov	r1, r2
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	4798      	blx	r3
 80072c4:	4603      	mov	r3, r0
 80072c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	e000      	b.n	80072d4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800730c:	2303      	movs	r3, #3
 800730e:	e02f      	b.n	8007370 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00f      	beq.n	800733a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6852      	ldr	r2, [r2, #4]
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	4611      	mov	r1, r2
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800733a:	2340      	movs	r3, #64	@ 0x40
 800733c:	2200      	movs	r2, #0
 800733e:	2100      	movs	r1, #0
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 fa62 	bl	800880a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2240      	movs	r2, #64	@ 0x40
 8007352:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007356:	2340      	movs	r3, #64	@ 0x40
 8007358:	2200      	movs	r2, #0
 800735a:	2180      	movs	r1, #128	@ 0x80
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 fa54 	bl	800880a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2240      	movs	r2, #64	@ 0x40
 800736c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	78fa      	ldrb	r2, [r7, #3]
 8007388:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2204      	movs	r2, #4
 80073b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d106      	bne.n	80073e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007406:	2303      	movs	r3, #3
 8007408:	e012      	b.n	8007430 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b03      	cmp	r3, #3
 8007414:	d10b      	bne.n	800742e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d005      	beq.n	800742e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	3301      	adds	r3, #1
 800744e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007456:	8a3b      	ldrh	r3, [r7, #16]
 8007458:	021b      	lsls	r3, r3, #8
 800745a:	b21a      	sxth	r2, r3
 800745c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007460:	4313      	orrs	r3, r2
 8007462:	b21b      	sxth	r3, r3
 8007464:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007466:	89fb      	ldrh	r3, [r7, #14]
}
 8007468:	4618      	mov	r0, r3
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800748a:	2b40      	cmp	r3, #64	@ 0x40
 800748c:	d005      	beq.n	800749a <USBD_StdDevReq+0x26>
 800748e:	2b40      	cmp	r3, #64	@ 0x40
 8007490:	d853      	bhi.n	800753a <USBD_StdDevReq+0xc6>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <USBD_StdDevReq+0x3a>
 8007496:	2b20      	cmp	r3, #32
 8007498:	d14f      	bne.n	800753a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]
      break;
 80074ac:	e04a      	b.n	8007544 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b09      	cmp	r3, #9
 80074b4:	d83b      	bhi.n	800752e <USBD_StdDevReq+0xba>
 80074b6:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <USBD_StdDevReq+0x48>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	08007511 	.word	0x08007511
 80074c0:	08007525 	.word	0x08007525
 80074c4:	0800752f 	.word	0x0800752f
 80074c8:	0800751b 	.word	0x0800751b
 80074cc:	0800752f 	.word	0x0800752f
 80074d0:	080074ef 	.word	0x080074ef
 80074d4:	080074e5 	.word	0x080074e5
 80074d8:	0800752f 	.word	0x0800752f
 80074dc:	08007507 	.word	0x08007507
 80074e0:	080074f9 	.word	0x080074f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f9de 	bl	80078a8 <USBD_GetDescriptor>
          break;
 80074ec:	e024      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fb6d 	bl	8007bd0 <USBD_SetAddress>
          break;
 80074f6:	e01f      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fbac 	bl	8007c58 <USBD_SetConfig>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
          break;
 8007504:	e018      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fc4b 	bl	8007da4 <USBD_GetConfig>
          break;
 800750e:	e013      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fc7c 	bl	8007e10 <USBD_GetStatus>
          break;
 8007518:	e00e      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fcab 	bl	8007e78 <USBD_SetFeature>
          break;
 8007522:	e009      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fcba 	bl	8007ea0 <USBD_ClrFeature>
          break;
 800752c:	e004      	b.n	8007538 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fd11 	bl	8007f58 <USBD_CtlError>
          break;
 8007536:	bf00      	nop
      }
      break;
 8007538:	e004      	b.n	8007544 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fd0b 	bl	8007f58 <USBD_CtlError>
      break;
 8007542:	bf00      	nop
  }

  return ret;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop

08007550 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d005      	beq.n	8007576 <USBD_StdItfReq+0x26>
 800756a:	2b40      	cmp	r3, #64	@ 0x40
 800756c:	d82f      	bhi.n	80075ce <USBD_StdItfReq+0x7e>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <USBD_StdItfReq+0x26>
 8007572:	2b20      	cmp	r3, #32
 8007574:	d12b      	bne.n	80075ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800757c:	b2db      	uxtb	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	2b02      	cmp	r3, #2
 8007582:	d81d      	bhi.n	80075c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	889b      	ldrh	r3, [r3, #4]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b01      	cmp	r3, #1
 800758c:	d813      	bhi.n	80075b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
 800759c:	4603      	mov	r3, r0
 800759e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	88db      	ldrh	r3, [r3, #6]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d110      	bne.n	80075ca <USBD_StdItfReq+0x7a>
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10d      	bne.n	80075ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fd9d 	bl	80080ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075b4:	e009      	b.n	80075ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fccd 	bl	8007f58 <USBD_CtlError>
          break;
 80075be:	e004      	b.n	80075ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fcc8 	bl	8007f58 <USBD_CtlError>
          break;
 80075c8:	e000      	b.n	80075cc <USBD_StdItfReq+0x7c>
          break;
 80075ca:	bf00      	nop
      }
      break;
 80075cc:	e004      	b.n	80075d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fcc1 	bl	8007f58 <USBD_CtlError>
      break;
 80075d6:	bf00      	nop
  }

  return ret;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	889b      	ldrh	r3, [r3, #4]
 80075f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075fe:	2b40      	cmp	r3, #64	@ 0x40
 8007600:	d007      	beq.n	8007612 <USBD_StdEPReq+0x30>
 8007602:	2b40      	cmp	r3, #64	@ 0x40
 8007604:	f200 8145 	bhi.w	8007892 <USBD_StdEPReq+0x2b0>
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00c      	beq.n	8007626 <USBD_StdEPReq+0x44>
 800760c:	2b20      	cmp	r3, #32
 800760e:	f040 8140 	bne.w	8007892 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]
      break;
 8007624:	e13a      	b.n	800789c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	785b      	ldrb	r3, [r3, #1]
 800762a:	2b03      	cmp	r3, #3
 800762c:	d007      	beq.n	800763e <USBD_StdEPReq+0x5c>
 800762e:	2b03      	cmp	r3, #3
 8007630:	f300 8129 	bgt.w	8007886 <USBD_StdEPReq+0x2a4>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d07f      	beq.n	8007738 <USBD_StdEPReq+0x156>
 8007638:	2b01      	cmp	r3, #1
 800763a:	d03c      	beq.n	80076b6 <USBD_StdEPReq+0xd4>
 800763c:	e123      	b.n	8007886 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d002      	beq.n	8007650 <USBD_StdEPReq+0x6e>
 800764a:	2b03      	cmp	r3, #3
 800764c:	d016      	beq.n	800767c <USBD_StdEPReq+0x9a>
 800764e:	e02c      	b.n	80076aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00d      	beq.n	8007672 <USBD_StdEPReq+0x90>
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	2b80      	cmp	r3, #128	@ 0x80
 800765a:	d00a      	beq.n	8007672 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 f917 	bl	8008894 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007666:	2180      	movs	r1, #128	@ 0x80
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 f913 	bl	8008894 <USBD_LL_StallEP>
 800766e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007670:	e020      	b.n	80076b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fc6f 	bl	8007f58 <USBD_CtlError>
              break;
 800767a:	e01b      	b.n	80076b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	885b      	ldrh	r3, [r3, #2]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10e      	bne.n	80076a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00b      	beq.n	80076a2 <USBD_StdEPReq+0xc0>
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	2b80      	cmp	r3, #128	@ 0x80
 800768e:	d008      	beq.n	80076a2 <USBD_StdEPReq+0xc0>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	88db      	ldrh	r3, [r3, #6]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 f8f9 	bl	8008894 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fd23 	bl	80080ee <USBD_CtlSendStatus>

              break;
 80076a8:	e004      	b.n	80076b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fc53 	bl	8007f58 <USBD_CtlError>
              break;
 80076b2:	bf00      	nop
          }
          break;
 80076b4:	e0ec      	b.n	8007890 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d002      	beq.n	80076c8 <USBD_StdEPReq+0xe6>
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d016      	beq.n	80076f4 <USBD_StdEPReq+0x112>
 80076c6:	e030      	b.n	800772a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00d      	beq.n	80076ea <USBD_StdEPReq+0x108>
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	2b80      	cmp	r3, #128	@ 0x80
 80076d2:	d00a      	beq.n	80076ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 f8db 	bl	8008894 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076de:	2180      	movs	r1, #128	@ 0x80
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 f8d7 	bl	8008894 <USBD_LL_StallEP>
 80076e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076e8:	e025      	b.n	8007736 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fc33 	bl	8007f58 <USBD_CtlError>
              break;
 80076f2:	e020      	b.n	8007736 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	885b      	ldrh	r3, [r3, #2]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d11b      	bne.n	8007734 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f001 f8e1 	bl	80088d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fcec 	bl	80080ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007728:	e004      	b.n	8007734 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fc13 	bl	8007f58 <USBD_CtlError>
              break;
 8007732:	e000      	b.n	8007736 <USBD_StdEPReq+0x154>
              break;
 8007734:	bf00      	nop
          }
          break;
 8007736:	e0ab      	b.n	8007890 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d002      	beq.n	800774a <USBD_StdEPReq+0x168>
 8007744:	2b03      	cmp	r3, #3
 8007746:	d032      	beq.n	80077ae <USBD_StdEPReq+0x1cc>
 8007748:	e097      	b.n	800787a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d007      	beq.n	8007760 <USBD_StdEPReq+0x17e>
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b80      	cmp	r3, #128	@ 0x80
 8007754:	d004      	beq.n	8007760 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fbfd 	bl	8007f58 <USBD_CtlError>
                break;
 800775e:	e091      	b.n	8007884 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	da0b      	bge.n	8007780 <USBD_StdEPReq+0x19e>
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	3310      	adds	r3, #16
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	4413      	add	r3, r2
 800777c:	3304      	adds	r3, #4
 800777e:	e00b      	b.n	8007798 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	3304      	adds	r3, #4
 8007798:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2202      	movs	r2, #2
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fc47 	bl	800803a <USBD_CtlSendData>
              break;
 80077ac:	e06a      	b.n	8007884 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	da11      	bge.n	80077da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	f003 020f 	and.w	r2, r3, #15
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	3324      	adds	r3, #36	@ 0x24
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d117      	bne.n	8007800 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fbc0 	bl	8007f58 <USBD_CtlError>
                  break;
 80077d8:	e054      	b.n	8007884 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	f003 020f 	and.w	r2, r3, #15
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	4613      	mov	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	440b      	add	r3, r1
 80077ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d104      	bne.n	8007800 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fbad 	bl	8007f58 <USBD_CtlError>
                  break;
 80077fe:	e041      	b.n	8007884 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007800:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	da0b      	bge.n	8007820 <USBD_StdEPReq+0x23e>
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	3310      	adds	r3, #16
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	4413      	add	r3, r2
 800781c:	3304      	adds	r3, #4
 800781e:	e00b      	b.n	8007838 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	4413      	add	r3, r2
 8007836:	3304      	adds	r3, #4
 8007838:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <USBD_StdEPReq+0x264>
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	2b80      	cmp	r3, #128	@ 0x80
 8007844:	d103      	bne.n	800784e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	e00e      	b.n	800786c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f85c 	bl	8008910 <USBD_LL_IsStallEP>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2201      	movs	r2, #1
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e002      	b.n	800786c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2202      	movs	r2, #2
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fbe1 	bl	800803a <USBD_CtlSendData>
              break;
 8007878:	e004      	b.n	8007884 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fb6b 	bl	8007f58 <USBD_CtlError>
              break;
 8007882:	bf00      	nop
          }
          break;
 8007884:	e004      	b.n	8007890 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fb65 	bl	8007f58 <USBD_CtlError>
          break;
 800788e:	bf00      	nop
      }
      break;
 8007890:	e004      	b.n	800789c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fb5f 	bl	8007f58 <USBD_CtlError>
      break;
 800789a:	bf00      	nop
  }

  return ret;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	885b      	ldrh	r3, [r3, #2]
 80078c2:	0a1b      	lsrs	r3, r3, #8
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	2b0e      	cmp	r3, #14
 80078ca:	f200 8152 	bhi.w	8007b72 <USBD_GetDescriptor+0x2ca>
 80078ce:	a201      	add	r2, pc, #4	@ (adr r2, 80078d4 <USBD_GetDescriptor+0x2c>)
 80078d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d4:	08007945 	.word	0x08007945
 80078d8:	0800795d 	.word	0x0800795d
 80078dc:	0800799d 	.word	0x0800799d
 80078e0:	08007b73 	.word	0x08007b73
 80078e4:	08007b73 	.word	0x08007b73
 80078e8:	08007b13 	.word	0x08007b13
 80078ec:	08007b3f 	.word	0x08007b3f
 80078f0:	08007b73 	.word	0x08007b73
 80078f4:	08007b73 	.word	0x08007b73
 80078f8:	08007b73 	.word	0x08007b73
 80078fc:	08007b73 	.word	0x08007b73
 8007900:	08007b73 	.word	0x08007b73
 8007904:	08007b73 	.word	0x08007b73
 8007908:	08007b73 	.word	0x08007b73
 800790c:	08007911 	.word	0x08007911
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	7c12      	ldrb	r2, [r2, #16]
 8007928:	f107 0108 	add.w	r1, r7, #8
 800792c:	4610      	mov	r0, r2
 800792e:	4798      	blx	r3
 8007930:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007932:	e126      	b.n	8007b82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fb0e 	bl	8007f58 <USBD_CtlError>
        err++;
 800793c:	7afb      	ldrb	r3, [r7, #11]
 800793e:	3301      	adds	r3, #1
 8007940:	72fb      	strb	r3, [r7, #11]
      break;
 8007942:	e11e      	b.n	8007b82 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	7c12      	ldrb	r2, [r2, #16]
 8007950:	f107 0108 	add.w	r1, r7, #8
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
 8007958:	60f8      	str	r0, [r7, #12]
      break;
 800795a:	e112      	b.n	8007b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	7c1b      	ldrb	r3, [r3, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10d      	bne.n	8007980 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800796a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796c:	f107 0208 	add.w	r2, r7, #8
 8007970:	4610      	mov	r0, r2
 8007972:	4798      	blx	r3
 8007974:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3301      	adds	r3, #1
 800797a:	2202      	movs	r2, #2
 800797c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800797e:	e100      	b.n	8007b82 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007988:	f107 0208 	add.w	r2, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3301      	adds	r3, #1
 8007996:	2202      	movs	r2, #2
 8007998:	701a      	strb	r2, [r3, #0]
      break;
 800799a:	e0f2      	b.n	8007b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	885b      	ldrh	r3, [r3, #2]
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b05      	cmp	r3, #5
 80079a4:	f200 80ac 	bhi.w	8007b00 <USBD_GetDescriptor+0x258>
 80079a8:	a201      	add	r2, pc, #4	@ (adr r2, 80079b0 <USBD_GetDescriptor+0x108>)
 80079aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ae:	bf00      	nop
 80079b0:	080079c9 	.word	0x080079c9
 80079b4:	080079fd 	.word	0x080079fd
 80079b8:	08007a31 	.word	0x08007a31
 80079bc:	08007a65 	.word	0x08007a65
 80079c0:	08007a99 	.word	0x08007a99
 80079c4:	08007acd 	.word	0x08007acd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00b      	beq.n	80079ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	7c12      	ldrb	r2, [r2, #16]
 80079e0:	f107 0108 	add.w	r1, r7, #8
 80079e4:	4610      	mov	r0, r2
 80079e6:	4798      	blx	r3
 80079e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ea:	e091      	b.n	8007b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fab2 	bl	8007f58 <USBD_CtlError>
            err++;
 80079f4:	7afb      	ldrb	r3, [r7, #11]
 80079f6:	3301      	adds	r3, #1
 80079f8:	72fb      	strb	r3, [r7, #11]
          break;
 80079fa:	e089      	b.n	8007b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00b      	beq.n	8007a20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	7c12      	ldrb	r2, [r2, #16]
 8007a14:	f107 0108 	add.w	r1, r7, #8
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
 8007a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a1e:	e077      	b.n	8007b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa98 	bl	8007f58 <USBD_CtlError>
            err++;
 8007a28:	7afb      	ldrb	r3, [r7, #11]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a2e:	e06f      	b.n	8007b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00b      	beq.n	8007a54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	7c12      	ldrb	r2, [r2, #16]
 8007a48:	f107 0108 	add.w	r1, r7, #8
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
 8007a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a52:	e05d      	b.n	8007b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa7e 	bl	8007f58 <USBD_CtlError>
            err++;
 8007a5c:	7afb      	ldrb	r3, [r7, #11]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	72fb      	strb	r3, [r7, #11]
          break;
 8007a62:	e055      	b.n	8007b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00b      	beq.n	8007a88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	7c12      	ldrb	r2, [r2, #16]
 8007a7c:	f107 0108 	add.w	r1, r7, #8
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a86:	e043      	b.n	8007b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa64 	bl	8007f58 <USBD_CtlError>
            err++;
 8007a90:	7afb      	ldrb	r3, [r7, #11]
 8007a92:	3301      	adds	r3, #1
 8007a94:	72fb      	strb	r3, [r7, #11]
          break;
 8007a96:	e03b      	b.n	8007b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	7c12      	ldrb	r2, [r2, #16]
 8007ab0:	f107 0108 	add.w	r1, r7, #8
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
 8007ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aba:	e029      	b.n	8007b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fa4a 	bl	8007f58 <USBD_CtlError>
            err++;
 8007ac4:	7afb      	ldrb	r3, [r7, #11]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aca:	e021      	b.n	8007b10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	7c12      	ldrb	r2, [r2, #16]
 8007ae4:	f107 0108 	add.w	r1, r7, #8
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4798      	blx	r3
 8007aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aee:	e00f      	b.n	8007b10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fa30 	bl	8007f58 <USBD_CtlError>
            err++;
 8007af8:	7afb      	ldrb	r3, [r7, #11]
 8007afa:	3301      	adds	r3, #1
 8007afc:	72fb      	strb	r3, [r7, #11]
          break;
 8007afe:	e007      	b.n	8007b10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa28 	bl	8007f58 <USBD_CtlError>
          err++;
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007b0e:	bf00      	nop
      }
      break;
 8007b10:	e037      	b.n	8007b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	7c1b      	ldrb	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d109      	bne.n	8007b2e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b22:	f107 0208 	add.w	r2, r7, #8
 8007b26:	4610      	mov	r0, r2
 8007b28:	4798      	blx	r3
 8007b2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b2c:	e029      	b.n	8007b82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fa11 	bl	8007f58 <USBD_CtlError>
        err++;
 8007b36:	7afb      	ldrb	r3, [r7, #11]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b3c:	e021      	b.n	8007b82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	7c1b      	ldrb	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10d      	bne.n	8007b62 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4e:	f107 0208 	add.w	r2, r7, #8
 8007b52:	4610      	mov	r0, r2
 8007b54:	4798      	blx	r3
 8007b56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	2207      	movs	r2, #7
 8007b5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b60:	e00f      	b.n	8007b82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f9f7 	bl	8007f58 <USBD_CtlError>
        err++;
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b70:	e007      	b.n	8007b82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f9ef 	bl	8007f58 <USBD_CtlError>
      err++;
 8007b7a:	7afb      	ldrb	r3, [r7, #11]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b80:	bf00      	nop
  }

  if (err != 0U)
 8007b82:	7afb      	ldrb	r3, [r7, #11]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d11e      	bne.n	8007bc6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	88db      	ldrh	r3, [r3, #6]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d016      	beq.n	8007bbe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007b90:	893b      	ldrh	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00e      	beq.n	8007bb4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	88da      	ldrh	r2, [r3, #6]
 8007b9a:	893b      	ldrh	r3, [r7, #8]
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	bf28      	it	cs
 8007ba0:	4613      	movcs	r3, r2
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ba6:	893b      	ldrh	r3, [r7, #8]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	68f9      	ldr	r1, [r7, #12]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fa44 	bl	800803a <USBD_CtlSendData>
 8007bb2:	e009      	b.n	8007bc8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f9ce 	bl	8007f58 <USBD_CtlError>
 8007bbc:	e004      	b.n	8007bc8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa95 	bl	80080ee <USBD_CtlSendStatus>
 8007bc4:	e000      	b.n	8007bc8 <USBD_GetDescriptor+0x320>
    return;
 8007bc6:	bf00      	nop
  }
}
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop

08007bd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	889b      	ldrh	r3, [r3, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d131      	bne.n	8007c46 <USBD_SetAddress+0x76>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	88db      	ldrh	r3, [r3, #6]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d12d      	bne.n	8007c46 <USBD_SetAddress+0x76>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	885b      	ldrh	r3, [r3, #2]
 8007bee:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bf0:	d829      	bhi.n	8007c46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	885b      	ldrh	r3, [r3, #2]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d104      	bne.n	8007c14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f9a3 	bl	8007f58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c12:	e01d      	b.n	8007c50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7bfa      	ldrb	r2, [r7, #15]
 8007c18:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fea1 	bl	8008968 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa61 	bl	80080ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d004      	beq.n	8007c3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2202      	movs	r2, #2
 8007c36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3a:	e009      	b.n	8007c50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c44:	e004      	b.n	8007c50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f985 	bl	8007f58 <USBD_CtlError>
  }
}
 8007c4e:	bf00      	nop
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	885b      	ldrh	r3, [r3, #2]
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007c6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c70:	4b4b      	ldr	r3, [pc, #300]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d905      	bls.n	8007c84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f96c 	bl	8007f58 <USBD_CtlError>
    return USBD_FAIL;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e088      	b.n	8007d96 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d002      	beq.n	8007c96 <USBD_SetConfig+0x3e>
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d025      	beq.n	8007ce0 <USBD_SetConfig+0x88>
 8007c94:	e071      	b.n	8007d7a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c96:	4b42      	ldr	r3, [pc, #264]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d01c      	beq.n	8007cd8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007c9e:	4b40      	ldr	r3, [pc, #256]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ca8:	4b3d      	ldr	r3, [pc, #244]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7ff f992 	bl	8006fd8 <USBD_SetClassConfig>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d004      	beq.n	8007cc8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f949 	bl	8007f58 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cc6:	e065      	b.n	8007d94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fa10 	bl	80080ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2203      	movs	r2, #3
 8007cd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007cd6:	e05d      	b.n	8007d94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa08 	bl	80080ee <USBD_CtlSendStatus>
      break;
 8007cde:	e059      	b.n	8007d94 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d112      	bne.n	8007d0e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cfa:	4b29      	ldr	r3, [pc, #164]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff f985 	bl	8007010 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f9f1 	bl	80080ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d0c:	e042      	b.n	8007d94 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007d0e:	4b24      	ldr	r3, [pc, #144]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d02a      	beq.n	8007d72 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff f973 	bl	8007010 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d34:	4b1a      	ldr	r3, [pc, #104]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff f94c 	bl	8006fd8 <USBD_SetClassConfig>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00f      	beq.n	8007d6a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f903 	bl	8007f58 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff f958 	bl	8007010 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d68:	e014      	b.n	8007d94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f9bf 	bl	80080ee <USBD_CtlSendStatus>
      break;
 8007d70:	e010      	b.n	8007d94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f9bb 	bl	80080ee <USBD_CtlSendStatus>
      break;
 8007d78:	e00c      	b.n	8007d94 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f8eb 	bl	8007f58 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d82:	4b07      	ldr	r3, [pc, #28]	@ (8007da0 <USBD_SetConfig+0x148>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff f941 	bl	8007010 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	73fb      	strb	r3, [r7, #15]
      break;
 8007d92:	bf00      	nop
  }

  return ret;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	200002b0 	.word	0x200002b0

08007da4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	88db      	ldrh	r3, [r3, #6]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d004      	beq.n	8007dc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f8cd 	bl	8007f58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dbe:	e023      	b.n	8007e08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	dc02      	bgt.n	8007dd2 <USBD_GetConfig+0x2e>
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	dc03      	bgt.n	8007dd8 <USBD_GetConfig+0x34>
 8007dd0:	e015      	b.n	8007dfe <USBD_GetConfig+0x5a>
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d00b      	beq.n	8007dee <USBD_GetConfig+0x4a>
 8007dd6:	e012      	b.n	8007dfe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3308      	adds	r3, #8
 8007de2:	2201      	movs	r2, #1
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f927 	bl	800803a <USBD_CtlSendData>
        break;
 8007dec:	e00c      	b.n	8007e08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3304      	adds	r3, #4
 8007df2:	2201      	movs	r2, #1
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f91f 	bl	800803a <USBD_CtlSendData>
        break;
 8007dfc:	e004      	b.n	8007e08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f8a9 	bl	8007f58 <USBD_CtlError>
        break;
 8007e06:	bf00      	nop
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	3b01      	subs	r3, #1
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d81e      	bhi.n	8007e66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	88db      	ldrh	r3, [r3, #6]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d004      	beq.n	8007e3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f890 	bl	8007f58 <USBD_CtlError>
        break;
 8007e38:	e01a      	b.n	8007e70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d005      	beq.n	8007e56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f043 0202 	orr.w	r2, r3, #2
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	330c      	adds	r3, #12
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f8eb 	bl	800803a <USBD_CtlSendData>
      break;
 8007e64:	e004      	b.n	8007e70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f875 	bl	8007f58 <USBD_CtlError>
      break;
 8007e6e:	bf00      	nop
  }
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	885b      	ldrh	r3, [r3, #2]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d106      	bne.n	8007e98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f92b 	bl	80080ee <USBD_CtlSendStatus>
  }
}
 8007e98:	bf00      	nop
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d80b      	bhi.n	8007ed0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	885b      	ldrh	r3, [r3, #2]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d10c      	bne.n	8007eda <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f910 	bl	80080ee <USBD_CtlSendStatus>
      }
      break;
 8007ece:	e004      	b.n	8007eda <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f840 	bl	8007f58 <USBD_CtlError>
      break;
 8007ed8:	e000      	b.n	8007edc <USBD_ClrFeature+0x3c>
      break;
 8007eda:	bf00      	nop
  }
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	781a      	ldrb	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3301      	adds	r3, #1
 8007efe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	781a      	ldrb	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff fa92 	bl	8007438 <SWAPBYTE>
 8007f14:	4603      	mov	r3, r0
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7ff fa85 	bl	8007438 <SWAPBYTE>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	461a      	mov	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7ff fa78 	bl	8007438 <SWAPBYTE>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	80da      	strh	r2, [r3, #6]
}
 8007f50:	bf00      	nop
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f62:	2180      	movs	r1, #128	@ 0x80
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fc95 	bl	8008894 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fc91 	bl	8008894 <USBD_LL_StallEP>
}
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b086      	sub	sp, #24
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d036      	beq.n	8007ffe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f94:	6938      	ldr	r0, [r7, #16]
 8007f96:	f000 f836 	bl	8008006 <USBD_GetLen>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	4413      	add	r3, r2
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	7812      	ldrb	r2, [r2, #0]
 8007fb2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	2203      	movs	r2, #3
 8007fc2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007fca:	e013      	b.n	8007ff4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	7812      	ldrb	r2, [r2, #0]
 8007fd6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	613b      	str	r3, [r7, #16]
    idx++;
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	4413      	add	r3, r2
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]
    idx++;
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e7      	bne.n	8007fcc <USBD_GetString+0x52>
 8007ffc:	e000      	b.n	8008000 <USBD_GetString+0x86>
    return;
 8007ffe:	bf00      	nop
  }
}
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008006:	b480      	push	{r7}
 8008008:	b085      	sub	sp, #20
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008016:	e005      	b.n	8008024 <USBD_GetLen+0x1e>
  {
    len++;
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	3301      	adds	r3, #1
 800801c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	3301      	adds	r3, #1
 8008022:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f5      	bne.n	8008018 <USBD_GetLen+0x12>
  }

  return len;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2202      	movs	r2, #2
 800804a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	2100      	movs	r1, #0
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 fca0 	bl	80089a6 <USBD_LL_Transmit>

  return USBD_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	2100      	movs	r1, #0
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fc8f 	bl	80089a6 <USBD_LL_Transmit>

  return USBD_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2203      	movs	r2, #3
 80080a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	2100      	movs	r1, #0
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fc93 	bl	80089e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	2100      	movs	r1, #0
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 fc82 	bl	80089e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2204      	movs	r2, #4
 80080fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080fe:	2300      	movs	r3, #0
 8008100:	2200      	movs	r2, #0
 8008102:	2100      	movs	r1, #0
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fc4e 	bl	80089a6 <USBD_LL_Transmit>

  return USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2205      	movs	r2, #5
 8008120:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008124:	2300      	movs	r3, #0
 8008126:	2200      	movs	r2, #0
 8008128:	2100      	movs	r1, #0
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fc5c 	bl	80089e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008140:	2200      	movs	r2, #0
 8008142:	4912      	ldr	r1, [pc, #72]	@ (800818c <MX_USB_Device_Init+0x50>)
 8008144:	4812      	ldr	r0, [pc, #72]	@ (8008190 <MX_USB_Device_Init+0x54>)
 8008146:	f7fe fed9 	bl	8006efc <USBD_Init>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008150:	f7f8 fada 	bl	8000708 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008154:	490f      	ldr	r1, [pc, #60]	@ (8008194 <MX_USB_Device_Init+0x58>)
 8008156:	480e      	ldr	r0, [pc, #56]	@ (8008190 <MX_USB_Device_Init+0x54>)
 8008158:	f7fe ff00 	bl	8006f5c <USBD_RegisterClass>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008162:	f7f8 fad1 	bl	8000708 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008166:	490c      	ldr	r1, [pc, #48]	@ (8008198 <MX_USB_Device_Init+0x5c>)
 8008168:	4809      	ldr	r0, [pc, #36]	@ (8008190 <MX_USB_Device_Init+0x54>)
 800816a:	f7fe fe21 	bl	8006db0 <USBD_CDC_RegisterInterface>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008174:	f7f8 fac8 	bl	8000708 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008178:	4805      	ldr	r0, [pc, #20]	@ (8008190 <MX_USB_Device_Init+0x54>)
 800817a:	f7fe ff16 	bl	8006faa <USBD_Start>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008184:	f7f8 fac0 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008188:	bf00      	nop
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20000130 	.word	0x20000130
 8008190:	200002b4 	.word	0x200002b4
 8008194:	20000018 	.word	0x20000018
 8008198:	2000011c 	.word	0x2000011c

0800819c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081a0:	2200      	movs	r2, #0
 80081a2:	4905      	ldr	r1, [pc, #20]	@ (80081b8 <CDC_Init_FS+0x1c>)
 80081a4:	4805      	ldr	r0, [pc, #20]	@ (80081bc <CDC_Init_FS+0x20>)
 80081a6:	f7fe fe18 	bl	8006dda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081aa:	4905      	ldr	r1, [pc, #20]	@ (80081c0 <CDC_Init_FS+0x24>)
 80081ac:	4803      	ldr	r0, [pc, #12]	@ (80081bc <CDC_Init_FS+0x20>)
 80081ae:	f7fe fe32 	bl	8006e16 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20000d84 	.word	0x20000d84
 80081bc:	200002b4 	.word	0x200002b4
 80081c0:	20000584 	.word	0x20000584

080081c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
 80081e0:	4613      	mov	r3, r2
 80081e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	2b23      	cmp	r3, #35	@ 0x23
 80081e8:	d84a      	bhi.n	8008280 <CDC_Control_FS+0xac>
 80081ea:	a201      	add	r2, pc, #4	@ (adr r2, 80081f0 <CDC_Control_FS+0x1c>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	08008281 	.word	0x08008281
 80081f4:	08008281 	.word	0x08008281
 80081f8:	08008281 	.word	0x08008281
 80081fc:	08008281 	.word	0x08008281
 8008200:	08008281 	.word	0x08008281
 8008204:	08008281 	.word	0x08008281
 8008208:	08008281 	.word	0x08008281
 800820c:	08008281 	.word	0x08008281
 8008210:	08008281 	.word	0x08008281
 8008214:	08008281 	.word	0x08008281
 8008218:	08008281 	.word	0x08008281
 800821c:	08008281 	.word	0x08008281
 8008220:	08008281 	.word	0x08008281
 8008224:	08008281 	.word	0x08008281
 8008228:	08008281 	.word	0x08008281
 800822c:	08008281 	.word	0x08008281
 8008230:	08008281 	.word	0x08008281
 8008234:	08008281 	.word	0x08008281
 8008238:	08008281 	.word	0x08008281
 800823c:	08008281 	.word	0x08008281
 8008240:	08008281 	.word	0x08008281
 8008244:	08008281 	.word	0x08008281
 8008248:	08008281 	.word	0x08008281
 800824c:	08008281 	.word	0x08008281
 8008250:	08008281 	.word	0x08008281
 8008254:	08008281 	.word	0x08008281
 8008258:	08008281 	.word	0x08008281
 800825c:	08008281 	.word	0x08008281
 8008260:	08008281 	.word	0x08008281
 8008264:	08008281 	.word	0x08008281
 8008268:	08008281 	.word	0x08008281
 800826c:	08008281 	.word	0x08008281
 8008270:	08008281 	.word	0x08008281
 8008274:	08008281 	.word	0x08008281
 8008278:	08008281 	.word	0x08008281
 800827c:	08008281 	.word	0x08008281
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008280:	bf00      	nop
  }

  return (USBD_OK);
 8008282:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	4805      	ldr	r0, [pc, #20]	@ (80082b4 <CDC_Receive_FS+0x24>)
 800829e:	f7fe fdba 	bl	8006e16 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082a2:	4804      	ldr	r0, [pc, #16]	@ (80082b4 <CDC_Receive_FS+0x24>)
 80082a4:	f7fe fe00 	bl	8006ea8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	200002b4 	.word	0x200002b4

080082b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80082c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008300 <CDC_Transmit_FS+0x48>)
 80082ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80082da:	2301      	movs	r3, #1
 80082dc:	e00b      	b.n	80082f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80082de:	887b      	ldrh	r3, [r7, #2]
 80082e0:	461a      	mov	r2, r3
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	4806      	ldr	r0, [pc, #24]	@ (8008300 <CDC_Transmit_FS+0x48>)
 80082e6:	f7fe fd78 	bl	8006dda <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80082ea:	4805      	ldr	r0, [pc, #20]	@ (8008300 <CDC_Transmit_FS+0x48>)
 80082ec:	f7fe fdac 	bl	8006e48 <USBD_CDC_TransmitPacket>
 80082f0:	4603      	mov	r3, r0
 80082f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	200002b4 	.word	0x200002b4

08008304 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4613      	mov	r3, r2
 8008310:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008316:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800831a:	4618      	mov	r0, r3
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
	...

08008328 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	6039      	str	r1, [r7, #0]
 8008332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2212      	movs	r2, #18
 8008338:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800833a:	4b03      	ldr	r3, [pc, #12]	@ (8008348 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800833c:	4618      	mov	r0, r3
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	20000150 	.word	0x20000150

0800834c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2204      	movs	r2, #4
 800835c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800835e:	4b03      	ldr	r3, [pc, #12]	@ (800836c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	20000164 	.word	0x20000164

08008370 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	6039      	str	r1, [r7, #0]
 800837a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d105      	bne.n	800838e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	4907      	ldr	r1, [pc, #28]	@ (80083a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008386:	4808      	ldr	r0, [pc, #32]	@ (80083a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008388:	f7ff fdf7 	bl	8007f7a <USBD_GetString>
 800838c:	e004      	b.n	8008398 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	4904      	ldr	r1, [pc, #16]	@ (80083a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008392:	4805      	ldr	r0, [pc, #20]	@ (80083a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008394:	f7ff fdf1 	bl	8007f7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008398:	4b02      	ldr	r3, [pc, #8]	@ (80083a4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	20001584 	.word	0x20001584
 80083a8:	080096c4 	.word	0x080096c4

080083ac <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	4904      	ldr	r1, [pc, #16]	@ (80083cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80083bc:	4804      	ldr	r0, [pc, #16]	@ (80083d0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80083be:	f7ff fddc 	bl	8007f7a <USBD_GetString>
  return USBD_StrDesc;
 80083c2:	4b02      	ldr	r3, [pc, #8]	@ (80083cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20001584 	.word	0x20001584
 80083d0:	080096dc 	.word	0x080096dc

080083d4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	6039      	str	r1, [r7, #0]
 80083de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	221a      	movs	r2, #26
 80083e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083e6:	f000 f843 	bl	8008470 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80083ea:	4b02      	ldr	r3, [pc, #8]	@ (80083f4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	20000168 	.word	0x20000168

080083f8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	6039      	str	r1, [r7, #0]
 8008402:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008404:	79fb      	ldrb	r3, [r7, #7]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d105      	bne.n	8008416 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	4907      	ldr	r1, [pc, #28]	@ (800842c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800840e:	4808      	ldr	r0, [pc, #32]	@ (8008430 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008410:	f7ff fdb3 	bl	8007f7a <USBD_GetString>
 8008414:	e004      	b.n	8008420 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	4904      	ldr	r1, [pc, #16]	@ (800842c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800841a:	4805      	ldr	r0, [pc, #20]	@ (8008430 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800841c:	f7ff fdad 	bl	8007f7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008420:	4b02      	ldr	r3, [pc, #8]	@ (800842c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20001584 	.word	0x20001584
 8008430:	080096f0 	.word	0x080096f0

08008434 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	6039      	str	r1, [r7, #0]
 800843e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d105      	bne.n	8008452 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	4907      	ldr	r1, [pc, #28]	@ (8008468 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800844a:	4808      	ldr	r0, [pc, #32]	@ (800846c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800844c:	f7ff fd95 	bl	8007f7a <USBD_GetString>
 8008450:	e004      	b.n	800845c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	4904      	ldr	r1, [pc, #16]	@ (8008468 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008456:	4805      	ldr	r0, [pc, #20]	@ (800846c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008458:	f7ff fd8f 	bl	8007f7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800845c:	4b02      	ldr	r3, [pc, #8]	@ (8008468 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20001584 	.word	0x20001584
 800846c:	080096fc 	.word	0x080096fc

08008470 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008476:	4b0f      	ldr	r3, [pc, #60]	@ (80084b4 <Get_SerialNum+0x44>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800847c:	4b0e      	ldr	r3, [pc, #56]	@ (80084b8 <Get_SerialNum+0x48>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008482:	4b0e      	ldr	r3, [pc, #56]	@ (80084bc <Get_SerialNum+0x4c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4413      	add	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d009      	beq.n	80084aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008496:	2208      	movs	r2, #8
 8008498:	4909      	ldr	r1, [pc, #36]	@ (80084c0 <Get_SerialNum+0x50>)
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 f814 	bl	80084c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084a0:	2204      	movs	r2, #4
 80084a2:	4908      	ldr	r1, [pc, #32]	@ (80084c4 <Get_SerialNum+0x54>)
 80084a4:	68b8      	ldr	r0, [r7, #8]
 80084a6:	f000 f80f 	bl	80084c8 <IntToUnicode>
  }
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	1fff7590 	.word	0x1fff7590
 80084b8:	1fff7594 	.word	0x1fff7594
 80084bc:	1fff7598 	.word	0x1fff7598
 80084c0:	2000016a 	.word	0x2000016a
 80084c4:	2000017a 	.word	0x2000017a

080084c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	4613      	mov	r3, r2
 80084d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084da:	2300      	movs	r3, #0
 80084dc:	75fb      	strb	r3, [r7, #23]
 80084de:	e027      	b.n	8008530 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	0f1b      	lsrs	r3, r3, #28
 80084e4:	2b09      	cmp	r3, #9
 80084e6:	d80b      	bhi.n	8008500 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	0f1b      	lsrs	r3, r3, #28
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	7dfb      	ldrb	r3, [r7, #23]
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	4619      	mov	r1, r3
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	440b      	add	r3, r1
 80084f8:	3230      	adds	r2, #48	@ 0x30
 80084fa:	b2d2      	uxtb	r2, r2
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	e00a      	b.n	8008516 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	0f1b      	lsrs	r3, r3, #28
 8008504:	b2da      	uxtb	r2, r3
 8008506:	7dfb      	ldrb	r3, [r7, #23]
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	4619      	mov	r1, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	440b      	add	r3, r1
 8008510:	3237      	adds	r2, #55	@ 0x37
 8008512:	b2d2      	uxtb	r2, r2
 8008514:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	011b      	lsls	r3, r3, #4
 800851a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800851c:	7dfb      	ldrb	r3, [r7, #23]
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	3301      	adds	r3, #1
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	4413      	add	r3, r2
 8008526:	2200      	movs	r2, #0
 8008528:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800852a:	7dfb      	ldrb	r3, [r7, #23]
 800852c:	3301      	adds	r3, #1
 800852e:	75fb      	strb	r3, [r7, #23]
 8008530:	7dfa      	ldrb	r2, [r7, #23]
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	429a      	cmp	r2, r3
 8008536:	d3d3      	bcc.n	80084e0 <IntToUnicode+0x18>
  }
}
 8008538:	bf00      	nop
 800853a:	bf00      	nop
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b098      	sub	sp, #96	@ 0x60
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008550:	f107 0310 	add.w	r3, r7, #16
 8008554:	2250      	movs	r2, #80	@ 0x50
 8008556:	2100      	movs	r1, #0
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fb39 	bl	8008bd0 <memset>
  if(pcdHandle->Instance==USB)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a15      	ldr	r2, [pc, #84]	@ (80085b8 <HAL_PCD_MspInit+0x70>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d122      	bne.n	80085ae <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008568:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800856c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800856e:	2300      	movs	r3, #0
 8008570:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008572:	f107 0310 	add.w	r3, r7, #16
 8008576:	4618      	mov	r0, r3
 8008578:	f7fc f8ca 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008582:	f7f8 f8c1 	bl	8000708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008586:	4b0d      	ldr	r3, [pc, #52]	@ (80085bc <HAL_PCD_MspInit+0x74>)
 8008588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800858a:	4a0c      	ldr	r2, [pc, #48]	@ (80085bc <HAL_PCD_MspInit+0x74>)
 800858c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008590:	6593      	str	r3, [r2, #88]	@ 0x58
 8008592:	4b0a      	ldr	r3, [pc, #40]	@ (80085bc <HAL_PCD_MspInit+0x74>)
 8008594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800859e:	2200      	movs	r2, #0
 80085a0:	2100      	movs	r1, #0
 80085a2:	2014      	movs	r0, #20
 80085a4:	f7f8 fba7 	bl	8000cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80085a8:	2014      	movs	r0, #20
 80085aa:	f7f8 fbbe 	bl	8000d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80085ae:	bf00      	nop
 80085b0:	3760      	adds	r7, #96	@ 0x60
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	40005c00 	.word	0x40005c00
 80085bc:	40021000 	.word	0x40021000

080085c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80085d4:	4619      	mov	r1, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	f7fe fd32 	bl	8007040 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80085f6:	78fa      	ldrb	r2, [r7, #3]
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	440b      	add	r3, r1
 8008604:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	4619      	mov	r1, r3
 800860e:	f7fe fd6c 	bl	80070ea <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008612:	bf00      	nop
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	460b      	mov	r3, r1
 8008624:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800862c:	78fa      	ldrb	r2, [r7, #3]
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	440b      	add	r3, r1
 800863a:	3324      	adds	r3, #36	@ 0x24
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	78fb      	ldrb	r3, [r7, #3]
 8008640:	4619      	mov	r1, r3
 8008642:	f7fe fdb5 	bl	80071b0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fec9 	bl	80073f4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008662:	bf00      	nop
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008672:	2301      	movs	r3, #1
 8008674:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	795b      	ldrb	r3, [r3, #5]
 800867a:	2b02      	cmp	r3, #2
 800867c:	d001      	beq.n	8008682 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800867e:	f7f8 f843 	bl	8000708 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008688:	7bfa      	ldrb	r2, [r7, #15]
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f7fe fe73 	bl	8007378 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008698:	4618      	mov	r0, r3
 800869a:	f7fe fe1f 	bl	80072dc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe fe6e 	bl	8007398 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	7a5b      	ldrb	r3, [r3, #9]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086c4:	4b04      	ldr	r3, [pc, #16]	@ (80086d8 <HAL_PCD_SuspendCallback+0x30>)
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	4a03      	ldr	r2, [pc, #12]	@ (80086d8 <HAL_PCD_SuspendCallback+0x30>)
 80086ca:	f043 0306 	orr.w	r3, r3, #6
 80086ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	e000ed00 	.word	0xe000ed00

080086dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7a5b      	ldrb	r3, [r3, #9]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d007      	beq.n	80086fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086ec:	4b08      	ldr	r3, [pc, #32]	@ (8008710 <HAL_PCD_ResumeCallback+0x34>)
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	4a07      	ldr	r2, [pc, #28]	@ (8008710 <HAL_PCD_ResumeCallback+0x34>)
 80086f2:	f023 0306 	bic.w	r3, r3, #6
 80086f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80086f8:	f000 f9f8 	bl	8008aec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe fe5e 	bl	80073c4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	e000ed00 	.word	0xe000ed00

08008714 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800871c:	4a2b      	ldr	r2, [pc, #172]	@ (80087cc <USBD_LL_Init+0xb8>)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a29      	ldr	r2, [pc, #164]	@ (80087cc <USBD_LL_Init+0xb8>)
 8008728:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800872c:	4b27      	ldr	r3, [pc, #156]	@ (80087cc <USBD_LL_Init+0xb8>)
 800872e:	4a28      	ldr	r2, [pc, #160]	@ (80087d0 <USBD_LL_Init+0xbc>)
 8008730:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008732:	4b26      	ldr	r3, [pc, #152]	@ (80087cc <USBD_LL_Init+0xb8>)
 8008734:	2208      	movs	r2, #8
 8008736:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008738:	4b24      	ldr	r3, [pc, #144]	@ (80087cc <USBD_LL_Init+0xb8>)
 800873a:	2202      	movs	r2, #2
 800873c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800873e:	4b23      	ldr	r3, [pc, #140]	@ (80087cc <USBD_LL_Init+0xb8>)
 8008740:	2202      	movs	r2, #2
 8008742:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008744:	4b21      	ldr	r3, [pc, #132]	@ (80087cc <USBD_LL_Init+0xb8>)
 8008746:	2200      	movs	r2, #0
 8008748:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800874a:	4b20      	ldr	r3, [pc, #128]	@ (80087cc <USBD_LL_Init+0xb8>)
 800874c:	2200      	movs	r2, #0
 800874e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008750:	4b1e      	ldr	r3, [pc, #120]	@ (80087cc <USBD_LL_Init+0xb8>)
 8008752:	2200      	movs	r2, #0
 8008754:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008756:	4b1d      	ldr	r3, [pc, #116]	@ (80087cc <USBD_LL_Init+0xb8>)
 8008758:	2200      	movs	r2, #0
 800875a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800875c:	481b      	ldr	r0, [pc, #108]	@ (80087cc <USBD_LL_Init+0xb8>)
 800875e:	f7f9 fd2c 	bl	80021ba <HAL_PCD_Init>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8008768:	f7f7 ffce 	bl	8000708 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008772:	2318      	movs	r3, #24
 8008774:	2200      	movs	r2, #0
 8008776:	2100      	movs	r1, #0
 8008778:	f7fb f9b3 	bl	8003ae2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008782:	2358      	movs	r3, #88	@ 0x58
 8008784:	2200      	movs	r2, #0
 8008786:	2180      	movs	r1, #128	@ 0x80
 8008788:	f7fb f9ab 	bl	8003ae2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008792:	23c0      	movs	r3, #192	@ 0xc0
 8008794:	2200      	movs	r2, #0
 8008796:	2181      	movs	r1, #129	@ 0x81
 8008798:	f7fb f9a3 	bl	8003ae2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80087a2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80087a6:	2200      	movs	r2, #0
 80087a8:	2101      	movs	r1, #1
 80087aa:	f7fb f99a 	bl	8003ae2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80087b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80087b8:	2200      	movs	r2, #0
 80087ba:	2182      	movs	r1, #130	@ 0x82
 80087bc:	f7fb f991 	bl	8003ae2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20001784 	.word	0x20001784
 80087d0:	40005c00 	.word	0x40005c00

080087d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7f9 fdb3 	bl	8002356 <HAL_PCD_Start>
 80087f0:	4603      	mov	r3, r0
 80087f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f97e 	bl	8008af8 <USBD_Get_USB_Status>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008800:	7bbb      	ldrb	r3, [r7, #14]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	461a      	mov	r2, r3
 8008818:	4603      	mov	r3, r0
 800881a:	70fb      	strb	r3, [r7, #3]
 800881c:	460b      	mov	r3, r1
 800881e:	70bb      	strb	r3, [r7, #2]
 8008820:	4613      	mov	r3, r2
 8008822:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008832:	78bb      	ldrb	r3, [r7, #2]
 8008834:	883a      	ldrh	r2, [r7, #0]
 8008836:	78f9      	ldrb	r1, [r7, #3]
 8008838:	f7f9 fefa 	bl	8002630 <HAL_PCD_EP_Open>
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	4618      	mov	r0, r3
 8008844:	f000 f958 	bl	8008af8 <USBD_Get_USB_Status>
 8008848:	4603      	mov	r3, r0
 800884a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800884c:	7bbb      	ldrb	r3, [r7, #14]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	4611      	mov	r1, r2
 8008874:	4618      	mov	r0, r3
 8008876:	f7f9 ff3a 	bl	80026ee <HAL_PCD_EP_Close>
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f939 	bl	8008af8 <USBD_Get_USB_Status>
 8008886:	4603      	mov	r3, r0
 8008888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800888a:	7bbb      	ldrb	r3, [r7, #14]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80088ae:	78fa      	ldrb	r2, [r7, #3]
 80088b0:	4611      	mov	r1, r2
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7f9 ffe3 	bl	800287e <HAL_PCD_EP_SetStall>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f91a 	bl	8008af8 <USBD_Get_USB_Status>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	4611      	mov	r1, r2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fa f816 	bl	8002922 <HAL_PCD_EP_ClrStall>
 80088f6:	4603      	mov	r3, r0
 80088f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f8fb 	bl	8008af8 <USBD_Get_USB_Status>
 8008902:	4603      	mov	r3, r0
 8008904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008906:	7bbb      	ldrb	r3, [r7, #14]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008922:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008928:	2b00      	cmp	r3, #0
 800892a:	da0b      	bge.n	8008944 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	440b      	add	r3, r1
 800893e:	3312      	adds	r3, #18
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	e00b      	b.n	800895c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800894a:	68f9      	ldr	r1, [r7, #12]
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	00db      	lsls	r3, r3, #3
 8008954:	440b      	add	r3, r1
 8008956:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800895a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008982:	78fa      	ldrb	r2, [r7, #3]
 8008984:	4611      	mov	r1, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f7f9 fe2e 	bl	80025e8 <HAL_PCD_SetAddress>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f8b0 	bl	8008af8 <USBD_Get_USB_Status>
 8008998:	4603      	mov	r3, r0
 800899a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800899c:	7bbb      	ldrb	r3, [r7, #14]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b086      	sub	sp, #24
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	607a      	str	r2, [r7, #4]
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	460b      	mov	r3, r1
 80089b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80089c4:	7af9      	ldrb	r1, [r7, #11]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	f7f9 ff21 	bl	8002810 <HAL_PCD_EP_Transmit>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 f88f 	bl	8008af8 <USBD_Get_USB_Status>
 80089da:	4603      	mov	r3, r0
 80089dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089de:	7dbb      	ldrb	r3, [r7, #22]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	607a      	str	r2, [r7, #4]
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	460b      	mov	r3, r1
 80089f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8008a06:	7af9      	ldrb	r1, [r7, #11]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	f7f9 feb7 	bl	800277e <HAL_PCD_EP_Receive>
 8008a10:	4603      	mov	r3, r0
 8008a12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f86e 	bl	8008af8 <USBD_Get_USB_Status>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a20:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	460b      	mov	r3, r1
 8008a34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008a3c:	78fa      	ldrb	r2, [r7, #3]
 8008a3e:	4611      	mov	r1, r2
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7f9 fecd 	bl	80027e0 <HAL_PCD_EP_GetRxCount>
 8008a46:	4603      	mov	r3, r0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8008a5c:	78fb      	ldrb	r3, [r7, #3]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <HAL_PCDEx_LPM_Callback+0x18>
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d013      	beq.n	8008a8e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8008a66:	e023      	b.n	8008ab0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7a5b      	ldrb	r3, [r3, #9]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d007      	beq.n	8008a80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008a70:	f000 f83c 	bl	8008aec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a74:	4b10      	ldr	r3, [pc, #64]	@ (8008ab8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	4a0f      	ldr	r2, [pc, #60]	@ (8008ab8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008a7a:	f023 0306 	bic.w	r3, r3, #6
 8008a7e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fc9c 	bl	80073c4 <USBD_LL_Resume>
    break;
 8008a8c:	e010      	b.n	8008ab0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fc7f 	bl	8007398 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7a5b      	ldrb	r3, [r3, #9]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d005      	beq.n	8008aae <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008aa2:	4b05      	ldr	r3, [pc, #20]	@ (8008ab8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	4a04      	ldr	r2, [pc, #16]	@ (8008ab8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008aa8:	f043 0306 	orr.w	r3, r3, #6
 8008aac:	6113      	str	r3, [r2, #16]
    break;
 8008aae:	bf00      	nop
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	e000ed00 	.word	0xe000ed00

08008abc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ac4:	4b03      	ldr	r3, [pc, #12]	@ (8008ad4 <USBD_static_malloc+0x18>)
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20001a60 	.word	0x20001a60

08008ad8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]

}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008af0:	f7f7 fcea 	bl	80004c8 <SystemClock_Config>
}
 8008af4:	bf00      	nop
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d817      	bhi.n	8008b3c <USBD_Get_USB_Status+0x44>
 8008b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b14 <USBD_Get_USB_Status+0x1c>)
 8008b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b12:	bf00      	nop
 8008b14:	08008b25 	.word	0x08008b25
 8008b18:	08008b2b 	.word	0x08008b2b
 8008b1c:	08008b31 	.word	0x08008b31
 8008b20:	08008b37 	.word	0x08008b37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
    break;
 8008b28:	e00b      	b.n	8008b42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2e:	e008      	b.n	8008b42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b30:	2301      	movs	r3, #1
 8008b32:	73fb      	strb	r3, [r7, #15]
    break;
 8008b34:	e005      	b.n	8008b42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b36:	2303      	movs	r3, #3
 8008b38:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3a:	e002      	b.n	8008b42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b40:	bf00      	nop
  }
  return usb_status;
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <siprintf>:
 8008b50:	b40e      	push	{r1, r2, r3}
 8008b52:	b500      	push	{lr}
 8008b54:	b09c      	sub	sp, #112	@ 0x70
 8008b56:	ab1d      	add	r3, sp, #116	@ 0x74
 8008b58:	9002      	str	r0, [sp, #8]
 8008b5a:	9006      	str	r0, [sp, #24]
 8008b5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b60:	4809      	ldr	r0, [pc, #36]	@ (8008b88 <siprintf+0x38>)
 8008b62:	9107      	str	r1, [sp, #28]
 8008b64:	9104      	str	r1, [sp, #16]
 8008b66:	4909      	ldr	r1, [pc, #36]	@ (8008b8c <siprintf+0x3c>)
 8008b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b6c:	9105      	str	r1, [sp, #20]
 8008b6e:	6800      	ldr	r0, [r0, #0]
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	a902      	add	r1, sp, #8
 8008b74:	f000 f9b4 	bl	8008ee0 <_svfiprintf_r>
 8008b78:	9b02      	ldr	r3, [sp, #8]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	b01c      	add	sp, #112	@ 0x70
 8008b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b84:	b003      	add	sp, #12
 8008b86:	4770      	bx	lr
 8008b88:	20000184 	.word	0x20000184
 8008b8c:	ffff0208 	.word	0xffff0208

08008b90 <_vsiprintf_r>:
 8008b90:	b500      	push	{lr}
 8008b92:	b09b      	sub	sp, #108	@ 0x6c
 8008b94:	9100      	str	r1, [sp, #0]
 8008b96:	9104      	str	r1, [sp, #16]
 8008b98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b9c:	9105      	str	r1, [sp, #20]
 8008b9e:	9102      	str	r1, [sp, #8]
 8008ba0:	4905      	ldr	r1, [pc, #20]	@ (8008bb8 <_vsiprintf_r+0x28>)
 8008ba2:	9103      	str	r1, [sp, #12]
 8008ba4:	4669      	mov	r1, sp
 8008ba6:	f000 f99b 	bl	8008ee0 <_svfiprintf_r>
 8008baa:	9b00      	ldr	r3, [sp, #0]
 8008bac:	2200      	movs	r2, #0
 8008bae:	701a      	strb	r2, [r3, #0]
 8008bb0:	b01b      	add	sp, #108	@ 0x6c
 8008bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bb6:	bf00      	nop
 8008bb8:	ffff0208 	.word	0xffff0208

08008bbc <vsiprintf>:
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	460a      	mov	r2, r1
 8008bc0:	4601      	mov	r1, r0
 8008bc2:	4802      	ldr	r0, [pc, #8]	@ (8008bcc <vsiprintf+0x10>)
 8008bc4:	6800      	ldr	r0, [r0, #0]
 8008bc6:	f7ff bfe3 	b.w	8008b90 <_vsiprintf_r>
 8008bca:	bf00      	nop
 8008bcc:	20000184 	.word	0x20000184

08008bd0 <memset>:
 8008bd0:	4402      	add	r2, r0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d100      	bne.n	8008bda <memset+0xa>
 8008bd8:	4770      	bx	lr
 8008bda:	f803 1b01 	strb.w	r1, [r3], #1
 8008bde:	e7f9      	b.n	8008bd4 <memset+0x4>

08008be0 <__errno>:
 8008be0:	4b01      	ldr	r3, [pc, #4]	@ (8008be8 <__errno+0x8>)
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	20000184 	.word	0x20000184

08008bec <__libc_init_array>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	4d0d      	ldr	r5, [pc, #52]	@ (8008c24 <__libc_init_array+0x38>)
 8008bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8008c28 <__libc_init_array+0x3c>)
 8008bf2:	1b64      	subs	r4, r4, r5
 8008bf4:	10a4      	asrs	r4, r4, #2
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	42a6      	cmp	r6, r4
 8008bfa:	d109      	bne.n	8008c10 <__libc_init_array+0x24>
 8008bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8008c2c <__libc_init_array+0x40>)
 8008bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8008c30 <__libc_init_array+0x44>)
 8008c00:	f000 fc66 	bl	80094d0 <_init>
 8008c04:	1b64      	subs	r4, r4, r5
 8008c06:	10a4      	asrs	r4, r4, #2
 8008c08:	2600      	movs	r6, #0
 8008c0a:	42a6      	cmp	r6, r4
 8008c0c:	d105      	bne.n	8008c1a <__libc_init_array+0x2e>
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c14:	4798      	blx	r3
 8008c16:	3601      	adds	r6, #1
 8008c18:	e7ee      	b.n	8008bf8 <__libc_init_array+0xc>
 8008c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c1e:	4798      	blx	r3
 8008c20:	3601      	adds	r6, #1
 8008c22:	e7f2      	b.n	8008c0a <__libc_init_array+0x1e>
 8008c24:	08009758 	.word	0x08009758
 8008c28:	08009758 	.word	0x08009758
 8008c2c:	08009758 	.word	0x08009758
 8008c30:	0800975c 	.word	0x0800975c

08008c34 <__retarget_lock_acquire_recursive>:
 8008c34:	4770      	bx	lr

08008c36 <__retarget_lock_release_recursive>:
 8008c36:	4770      	bx	lr

08008c38 <_free_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	d041      	beq.n	8008cc4 <_free_r+0x8c>
 8008c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c44:	1f0c      	subs	r4, r1, #4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bfb8      	it	lt
 8008c4a:	18e4      	addlt	r4, r4, r3
 8008c4c:	f000 f8e0 	bl	8008e10 <__malloc_lock>
 8008c50:	4a1d      	ldr	r2, [pc, #116]	@ (8008cc8 <_free_r+0x90>)
 8008c52:	6813      	ldr	r3, [r2, #0]
 8008c54:	b933      	cbnz	r3, 8008c64 <_free_r+0x2c>
 8008c56:	6063      	str	r3, [r4, #4]
 8008c58:	6014      	str	r4, [r2, #0]
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c60:	f000 b8dc 	b.w	8008e1c <__malloc_unlock>
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d908      	bls.n	8008c7a <_free_r+0x42>
 8008c68:	6820      	ldr	r0, [r4, #0]
 8008c6a:	1821      	adds	r1, r4, r0
 8008c6c:	428b      	cmp	r3, r1
 8008c6e:	bf01      	itttt	eq
 8008c70:	6819      	ldreq	r1, [r3, #0]
 8008c72:	685b      	ldreq	r3, [r3, #4]
 8008c74:	1809      	addeq	r1, r1, r0
 8008c76:	6021      	streq	r1, [r4, #0]
 8008c78:	e7ed      	b.n	8008c56 <_free_r+0x1e>
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	b10b      	cbz	r3, 8008c84 <_free_r+0x4c>
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	d9fa      	bls.n	8008c7a <_free_r+0x42>
 8008c84:	6811      	ldr	r1, [r2, #0]
 8008c86:	1850      	adds	r0, r2, r1
 8008c88:	42a0      	cmp	r0, r4
 8008c8a:	d10b      	bne.n	8008ca4 <_free_r+0x6c>
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	4401      	add	r1, r0
 8008c90:	1850      	adds	r0, r2, r1
 8008c92:	4283      	cmp	r3, r0
 8008c94:	6011      	str	r1, [r2, #0]
 8008c96:	d1e0      	bne.n	8008c5a <_free_r+0x22>
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	6053      	str	r3, [r2, #4]
 8008c9e:	4408      	add	r0, r1
 8008ca0:	6010      	str	r0, [r2, #0]
 8008ca2:	e7da      	b.n	8008c5a <_free_r+0x22>
 8008ca4:	d902      	bls.n	8008cac <_free_r+0x74>
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	602b      	str	r3, [r5, #0]
 8008caa:	e7d6      	b.n	8008c5a <_free_r+0x22>
 8008cac:	6820      	ldr	r0, [r4, #0]
 8008cae:	1821      	adds	r1, r4, r0
 8008cb0:	428b      	cmp	r3, r1
 8008cb2:	bf04      	itt	eq
 8008cb4:	6819      	ldreq	r1, [r3, #0]
 8008cb6:	685b      	ldreq	r3, [r3, #4]
 8008cb8:	6063      	str	r3, [r4, #4]
 8008cba:	bf04      	itt	eq
 8008cbc:	1809      	addeq	r1, r1, r0
 8008cbe:	6021      	streq	r1, [r4, #0]
 8008cc0:	6054      	str	r4, [r2, #4]
 8008cc2:	e7ca      	b.n	8008c5a <_free_r+0x22>
 8008cc4:	bd38      	pop	{r3, r4, r5, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20001dc4 	.word	0x20001dc4

08008ccc <sbrk_aligned>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	4e0f      	ldr	r6, [pc, #60]	@ (8008d0c <sbrk_aligned+0x40>)
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	6831      	ldr	r1, [r6, #0]
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	b911      	cbnz	r1, 8008cde <sbrk_aligned+0x12>
 8008cd8:	f000 fba6 	bl	8009428 <_sbrk_r>
 8008cdc:	6030      	str	r0, [r6, #0]
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f000 fba1 	bl	8009428 <_sbrk_r>
 8008ce6:	1c43      	adds	r3, r0, #1
 8008ce8:	d103      	bne.n	8008cf2 <sbrk_aligned+0x26>
 8008cea:	f04f 34ff 	mov.w	r4, #4294967295
 8008cee:	4620      	mov	r0, r4
 8008cf0:	bd70      	pop	{r4, r5, r6, pc}
 8008cf2:	1cc4      	adds	r4, r0, #3
 8008cf4:	f024 0403 	bic.w	r4, r4, #3
 8008cf8:	42a0      	cmp	r0, r4
 8008cfa:	d0f8      	beq.n	8008cee <sbrk_aligned+0x22>
 8008cfc:	1a21      	subs	r1, r4, r0
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 fb92 	bl	8009428 <_sbrk_r>
 8008d04:	3001      	adds	r0, #1
 8008d06:	d1f2      	bne.n	8008cee <sbrk_aligned+0x22>
 8008d08:	e7ef      	b.n	8008cea <sbrk_aligned+0x1e>
 8008d0a:	bf00      	nop
 8008d0c:	20001dc0 	.word	0x20001dc0

08008d10 <_malloc_r>:
 8008d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d14:	1ccd      	adds	r5, r1, #3
 8008d16:	f025 0503 	bic.w	r5, r5, #3
 8008d1a:	3508      	adds	r5, #8
 8008d1c:	2d0c      	cmp	r5, #12
 8008d1e:	bf38      	it	cc
 8008d20:	250c      	movcc	r5, #12
 8008d22:	2d00      	cmp	r5, #0
 8008d24:	4606      	mov	r6, r0
 8008d26:	db01      	blt.n	8008d2c <_malloc_r+0x1c>
 8008d28:	42a9      	cmp	r1, r5
 8008d2a:	d904      	bls.n	8008d36 <_malloc_r+0x26>
 8008d2c:	230c      	movs	r3, #12
 8008d2e:	6033      	str	r3, [r6, #0]
 8008d30:	2000      	movs	r0, #0
 8008d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e0c <_malloc_r+0xfc>
 8008d3a:	f000 f869 	bl	8008e10 <__malloc_lock>
 8008d3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d42:	461c      	mov	r4, r3
 8008d44:	bb44      	cbnz	r4, 8008d98 <_malloc_r+0x88>
 8008d46:	4629      	mov	r1, r5
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7ff ffbf 	bl	8008ccc <sbrk_aligned>
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	4604      	mov	r4, r0
 8008d52:	d158      	bne.n	8008e06 <_malloc_r+0xf6>
 8008d54:	f8d8 4000 	ldr.w	r4, [r8]
 8008d58:	4627      	mov	r7, r4
 8008d5a:	2f00      	cmp	r7, #0
 8008d5c:	d143      	bne.n	8008de6 <_malloc_r+0xd6>
 8008d5e:	2c00      	cmp	r4, #0
 8008d60:	d04b      	beq.n	8008dfa <_malloc_r+0xea>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	4639      	mov	r1, r7
 8008d66:	4630      	mov	r0, r6
 8008d68:	eb04 0903 	add.w	r9, r4, r3
 8008d6c:	f000 fb5c 	bl	8009428 <_sbrk_r>
 8008d70:	4581      	cmp	r9, r0
 8008d72:	d142      	bne.n	8008dfa <_malloc_r+0xea>
 8008d74:	6821      	ldr	r1, [r4, #0]
 8008d76:	1a6d      	subs	r5, r5, r1
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f7ff ffa6 	bl	8008ccc <sbrk_aligned>
 8008d80:	3001      	adds	r0, #1
 8008d82:	d03a      	beq.n	8008dfa <_malloc_r+0xea>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	442b      	add	r3, r5
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	bb62      	cbnz	r2, 8008dec <_malloc_r+0xdc>
 8008d92:	f8c8 7000 	str.w	r7, [r8]
 8008d96:	e00f      	b.n	8008db8 <_malloc_r+0xa8>
 8008d98:	6822      	ldr	r2, [r4, #0]
 8008d9a:	1b52      	subs	r2, r2, r5
 8008d9c:	d420      	bmi.n	8008de0 <_malloc_r+0xd0>
 8008d9e:	2a0b      	cmp	r2, #11
 8008da0:	d917      	bls.n	8008dd2 <_malloc_r+0xc2>
 8008da2:	1961      	adds	r1, r4, r5
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	6025      	str	r5, [r4, #0]
 8008da8:	bf18      	it	ne
 8008daa:	6059      	strne	r1, [r3, #4]
 8008dac:	6863      	ldr	r3, [r4, #4]
 8008dae:	bf08      	it	eq
 8008db0:	f8c8 1000 	streq.w	r1, [r8]
 8008db4:	5162      	str	r2, [r4, r5]
 8008db6:	604b      	str	r3, [r1, #4]
 8008db8:	4630      	mov	r0, r6
 8008dba:	f000 f82f 	bl	8008e1c <__malloc_unlock>
 8008dbe:	f104 000b 	add.w	r0, r4, #11
 8008dc2:	1d23      	adds	r3, r4, #4
 8008dc4:	f020 0007 	bic.w	r0, r0, #7
 8008dc8:	1ac2      	subs	r2, r0, r3
 8008dca:	bf1c      	itt	ne
 8008dcc:	1a1b      	subne	r3, r3, r0
 8008dce:	50a3      	strne	r3, [r4, r2]
 8008dd0:	e7af      	b.n	8008d32 <_malloc_r+0x22>
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	bf0c      	ite	eq
 8008dd8:	f8c8 2000 	streq.w	r2, [r8]
 8008ddc:	605a      	strne	r2, [r3, #4]
 8008dde:	e7eb      	b.n	8008db8 <_malloc_r+0xa8>
 8008de0:	4623      	mov	r3, r4
 8008de2:	6864      	ldr	r4, [r4, #4]
 8008de4:	e7ae      	b.n	8008d44 <_malloc_r+0x34>
 8008de6:	463c      	mov	r4, r7
 8008de8:	687f      	ldr	r7, [r7, #4]
 8008dea:	e7b6      	b.n	8008d5a <_malloc_r+0x4a>
 8008dec:	461a      	mov	r2, r3
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	42a3      	cmp	r3, r4
 8008df2:	d1fb      	bne.n	8008dec <_malloc_r+0xdc>
 8008df4:	2300      	movs	r3, #0
 8008df6:	6053      	str	r3, [r2, #4]
 8008df8:	e7de      	b.n	8008db8 <_malloc_r+0xa8>
 8008dfa:	230c      	movs	r3, #12
 8008dfc:	6033      	str	r3, [r6, #0]
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f000 f80c 	bl	8008e1c <__malloc_unlock>
 8008e04:	e794      	b.n	8008d30 <_malloc_r+0x20>
 8008e06:	6005      	str	r5, [r0, #0]
 8008e08:	e7d6      	b.n	8008db8 <_malloc_r+0xa8>
 8008e0a:	bf00      	nop
 8008e0c:	20001dc4 	.word	0x20001dc4

08008e10 <__malloc_lock>:
 8008e10:	4801      	ldr	r0, [pc, #4]	@ (8008e18 <__malloc_lock+0x8>)
 8008e12:	f7ff bf0f 	b.w	8008c34 <__retarget_lock_acquire_recursive>
 8008e16:	bf00      	nop
 8008e18:	20001dbc 	.word	0x20001dbc

08008e1c <__malloc_unlock>:
 8008e1c:	4801      	ldr	r0, [pc, #4]	@ (8008e24 <__malloc_unlock+0x8>)
 8008e1e:	f7ff bf0a 	b.w	8008c36 <__retarget_lock_release_recursive>
 8008e22:	bf00      	nop
 8008e24:	20001dbc 	.word	0x20001dbc

08008e28 <__ssputs_r>:
 8008e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e2c:	688e      	ldr	r6, [r1, #8]
 8008e2e:	461f      	mov	r7, r3
 8008e30:	42be      	cmp	r6, r7
 8008e32:	680b      	ldr	r3, [r1, #0]
 8008e34:	4682      	mov	sl, r0
 8008e36:	460c      	mov	r4, r1
 8008e38:	4690      	mov	r8, r2
 8008e3a:	d82d      	bhi.n	8008e98 <__ssputs_r+0x70>
 8008e3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e44:	d026      	beq.n	8008e94 <__ssputs_r+0x6c>
 8008e46:	6965      	ldr	r5, [r4, #20]
 8008e48:	6909      	ldr	r1, [r1, #16]
 8008e4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e4e:	eba3 0901 	sub.w	r9, r3, r1
 8008e52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e56:	1c7b      	adds	r3, r7, #1
 8008e58:	444b      	add	r3, r9
 8008e5a:	106d      	asrs	r5, r5, #1
 8008e5c:	429d      	cmp	r5, r3
 8008e5e:	bf38      	it	cc
 8008e60:	461d      	movcc	r5, r3
 8008e62:	0553      	lsls	r3, r2, #21
 8008e64:	d527      	bpl.n	8008eb6 <__ssputs_r+0x8e>
 8008e66:	4629      	mov	r1, r5
 8008e68:	f7ff ff52 	bl	8008d10 <_malloc_r>
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	b360      	cbz	r0, 8008eca <__ssputs_r+0xa2>
 8008e70:	6921      	ldr	r1, [r4, #16]
 8008e72:	464a      	mov	r2, r9
 8008e74:	f000 fae8 	bl	8009448 <memcpy>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	6126      	str	r6, [r4, #16]
 8008e86:	6165      	str	r5, [r4, #20]
 8008e88:	444e      	add	r6, r9
 8008e8a:	eba5 0509 	sub.w	r5, r5, r9
 8008e8e:	6026      	str	r6, [r4, #0]
 8008e90:	60a5      	str	r5, [r4, #8]
 8008e92:	463e      	mov	r6, r7
 8008e94:	42be      	cmp	r6, r7
 8008e96:	d900      	bls.n	8008e9a <__ssputs_r+0x72>
 8008e98:	463e      	mov	r6, r7
 8008e9a:	6820      	ldr	r0, [r4, #0]
 8008e9c:	4632      	mov	r2, r6
 8008e9e:	4641      	mov	r1, r8
 8008ea0:	f000 faa8 	bl	80093f4 <memmove>
 8008ea4:	68a3      	ldr	r3, [r4, #8]
 8008ea6:	1b9b      	subs	r3, r3, r6
 8008ea8:	60a3      	str	r3, [r4, #8]
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	4433      	add	r3, r6
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb6:	462a      	mov	r2, r5
 8008eb8:	f000 fad4 	bl	8009464 <_realloc_r>
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d1e0      	bne.n	8008e84 <__ssputs_r+0x5c>
 8008ec2:	6921      	ldr	r1, [r4, #16]
 8008ec4:	4650      	mov	r0, sl
 8008ec6:	f7ff feb7 	bl	8008c38 <_free_r>
 8008eca:	230c      	movs	r3, #12
 8008ecc:	f8ca 3000 	str.w	r3, [sl]
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	e7e9      	b.n	8008eb2 <__ssputs_r+0x8a>
	...

08008ee0 <_svfiprintf_r>:
 8008ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	4698      	mov	r8, r3
 8008ee6:	898b      	ldrh	r3, [r1, #12]
 8008ee8:	061b      	lsls	r3, r3, #24
 8008eea:	b09d      	sub	sp, #116	@ 0x74
 8008eec:	4607      	mov	r7, r0
 8008eee:	460d      	mov	r5, r1
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	d510      	bpl.n	8008f16 <_svfiprintf_r+0x36>
 8008ef4:	690b      	ldr	r3, [r1, #16]
 8008ef6:	b973      	cbnz	r3, 8008f16 <_svfiprintf_r+0x36>
 8008ef8:	2140      	movs	r1, #64	@ 0x40
 8008efa:	f7ff ff09 	bl	8008d10 <_malloc_r>
 8008efe:	6028      	str	r0, [r5, #0]
 8008f00:	6128      	str	r0, [r5, #16]
 8008f02:	b930      	cbnz	r0, 8008f12 <_svfiprintf_r+0x32>
 8008f04:	230c      	movs	r3, #12
 8008f06:	603b      	str	r3, [r7, #0]
 8008f08:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0c:	b01d      	add	sp, #116	@ 0x74
 8008f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f12:	2340      	movs	r3, #64	@ 0x40
 8008f14:	616b      	str	r3, [r5, #20]
 8008f16:	2300      	movs	r3, #0
 8008f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f1a:	2320      	movs	r3, #32
 8008f1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f24:	2330      	movs	r3, #48	@ 0x30
 8008f26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80090c4 <_svfiprintf_r+0x1e4>
 8008f2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f2e:	f04f 0901 	mov.w	r9, #1
 8008f32:	4623      	mov	r3, r4
 8008f34:	469a      	mov	sl, r3
 8008f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f3a:	b10a      	cbz	r2, 8008f40 <_svfiprintf_r+0x60>
 8008f3c:	2a25      	cmp	r2, #37	@ 0x25
 8008f3e:	d1f9      	bne.n	8008f34 <_svfiprintf_r+0x54>
 8008f40:	ebba 0b04 	subs.w	fp, sl, r4
 8008f44:	d00b      	beq.n	8008f5e <_svfiprintf_r+0x7e>
 8008f46:	465b      	mov	r3, fp
 8008f48:	4622      	mov	r2, r4
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f7ff ff6b 	bl	8008e28 <__ssputs_r>
 8008f52:	3001      	adds	r0, #1
 8008f54:	f000 80a7 	beq.w	80090a6 <_svfiprintf_r+0x1c6>
 8008f58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f5a:	445a      	add	r2, fp
 8008f5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 809f 	beq.w	80090a6 <_svfiprintf_r+0x1c6>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f72:	f10a 0a01 	add.w	sl, sl, #1
 8008f76:	9304      	str	r3, [sp, #16]
 8008f78:	9307      	str	r3, [sp, #28]
 8008f7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f80:	4654      	mov	r4, sl
 8008f82:	2205      	movs	r2, #5
 8008f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f88:	484e      	ldr	r0, [pc, #312]	@ (80090c4 <_svfiprintf_r+0x1e4>)
 8008f8a:	f7f7 f949 	bl	8000220 <memchr>
 8008f8e:	9a04      	ldr	r2, [sp, #16]
 8008f90:	b9d8      	cbnz	r0, 8008fca <_svfiprintf_r+0xea>
 8008f92:	06d0      	lsls	r0, r2, #27
 8008f94:	bf44      	itt	mi
 8008f96:	2320      	movmi	r3, #32
 8008f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f9c:	0711      	lsls	r1, r2, #28
 8008f9e:	bf44      	itt	mi
 8008fa0:	232b      	movmi	r3, #43	@ 0x2b
 8008fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8008faa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fac:	d015      	beq.n	8008fda <_svfiprintf_r+0xfa>
 8008fae:	9a07      	ldr	r2, [sp, #28]
 8008fb0:	4654      	mov	r4, sl
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	f04f 0c0a 	mov.w	ip, #10
 8008fb8:	4621      	mov	r1, r4
 8008fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fbe:	3b30      	subs	r3, #48	@ 0x30
 8008fc0:	2b09      	cmp	r3, #9
 8008fc2:	d94b      	bls.n	800905c <_svfiprintf_r+0x17c>
 8008fc4:	b1b0      	cbz	r0, 8008ff4 <_svfiprintf_r+0x114>
 8008fc6:	9207      	str	r2, [sp, #28]
 8008fc8:	e014      	b.n	8008ff4 <_svfiprintf_r+0x114>
 8008fca:	eba0 0308 	sub.w	r3, r0, r8
 8008fce:	fa09 f303 	lsl.w	r3, r9, r3
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	9304      	str	r3, [sp, #16]
 8008fd6:	46a2      	mov	sl, r4
 8008fd8:	e7d2      	b.n	8008f80 <_svfiprintf_r+0xa0>
 8008fda:	9b03      	ldr	r3, [sp, #12]
 8008fdc:	1d19      	adds	r1, r3, #4
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	9103      	str	r1, [sp, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bfbb      	ittet	lt
 8008fe6:	425b      	neglt	r3, r3
 8008fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8008fec:	9307      	strge	r3, [sp, #28]
 8008fee:	9307      	strlt	r3, [sp, #28]
 8008ff0:	bfb8      	it	lt
 8008ff2:	9204      	strlt	r2, [sp, #16]
 8008ff4:	7823      	ldrb	r3, [r4, #0]
 8008ff6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ff8:	d10a      	bne.n	8009010 <_svfiprintf_r+0x130>
 8008ffa:	7863      	ldrb	r3, [r4, #1]
 8008ffc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ffe:	d132      	bne.n	8009066 <_svfiprintf_r+0x186>
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	1d1a      	adds	r2, r3, #4
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	9203      	str	r2, [sp, #12]
 8009008:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800900c:	3402      	adds	r4, #2
 800900e:	9305      	str	r3, [sp, #20]
 8009010:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80090d4 <_svfiprintf_r+0x1f4>
 8009014:	7821      	ldrb	r1, [r4, #0]
 8009016:	2203      	movs	r2, #3
 8009018:	4650      	mov	r0, sl
 800901a:	f7f7 f901 	bl	8000220 <memchr>
 800901e:	b138      	cbz	r0, 8009030 <_svfiprintf_r+0x150>
 8009020:	9b04      	ldr	r3, [sp, #16]
 8009022:	eba0 000a 	sub.w	r0, r0, sl
 8009026:	2240      	movs	r2, #64	@ 0x40
 8009028:	4082      	lsls	r2, r0
 800902a:	4313      	orrs	r3, r2
 800902c:	3401      	adds	r4, #1
 800902e:	9304      	str	r3, [sp, #16]
 8009030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009034:	4824      	ldr	r0, [pc, #144]	@ (80090c8 <_svfiprintf_r+0x1e8>)
 8009036:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800903a:	2206      	movs	r2, #6
 800903c:	f7f7 f8f0 	bl	8000220 <memchr>
 8009040:	2800      	cmp	r0, #0
 8009042:	d036      	beq.n	80090b2 <_svfiprintf_r+0x1d2>
 8009044:	4b21      	ldr	r3, [pc, #132]	@ (80090cc <_svfiprintf_r+0x1ec>)
 8009046:	bb1b      	cbnz	r3, 8009090 <_svfiprintf_r+0x1b0>
 8009048:	9b03      	ldr	r3, [sp, #12]
 800904a:	3307      	adds	r3, #7
 800904c:	f023 0307 	bic.w	r3, r3, #7
 8009050:	3308      	adds	r3, #8
 8009052:	9303      	str	r3, [sp, #12]
 8009054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009056:	4433      	add	r3, r6
 8009058:	9309      	str	r3, [sp, #36]	@ 0x24
 800905a:	e76a      	b.n	8008f32 <_svfiprintf_r+0x52>
 800905c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009060:	460c      	mov	r4, r1
 8009062:	2001      	movs	r0, #1
 8009064:	e7a8      	b.n	8008fb8 <_svfiprintf_r+0xd8>
 8009066:	2300      	movs	r3, #0
 8009068:	3401      	adds	r4, #1
 800906a:	9305      	str	r3, [sp, #20]
 800906c:	4619      	mov	r1, r3
 800906e:	f04f 0c0a 	mov.w	ip, #10
 8009072:	4620      	mov	r0, r4
 8009074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009078:	3a30      	subs	r2, #48	@ 0x30
 800907a:	2a09      	cmp	r2, #9
 800907c:	d903      	bls.n	8009086 <_svfiprintf_r+0x1a6>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0c6      	beq.n	8009010 <_svfiprintf_r+0x130>
 8009082:	9105      	str	r1, [sp, #20]
 8009084:	e7c4      	b.n	8009010 <_svfiprintf_r+0x130>
 8009086:	fb0c 2101 	mla	r1, ip, r1, r2
 800908a:	4604      	mov	r4, r0
 800908c:	2301      	movs	r3, #1
 800908e:	e7f0      	b.n	8009072 <_svfiprintf_r+0x192>
 8009090:	ab03      	add	r3, sp, #12
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	462a      	mov	r2, r5
 8009096:	4b0e      	ldr	r3, [pc, #56]	@ (80090d0 <_svfiprintf_r+0x1f0>)
 8009098:	a904      	add	r1, sp, #16
 800909a:	4638      	mov	r0, r7
 800909c:	f3af 8000 	nop.w
 80090a0:	1c42      	adds	r2, r0, #1
 80090a2:	4606      	mov	r6, r0
 80090a4:	d1d6      	bne.n	8009054 <_svfiprintf_r+0x174>
 80090a6:	89ab      	ldrh	r3, [r5, #12]
 80090a8:	065b      	lsls	r3, r3, #25
 80090aa:	f53f af2d 	bmi.w	8008f08 <_svfiprintf_r+0x28>
 80090ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090b0:	e72c      	b.n	8008f0c <_svfiprintf_r+0x2c>
 80090b2:	ab03      	add	r3, sp, #12
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	462a      	mov	r2, r5
 80090b8:	4b05      	ldr	r3, [pc, #20]	@ (80090d0 <_svfiprintf_r+0x1f0>)
 80090ba:	a904      	add	r1, sp, #16
 80090bc:	4638      	mov	r0, r7
 80090be:	f000 f879 	bl	80091b4 <_printf_i>
 80090c2:	e7ed      	b.n	80090a0 <_svfiprintf_r+0x1c0>
 80090c4:	0800971c 	.word	0x0800971c
 80090c8:	08009726 	.word	0x08009726
 80090cc:	00000000 	.word	0x00000000
 80090d0:	08008e29 	.word	0x08008e29
 80090d4:	08009722 	.word	0x08009722

080090d8 <_printf_common>:
 80090d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090dc:	4616      	mov	r6, r2
 80090de:	4698      	mov	r8, r3
 80090e0:	688a      	ldr	r2, [r1, #8]
 80090e2:	690b      	ldr	r3, [r1, #16]
 80090e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090e8:	4293      	cmp	r3, r2
 80090ea:	bfb8      	it	lt
 80090ec:	4613      	movlt	r3, r2
 80090ee:	6033      	str	r3, [r6, #0]
 80090f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090f4:	4607      	mov	r7, r0
 80090f6:	460c      	mov	r4, r1
 80090f8:	b10a      	cbz	r2, 80090fe <_printf_common+0x26>
 80090fa:	3301      	adds	r3, #1
 80090fc:	6033      	str	r3, [r6, #0]
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	0699      	lsls	r1, r3, #26
 8009102:	bf42      	ittt	mi
 8009104:	6833      	ldrmi	r3, [r6, #0]
 8009106:	3302      	addmi	r3, #2
 8009108:	6033      	strmi	r3, [r6, #0]
 800910a:	6825      	ldr	r5, [r4, #0]
 800910c:	f015 0506 	ands.w	r5, r5, #6
 8009110:	d106      	bne.n	8009120 <_printf_common+0x48>
 8009112:	f104 0a19 	add.w	sl, r4, #25
 8009116:	68e3      	ldr	r3, [r4, #12]
 8009118:	6832      	ldr	r2, [r6, #0]
 800911a:	1a9b      	subs	r3, r3, r2
 800911c:	42ab      	cmp	r3, r5
 800911e:	dc26      	bgt.n	800916e <_printf_common+0x96>
 8009120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009124:	6822      	ldr	r2, [r4, #0]
 8009126:	3b00      	subs	r3, #0
 8009128:	bf18      	it	ne
 800912a:	2301      	movne	r3, #1
 800912c:	0692      	lsls	r2, r2, #26
 800912e:	d42b      	bmi.n	8009188 <_printf_common+0xb0>
 8009130:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009134:	4641      	mov	r1, r8
 8009136:	4638      	mov	r0, r7
 8009138:	47c8      	blx	r9
 800913a:	3001      	adds	r0, #1
 800913c:	d01e      	beq.n	800917c <_printf_common+0xa4>
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	6922      	ldr	r2, [r4, #16]
 8009142:	f003 0306 	and.w	r3, r3, #6
 8009146:	2b04      	cmp	r3, #4
 8009148:	bf02      	ittt	eq
 800914a:	68e5      	ldreq	r5, [r4, #12]
 800914c:	6833      	ldreq	r3, [r6, #0]
 800914e:	1aed      	subeq	r5, r5, r3
 8009150:	68a3      	ldr	r3, [r4, #8]
 8009152:	bf0c      	ite	eq
 8009154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009158:	2500      	movne	r5, #0
 800915a:	4293      	cmp	r3, r2
 800915c:	bfc4      	itt	gt
 800915e:	1a9b      	subgt	r3, r3, r2
 8009160:	18ed      	addgt	r5, r5, r3
 8009162:	2600      	movs	r6, #0
 8009164:	341a      	adds	r4, #26
 8009166:	42b5      	cmp	r5, r6
 8009168:	d11a      	bne.n	80091a0 <_printf_common+0xc8>
 800916a:	2000      	movs	r0, #0
 800916c:	e008      	b.n	8009180 <_printf_common+0xa8>
 800916e:	2301      	movs	r3, #1
 8009170:	4652      	mov	r2, sl
 8009172:	4641      	mov	r1, r8
 8009174:	4638      	mov	r0, r7
 8009176:	47c8      	blx	r9
 8009178:	3001      	adds	r0, #1
 800917a:	d103      	bne.n	8009184 <_printf_common+0xac>
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009184:	3501      	adds	r5, #1
 8009186:	e7c6      	b.n	8009116 <_printf_common+0x3e>
 8009188:	18e1      	adds	r1, r4, r3
 800918a:	1c5a      	adds	r2, r3, #1
 800918c:	2030      	movs	r0, #48	@ 0x30
 800918e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009192:	4422      	add	r2, r4
 8009194:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009198:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800919c:	3302      	adds	r3, #2
 800919e:	e7c7      	b.n	8009130 <_printf_common+0x58>
 80091a0:	2301      	movs	r3, #1
 80091a2:	4622      	mov	r2, r4
 80091a4:	4641      	mov	r1, r8
 80091a6:	4638      	mov	r0, r7
 80091a8:	47c8      	blx	r9
 80091aa:	3001      	adds	r0, #1
 80091ac:	d0e6      	beq.n	800917c <_printf_common+0xa4>
 80091ae:	3601      	adds	r6, #1
 80091b0:	e7d9      	b.n	8009166 <_printf_common+0x8e>
	...

080091b4 <_printf_i>:
 80091b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091b8:	7e0f      	ldrb	r7, [r1, #24]
 80091ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091bc:	2f78      	cmp	r7, #120	@ 0x78
 80091be:	4691      	mov	r9, r2
 80091c0:	4680      	mov	r8, r0
 80091c2:	460c      	mov	r4, r1
 80091c4:	469a      	mov	sl, r3
 80091c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80091ca:	d807      	bhi.n	80091dc <_printf_i+0x28>
 80091cc:	2f62      	cmp	r7, #98	@ 0x62
 80091ce:	d80a      	bhi.n	80091e6 <_printf_i+0x32>
 80091d0:	2f00      	cmp	r7, #0
 80091d2:	f000 80d2 	beq.w	800937a <_printf_i+0x1c6>
 80091d6:	2f58      	cmp	r7, #88	@ 0x58
 80091d8:	f000 80b9 	beq.w	800934e <_printf_i+0x19a>
 80091dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091e4:	e03a      	b.n	800925c <_printf_i+0xa8>
 80091e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091ea:	2b15      	cmp	r3, #21
 80091ec:	d8f6      	bhi.n	80091dc <_printf_i+0x28>
 80091ee:	a101      	add	r1, pc, #4	@ (adr r1, 80091f4 <_printf_i+0x40>)
 80091f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091f4:	0800924d 	.word	0x0800924d
 80091f8:	08009261 	.word	0x08009261
 80091fc:	080091dd 	.word	0x080091dd
 8009200:	080091dd 	.word	0x080091dd
 8009204:	080091dd 	.word	0x080091dd
 8009208:	080091dd 	.word	0x080091dd
 800920c:	08009261 	.word	0x08009261
 8009210:	080091dd 	.word	0x080091dd
 8009214:	080091dd 	.word	0x080091dd
 8009218:	080091dd 	.word	0x080091dd
 800921c:	080091dd 	.word	0x080091dd
 8009220:	08009361 	.word	0x08009361
 8009224:	0800928b 	.word	0x0800928b
 8009228:	0800931b 	.word	0x0800931b
 800922c:	080091dd 	.word	0x080091dd
 8009230:	080091dd 	.word	0x080091dd
 8009234:	08009383 	.word	0x08009383
 8009238:	080091dd 	.word	0x080091dd
 800923c:	0800928b 	.word	0x0800928b
 8009240:	080091dd 	.word	0x080091dd
 8009244:	080091dd 	.word	0x080091dd
 8009248:	08009323 	.word	0x08009323
 800924c:	6833      	ldr	r3, [r6, #0]
 800924e:	1d1a      	adds	r2, r3, #4
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6032      	str	r2, [r6, #0]
 8009254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009258:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800925c:	2301      	movs	r3, #1
 800925e:	e09d      	b.n	800939c <_printf_i+0x1e8>
 8009260:	6833      	ldr	r3, [r6, #0]
 8009262:	6820      	ldr	r0, [r4, #0]
 8009264:	1d19      	adds	r1, r3, #4
 8009266:	6031      	str	r1, [r6, #0]
 8009268:	0606      	lsls	r6, r0, #24
 800926a:	d501      	bpl.n	8009270 <_printf_i+0xbc>
 800926c:	681d      	ldr	r5, [r3, #0]
 800926e:	e003      	b.n	8009278 <_printf_i+0xc4>
 8009270:	0645      	lsls	r5, r0, #25
 8009272:	d5fb      	bpl.n	800926c <_printf_i+0xb8>
 8009274:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009278:	2d00      	cmp	r5, #0
 800927a:	da03      	bge.n	8009284 <_printf_i+0xd0>
 800927c:	232d      	movs	r3, #45	@ 0x2d
 800927e:	426d      	negs	r5, r5
 8009280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009284:	4859      	ldr	r0, [pc, #356]	@ (80093ec <_printf_i+0x238>)
 8009286:	230a      	movs	r3, #10
 8009288:	e011      	b.n	80092ae <_printf_i+0xfa>
 800928a:	6821      	ldr	r1, [r4, #0]
 800928c:	6833      	ldr	r3, [r6, #0]
 800928e:	0608      	lsls	r0, r1, #24
 8009290:	f853 5b04 	ldr.w	r5, [r3], #4
 8009294:	d402      	bmi.n	800929c <_printf_i+0xe8>
 8009296:	0649      	lsls	r1, r1, #25
 8009298:	bf48      	it	mi
 800929a:	b2ad      	uxthmi	r5, r5
 800929c:	2f6f      	cmp	r7, #111	@ 0x6f
 800929e:	4853      	ldr	r0, [pc, #332]	@ (80093ec <_printf_i+0x238>)
 80092a0:	6033      	str	r3, [r6, #0]
 80092a2:	bf14      	ite	ne
 80092a4:	230a      	movne	r3, #10
 80092a6:	2308      	moveq	r3, #8
 80092a8:	2100      	movs	r1, #0
 80092aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092ae:	6866      	ldr	r6, [r4, #4]
 80092b0:	60a6      	str	r6, [r4, #8]
 80092b2:	2e00      	cmp	r6, #0
 80092b4:	bfa2      	ittt	ge
 80092b6:	6821      	ldrge	r1, [r4, #0]
 80092b8:	f021 0104 	bicge.w	r1, r1, #4
 80092bc:	6021      	strge	r1, [r4, #0]
 80092be:	b90d      	cbnz	r5, 80092c4 <_printf_i+0x110>
 80092c0:	2e00      	cmp	r6, #0
 80092c2:	d04b      	beq.n	800935c <_printf_i+0x1a8>
 80092c4:	4616      	mov	r6, r2
 80092c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80092ca:	fb03 5711 	mls	r7, r3, r1, r5
 80092ce:	5dc7      	ldrb	r7, [r0, r7]
 80092d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092d4:	462f      	mov	r7, r5
 80092d6:	42bb      	cmp	r3, r7
 80092d8:	460d      	mov	r5, r1
 80092da:	d9f4      	bls.n	80092c6 <_printf_i+0x112>
 80092dc:	2b08      	cmp	r3, #8
 80092de:	d10b      	bne.n	80092f8 <_printf_i+0x144>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	07df      	lsls	r7, r3, #31
 80092e4:	d508      	bpl.n	80092f8 <_printf_i+0x144>
 80092e6:	6923      	ldr	r3, [r4, #16]
 80092e8:	6861      	ldr	r1, [r4, #4]
 80092ea:	4299      	cmp	r1, r3
 80092ec:	bfde      	ittt	le
 80092ee:	2330      	movle	r3, #48	@ 0x30
 80092f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092f8:	1b92      	subs	r2, r2, r6
 80092fa:	6122      	str	r2, [r4, #16]
 80092fc:	f8cd a000 	str.w	sl, [sp]
 8009300:	464b      	mov	r3, r9
 8009302:	aa03      	add	r2, sp, #12
 8009304:	4621      	mov	r1, r4
 8009306:	4640      	mov	r0, r8
 8009308:	f7ff fee6 	bl	80090d8 <_printf_common>
 800930c:	3001      	adds	r0, #1
 800930e:	d14a      	bne.n	80093a6 <_printf_i+0x1f2>
 8009310:	f04f 30ff 	mov.w	r0, #4294967295
 8009314:	b004      	add	sp, #16
 8009316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	f043 0320 	orr.w	r3, r3, #32
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	4833      	ldr	r0, [pc, #204]	@ (80093f0 <_printf_i+0x23c>)
 8009324:	2778      	movs	r7, #120	@ 0x78
 8009326:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	6831      	ldr	r1, [r6, #0]
 800932e:	061f      	lsls	r7, r3, #24
 8009330:	f851 5b04 	ldr.w	r5, [r1], #4
 8009334:	d402      	bmi.n	800933c <_printf_i+0x188>
 8009336:	065f      	lsls	r7, r3, #25
 8009338:	bf48      	it	mi
 800933a:	b2ad      	uxthmi	r5, r5
 800933c:	6031      	str	r1, [r6, #0]
 800933e:	07d9      	lsls	r1, r3, #31
 8009340:	bf44      	itt	mi
 8009342:	f043 0320 	orrmi.w	r3, r3, #32
 8009346:	6023      	strmi	r3, [r4, #0]
 8009348:	b11d      	cbz	r5, 8009352 <_printf_i+0x19e>
 800934a:	2310      	movs	r3, #16
 800934c:	e7ac      	b.n	80092a8 <_printf_i+0xf4>
 800934e:	4827      	ldr	r0, [pc, #156]	@ (80093ec <_printf_i+0x238>)
 8009350:	e7e9      	b.n	8009326 <_printf_i+0x172>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	f023 0320 	bic.w	r3, r3, #32
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	e7f6      	b.n	800934a <_printf_i+0x196>
 800935c:	4616      	mov	r6, r2
 800935e:	e7bd      	b.n	80092dc <_printf_i+0x128>
 8009360:	6833      	ldr	r3, [r6, #0]
 8009362:	6825      	ldr	r5, [r4, #0]
 8009364:	6961      	ldr	r1, [r4, #20]
 8009366:	1d18      	adds	r0, r3, #4
 8009368:	6030      	str	r0, [r6, #0]
 800936a:	062e      	lsls	r6, r5, #24
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	d501      	bpl.n	8009374 <_printf_i+0x1c0>
 8009370:	6019      	str	r1, [r3, #0]
 8009372:	e002      	b.n	800937a <_printf_i+0x1c6>
 8009374:	0668      	lsls	r0, r5, #25
 8009376:	d5fb      	bpl.n	8009370 <_printf_i+0x1bc>
 8009378:	8019      	strh	r1, [r3, #0]
 800937a:	2300      	movs	r3, #0
 800937c:	6123      	str	r3, [r4, #16]
 800937e:	4616      	mov	r6, r2
 8009380:	e7bc      	b.n	80092fc <_printf_i+0x148>
 8009382:	6833      	ldr	r3, [r6, #0]
 8009384:	1d1a      	adds	r2, r3, #4
 8009386:	6032      	str	r2, [r6, #0]
 8009388:	681e      	ldr	r6, [r3, #0]
 800938a:	6862      	ldr	r2, [r4, #4]
 800938c:	2100      	movs	r1, #0
 800938e:	4630      	mov	r0, r6
 8009390:	f7f6 ff46 	bl	8000220 <memchr>
 8009394:	b108      	cbz	r0, 800939a <_printf_i+0x1e6>
 8009396:	1b80      	subs	r0, r0, r6
 8009398:	6060      	str	r0, [r4, #4]
 800939a:	6863      	ldr	r3, [r4, #4]
 800939c:	6123      	str	r3, [r4, #16]
 800939e:	2300      	movs	r3, #0
 80093a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093a4:	e7aa      	b.n	80092fc <_printf_i+0x148>
 80093a6:	6923      	ldr	r3, [r4, #16]
 80093a8:	4632      	mov	r2, r6
 80093aa:	4649      	mov	r1, r9
 80093ac:	4640      	mov	r0, r8
 80093ae:	47d0      	blx	sl
 80093b0:	3001      	adds	r0, #1
 80093b2:	d0ad      	beq.n	8009310 <_printf_i+0x15c>
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	079b      	lsls	r3, r3, #30
 80093b8:	d413      	bmi.n	80093e2 <_printf_i+0x22e>
 80093ba:	68e0      	ldr	r0, [r4, #12]
 80093bc:	9b03      	ldr	r3, [sp, #12]
 80093be:	4298      	cmp	r0, r3
 80093c0:	bfb8      	it	lt
 80093c2:	4618      	movlt	r0, r3
 80093c4:	e7a6      	b.n	8009314 <_printf_i+0x160>
 80093c6:	2301      	movs	r3, #1
 80093c8:	4632      	mov	r2, r6
 80093ca:	4649      	mov	r1, r9
 80093cc:	4640      	mov	r0, r8
 80093ce:	47d0      	blx	sl
 80093d0:	3001      	adds	r0, #1
 80093d2:	d09d      	beq.n	8009310 <_printf_i+0x15c>
 80093d4:	3501      	adds	r5, #1
 80093d6:	68e3      	ldr	r3, [r4, #12]
 80093d8:	9903      	ldr	r1, [sp, #12]
 80093da:	1a5b      	subs	r3, r3, r1
 80093dc:	42ab      	cmp	r3, r5
 80093de:	dcf2      	bgt.n	80093c6 <_printf_i+0x212>
 80093e0:	e7eb      	b.n	80093ba <_printf_i+0x206>
 80093e2:	2500      	movs	r5, #0
 80093e4:	f104 0619 	add.w	r6, r4, #25
 80093e8:	e7f5      	b.n	80093d6 <_printf_i+0x222>
 80093ea:	bf00      	nop
 80093ec:	0800972d 	.word	0x0800972d
 80093f0:	0800973e 	.word	0x0800973e

080093f4 <memmove>:
 80093f4:	4288      	cmp	r0, r1
 80093f6:	b510      	push	{r4, lr}
 80093f8:	eb01 0402 	add.w	r4, r1, r2
 80093fc:	d902      	bls.n	8009404 <memmove+0x10>
 80093fe:	4284      	cmp	r4, r0
 8009400:	4623      	mov	r3, r4
 8009402:	d807      	bhi.n	8009414 <memmove+0x20>
 8009404:	1e43      	subs	r3, r0, #1
 8009406:	42a1      	cmp	r1, r4
 8009408:	d008      	beq.n	800941c <memmove+0x28>
 800940a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800940e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009412:	e7f8      	b.n	8009406 <memmove+0x12>
 8009414:	4402      	add	r2, r0
 8009416:	4601      	mov	r1, r0
 8009418:	428a      	cmp	r2, r1
 800941a:	d100      	bne.n	800941e <memmove+0x2a>
 800941c:	bd10      	pop	{r4, pc}
 800941e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009426:	e7f7      	b.n	8009418 <memmove+0x24>

08009428 <_sbrk_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4d06      	ldr	r5, [pc, #24]	@ (8009444 <_sbrk_r+0x1c>)
 800942c:	2300      	movs	r3, #0
 800942e:	4604      	mov	r4, r0
 8009430:	4608      	mov	r0, r1
 8009432:	602b      	str	r3, [r5, #0]
 8009434:	f7f7 fa80 	bl	8000938 <_sbrk>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d102      	bne.n	8009442 <_sbrk_r+0x1a>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	b103      	cbz	r3, 8009442 <_sbrk_r+0x1a>
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	20001db8 	.word	0x20001db8

08009448 <memcpy>:
 8009448:	440a      	add	r2, r1
 800944a:	4291      	cmp	r1, r2
 800944c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009450:	d100      	bne.n	8009454 <memcpy+0xc>
 8009452:	4770      	bx	lr
 8009454:	b510      	push	{r4, lr}
 8009456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800945a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800945e:	4291      	cmp	r1, r2
 8009460:	d1f9      	bne.n	8009456 <memcpy+0xe>
 8009462:	bd10      	pop	{r4, pc}

08009464 <_realloc_r>:
 8009464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009468:	4680      	mov	r8, r0
 800946a:	4615      	mov	r5, r2
 800946c:	460c      	mov	r4, r1
 800946e:	b921      	cbnz	r1, 800947a <_realloc_r+0x16>
 8009470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009474:	4611      	mov	r1, r2
 8009476:	f7ff bc4b 	b.w	8008d10 <_malloc_r>
 800947a:	b92a      	cbnz	r2, 8009488 <_realloc_r+0x24>
 800947c:	f7ff fbdc 	bl	8008c38 <_free_r>
 8009480:	2400      	movs	r4, #0
 8009482:	4620      	mov	r0, r4
 8009484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009488:	f000 f81a 	bl	80094c0 <_malloc_usable_size_r>
 800948c:	4285      	cmp	r5, r0
 800948e:	4606      	mov	r6, r0
 8009490:	d802      	bhi.n	8009498 <_realloc_r+0x34>
 8009492:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009496:	d8f4      	bhi.n	8009482 <_realloc_r+0x1e>
 8009498:	4629      	mov	r1, r5
 800949a:	4640      	mov	r0, r8
 800949c:	f7ff fc38 	bl	8008d10 <_malloc_r>
 80094a0:	4607      	mov	r7, r0
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d0ec      	beq.n	8009480 <_realloc_r+0x1c>
 80094a6:	42b5      	cmp	r5, r6
 80094a8:	462a      	mov	r2, r5
 80094aa:	4621      	mov	r1, r4
 80094ac:	bf28      	it	cs
 80094ae:	4632      	movcs	r2, r6
 80094b0:	f7ff ffca 	bl	8009448 <memcpy>
 80094b4:	4621      	mov	r1, r4
 80094b6:	4640      	mov	r0, r8
 80094b8:	f7ff fbbe 	bl	8008c38 <_free_r>
 80094bc:	463c      	mov	r4, r7
 80094be:	e7e0      	b.n	8009482 <_realloc_r+0x1e>

080094c0 <_malloc_usable_size_r>:
 80094c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094c4:	1f18      	subs	r0, r3, #4
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bfbc      	itt	lt
 80094ca:	580b      	ldrlt	r3, [r1, r0]
 80094cc:	18c0      	addlt	r0, r0, r3
 80094ce:	4770      	bx	lr

080094d0 <_init>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	bf00      	nop
 80094d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d6:	bc08      	pop	{r3}
 80094d8:	469e      	mov	lr, r3
 80094da:	4770      	bx	lr

080094dc <_fini>:
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094de:	bf00      	nop
 80094e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e2:	bc08      	pop	{r3}
 80094e4:	469e      	mov	lr, r3
 80094e6:	4770      	bx	lr
