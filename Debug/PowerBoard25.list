
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ef0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  080110d0  080110d0  000120d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011790  08011790  00013350  2**0
                  CONTENTS
  4 .ARM          00000008  08011790  08011790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011798  08011798  00013350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011798  08011798  00012798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801179c  0801179c  0001279c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  080117a0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007498  20000350  08011af0  00013350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200077e8  08011af0  000137e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d8a6  00000000  00000000  00013380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f6b  00000000  00000000  00040c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024a0  00000000  00000000  00046b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c43  00000000  00000000  00049038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002623f  00000000  00000000  0004ac7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b852  00000000  00000000  00070eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e79ef  00000000  00000000  0009c70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001840fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ace4  00000000  00000000  00184140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018ee24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	080110b8 	.word	0x080110b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	080110b8 	.word	0x080110b8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <LTC2990_Init>:
  * @brief  Initialize the LTC2990 Chip
  * @param  Pointer to the LTC2990 handle
  * @param  Pointer to the HAL I2C HandleTypeDef
  * @retval HAL status
  */
int LTC2990_Init(LTC2990_Handle_t *handle, I2C_HandleTypeDef *hi2c) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	int8_t ack;

	handle->hi2c = hi2c;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	601a      	str	r2, [r3, #0]

	//Initialize voltages to NAN
	//Can this be changed so that it is in the struct
	//i.e. last_voltages = {NAN, NAN, NAN, NAN}
	for (int i = 0; i < 4; i++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e009      	b.n	8000f12 <LTC2990_Init+0x2a>
		handle->last_voltages[i] = NAN;
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3302      	adds	r3, #2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	4a1c      	ldr	r2, [pc, #112]	@ (8000f7c <LTC2990_Init+0x94>)
 8000f0a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	ddf2      	ble.n	8000efe <LTC2990_Init+0x16>
	}

	handle->i2c_address = LTC2990_I2C_ADDRESS;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	224c      	movs	r2, #76	@ 0x4c
 8000f1c:	711a      	strb	r2, [r3, #4]

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, VOLTAGE_MODE_MASK);
 8000f1e:	2207      	movs	r2, #7
 8000f20:	2107      	movs	r1, #7
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f8cc 	bl	80010c0 <LTC2990_Set_Mode>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	72fb      	strb	r3, [r7, #11]

	if(ack != 0) {
 8000f2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d004      	beq.n	8000f3e <LTC2990_Init+0x56>
		CDC_Transmit_Print("Failed to set in Single Voltage Mode \n");
 8000f34:	4812      	ldr	r0, [pc, #72]	@ (8000f80 <LTC2990_Init+0x98>)
 8000f36:	f000 fa2d 	bl	8001394 <CDC_Transmit_Print>
		while(1);
 8000f3a:	bf00      	nop
 8000f3c:	e7fd      	b.n	8000f3a <LTC2990_Init+0x52>
	}


	// Enable all voltage channels
	ack = LTC2990_Enable_All_Voltages(handle);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f8b0 	bl	80010a4 <LTC2990_Enable_All_Voltages>
 8000f44:	4603      	mov	r3, r0
 8000f46:	72fb      	strb	r3, [r7, #11]
	if(ack != 0) {
 8000f48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d007      	beq.n	8000f60 <LTC2990_Init+0x78>
		HAL_Delay(50);
 8000f50:	2032      	movs	r0, #50	@ 0x32
 8000f52:	f000 ffc1 	bl	8001ed8 <HAL_Delay>
		CDC_Transmit_Print("Failed to enable voltage channels. \n");
 8000f56:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <LTC2990_Init+0x9c>)
 8000f58:	f000 fa1c 	bl	8001394 <CDC_Transmit_Print>
		while(1);
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <LTC2990_Init+0x74>
	}

	HAL_Delay(100);
 8000f60:	2064      	movs	r0, #100	@ 0x64
 8000f62:	f000 ffb9 	bl	8001ed8 <HAL_Delay>
	CDC_Transmit_Print("LTC2990 configured for Single-Ended Voltage Monitoring. \n");
 8000f66:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <LTC2990_Init+0xa0>)
 8000f68:	f000 fa14 	bl	8001394 <CDC_Transmit_Print>

	//Initial data reading
	LTC2990_Step(handle);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f80d 	bl	8000f8c <LTC2990_Step>

	return 0;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	7fc00000 	.word	0x7fc00000
 8000f80:	080110d0 	.word	0x080110d0
 8000f84:	080110f8 	.word	0x080110f8
 8000f88:	08011120 	.word	0x08011120

08000f8c <LTC2990_Step>:
/**
  * @brief  Tell the LTC2990 chip to refresh voltage readings,
  * 		This does not return the voltage(s) read, use LTC2990_Get_Voltage to do so
  * @param  Pointer to the LTC2990 handle
  */
void LTC2990_Step(LTC2990_Handle_t *handle) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	int8_t ack;
	int16_t adc_code;
	int8_t data_valid;
	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f8d7 	bl	8001148 <LTC2990_Trigger_Conversion>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	74fb      	strb	r3, [r7, #19]
	if(ack != 0) {
 8000f9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <LTC2990_Step+0x22>
		CDC_Transmit_Print("Failed to trigger conversion.");
 8000fa6:	4829      	ldr	r0, [pc, #164]	@ (800104c <LTC2990_Step+0xc0>)
 8000fa8:	f000 f9f4 	bl	8001394 <CDC_Transmit_Print>
 8000fac:	e04b      	b.n	8001046 <LTC2990_Step+0xba>
		return;
	}

	// Allow time for conversion
	HAL_Delay(10);
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f000 ff92 	bl	8001ed8 <HAL_Delay>

	// Read voltages V1 to V4
	uint8_t msb_registers[4] = {V1_MSB_REG, V2_MSB_REG, V3_MSB_REG, V4_MSB_REG};
 8000fb4:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <LTC2990_Step+0xc4>)
 8000fb6:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 4; i++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e040      	b.n	8001040 <LTC2990_Step+0xb4>
		ack = LTC2990_ADC_Read_New_Data(handle, msb_registers[i], &adc_code, &data_valid);
 8000fbe:	f107 0208 	add.w	r2, r7, #8
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	7819      	ldrb	r1, [r3, #0]
 8000fc8:	f107 030f 	add.w	r3, r7, #15
 8000fcc:	f107 0210 	add.w	r2, r7, #16
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f8c7 	bl	8001164 <LTC2990_ADC_Read_New_Data>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	74fb      	strb	r3, [r7, #19]
		if(ack != 0 || data_valid != 1) {
 8000fda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <LTC2990_Step+0x5e>
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d017      	beq.n	800101a <LTC2990_Step+0x8e>
			CDC_Transmit_Print("Error reading Voltage %d \n", i);
 8000fea:	6979      	ldr	r1, [r7, #20]
 8000fec:	4819      	ldr	r0, [pc, #100]	@ (8001054 <LTC2990_Step+0xc8>)
 8000fee:	f000 f9d1 	bl	8001394 <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the ack: %d \n", ack);
 8000ff2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4817      	ldr	r0, [pc, #92]	@ (8001058 <LTC2990_Step+0xcc>)
 8000ffa:	f000 f9cb 	bl	8001394 <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4619      	mov	r1, r3
 8001004:	4815      	ldr	r0, [pc, #84]	@ (800105c <LTC2990_Step+0xd0>)
 8001006:	f000 f9c5 	bl	8001394 <CDC_Transmit_Print>
			handle->last_voltages[i] = NAN;
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3302      	adds	r3, #2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <LTC2990_Step+0xd4>)
 8001016:	601a      	str	r2, [r3, #0]
			continue;
 8001018:	e00f      	b.n	800103a <LTC2990_Step+0xae>
		}
		handle->last_voltages[i] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code);
 800101a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800101e:	b29b      	uxth	r3, r3
 8001020:	4619      	mov	r1, r3
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f920 	bl	8001268 <LTC2990_Code_To_Single_Ended_Voltage>
 8001028:	eef0 7a40 	vmov.f32	s15, s0
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3302      	adds	r3, #2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 4; i++) {
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	2b03      	cmp	r3, #3
 8001044:	ddbb      	ble.n	8000fbe <LTC2990_Step+0x32>
		//CDC_Transmit_Print("Just Read Voltages, got: %x \n", handle->last_voltages[i]);
	}

}
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	0801115c 	.word	0x0801115c
 8001050:	0c0a0806 	.word	0x0c0a0806
 8001054:	0801117c 	.word	0x0801117c
 8001058:	08011198 	.word	0x08011198
 800105c:	080111b0 	.word	0x080111b0
 8001060:	7fc00000 	.word	0x7fc00000

08001064 <LTC2990_Get_Voltage>:
/**
  * @brief  Puts the latest voltage readings in the array passed
  * @param  Pointer to the LTC2990 handle
  * @param 	Pointer to the array to store voltage values to
  */
void LTC2990_Get_Voltage(LTC2990_Handle_t* handle, float* voltages) {
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 4; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e00d      	b.n	8001090 <LTC2990_Get_Voltage+0x2c>
		voltages[i] = handle->last_voltages[i];
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	4413      	add	r3, r2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	3202      	adds	r2, #2
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	440a      	add	r2, r1
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++) {
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b03      	cmp	r3, #3
 8001094:	ddee      	ble.n	8001074 <LTC2990_Get_Voltage+0x10>
	}
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LTC2990_Enable_All_Voltages>:


inline int8_t LTC2990_Enable_All_Voltages(LTC2990_Handle_t *handle) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	return LTC2990_Set_Mode(handle, ENABLE_ALL, TEMP_MEAS_MODE_MASK);
 80010ac:	2218      	movs	r2, #24
 80010ae:	2118      	movs	r1, #24
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f805 	bl	80010c0 <LTC2990_Set_Mode>
 80010b6:	4603      	mov	r3, r0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <LTC2990_Set_Mode>:


int8_t LTC2990_Set_Mode(LTC2990_Handle_t *handle, uint8_t bits_to_set, uint8_t bits_to_clear) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
 80010cc:	4613      	mov	r3, r2
 80010ce:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_data;
	int8_t ack;

	// Read current CONTROL_REG
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_data);
 80010d0:	f107 030e 	add.w	r3, r7, #14
 80010d4:	461a      	mov	r2, r3
 80010d6:	2101      	movs	r1, #1
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f901 	bl	80012e0 <LTC2990_Read_Register>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <LTC2990_Set_Mode+0x36>
		CDC_Transmit_Print("Failed to Read_Register in Set_Mode\n");
 80010ea:	4815      	ldr	r0, [pc, #84]	@ (8001140 <LTC2990_Set_Mode+0x80>)
 80010ec:	f000 f952 	bl	8001394 <CDC_Transmit_Print>
		return ack;
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f4:	e01f      	b.n	8001136 <LTC2990_Set_Mode+0x76>
	}

	//Modify bits
	reg_data &= ~bits_to_clear;
 80010f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	b25a      	sxtb	r2, r3
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	4013      	ands	r3, r2
 8001104:	b25b      	sxtb	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	73bb      	strb	r3, [r7, #14]
	reg_data |= bits_to_set;
 800110a:	7bba      	ldrb	r2, [r7, #14]
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	4313      	orrs	r3, r2
 8001110:	b2db      	uxtb	r3, r3
 8001112:	73bb      	strb	r3, [r7, #14]

	//Write back to CONTROL_REG
	ack = LTC2990_Write_Register(handle, CONTROL_REG, reg_data);
 8001114:	7bbb      	ldrb	r3, [r7, #14]
 8001116:	461a      	mov	r2, r3
 8001118:	2101      	movs	r1, #1
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f90c 	bl	8001338 <LTC2990_Write_Register>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 8001124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <LTC2990_Set_Mode+0x72>
		CDC_Transmit_Print("Failed to Write_Register in Set_Mode\n");
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <LTC2990_Set_Mode+0x84>)
 800112e:	f000 f931 	bl	8001394 <CDC_Transmit_Print>
	}
	return ack;
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	080111d0 	.word	0x080111d0
 8001144:	080111f8 	.word	0x080111f8

08001148 <LTC2990_Trigger_Conversion>:

int8_t LTC2990_Trigger_Conversion(LTC2990_Handle_t *handle) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	return LTC2990_Write_Register(handle, TRIGGER_REG, 0x00);
 8001150:	2200      	movs	r2, #0
 8001152:	2102      	movs	r1, #2
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f8ef 	bl	8001338 <LTC2990_Write_Register>
 800115a:	4603      	mov	r3, r0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <LTC2990_ADC_Read_New_Data>:


uint8_t LTC2990_ADC_Read_New_Data(LTC2990_Handle_t *handle, uint8_t msb_register_address, int16_t* adc_code, int8_t* data_valid) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	460b      	mov	r3, r1
 8001172:	72fb      	strb	r3, [r7, #11]
	uint16_t timeout = TIMEOUT;
 8001174:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001178:	83fb      	strh	r3, [r7, #30]
	int8_t ack;
	uint8_t status;
	uint8_t status_bit = (msb_register_address / 2) - 1;
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	085b      	lsrs	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	3b01      	subs	r3, #1
 8001182:	777b      	strb	r3, [r7, #29]

	// Wait for new data
	while (--timeout) {
 8001184:	e01a      	b.n	80011bc <LTC2990_ADC_Read_New_Data+0x58>
		ack = LTC2990_Read_Register(handle, STATUS_REG, &status);
 8001186:	f107 0319 	add.w	r3, r7, #25
 800118a:	461a      	mov	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 f8a6 	bl	80012e0 <LTC2990_Read_Register>
 8001194:	4603      	mov	r3, r0
 8001196:	773b      	strb	r3, [r7, #28]

		if (ack != 0) {
 8001198:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <LTC2990_ADC_Read_New_Data+0x40>
			return ack;
 80011a0:	7f3b      	ldrb	r3, [r7, #28]
 80011a2:	e05b      	b.n	800125c <LTC2990_ADC_Read_New_Data+0xf8>
		}

		if (((status >> status_bit) & 0x01) == 1) {
 80011a4:	7e7b      	ldrb	r3, [r7, #25]
 80011a6:	461a      	mov	r2, r3
 80011a8:	7f7b      	ldrb	r3, [r7, #29]
 80011aa:	fa42 f303 	asr.w	r3, r2, r3
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d109      	bne.n	80011ca <LTC2990_ADC_Read_New_Data+0x66>
			break;
		}

		//
		HAL_Delay(1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 fe8e 	bl	8001ed8 <HAL_Delay>
	while (--timeout) {
 80011bc:	8bfb      	ldrh	r3, [r7, #30]
 80011be:	3b01      	subs	r3, #1
 80011c0:	83fb      	strh	r3, [r7, #30]
 80011c2:	8bfb      	ldrh	r3, [r7, #30]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1de      	bne.n	8001186 <LTC2990_ADC_Read_New_Data+0x22>
 80011c8:	e000      	b.n	80011cc <LTC2990_ADC_Read_New_Data+0x68>
			break;
 80011ca:	bf00      	nop
	}


	if (timeout == 0) {
 80011cc:	8bfb      	ldrh	r3, [r7, #30]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d104      	bne.n	80011dc <LTC2990_ADC_Read_New_Data+0x78>
		CDC_Transmit_Print("LTC2990 TIMED OUT \n");
 80011d2:	4824      	ldr	r0, [pc, #144]	@ (8001264 <LTC2990_ADC_Read_New_Data+0x100>)
 80011d4:	f000 f8de 	bl	8001394 <CDC_Transmit_Print>
		return 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	e03f      	b.n	800125c <LTC2990_ADC_Read_New_Data+0xf8>
	}

	//Read ADC data
	uint8_t msb;
	uint8_t lsb;
	ack = LTC2990_Read_Register(handle, msb_register_address, &msb);
 80011dc:	f107 0218 	add.w	r2, r7, #24
 80011e0:	7afb      	ldrb	r3, [r7, #11]
 80011e2:	4619      	mov	r1, r3
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 f87b 	bl	80012e0 <LTC2990_Read_Register>
 80011ea:	4603      	mov	r3, r0
 80011ec:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 80011ee:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <LTC2990_ADC_Read_New_Data+0x96>
		return ack;
 80011f6:	7f3b      	ldrb	r3, [r7, #28]
 80011f8:	e030      	b.n	800125c <LTC2990_ADC_Read_New_Data+0xf8>
	}

	ack = LTC2990_Read_Register(handle, msb_register_address + 1, &lsb);
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	3301      	adds	r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f107 0217 	add.w	r2, r7, #23
 8001204:	4619      	mov	r1, r3
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f000 f86a 	bl	80012e0 <LTC2990_Read_Register>
 800120c:	4603      	mov	r3, r0
 800120e:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 8001210:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <LTC2990_ADC_Read_New_Data+0xb8>
		return ack;
 8001218:	7f3b      	ldrb	r3, [r7, #28]
 800121a:	e01f      	b.n	800125c <LTC2990_ADC_Read_New_Data+0xf8>
	}


	uint16_t code = ((uint16_t)msb << 8) | lsb;
 800121c:	7e3b      	ldrb	r3, [r7, #24]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b21b      	sxth	r3, r3
 800122a:	837b      	strh	r3, [r7, #26]
	*data_valid = (code >> 15) & 0x01;  // Data valid bit
 800122c:	8b7b      	ldrh	r3, [r7, #26]
 800122e:	0bdb      	lsrs	r3, r3, #15
 8001230:	b29b      	uxth	r3, r3
 8001232:	b25b      	sxtb	r3, r3
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	b25a      	sxtb	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	701a      	strb	r2, [r3, #0]
	*adc_code = code & 0x3FFF;
 800123e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001242:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001246:	b21a      	sxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	801a      	strh	r2, [r3, #0]

	return (*data_valid == 1) ? 0 : 1;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f993 3000 	ldrsb.w	r3, [r3]
 8001252:	2b01      	cmp	r3, #1
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
	//In the actual code, it should NEVER reach this point, as this would be the timeout
	//ran out but got messed up
	CDC_Transmit_Print("the thing I said wouldn't happen \n");
	return 2;

}
 800125c:	4618      	mov	r0, r3
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	08011220 	.word	0x08011220

08001268 <LTC2990_Code_To_Single_Ended_Voltage>:

float LTC2990_Code_To_Single_Ended_Voltage(LTC2990_Handle_t *handle, uint16_t adc_code) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 8001274:	2301      	movs	r3, #1
 8001276:	81fb      	strh	r3, [r7, #14]

	if(adc_code & 0x4000) { //If the code is negative
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00a      	beq.n	8001298 <LTC2990_Code_To_Single_Ended_Voltage+0x30>
		adc_code = (adc_code ^ 0x7FFF) + 1;// Two's compliment
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	f483 43ff 	eor.w	r3, r3, #32640	@ 0x7f80
 8001288:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 800128c:	b29b      	uxth	r3, r3
 800128e:	3301      	adds	r3, #1
 8001290:	807b      	strh	r3, [r7, #2]
		sign = -1;
 8001292:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001296:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800129e:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * SINGLE_ENDED_LSB * sign;
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012aa:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80012dc <LTC2990_Code_To_Single_Ended_Voltage+0x74>
 80012ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c2:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	ee07 3a90 	vmov	s15, r3
}
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	39a00000 	.word	0x39a00000

080012e0 <LTC2990_Read_Register>:

int8_t LTC2990_Read_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t* data) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af04      	add	r7, sp, #16
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	460b      	mov	r3, r1
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(handle->hi2c, handle->i2c_address << 1, reg_address, 1, data, 1, TIMEOUT);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	791b      	ldrb	r3, [r3, #4]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	b299      	uxth	r1, r3
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	2301      	movs	r3, #1
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	f001 fced 	bl	8002cec <HAL_I2C_Mem_Read>
 8001312:	4603      	mov	r3, r0
 8001314:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK) {
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <LTC2990_Read_Register+0x40>
		return 0;
 800131c:	2300      	movs	r3, #0
 800131e:	e005      	b.n	800132c <LTC2990_Read_Register+0x4c>
	}
	CDC_Transmit_Print("I2C Read Register failed, status: %d\n", status);
 8001320:	7dfb      	ldrb	r3, [r7, #23]
 8001322:	4619      	mov	r1, r3
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <LTC2990_Read_Register+0x54>)
 8001326:	f000 f835 	bl	8001394 <CDC_Transmit_Print>
	return 1;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	08011234 	.word	0x08011234

08001338 <LTC2990_Write_Register>:
//	}
//	return 0;
//}


int8_t LTC2990_Write_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t data) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af04      	add	r7, sp, #16
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
 8001344:	4613      	mov	r3, r2
 8001346:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(handle->hi2c, handle->i2c_address << 1, (uint16_t)reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, TIMEOUT);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	b299      	uxth	r1, r3
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	b29a      	uxth	r2, r3
 8001358:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	2301      	movs	r3, #1
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	1cbb      	adds	r3, r7, #2
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	f001 fbac 	bl	8002ac4 <HAL_I2C_Mem_Write>
 800136c:	4603      	mov	r3, r0
 800136e:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK) {
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <LTC2990_Write_Register+0x42>
		return 0;
 8001376:	2300      	movs	r3, #0
 8001378:	e005      	b.n	8001386 <LTC2990_Write_Register+0x4e>
	}
	CDC_Transmit_Print("I2C Write Register failed, status: %d\n", status);
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	4619      	mov	r1, r3
 800137e:	4804      	ldr	r0, [pc, #16]	@ (8001390 <LTC2990_Write_Register+0x58>)
 8001380:	f000 f808 	bl	8001394 <CDC_Transmit_Print>

	return 1;
 8001384:	2301      	movs	r3, #1
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	0801125c 	.word	0x0801125c

08001394 <CDC_Transmit_Print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CDC_Transmit_Print(const char *format, ...)
{
 8001394:	b40f      	push	{r0, r1, r2, r3}
 8001396:	b580      	push	{r7, lr}
 8001398:	b09c      	sub	sp, #112	@ 0x70
 800139a:	af00      	add	r7, sp, #0
    char buf[PRINT_BUFFER_SIZE];
    va_list  args;
    va_start(args, format);
 800139c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013a0:	607b      	str	r3, [r7, #4]
    int len = vsnprintf(buf, sizeof(buf), format, args);
 80013a2:	f107 0008 	add.w	r0, r7, #8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80013aa:	2164      	movs	r1, #100	@ 0x64
 80013ac:	f00d fd14 	bl	800edd8 <vsniprintf>
 80013b0:	66f8      	str	r0, [r7, #108]	@ 0x6c
    va_end(args);
    if (len <= 0) {
 80013b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	dd0d      	ble.n	80013d4 <CDC_Transmit_Print+0x40>
        return;
    }
    if (len > (PRINT_BUFFER_SIZE - 1)) {
 80013b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013ba:	2b63      	cmp	r3, #99	@ 0x63
 80013bc:	dd01      	ble.n	80013c2 <CDC_Transmit_Print+0x2e>
        len = PRINT_BUFFER_SIZE - 1;
 80013be:	2363      	movs	r3, #99	@ 0x63
 80013c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }
    CDC_Transmit_FS((uint8_t*)buf, (uint16_t)len);
 80013c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00c fb71 	bl	800dab4 <CDC_Transmit_FS>
 80013d2:	e000      	b.n	80013d6 <CDC_Transmit_Print+0x42>
        return;
 80013d4:	bf00      	nop
}
 80013d6:	3770      	adds	r7, #112	@ 0x70
 80013d8:	46bd      	mov	sp, r7
 80013da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013de:	b004      	add	sp, #16
 80013e0:	4770      	bx	lr
	...

080013e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e8:	f000 fd3f 	bl	8001e6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ec:	f000 f854 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f0:	f000 f968 	bl	80016c4 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 80013f4:	f000 f892 	bl	800151c <MX_FDCAN2_Init>
  MX_I2C2_Init();
 80013f8:	f000 f8d8 	bl	80015ac <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80013fc:	f000 f916 	bl	800162c <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8001400:	f00c fa9a 	bl	800d938 <MX_USB_Device_Init>
  HAL_GPIO_WritePin(BACKLIGHT_LEDS_GPIO_Port, BACKLIGHT_LEDS_Pin, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800140a:	4816      	ldr	r0, [pc, #88]	@ (8001464 <main+0x80>)
 800140c:	f001 fa8c 	bl	8002928 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */

  HAL_FDCAN_Start(&hfdcan2);
 8001410:	4815      	ldr	r0, [pc, #84]	@ (8001468 <main+0x84>)
 8001412:	f000 ffbd 	bl	8002390 <HAL_FDCAN_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001416:	f009 faf3 	bl	800aa00 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorQueue */
  sensorQueueHandle = osMessageQueueNew(16, sizeof(instrumentationPayload_t), &sensorQueue_attributes);
 800141a:	4a14      	ldr	r2, [pc, #80]	@ (800146c <main+0x88>)
 800141c:	2110      	movs	r1, #16
 800141e:	2010      	movs	r0, #16
 8001420:	f009 fbe6 	bl	800abf0 <osMessageQueueNew>
 8001424:	4603      	mov	r3, r0
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <main+0x8c>)
 8001428:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED */
  blinkLEDHandle = osThreadNew(StartBlink, NULL, &blinkLED_attributes);
 800142a:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <main+0x90>)
 800142c:	2100      	movs	r1, #0
 800142e:	4812      	ldr	r0, [pc, #72]	@ (8001478 <main+0x94>)
 8001430:	f009 fb30 	bl	800aa94 <osThreadNew>
 8001434:	4603      	mov	r3, r0
 8001436:	4a11      	ldr	r2, [pc, #68]	@ (800147c <main+0x98>)
 8001438:	6013      	str	r3, [r2, #0]

  /* creation of readVoltageTask */
  readVoltageTaskHandle = osThreadNew(startReadVoltageTask, NULL, &readVoltageTask_attributes);
 800143a:	4a11      	ldr	r2, [pc, #68]	@ (8001480 <main+0x9c>)
 800143c:	2100      	movs	r1, #0
 800143e:	4811      	ldr	r0, [pc, #68]	@ (8001484 <main+0xa0>)
 8001440:	f009 fb28 	bl	800aa94 <osThreadNew>
 8001444:	4603      	mov	r3, r0
 8001446:	4a10      	ldr	r2, [pc, #64]	@ (8001488 <main+0xa4>)
 8001448:	6013      	str	r3, [r2, #0]

  /* creation of sendMessage */
  sendMessageHandle = osThreadNew(StartSendMessage, NULL, &sendMessage_attributes);
 800144a:	4a10      	ldr	r2, [pc, #64]	@ (800148c <main+0xa8>)
 800144c:	2100      	movs	r1, #0
 800144e:	4810      	ldr	r0, [pc, #64]	@ (8001490 <main+0xac>)
 8001450:	f009 fb20 	bl	800aa94 <osThreadNew>
 8001454:	4603      	mov	r3, r0
 8001456:	4a0f      	ldr	r2, [pc, #60]	@ (8001494 <main+0xb0>)
 8001458:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800145a:	f009 faf5 	bl	800aa48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800145e:	bf00      	nop
 8001460:	e7fd      	b.n	800145e <main+0x7a>
 8001462:	bf00      	nop
 8001464:	48000400 	.word	0x48000400
 8001468:	2000036c 	.word	0x2000036c
 800146c:	080113a8 	.word	0x080113a8
 8001470:	200004c4 	.word	0x200004c4
 8001474:	0801133c 	.word	0x0801133c
 8001478:	08001785 	.word	0x08001785
 800147c:	200004b8 	.word	0x200004b8
 8001480:	08011360 	.word	0x08011360
 8001484:	080017a5 	.word	0x080017a5
 8001488:	200004bc 	.word	0x200004bc
 800148c:	08011384 	.word	0x08011384
 8001490:	08001831 	.word	0x08001831
 8001494:	200004c0 	.word	0x200004c0

08001498 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	@ 0x50
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0318 	add.w	r3, r7, #24
 80014a2:	2238      	movs	r2, #56	@ 0x38
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00d fca4 	bl	800edf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014be:	f003 fd89 	bl	8004fd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48;
 80014c2:	2322      	movs	r3, #34	@ 0x22
 80014c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014cc:	2340      	movs	r3, #64	@ 0x40
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d8:	f107 0318 	add.w	r3, r7, #24
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fe2d 	bl	800513c <HAL_RCC_OscConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0x54>
  {
    Error_Handler();
 80014e8:	f000 f9e6 	bl	80018b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ec:	230f      	movs	r3, #15
 80014ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014f0:	2301      	movs	r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f004 f92b 	bl	8005760 <HAL_RCC_ClockConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001510:	f000 f9d2 	bl	80018b8 <Error_Handler>
  }
}
 8001514:	bf00      	nop
 8001516:	3750      	adds	r7, #80	@ 0x50
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <MX_FDCAN2_Init>:
 * @brief FDCAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001520:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001522:	4a21      	ldr	r2, [pc, #132]	@ (80015a8 <MX_FDCAN2_Init+0x8c>)
 8001524:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001528:	2200      	movs	r2, #0
 800152a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800152c:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 800152e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001532:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001534:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800153a:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 800153c:	2200      	movs	r2, #0
 800153e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001542:	2200      	movs	r2, #0
 8001544:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001546:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001548:	2200      	movs	r2, #0
 800154a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800154c:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 800154e:	2201      	movs	r2, #1
 8001550:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 8001552:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001554:	2210      	movs	r2, #16
 8001556:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 800155a:	223f      	movs	r2, #63	@ 0x3f
 800155c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 800155e:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001560:	2210      	movs	r2, #16
 8001562:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001566:	2201      	movs	r2, #1
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 800156c:	2204      	movs	r2, #4
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001572:	220d      	movs	r2, #13
 8001574:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001578:	2202      	movs	r2, #2
 800157a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 800157e:	2201      	movs	r2, #1
 8001580:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001584:	2201      	movs	r2, #1
 8001586:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 800158a:	2200      	movs	r2, #0
 800158c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_FDCAN2_Init+0x88>)
 8001590:	f000 fda4 	bl	80020dc <HAL_FDCAN_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 800159a:	f000 f98d 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000036c 	.word	0x2000036c
 80015a8:	40006800 	.word	0x40006800

080015ac <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <MX_I2C2_Init+0x74>)
 80015b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001624 <MX_I2C2_Init+0x78>)
 80015b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <MX_I2C2_Init+0x74>)
 80015b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <MX_I2C2_Init+0x7c>)
 80015ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <MX_I2C2_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <MX_I2C2_Init+0x74>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <MX_I2C2_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015ce:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_I2C2_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <MX_I2C2_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_I2C2_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_I2C2_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015e6:	480e      	ldr	r0, [pc, #56]	@ (8001620 <MX_I2C2_Init+0x74>)
 80015e8:	f001 f9d0 	bl	800298c <HAL_I2C_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015f2:	f000 f961 	bl	80018b8 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015f6:	2100      	movs	r1, #0
 80015f8:	4809      	ldr	r0, [pc, #36]	@ (8001620 <MX_I2C2_Init+0x74>)
 80015fa:	f001 ff53 	bl	80034a4 <HAL_I2CEx_ConfigAnalogFilter>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001604:	f000 f958 	bl	80018b8 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001608:	2100      	movs	r1, #0
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_I2C2_Init+0x74>)
 800160c:	f001 ff95 	bl	800353a <HAL_I2CEx_ConfigDigitalFilter>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001616:	f000 f94f 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200003d0 	.word	0x200003d0
 8001624:	40005800 	.word	0x40005800
 8001628:	00503d58 	.word	0x00503d58

0800162c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001630:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 8001632:	4a23      	ldr	r2, [pc, #140]	@ (80016c0 <MX_USART2_UART_Init+0x94>)
 8001634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001636:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164a:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001668:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001674:	4811      	ldr	r0, [pc, #68]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 8001676:	f005 f837 	bl	80066e8 <HAL_UART_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001680:	f000 f91a 	bl	80018b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001684:	2100      	movs	r1, #0
 8001686:	480d      	ldr	r0, [pc, #52]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 8001688:	f005 fdd2 	bl	8007230 <HAL_UARTEx_SetTxFifoThreshold>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001692:	f000 f911 	bl	80018b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001696:	2100      	movs	r1, #0
 8001698:	4808      	ldr	r0, [pc, #32]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 800169a:	f005 fe07 	bl	80072ac <HAL_UARTEx_SetRxFifoThreshold>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016a4:	f000 f908 	bl	80018b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	@ (80016bc <MX_USART2_UART_Init+0x90>)
 80016aa:	f005 fd88 	bl	80071be <HAL_UARTEx_DisableFifoMode>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016b4:	f000 f900 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000424 	.word	0x20000424
 80016c0:	40004400 	.word	0x40004400

080016c4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	4b27      	ldr	r3, [pc, #156]	@ (8001778 <MX_GPIO_Init+0xb4>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a26      	ldr	r2, [pc, #152]	@ (8001778 <MX_GPIO_Init+0xb4>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <MX_GPIO_Init+0xb4>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f2:	4b21      	ldr	r3, [pc, #132]	@ (8001778 <MX_GPIO_Init+0xb4>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	4a20      	ldr	r2, [pc, #128]	@ (8001778 <MX_GPIO_Init+0xb4>)
 80016f8:	f043 0320 	orr.w	r3, r3, #32
 80016fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001778 <MX_GPIO_Init+0xb4>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <MX_GPIO_Init+0xb4>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <MX_GPIO_Init+0xb4>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001716:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <MX_GPIO_Init+0xb4>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <MX_GPIO_Init+0xb4>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <MX_GPIO_Init+0xb4>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172e:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <MX_GPIO_Init+0xb4>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin | BACKLIGHT_LEDS_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001740:	480e      	ldr	r0, [pc, #56]	@ (800177c <MX_GPIO_Init+0xb8>)
 8001742:	f001 f8f1 	bl	8002928 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRONT_LED_Pin BACKLIGHT_LEDS_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin | BACKLIGHT_LEDS_Pin;
 8001746:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4807      	ldr	r0, [pc, #28]	@ (800177c <MX_GPIO_Init+0xb8>)
 8001760:	f000 ff60 	bl	8002624 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <MX_GPIO_Init+0xbc>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <MX_GPIO_Init+0xbc>)
 800176a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800176e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	48000400 	.word	0x48000400
 8001780:	40010000 	.word	0x40010000

08001784 <StartBlink>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 800178c:	2120      	movs	r1, #32
 800178e:	4804      	ldr	r0, [pc, #16]	@ (80017a0 <StartBlink+0x1c>)
 8001790:	f001 f8e2 	bl	8002958 <HAL_GPIO_TogglePin>
    osDelay(100);
 8001794:	2064      	movs	r0, #100	@ 0x64
 8001796:	f009 fa10 	bl	800abba <osDelay>
    HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 800179a:	bf00      	nop
 800179c:	e7f6      	b.n	800178c <StartBlink+0x8>
 800179e:	bf00      	nop
 80017a0:	48000400 	.word	0x48000400

080017a4 <startReadVoltageTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startReadVoltageTask */
void startReadVoltageTask(void *argument)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	@ 0x30
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadVoltageTask */
  LTC2990_Init(&LTC2990_Handle, &hi2c2);
 80017ac:	491c      	ldr	r1, [pc, #112]	@ (8001820 <startReadVoltageTask+0x7c>)
 80017ae:	481d      	ldr	r0, [pc, #116]	@ (8001824 <startReadVoltageTask+0x80>)
 80017b0:	f7ff fb9a 	bl	8000ee8 <LTC2990_Init>
  static const float multipliers[4] = {28.0f / 10.0f, 25.0f / 10.0f, 25.0f / 10.0f, 25.0f / 10.0f};
  /* Infinite loop */
  for (;;)
  {
    LTC2990_Step(&LTC2990_Handle);
 80017b4:	481b      	ldr	r0, [pc, #108]	@ (8001824 <startReadVoltageTask+0x80>)
 80017b6:	f7ff fbe9 	bl	8000f8c <LTC2990_Step>
    float raw[4];
    LTC2990_Get_Voltage(&LTC2990_Handle, raw);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4818      	ldr	r0, [pc, #96]	@ (8001824 <startReadVoltageTask+0x80>)
 80017c2:	f7ff fc4f 	bl	8001064 <LTC2990_Get_Voltage>
    instrumentationPayload_t payload;
    for (int i = 0; i < 4; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ca:	e018      	b.n	80017fe <startReadVoltageTask+0x5a>
    {
      payload.voltages[i] = raw[i] * multipliers[i];
 80017cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	3330      	adds	r3, #48	@ 0x30
 80017d2:	443b      	add	r3, r7
 80017d4:	3b14      	subs	r3, #20
 80017d6:	ed93 7a00 	vldr	s14, [r3]
 80017da:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <startReadVoltageTask+0x84>)
 80017dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	3330      	adds	r3, #48	@ 0x30
 80017f0:	443b      	add	r3, r7
 80017f2:	3b24      	subs	r3, #36	@ 0x24
 80017f4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80017f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fa:	3301      	adds	r3, #1
 80017fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001800:	2b03      	cmp	r3, #3
 8001802:	dde3      	ble.n	80017cc <startReadVoltageTask+0x28>
    }
    osMessageQueuePut(sensorQueueHandle, &payload, 0, osWaitForever);
 8001804:	4b09      	ldr	r3, [pc, #36]	@ (800182c <startReadVoltageTask+0x88>)
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	f107 010c 	add.w	r1, r7, #12
 800180c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001810:	2200      	movs	r2, #0
 8001812:	f009 fa61 	bl	800acd8 <osMessageQueuePut>
    osDelay(50);
 8001816:	2032      	movs	r0, #50	@ 0x32
 8001818:	f009 f9cf 	bl	800abba <osDelay>
  {
 800181c:	e7ca      	b.n	80017b4 <startReadVoltageTask+0x10>
 800181e:	bf00      	nop
 8001820:	200003d0 	.word	0x200003d0
 8001824:	200004c8 	.word	0x200004c8
 8001828:	080113c0 	.word	0x080113c0
 800182c:	200004c4 	.word	0x200004c4

08001830 <StartSendMessage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendMessage */
void StartSendMessage(void *argument)
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b094      	sub	sp, #80	@ 0x50
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendMessage */
  /* Infinite loop */
  instrumentationPayload_t payload;
  uint8_t txBuf[sizeof(instrumentationPayload_t)];
  FDCAN_TxHeaderTypeDef txHeader = {
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <StartSendMessage+0x58>)
 800183a:	f107 040c 	add.w	r4, r7, #12
 800183e:	461d      	mov	r5, r3
 8001840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	6023      	str	r3, [r4, #0]
      .TxEventFifoControl = FDCAN_STORE_TX_EVENTS,
      .MessageMarker = 0
  };
  for (;;)
  {
    osMessageQueueGet(sensorQueueHandle, &payload, NULL, osWaitForever);
 800184c:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <StartSendMessage+0x5c>)
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001854:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001858:	2200      	movs	r2, #0
 800185a:	f009 fa9d 	bl	800ad98 <osMessageQueueGet>
    memcpy(txBuf, &payload, sizeof(payload));
 800185e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001862:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, txBuf);
 800186c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	@ (8001890 <StartSendMessage+0x60>)
 8001878:	f000 fdb2 	bl	80023e0 <HAL_FDCAN_AddMessageToTxFifoQ>
    osDelay(100);
 800187c:	2064      	movs	r0, #100	@ 0x64
 800187e:	f009 f99c 	bl	800abba <osDelay>
    osMessageQueueGet(sensorQueueHandle, &payload, NULL, osWaitForever);
 8001882:	bf00      	nop
 8001884:	e7e2      	b.n	800184c <StartSendMessage+0x1c>
 8001886:	bf00      	nop
 8001888:	080112b8 	.word	0x080112b8
 800188c:	200004c4 	.word	0x200004c4
 8001890:	2000036c 	.word	0x2000036c

08001894 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80018a6:	f000 faf9 	bl	8001e9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40012c00 	.word	0x40012c00

080018b8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018bc:	b672      	cpsid	i
}
 80018be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <Error_Handler+0x8>

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_MspInit+0x50>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ce:	4a11      	ldr	r2, [pc, #68]	@ (8001914 <HAL_MspInit+0x50>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <HAL_MspInit+0x50>)
 80018d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <HAL_MspInit+0x50>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001914 <HAL_MspInit+0x50>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <HAL_MspInit+0x50>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	210f      	movs	r1, #15
 80018fe:	f06f 0001 	mvn.w	r0, #1
 8001902:	f000 fbc3 	bl	800208c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001906:	f003 fc09 	bl	800511c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b09e      	sub	sp, #120	@ 0x78
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2250      	movs	r2, #80	@ 0x50
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f00d fa5b 	bl	800edf4 <memset>
  if(hfdcan->Instance==FDCAN2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a20      	ldr	r2, [pc, #128]	@ (80019c4 <HAL_FDCAN_MspInit+0xac>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d138      	bne.n	80019ba <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800194c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800194e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001952:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4618      	mov	r0, r3
 800195a:	f004 f94f 	bl	8005bfc <HAL_RCCEx_PeriphCLKConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001964:	f7ff ffa8 	bl	80018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001968:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <HAL_FDCAN_MspInit+0xb0>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196c:	4a16      	ldr	r2, [pc, #88]	@ (80019c8 <HAL_FDCAN_MspInit+0xb0>)
 800196e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001972:	6593      	str	r3, [r2, #88]	@ 0x58
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <HAL_FDCAN_MspInit+0xb0>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <HAL_FDCAN_MspInit+0xb0>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001984:	4a10      	ldr	r2, [pc, #64]	@ (80019c8 <HAL_FDCAN_MspInit+0xb0>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198c:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <HAL_FDCAN_MspInit+0xb0>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001998:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800199c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80019aa:	2309      	movs	r3, #9
 80019ac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	@ (80019cc <HAL_FDCAN_MspInit+0xb4>)
 80019b6:	f000 fe35 	bl	8002624 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 80019ba:	bf00      	nop
 80019bc:	3778      	adds	r7, #120	@ 0x78
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40006800 	.word	0x40006800
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000400 	.word	0x48000400

080019d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b09e      	sub	sp, #120	@ 0x78
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2250      	movs	r2, #80	@ 0x50
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00d f9ff 	bl	800edf4 <memset>
  if(hi2c->Instance==I2C2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001a78 <HAL_I2C_MspInit+0xa8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d137      	bne.n	8001a70 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f004 f8f5 	bl	8005bfc <HAL_RCCEx_PeriphCLKConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a18:	f7ff ff4e 	bl	80018b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <HAL_I2C_MspInit+0xac>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a20:	4a16      	ldr	r2, [pc, #88]	@ (8001a7c <HAL_I2C_MspInit+0xac>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a28:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <HAL_I2C_MspInit+0xac>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a38:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a3a:	2312      	movs	r3, #18
 8001a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a46:	2304      	movs	r3, #4
 8001a48:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a54:	f000 fde6 	bl	8002624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <HAL_I2C_MspInit+0xac>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	4a07      	ldr	r2, [pc, #28]	@ (8001a7c <HAL_I2C_MspInit+0xac>)
 8001a5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a64:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <HAL_I2C_MspInit+0xac>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a70:	bf00      	nop
 8001a72:	3778      	adds	r7, #120	@ 0x78
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40005800 	.word	0x40005800
 8001a7c:	40021000 	.word	0x40021000

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b09e      	sub	sp, #120	@ 0x78
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2250      	movs	r2, #80	@ 0x50
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00d f9a7 	bl	800edf4 <memset>
  if(huart->Instance==USART2)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8001b28 <HAL_UART_MspInit+0xa8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d136      	bne.n	8001b1e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 f89d 	bl	8005bfc <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ac8:	f7ff fef6 	bl	80018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_UART_MspInit+0xac>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	4a16      	ldr	r2, [pc, #88]	@ (8001b2c <HAL_UART_MspInit+0xac>)
 8001ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad8:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <HAL_UART_MspInit+0xac>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <HAL_UART_MspInit+0xac>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae8:	4a10      	ldr	r2, [pc, #64]	@ (8001b2c <HAL_UART_MspInit+0xac>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_UART_MspInit+0xac>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001afc:	230c      	movs	r3, #12
 8001afe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1a:	f000 fd83 	bl	8002624 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b1e:	bf00      	nop
 8001b20:	3778      	adds	r7, #120	@ 0x78
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40004400 	.word	0x40004400
 8001b2c:	40021000 	.word	0x40021000

08001b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	@ 0x30
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <HAL_InitTick+0xc4>)
 8001b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b44:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf4 <HAL_InitTick+0xc4>)
 8001b46:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b4c:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <HAL_InitTick+0xc4>)
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b58:	f107 020c 	add.w	r2, r7, #12
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 ffd2 	bl	8005b0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b68:	f003 ffba 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 8001b6c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b70:	4a21      	ldr	r2, [pc, #132]	@ (8001bf8 <HAL_InitTick+0xc8>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0c9b      	lsrs	r3, r3, #18
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bfc <HAL_InitTick+0xcc>)
 8001b7e:	4a20      	ldr	r2, [pc, #128]	@ (8001c00 <HAL_InitTick+0xd0>)
 8001b80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_InitTick+0xcc>)
 8001b84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bfc <HAL_InitTick+0xcc>)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <HAL_InitTick+0xcc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b96:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_InitTick+0xcc>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001b9c:	4817      	ldr	r0, [pc, #92]	@ (8001bfc <HAL_InitTick+0xcc>)
 8001b9e:	f004 fa69 	bl	8006074 <HAL_TIM_Base_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d11b      	bne.n	8001be8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001bb0:	4812      	ldr	r0, [pc, #72]	@ (8001bfc <HAL_InitTick+0xcc>)
 8001bb2:	f004 fac1 	bl	8006138 <HAL_TIM_Base_Start_IT>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d111      	bne.n	8001be8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bc4:	2019      	movs	r0, #25
 8001bc6:	f000 fa7b 	bl	80020c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d808      	bhi.n	8001be2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	2019      	movs	r0, #25
 8001bd6:	f000 fa59 	bl	800208c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <HAL_InitTick+0xd4>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e002      	b.n	8001be8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001be8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3730      	adds	r7, #48	@ 0x30
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	431bde83 	.word	0x431bde83
 8001bfc:	200004e0 	.word	0x200004e0
 8001c00:	40012c00 	.word	0x40012c00
 8001c04:	20000004 	.word	0x20000004

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <NMI_Handler+0x4>

08001c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <MemManage_Handler+0x4>

08001c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <USB_LP_IRQHandler+0x10>)
 8001c46:	f001 fdb4 	bl	80037b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200071a0 	.word	0x200071a0

08001c54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c5a:	f004 fadd 	bl	8006218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200004e0 	.word	0x200004e0

08001c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return 1;
 8001c6c:	2301      	movs	r3, #1
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_kill>:

int _kill(int pid, int sig)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c82:	f00d f919 	bl	800eeb8 <__errno>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2216      	movs	r2, #22
 8001c8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_exit>:

void _exit (int status)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ffe7 	bl	8001c78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001caa:	bf00      	nop
 8001cac:	e7fd      	b.n	8001caa <_exit+0x12>

08001cae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e00a      	b.n	8001cd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc0:	f3af 8000 	nop.w
 8001cc4:	4601      	mov	r1, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	60ba      	str	r2, [r7, #8]
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dbf0      	blt.n	8001cc0 <_read+0x12>
  }

  return len;
 8001cde:	687b      	ldr	r3, [r7, #4]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e009      	b.n	8001d0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	60ba      	str	r2, [r7, #8]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dbf1      	blt.n	8001cfa <_write+0x12>
  }
  return len;
 8001d16:	687b      	ldr	r3, [r7, #4]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_close>:

int _close(int file)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d48:	605a      	str	r2, [r3, #4]
  return 0;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_isatty>:

int _isatty(int file)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f00d f87e 	bl	800eeb8 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	@ (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2001c000 	.word	0x2001c000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	2000052c 	.word	0x2000052c
 8001df0:	200077e8 	.word	0x200077e8

08001df4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <SystemInit+0x20>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfe:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <SystemInit+0x20>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e18:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e1c:	f7ff ffea 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e20:	480c      	ldr	r0, [pc, #48]	@ (8001e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e22:	490d      	ldr	r1, [pc, #52]	@ (8001e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <LoopForever+0xe>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e38:	4c0a      	ldr	r4, [pc, #40]	@ (8001e64 <LoopForever+0x16>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e46:	f00d f83d 	bl	800eec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e4a:	f7ff facb 	bl	80013e4 <main>

08001e4e <LoopForever>:

LoopForever:
    b LoopForever
 8001e4e:	e7fe      	b.n	8001e4e <LoopForever>
  ldr   r0, =_estack
 8001e50:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001e5c:	080117a0 	.word	0x080117a0
  ldr r2, =_sbss
 8001e60:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001e64:	200077e8 	.word	0x200077e8

08001e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC1_2_IRQHandler>

08001e6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f8fe 	bl	8002076 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f7ff fe58 	bl	8001b30 <HAL_InitTick>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	71fb      	strb	r3, [r7, #7]
 8001e8a:	e001      	b.n	8001e90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e8c:	f7ff fd1a 	bl	80018c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e90:	79fb      	ldrb	r3, [r7, #7]

}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_IncTick+0x1c>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_IncTick+0x20>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a03      	ldr	r2, [pc, #12]	@ (8001eb8 <HAL_IncTick+0x1c>)
 8001eac:	6013      	str	r3, [r2, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	20000530 	.word	0x20000530
 8001ebc:	20000008 	.word	0x20000008

08001ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	@ (8001ed4 <HAL_GetTick+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000530 	.word	0x20000530

08001ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee0:	f7ff ffee 	bl	8001ec0 <HAL_GetTick>
 8001ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ef0:	d004      	beq.n	8001efc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_Delay+0x40>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4413      	add	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efc:	bf00      	nop
 8001efe:	f7ff ffdf 	bl	8001ec0 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d8f7      	bhi.n	8001efe <HAL_Delay+0x26>
  {
  }
}
 8001f0e:	bf00      	nop
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000008 	.word	0x20000008

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	@ (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	@ (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	@ (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	@ 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ff4c 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800209a:	f7ff ff63 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 800209e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	6978      	ldr	r0, [r7, #20]
 80020a6:	f7ff ffb3 	bl	8002010 <NVIC_EncodePriority>
 80020aa:	4602      	mov	r2, r0
 80020ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff82 	bl	8001fbc <__NVIC_SetPriority>
}
 80020b8:	bf00      	nop
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff56 	bl	8001f80 <__NVIC_EnableIRQ>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e147      	b.n	800237e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fc08 	bl	8001918 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0210 	bic.w	r2, r2, #16
 8002116:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002118:	f7ff fed2 	bl	8001ec0 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800211e:	e012      	b.n	8002146 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002120:	f7ff fece 	bl	8001ec0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b0a      	cmp	r3, #10
 800212c:	d90b      	bls.n	8002146 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2203      	movs	r2, #3
 800213e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e11b      	b.n	800237e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b08      	cmp	r3, #8
 8002152:	d0e5      	beq.n	8002120 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002164:	f7ff feac 	bl	8001ec0 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800216a:	e012      	b.n	8002192 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800216c:	f7ff fea8 	bl	8001ec0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b0a      	cmp	r3, #10
 8002178:	d90b      	bls.n	8002192 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2203      	movs	r2, #3
 800218a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e0f5      	b.n	800237e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0e5      	beq.n	800216c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0202 	orr.w	r2, r2, #2
 80021ae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a74      	ldr	r2, [pc, #464]	@ (8002388 <HAL_FDCAN_Init+0x2ac>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d103      	bne.n	80021c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80021ba:	4a74      	ldr	r2, [pc, #464]	@ (800238c <HAL_FDCAN_Init+0x2b0>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7c1b      	ldrb	r3, [r3, #16]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d108      	bne.n	80021dc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021d8:	619a      	str	r2, [r3, #24]
 80021da:	e007      	b.n	80021ec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7c5b      	ldrb	r3, [r3, #17]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d108      	bne.n	8002206 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002202:	619a      	str	r2, [r3, #24]
 8002204:	e007      	b.n	8002216 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002214:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7c9b      	ldrb	r3, [r3, #18]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d108      	bne.n	8002230 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800222c:	619a      	str	r2, [r3, #24]
 800222e:	e007      	b.n	8002240 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800223e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699a      	ldr	r2, [r3, #24]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002264:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0210 	bic.w	r2, r2, #16
 8002274:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0204 	orr.w	r2, r2, #4
 800228c:	619a      	str	r2, [r3, #24]
 800228e:	e02c      	b.n	80022ea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d028      	beq.n	80022ea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d01c      	beq.n	80022da <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022ae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0210 	orr.w	r2, r2, #16
 80022be:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d110      	bne.n	80022ea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0220 	orr.w	r2, r2, #32
 80022d6:	619a      	str	r2, [r3, #24]
 80022d8:	e007      	b.n	80022ea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0220 	orr.w	r2, r2, #32
 80022e8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022fa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002302:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	3b01      	subs	r3, #1
 800230c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002312:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002314:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800231e:	d115      	bne.n	800234c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002324:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	3b01      	subs	r3, #1
 800232c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800232e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	3b01      	subs	r3, #1
 8002336:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002338:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	3b01      	subs	r3, #1
 8002342:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002348:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800234a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f880 	bl	8002468 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40006400 	.word	0x40006400
 800238c:	40006500 	.word	0x40006500

08002390 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d110      	bne.n	80023c6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e006      	b.n	80023d4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ca:	f043 0204 	orr.w	r2, r3, #4
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
  }
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d12c      	bne.n	8002452 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800240c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e023      	b.n	8002460 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f87c 	bl	800252c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2101      	movs	r1, #1
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002444:	2201      	movs	r2, #1
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	409a      	lsls	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e006      	b.n	8002460 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002456:	f043 0208 	orr.w	r2, r3, #8
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
  }
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002470:	4b2c      	ldr	r3, [pc, #176]	@ (8002524 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002472:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2b      	ldr	r2, [pc, #172]	@ (8002528 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d103      	bne.n	8002486 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002484:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002494:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249c:	041a      	lsls	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024ba:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c2:	061a      	lsls	r2, r3, #24
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	e005      	b.n	8002508 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	3304      	adds	r3, #4
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	429a      	cmp	r2, r3
 8002512:	d3f3      	bcc.n	80024fc <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	4000a400 	.word	0x4000a400
 8002528:	40006800 	.word	0x40006800

0800252c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	@ 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800254a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002552:	4313      	orrs	r3, r2
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e00a      	b.n	800256e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002560:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002566:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002568:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800256c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002578:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800257e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002584:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	440b      	add	r3, r1
 80025a0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	3304      	adds	r3, #4
 80025ac:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	3304      	adds	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e020      	b.n	8002602 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3303      	adds	r3, #3
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3302      	adds	r3, #2
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	440b      	add	r3, r1
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80025d8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	440b      	add	r3, r1
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80025e6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	440a      	add	r2, r1
 80025ee:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80025f0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	3304      	adds	r3, #4
 80025fa:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3304      	adds	r3, #4
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	4a06      	ldr	r2, [pc, #24]	@ (8002620 <FDCAN_CopyMessageToRAM+0xf4>)
 8002608:	5cd3      	ldrb	r3, [r2, r3]
 800260a:	461a      	mov	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	4293      	cmp	r3, r2
 8002610:	d3d6      	bcc.n	80025c0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002612:	bf00      	nop
 8002614:	bf00      	nop
 8002616:	3724      	adds	r7, #36	@ 0x24
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	080113e8 	.word	0x080113e8

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002632:	e15a      	b.n	80028ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	fa01 f303 	lsl.w	r3, r1, r3
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 814c 	beq.w	80028e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d005      	beq.n	8002664 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002660:	2b02      	cmp	r3, #2
 8002662:	d130      	bne.n	80026c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800269a:	2201      	movs	r2, #1
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 0201 	and.w	r2, r3, #1
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d017      	beq.n	8002702 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	2203      	movs	r2, #3
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d123      	bne.n	8002756 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	08da      	lsrs	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3208      	adds	r2, #8
 8002716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	220f      	movs	r2, #15
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	08da      	lsrs	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3208      	adds	r2, #8
 8002750:	6939      	ldr	r1, [r7, #16]
 8002752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	2203      	movs	r2, #3
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0203 	and.w	r2, r3, #3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80a6 	beq.w	80028e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002798:	4b5b      	ldr	r3, [pc, #364]	@ (8002908 <HAL_GPIO_Init+0x2e4>)
 800279a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279c:	4a5a      	ldr	r2, [pc, #360]	@ (8002908 <HAL_GPIO_Init+0x2e4>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80027a4:	4b58      	ldr	r3, [pc, #352]	@ (8002908 <HAL_GPIO_Init+0x2e4>)
 80027a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b0:	4a56      	ldr	r2, [pc, #344]	@ (800290c <HAL_GPIO_Init+0x2e8>)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027da:	d01f      	beq.n	800281c <HAL_GPIO_Init+0x1f8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a4c      	ldr	r2, [pc, #304]	@ (8002910 <HAL_GPIO_Init+0x2ec>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d019      	beq.n	8002818 <HAL_GPIO_Init+0x1f4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a4b      	ldr	r2, [pc, #300]	@ (8002914 <HAL_GPIO_Init+0x2f0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_GPIO_Init+0x1f0>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002918 <HAL_GPIO_Init+0x2f4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00d      	beq.n	8002810 <HAL_GPIO_Init+0x1ec>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a49      	ldr	r2, [pc, #292]	@ (800291c <HAL_GPIO_Init+0x2f8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d007      	beq.n	800280c <HAL_GPIO_Init+0x1e8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a48      	ldr	r2, [pc, #288]	@ (8002920 <HAL_GPIO_Init+0x2fc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d101      	bne.n	8002808 <HAL_GPIO_Init+0x1e4>
 8002804:	2305      	movs	r3, #5
 8002806:	e00a      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 8002808:	2306      	movs	r3, #6
 800280a:	e008      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 800280c:	2304      	movs	r3, #4
 800280e:	e006      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 8002810:	2303      	movs	r3, #3
 8002812:	e004      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 8002814:	2302      	movs	r3, #2
 8002816:	e002      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <HAL_GPIO_Init+0x1fa>
 800281c:	2300      	movs	r3, #0
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	f002 0203 	and.w	r2, r2, #3
 8002824:	0092      	lsls	r2, r2, #2
 8002826:	4093      	lsls	r3, r2
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800282e:	4937      	ldr	r1, [pc, #220]	@ (800290c <HAL_GPIO_Init+0x2e8>)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800283c:	4b39      	ldr	r3, [pc, #228]	@ (8002924 <HAL_GPIO_Init+0x300>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002860:	4a30      	ldr	r2, [pc, #192]	@ (8002924 <HAL_GPIO_Init+0x300>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002866:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <HAL_GPIO_Init+0x300>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800288a:	4a26      	ldr	r2, [pc, #152]	@ (8002924 <HAL_GPIO_Init+0x300>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002890:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <HAL_GPIO_Init+0x300>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002924 <HAL_GPIO_Init+0x300>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <HAL_GPIO_Init+0x300>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028de:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <HAL_GPIO_Init+0x300>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f ae9d 	bne.w	8002634 <HAL_GPIO_Init+0x10>
  }
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40021000 	.word	0x40021000
 800290c:	40010000 	.word	0x40010000
 8002910:	48000400 	.word	0x48000400
 8002914:	48000800 	.word	0x48000800
 8002918:	48000c00 	.word	0x48000c00
 800291c:	48001000 	.word	0x48001000
 8002920:	48001400 	.word	0x48001400
 8002924:	40010400 	.word	0x40010400

08002928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
 8002934:	4613      	mov	r3, r2
 8002936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002938:	787b      	ldrb	r3, [r7, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002944:	e002      	b.n	800294c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4013      	ands	r3, r2
 8002970:	041a      	lsls	r2, r3, #16
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	43d9      	mvns	r1, r3
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	400b      	ands	r3, r1
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	619a      	str	r2, [r3, #24]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e08d      	b.n	8002aba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff f80c 	bl	80019d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	@ 0x24
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	e006      	b.n	8002a14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d108      	bne.n	8002a2e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	e007      	b.n	8002a3e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69d9      	ldr	r1, [r3, #28]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	4608      	mov	r0, r1
 8002ace:	4611      	mov	r1, r2
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	817b      	strh	r3, [r7, #10]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	813b      	strh	r3, [r7, #8]
 8002ada:	4613      	mov	r3, r2
 8002adc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	f040 80f9 	bne.w	8002cde <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_I2C_Mem_Write+0x34>
 8002af2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002afe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0ed      	b.n	8002ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_I2C_Mem_Write+0x4e>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e0e6      	b.n	8002ce0 <HAL_I2C_Mem_Write+0x21c>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b1a:	f7ff f9d1 	bl	8001ec0 <HAL_GetTick>
 8002b1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	2319      	movs	r3, #25
 8002b26:	2201      	movs	r2, #1
 8002b28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fac3 	bl	80030b8 <I2C_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0d1      	b.n	8002ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2221      	movs	r2, #33	@ 0x21
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2240      	movs	r2, #64	@ 0x40
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a3a      	ldr	r2, [r7, #32]
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b64:	88f8      	ldrh	r0, [r7, #6]
 8002b66:	893a      	ldrh	r2, [r7, #8]
 8002b68:	8979      	ldrh	r1, [r7, #10]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	4603      	mov	r3, r0
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f9d3 	bl	8002f20 <I2C_RequestMemoryWrite>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0a9      	b.n	8002ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2bff      	cmp	r3, #255	@ 0xff
 8002b94:	d90e      	bls.n	8002bb4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	22ff      	movs	r2, #255	@ 0xff
 8002b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	8979      	ldrh	r1, [r7, #10]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fc47 	bl	8003440 <I2C_TransferConfig>
 8002bb2:	e00f      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	8979      	ldrh	r1, [r7, #10]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fc36 	bl	8003440 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fac6 	bl	800316a <I2C_WaitOnTXISFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e07b      	b.n	8002ce0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d034      	beq.n	8002c8c <HAL_I2C_Mem_Write+0x1c8>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d130      	bne.n	8002c8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c30:	2200      	movs	r2, #0
 8002c32:	2180      	movs	r1, #128	@ 0x80
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fa3f 	bl	80030b8 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e04d      	b.n	8002ce0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2bff      	cmp	r3, #255	@ 0xff
 8002c4c:	d90e      	bls.n	8002c6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	22ff      	movs	r2, #255	@ 0xff
 8002c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	8979      	ldrh	r1, [r7, #10]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fbeb 	bl	8003440 <I2C_TransferConfig>
 8002c6a:	e00f      	b.n	8002c8c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	8979      	ldrh	r1, [r7, #10]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fbda 	bl	8003440 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d19e      	bne.n	8002bd4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 faac 	bl	80031f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e01a      	b.n	8002ce0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <HAL_I2C_Mem_Write+0x224>)
 8002cbe:	400b      	ands	r3, r1
 8002cc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e000      	b.n	8002ce0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	fe00e800 	.word	0xfe00e800

08002cec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	817b      	strh	r3, [r7, #10]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	813b      	strh	r3, [r7, #8]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	f040 80fd 	bne.w	8002f0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <HAL_I2C_Mem_Read+0x34>
 8002d1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d26:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0f1      	b.n	8002f10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_I2C_Mem_Read+0x4e>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e0ea      	b.n	8002f10 <HAL_I2C_Mem_Read+0x224>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d42:	f7ff f8bd 	bl	8001ec0 <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2319      	movs	r3, #25
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f9af 	bl	80030b8 <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0d5      	b.n	8002f10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2222      	movs	r2, #34	@ 0x22
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2240      	movs	r2, #64	@ 0x40
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a3a      	ldr	r2, [r7, #32]
 8002d7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d8c:	88f8      	ldrh	r0, [r7, #6]
 8002d8e:	893a      	ldrh	r2, [r7, #8]
 8002d90:	8979      	ldrh	r1, [r7, #10]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f913 	bl	8002fc8 <I2C_RequestMemoryRead>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0ad      	b.n	8002f10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2bff      	cmp	r3, #255	@ 0xff
 8002dbc:	d90e      	bls.n	8002ddc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	22ff      	movs	r2, #255	@ 0xff
 8002dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	8979      	ldrh	r1, [r7, #10]
 8002dcc:	4b52      	ldr	r3, [pc, #328]	@ (8002f18 <HAL_I2C_Mem_Read+0x22c>)
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fb33 	bl	8003440 <I2C_TransferConfig>
 8002dda:	e00f      	b.n	8002dfc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	8979      	ldrh	r1, [r7, #10]
 8002dee:	4b4a      	ldr	r3, [pc, #296]	@ (8002f18 <HAL_I2C_Mem_Read+0x22c>)
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fb22 	bl	8003440 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e02:	2200      	movs	r2, #0
 8002e04:	2104      	movs	r1, #4
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f956 	bl	80030b8 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07c      	b.n	8002f10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d034      	beq.n	8002ebc <HAL_I2C_Mem_Read+0x1d0>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d130      	bne.n	8002ebc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e60:	2200      	movs	r2, #0
 8002e62:	2180      	movs	r1, #128	@ 0x80
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f927 	bl	80030b8 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e04d      	b.n	8002f10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2bff      	cmp	r3, #255	@ 0xff
 8002e7c:	d90e      	bls.n	8002e9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	22ff      	movs	r2, #255	@ 0xff
 8002e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	8979      	ldrh	r1, [r7, #10]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fad3 	bl	8003440 <I2C_TransferConfig>
 8002e9a:	e00f      	b.n	8002ebc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	8979      	ldrh	r1, [r7, #10]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fac2 	bl	8003440 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d19a      	bne.n	8002dfc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f994 	bl	80031f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e01a      	b.n	8002f10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <HAL_I2C_Mem_Read+0x230>)
 8002eee:	400b      	ands	r3, r1
 8002ef0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	80002400 	.word	0x80002400
 8002f1c:	fe00e800 	.word	0xfe00e800

08002f20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	4608      	mov	r0, r1
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	817b      	strh	r3, [r7, #10]
 8002f32:	460b      	mov	r3, r1
 8002f34:	813b      	strh	r3, [r7, #8]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	8979      	ldrh	r1, [r7, #10]
 8002f40:	4b20      	ldr	r3, [pc, #128]	@ (8002fc4 <I2C_RequestMemoryWrite+0xa4>)
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fa79 	bl	8003440 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	69b9      	ldr	r1, [r7, #24]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f909 	bl	800316a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e02c      	b.n	8002fbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f68:	893b      	ldrh	r3, [r7, #8]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f72:	e015      	b.n	8002fa0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f74:	893b      	ldrh	r3, [r7, #8]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	69b9      	ldr	r1, [r7, #24]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8ef 	bl	800316a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e012      	b.n	8002fbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f96:	893b      	ldrh	r3, [r7, #8]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2180      	movs	r1, #128	@ 0x80
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f884 	bl	80030b8 <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	80002000 	.word	0x80002000

08002fc8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	817b      	strh	r3, [r7, #10]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	813b      	strh	r3, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	8979      	ldrh	r1, [r7, #10]
 8002fe8:	4b20      	ldr	r3, [pc, #128]	@ (800306c <I2C_RequestMemoryRead+0xa4>)
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	2300      	movs	r3, #0
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fa26 	bl	8003440 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	69b9      	ldr	r1, [r7, #24]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f8b6 	bl	800316a <I2C_WaitOnTXISFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e02c      	b.n	8003062 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d105      	bne.n	800301a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800300e:	893b      	ldrh	r3, [r7, #8]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	629a      	str	r2, [r3, #40]	@ 0x28
 8003018:	e015      	b.n	8003046 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800301a:	893b      	ldrh	r3, [r7, #8]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	b29b      	uxth	r3, r3
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f89c 	bl	800316a <I2C_WaitOnTXISFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e012      	b.n	8003062 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800303c:	893b      	ldrh	r3, [r7, #8]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2200      	movs	r2, #0
 800304e:	2140      	movs	r1, #64	@ 0x40
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f831 	bl	80030b8 <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	80002000 	.word	0x80002000

08003070 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	d103      	bne.n	800308e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2200      	movs	r2, #0
 800308c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d007      	beq.n	80030ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	619a      	str	r2, [r3, #24]
  }
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c8:	e03b      	b.n	8003142 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	6839      	ldr	r1, [r7, #0]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f8d6 	bl	8003280 <I2C_IsErrorOccurred>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e041      	b.n	8003162 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030e4:	d02d      	beq.n	8003142 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fe feeb 	bl	8001ec0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d122      	bne.n	8003142 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	429a      	cmp	r2, r3
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	429a      	cmp	r2, r3
 8003118:	d113      	bne.n	8003142 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	f043 0220 	orr.w	r2, r3, #32
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699a      	ldr	r2, [r3, #24]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4013      	ands	r3, r2
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	429a      	cmp	r2, r3
 800315e:	d0b4      	beq.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003176:	e033      	b.n	80031e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f87f 	bl	8003280 <I2C_IsErrorOccurred>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e031      	b.n	80031f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003192:	d025      	beq.n	80031e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003194:	f7fe fe94 	bl	8001ec0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d302      	bcc.n	80031aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d11a      	bne.n	80031e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d013      	beq.n	80031e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e007      	b.n	80031f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d1c4      	bne.n	8003178 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003204:	e02f      	b.n	8003266 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f838 	bl	8003280 <I2C_IsErrorOccurred>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e02d      	b.n	8003276 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321a:	f7fe fe51 	bl	8001ec0 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11a      	bne.n	8003266 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b20      	cmp	r3, #32
 800323c:	d013      	beq.n	8003266 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e007      	b.n	8003276 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b20      	cmp	r3, #32
 8003272:	d1c8      	bne.n	8003206 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	@ 0x28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d068      	beq.n	800337e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2210      	movs	r2, #16
 80032b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032b4:	e049      	b.n	800334a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032bc:	d045      	beq.n	800334a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032be:	f7fe fdff 	bl	8001ec0 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d302      	bcc.n	80032d4 <I2C_IsErrorOccurred+0x54>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d13a      	bne.n	800334a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032f6:	d121      	bne.n	800333c <I2C_IsErrorOccurred+0xbc>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032fe:	d01d      	beq.n	800333c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	2b20      	cmp	r3, #32
 8003304:	d01a      	beq.n	800333c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003314:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003316:	f7fe fdd3 	bl	8001ec0 <HAL_GetTick>
 800331a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800331c:	e00e      	b.n	800333c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800331e:	f7fe fdcf 	bl	8001ec0 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b19      	cmp	r3, #25
 800332a:	d907      	bls.n	800333c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	f043 0320 	orr.w	r3, r3, #32
 8003332:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800333a:	e006      	b.n	800334a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b20      	cmp	r3, #32
 8003348:	d1e9      	bne.n	800331e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b20      	cmp	r3, #32
 8003356:	d003      	beq.n	8003360 <I2C_IsErrorOccurred+0xe0>
 8003358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0aa      	beq.n	80032b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003364:	2b00      	cmp	r3, #0
 8003366:	d103      	bne.n	8003370 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2220      	movs	r2, #32
 800336e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	f043 0304 	orr.w	r3, r3, #4
 8003376:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00b      	beq.n	80033a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f043 0308 	orr.w	r3, r3, #8
 80033b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f043 0302 	orr.w	r3, r3, #2
 80033da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80033ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01c      	beq.n	800342e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff fe3b 	bl	8003070 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0d      	ldr	r3, [pc, #52]	@ (800343c <I2C_IsErrorOccurred+0x1bc>)
 8003406:	400b      	ands	r3, r1
 8003408:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	431a      	orrs	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800342e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003432:	4618      	mov	r0, r3
 8003434:	3728      	adds	r7, #40	@ 0x28
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	fe00e800 	.word	0xfe00e800

08003440 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	817b      	strh	r3, [r7, #10]
 800344e:	4613      	mov	r3, r2
 8003450:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003458:	7a7b      	ldrb	r3, [r7, #9]
 800345a:	041b      	lsls	r3, r3, #16
 800345c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003460:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	4313      	orrs	r3, r2
 800346a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800346e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	0d5b      	lsrs	r3, r3, #21
 800347a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800347e:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <I2C_TransferConfig+0x60>)
 8003480:	430b      	orrs	r3, r1
 8003482:	43db      	mvns	r3, r3
 8003484:	ea02 0103 	and.w	r1, r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	03ff63ff 	.word	0x03ff63ff

080034a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d138      	bne.n	800352c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e032      	b.n	800352e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2224      	movs	r2, #36	@ 0x24
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b20      	cmp	r3, #32
 800354e:	d139      	bne.n	80035c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800355a:	2302      	movs	r3, #2
 800355c:	e033      	b.n	80035c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2224      	movs	r2, #36	@ 0x24
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800358c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0c0      	b.n	8003766 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f00a fba3 	bl	800dd44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2203      	movs	r2, #3
 8003602:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fef1 	bl	80073f2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
 8003614:	e03e      	b.n	8003694 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	440b      	add	r3, r1
 8003624:	3311      	adds	r3, #17
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	440b      	add	r3, r1
 8003638:	3310      	adds	r3, #16
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	440b      	add	r3, r1
 800364c:	3313      	adds	r3, #19
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	440b      	add	r3, r1
 8003660:	3320      	adds	r3, #32
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	440b      	add	r3, r1
 8003674:	3324      	adds	r3, #36	@ 0x24
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	440b      	add	r3, r1
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	3301      	adds	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	791b      	ldrb	r3, [r3, #4]
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	429a      	cmp	r2, r3
 800369c:	d3bb      	bcc.n	8003616 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	e044      	b.n	800372e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	440b      	add	r3, r1
 80036b2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	440b      	add	r3, r1
 80036de:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036fc:	7bfa      	ldrb	r2, [r7, #15]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	440b      	add	r3, r1
 800370a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	3301      	adds	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	791b      	ldrb	r3, [r3, #4]
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	429a      	cmp	r2, r3
 8003736:	d3b5      	bcc.n	80036a4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003744:	f003 fe70 	bl	8007428 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7a9b      	ldrb	r3, [r3, #10]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d102      	bne.n	8003764 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f001 fc0e 	bl	8004f80 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_PCD_Start+0x16>
 8003780:	2302      	movs	r3, #2
 8003782:	e012      	b.n	80037aa <HAL_PCD_Start+0x3c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f003 fe17 	bl	80073c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f005 fbf4 	bl	8008f88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f005 fbf9 	bl	8008fb6 <USB_ReadInterrupts>
 80037c4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fb06 	bl	8003de2 <PCD_EP_ISR_Handler>

    return;
 80037d6:	e110      	b.n	80039fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d013      	beq.n	800380a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037f4:	b292      	uxth	r2, r2
 80037f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f00a fb33 	bl	800de66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003800:	2100      	movs	r1, #0
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f8fc 	bl	8003a00 <HAL_PCD_SetAddress>

    return;
 8003808:	e0f7      	b.n	80039fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00c      	beq.n	800382e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003826:	b292      	uxth	r2, r2
 8003828:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800382c:	e0e5      	b.n	80039fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00c      	beq.n	8003852 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003840:	b29a      	uxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800384a:	b292      	uxth	r2, r2
 800384c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003850:	e0d3      	b.n	80039fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d034      	beq.n	80038c6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0204 	bic.w	r2, r2, #4
 800386e:	b292      	uxth	r2, r2
 8003870:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0208 	bic.w	r2, r2, #8
 8003886:	b292      	uxth	r2, r2
 8003888:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800389e:	2100      	movs	r1, #0
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f00a fcd3 	bl	800e24c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f00a fb16 	bl	800ded8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038be:	b292      	uxth	r2, r2
 80038c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038c4:	e099      	b.n	80039fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d027      	beq.n	8003920 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038d8:	b29a      	uxth	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0208 	orr.w	r2, r2, #8
 80038e2:	b292      	uxth	r2, r2
 80038e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038fa:	b292      	uxth	r2, r2
 80038fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003908:	b29a      	uxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0204 	orr.w	r2, r2, #4
 8003912:	b292      	uxth	r2, r2
 8003914:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f00a fac3 	bl	800dea4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800391e:	e06c      	b.n	80039fa <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d040      	beq.n	80039ac <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800393c:	b292      	uxth	r2, r2
 800393e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d12b      	bne.n	80039a4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003954:	b29a      	uxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0204 	orr.w	r2, r2, #4
 800395e:	b292      	uxth	r2, r2
 8003960:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800396c:	b29a      	uxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0208 	orr.w	r2, r2, #8
 8003976:	b292      	uxth	r2, r2
 8003978:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800398c:	b29b      	uxth	r3, r3
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800399a:	2101      	movs	r1, #1
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f00a fc55 	bl	800e24c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80039a2:	e02a      	b.n	80039fa <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f00a fa7d 	bl	800dea4 <HAL_PCD_SuspendCallback>
    return;
 80039aa:	e026      	b.n	80039fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00f      	beq.n	80039d6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039c8:	b292      	uxth	r2, r2
 80039ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f00a fa3b 	bl	800de4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80039d4:	e011      	b.n	80039fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00c      	beq.n	80039fa <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039f2:	b292      	uxth	r2, r2
 80039f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039f8:	bf00      	nop
  }
}
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_PCD_SetAddress+0x1a>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e012      	b.n	8003a40 <HAL_PCD_SetAddress+0x40>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f005 fa95 	bl	8008f60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	70fb      	strb	r3, [r7, #3]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	803b      	strh	r3, [r7, #0]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da0e      	bge.n	8003a8c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 0207 	and.w	r2, r3, #7
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	3310      	adds	r3, #16
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	705a      	strb	r2, [r3, #1]
 8003a8a:	e00e      	b.n	8003aaa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	f003 0207 	and.w	r2, r3, #7
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003ab6:	883b      	ldrh	r3, [r7, #0]
 8003ab8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	78ba      	ldrb	r2, [r7, #2]
 8003ac4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ac6:	78bb      	ldrb	r3, [r7, #2]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d102      	bne.n	8003ad2 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_PCD_EP_Open+0x98>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e00e      	b.n	8003afe <HAL_PCD_EP_Open+0xb6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68f9      	ldr	r1, [r7, #12]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f003 fcb8 	bl	8007464 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003afc:	7afb      	ldrb	r3, [r7, #11]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	da0e      	bge.n	8003b38 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 0207 	and.w	r2, r3, #7
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	3310      	adds	r3, #16
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	705a      	strb	r2, [r3, #1]
 8003b36:	e00e      	b.n	8003b56 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	f003 0207 	and.w	r2, r3, #7
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_PCD_EP_Close+0x6a>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e00e      	b.n	8003b8e <HAL_PCD_EP_Close+0x88>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68f9      	ldr	r1, [r7, #12]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f004 f958 	bl	8007e34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba6:	7afb      	ldrb	r3, [r7, #11]
 8003ba8:	f003 0207 	and.w	r2, r3, #7
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6979      	ldr	r1, [r7, #20]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f004 fb10 	bl	800820e <USB_EPStartXfer>

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 0207 	and.w	r2, r3, #7
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	440b      	add	r3, r1
 8003c16:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	460b      	mov	r3, r1
 8003c36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c38:	7afb      	ldrb	r3, [r7, #11]
 8003c3a:	f003 0207 	and.w	r2, r3, #7
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	3310      	adds	r3, #16
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2201      	movs	r2, #1
 8003c72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c74:	7afb      	ldrb	r3, [r7, #11]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6979      	ldr	r1, [r7, #20]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f004 fac1 	bl	800820e <USB_EPStartXfer>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	7912      	ldrb	r2, [r2, #4]
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e03e      	b.n	8003d32 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	da0e      	bge.n	8003cda <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 0207 	and.w	r2, r3, #7
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	3310      	adds	r3, #16
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	705a      	strb	r2, [r3, #1]
 8003cd8:	e00c      	b.n	8003cf4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_PCD_EP_SetStall+0x7e>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e00e      	b.n	8003d32 <HAL_PCD_EP_SetStall+0x9c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f005 f822 	bl	8008d6c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	7912      	ldrb	r2, [r2, #4]
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e040      	b.n	8003dda <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	da0e      	bge.n	8003d7e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	f003 0207 	and.w	r2, r3, #7
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	3310      	adds	r3, #16
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	705a      	strb	r2, [r3, #1]
 8003d7c:	e00e      	b.n	8003d9c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	f003 0207 	and.w	r2, r3, #7
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	4413      	add	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_PCD_EP_ClrStall+0x82>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e00e      	b.n	8003dda <HAL_PCD_EP_ClrStall+0xa0>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f005 f81f 	bl	8008e0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b092      	sub	sp, #72	@ 0x48
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dea:	e333      	b.n	8004454 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003df4:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003df6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003e02:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 8108 	bne.w	800401c <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e0c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d14c      	bne.n	8003eb0 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e26:	813b      	strh	r3, [r7, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	893b      	ldrh	r3, [r7, #8]
 8003e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3310      	adds	r3, #16
 8003e3e:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	441a      	add	r2, r3
 8003e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e74:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e76:	2100      	movs	r1, #0
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f009 ffcc 	bl	800de16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	7b1b      	ldrb	r3, [r3, #12]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 82e5 	beq.w	8004454 <PCD_EP_ISR_Handler+0x672>
 8003e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f040 82e0 	bne.w	8004454 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	7b1b      	ldrb	r3, [r3, #12]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	731a      	strb	r2, [r3, #12]
 8003eae:	e2d1      	b.n	8004454 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003eb6:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003ec0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d032      	beq.n	8003f30 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6812      	ldr	r2, [r2, #0]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003efe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f005 f8a8 	bl	800905a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f16:	4013      	ands	r3, r2
 8003f18:	817b      	strh	r3, [r7, #10]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	897a      	ldrh	r2, [r7, #10]
 8003f20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f24:	b292      	uxth	r2, r2
 8003f26:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f009 ff47 	bl	800ddbc <HAL_PCD_SetupStageCallback>
 8003f2e:	e291      	b.n	8004454 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f30:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f280 828d 	bge.w	8004454 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f46:	4013      	ands	r3, r2
 8003f48:	81fb      	strh	r3, [r7, #14]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	89fa      	ldrh	r2, [r7, #14]
 8003f50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f54:	b292      	uxth	r2, r2
 8003f56:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	4413      	add	r3, r2
 8003f72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f7e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d019      	beq.n	8003fbc <PCD_EP_ISR_Handler+0x1da>
 8003f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d015      	beq.n	8003fbc <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f96:	6959      	ldr	r1, [r3, #20]
 8003f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f005 f85a 	bl	800905a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	441a      	add	r2, r3
 8003fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fb2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f009 ff12 	bl	800dde0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003fc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003fc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 8242 	bne.w	8004454 <PCD_EP_ISR_Handler+0x672>
 8003fd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003fd2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fda:	f000 823b 	beq.w	8004454 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fee:	81bb      	strh	r3, [r7, #12]
 8003ff0:	89bb      	ldrh	r3, [r7, #12]
 8003ff2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003ff6:	81bb      	strh	r3, [r7, #12]
 8003ff8:	89bb      	ldrh	r3, [r7, #12]
 8003ffa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ffe:	81bb      	strh	r3, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	89bb      	ldrh	r3, [r7, #12]
 8004006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800400a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800400e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004016:	b29b      	uxth	r3, r3
 8004018:	8013      	strh	r3, [r2, #0]
 800401a:	e21b      	b.n	8004454 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800402e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004032:	2b00      	cmp	r3, #0
 8004034:	f280 80f1 	bge.w	800421a <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29a      	uxth	r2, r3
 800404a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800404e:	4013      	ands	r3, r2
 8004050:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004062:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004066:	b292      	uxth	r2, r2
 8004068:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800406a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004082:	7b1b      	ldrb	r3, [r3, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d123      	bne.n	80040d0 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004090:	b29b      	uxth	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4413      	add	r3, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	4413      	add	r3, r2
 80040a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80040b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 808b 	beq.w	80041d0 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c0:	6959      	ldr	r1, [r3, #20]
 80040c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c4:	88da      	ldrh	r2, [r3, #6]
 80040c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040ca:	f004 ffc6 	bl	800905a <USB_ReadPMA>
 80040ce:	e07f      	b.n	80041d0 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040d2:	78db      	ldrb	r3, [r3, #3]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d109      	bne.n	80040ec <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80040da:	461a      	mov	r2, r3
 80040dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f9c6 	bl	8004470 <HAL_PCD_EP_DB_Receive>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80040ea:	e071      	b.n	80041d0 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004106:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	441a      	add	r2, r3
 8004116:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800411c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004124:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004128:	b29b      	uxth	r3, r3
 800412a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d022      	beq.n	800418c <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4413      	add	r3, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	4413      	add	r3, r2
 8004160:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800416a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800416e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004172:	2b00      	cmp	r3, #0
 8004174:	d02c      	beq.n	80041d0 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800417c:	6959      	ldr	r1, [r3, #20]
 800417e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004180:	891a      	ldrh	r2, [r3, #8]
 8004182:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004186:	f004 ff68 	bl	800905a <USB_ReadPMA>
 800418a:	e021      	b.n	80041d0 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004194:	b29b      	uxth	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	4413      	add	r3, r2
 80041a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80041b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c2:	6959      	ldr	r1, [r3, #20]
 80041c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c6:	895a      	ldrh	r2, [r3, #10]
 80041c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041cc:	f004 ff45 	bl	800905a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041d8:	441a      	add	r2, r3
 80041da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041e6:	441a      	add	r2, r3
 80041e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <PCD_EP_ISR_Handler+0x41e>
 80041f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80041f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d206      	bcs.n	800420e <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f009 fdea 	bl	800dde0 <HAL_PCD_DataOutStageCallback>
 800420c:	e005      	b.n	800421a <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004214:	4618      	mov	r0, r3
 8004216:	f003 fffa 	bl	800820e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800421a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800421c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8117 	beq.w	8004454 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8004226:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	3310      	adds	r3, #16
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004254:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	441a      	add	r2, r3
 8004264:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800426a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800426e:	b29b      	uxth	r3, r3
 8004270:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004274:	78db      	ldrb	r3, [r3, #3]
 8004276:	2b01      	cmp	r3, #1
 8004278:	f040 80a1 	bne.w	80043be <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800427c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800427e:	2200      	movs	r2, #0
 8004280:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004284:	7b1b      	ldrb	r3, [r3, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8092 	beq.w	80043b0 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800428c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800428e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d046      	beq.n	8004324 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d126      	bne.n	80042ec <PCD_EP_ISR_Handler+0x50a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	4413      	add	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	00da      	lsls	r2, r3, #3
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	4413      	add	r3, r2
 80042c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	801a      	strh	r2, [r3, #0]
 80042ea:	e061      	b.n	80043b0 <PCD_EP_ISR_Handler+0x5ce>
 80042ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d15d      	bne.n	80043b0 <PCD_EP_ISR_Handler+0x5ce>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004302:	b29b      	uxth	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	00da      	lsls	r2, r3, #3
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2200      	movs	r2, #0
 8004320:	801a      	strh	r2, [r3, #0]
 8004322:	e045      	b.n	80043b0 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800432a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d126      	bne.n	8004380 <PCD_EP_ISR_Handler+0x59e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004340:	b29b      	uxth	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	4413      	add	r3, r2
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24
 800434a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	00da      	lsls	r2, r3, #3
 8004350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004352:	4413      	add	r3, r2
 8004354:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004364:	b29a      	uxth	r2, r3
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b29b      	uxth	r3, r3
 8004370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004378:	b29a      	uxth	r2, r3
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	801a      	strh	r2, [r3, #0]
 800437e:	e017      	b.n	80043b0 <PCD_EP_ISR_Handler+0x5ce>
 8004380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004382:	785b      	ldrb	r3, [r3, #1]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d113      	bne.n	80043b0 <PCD_EP_ISR_Handler+0x5ce>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004390:	b29b      	uxth	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004396:	4413      	add	r3, r2
 8004398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800439a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	00da      	lsls	r2, r3, #3
 80043a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a2:	4413      	add	r3, r2
 80043a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	2200      	movs	r2, #0
 80043ae:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f009 fd2d 	bl	800de16 <HAL_PCD_DataInStageCallback>
 80043bc:	e04a      	b.n	8004454 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80043c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d13f      	bne.n	8004448 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	4413      	add	r3, r2
 80043e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ec:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80043ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d906      	bls.n	8004406 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80043f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043fa:	699a      	ldr	r2, [r3, #24]
 80043fc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80043fe:	1ad2      	subs	r2, r2, r3
 8004400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004402:	619a      	str	r2, [r3, #24]
 8004404:	e002      	b.n	800440c <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004408:	2200      	movs	r2, #0
 800440a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800440c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d106      	bne.n	8004422 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f009 fcfb 	bl	800de16 <HAL_PCD_DataInStageCallback>
 8004420:	e018      	b.n	8004454 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004428:	441a      	add	r2, r3
 800442a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800442c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800442e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004434:	441a      	add	r2, r3
 8004436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004438:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004440:	4618      	mov	r0, r3
 8004442:	f003 fee4 	bl	800820e <USB_EPStartXfer>
 8004446:	e005      	b.n	8004454 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004448:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800444a:	461a      	mov	r2, r3
 800444c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f917 	bl	8004682 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800445c:	b29b      	uxth	r3, r3
 800445e:	b21b      	sxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	f6ff acc3 	blt.w	8003dec <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3748      	adds	r7, #72	@ 0x48
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	4613      	mov	r3, r2
 800447c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d07c      	beq.n	8004582 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004490:	b29b      	uxth	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	4413      	add	r3, r2
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	4413      	add	r3, r2
 80044a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	8b7b      	ldrh	r3, [r7, #26]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d306      	bcc.n	80044c6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	699a      	ldr	r2, [r3, #24]
 80044bc:	8b7b      	ldrh	r3, [r7, #26]
 80044be:	1ad2      	subs	r2, r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	619a      	str	r2, [r3, #24]
 80044c4:	e002      	b.n	80044cc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d123      	bne.n	800451c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	833b      	strh	r3, [r7, #24]
 80044f0:	8b3b      	ldrh	r3, [r7, #24]
 80044f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044f6:	833b      	strh	r3, [r7, #24]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	8b3b      	ldrh	r3, [r7, #24]
 8004508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800450c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004518:	b29b      	uxth	r3, r3
 800451a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01f      	beq.n	8004566 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800453c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004540:	82fb      	strh	r3, [r7, #22]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	8afb      	ldrh	r3, [r7, #22]
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800455e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004566:	8b7b      	ldrh	r3, [r7, #26]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8085 	beq.w	8004678 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6959      	ldr	r1, [r3, #20]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	891a      	ldrh	r2, [r3, #8]
 800457a:	8b7b      	ldrh	r3, [r7, #26]
 800457c:	f004 fd6d 	bl	800905a <USB_ReadPMA>
 8004580:	e07a      	b.n	8004678 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800458a:	b29b      	uxth	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4413      	add	r3, r2
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	4413      	add	r3, r2
 800459c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	699a      	ldr	r2, [r3, #24]
 80045ac:	8b7b      	ldrh	r3, [r7, #26]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d306      	bcc.n	80045c0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	8b7b      	ldrh	r3, [r7, #26]
 80045b8:	1ad2      	subs	r2, r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	619a      	str	r2, [r3, #24]
 80045be:	e002      	b.n	80045c6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2200      	movs	r2, #0
 80045c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d123      	bne.n	8004616 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e8:	83fb      	strh	r3, [r7, #30]
 80045ea:	8bfb      	ldrh	r3, [r7, #30]
 80045ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045f0:	83fb      	strh	r3, [r7, #30]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	441a      	add	r2, r3
 8004600:	8bfb      	ldrh	r3, [r7, #30]
 8004602:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004606:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800460a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800460e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004612:	b29b      	uxth	r3, r3
 8004614:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11f      	bne.n	8004660 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463a:	83bb      	strh	r3, [r7, #28]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	441a      	add	r2, r3
 800464a:	8bbb      	ldrh	r3, [r7, #28]
 800464c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004650:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004658:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800465c:	b29b      	uxth	r3, r3
 800465e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004660:	8b7b      	ldrh	r3, [r7, #26]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6959      	ldr	r1, [r3, #20]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	895a      	ldrh	r2, [r3, #10]
 8004672:	8b7b      	ldrh	r3, [r7, #26]
 8004674:	f004 fcf1 	bl	800905a <USB_ReadPMA>
    }
  }

  return count;
 8004678:	8b7b      	ldrh	r3, [r7, #26]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b0a6      	sub	sp, #152	@ 0x98
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	4613      	mov	r3, r2
 800468e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004690:	88fb      	ldrh	r3, [r7, #6]
 8004692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 81f7 	beq.w	8004a8a <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4413      	add	r3, r2
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	4413      	add	r3, r2
 80046b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046c0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	699a      	ldr	r2, [r3, #24]
 80046c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d907      	bls.n	80046e0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	699a      	ldr	r2, [r3, #24]
 80046d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80046d8:	1ad2      	subs	r2, r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	619a      	str	r2, [r3, #24]
 80046de:	e002      	b.n	80046e6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2200      	movs	r2, #0
 80046e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 80e1 	bne.w	80048b2 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d126      	bne.n	8004746 <HAL_PCD_EP_DB_Transmit+0xc4>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004706:	b29b      	uxth	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470c:	4413      	add	r3, r2
 800470e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	00da      	lsls	r2, r3, #3
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	4413      	add	r3, r2
 800471a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800471e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800472a:	b29a      	uxth	r2, r3
 800472c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472e:	801a      	strh	r2, [r3, #0]
 8004730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800473a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473e:	b29a      	uxth	r2, r3
 8004740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	e01a      	b.n	800477c <HAL_PCD_EP_DB_Transmit+0xfa>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d116      	bne.n	800477c <HAL_PCD_EP_DB_Transmit+0xfa>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800475c:	b29b      	uxth	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004762:	4413      	add	r3, r2
 8004764:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	00da      	lsls	r2, r3, #3
 800476c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476e:	4413      	add	r3, r2
 8004770:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004774:	637b      	str	r3, [r7, #52]	@ 0x34
 8004776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004778:	2200      	movs	r2, #0
 800477a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d126      	bne.n	80047d8 <HAL_PCD_EP_DB_Transmit+0x156>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004798:	b29b      	uxth	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	4413      	add	r3, r2
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	00da      	lsls	r2, r3, #3
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	4413      	add	r3, r2
 80047ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047bc:	b29a      	uxth	r2, r3
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	801a      	strh	r2, [r3, #0]
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	e017      	b.n	8004808 <HAL_PCD_EP_DB_Transmit+0x186>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d113      	bne.n	8004808 <HAL_PCD_EP_DB_Transmit+0x186>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	4413      	add	r3, r2
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	00da      	lsls	r2, r3, #3
 80047f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fa:	4413      	add	r3, r2
 80047fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	2200      	movs	r2, #0
 8004806:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	78db      	ldrb	r3, [r3, #3]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d123      	bne.n	8004858 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800482a:	837b      	strh	r3, [r7, #26]
 800482c:	8b7b      	ldrh	r3, [r7, #26]
 800482e:	f083 0320 	eor.w	r3, r3, #32
 8004832:	837b      	strh	r3, [r7, #26]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	8b7b      	ldrh	r3, [r7, #26]
 8004844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800484c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004854:	b29b      	uxth	r3, r3
 8004856:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	4619      	mov	r1, r3
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f009 fad9 	bl	800de16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01f      	beq.n	80048ae <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004888:	833b      	strh	r3, [r7, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	441a      	add	r2, r3
 8004898:	8b3b      	ldrh	r3, [r7, #24]
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e31f      	b.n	8004ef2 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d021      	beq.n	8004900 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	441a      	add	r2, r3
 80048e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80048ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004906:	2b01      	cmp	r3, #1
 8004908:	f040 82ca 	bne.w	8004ea0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004914:	441a      	add	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	69da      	ldr	r2, [r3, #28]
 800491e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004922:	441a      	add	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	429a      	cmp	r2, r3
 8004932:	d309      	bcc.n	8004948 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	621a      	str	r2, [r3, #32]
 8004946:	e015      	b.n	8004974 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d107      	bne.n	8004960 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8004950:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004954:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800495e:	e009      	b.n	8004974 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2200      	movs	r2, #0
 8004972:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d15f      	bne.n	8004a3c <HAL_PCD_EP_DB_Transmit+0x3ba>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	643b      	str	r3, [r7, #64]	@ 0x40
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800498a:	b29b      	uxth	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004990:	4413      	add	r3, r2
 8004992:	643b      	str	r3, [r7, #64]	@ 0x40
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	00da      	lsls	r2, r3, #3
 800499a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800499c:	4413      	add	r3, r2
 800499e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <HAL_PCD_EP_DB_Transmit+0x34e>
 80049ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049cc:	801a      	strh	r2, [r3, #0]
 80049ce:	e051      	b.n	8004a74 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80049d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80049d4:	d816      	bhi.n	8004a04 <HAL_PCD_EP_DB_Transmit+0x382>
 80049d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	653b      	str	r3, [r7, #80]	@ 0x50
 80049dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_PCD_EP_DB_Transmit+0x36a>
 80049e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e8:	3301      	adds	r3, #1
 80049ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80049ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	029b      	lsls	r3, r3, #10
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	4313      	orrs	r3, r2
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a00:	801a      	strh	r2, [r3, #0]
 8004a02:	e037      	b.n	8004a74 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004a04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <HAL_PCD_EP_DB_Transmit+0x398>
 8004a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a16:	3b01      	subs	r3, #1
 8004a18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	029b      	lsls	r3, r3, #10
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a38:	801a      	strh	r2, [r3, #0]
 8004a3a:	e01b      	b.n	8004a74 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	785b      	ldrb	r3, [r3, #1]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d117      	bne.n	8004a74 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a58:	4413      	add	r3, r2
 8004a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	00da      	lsls	r2, r3, #3
 8004a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a64:	4413      	add	r3, r2
 8004a66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a72:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	6959      	ldr	r1, [r3, #20]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	891a      	ldrh	r2, [r3, #8]
 8004a80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f004 faa7 	bl	8008fd6 <USB_WritePMA>
 8004a88:	e20a      	b.n	8004ea0 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d307      	bcc.n	8004ace <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004ac6:	1ad2      	subs	r2, r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	619a      	str	r2, [r3, #24]
 8004acc:	e002      	b.n	8004ad4 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 80f6 	bne.w	8004cca <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	785b      	ldrb	r3, [r3, #1]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d126      	bne.n	8004b34 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	677b      	str	r3, [r7, #116]	@ 0x74
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004afa:	4413      	add	r3, r2
 8004afc:	677b      	str	r3, [r7, #116]	@ 0x74
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	00da      	lsls	r2, r3, #3
 8004b04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b06:	4413      	add	r3, r2
 8004b08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b1c:	801a      	strh	r2, [r3, #0]
 8004b1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b30:	801a      	strh	r2, [r3, #0]
 8004b32:	e01a      	b.n	8004b6a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	785b      	ldrb	r3, [r3, #1]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d116      	bne.n	8004b6a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b50:	4413      	add	r3, r2
 8004b52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	00da      	lsls	r2, r3, #3
 8004b5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b66:	2200      	movs	r2, #0
 8004b68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d12f      	bne.n	8004bda <HAL_PCD_EP_DB_Transmit+0x558>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b92:	4413      	add	r3, r2
 8004b94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	00da      	lsls	r2, r3, #3
 8004b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	e01c      	b.n	8004c14 <HAL_PCD_EP_DB_Transmit+0x592>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	785b      	ldrb	r3, [r3, #1]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d118      	bne.n	8004c14 <HAL_PCD_EP_DB_Transmit+0x592>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	00da      	lsls	r2, r3, #3
 8004bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c02:	4413      	add	r3, r2
 8004c04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c10:	2200      	movs	r2, #0
 8004c12:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	78db      	ldrb	r3, [r3, #3]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d127      	bne.n	8004c6c <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c36:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004c3a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004c3e:	f083 0320 	eor.w	r3, r3, #32
 8004c42:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004c58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	4619      	mov	r1, r3
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f009 f8cf 	bl	800de16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d121      	bne.n	8004cc6 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e113      	b.n	8004ef2 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d121      	bne.n	8004d18 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cee:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	441a      	add	r2, r3
 8004d00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004d04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	f040 80be 	bne.w	8004ea0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d3a:	441a      	add	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6a1a      	ldr	r2, [r3, #32]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d309      	bcc.n	8004d60 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6a1a      	ldr	r2, [r3, #32]
 8004d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d58:	1ad2      	subs	r2, r2, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	621a      	str	r2, [r3, #32]
 8004d5e:	e015      	b.n	8004d8c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d107      	bne.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004d68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004d76:	e009      	b.n	8004d8c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2200      	movs	r2, #0
 8004d82:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	785b      	ldrb	r3, [r3, #1]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d15f      	bne.n	8004e5a <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dae:	4413      	add	r3, r2
 8004db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	00da      	lsls	r2, r3, #3
 8004db8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dba:	4413      	add	r3, r2
 8004dbc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004dc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dd0:	801a      	strh	r2, [r3, #0]
 8004dd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <HAL_PCD_EP_DB_Transmit+0x76c>
 8004dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	e04e      	b.n	8004e8c <HAL_PCD_EP_DB_Transmit+0x80a>
 8004dee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004df0:	2b3e      	cmp	r3, #62	@ 0x3e
 8004df2:	d816      	bhi.n	8004e22 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004df4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_PCD_EP_DB_Transmit+0x788>
 8004e04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e06:	3301      	adds	r3, #1
 8004e08:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e1e:	801a      	strh	r2, [r3, #0]
 8004e20:	e034      	b.n	8004e8c <HAL_PCD_EP_DB_Transmit+0x80a>
 8004e22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e34:	3b01      	subs	r3, #1
 8004e36:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	029b      	lsls	r3, r3, #10
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	4313      	orrs	r3, r2
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	e018      	b.n	8004e8c <HAL_PCD_EP_DB_Transmit+0x80a>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d114      	bne.n	8004e8c <HAL_PCD_EP_DB_Transmit+0x80a>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e70:	4413      	add	r3, r2
 8004e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	00da      	lsls	r2, r3, #3
 8004e7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e8a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	6959      	ldr	r1, [r3, #20]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	895a      	ldrh	r2, [r3, #10]
 8004e98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f004 f89b 	bl	8008fd6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eba:	82fb      	strh	r3, [r7, #22]
 8004ebc:	8afb      	ldrh	r3, [r7, #22]
 8004ebe:	f083 0310 	eor.w	r3, r3, #16
 8004ec2:	82fb      	strh	r3, [r7, #22]
 8004ec4:	8afb      	ldrh	r3, [r7, #22]
 8004ec6:	f083 0320 	eor.w	r3, r3, #32
 8004eca:	82fb      	strh	r3, [r7, #22]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	8afb      	ldrh	r3, [r7, #22]
 8004edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3798      	adds	r7, #152	@ 0x98
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b087      	sub	sp, #28
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	607b      	str	r3, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	817b      	strh	r3, [r7, #10]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f0c:	897b      	ldrh	r3, [r7, #10]
 8004f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00b      	beq.n	8004f30 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f18:	897b      	ldrh	r3, [r7, #10]
 8004f1a:	f003 0207 	and.w	r2, r3, #7
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	3310      	adds	r3, #16
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e009      	b.n	8004f44 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f30:	897a      	ldrh	r2, [r7, #10]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f44:	893b      	ldrh	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d107      	bne.n	8004f5a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	80da      	strh	r2, [r3, #6]
 8004f58:	e00b      	b.n	8004f72 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	0c1b      	lsrs	r3, r3, #16
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f043 0302 	orr.w	r3, r3, #2
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d141      	bne.n	8005066 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fee:	d131      	bne.n	8005054 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ff0:	4b47      	ldr	r3, [pc, #284]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff6:	4a46      	ldr	r2, [pc, #280]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005000:	4b43      	ldr	r3, [pc, #268]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005008:	4a41      	ldr	r2, [pc, #260]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800500a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800500e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005010:	4b40      	ldr	r3, [pc, #256]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2232      	movs	r2, #50	@ 0x32
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	4a3f      	ldr	r2, [pc, #252]	@ (8005118 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	0c9b      	lsrs	r3, r3, #18
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005026:	e002      	b.n	800502e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3b01      	subs	r3, #1
 800502c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800502e:	4b38      	ldr	r3, [pc, #224]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800503a:	d102      	bne.n	8005042 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f2      	bne.n	8005028 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005042:	4b33      	ldr	r3, [pc, #204]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800504a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504e:	d158      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e057      	b.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005054:	4b2e      	ldr	r3, [pc, #184]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800505a:	4a2d      	ldr	r2, [pc, #180]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005060:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005064:	e04d      	b.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800506c:	d141      	bne.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800506e:	4b28      	ldr	r3, [pc, #160]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507a:	d131      	bne.n	80050e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800507c:	4b24      	ldr	r3, [pc, #144]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005082:	4a23      	ldr	r2, [pc, #140]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005088:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800508c:	4b20      	ldr	r3, [pc, #128]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005094:	4a1e      	ldr	r2, [pc, #120]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005096:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800509a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800509c:	4b1d      	ldr	r3, [pc, #116]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2232      	movs	r2, #50	@ 0x32
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005118 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	0c9b      	lsrs	r3, r3, #18
 80050ae:	3301      	adds	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050b2:	e002      	b.n	80050ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ba:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c6:	d102      	bne.n	80050ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f2      	bne.n	80050b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ce:	4b10      	ldr	r3, [pc, #64]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050da:	d112      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e011      	b.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050f0:	e007      	b.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050f2:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050fa:	4a05      	ldr	r2, [pc, #20]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005100:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40007000 	.word	0x40007000
 8005114:	20000000 	.word	0x20000000
 8005118:	431bde83 	.word	0x431bde83

0800511c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005120:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a04      	ldr	r2, [pc, #16]	@ (8005138 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800512a:	6093      	str	r3, [r2, #8]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40007000 	.word	0x40007000

0800513c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e2fe      	b.n	800574c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d075      	beq.n	8005246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800515a:	4b97      	ldr	r3, [pc, #604]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 030c 	and.w	r3, r3, #12
 8005162:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005164:	4b94      	ldr	r3, [pc, #592]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	d102      	bne.n	800517a <HAL_RCC_OscConfig+0x3e>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d002      	beq.n	8005180 <HAL_RCC_OscConfig+0x44>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d10b      	bne.n	8005198 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005180:	4b8d      	ldr	r3, [pc, #564]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d05b      	beq.n	8005244 <HAL_RCC_OscConfig+0x108>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d157      	bne.n	8005244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e2d9      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a0:	d106      	bne.n	80051b0 <HAL_RCC_OscConfig+0x74>
 80051a2:	4b85      	ldr	r3, [pc, #532]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a84      	ldr	r2, [pc, #528]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e01d      	b.n	80051ec <HAL_RCC_OscConfig+0xb0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCC_OscConfig+0x98>
 80051ba:	4b7f      	ldr	r3, [pc, #508]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7e      	ldr	r2, [pc, #504]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	4b7c      	ldr	r3, [pc, #496]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7b      	ldr	r2, [pc, #492]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e00b      	b.n	80051ec <HAL_RCC_OscConfig+0xb0>
 80051d4:	4b78      	ldr	r3, [pc, #480]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a77      	ldr	r2, [pc, #476]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	4b75      	ldr	r3, [pc, #468]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a74      	ldr	r2, [pc, #464]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d013      	beq.n	800521c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fc fe64 	bl	8001ec0 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051fc:	f7fc fe60 	bl	8001ec0 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	@ 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e29e      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800520e:	4b6a      	ldr	r3, [pc, #424]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0xc0>
 800521a:	e014      	b.n	8005246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fc fe50 	bl	8001ec0 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005224:	f7fc fe4c 	bl	8001ec0 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	@ 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e28a      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005236:	4b60      	ldr	r3, [pc, #384]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0xe8>
 8005242:	e000      	b.n	8005246 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d075      	beq.n	800533e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005252:	4b59      	ldr	r3, [pc, #356]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 030c 	and.w	r3, r3, #12
 800525a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800525c:	4b56      	ldr	r3, [pc, #344]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b0c      	cmp	r3, #12
 800526a:	d102      	bne.n	8005272 <HAL_RCC_OscConfig+0x136>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d002      	beq.n	8005278 <HAL_RCC_OscConfig+0x13c>
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b04      	cmp	r3, #4
 8005276:	d11f      	bne.n	80052b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005278:	4b4f      	ldr	r3, [pc, #316]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_OscConfig+0x154>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e25d      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005290:	4b49      	ldr	r3, [pc, #292]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	061b      	lsls	r3, r3, #24
 800529e:	4946      	ldr	r1, [pc, #280]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052a4:	4b45      	ldr	r3, [pc, #276]	@ (80053bc <HAL_RCC_OscConfig+0x280>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fc fc41 	bl	8001b30 <HAL_InitTick>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d043      	beq.n	800533c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e249      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d023      	beq.n	8005308 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052c0:	4b3d      	ldr	r3, [pc, #244]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a3c      	ldr	r2, [pc, #240]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fc fdf8 	bl	8001ec0 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d4:	f7fc fdf4 	bl	8001ec0 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e232      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052e6:	4b34      	ldr	r3, [pc, #208]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f0      	beq.n	80052d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f2:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	061b      	lsls	r3, r3, #24
 8005300:	492d      	ldr	r1, [pc, #180]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005302:	4313      	orrs	r3, r2
 8005304:	604b      	str	r3, [r1, #4]
 8005306:	e01a      	b.n	800533e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005308:	4b2b      	ldr	r3, [pc, #172]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2a      	ldr	r2, [pc, #168]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800530e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fc fdd4 	bl	8001ec0 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800531c:	f7fc fdd0 	bl	8001ec0 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e20e      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800532e:	4b22      	ldr	r3, [pc, #136]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x1e0>
 800533a:	e000      	b.n	800533e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800533c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d041      	beq.n	80053ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d01c      	beq.n	800538c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005352:	4b19      	ldr	r3, [pc, #100]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005358:	4a17      	ldr	r2, [pc, #92]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fc fdad 	bl	8001ec0 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800536a:	f7fc fda9 	bl	8001ec0 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e1e7      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800537c:	4b0e      	ldr	r3, [pc, #56]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800537e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0ef      	beq.n	800536a <HAL_RCC_OscConfig+0x22e>
 800538a:	e020      	b.n	80053ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800538c:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800538e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005392:	4a09      	ldr	r2, [pc, #36]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539c:	f7fc fd90 	bl	8001ec0 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053a2:	e00d      	b.n	80053c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a4:	f7fc fd8c 	bl	8001ec0 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d906      	bls.n	80053c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e1ca      	b.n	800574c <HAL_RCC_OscConfig+0x610>
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000
 80053bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053c0:	4b8c      	ldr	r3, [pc, #560]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ea      	bne.n	80053a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80a6 	beq.w	8005528 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053dc:	2300      	movs	r3, #0
 80053de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053e0:	4b84      	ldr	r3, [pc, #528]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_OscConfig+0x2b4>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x2b6>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	4b7f      	ldr	r3, [pc, #508]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fa:	4a7e      	ldr	r2, [pc, #504]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005400:	6593      	str	r3, [r2, #88]	@ 0x58
 8005402:	4b7c      	ldr	r3, [pc, #496]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800540e:	2301      	movs	r3, #1
 8005410:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005412:	4b79      	ldr	r3, [pc, #484]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d118      	bne.n	8005450 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800541e:	4b76      	ldr	r3, [pc, #472]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a75      	ldr	r2, [pc, #468]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800542a:	f7fc fd49 	bl	8001ec0 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005432:	f7fc fd45 	bl	8001ec0 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e183      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005444:	4b6c      	ldr	r3, [pc, #432]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d108      	bne.n	800546a <HAL_RCC_OscConfig+0x32e>
 8005458:	4b66      	ldr	r3, [pc, #408]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545e:	4a65      	ldr	r2, [pc, #404]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005468:	e024      	b.n	80054b4 <HAL_RCC_OscConfig+0x378>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b05      	cmp	r3, #5
 8005470:	d110      	bne.n	8005494 <HAL_RCC_OscConfig+0x358>
 8005472:	4b60      	ldr	r3, [pc, #384]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005478:	4a5e      	ldr	r2, [pc, #376]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800547a:	f043 0304 	orr.w	r3, r3, #4
 800547e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005482:	4b5c      	ldr	r3, [pc, #368]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005488:	4a5a      	ldr	r2, [pc, #360]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005492:	e00f      	b.n	80054b4 <HAL_RCC_OscConfig+0x378>
 8005494:	4b57      	ldr	r3, [pc, #348]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	4a56      	ldr	r2, [pc, #344]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054a4:	4b53      	ldr	r3, [pc, #332]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	4a52      	ldr	r2, [pc, #328]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80054ac:	f023 0304 	bic.w	r3, r3, #4
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d016      	beq.n	80054ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fc fd00 	bl	8001ec0 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c2:	e00a      	b.n	80054da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7fc fcfc 	bl	8001ec0 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e138      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054da:	4b46      	ldr	r3, [pc, #280]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0ed      	beq.n	80054c4 <HAL_RCC_OscConfig+0x388>
 80054e8:	e015      	b.n	8005516 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ea:	f7fc fce9 	bl	8001ec0 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054f0:	e00a      	b.n	8005508 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f2:	f7fc fce5 	bl	8001ec0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005500:	4293      	cmp	r3, r2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e121      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005508:	4b3a      	ldr	r3, [pc, #232]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1ed      	bne.n	80054f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005516:	7ffb      	ldrb	r3, [r7, #31]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d105      	bne.n	8005528 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800551c:	4b35      	ldr	r3, [pc, #212]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800551e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005520:	4a34      	ldr	r2, [pc, #208]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005526:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d03c      	beq.n	80055ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01c      	beq.n	8005576 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800553c:	4b2d      	ldr	r3, [pc, #180]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800553e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005542:	4a2c      	ldr	r2, [pc, #176]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554c:	f7fc fcb8 	bl	8001ec0 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005554:	f7fc fcb4 	bl	8001ec0 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e0f2      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005566:	4b23      	ldr	r3, [pc, #140]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005568:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ef      	beq.n	8005554 <HAL_RCC_OscConfig+0x418>
 8005574:	e01b      	b.n	80055ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005576:	4b1f      	ldr	r3, [pc, #124]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800557c:	4a1d      	ldr	r2, [pc, #116]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005586:	f7fc fc9b 	bl	8001ec0 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800558e:	f7fc fc97 	bl	8001ec0 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e0d5      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055a0:	4b14      	ldr	r3, [pc, #80]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ef      	bne.n	800558e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80c9 	beq.w	800574a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055b8:	4b0e      	ldr	r3, [pc, #56]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 030c 	and.w	r3, r3, #12
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	f000 8083 	beq.w	80056cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d15e      	bne.n	800568c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ce:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a08      	ldr	r2, [pc, #32]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055da:	f7fc fc71 	bl	8001ec0 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e0:	e00c      	b.n	80055fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e2:	f7fc fc6d 	bl	8001ec0 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d905      	bls.n	80055fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e0ab      	b.n	800574c <HAL_RCC_OscConfig+0x610>
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055fc:	4b55      	ldr	r3, [pc, #340]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1ec      	bne.n	80055e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005608:	4b52      	ldr	r3, [pc, #328]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	4b52      	ldr	r3, [pc, #328]	@ (8005758 <HAL_RCC_OscConfig+0x61c>)
 800560e:	4013      	ands	r3, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6a11      	ldr	r1, [r2, #32]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005618:	3a01      	subs	r2, #1
 800561a:	0112      	lsls	r2, r2, #4
 800561c:	4311      	orrs	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005622:	0212      	lsls	r2, r2, #8
 8005624:	4311      	orrs	r1, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800562a:	0852      	lsrs	r2, r2, #1
 800562c:	3a01      	subs	r2, #1
 800562e:	0552      	lsls	r2, r2, #21
 8005630:	4311      	orrs	r1, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005636:	0852      	lsrs	r2, r2, #1
 8005638:	3a01      	subs	r2, #1
 800563a:	0652      	lsls	r2, r2, #25
 800563c:	4311      	orrs	r1, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005642:	06d2      	lsls	r2, r2, #27
 8005644:	430a      	orrs	r2, r1
 8005646:	4943      	ldr	r1, [pc, #268]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005648:	4313      	orrs	r3, r2
 800564a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800564c:	4b41      	ldr	r3, [pc, #260]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a40      	ldr	r2, [pc, #256]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005656:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005658:	4b3e      	ldr	r3, [pc, #248]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a3d      	ldr	r2, [pc, #244]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800565e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005662:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fc fc2c 	bl	8001ec0 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566c:	f7fc fc28 	bl	8001ec0 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e066      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800567e:	4b35      	ldr	r3, [pc, #212]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x530>
 800568a:	e05e      	b.n	800574a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568c:	4b31      	ldr	r3, [pc, #196]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a30      	ldr	r2, [pc, #192]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005692:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fc fc12 	bl	8001ec0 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fc fc0e 	bl	8001ec0 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e04c      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b2:	4b28      	ldr	r3, [pc, #160]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056be:	4b25      	ldr	r3, [pc, #148]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	4924      	ldr	r1, [pc, #144]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056c4:	4b25      	ldr	r3, [pc, #148]	@ (800575c <HAL_RCC_OscConfig+0x620>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	60cb      	str	r3, [r1, #12]
 80056ca:	e03e      	b.n	800574a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e039      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f003 0203 	and.w	r2, r3, #3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d12c      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	3b01      	subs	r3, #1
 80056f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d123      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d11b      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d113      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	3b01      	subs	r3, #1
 800572c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800572e:	429a      	cmp	r2, r3
 8005730:	d109      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800573c:	085b      	lsrs	r3, r3, #1
 800573e:	3b01      	subs	r3, #1
 8005740:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	019f800c 	.word	0x019f800c
 800575c:	feeefffc 	.word	0xfeeefffc

08005760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800576a:	2300      	movs	r3, #0
 800576c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e11e      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005778:	4b91      	ldr	r3, [pc, #580]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d910      	bls.n	80057a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005786:	4b8e      	ldr	r3, [pc, #568]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f023 020f 	bic.w	r2, r3, #15
 800578e:	498c      	ldr	r1, [pc, #560]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	4313      	orrs	r3, r2
 8005794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005796:	4b8a      	ldr	r3, [pc, #552]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d001      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e106      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d073      	beq.n	800589c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d129      	bne.n	8005810 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057bc:	4b81      	ldr	r3, [pc, #516]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0f4      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057cc:	f000 f9d0 	bl	8005b70 <RCC_GetSysClockFreqFromPLLSource>
 80057d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4a7c      	ldr	r2, [pc, #496]	@ (80059c8 <HAL_RCC_ClockConfig+0x268>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d93f      	bls.n	800585a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057da:	4b7a      	ldr	r3, [pc, #488]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d033      	beq.n	800585a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d12f      	bne.n	800585a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057fa:	4b72      	ldr	r3, [pc, #456]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005802:	4a70      	ldr	r2, [pc, #448]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005808:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800580a:	2380      	movs	r3, #128	@ 0x80
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e024      	b.n	800585a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d107      	bne.n	8005828 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005818:	4b6a      	ldr	r3, [pc, #424]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0c6      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005828:	4b66      	ldr	r3, [pc, #408]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0be      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005838:	f000 f8ce 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 800583c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4a61      	ldr	r2, [pc, #388]	@ (80059c8 <HAL_RCC_ClockConfig+0x268>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d909      	bls.n	800585a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005846:	4b5f      	ldr	r3, [pc, #380]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800584e:	4a5d      	ldr	r2, [pc, #372]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005854:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005856:	2380      	movs	r3, #128	@ 0x80
 8005858:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800585a:	4b5a      	ldr	r3, [pc, #360]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f023 0203 	bic.w	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4957      	ldr	r1, [pc, #348]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005868:	4313      	orrs	r3, r2
 800586a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586c:	f7fc fb28 	bl	8001ec0 <HAL_GetTick>
 8005870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005872:	e00a      	b.n	800588a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005874:	f7fc fb24 	bl	8001ec0 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e095      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	4b4e      	ldr	r3, [pc, #312]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 020c 	and.w	r2, r3, #12
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	429a      	cmp	r2, r3
 800589a:	d1eb      	bne.n	8005874 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d023      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b4:	4b43      	ldr	r3, [pc, #268]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4a42      	ldr	r2, [pc, #264]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058cc:	4b3d      	ldr	r3, [pc, #244]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058d4:	4a3b      	ldr	r2, [pc, #236]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058dc:	4b39      	ldr	r3, [pc, #228]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4936      	ldr	r1, [pc, #216]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
 80058ee:	e008      	b.n	8005902 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2b80      	cmp	r3, #128	@ 0x80
 80058f4:	d105      	bne.n	8005902 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058f6:	4b33      	ldr	r3, [pc, #204]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	4a32      	ldr	r2, [pc, #200]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005900:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005902:	4b2f      	ldr	r3, [pc, #188]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d21d      	bcs.n	800594c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005910:	4b2b      	ldr	r3, [pc, #172]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f023 020f 	bic.w	r2, r3, #15
 8005918:	4929      	ldr	r1, [pc, #164]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	4313      	orrs	r3, r2
 800591e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005920:	f7fc face 	bl	8001ec0 <HAL_GetTick>
 8005924:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005926:	e00a      	b.n	800593e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005928:	f7fc faca 	bl	8001ec0 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e03b      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800593e:	4b20      	ldr	r3, [pc, #128]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d1ed      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005958:	4b1a      	ldr	r3, [pc, #104]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4917      	ldr	r1, [pc, #92]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005966:	4313      	orrs	r3, r2
 8005968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005976:	4b13      	ldr	r3, [pc, #76]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	490f      	ldr	r1, [pc, #60]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800598a:	f000 f825 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 800598e:	4602      	mov	r2, r0
 8005990:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	091b      	lsrs	r3, r3, #4
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	490c      	ldr	r1, [pc, #48]	@ (80059cc <HAL_RCC_ClockConfig+0x26c>)
 800599c:	5ccb      	ldrb	r3, [r1, r3]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	fa22 f303 	lsr.w	r3, r2, r3
 80059a6:	4a0a      	ldr	r2, [pc, #40]	@ (80059d0 <HAL_RCC_ClockConfig+0x270>)
 80059a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059aa:	4b0a      	ldr	r3, [pc, #40]	@ (80059d4 <HAL_RCC_ClockConfig+0x274>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fc f8be 	bl	8001b30 <HAL_InitTick>
 80059b4:	4603      	mov	r3, r0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40022000 	.word	0x40022000
 80059c4:	40021000 	.word	0x40021000
 80059c8:	04c4b400 	.word	0x04c4b400
 80059cc:	080113d0 	.word	0x080113d0
 80059d0:	20000000 	.word	0x20000000
 80059d4:	20000004 	.word	0x20000004

080059d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059de:	4b2c      	ldr	r3, [pc, #176]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d102      	bne.n	80059f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	e047      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059f0:	4b27      	ldr	r3, [pc, #156]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 030c 	and.w	r3, r3, #12
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d102      	bne.n	8005a02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059fc:	4b26      	ldr	r3, [pc, #152]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e03e      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a02:	4b23      	ldr	r3, [pc, #140]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b0c      	cmp	r3, #12
 8005a0c:	d136      	bne.n	8005a7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a0e:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a18:	4b1d      	ldr	r3, [pc, #116]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	3301      	adds	r3, #1
 8005a24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d10c      	bne.n	8005a46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a34:	4a16      	ldr	r2, [pc, #88]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a36:	68d2      	ldr	r2, [r2, #12]
 8005a38:	0a12      	lsrs	r2, r2, #8
 8005a3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	617b      	str	r3, [r7, #20]
      break;
 8005a44:	e00c      	b.n	8005a60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a46:	4a13      	ldr	r2, [pc, #76]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4e:	4a10      	ldr	r2, [pc, #64]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a50:	68d2      	ldr	r2, [r2, #12]
 8005a52:	0a12      	lsrs	r2, r2, #8
 8005a54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a58:	fb02 f303 	mul.w	r3, r2, r3
 8005a5c:	617b      	str	r3, [r7, #20]
      break;
 8005a5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a60:	4b0b      	ldr	r3, [pc, #44]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	0e5b      	lsrs	r3, r3, #25
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e001      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a80:	693b      	ldr	r3, [r7, #16]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40021000 	.word	0x40021000
 8005a94:	00f42400 	.word	0x00f42400
 8005a98:	007a1200 	.word	0x007a1200

08005a9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa0:	4b03      	ldr	r3, [pc, #12]	@ (8005ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	20000000 	.word	0x20000000

08005ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ab8:	f7ff fff0 	bl	8005a9c <HAL_RCC_GetHCLKFreq>
 8005abc:	4602      	mov	r2, r0
 8005abe:	4b06      	ldr	r3, [pc, #24]	@ (8005ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	4904      	ldr	r1, [pc, #16]	@ (8005adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aca:	5ccb      	ldrb	r3, [r1, r3]
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	080113e0 	.word	0x080113e0

08005ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ae4:	f7ff ffda 	bl	8005a9c <HAL_RCC_GetHCLKFreq>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	0adb      	lsrs	r3, r3, #11
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	4904      	ldr	r1, [pc, #16]	@ (8005b08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005af6:	5ccb      	ldrb	r3, [r1, r3]
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40021000 	.word	0x40021000
 8005b08:	080113e0 	.word	0x080113e0

08005b0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	220f      	movs	r2, #15
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b1c:	4b12      	ldr	r3, [pc, #72]	@ (8005b68 <HAL_RCC_GetClockConfig+0x5c>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0203 	and.w	r2, r3, #3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b28:	4b0f      	ldr	r3, [pc, #60]	@ (8005b68 <HAL_RCC_GetClockConfig+0x5c>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b34:	4b0c      	ldr	r3, [pc, #48]	@ (8005b68 <HAL_RCC_GetClockConfig+0x5c>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005b40:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <HAL_RCC_GetClockConfig+0x5c>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	08db      	lsrs	r3, r3, #3
 8005b46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005b4e:	4b07      	ldr	r3, [pc, #28]	@ (8005b6c <HAL_RCC_GetClockConfig+0x60>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 020f 	and.w	r2, r3, #15
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	601a      	str	r2, [r3, #0]
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	40022000 	.word	0x40022000

08005b70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b76:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b80:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d10c      	bne.n	8005bae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b94:	4a17      	ldr	r2, [pc, #92]	@ (8005bf4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	4a14      	ldr	r2, [pc, #80]	@ (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b9e:	68d2      	ldr	r2, [r2, #12]
 8005ba0:	0a12      	lsrs	r2, r2, #8
 8005ba2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	617b      	str	r3, [r7, #20]
    break;
 8005bac:	e00c      	b.n	8005bc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bae:	4a12      	ldr	r2, [pc, #72]	@ (8005bf8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bb8:	68d2      	ldr	r2, [r2, #12]
 8005bba:	0a12      	lsrs	r2, r2, #8
 8005bbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bc0:	fb02 f303 	mul.w	r3, r2, r3
 8005bc4:	617b      	str	r3, [r7, #20]
    break;
 8005bc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bc8:	4b09      	ldr	r3, [pc, #36]	@ (8005bf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	0e5b      	lsrs	r3, r3, #25
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005be2:	687b      	ldr	r3, [r7, #4]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	007a1200 	.word	0x007a1200
 8005bf8:	00f42400 	.word	0x00f42400

08005bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c04:	2300      	movs	r3, #0
 8005c06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c08:	2300      	movs	r3, #0
 8005c0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 8098 	beq.w	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c1e:	4b43      	ldr	r3, [pc, #268]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10d      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c2a:	4b40      	ldr	r3, [pc, #256]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c2e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c36:	4b3d      	ldr	r3, [pc, #244]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c3e:	60bb      	str	r3, [r7, #8]
 8005c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c42:	2301      	movs	r3, #1
 8005c44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c46:	4b3a      	ldr	r3, [pc, #232]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a39      	ldr	r2, [pc, #228]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c52:	f7fc f935 	bl	8001ec0 <HAL_GetTick>
 8005c56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c58:	e009      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c5a:	f7fc f931 	bl	8001ec0 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d902      	bls.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	74fb      	strb	r3, [r7, #19]
        break;
 8005c6c:	e005      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c6e:	4b30      	ldr	r3, [pc, #192]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0ef      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c7a:	7cfb      	ldrb	r3, [r7, #19]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d159      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c80:	4b2a      	ldr	r3, [pc, #168]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01e      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d019      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c9c:	4b23      	ldr	r3, [pc, #140]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ca8:	4b20      	ldr	r3, [pc, #128]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cae:	4a1f      	ldr	r2, [pc, #124]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cc8:	4a18      	ldr	r2, [pc, #96]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d016      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cda:	f7fc f8f1 	bl	8001ec0 <HAL_GetTick>
 8005cde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce0:	e00b      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce2:	f7fc f8ed 	bl	8001ec0 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d902      	bls.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	74fb      	strb	r3, [r7, #19]
            break;
 8005cf8:	e006      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0ec      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d08:	7cfb      	ldrb	r3, [r7, #19]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10b      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d0e:	4b07      	ldr	r3, [pc, #28]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d1c:	4903      	ldr	r1, [pc, #12]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d24:	e008      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d26:	7cfb      	ldrb	r3, [r7, #19]
 8005d28:	74bb      	strb	r3, [r7, #18]
 8005d2a:	e005      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d34:	7cfb      	ldrb	r3, [r7, #19]
 8005d36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d38:	7c7b      	ldrb	r3, [r7, #17]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d105      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d3e:	4ba7      	ldr	r3, [pc, #668]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d42:	4aa6      	ldr	r2, [pc, #664]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d56:	4ba1      	ldr	r3, [pc, #644]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5c:	f023 0203 	bic.w	r2, r3, #3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	499d      	ldr	r1, [pc, #628]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d78:	4b98      	ldr	r3, [pc, #608]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7e:	f023 020c 	bic.w	r2, r3, #12
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	4995      	ldr	r1, [pc, #596]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d9a:	4b90      	ldr	r3, [pc, #576]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	498c      	ldr	r1, [pc, #560]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dbc:	4b87      	ldr	r3, [pc, #540]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	4984      	ldr	r1, [pc, #528]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dde:	4b7f      	ldr	r3, [pc, #508]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	497b      	ldr	r1, [pc, #492]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e00:	4b76      	ldr	r3, [pc, #472]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	4973      	ldr	r1, [pc, #460]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e22:	4b6e      	ldr	r3, [pc, #440]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	496a      	ldr	r1, [pc, #424]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e44:	4b65      	ldr	r3, [pc, #404]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	4962      	ldr	r1, [pc, #392]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e66:	4b5d      	ldr	r3, [pc, #372]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e74:	4959      	ldr	r1, [pc, #356]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e88:	4b54      	ldr	r3, [pc, #336]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e96:	4951      	ldr	r1, [pc, #324]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d015      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb8:	4948      	ldr	r1, [pc, #288]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ec8:	d105      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eca:	4b44      	ldr	r3, [pc, #272]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	4a43      	ldr	r2, [pc, #268]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ed4:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d015      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef0:	493a      	ldr	r1, [pc, #232]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f00:	d105      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f02:	4b36      	ldr	r3, [pc, #216]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	4a35      	ldr	r2, [pc, #212]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f0c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d015      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f1a:	4b30      	ldr	r3, [pc, #192]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f20:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f28:	492c      	ldr	r1, [pc, #176]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f38:	d105      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f3a:	4b28      	ldr	r3, [pc, #160]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	4a27      	ldr	r2, [pc, #156]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f44:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d015      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f52:	4b22      	ldr	r3, [pc, #136]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f60:	491e      	ldr	r1, [pc, #120]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f70:	d105      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f72:	4b1a      	ldr	r3, [pc, #104]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	4a19      	ldr	r2, [pc, #100]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f7c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d015      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f8a:	4b14      	ldr	r3, [pc, #80]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f90:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f98:	4910      	ldr	r1, [pc, #64]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fa8:	d105      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005faa:	4b0c      	ldr	r3, [pc, #48]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	4a0b      	ldr	r2, [pc, #44]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fb4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d018      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005fc2:	4b06      	ldr	r3, [pc, #24]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd0:	4902      	ldr	r1, [pc, #8]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	e001      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fe6:	d105      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fe8:	4b21      	ldr	r3, [pc, #132]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4a20      	ldr	r2, [pc, #128]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ff2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d015      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006000:	4b1b      	ldr	r3, [pc, #108]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006006:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600e:	4918      	ldr	r1, [pc, #96]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800601e:	d105      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006020:	4b13      	ldr	r3, [pc, #76]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	4a12      	ldr	r2, [pc, #72]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800602a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d015      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006038:	4b0d      	ldr	r3, [pc, #52]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800603a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800603e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006046:	490a      	ldr	r1, [pc, #40]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006052:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006056:	d105      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006058:	4b05      	ldr	r3, [pc, #20]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	4a04      	ldr	r2, [pc, #16]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800605e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006062:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006064:	7cbb      	ldrb	r3, [r7, #18]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000

08006074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e049      	b.n	800611a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f841 	bl	8006122 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3304      	adds	r3, #4
 80060b0:	4619      	mov	r1, r3
 80060b2:	4610      	mov	r0, r2
 80060b4:	f000 fa28 	bl	8006508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
	...

08006138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d001      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e04f      	b.n	80061f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a23      	ldr	r2, [pc, #140]	@ (80061fc <HAL_TIM_Base_Start_IT+0xc4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01d      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617a:	d018      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a1f      	ldr	r2, [pc, #124]	@ (8006200 <HAL_TIM_Base_Start_IT+0xc8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1e      	ldr	r2, [pc, #120]	@ (8006204 <HAL_TIM_Base_Start_IT+0xcc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a1c      	ldr	r2, [pc, #112]	@ (8006208 <HAL_TIM_Base_Start_IT+0xd0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a1b      	ldr	r2, [pc, #108]	@ (800620c <HAL_TIM_Base_Start_IT+0xd4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a19      	ldr	r2, [pc, #100]	@ (8006210 <HAL_TIM_Base_Start_IT+0xd8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d115      	bne.n	80061da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	4b17      	ldr	r3, [pc, #92]	@ (8006214 <HAL_TIM_Base_Start_IT+0xdc>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b06      	cmp	r3, #6
 80061be:	d015      	beq.n	80061ec <HAL_TIM_Base_Start_IT+0xb4>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061c6:	d011      	beq.n	80061ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d8:	e008      	b.n	80061ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0201 	orr.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e000      	b.n	80061ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40013400 	.word	0x40013400
 800620c:	40014000 	.word	0x40014000
 8006210:	40015000 	.word	0x40015000
 8006214:	00010007 	.word	0x00010007

08006218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d020      	beq.n	800627c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01b      	beq.n	800627c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0202 	mvn.w	r2, #2
 800624c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f931 	bl	80064ca <HAL_TIM_IC_CaptureCallback>
 8006268:	e005      	b.n	8006276 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f923 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f934 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d020      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0204 	mvn.w	r2, #4
 8006298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f90b 	bl	80064ca <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f8fd 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f90e 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d020      	beq.n	8006314 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01b      	beq.n	8006314 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0208 	mvn.w	r2, #8
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2204      	movs	r2, #4
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f8e5 	bl	80064ca <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f8d7 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f8e8 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b00      	cmp	r3, #0
 800631c:	d020      	beq.n	8006360 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01b      	beq.n	8006360 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0210 	mvn.w	r2, #16
 8006330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2208      	movs	r2, #8
 8006336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f8bf 	bl	80064ca <HAL_TIM_IC_CaptureCallback>
 800634c:	e005      	b.n	800635a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f8b1 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f8c2 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00c      	beq.n	8006384 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0201 	mvn.w	r2, #1
 800637c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fb fa88 	bl	8001894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00c      	beq.n	80063b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80063aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f95f 	bl	8006670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00c      	beq.n	80063d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d007      	beq.n	80063d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80063ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f957 	bl	8006684 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00c      	beq.n	80063fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f87c 	bl	80064f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00c      	beq.n	800641e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f06f 0220 	mvn.w	r2, #32
 8006416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f91f 	bl	800665c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00c      	beq.n	8006442 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800643a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f92b 	bl	8006698 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00c      	beq.n	8006466 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800645e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f923 	bl	80066ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00c      	beq.n	800648a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f91b 	bl	80066c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00c      	beq.n	80064ae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80064a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f913 	bl	80066d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a48      	ldr	r2, [pc, #288]	@ (800663c <TIM_Base_SetConfig+0x134>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d013      	beq.n	8006548 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006526:	d00f      	beq.n	8006548 <TIM_Base_SetConfig+0x40>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a45      	ldr	r2, [pc, #276]	@ (8006640 <TIM_Base_SetConfig+0x138>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00b      	beq.n	8006548 <TIM_Base_SetConfig+0x40>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a44      	ldr	r2, [pc, #272]	@ (8006644 <TIM_Base_SetConfig+0x13c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d007      	beq.n	8006548 <TIM_Base_SetConfig+0x40>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a43      	ldr	r2, [pc, #268]	@ (8006648 <TIM_Base_SetConfig+0x140>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_Base_SetConfig+0x40>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a42      	ldr	r2, [pc, #264]	@ (800664c <TIM_Base_SetConfig+0x144>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d108      	bne.n	800655a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a37      	ldr	r2, [pc, #220]	@ (800663c <TIM_Base_SetConfig+0x134>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d01f      	beq.n	80065a2 <TIM_Base_SetConfig+0x9a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006568:	d01b      	beq.n	80065a2 <TIM_Base_SetConfig+0x9a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a34      	ldr	r2, [pc, #208]	@ (8006640 <TIM_Base_SetConfig+0x138>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d017      	beq.n	80065a2 <TIM_Base_SetConfig+0x9a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a33      	ldr	r2, [pc, #204]	@ (8006644 <TIM_Base_SetConfig+0x13c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <TIM_Base_SetConfig+0x9a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a32      	ldr	r2, [pc, #200]	@ (8006648 <TIM_Base_SetConfig+0x140>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00f      	beq.n	80065a2 <TIM_Base_SetConfig+0x9a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a32      	ldr	r2, [pc, #200]	@ (8006650 <TIM_Base_SetConfig+0x148>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00b      	beq.n	80065a2 <TIM_Base_SetConfig+0x9a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a31      	ldr	r2, [pc, #196]	@ (8006654 <TIM_Base_SetConfig+0x14c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d007      	beq.n	80065a2 <TIM_Base_SetConfig+0x9a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a30      	ldr	r2, [pc, #192]	@ (8006658 <TIM_Base_SetConfig+0x150>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_Base_SetConfig+0x9a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a2b      	ldr	r2, [pc, #172]	@ (800664c <TIM_Base_SetConfig+0x144>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d108      	bne.n	80065b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a18      	ldr	r2, [pc, #96]	@ (800663c <TIM_Base_SetConfig+0x134>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d013      	beq.n	8006608 <TIM_Base_SetConfig+0x100>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a19      	ldr	r2, [pc, #100]	@ (8006648 <TIM_Base_SetConfig+0x140>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00f      	beq.n	8006608 <TIM_Base_SetConfig+0x100>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a19      	ldr	r2, [pc, #100]	@ (8006650 <TIM_Base_SetConfig+0x148>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00b      	beq.n	8006608 <TIM_Base_SetConfig+0x100>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a18      	ldr	r2, [pc, #96]	@ (8006654 <TIM_Base_SetConfig+0x14c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_Base_SetConfig+0x100>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a17      	ldr	r2, [pc, #92]	@ (8006658 <TIM_Base_SetConfig+0x150>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_Base_SetConfig+0x100>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a12      	ldr	r2, [pc, #72]	@ (800664c <TIM_Base_SetConfig+0x144>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d103      	bne.n	8006610 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b01      	cmp	r3, #1
 8006620:	d105      	bne.n	800662e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f023 0201 	bic.w	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	611a      	str	r2, [r3, #16]
  }
}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40012c00 	.word	0x40012c00
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40013400 	.word	0x40013400
 800664c:	40015000 	.word	0x40015000
 8006650:	40014000 	.word	0x40014000
 8006654:	40014400 	.word	0x40014400
 8006658:	40014800 	.word	0x40014800

0800665c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e042      	b.n	8006780 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fb f9b7 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2224      	movs	r2, #36	@ 0x24
 8006716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0201 	bic.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fb24 	bl	8006d80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f825 	bl	8006788 <UART_SetConfig>
 800673e:	4603      	mov	r3, r0
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e01b      	b.n	8006780 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fba3 	bl	8006ec4 <UART_CheckIdleState>
 800677e:	4603      	mov	r3, r0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800678c:	b08c      	sub	sp, #48	@ 0x30
 800678e:	af00      	add	r7, sp, #0
 8006790:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	431a      	orrs	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4baa      	ldr	r3, [pc, #680]	@ (8006a60 <UART_SetConfig+0x2d8>)
 80067b8:	4013      	ands	r3, r2
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	6812      	ldr	r2, [r2, #0]
 80067be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067c0:	430b      	orrs	r3, r1
 80067c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a9f      	ldr	r2, [pc, #636]	@ (8006a64 <UART_SetConfig+0x2dc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d004      	beq.n	80067f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067f0:	4313      	orrs	r3, r2
 80067f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80067fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006808:	430b      	orrs	r3, r1
 800680a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006812:	f023 010f 	bic.w	r1, r3, #15
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a90      	ldr	r2, [pc, #576]	@ (8006a68 <UART_SetConfig+0x2e0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d125      	bne.n	8006878 <UART_SetConfig+0xf0>
 800682c:	4b8f      	ldr	r3, [pc, #572]	@ (8006a6c <UART_SetConfig+0x2e4>)
 800682e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	2b03      	cmp	r3, #3
 8006838:	d81a      	bhi.n	8006870 <UART_SetConfig+0xe8>
 800683a:	a201      	add	r2, pc, #4	@ (adr r2, 8006840 <UART_SetConfig+0xb8>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006851 	.word	0x08006851
 8006844:	08006861 	.word	0x08006861
 8006848:	08006859 	.word	0x08006859
 800684c:	08006869 	.word	0x08006869
 8006850:	2301      	movs	r3, #1
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006856:	e116      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006858:	2302      	movs	r3, #2
 800685a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800685e:	e112      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006860:	2304      	movs	r3, #4
 8006862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006866:	e10e      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006868:	2308      	movs	r3, #8
 800686a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800686e:	e10a      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006870:	2310      	movs	r3, #16
 8006872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006876:	e106      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a7c      	ldr	r2, [pc, #496]	@ (8006a70 <UART_SetConfig+0x2e8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d138      	bne.n	80068f4 <UART_SetConfig+0x16c>
 8006882:	4b7a      	ldr	r3, [pc, #488]	@ (8006a6c <UART_SetConfig+0x2e4>)
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006888:	f003 030c 	and.w	r3, r3, #12
 800688c:	2b0c      	cmp	r3, #12
 800688e:	d82d      	bhi.n	80068ec <UART_SetConfig+0x164>
 8006890:	a201      	add	r2, pc, #4	@ (adr r2, 8006898 <UART_SetConfig+0x110>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068cd 	.word	0x080068cd
 800689c:	080068ed 	.word	0x080068ed
 80068a0:	080068ed 	.word	0x080068ed
 80068a4:	080068ed 	.word	0x080068ed
 80068a8:	080068dd 	.word	0x080068dd
 80068ac:	080068ed 	.word	0x080068ed
 80068b0:	080068ed 	.word	0x080068ed
 80068b4:	080068ed 	.word	0x080068ed
 80068b8:	080068d5 	.word	0x080068d5
 80068bc:	080068ed 	.word	0x080068ed
 80068c0:	080068ed 	.word	0x080068ed
 80068c4:	080068ed 	.word	0x080068ed
 80068c8:	080068e5 	.word	0x080068e5
 80068cc:	2300      	movs	r3, #0
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d2:	e0d8      	b.n	8006a86 <UART_SetConfig+0x2fe>
 80068d4:	2302      	movs	r3, #2
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068da:	e0d4      	b.n	8006a86 <UART_SetConfig+0x2fe>
 80068dc:	2304      	movs	r3, #4
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e2:	e0d0      	b.n	8006a86 <UART_SetConfig+0x2fe>
 80068e4:	2308      	movs	r3, #8
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ea:	e0cc      	b.n	8006a86 <UART_SetConfig+0x2fe>
 80068ec:	2310      	movs	r3, #16
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068f2:	e0c8      	b.n	8006a86 <UART_SetConfig+0x2fe>
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a5e      	ldr	r2, [pc, #376]	@ (8006a74 <UART_SetConfig+0x2ec>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d125      	bne.n	800694a <UART_SetConfig+0x1c2>
 80068fe:	4b5b      	ldr	r3, [pc, #364]	@ (8006a6c <UART_SetConfig+0x2e4>)
 8006900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006904:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006908:	2b30      	cmp	r3, #48	@ 0x30
 800690a:	d016      	beq.n	800693a <UART_SetConfig+0x1b2>
 800690c:	2b30      	cmp	r3, #48	@ 0x30
 800690e:	d818      	bhi.n	8006942 <UART_SetConfig+0x1ba>
 8006910:	2b20      	cmp	r3, #32
 8006912:	d00a      	beq.n	800692a <UART_SetConfig+0x1a2>
 8006914:	2b20      	cmp	r3, #32
 8006916:	d814      	bhi.n	8006942 <UART_SetConfig+0x1ba>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <UART_SetConfig+0x19a>
 800691c:	2b10      	cmp	r3, #16
 800691e:	d008      	beq.n	8006932 <UART_SetConfig+0x1aa>
 8006920:	e00f      	b.n	8006942 <UART_SetConfig+0x1ba>
 8006922:	2300      	movs	r3, #0
 8006924:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006928:	e0ad      	b.n	8006a86 <UART_SetConfig+0x2fe>
 800692a:	2302      	movs	r3, #2
 800692c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006930:	e0a9      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006932:	2304      	movs	r3, #4
 8006934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006938:	e0a5      	b.n	8006a86 <UART_SetConfig+0x2fe>
 800693a:	2308      	movs	r3, #8
 800693c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006940:	e0a1      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006942:	2310      	movs	r3, #16
 8006944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006948:	e09d      	b.n	8006a86 <UART_SetConfig+0x2fe>
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a4a      	ldr	r2, [pc, #296]	@ (8006a78 <UART_SetConfig+0x2f0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d125      	bne.n	80069a0 <UART_SetConfig+0x218>
 8006954:	4b45      	ldr	r3, [pc, #276]	@ (8006a6c <UART_SetConfig+0x2e4>)
 8006956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800695a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800695e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006960:	d016      	beq.n	8006990 <UART_SetConfig+0x208>
 8006962:	2bc0      	cmp	r3, #192	@ 0xc0
 8006964:	d818      	bhi.n	8006998 <UART_SetConfig+0x210>
 8006966:	2b80      	cmp	r3, #128	@ 0x80
 8006968:	d00a      	beq.n	8006980 <UART_SetConfig+0x1f8>
 800696a:	2b80      	cmp	r3, #128	@ 0x80
 800696c:	d814      	bhi.n	8006998 <UART_SetConfig+0x210>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <UART_SetConfig+0x1f0>
 8006972:	2b40      	cmp	r3, #64	@ 0x40
 8006974:	d008      	beq.n	8006988 <UART_SetConfig+0x200>
 8006976:	e00f      	b.n	8006998 <UART_SetConfig+0x210>
 8006978:	2300      	movs	r3, #0
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800697e:	e082      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006980:	2302      	movs	r3, #2
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006986:	e07e      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006988:	2304      	movs	r3, #4
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800698e:	e07a      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006990:	2308      	movs	r3, #8
 8006992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006996:	e076      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006998:	2310      	movs	r3, #16
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699e:	e072      	b.n	8006a86 <UART_SetConfig+0x2fe>
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a35      	ldr	r2, [pc, #212]	@ (8006a7c <UART_SetConfig+0x2f4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d12a      	bne.n	8006a00 <UART_SetConfig+0x278>
 80069aa:	4b30      	ldr	r3, [pc, #192]	@ (8006a6c <UART_SetConfig+0x2e4>)
 80069ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069b8:	d01a      	beq.n	80069f0 <UART_SetConfig+0x268>
 80069ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069be:	d81b      	bhi.n	80069f8 <UART_SetConfig+0x270>
 80069c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069c4:	d00c      	beq.n	80069e0 <UART_SetConfig+0x258>
 80069c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ca:	d815      	bhi.n	80069f8 <UART_SetConfig+0x270>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <UART_SetConfig+0x250>
 80069d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069d4:	d008      	beq.n	80069e8 <UART_SetConfig+0x260>
 80069d6:	e00f      	b.n	80069f8 <UART_SetConfig+0x270>
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069de:	e052      	b.n	8006a86 <UART_SetConfig+0x2fe>
 80069e0:	2302      	movs	r3, #2
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e6:	e04e      	b.n	8006a86 <UART_SetConfig+0x2fe>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ee:	e04a      	b.n	8006a86 <UART_SetConfig+0x2fe>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f6:	e046      	b.n	8006a86 <UART_SetConfig+0x2fe>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fe:	e042      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a17      	ldr	r2, [pc, #92]	@ (8006a64 <UART_SetConfig+0x2dc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d13a      	bne.n	8006a80 <UART_SetConfig+0x2f8>
 8006a0a:	4b18      	ldr	r3, [pc, #96]	@ (8006a6c <UART_SetConfig+0x2e4>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a18:	d01a      	beq.n	8006a50 <UART_SetConfig+0x2c8>
 8006a1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a1e:	d81b      	bhi.n	8006a58 <UART_SetConfig+0x2d0>
 8006a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a24:	d00c      	beq.n	8006a40 <UART_SetConfig+0x2b8>
 8006a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a2a:	d815      	bhi.n	8006a58 <UART_SetConfig+0x2d0>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <UART_SetConfig+0x2b0>
 8006a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a34:	d008      	beq.n	8006a48 <UART_SetConfig+0x2c0>
 8006a36:	e00f      	b.n	8006a58 <UART_SetConfig+0x2d0>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3e:	e022      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006a40:	2302      	movs	r3, #2
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a46:	e01e      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4e:	e01a      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006a50:	2308      	movs	r3, #8
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a56:	e016      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	e012      	b.n	8006a86 <UART_SetConfig+0x2fe>
 8006a60:	cfff69f3 	.word	0xcfff69f3
 8006a64:	40008000 	.word	0x40008000
 8006a68:	40013800 	.word	0x40013800
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	40004400 	.word	0x40004400
 8006a74:	40004800 	.word	0x40004800
 8006a78:	40004c00 	.word	0x40004c00
 8006a7c:	40005000 	.word	0x40005000
 8006a80:	2310      	movs	r3, #16
 8006a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4aae      	ldr	r2, [pc, #696]	@ (8006d44 <UART_SetConfig+0x5bc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	f040 8097 	bne.w	8006bc0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d823      	bhi.n	8006ae2 <UART_SetConfig+0x35a>
 8006a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa0 <UART_SetConfig+0x318>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006ae3 	.word	0x08006ae3
 8006aa8:	08006acd 	.word	0x08006acd
 8006aac:	08006ae3 	.word	0x08006ae3
 8006ab0:	08006ad3 	.word	0x08006ad3
 8006ab4:	08006ae3 	.word	0x08006ae3
 8006ab8:	08006ae3 	.word	0x08006ae3
 8006abc:	08006ae3 	.word	0x08006ae3
 8006ac0:	08006adb 	.word	0x08006adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac4:	f7fe fff6 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 8006ac8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006aca:	e010      	b.n	8006aee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006acc:	4b9e      	ldr	r3, [pc, #632]	@ (8006d48 <UART_SetConfig+0x5c0>)
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ad0:	e00d      	b.n	8006aee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ad2:	f7fe ff81 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8006ad6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ad8:	e009      	b.n	8006aee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ade:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ae0:	e005      	b.n	8006aee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006aec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 8130 	beq.w	8006d56 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afa:	4a94      	ldr	r2, [pc, #592]	@ (8006d4c <UART_SetConfig+0x5c4>)
 8006afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	4413      	add	r3, r2
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d305      	bcc.n	8006b26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d903      	bls.n	8006b2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b2c:	e113      	b.n	8006d56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b30:	2200      	movs	r2, #0
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	60fa      	str	r2, [r7, #12]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3a:	4a84      	ldr	r2, [pc, #528]	@ (8006d4c <UART_SetConfig+0x5c4>)
 8006b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2200      	movs	r2, #0
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b50:	f7fa f852 	bl	8000bf8 <__aeabi_uldivmod>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	020b      	lsls	r3, r1, #8
 8006b66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b6a:	0202      	lsls	r2, r0, #8
 8006b6c:	6979      	ldr	r1, [r7, #20]
 8006b6e:	6849      	ldr	r1, [r1, #4]
 8006b70:	0849      	lsrs	r1, r1, #1
 8006b72:	2000      	movs	r0, #0
 8006b74:	460c      	mov	r4, r1
 8006b76:	4605      	mov	r5, r0
 8006b78:	eb12 0804 	adds.w	r8, r2, r4
 8006b7c:	eb43 0905 	adc.w	r9, r3, r5
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	469a      	mov	sl, r3
 8006b88:	4693      	mov	fp, r2
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	465b      	mov	r3, fp
 8006b8e:	4640      	mov	r0, r8
 8006b90:	4649      	mov	r1, r9
 8006b92:	f7fa f831 	bl	8000bf8 <__aeabi_uldivmod>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ba4:	d308      	bcc.n	8006bb8 <UART_SetConfig+0x430>
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bac:	d204      	bcs.n	8006bb8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6a3a      	ldr	r2, [r7, #32]
 8006bb4:	60da      	str	r2, [r3, #12]
 8006bb6:	e0ce      	b.n	8006d56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bbe:	e0ca      	b.n	8006d56 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bc8:	d166      	bne.n	8006c98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006bca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d827      	bhi.n	8006c22 <UART_SetConfig+0x49a>
 8006bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd8 <UART_SetConfig+0x450>)
 8006bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd8:	08006bfd 	.word	0x08006bfd
 8006bdc:	08006c05 	.word	0x08006c05
 8006be0:	08006c0d 	.word	0x08006c0d
 8006be4:	08006c23 	.word	0x08006c23
 8006be8:	08006c13 	.word	0x08006c13
 8006bec:	08006c23 	.word	0x08006c23
 8006bf0:	08006c23 	.word	0x08006c23
 8006bf4:	08006c23 	.word	0x08006c23
 8006bf8:	08006c1b 	.word	0x08006c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bfc:	f7fe ff5a 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 8006c00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c02:	e014      	b.n	8006c2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c04:	f7fe ff6c 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 8006c08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c0a:	e010      	b.n	8006c2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c0c:	4b4e      	ldr	r3, [pc, #312]	@ (8006d48 <UART_SetConfig+0x5c0>)
 8006c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c10:	e00d      	b.n	8006c2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c12:	f7fe fee1 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8006c16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c18:	e009      	b.n	8006c2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c20:	e005      	b.n	8006c2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 8090 	beq.w	8006d56 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3a:	4a44      	ldr	r2, [pc, #272]	@ (8006d4c <UART_SetConfig+0x5c4>)
 8006c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c48:	005a      	lsls	r2, r3, #1
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	441a      	add	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	2b0f      	cmp	r3, #15
 8006c60:	d916      	bls.n	8006c90 <UART_SetConfig+0x508>
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c68:	d212      	bcs.n	8006c90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f023 030f 	bic.w	r3, r3, #15
 8006c72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	8bfb      	ldrh	r3, [r7, #30]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	8bfa      	ldrh	r2, [r7, #30]
 8006c8c:	60da      	str	r2, [r3, #12]
 8006c8e:	e062      	b.n	8006d56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c96:	e05e      	b.n	8006d56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d828      	bhi.n	8006cf2 <UART_SetConfig+0x56a>
 8006ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca8 <UART_SetConfig+0x520>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006ccd 	.word	0x08006ccd
 8006cac:	08006cd5 	.word	0x08006cd5
 8006cb0:	08006cdd 	.word	0x08006cdd
 8006cb4:	08006cf3 	.word	0x08006cf3
 8006cb8:	08006ce3 	.word	0x08006ce3
 8006cbc:	08006cf3 	.word	0x08006cf3
 8006cc0:	08006cf3 	.word	0x08006cf3
 8006cc4:	08006cf3 	.word	0x08006cf3
 8006cc8:	08006ceb 	.word	0x08006ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ccc:	f7fe fef2 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 8006cd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cd2:	e014      	b.n	8006cfe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd4:	f7fe ff04 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 8006cd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cda:	e010      	b.n	8006cfe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d48 <UART_SetConfig+0x5c0>)
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ce0:	e00d      	b.n	8006cfe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce2:	f7fe fe79 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8006ce6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ce8:	e009      	b.n	8006cfe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cf0:	e005      	b.n	8006cfe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cfc:	bf00      	nop
    }

    if (pclk != 0U)
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d028      	beq.n	8006d56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d08:	4a10      	ldr	r2, [pc, #64]	@ (8006d4c <UART_SetConfig+0x5c4>)
 8006d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d12:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	441a      	add	r2, r3
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	2b0f      	cmp	r3, #15
 8006d2c:	d910      	bls.n	8006d50 <UART_SetConfig+0x5c8>
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d34:	d20c      	bcs.n	8006d50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60da      	str	r2, [r3, #12]
 8006d40:	e009      	b.n	8006d56 <UART_SetConfig+0x5ce>
 8006d42:	bf00      	nop
 8006d44:	40008000 	.word	0x40008000
 8006d48:	00f42400 	.word	0x00f42400
 8006d4c:	080113f8 	.word	0x080113f8
      }
      else
      {
        ret = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d72:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3730      	adds	r7, #48	@ 0x30
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e14:	f003 0310 	and.w	r3, r3, #16
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01a      	beq.n	8006e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e7e:	d10a      	bne.n	8006e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	605a      	str	r2, [r3, #4]
  }
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b098      	sub	sp, #96	@ 0x60
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ed4:	f7fa fff4 	bl	8001ec0 <HAL_GetTick>
 8006ed8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d12f      	bne.n	8006f48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ee8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f88e 	bl	8007018 <UART_WaitOnFlagUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d022      	beq.n	8006f48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0a:	e853 3f00 	ldrex	r3, [r3]
 8006f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e6      	bne.n	8006f02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e063      	b.n	8007010 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d149      	bne.n	8006fea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f857 	bl	8007018 <UART_WaitOnFlagUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d03c      	beq.n	8006fea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e6      	bne.n	8006f70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f023 0301 	bic.w	r3, r3, #1
 8006fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fc2:	61fa      	str	r2, [r7, #28]
 8006fc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	69b9      	ldr	r1, [r7, #24]
 8006fc8:	69fa      	ldr	r2, [r7, #28]
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	617b      	str	r3, [r7, #20]
   return(result);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e5      	bne.n	8006fa2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e012      	b.n	8007010 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3758      	adds	r7, #88	@ 0x58
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	603b      	str	r3, [r7, #0]
 8007024:	4613      	mov	r3, r2
 8007026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007028:	e04f      	b.n	80070ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007030:	d04b      	beq.n	80070ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007032:	f7fa ff45 	bl	8001ec0 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	429a      	cmp	r2, r3
 8007040:	d302      	bcc.n	8007048 <UART_WaitOnFlagUntilTimeout+0x30>
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e04e      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0304 	and.w	r3, r3, #4
 8007056:	2b00      	cmp	r3, #0
 8007058:	d037      	beq.n	80070ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b80      	cmp	r3, #128	@ 0x80
 800705e:	d034      	beq.n	80070ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b40      	cmp	r3, #64	@ 0x40
 8007064:	d031      	beq.n	80070ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b08      	cmp	r3, #8
 8007072:	d110      	bne.n	8007096 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2208      	movs	r2, #8
 800707a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f838 	bl	80070f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2208      	movs	r2, #8
 8007086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e029      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070a4:	d111      	bne.n	80070ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f81e 	bl	80070f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e00f      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69da      	ldr	r2, [r3, #28]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4013      	ands	r3, r2
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	bf0c      	ite	eq
 80070da:	2301      	moveq	r3, #1
 80070dc:	2300      	movne	r3, #0
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d0a0      	beq.n	800702a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b095      	sub	sp, #84	@ 0x54
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800710e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007118:	643b      	str	r3, [r7, #64]	@ 0x40
 800711a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800711e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e6      	bne.n	80070fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	61fb      	str	r3, [r7, #28]
   return(result);
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007142:	f023 0301 	bic.w	r3, r3, #1
 8007146:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3308      	adds	r3, #8
 800714e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007150:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007152:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e3      	bne.n	800712c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007168:	2b01      	cmp	r3, #1
 800716a:	d118      	bne.n	800719e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	60bb      	str	r3, [r7, #8]
   return(result);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f023 0310 	bic.w	r3, r3, #16
 8007180:	647b      	str	r3, [r7, #68]	@ 0x44
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800718a:	61bb      	str	r3, [r7, #24]
 800718c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6979      	ldr	r1, [r7, #20]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	613b      	str	r3, [r7, #16]
   return(result);
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e6      	bne.n	800716c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071b2:	bf00      	nop
 80071b4:	3754      	adds	r7, #84	@ 0x54
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e027      	b.n	8007224 <HAL_UARTEx_DisableFifoMode+0x66>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2224      	movs	r2, #36	@ 0x24
 80071e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007202:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007244:	2302      	movs	r3, #2
 8007246:	e02d      	b.n	80072a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2224      	movs	r2, #36	@ 0x24
 8007254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0201 	bic.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f84f 	bl	8007328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e02d      	b.n	8007320 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	@ 0x24
 80072d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0201 	bic.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f811 	bl	8007328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007334:	2b00      	cmp	r3, #0
 8007336:	d108      	bne.n	800734a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007348:	e031      	b.n	80073ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800734a:	2308      	movs	r3, #8
 800734c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800734e:	2308      	movs	r3, #8
 8007350:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	0e5b      	lsrs	r3, r3, #25
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	0f5b      	lsrs	r3, r3, #29
 800736a:	b2db      	uxtb	r3, r3
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	7b3a      	ldrb	r2, [r7, #12]
 8007376:	4911      	ldr	r1, [pc, #68]	@ (80073bc <UARTEx_SetNbDataToProcess+0x94>)
 8007378:	5c8a      	ldrb	r2, [r1, r2]
 800737a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800737e:	7b3a      	ldrb	r2, [r7, #12]
 8007380:	490f      	ldr	r1, [pc, #60]	@ (80073c0 <UARTEx_SetNbDataToProcess+0x98>)
 8007382:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007384:	fb93 f3f2 	sdiv	r3, r3, r2
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	7b7a      	ldrb	r2, [r7, #13]
 8007394:	4909      	ldr	r1, [pc, #36]	@ (80073bc <UARTEx_SetNbDataToProcess+0x94>)
 8007396:	5c8a      	ldrb	r2, [r1, r2]
 8007398:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800739c:	7b7a      	ldrb	r2, [r7, #13]
 800739e:	4908      	ldr	r1, [pc, #32]	@ (80073c0 <UARTEx_SetNbDataToProcess+0x98>)
 80073a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	08011410 	.word	0x08011410
 80073c0:	08011418 	.word	0x08011418

080073c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073d4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80073d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073fa:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80073fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007406:	b29a      	uxth	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	b29b      	uxth	r3, r3
 800740c:	43db      	mvns	r3, r3
 800740e:	b29b      	uxth	r3, r3
 8007410:	4013      	ands	r3, r2
 8007412:	b29a      	uxth	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	1d3b      	adds	r3, r7, #4
 8007432:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2201      	movs	r2, #1
 800743a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007464:	b480      	push	{r7}
 8007466:	b0a7      	sub	sp, #156	@ 0x9c
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800748a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	78db      	ldrb	r3, [r3, #3]
 8007492:	2b03      	cmp	r3, #3
 8007494:	d81f      	bhi.n	80074d6 <USB_ActivateEndpoint+0x72>
 8007496:	a201      	add	r2, pc, #4	@ (adr r2, 800749c <USB_ActivateEndpoint+0x38>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074ad 	.word	0x080074ad
 80074a0:	080074c9 	.word	0x080074c9
 80074a4:	080074df 	.word	0x080074df
 80074a8:	080074bb 	.word	0x080074bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80074ac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074b4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074b8:	e012      	b.n	80074e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80074ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074be:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80074c2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074c6:	e00b      	b.n	80074e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80074c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074d0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074d4:	e004      	b.n	80074e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80074dc:	e000      	b.n	80074e0 <USB_ActivateEndpoint+0x7c>
      break;
 80074de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	441a      	add	r2, r3
 80074ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074fe:	b29b      	uxth	r3, r3
 8007500:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	b21b      	sxth	r3, r3
 8007512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800751a:	b21a      	sxth	r2, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	b21b      	sxth	r3, r3
 8007522:	4313      	orrs	r3, r2
 8007524:	b21b      	sxth	r3, r3
 8007526:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	441a      	add	r2, r3
 8007534:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800753c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007548:	b29b      	uxth	r3, r3
 800754a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	7b1b      	ldrb	r3, [r3, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 8180 	bne.w	8007856 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 8084 	beq.w	8007668 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800756a:	b29b      	uxth	r3, r3
 800756c:	461a      	mov	r2, r3
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	4413      	add	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	00da      	lsls	r2, r3, #3
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	88db      	ldrh	r3, [r3, #6]
 8007588:	085b      	lsrs	r3, r3, #1
 800758a:	b29b      	uxth	r3, r3
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	b29a      	uxth	r2, r3
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	827b      	strh	r3, [r7, #18]
 80075a2:	8a7b      	ldrh	r3, [r7, #18]
 80075a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01b      	beq.n	80075e4 <USB_ActivateEndpoint+0x180>
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075c2:	823b      	strh	r3, [r7, #16]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	441a      	add	r2, r3
 80075ce:	8a3b      	ldrh	r3, [r7, #16]
 80075d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	78db      	ldrb	r3, [r3, #3]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d020      	beq.n	800762e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007602:	81bb      	strh	r3, [r7, #12]
 8007604:	89bb      	ldrh	r3, [r7, #12]
 8007606:	f083 0320 	eor.w	r3, r3, #32
 800760a:	81bb      	strh	r3, [r7, #12]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	441a      	add	r2, r3
 8007616:	89bb      	ldrh	r3, [r7, #12]
 8007618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800761c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007628:	b29b      	uxth	r3, r3
 800762a:	8013      	strh	r3, [r2, #0]
 800762c:	e3f9      	b.n	8007e22 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007644:	81fb      	strh	r3, [r7, #14]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	441a      	add	r2, r3
 8007650:	89fb      	ldrh	r3, [r7, #14]
 8007652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800765a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800765e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007662:	b29b      	uxth	r3, r3
 8007664:	8013      	strh	r3, [r2, #0]
 8007666:	e3dc      	b.n	8007e22 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	633b      	str	r3, [r7, #48]	@ 0x30
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007672:	b29b      	uxth	r3, r3
 8007674:	461a      	mov	r2, r3
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	4413      	add	r3, r2
 800767a:	633b      	str	r3, [r7, #48]	@ 0x30
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	00da      	lsls	r2, r3, #3
 8007682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007684:	4413      	add	r3, r2
 8007686:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800768a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	88db      	ldrh	r3, [r3, #6]
 8007690:	085b      	lsrs	r3, r3, #1
 8007692:	b29b      	uxth	r3, r3
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ac:	4413      	add	r3, r2
 80076ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	00da      	lsls	r2, r3, #3
 80076b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b8:	4413      	add	r3, r2
 80076ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076be:	627b      	str	r3, [r7, #36]	@ 0x24
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	801a      	strh	r2, [r3, #0]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <USB_ActivateEndpoint+0x28a>
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	e041      	b.n	8007772 <USB_ActivateEndpoint+0x30e>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80076f4:	d81c      	bhi.n	8007730 <USB_ActivateEndpoint+0x2cc>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	085b      	lsrs	r3, r3, #1
 80076fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <USB_ActivateEndpoint+0x2b2>
 800770c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007710:	3301      	adds	r3, #1
 8007712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29a      	uxth	r2, r3
 800771c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007720:	b29b      	uxth	r3, r3
 8007722:	029b      	lsls	r3, r3, #10
 8007724:	b29b      	uxth	r3, r3
 8007726:	4313      	orrs	r3, r2
 8007728:	b29a      	uxth	r2, r3
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	e020      	b.n	8007772 <USB_ActivateEndpoint+0x30e>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 031f 	and.w	r3, r3, #31
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <USB_ActivateEndpoint+0x2ec>
 8007746:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800774a:	3b01      	subs	r3, #1
 800774c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29a      	uxth	r2, r3
 8007756:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800775a:	b29b      	uxth	r3, r3
 800775c:	029b      	lsls	r3, r3, #10
 800775e:	b29b      	uxth	r3, r3
 8007760:	4313      	orrs	r3, r2
 8007762:	b29b      	uxth	r3, r3
 8007764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776c:	b29a      	uxth	r2, r3
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007780:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d01b      	beq.n	80077c2 <USB_ActivateEndpoint+0x35e>
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	b29b      	uxth	r3, r3
 8007798:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800779c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077a0:	843b      	strh	r3, [r7, #32]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	441a      	add	r2, r3
 80077ac:	8c3b      	ldrh	r3, [r7, #32]
 80077ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077be:	b29b      	uxth	r3, r3
 80077c0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d124      	bne.n	8007814 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e0:	83bb      	strh	r3, [r7, #28]
 80077e2:	8bbb      	ldrh	r3, [r7, #28]
 80077e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80077e8:	83bb      	strh	r3, [r7, #28]
 80077ea:	8bbb      	ldrh	r3, [r7, #28]
 80077ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80077f0:	83bb      	strh	r3, [r7, #28]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	441a      	add	r2, r3
 80077fc:	8bbb      	ldrh	r3, [r7, #28]
 80077fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800780a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800780e:	b29b      	uxth	r3, r3
 8007810:	8013      	strh	r3, [r2, #0]
 8007812:	e306      	b.n	8007e22 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782a:	83fb      	strh	r3, [r7, #30]
 800782c:	8bfb      	ldrh	r3, [r7, #30]
 800782e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007832:	83fb      	strh	r3, [r7, #30]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	441a      	add	r2, r3
 800783e:	8bfb      	ldrh	r3, [r7, #30]
 8007840:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007844:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800784c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007850:	b29b      	uxth	r3, r3
 8007852:	8013      	strh	r3, [r2, #0]
 8007854:	e2e5      	b.n	8007e22 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	78db      	ldrb	r3, [r3, #3]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d11e      	bne.n	800789c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007874:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	441a      	add	r2, r3
 8007882:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8007886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800788a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800788e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007896:	b29b      	uxth	r3, r3
 8007898:	8013      	strh	r3, [r2, #0]
 800789a:	e01d      	b.n	80078d8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80078ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078b2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	441a      	add	r2, r3
 80078c0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80078c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	461a      	mov	r2, r3
 80078e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078e8:	4413      	add	r3, r2
 80078ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	00da      	lsls	r2, r3, #3
 80078f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	891b      	ldrh	r3, [r3, #8]
 8007900:	085b      	lsrs	r3, r3, #1
 8007902:	b29b      	uxth	r3, r3
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800790a:	801a      	strh	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007916:	b29b      	uxth	r3, r3
 8007918:	461a      	mov	r2, r3
 800791a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800791c:	4413      	add	r3, r2
 800791e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	00da      	lsls	r2, r3, #3
 8007926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007928:	4413      	add	r3, r2
 800792a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800792e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	895b      	ldrh	r3, [r3, #10]
 8007934:	085b      	lsrs	r3, r3, #1
 8007936:	b29b      	uxth	r3, r3
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800793e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	785b      	ldrb	r3, [r3, #1]
 8007944:	2b00      	cmp	r3, #0
 8007946:	f040 81af 	bne.w	8007ca8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800795a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800795e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01d      	beq.n	80079a2 <USB_ActivateEndpoint+0x53e>
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800797c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	441a      	add	r2, r3
 800798a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800798e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007996:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800799a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800799e:	b29b      	uxth	r3, r3
 80079a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80079b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80079b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d01d      	beq.n	80079fa <USB_ActivateEndpoint+0x596>
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079d4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	441a      	add	r2, r3
 80079e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80079e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d16b      	bne.n	8007ada <USB_ActivateEndpoint+0x676>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a12:	4413      	add	r3, r2
 8007a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	00da      	lsls	r2, r3, #3
 8007a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a1e:	4413      	add	r3, r2
 8007a20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <USB_ActivateEndpoint+0x5f0>
 8007a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a50:	801a      	strh	r2, [r3, #0]
 8007a52:	e05d      	b.n	8007b10 <USB_ActivateEndpoint+0x6ac>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a5a:	d81c      	bhi.n	8007a96 <USB_ActivateEndpoint+0x632>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <USB_ActivateEndpoint+0x618>
 8007a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a76:	3301      	adds	r3, #1
 8007a78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	029b      	lsls	r3, r3, #10
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a92:	801a      	strh	r2, [r3, #0]
 8007a94:	e03c      	b.n	8007b10 <USB_ActivateEndpoint+0x6ac>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	095b      	lsrs	r3, r3, #5
 8007a9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	f003 031f 	and.w	r3, r3, #31
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d104      	bne.n	8007ab6 <USB_ActivateEndpoint+0x652>
 8007aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	029b      	lsls	r3, r3, #10
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ad6:	801a      	strh	r2, [r3, #0]
 8007ad8:	e01a      	b.n	8007b10 <USB_ActivateEndpoint+0x6ac>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	785b      	ldrb	r3, [r3, #1]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d116      	bne.n	8007b10 <USB_ActivateEndpoint+0x6ac>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	461a      	mov	r2, r3
 8007af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af2:	4413      	add	r3, r2
 8007af4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	00da      	lsls	r2, r3, #3
 8007afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007afe:	4413      	add	r3, r2
 8007b00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b04:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d16b      	bne.n	8007bf4 <USB_ActivateEndpoint+0x790>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2c:	4413      	add	r3, r2
 8007b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	00da      	lsls	r2, r3, #3
 8007b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b38:	4413      	add	r3, r2
 8007b3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <USB_ActivateEndpoint+0x70a>
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6a:	801a      	strh	r2, [r3, #0]
 8007b6c:	e05b      	b.n	8007c26 <USB_ActivateEndpoint+0x7c2>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b74:	d81c      	bhi.n	8007bb0 <USB_ActivateEndpoint+0x74c>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d004      	beq.n	8007b96 <USB_ActivateEndpoint+0x732>
 8007b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b90:	3301      	adds	r3, #1
 8007b92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	029b      	lsls	r3, r3, #10
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bac:	801a      	strh	r2, [r3, #0]
 8007bae:	e03a      	b.n	8007c26 <USB_ActivateEndpoint+0x7c2>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	095b      	lsrs	r3, r3, #5
 8007bb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f003 031f 	and.w	r3, r3, #31
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d104      	bne.n	8007bd0 <USB_ActivateEndpoint+0x76c>
 8007bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	029b      	lsls	r3, r3, #10
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4313      	orrs	r3, r2
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e018      	b.n	8007c26 <USB_ActivateEndpoint+0x7c2>
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d114      	bne.n	8007c26 <USB_ActivateEndpoint+0x7c2>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	461a      	mov	r2, r3
 8007c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c08:	4413      	add	r3, r2
 8007c0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	00da      	lsls	r2, r3, #3
 8007c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c14:	4413      	add	r3, r2
 8007c16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c24:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c44:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c48:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	441a      	add	r2, r3
 8007c58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c84:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	441a      	add	r2, r3
 8007c90:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007c92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	8013      	strh	r3, [r2, #0]
 8007ca6:	e0bc      	b.n	8007e22 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007cb8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007cbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01d      	beq.n	8007d00 <USB_ActivateEndpoint+0x89c>
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cda:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	441a      	add	r2, r3
 8007ce8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007d10:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01d      	beq.n	8007d58 <USB_ActivateEndpoint+0x8f4>
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d32:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	441a      	add	r2, r3
 8007d40:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	78db      	ldrb	r3, [r3, #3]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d024      	beq.n	8007daa <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d76:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007d7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007d7e:	f083 0320 	eor.w	r3, r3, #32
 8007d82:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	441a      	add	r2, r3
 8007d90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	8013      	strh	r3, [r2, #0]
 8007da8:	e01d      	b.n	8007de6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dc0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	441a      	add	r2, r3
 8007dce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007dd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dfc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	441a      	add	r2, r3
 8007e0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007e22:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	379c      	adds	r7, #156	@ 0x9c
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop

08007e34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b08d      	sub	sp, #52	@ 0x34
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	7b1b      	ldrb	r3, [r3, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f040 808e 	bne.w	8007f64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	785b      	ldrb	r3, [r3, #1]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d044      	beq.n	8007eda <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	81bb      	strh	r3, [r7, #12]
 8007e5e:	89bb      	ldrh	r3, [r7, #12]
 8007e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01b      	beq.n	8007ea0 <USB_DeactivateEndpoint+0x6c>
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e7e:	817b      	strh	r3, [r7, #10]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	441a      	add	r2, r3
 8007e8a:	897b      	ldrh	r3, [r7, #10]
 8007e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eb6:	813b      	strh	r3, [r7, #8]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	441a      	add	r2, r3
 8007ec2:	893b      	ldrh	r3, [r7, #8]
 8007ec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	8013      	strh	r3, [r2, #0]
 8007ed8:	e192      	b.n	8008200 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	827b      	strh	r3, [r7, #18]
 8007ee8:	8a7b      	ldrh	r3, [r7, #18]
 8007eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d01b      	beq.n	8007f2a <USB_DeactivateEndpoint+0xf6>
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f08:	823b      	strh	r3, [r7, #16]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	441a      	add	r2, r3
 8007f14:	8a3b      	ldrh	r3, [r7, #16]
 8007f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f40:	81fb      	strh	r3, [r7, #14]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	441a      	add	r2, r3
 8007f4c:	89fb      	ldrh	r3, [r7, #14]
 8007f4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	8013      	strh	r3, [r2, #0]
 8007f62:	e14d      	b.n	8008200 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f040 80a5 	bne.w	80080b8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	843b      	strh	r3, [r7, #32]
 8007f7c:	8c3b      	ldrh	r3, [r7, #32]
 8007f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d01b      	beq.n	8007fbe <USB_DeactivateEndpoint+0x18a>
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f9c:	83fb      	strh	r3, [r7, #30]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	441a      	add	r2, r3
 8007fa8:	8bfb      	ldrh	r3, [r7, #30]
 8007faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	83bb      	strh	r3, [r7, #28]
 8007fcc:	8bbb      	ldrh	r3, [r7, #28]
 8007fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d01b      	beq.n	800800e <USB_DeactivateEndpoint+0x1da>
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fec:	837b      	strh	r3, [r7, #26]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	441a      	add	r2, r3
 8007ff8:	8b7b      	ldrh	r3, [r7, #26]
 8007ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008006:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800800a:	b29b      	uxth	r3, r3
 800800c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008024:	833b      	strh	r3, [r7, #24]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	441a      	add	r2, r3
 8008030:	8b3b      	ldrh	r3, [r7, #24]
 8008032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800803a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800803e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008042:	b29b      	uxth	r3, r3
 8008044:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800805c:	82fb      	strh	r3, [r7, #22]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	441a      	add	r2, r3
 8008068:	8afb      	ldrh	r3, [r7, #22]
 800806a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800806e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800807a:	b29b      	uxth	r3, r3
 800807c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	b29b      	uxth	r3, r3
 800808c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008094:	82bb      	strh	r3, [r7, #20]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	441a      	add	r2, r3
 80080a0:	8abb      	ldrh	r3, [r7, #20]
 80080a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	8013      	strh	r3, [r2, #0]
 80080b6:	e0a3      	b.n	8008200 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80080c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80080c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01b      	beq.n	8008108 <USB_DeactivateEndpoint+0x2d4>
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	441a      	add	r2, r3
 80080f2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80080f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008104:	b29b      	uxth	r3, r3
 8008106:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008116:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01b      	beq.n	8008158 <USB_DeactivateEndpoint+0x324>
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	b29b      	uxth	r3, r3
 800812e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008136:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	441a      	add	r2, r3
 8008142:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800814c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008150:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008154:	b29b      	uxth	r3, r3
 8008156:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	b29b      	uxth	r3, r3
 8008166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800816a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800816e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	441a      	add	r2, r3
 800817a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800817c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008180:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008184:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800818c:	b29b      	uxth	r3, r3
 800818e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	b29b      	uxth	r3, r3
 800819e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	441a      	add	r2, r3
 80081b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081de:	847b      	strh	r3, [r7, #34]	@ 0x22
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	441a      	add	r2, r3
 80081ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3734      	adds	r7, #52	@ 0x34
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b0ac      	sub	sp, #176	@ 0xb0
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	2b01      	cmp	r3, #1
 800821e:	f040 84ca 	bne.w	8008bb6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	429a      	cmp	r2, r3
 800822c:	d904      	bls.n	8008238 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008236:	e003      	b.n	8008240 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	7b1b      	ldrb	r3, [r3, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d122      	bne.n	800828e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	6959      	ldr	r1, [r3, #20]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	88da      	ldrh	r2, [r3, #6]
 8008250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008254:	b29b      	uxth	r3, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 febd 	bl	8008fd6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008266:	b29b      	uxth	r3, r3
 8008268:	461a      	mov	r2, r3
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	4413      	add	r3, r2
 800826e:	613b      	str	r3, [r7, #16]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	00da      	lsls	r2, r3, #3
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	4413      	add	r3, r2
 800827a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	801a      	strh	r2, [r3, #0]
 800828a:	f000 bc6f 	b.w	8008b6c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	78db      	ldrb	r3, [r3, #3]
 8008292:	2b02      	cmp	r3, #2
 8008294:	f040 831e 	bne.w	80088d4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	6a1a      	ldr	r2, [r3, #32]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	f240 82cf 	bls.w	8008844 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082bc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	441a      	add	r2, r3
 80082ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80082ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082d6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80082da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082de:	b29b      	uxth	r3, r3
 80082e0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	6a1a      	ldr	r2, [r3, #32]
 80082e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082ea:	1ad2      	subs	r2, r2, r3
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 814f 	beq.w	80085a6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	633b      	str	r3, [r7, #48]	@ 0x30
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	785b      	ldrb	r3, [r3, #1]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d16b      	bne.n	80083ec <USB_EPStartXfer+0x1de>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800831e:	b29b      	uxth	r3, r3
 8008320:	461a      	mov	r2, r3
 8008322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008324:	4413      	add	r3, r2
 8008326:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	00da      	lsls	r2, r3, #3
 800832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008330:	4413      	add	r3, r2
 8008332:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008336:	627b      	str	r3, [r7, #36]	@ 0x24
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008342:	b29a      	uxth	r2, r3
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	801a      	strh	r2, [r3, #0]
 8008348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <USB_EPStartXfer+0x158>
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	b29b      	uxth	r3, r3
 8008356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800835a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800835e:	b29a      	uxth	r2, r3
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008362:	801a      	strh	r2, [r3, #0]
 8008364:	e05b      	b.n	800841e <USB_EPStartXfer+0x210>
 8008366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800836a:	2b3e      	cmp	r3, #62	@ 0x3e
 800836c:	d81c      	bhi.n	80083a8 <USB_EPStartXfer+0x19a>
 800836e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008372:	085b      	lsrs	r3, r3, #1
 8008374:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	d004      	beq.n	800838e <USB_EPStartXfer+0x180>
 8008384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008388:	3301      	adds	r3, #1
 800838a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b29a      	uxth	r2, r3
 8008394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008398:	b29b      	uxth	r3, r3
 800839a:	029b      	lsls	r3, r3, #10
 800839c:	b29b      	uxth	r3, r3
 800839e:	4313      	orrs	r3, r2
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	801a      	strh	r2, [r3, #0]
 80083a6:	e03a      	b.n	800841e <USB_EPStartXfer+0x210>
 80083a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083ac:	095b      	lsrs	r3, r3, #5
 80083ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d104      	bne.n	80083c8 <USB_EPStartXfer+0x1ba>
 80083be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083c2:	3b01      	subs	r3, #1
 80083c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	029b      	lsls	r3, r3, #10
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	4313      	orrs	r3, r2
 80083da:	b29b      	uxth	r3, r3
 80083dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	801a      	strh	r2, [r3, #0]
 80083ea:	e018      	b.n	800841e <USB_EPStartXfer+0x210>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	785b      	ldrb	r3, [r3, #1]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d114      	bne.n	800841e <USB_EPStartXfer+0x210>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	461a      	mov	r2, r3
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	4413      	add	r3, r2
 8008402:	633b      	str	r3, [r7, #48]	@ 0x30
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	00da      	lsls	r2, r3, #3
 800840a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840c:	4413      	add	r3, r2
 800840e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008418:	b29a      	uxth	r2, r3
 800841a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	895b      	ldrh	r3, [r3, #10]
 8008422:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	6959      	ldr	r1, [r3, #20]
 800842a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800842e:	b29b      	uxth	r3, r3
 8008430:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fdce 	bl	8008fd6 <USB_WritePMA>
            ep->xfer_buff += len;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	695a      	ldr	r2, [r3, #20]
 800843e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008442:	441a      	add	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	6a1a      	ldr	r2, [r3, #32]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	429a      	cmp	r2, r3
 8008452:	d907      	bls.n	8008464 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	6a1a      	ldr	r2, [r3, #32]
 8008458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800845c:	1ad2      	subs	r2, r2, r3
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	621a      	str	r2, [r3, #32]
 8008462:	e006      	b.n	8008472 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2200      	movs	r2, #0
 8008470:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d16b      	bne.n	8008552 <USB_EPStartXfer+0x344>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008484:	b29b      	uxth	r3, r3
 8008486:	461a      	mov	r2, r3
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	4413      	add	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	00da      	lsls	r2, r3, #3
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	4413      	add	r3, r2
 8008498:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	801a      	strh	r2, [r3, #0]
 80084ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10a      	bne.n	80084cc <USB_EPStartXfer+0x2be>
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	801a      	strh	r2, [r3, #0]
 80084ca:	e05d      	b.n	8008588 <USB_EPStartXfer+0x37a>
 80084cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80084d2:	d81c      	bhi.n	800850e <USB_EPStartXfer+0x300>
 80084d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084d8:	085b      	lsrs	r3, r3, #1
 80084da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d004      	beq.n	80084f4 <USB_EPStartXfer+0x2e6>
 80084ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084ee:	3301      	adds	r3, #1
 80084f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084fe:	b29b      	uxth	r3, r3
 8008500:	029b      	lsls	r3, r3, #10
 8008502:	b29b      	uxth	r3, r3
 8008504:	4313      	orrs	r3, r2
 8008506:	b29a      	uxth	r2, r3
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	801a      	strh	r2, [r3, #0]
 800850c:	e03c      	b.n	8008588 <USB_EPStartXfer+0x37a>
 800850e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008512:	095b      	lsrs	r3, r3, #5
 8008514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800851c:	f003 031f 	and.w	r3, r3, #31
 8008520:	2b00      	cmp	r3, #0
 8008522:	d104      	bne.n	800852e <USB_EPStartXfer+0x320>
 8008524:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008528:	3b01      	subs	r3, #1
 800852a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	b29a      	uxth	r2, r3
 8008534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008538:	b29b      	uxth	r3, r3
 800853a:	029b      	lsls	r3, r3, #10
 800853c:	b29b      	uxth	r3, r3
 800853e:	4313      	orrs	r3, r2
 8008540:	b29b      	uxth	r3, r3
 8008542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800854a:	b29a      	uxth	r2, r3
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	e01a      	b.n	8008588 <USB_EPStartXfer+0x37a>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d116      	bne.n	8008588 <USB_EPStartXfer+0x37a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	623b      	str	r3, [r7, #32]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008564:	b29b      	uxth	r3, r3
 8008566:	461a      	mov	r2, r3
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	4413      	add	r3, r2
 800856c:	623b      	str	r3, [r7, #32]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	00da      	lsls	r2, r3, #3
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	4413      	add	r3, r2
 8008578:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800857c:	61fb      	str	r3, [r7, #28]
 800857e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008582:	b29a      	uxth	r2, r3
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	891b      	ldrh	r3, [r3, #8]
 800858c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	6959      	ldr	r1, [r3, #20]
 8008594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008598:	b29b      	uxth	r3, r3
 800859a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fd19 	bl	8008fd6 <USB_WritePMA>
 80085a4:	e2e2      	b.n	8008b6c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	785b      	ldrb	r3, [r3, #1]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d16b      	bne.n	8008686 <USB_EPStartXfer+0x478>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	461a      	mov	r2, r3
 80085bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085be:	4413      	add	r3, r2
 80085c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	00da      	lsls	r2, r3, #3
 80085c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085ca:	4413      	add	r3, r2
 80085cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085dc:	b29a      	uxth	r2, r3
 80085de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085e0:	801a      	strh	r2, [r3, #0]
 80085e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10a      	bne.n	8008600 <USB_EPStartXfer+0x3f2>
 80085ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	e05d      	b.n	80086bc <USB_EPStartXfer+0x4ae>
 8008600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008604:	2b3e      	cmp	r3, #62	@ 0x3e
 8008606:	d81c      	bhi.n	8008642 <USB_EPStartXfer+0x434>
 8008608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800860c:	085b      	lsrs	r3, r3, #1
 800860e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <USB_EPStartXfer+0x41a>
 800861e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008622:	3301      	adds	r3, #1
 8008624:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	b29a      	uxth	r2, r3
 800862e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008632:	b29b      	uxth	r3, r3
 8008634:	029b      	lsls	r3, r3, #10
 8008636:	b29b      	uxth	r3, r3
 8008638:	4313      	orrs	r3, r2
 800863a:	b29a      	uxth	r2, r3
 800863c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800863e:	801a      	strh	r2, [r3, #0]
 8008640:	e03c      	b.n	80086bc <USB_EPStartXfer+0x4ae>
 8008642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800864c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008650:	f003 031f 	and.w	r3, r3, #31
 8008654:	2b00      	cmp	r3, #0
 8008656:	d104      	bne.n	8008662 <USB_EPStartXfer+0x454>
 8008658:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800865c:	3b01      	subs	r3, #1
 800865e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	b29a      	uxth	r2, r3
 8008668:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800866c:	b29b      	uxth	r3, r3
 800866e:	029b      	lsls	r3, r3, #10
 8008670:	b29b      	uxth	r3, r3
 8008672:	4313      	orrs	r3, r2
 8008674:	b29b      	uxth	r3, r3
 8008676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800867a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800867e:	b29a      	uxth	r2, r3
 8008680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008682:	801a      	strh	r2, [r3, #0]
 8008684:	e01a      	b.n	80086bc <USB_EPStartXfer+0x4ae>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	785b      	ldrb	r3, [r3, #1]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d116      	bne.n	80086bc <USB_EPStartXfer+0x4ae>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	653b      	str	r3, [r7, #80]	@ 0x50
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008698:	b29b      	uxth	r3, r3
 800869a:	461a      	mov	r2, r3
 800869c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800869e:	4413      	add	r3, r2
 80086a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	00da      	lsls	r2, r3, #3
 80086a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086aa:	4413      	add	r3, r2
 80086ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80086b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	891b      	ldrh	r3, [r3, #8]
 80086c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6959      	ldr	r1, [r3, #20]
 80086c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fc7f 	bl	8008fd6 <USB_WritePMA>
            ep->xfer_buff += len;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	695a      	ldr	r2, [r3, #20]
 80086dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086e0:	441a      	add	r2, r3
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6a1a      	ldr	r2, [r3, #32]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d907      	bls.n	8008702 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	6a1a      	ldr	r2, [r3, #32]
 80086f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086fa:	1ad2      	subs	r2, r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	621a      	str	r2, [r3, #32]
 8008700:	e006      	b.n	8008710 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2200      	movs	r2, #0
 800870e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	643b      	str	r3, [r7, #64]	@ 0x40
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	785b      	ldrb	r3, [r3, #1]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d16b      	bne.n	80087f4 <USB_EPStartXfer+0x5e6>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008726:	b29b      	uxth	r3, r3
 8008728:	461a      	mov	r2, r3
 800872a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872c:	4413      	add	r3, r2
 800872e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	00da      	lsls	r2, r3, #3
 8008736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008738:	4413      	add	r3, r2
 800873a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800873e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29b      	uxth	r3, r3
 8008746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800874a:	b29a      	uxth	r2, r3
 800874c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800874e:	801a      	strh	r2, [r3, #0]
 8008750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <USB_EPStartXfer+0x560>
 8008758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	b29b      	uxth	r3, r3
 800875e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008766:	b29a      	uxth	r2, r3
 8008768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800876a:	801a      	strh	r2, [r3, #0]
 800876c:	e05b      	b.n	8008826 <USB_EPStartXfer+0x618>
 800876e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008772:	2b3e      	cmp	r3, #62	@ 0x3e
 8008774:	d81c      	bhi.n	80087b0 <USB_EPStartXfer+0x5a2>
 8008776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800877a:	085b      	lsrs	r3, r3, #1
 800877c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d004      	beq.n	8008796 <USB_EPStartXfer+0x588>
 800878c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008790:	3301      	adds	r3, #1
 8008792:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008798:	881b      	ldrh	r3, [r3, #0]
 800879a:	b29a      	uxth	r2, r3
 800879c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	029b      	lsls	r3, r3, #10
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	4313      	orrs	r3, r2
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ac:	801a      	strh	r2, [r3, #0]
 80087ae:	e03a      	b.n	8008826 <USB_EPStartXfer+0x618>
 80087b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087b4:	095b      	lsrs	r3, r3, #5
 80087b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087be:	f003 031f 	and.w	r3, r3, #31
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d104      	bne.n	80087d0 <USB_EPStartXfer+0x5c2>
 80087c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087ca:	3b01      	subs	r3, #1
 80087cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087da:	b29b      	uxth	r3, r3
 80087dc:	029b      	lsls	r3, r3, #10
 80087de:	b29b      	uxth	r3, r3
 80087e0:	4313      	orrs	r3, r2
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f0:	801a      	strh	r2, [r3, #0]
 80087f2:	e018      	b.n	8008826 <USB_EPStartXfer+0x618>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d114      	bne.n	8008826 <USB_EPStartXfer+0x618>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008802:	b29b      	uxth	r3, r3
 8008804:	461a      	mov	r2, r3
 8008806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008808:	4413      	add	r3, r2
 800880a:	643b      	str	r3, [r7, #64]	@ 0x40
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	00da      	lsls	r2, r3, #3
 8008812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008814:	4413      	add	r3, r2
 8008816:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800881a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800881c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008820:	b29a      	uxth	r2, r3
 8008822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008824:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	895b      	ldrh	r3, [r3, #10]
 800882a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	6959      	ldr	r1, [r3, #20]
 8008832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008836:	b29b      	uxth	r3, r3
 8008838:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fbca 	bl	8008fd6 <USB_WritePMA>
 8008842:	e193      	b.n	8008b6c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	6a1b      	ldr	r3, [r3, #32]
 8008848:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29b      	uxth	r3, r3
 800885a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800885e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008862:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	441a      	add	r2, r3
 8008870:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800887c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008884:	b29b      	uxth	r3, r3
 8008886:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008892:	b29b      	uxth	r3, r3
 8008894:	461a      	mov	r2, r3
 8008896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008898:	4413      	add	r3, r2
 800889a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	00da      	lsls	r2, r3, #3
 80088a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088a4:	4413      	add	r3, r2
 80088a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	891b      	ldrh	r3, [r3, #8]
 80088ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	6959      	ldr	r1, [r3, #20]
 80088c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fb82 	bl	8008fd6 <USB_WritePMA>
 80088d2:	e14b      	b.n	8008b6c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	6a1a      	ldr	r2, [r3, #32]
 80088d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088dc:	1ad2      	subs	r2, r2, r3
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 809a 	beq.w	8008a2e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	785b      	ldrb	r3, [r3, #1]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d16b      	bne.n	80089de <USB_EPStartXfer+0x7d0>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008910:	b29b      	uxth	r3, r3
 8008912:	461a      	mov	r2, r3
 8008914:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008916:	4413      	add	r3, r2
 8008918:	66bb      	str	r3, [r7, #104]	@ 0x68
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	00da      	lsls	r2, r3, #3
 8008920:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008922:	4413      	add	r3, r2
 8008924:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008928:	667b      	str	r3, [r7, #100]	@ 0x64
 800892a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	b29b      	uxth	r3, r3
 8008930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008934:	b29a      	uxth	r2, r3
 8008936:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <USB_EPStartXfer+0x74a>
 8008942:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	b29b      	uxth	r3, r3
 8008948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800894c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008950:	b29a      	uxth	r2, r3
 8008952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008954:	801a      	strh	r2, [r3, #0]
 8008956:	e05b      	b.n	8008a10 <USB_EPStartXfer+0x802>
 8008958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800895c:	2b3e      	cmp	r3, #62	@ 0x3e
 800895e:	d81c      	bhi.n	800899a <USB_EPStartXfer+0x78c>
 8008960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008964:	085b      	lsrs	r3, r3, #1
 8008966:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800896a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d004      	beq.n	8008980 <USB_EPStartXfer+0x772>
 8008976:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800897a:	3301      	adds	r3, #1
 800897c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	b29a      	uxth	r2, r3
 8008986:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800898a:	b29b      	uxth	r3, r3
 800898c:	029b      	lsls	r3, r3, #10
 800898e:	b29b      	uxth	r3, r3
 8008990:	4313      	orrs	r3, r2
 8008992:	b29a      	uxth	r2, r3
 8008994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008996:	801a      	strh	r2, [r3, #0]
 8008998:	e03a      	b.n	8008a10 <USB_EPStartXfer+0x802>
 800899a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800899e:	095b      	lsrs	r3, r3, #5
 80089a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089a8:	f003 031f 	and.w	r3, r3, #31
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d104      	bne.n	80089ba <USB_EPStartXfer+0x7ac>
 80089b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089b4:	3b01      	subs	r3, #1
 80089b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	b29a      	uxth	r2, r3
 80089c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	029b      	lsls	r3, r3, #10
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	4313      	orrs	r3, r2
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089da:	801a      	strh	r2, [r3, #0]
 80089dc:	e018      	b.n	8008a10 <USB_EPStartXfer+0x802>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	785b      	ldrb	r3, [r3, #1]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d114      	bne.n	8008a10 <USB_EPStartXfer+0x802>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	461a      	mov	r2, r3
 80089f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089f2:	4413      	add	r3, r2
 80089f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	00da      	lsls	r2, r3, #3
 80089fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089fe:	4413      	add	r3, r2
 8008a00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	895b      	ldrh	r3, [r3, #10]
 8008a14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	6959      	ldr	r1, [r3, #20]
 8008a1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fad5 	bl	8008fd6 <USB_WritePMA>
 8008a2c:	e09e      	b.n	8008b6c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	785b      	ldrb	r3, [r3, #1]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d16b      	bne.n	8008b0e <USB_EPStartXfer+0x900>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	461a      	mov	r2, r3
 8008a44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a46:	4413      	add	r3, r2
 8008a48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	00da      	lsls	r2, r3, #3
 8008a50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a52:	4413      	add	r3, r2
 8008a54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a68:	801a      	strh	r2, [r3, #0]
 8008a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <USB_EPStartXfer+0x87a>
 8008a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a84:	801a      	strh	r2, [r3, #0]
 8008a86:	e063      	b.n	8008b50 <USB_EPStartXfer+0x942>
 8008a88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a8e:	d81c      	bhi.n	8008aca <USB_EPStartXfer+0x8bc>
 8008a90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a94:	085b      	lsrs	r3, r3, #1
 8008a96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d004      	beq.n	8008ab0 <USB_EPStartXfer+0x8a2>
 8008aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008aaa:	3301      	adds	r3, #1
 8008aac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	029b      	lsls	r3, r3, #10
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	e042      	b.n	8008b50 <USB_EPStartXfer+0x942>
 8008aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ace:	095b      	lsrs	r3, r3, #5
 8008ad0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ad8:	f003 031f 	and.w	r3, r3, #31
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d104      	bne.n	8008aea <USB_EPStartXfer+0x8dc>
 8008ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008aea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	029b      	lsls	r3, r3, #10
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	4313      	orrs	r3, r2
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b0a:	801a      	strh	r2, [r3, #0]
 8008b0c:	e020      	b.n	8008b50 <USB_EPStartXfer+0x942>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	785b      	ldrb	r3, [r3, #1]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d11c      	bne.n	8008b50 <USB_EPStartXfer+0x942>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	461a      	mov	r2, r3
 8008b26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	00da      	lsls	r2, r3, #3
 8008b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	891b      	ldrh	r3, [r3, #8]
 8008b54:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	6959      	ldr	r1, [r3, #20]
 8008b5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fa35 	bl	8008fd6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b82:	817b      	strh	r3, [r7, #10]
 8008b84:	897b      	ldrh	r3, [r7, #10]
 8008b86:	f083 0310 	eor.w	r3, r3, #16
 8008b8a:	817b      	strh	r3, [r7, #10]
 8008b8c:	897b      	ldrh	r3, [r7, #10]
 8008b8e:	f083 0320 	eor.w	r3, r3, #32
 8008b92:	817b      	strh	r3, [r7, #10]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	441a      	add	r2, r3
 8008b9e:	897b      	ldrh	r3, [r7, #10]
 8008ba0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ba4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	8013      	strh	r3, [r2, #0]
 8008bb4:	e0d5      	b.n	8008d62 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	7b1b      	ldrb	r3, [r3, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d156      	bne.n	8008c6c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d122      	bne.n	8008c0c <USB_EPStartXfer+0x9fe>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	78db      	ldrb	r3, [r3, #3]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d11e      	bne.n	8008c0c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008be4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	441a      	add	r2, r3
 8008bf2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bfe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	8013      	strh	r3, [r2, #0]
 8008c0a:	e01d      	b.n	8008c48 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c22:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	441a      	add	r2, r3
 8008c30:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d907      	bls.n	8008c64 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	699a      	ldr	r2, [r3, #24]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	1ad2      	subs	r2, r2, r3
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	619a      	str	r2, [r3, #24]
 8008c62:	e054      	b.n	8008d0e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2200      	movs	r2, #0
 8008c68:	619a      	str	r2, [r3, #24]
 8008c6a:	e050      	b.n	8008d0e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	78db      	ldrb	r3, [r3, #3]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d142      	bne.n	8008cfa <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d048      	beq.n	8008d0e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c8c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d005      	beq.n	8008ca4 <USB_EPStartXfer+0xa96>
 8008c98:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10b      	bne.n	8008cbc <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ca4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d12e      	bne.n	8008d0e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008cb0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d128      	bne.n	8008d0e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cd2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	441a      	add	r2, r3
 8008ce0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008ce4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ce8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cf0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	8013      	strh	r3, [r2, #0]
 8008cf8:	e009      	b.n	8008d0e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	78db      	ldrb	r3, [r3, #3]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d103      	bne.n	8008d0a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2200      	movs	r2, #0
 8008d06:	619a      	str	r2, [r3, #24]
 8008d08:	e001      	b.n	8008d0e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e02a      	b.n	8008d64 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d24:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d2c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d30:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d3c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	441a      	add	r2, r3
 8008d4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	37b0      	adds	r7, #176	@ 0xb0
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	785b      	ldrb	r3, [r3, #1]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d020      	beq.n	8008dc0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d94:	81bb      	strh	r3, [r7, #12]
 8008d96:	89bb      	ldrh	r3, [r7, #12]
 8008d98:	f083 0310 	eor.w	r3, r3, #16
 8008d9c:	81bb      	strh	r3, [r7, #12]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	441a      	add	r2, r3
 8008da8:	89bb      	ldrh	r3, [r7, #12]
 8008daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	8013      	strh	r3, [r2, #0]
 8008dbe:	e01f      	b.n	8008e00 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd6:	81fb      	strh	r3, [r7, #14]
 8008dd8:	89fb      	ldrh	r3, [r7, #14]
 8008dda:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008dde:	81fb      	strh	r3, [r7, #14]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	441a      	add	r2, r3
 8008dea:	89fb      	ldrh	r3, [r7, #14]
 8008dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b087      	sub	sp, #28
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	785b      	ldrb	r3, [r3, #1]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d04c      	beq.n	8008eba <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	823b      	strh	r3, [r7, #16]
 8008e2e:	8a3b      	ldrh	r3, [r7, #16]
 8008e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01b      	beq.n	8008e70 <USB_EPClearStall+0x62>
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e4e:	81fb      	strh	r3, [r7, #14]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	441a      	add	r2, r3
 8008e5a:	89fb      	ldrh	r3, [r7, #14]
 8008e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	78db      	ldrb	r3, [r3, #3]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d06c      	beq.n	8008f52 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e8e:	81bb      	strh	r3, [r7, #12]
 8008e90:	89bb      	ldrh	r3, [r7, #12]
 8008e92:	f083 0320 	eor.w	r3, r3, #32
 8008e96:	81bb      	strh	r3, [r7, #12]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	441a      	add	r2, r3
 8008ea2:	89bb      	ldrh	r3, [r7, #12]
 8008ea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	8013      	strh	r3, [r2, #0]
 8008eb8:	e04b      	b.n	8008f52 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	82fb      	strh	r3, [r7, #22]
 8008ec8:	8afb      	ldrh	r3, [r7, #22]
 8008eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d01b      	beq.n	8008f0a <USB_EPClearStall+0xfc>
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee8:	82bb      	strh	r3, [r7, #20]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	441a      	add	r2, r3
 8008ef4:	8abb      	ldrh	r3, [r7, #20]
 8008ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008efe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f20:	827b      	strh	r3, [r7, #18]
 8008f22:	8a7b      	ldrh	r3, [r7, #18]
 8008f24:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f28:	827b      	strh	r3, [r7, #18]
 8008f2a:	8a7b      	ldrh	r3, [r7, #18]
 8008f2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f30:	827b      	strh	r3, [r7, #18]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	441a      	add	r2, r3
 8008f3c:	8a7b      	ldrh	r3, [r7, #18]
 8008f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	371c      	adds	r7, #28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d103      	bne.n	8008f7a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2280      	movs	r2, #128	@ 0x80
 8008f76:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b085      	sub	sp, #20
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b08b      	sub	sp, #44	@ 0x2c
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	80fb      	strh	r3, [r7, #6]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008fec:	88bb      	ldrh	r3, [r7, #4]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	085b      	lsrs	r3, r3, #1
 8008ff2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ffc:	88fa      	ldrh	r2, [r7, #6]
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	4413      	add	r3, r2
 8009002:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009006:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	627b      	str	r3, [r7, #36]	@ 0x24
 800900c:	e01b      	b.n	8009046 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	3301      	adds	r3, #1
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	021b      	lsls	r3, r3, #8
 800901c:	b21a      	sxth	r2, r3
 800901e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009022:	4313      	orrs	r3, r2
 8009024:	b21b      	sxth	r3, r3
 8009026:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	8a7a      	ldrh	r2, [r7, #18]
 800902c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	3302      	adds	r3, #2
 8009032:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	3301      	adds	r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	3301      	adds	r3, #1
 800903e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009042:	3b01      	subs	r3, #1
 8009044:	627b      	str	r3, [r7, #36]	@ 0x24
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e0      	bne.n	800900e <USB_WritePMA+0x38>
  }
}
 800904c:	bf00      	nop
 800904e:	bf00      	nop
 8009050:	372c      	adds	r7, #44	@ 0x2c
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800905a:	b480      	push	{r7}
 800905c:	b08b      	sub	sp, #44	@ 0x2c
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	4611      	mov	r1, r2
 8009066:	461a      	mov	r2, r3
 8009068:	460b      	mov	r3, r1
 800906a:	80fb      	strh	r3, [r7, #6]
 800906c:	4613      	mov	r3, r2
 800906e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009070:	88bb      	ldrh	r3, [r7, #4]
 8009072:	085b      	lsrs	r3, r3, #1
 8009074:	b29b      	uxth	r3, r3
 8009076:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009080:	88fa      	ldrh	r2, [r7, #6]
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	4413      	add	r3, r2
 8009086:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800908a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009090:	e018      	b.n	80090c4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	3302      	adds	r3, #2
 800909e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	3301      	adds	r3, #1
 80090ac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	0a1b      	lsrs	r3, r3, #8
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	3301      	adds	r3, #1
 80090bc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	3b01      	subs	r3, #1
 80090c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e3      	bne.n	8009092 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80090ca:	88bb      	ldrh	r3, [r7, #4]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d007      	beq.n	80090e6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	701a      	strb	r2, [r3, #0]
  }
}
 80090e6:	bf00      	nop
 80090e8:	372c      	adds	r7, #44	@ 0x2c
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090fe:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009102:	f005 f8d9 	bl	800e2b8 <USBD_static_malloc>
 8009106:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d105      	bne.n	800911a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009116:	2302      	movs	r3, #2
 8009118:	e066      	b.n	80091e8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	7c1b      	ldrb	r3, [r3, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d119      	bne.n	800915e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800912a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800912e:	2202      	movs	r2, #2
 8009130:	2181      	movs	r1, #129	@ 0x81
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f004 ff67 	bl	800e006 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800913e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009142:	2202      	movs	r2, #2
 8009144:	2101      	movs	r1, #1
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f004 ff5d 	bl	800e006 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2210      	movs	r2, #16
 8009158:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800915c:	e016      	b.n	800918c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800915e:	2340      	movs	r3, #64	@ 0x40
 8009160:	2202      	movs	r2, #2
 8009162:	2181      	movs	r1, #129	@ 0x81
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f004 ff4e 	bl	800e006 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009170:	2340      	movs	r3, #64	@ 0x40
 8009172:	2202      	movs	r2, #2
 8009174:	2101      	movs	r1, #1
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f004 ff45 	bl	800e006 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2210      	movs	r2, #16
 8009188:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800918c:	2308      	movs	r3, #8
 800918e:	2203      	movs	r2, #3
 8009190:	2182      	movs	r1, #130	@ 0x82
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f004 ff37 	bl	800e006 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	7c1b      	ldrb	r3, [r3, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d109      	bne.n	80091d6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091cc:	2101      	movs	r1, #1
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f005 f808 	bl	800e1e4 <USBD_LL_PrepareReceive>
 80091d4:	e007      	b.n	80091e6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091dc:	2340      	movs	r3, #64	@ 0x40
 80091de:	2101      	movs	r1, #1
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f004 ffff 	bl	800e1e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80091fc:	2181      	movs	r1, #129	@ 0x81
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f004 ff27 	bl	800e052 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800920a:	2101      	movs	r1, #1
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f004 ff20 	bl	800e052 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800921a:	2182      	movs	r1, #130	@ 0x82
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f004 ff18 	bl	800e052 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00e      	beq.n	800925a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800924c:	4618      	mov	r0, r3
 800924e:	f005 f841 	bl	800e2d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009274:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009288:	2303      	movs	r3, #3
 800928a:	e0af      	b.n	80093ec <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009294:	2b00      	cmp	r3, #0
 8009296:	d03f      	beq.n	8009318 <USBD_CDC_Setup+0xb4>
 8009298:	2b20      	cmp	r3, #32
 800929a:	f040 809f 	bne.w	80093dc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	88db      	ldrh	r3, [r3, #6]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d02e      	beq.n	8009304 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	b25b      	sxtb	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da16      	bge.n	80092de <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80092bc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	88d2      	ldrh	r2, [r2, #6]
 80092c2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	88db      	ldrh	r3, [r3, #6]
 80092c8:	2b07      	cmp	r3, #7
 80092ca:	bf28      	it	cs
 80092cc:	2307      	movcs	r3, #7
 80092ce:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	89fa      	ldrh	r2, [r7, #14]
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f001 facd 	bl	800a876 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80092dc:	e085      	b.n	80093ea <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	785a      	ldrb	r2, [r3, #1]
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	88db      	ldrh	r3, [r3, #6]
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80092f4:	6939      	ldr	r1, [r7, #16]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	88db      	ldrh	r3, [r3, #6]
 80092fa:	461a      	mov	r2, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f001 fae6 	bl	800a8ce <USBD_CtlPrepareRx>
      break;
 8009302:	e072      	b.n	80093ea <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	7850      	ldrb	r0, [r2, #1]
 8009310:	2200      	movs	r2, #0
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	4798      	blx	r3
      break;
 8009316:	e068      	b.n	80093ea <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	785b      	ldrb	r3, [r3, #1]
 800931c:	2b0b      	cmp	r3, #11
 800931e:	d852      	bhi.n	80093c6 <USBD_CDC_Setup+0x162>
 8009320:	a201      	add	r2, pc, #4	@ (adr r2, 8009328 <USBD_CDC_Setup+0xc4>)
 8009322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009326:	bf00      	nop
 8009328:	08009359 	.word	0x08009359
 800932c:	080093d5 	.word	0x080093d5
 8009330:	080093c7 	.word	0x080093c7
 8009334:	080093c7 	.word	0x080093c7
 8009338:	080093c7 	.word	0x080093c7
 800933c:	080093c7 	.word	0x080093c7
 8009340:	080093c7 	.word	0x080093c7
 8009344:	080093c7 	.word	0x080093c7
 8009348:	080093c7 	.word	0x080093c7
 800934c:	080093c7 	.word	0x080093c7
 8009350:	08009383 	.word	0x08009383
 8009354:	080093ad 	.word	0x080093ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b03      	cmp	r3, #3
 8009362:	d107      	bne.n	8009374 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009364:	f107 030a 	add.w	r3, r7, #10
 8009368:	2202      	movs	r2, #2
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f001 fa82 	bl	800a876 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009372:	e032      	b.n	80093da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 fa0c 	bl	800a794 <USBD_CtlError>
            ret = USBD_FAIL;
 800937c:	2303      	movs	r3, #3
 800937e:	75fb      	strb	r3, [r7, #23]
          break;
 8009380:	e02b      	b.n	80093da <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b03      	cmp	r3, #3
 800938c:	d107      	bne.n	800939e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800938e:	f107 030d 	add.w	r3, r7, #13
 8009392:	2201      	movs	r2, #1
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f001 fa6d 	bl	800a876 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800939c:	e01d      	b.n	80093da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 f9f7 	bl	800a794 <USBD_CtlError>
            ret = USBD_FAIL;
 80093a6:	2303      	movs	r3, #3
 80093a8:	75fb      	strb	r3, [r7, #23]
          break;
 80093aa:	e016      	b.n	80093da <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d00f      	beq.n	80093d8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f001 f9ea 	bl	800a794 <USBD_CtlError>
            ret = USBD_FAIL;
 80093c0:	2303      	movs	r3, #3
 80093c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093c4:	e008      	b.n	80093d8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 f9e3 	bl	800a794 <USBD_CtlError>
          ret = USBD_FAIL;
 80093ce:	2303      	movs	r3, #3
 80093d0:	75fb      	strb	r3, [r7, #23]
          break;
 80093d2:	e002      	b.n	80093da <USBD_CDC_Setup+0x176>
          break;
 80093d4:	bf00      	nop
 80093d6:	e008      	b.n	80093ea <USBD_CDC_Setup+0x186>
          break;
 80093d8:	bf00      	nop
      }
      break;
 80093da:	e006      	b.n	80093ea <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f001 f9d8 	bl	800a794 <USBD_CtlError>
      ret = USBD_FAIL;
 80093e4:	2303      	movs	r3, #3
 80093e6:	75fb      	strb	r3, [r7, #23]
      break;
 80093e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009406:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009412:	2303      	movs	r3, #3
 8009414:	e04f      	b.n	80094b6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800941c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800941e:	78fa      	ldrb	r2, [r7, #3]
 8009420:	6879      	ldr	r1, [r7, #4]
 8009422:	4613      	mov	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	440b      	add	r3, r1
 800942c:	3318      	adds	r3, #24
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d029      	beq.n	8009488 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009434:	78fa      	ldrb	r2, [r7, #3]
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	3318      	adds	r3, #24
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	78f9      	ldrb	r1, [r7, #3]
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	460b      	mov	r3, r1
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	440b      	add	r3, r1
 8009450:	00db      	lsls	r3, r3, #3
 8009452:	4403      	add	r3, r0
 8009454:	3320      	adds	r3, #32
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	fbb2 f1f3 	udiv	r1, r2, r3
 800945c:	fb01 f303 	mul.w	r3, r1, r3
 8009460:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009462:	2b00      	cmp	r3, #0
 8009464:	d110      	bne.n	8009488 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009466:	78fa      	ldrb	r2, [r7, #3]
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	4613      	mov	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	440b      	add	r3, r1
 8009474:	3318      	adds	r3, #24
 8009476:	2200      	movs	r2, #0
 8009478:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800947a:	78f9      	ldrb	r1, [r7, #3]
 800947c:	2300      	movs	r3, #0
 800947e:	2200      	movs	r2, #0
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f004 fe8e 	bl	800e1a2 <USBD_LL_Transmit>
 8009486:	e015      	b.n	80094b4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2200      	movs	r2, #0
 800948c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	460b      	mov	r3, r1
 80094c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094dc:	2303      	movs	r3, #3
 80094de:	e015      	b.n	800950c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f004 fe9e 	bl	800e226 <USBD_LL_GetRxDataSize>
 80094ea:	4602      	mov	r2, r0
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009506:	4611      	mov	r1, r2
 8009508:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009522:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800952a:	2303      	movs	r3, #3
 800952c:	e01a      	b.n	8009564 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d014      	beq.n	8009562 <USBD_CDC_EP0_RxReady+0x4e>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800953e:	2bff      	cmp	r3, #255	@ 0xff
 8009540:	d00f      	beq.n	8009562 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009550:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009558:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	22ff      	movs	r2, #255	@ 0xff
 800955e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2243      	movs	r2, #67	@ 0x43
 8009578:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800957a:	4b03      	ldr	r3, [pc, #12]	@ (8009588 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	20000094 	.word	0x20000094

0800958c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2243      	movs	r2, #67	@ 0x43
 8009598:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800959a:	4b03      	ldr	r3, [pc, #12]	@ (80095a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800959c:	4618      	mov	r0, r3
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	20000050 	.word	0x20000050

080095ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2243      	movs	r2, #67	@ 0x43
 80095b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80095ba:	4b03      	ldr	r3, [pc, #12]	@ (80095c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	200000d8 	.word	0x200000d8

080095cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	220a      	movs	r2, #10
 80095d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80095da:	4b03      	ldr	r3, [pc, #12]	@ (80095e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095dc:	4618      	mov	r0, r3
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	2000000c 	.word	0x2000000c

080095ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d101      	bne.n	8009600 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e004      	b.n	800960a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	370c      	adds	r7, #12
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009616:	b480      	push	{r7}
 8009618:	b087      	sub	sp, #28
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009628:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009630:	2303      	movs	r3, #3
 8009632:	e008      	b.n	8009646 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	371c      	adds	r7, #28
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009652:	b480      	push	{r7}
 8009654:	b085      	sub	sp, #20
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009662:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800966a:	2303      	movs	r3, #3
 800966c:	e004      	b.n	8009678 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009692:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009694:	2301      	movs	r3, #1
 8009696:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e01a      	b.n	80096dc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d114      	bne.n	80096da <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80096ce:	2181      	movs	r1, #129	@ 0x81
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f004 fd66 	bl	800e1a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80096fe:	2303      	movs	r3, #3
 8009700:	e016      	b.n	8009730 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	7c1b      	ldrb	r3, [r3, #16]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d109      	bne.n	800971e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009714:	2101      	movs	r1, #1
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f004 fd64 	bl	800e1e4 <USBD_LL_PrepareReceive>
 800971c:	e007      	b.n	800972e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009724:	2340      	movs	r3, #64	@ 0x40
 8009726:	2101      	movs	r1, #1
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f004 fd5b 	bl	800e1e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	4613      	mov	r3, r2
 8009744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800974c:	2303      	movs	r3, #3
 800974e:	e01f      	b.n	8009790 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	79fa      	ldrb	r2, [r7, #7]
 8009782:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f004 fbc3 	bl	800df10 <USBD_LL_Init>
 800978a:	4603      	mov	r3, r0
 800978c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800978e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097a2:	2300      	movs	r3, #0
 80097a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e016      	b.n	80097de <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097cc:	f107 020e 	add.w	r2, r7, #14
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	4602      	mov	r2, r0
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f004 fbee 	bl	800dfd0 <USBD_LL_Start>
 80097f4:	4603      	mov	r3, r0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80097fe:	b480      	push	{r7}
 8009800:	b083      	sub	sp, #12
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009820:	2303      	movs	r3, #3
 8009822:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800982a:	2b00      	cmp	r3, #0
 800982c:	d009      	beq.n	8009842 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	78fa      	ldrb	r2, [r7, #3]
 8009838:	4611      	mov	r1, r2
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	4798      	blx	r3
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800985e:	2b00      	cmp	r3, #0
 8009860:	d007      	beq.n	8009872 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	78fa      	ldrb	r2, [r7, #3]
 800986c:	4611      	mov	r1, r2
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	4798      	blx	r3
  }

  return USBD_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	4618      	mov	r0, r3
 8009890:	f000 ff46 	bl	800a720 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80098a2:	461a      	mov	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80098b0:	f003 031f 	and.w	r3, r3, #31
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d01a      	beq.n	80098ee <USBD_LL_SetupStage+0x72>
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d822      	bhi.n	8009902 <USBD_LL_SetupStage+0x86>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <USBD_LL_SetupStage+0x4a>
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d00a      	beq.n	80098da <USBD_LL_SetupStage+0x5e>
 80098c4:	e01d      	b.n	8009902 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f9ee 	bl	8009cb0 <USBD_StdDevReq>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]
      break;
 80098d8:	e020      	b.n	800991c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098e0:	4619      	mov	r1, r3
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa52 	bl	8009d8c <USBD_StdItfReq>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73fb      	strb	r3, [r7, #15]
      break;
 80098ec:	e016      	b.n	800991c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fa91 	bl	8009e1e <USBD_StdEPReq>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009900:	e00c      	b.n	800991c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009908:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800990c:	b2db      	uxtb	r3, r3
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f004 fbbd 	bl	800e090 <USBD_LL_StallEP>
 8009916:	4603      	mov	r3, r0
 8009918:	73fb      	strb	r3, [r7, #15]
      break;
 800991a:	bf00      	nop
  }

  return ret;
 800991c:	7bfb      	ldrb	r3, [r7, #15]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b086      	sub	sp, #24
 800992a:	af00      	add	r7, sp, #0
 800992c:	60f8      	str	r0, [r7, #12]
 800992e:	460b      	mov	r3, r1
 8009930:	607a      	str	r2, [r7, #4]
 8009932:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009934:	7afb      	ldrb	r3, [r7, #11]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d138      	bne.n	80099ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009940:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009948:	2b03      	cmp	r3, #3
 800994a:	d14a      	bne.n	80099e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	689a      	ldr	r2, [r3, #8]
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	429a      	cmp	r2, r3
 8009956:	d913      	bls.n	8009980 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	1ad2      	subs	r2, r2, r3
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	68da      	ldr	r2, [r3, #12]
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	4293      	cmp	r3, r2
 8009970:	bf28      	it	cs
 8009972:	4613      	movcs	r3, r2
 8009974:	461a      	mov	r2, r3
 8009976:	6879      	ldr	r1, [r7, #4]
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 ffc5 	bl	800a908 <USBD_CtlContinueRx>
 800997e:	e030      	b.n	80099e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b03      	cmp	r3, #3
 800998a:	d10b      	bne.n	80099a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d005      	beq.n	80099a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 ffc0 	bl	800a92a <USBD_CtlSendStatus>
 80099aa:	e01a      	b.n	80099e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d114      	bne.n	80099e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00e      	beq.n	80099e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	7afa      	ldrb	r2, [r7, #11]
 80099ce:	4611      	mov	r1, r2
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	4798      	blx	r3
 80099d4:	4603      	mov	r3, r0
 80099d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	e000      	b.n	80099e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3718      	adds	r7, #24
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	460b      	mov	r3, r1
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80099fa:	7afb      	ldrb	r3, [r7, #11]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d16b      	bne.n	8009ad8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3314      	adds	r3, #20
 8009a04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d156      	bne.n	8009abe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d914      	bls.n	8009a46 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	1ad2      	subs	r2, r2, r3
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 ff3a 	bl	800a8ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a38:	2300      	movs	r3, #0
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f004 fbd0 	bl	800e1e4 <USBD_LL_PrepareReceive>
 8009a44:	e03b      	b.n	8009abe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d11c      	bne.n	8009a8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d316      	bcc.n	8009a8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d20f      	bcs.n	8009a8c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2100      	movs	r1, #0
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 ff1b 	bl	800a8ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a7e:	2300      	movs	r3, #0
 8009a80:	2200      	movs	r2, #0
 8009a82:	2100      	movs	r1, #0
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f004 fbad 	bl	800e1e4 <USBD_LL_PrepareReceive>
 8009a8a:	e018      	b.n	8009abe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b03      	cmp	r3, #3
 8009a96:	d10b      	bne.n	8009ab0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d005      	beq.n	8009ab0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ab0:	2180      	movs	r1, #128	@ 0x80
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f004 faec 	bl	800e090 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 ff49 	bl	800a950 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d122      	bne.n	8009b0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f7ff fe98 	bl	80097fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009ad6:	e01a      	b.n	8009b0e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b03      	cmp	r3, #3
 8009ae2:	d114      	bne.n	8009b0e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00e      	beq.n	8009b0e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	7afa      	ldrb	r2, [r7, #11]
 8009afa:	4611      	mov	r1, r2
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	4798      	blx	r3
 8009b00:	4603      	mov	r3, r0
 8009b02:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	e000      	b.n	8009b10 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e02f      	b.n	8009bac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00f      	beq.n	8009b76 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d009      	beq.n	8009b76 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	6852      	ldr	r2, [r2, #4]
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	4611      	mov	r1, r2
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b76:	2340      	movs	r3, #64	@ 0x40
 8009b78:	2200      	movs	r2, #0
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f004 fa42 	bl	800e006 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2240      	movs	r2, #64	@ 0x40
 8009b8e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b92:	2340      	movs	r3, #64	@ 0x40
 8009b94:	2200      	movs	r2, #0
 8009b96:	2180      	movs	r1, #128	@ 0x80
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f004 fa34 	bl	800e006 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2240      	movs	r2, #64	@ 0x40
 8009ba8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	78fa      	ldrb	r2, [r7, #3]
 8009bc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2204      	movs	r2, #4
 8009bee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d106      	bne.n	8009c22 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e012      	b.n	8009c6c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d10b      	bne.n	8009c6a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d005      	beq.n	8009c6a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c92:	8a3b      	ldrh	r3, [r7, #16]
 8009c94:	021b      	lsls	r3, r3, #8
 8009c96:	b21a      	sxth	r2, r3
 8009c98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	b21b      	sxth	r3, r3
 8009ca0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ca2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	371c      	adds	r7, #28
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cc6:	2b40      	cmp	r3, #64	@ 0x40
 8009cc8:	d005      	beq.n	8009cd6 <USBD_StdDevReq+0x26>
 8009cca:	2b40      	cmp	r3, #64	@ 0x40
 8009ccc:	d853      	bhi.n	8009d76 <USBD_StdDevReq+0xc6>
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00b      	beq.n	8009cea <USBD_StdDevReq+0x3a>
 8009cd2:	2b20      	cmp	r3, #32
 8009cd4:	d14f      	bne.n	8009d76 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	4798      	blx	r3
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ce8:	e04a      	b.n	8009d80 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	785b      	ldrb	r3, [r3, #1]
 8009cee:	2b09      	cmp	r3, #9
 8009cf0:	d83b      	bhi.n	8009d6a <USBD_StdDevReq+0xba>
 8009cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf8 <USBD_StdDevReq+0x48>)
 8009cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf8:	08009d4d 	.word	0x08009d4d
 8009cfc:	08009d61 	.word	0x08009d61
 8009d00:	08009d6b 	.word	0x08009d6b
 8009d04:	08009d57 	.word	0x08009d57
 8009d08:	08009d6b 	.word	0x08009d6b
 8009d0c:	08009d2b 	.word	0x08009d2b
 8009d10:	08009d21 	.word	0x08009d21
 8009d14:	08009d6b 	.word	0x08009d6b
 8009d18:	08009d43 	.word	0x08009d43
 8009d1c:	08009d35 	.word	0x08009d35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f9de 	bl	800a0e4 <USBD_GetDescriptor>
          break;
 8009d28:	e024      	b.n	8009d74 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fb6d 	bl	800a40c <USBD_SetAddress>
          break;
 8009d32:	e01f      	b.n	8009d74 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fbac 	bl	800a494 <USBD_SetConfig>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]
          break;
 8009d40:	e018      	b.n	8009d74 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fc4b 	bl	800a5e0 <USBD_GetConfig>
          break;
 8009d4a:	e013      	b.n	8009d74 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fc7c 	bl	800a64c <USBD_GetStatus>
          break;
 8009d54:	e00e      	b.n	8009d74 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d56:	6839      	ldr	r1, [r7, #0]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fcab 	bl	800a6b4 <USBD_SetFeature>
          break;
 8009d5e:	e009      	b.n	8009d74 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fcba 	bl	800a6dc <USBD_ClrFeature>
          break;
 8009d68:	e004      	b.n	8009d74 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fd11 	bl	800a794 <USBD_CtlError>
          break;
 8009d72:	bf00      	nop
      }
      break;
 8009d74:	e004      	b.n	8009d80 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fd0b 	bl	800a794 <USBD_CtlError>
      break;
 8009d7e:	bf00      	nop
  }

  return ret;
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop

08009d8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009da2:	2b40      	cmp	r3, #64	@ 0x40
 8009da4:	d005      	beq.n	8009db2 <USBD_StdItfReq+0x26>
 8009da6:	2b40      	cmp	r3, #64	@ 0x40
 8009da8:	d82f      	bhi.n	8009e0a <USBD_StdItfReq+0x7e>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <USBD_StdItfReq+0x26>
 8009dae:	2b20      	cmp	r3, #32
 8009db0:	d12b      	bne.n	8009e0a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d81d      	bhi.n	8009dfc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	889b      	ldrh	r3, [r3, #4]
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d813      	bhi.n	8009df2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	4798      	blx	r3
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	88db      	ldrh	r3, [r3, #6]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d110      	bne.n	8009e06 <USBD_StdItfReq+0x7a>
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10d      	bne.n	8009e06 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fd9d 	bl	800a92a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009df0:	e009      	b.n	8009e06 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fccd 	bl	800a794 <USBD_CtlError>
          break;
 8009dfa:	e004      	b.n	8009e06 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fcc8 	bl	800a794 <USBD_CtlError>
          break;
 8009e04:	e000      	b.n	8009e08 <USBD_StdItfReq+0x7c>
          break;
 8009e06:	bf00      	nop
      }
      break;
 8009e08:	e004      	b.n	8009e14 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009e0a:	6839      	ldr	r1, [r7, #0]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fcc1 	bl	800a794 <USBD_CtlError>
      break;
 8009e12:	bf00      	nop
  }

  return ret;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	889b      	ldrh	r3, [r3, #4]
 8009e30:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e3a:	2b40      	cmp	r3, #64	@ 0x40
 8009e3c:	d007      	beq.n	8009e4e <USBD_StdEPReq+0x30>
 8009e3e:	2b40      	cmp	r3, #64	@ 0x40
 8009e40:	f200 8145 	bhi.w	800a0ce <USBD_StdEPReq+0x2b0>
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00c      	beq.n	8009e62 <USBD_StdEPReq+0x44>
 8009e48:	2b20      	cmp	r3, #32
 8009e4a:	f040 8140 	bne.w	800a0ce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	4798      	blx	r3
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e60:	e13a      	b.n	800a0d8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	785b      	ldrb	r3, [r3, #1]
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d007      	beq.n	8009e7a <USBD_StdEPReq+0x5c>
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	f300 8129 	bgt.w	800a0c2 <USBD_StdEPReq+0x2a4>
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d07f      	beq.n	8009f74 <USBD_StdEPReq+0x156>
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d03c      	beq.n	8009ef2 <USBD_StdEPReq+0xd4>
 8009e78:	e123      	b.n	800a0c2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d002      	beq.n	8009e8c <USBD_StdEPReq+0x6e>
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d016      	beq.n	8009eb8 <USBD_StdEPReq+0x9a>
 8009e8a:	e02c      	b.n	8009ee6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00d      	beq.n	8009eae <USBD_StdEPReq+0x90>
 8009e92:	7bbb      	ldrb	r3, [r7, #14]
 8009e94:	2b80      	cmp	r3, #128	@ 0x80
 8009e96:	d00a      	beq.n	8009eae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f004 f8f7 	bl	800e090 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ea2:	2180      	movs	r1, #128	@ 0x80
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f004 f8f3 	bl	800e090 <USBD_LL_StallEP>
 8009eaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009eac:	e020      	b.n	8009ef0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fc6f 	bl	800a794 <USBD_CtlError>
              break;
 8009eb6:	e01b      	b.n	8009ef0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	885b      	ldrh	r3, [r3, #2]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10e      	bne.n	8009ede <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ec0:	7bbb      	ldrb	r3, [r7, #14]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00b      	beq.n	8009ede <USBD_StdEPReq+0xc0>
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	2b80      	cmp	r3, #128	@ 0x80
 8009eca:	d008      	beq.n	8009ede <USBD_StdEPReq+0xc0>
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	88db      	ldrh	r3, [r3, #6]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d104      	bne.n	8009ede <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f004 f8d9 	bl	800e090 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fd23 	bl	800a92a <USBD_CtlSendStatus>

              break;
 8009ee4:	e004      	b.n	8009ef0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fc53 	bl	800a794 <USBD_CtlError>
              break;
 8009eee:	bf00      	nop
          }
          break;
 8009ef0:	e0ec      	b.n	800a0cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d002      	beq.n	8009f04 <USBD_StdEPReq+0xe6>
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d016      	beq.n	8009f30 <USBD_StdEPReq+0x112>
 8009f02:	e030      	b.n	8009f66 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00d      	beq.n	8009f26 <USBD_StdEPReq+0x108>
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	2b80      	cmp	r3, #128	@ 0x80
 8009f0e:	d00a      	beq.n	8009f26 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f004 f8bb 	bl	800e090 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f1a:	2180      	movs	r1, #128	@ 0x80
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f004 f8b7 	bl	800e090 <USBD_LL_StallEP>
 8009f22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f24:	e025      	b.n	8009f72 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fc33 	bl	800a794 <USBD_CtlError>
              break;
 8009f2e:	e020      	b.n	8009f72 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	885b      	ldrh	r3, [r3, #2]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d11b      	bne.n	8009f70 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d004      	beq.n	8009f4c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f42:	7bbb      	ldrb	r3, [r7, #14]
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f004 f8c1 	bl	800e0ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fcec 	bl	800a92a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	4798      	blx	r3
 8009f60:	4603      	mov	r3, r0
 8009f62:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009f64:	e004      	b.n	8009f70 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fc13 	bl	800a794 <USBD_CtlError>
              break;
 8009f6e:	e000      	b.n	8009f72 <USBD_StdEPReq+0x154>
              break;
 8009f70:	bf00      	nop
          }
          break;
 8009f72:	e0ab      	b.n	800a0cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d002      	beq.n	8009f86 <USBD_StdEPReq+0x168>
 8009f80:	2b03      	cmp	r3, #3
 8009f82:	d032      	beq.n	8009fea <USBD_StdEPReq+0x1cc>
 8009f84:	e097      	b.n	800a0b6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d007      	beq.n	8009f9c <USBD_StdEPReq+0x17e>
 8009f8c:	7bbb      	ldrb	r3, [r7, #14]
 8009f8e:	2b80      	cmp	r3, #128	@ 0x80
 8009f90:	d004      	beq.n	8009f9c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fbfd 	bl	800a794 <USBD_CtlError>
                break;
 8009f9a:	e091      	b.n	800a0c0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	da0b      	bge.n	8009fbc <USBD_StdEPReq+0x19e>
 8009fa4:	7bbb      	ldrb	r3, [r7, #14]
 8009fa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	3310      	adds	r3, #16
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	3304      	adds	r3, #4
 8009fba:	e00b      	b.n	8009fd4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fbc:	7bbb      	ldrb	r3, [r7, #14]
 8009fbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2202      	movs	r2, #2
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fc47 	bl	800a876 <USBD_CtlSendData>
              break;
 8009fe8:	e06a      	b.n	800a0c0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009fea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	da11      	bge.n	800a016 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ff2:	7bbb      	ldrb	r3, [r7, #14]
 8009ff4:	f003 020f 	and.w	r2, r3, #15
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	440b      	add	r3, r1
 800a004:	3324      	adds	r3, #36	@ 0x24
 800a006:	881b      	ldrh	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d117      	bne.n	800a03c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fbc0 	bl	800a794 <USBD_CtlError>
                  break;
 800a014:	e054      	b.n	800a0c0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a016:	7bbb      	ldrb	r3, [r7, #14]
 800a018:	f003 020f 	and.w	r2, r3, #15
 800a01c:	6879      	ldr	r1, [r7, #4]
 800a01e:	4613      	mov	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	440b      	add	r3, r1
 800a028:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d104      	bne.n	800a03c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fbad 	bl	800a794 <USBD_CtlError>
                  break;
 800a03a:	e041      	b.n	800a0c0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a03c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a040:	2b00      	cmp	r3, #0
 800a042:	da0b      	bge.n	800a05c <USBD_StdEPReq+0x23e>
 800a044:	7bbb      	ldrb	r3, [r7, #14]
 800a046:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a04a:	4613      	mov	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	3310      	adds	r3, #16
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	4413      	add	r3, r2
 800a058:	3304      	adds	r3, #4
 800a05a:	e00b      	b.n	800a074 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
 800a05e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	4413      	add	r3, r2
 800a072:	3304      	adds	r3, #4
 800a074:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d002      	beq.n	800a082 <USBD_StdEPReq+0x264>
 800a07c:	7bbb      	ldrb	r3, [r7, #14]
 800a07e:	2b80      	cmp	r3, #128	@ 0x80
 800a080:	d103      	bne.n	800a08a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	2200      	movs	r2, #0
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	e00e      	b.n	800a0a8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a08a:	7bbb      	ldrb	r3, [r7, #14]
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f004 f83c 	bl	800e10c <USBD_LL_IsStallEP>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2201      	movs	r2, #1
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	e002      	b.n	800a0a8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fbe1 	bl	800a876 <USBD_CtlSendData>
              break;
 800a0b4:	e004      	b.n	800a0c0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fb6b 	bl	800a794 <USBD_CtlError>
              break;
 800a0be:	bf00      	nop
          }
          break;
 800a0c0:	e004      	b.n	800a0cc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fb65 	bl	800a794 <USBD_CtlError>
          break;
 800a0ca:	bf00      	nop
      }
      break;
 800a0cc:	e004      	b.n	800a0d8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fb5f 	bl	800a794 <USBD_CtlError>
      break;
 800a0d6:	bf00      	nop
  }

  return ret;
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	0a1b      	lsrs	r3, r3, #8
 800a100:	b29b      	uxth	r3, r3
 800a102:	3b01      	subs	r3, #1
 800a104:	2b0e      	cmp	r3, #14
 800a106:	f200 8152 	bhi.w	800a3ae <USBD_GetDescriptor+0x2ca>
 800a10a:	a201      	add	r2, pc, #4	@ (adr r2, 800a110 <USBD_GetDescriptor+0x2c>)
 800a10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a110:	0800a181 	.word	0x0800a181
 800a114:	0800a199 	.word	0x0800a199
 800a118:	0800a1d9 	.word	0x0800a1d9
 800a11c:	0800a3af 	.word	0x0800a3af
 800a120:	0800a3af 	.word	0x0800a3af
 800a124:	0800a34f 	.word	0x0800a34f
 800a128:	0800a37b 	.word	0x0800a37b
 800a12c:	0800a3af 	.word	0x0800a3af
 800a130:	0800a3af 	.word	0x0800a3af
 800a134:	0800a3af 	.word	0x0800a3af
 800a138:	0800a3af 	.word	0x0800a3af
 800a13c:	0800a3af 	.word	0x0800a3af
 800a140:	0800a3af 	.word	0x0800a3af
 800a144:	0800a3af 	.word	0x0800a3af
 800a148:	0800a14d 	.word	0x0800a14d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a152:	69db      	ldr	r3, [r3, #28]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00b      	beq.n	800a170 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	7c12      	ldrb	r2, [r2, #16]
 800a164:	f107 0108 	add.w	r1, r7, #8
 800a168:	4610      	mov	r0, r2
 800a16a:	4798      	blx	r3
 800a16c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a16e:	e126      	b.n	800a3be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fb0e 	bl	800a794 <USBD_CtlError>
        err++;
 800a178:	7afb      	ldrb	r3, [r7, #11]
 800a17a:	3301      	adds	r3, #1
 800a17c:	72fb      	strb	r3, [r7, #11]
      break;
 800a17e:	e11e      	b.n	800a3be <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	7c12      	ldrb	r2, [r2, #16]
 800a18c:	f107 0108 	add.w	r1, r7, #8
 800a190:	4610      	mov	r0, r2
 800a192:	4798      	blx	r3
 800a194:	60f8      	str	r0, [r7, #12]
      break;
 800a196:	e112      	b.n	800a3be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	7c1b      	ldrb	r3, [r3, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10d      	bne.n	800a1bc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a8:	f107 0208 	add.w	r2, r7, #8
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4798      	blx	r3
 800a1b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1ba:	e100      	b.n	800a3be <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c4:	f107 0208 	add.w	r2, r7, #8
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4798      	blx	r3
 800a1cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	701a      	strb	r2, [r3, #0]
      break;
 800a1d6:	e0f2      	b.n	800a3be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	885b      	ldrh	r3, [r3, #2]
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b05      	cmp	r3, #5
 800a1e0:	f200 80ac 	bhi.w	800a33c <USBD_GetDescriptor+0x258>
 800a1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ec <USBD_GetDescriptor+0x108>)
 800a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ea:	bf00      	nop
 800a1ec:	0800a205 	.word	0x0800a205
 800a1f0:	0800a239 	.word	0x0800a239
 800a1f4:	0800a26d 	.word	0x0800a26d
 800a1f8:	0800a2a1 	.word	0x0800a2a1
 800a1fc:	0800a2d5 	.word	0x0800a2d5
 800a200:	0800a309 	.word	0x0800a309
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00b      	beq.n	800a228 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	7c12      	ldrb	r2, [r2, #16]
 800a21c:	f107 0108 	add.w	r1, r7, #8
 800a220:	4610      	mov	r0, r2
 800a222:	4798      	blx	r3
 800a224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a226:	e091      	b.n	800a34c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fab2 	bl	800a794 <USBD_CtlError>
            err++;
 800a230:	7afb      	ldrb	r3, [r7, #11]
 800a232:	3301      	adds	r3, #1
 800a234:	72fb      	strb	r3, [r7, #11]
          break;
 800a236:	e089      	b.n	800a34c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00b      	beq.n	800a25c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	7c12      	ldrb	r2, [r2, #16]
 800a250:	f107 0108 	add.w	r1, r7, #8
 800a254:	4610      	mov	r0, r2
 800a256:	4798      	blx	r3
 800a258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a25a:	e077      	b.n	800a34c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fa98 	bl	800a794 <USBD_CtlError>
            err++;
 800a264:	7afb      	ldrb	r3, [r7, #11]
 800a266:	3301      	adds	r3, #1
 800a268:	72fb      	strb	r3, [r7, #11]
          break;
 800a26a:	e06f      	b.n	800a34c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00b      	beq.n	800a290 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	7c12      	ldrb	r2, [r2, #16]
 800a284:	f107 0108 	add.w	r1, r7, #8
 800a288:	4610      	mov	r0, r2
 800a28a:	4798      	blx	r3
 800a28c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a28e:	e05d      	b.n	800a34c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a290:	6839      	ldr	r1, [r7, #0]
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fa7e 	bl	800a794 <USBD_CtlError>
            err++;
 800a298:	7afb      	ldrb	r3, [r7, #11]
 800a29a:	3301      	adds	r3, #1
 800a29c:	72fb      	strb	r3, [r7, #11]
          break;
 800a29e:	e055      	b.n	800a34c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00b      	beq.n	800a2c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	7c12      	ldrb	r2, [r2, #16]
 800a2b8:	f107 0108 	add.w	r1, r7, #8
 800a2bc:	4610      	mov	r0, r2
 800a2be:	4798      	blx	r3
 800a2c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2c2:	e043      	b.n	800a34c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fa64 	bl	800a794 <USBD_CtlError>
            err++;
 800a2cc:	7afb      	ldrb	r3, [r7, #11]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2d2:	e03b      	b.n	800a34c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00b      	beq.n	800a2f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2e6:	695b      	ldr	r3, [r3, #20]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	7c12      	ldrb	r2, [r2, #16]
 800a2ec:	f107 0108 	add.w	r1, r7, #8
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	4798      	blx	r3
 800a2f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2f6:	e029      	b.n	800a34c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2f8:	6839      	ldr	r1, [r7, #0]
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fa4a 	bl	800a794 <USBD_CtlError>
            err++;
 800a300:	7afb      	ldrb	r3, [r7, #11]
 800a302:	3301      	adds	r3, #1
 800a304:	72fb      	strb	r3, [r7, #11]
          break;
 800a306:	e021      	b.n	800a34c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a30e:	699b      	ldr	r3, [r3, #24]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00b      	beq.n	800a32c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	7c12      	ldrb	r2, [r2, #16]
 800a320:	f107 0108 	add.w	r1, r7, #8
 800a324:	4610      	mov	r0, r2
 800a326:	4798      	blx	r3
 800a328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a32a:	e00f      	b.n	800a34c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fa30 	bl	800a794 <USBD_CtlError>
            err++;
 800a334:	7afb      	ldrb	r3, [r7, #11]
 800a336:	3301      	adds	r3, #1
 800a338:	72fb      	strb	r3, [r7, #11]
          break;
 800a33a:	e007      	b.n	800a34c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fa28 	bl	800a794 <USBD_CtlError>
          err++;
 800a344:	7afb      	ldrb	r3, [r7, #11]
 800a346:	3301      	adds	r3, #1
 800a348:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a34a:	bf00      	nop
      }
      break;
 800a34c:	e037      	b.n	800a3be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	7c1b      	ldrb	r3, [r3, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d109      	bne.n	800a36a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a35c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a35e:	f107 0208 	add.w	r2, r7, #8
 800a362:	4610      	mov	r0, r2
 800a364:	4798      	blx	r3
 800a366:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a368:	e029      	b.n	800a3be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fa11 	bl	800a794 <USBD_CtlError>
        err++;
 800a372:	7afb      	ldrb	r3, [r7, #11]
 800a374:	3301      	adds	r3, #1
 800a376:	72fb      	strb	r3, [r7, #11]
      break;
 800a378:	e021      	b.n	800a3be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	7c1b      	ldrb	r3, [r3, #16]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10d      	bne.n	800a39e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a38a:	f107 0208 	add.w	r2, r7, #8
 800a38e:	4610      	mov	r0, r2
 800a390:	4798      	blx	r3
 800a392:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3301      	adds	r3, #1
 800a398:	2207      	movs	r2, #7
 800a39a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a39c:	e00f      	b.n	800a3be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f9f7 	bl	800a794 <USBD_CtlError>
        err++;
 800a3a6:	7afb      	ldrb	r3, [r7, #11]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a3ac:	e007      	b.n	800a3be <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f9ef 	bl	800a794 <USBD_CtlError>
      err++;
 800a3b6:	7afb      	ldrb	r3, [r7, #11]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a3bc:	bf00      	nop
  }

  if (err != 0U)
 800a3be:	7afb      	ldrb	r3, [r7, #11]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d11e      	bne.n	800a402 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	88db      	ldrh	r3, [r3, #6]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d016      	beq.n	800a3fa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a3cc:	893b      	ldrh	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00e      	beq.n	800a3f0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	88da      	ldrh	r2, [r3, #6]
 800a3d6:	893b      	ldrh	r3, [r7, #8]
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	bf28      	it	cs
 800a3dc:	4613      	movcs	r3, r2
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3e2:	893b      	ldrh	r3, [r7, #8]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	68f9      	ldr	r1, [r7, #12]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fa44 	bl	800a876 <USBD_CtlSendData>
 800a3ee:	e009      	b.n	800a404 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f9ce 	bl	800a794 <USBD_CtlError>
 800a3f8:	e004      	b.n	800a404 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fa95 	bl	800a92a <USBD_CtlSendStatus>
 800a400:	e000      	b.n	800a404 <USBD_GetDescriptor+0x320>
    return;
 800a402:	bf00      	nop
  }
}
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop

0800a40c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	889b      	ldrh	r3, [r3, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d131      	bne.n	800a482 <USBD_SetAddress+0x76>
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	88db      	ldrh	r3, [r3, #6]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d12d      	bne.n	800a482 <USBD_SetAddress+0x76>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	885b      	ldrh	r3, [r3, #2]
 800a42a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a42c:	d829      	bhi.n	800a482 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	885b      	ldrh	r3, [r3, #2]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a438:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b03      	cmp	r3, #3
 800a444:	d104      	bne.n	800a450 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f9a3 	bl	800a794 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a44e:	e01d      	b.n	800a48c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	7bfa      	ldrb	r2, [r7, #15]
 800a454:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f003 fe81 	bl	800e164 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fa61 	bl	800a92a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a468:	7bfb      	ldrb	r3, [r7, #15]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d004      	beq.n	800a478 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2202      	movs	r2, #2
 800a472:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a476:	e009      	b.n	800a48c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a480:	e004      	b.n	800a48c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f985 	bl	800a794 <USBD_CtlError>
  }
}
 800a48a:	bf00      	nop
 800a48c:	bf00      	nop
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	885b      	ldrh	r3, [r3, #2]
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	4b4c      	ldr	r3, [pc, #304]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a4aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4ac:	4b4b      	ldr	r3, [pc, #300]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d905      	bls.n	800a4c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f96c 	bl	800a794 <USBD_CtlError>
    return USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e088      	b.n	800a5d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d002      	beq.n	800a4d2 <USBD_SetConfig+0x3e>
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	d025      	beq.n	800a51c <USBD_SetConfig+0x88>
 800a4d0:	e071      	b.n	800a5b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4d2:	4b42      	ldr	r3, [pc, #264]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d01c      	beq.n	800a514 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a4da:	4b40      	ldr	r3, [pc, #256]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4e4:	4b3d      	ldr	r3, [pc, #244]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff f992 	bl	8009814 <USBD_SetClassConfig>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d004      	beq.n	800a504 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a4fa:	6839      	ldr	r1, [r7, #0]
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f949 	bl	800a794 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a502:	e065      	b.n	800a5d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fa10 	bl	800a92a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2203      	movs	r2, #3
 800a50e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a512:	e05d      	b.n	800a5d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fa08 	bl	800a92a <USBD_CtlSendStatus>
      break;
 800a51a:	e059      	b.n	800a5d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a51c:	4b2f      	ldr	r3, [pc, #188]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d112      	bne.n	800a54a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2202      	movs	r2, #2
 800a528:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a52c:	4b2b      	ldr	r3, [pc, #172]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	461a      	mov	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a536:	4b29      	ldr	r3, [pc, #164]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff f985 	bl	800984c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f9f1 	bl	800a92a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a548:	e042      	b.n	800a5d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a54a:	4b24      	ldr	r3, [pc, #144]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	429a      	cmp	r2, r3
 800a556:	d02a      	beq.n	800a5ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	4619      	mov	r1, r3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff f973 	bl	800984c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a566:	4b1d      	ldr	r3, [pc, #116]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	461a      	mov	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a570:	4b1a      	ldr	r3, [pc, #104]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	4619      	mov	r1, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff f94c 	bl	8009814 <USBD_SetClassConfig>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00f      	beq.n	800a5a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a586:	6839      	ldr	r1, [r7, #0]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f903 	bl	800a794 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	b2db      	uxtb	r3, r3
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff f958 	bl	800984c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a5a4:	e014      	b.n	800a5d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f9bf 	bl	800a92a <USBD_CtlSendStatus>
      break;
 800a5ac:	e010      	b.n	800a5d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f9bb 	bl	800a92a <USBD_CtlSendStatus>
      break;
 800a5b4:	e00c      	b.n	800a5d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f8eb 	bl	800a794 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5be:	4b07      	ldr	r3, [pc, #28]	@ (800a5dc <USBD_SetConfig+0x148>)
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f7ff f941 	bl	800984c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ce:	bf00      	nop
  }

  return ret;
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000534 	.word	0x20000534

0800a5e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	88db      	ldrh	r3, [r3, #6]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d004      	beq.n	800a5fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f8cd 	bl	800a794 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5fa:	e023      	b.n	800a644 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b02      	cmp	r3, #2
 800a606:	dc02      	bgt.n	800a60e <USBD_GetConfig+0x2e>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	dc03      	bgt.n	800a614 <USBD_GetConfig+0x34>
 800a60c:	e015      	b.n	800a63a <USBD_GetConfig+0x5a>
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d00b      	beq.n	800a62a <USBD_GetConfig+0x4a>
 800a612:	e012      	b.n	800a63a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	3308      	adds	r3, #8
 800a61e:	2201      	movs	r2, #1
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f927 	bl	800a876 <USBD_CtlSendData>
        break;
 800a628:	e00c      	b.n	800a644 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	3304      	adds	r3, #4
 800a62e:	2201      	movs	r2, #1
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f91f 	bl	800a876 <USBD_CtlSendData>
        break;
 800a638:	e004      	b.n	800a644 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f8a9 	bl	800a794 <USBD_CtlError>
        break;
 800a642:	bf00      	nop
}
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	3b01      	subs	r3, #1
 800a660:	2b02      	cmp	r3, #2
 800a662:	d81e      	bhi.n	800a6a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	88db      	ldrh	r3, [r3, #6]
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d004      	beq.n	800a676 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f890 	bl	800a794 <USBD_CtlError>
        break;
 800a674:	e01a      	b.n	800a6ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a682:	2b00      	cmp	r3, #0
 800a684:	d005      	beq.n	800a692 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	f043 0202 	orr.w	r2, r3, #2
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	330c      	adds	r3, #12
 800a696:	2202      	movs	r2, #2
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f8eb 	bl	800a876 <USBD_CtlSendData>
      break;
 800a6a0:	e004      	b.n	800a6ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f875 	bl	800a794 <USBD_CtlError>
      break;
 800a6aa:	bf00      	nop
  }
}
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	885b      	ldrh	r3, [r3, #2]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d106      	bne.n	800a6d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f92b 	bl	800a92a <USBD_CtlSendStatus>
  }
}
 800a6d4:	bf00      	nop
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d80b      	bhi.n	800a70c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	885b      	ldrh	r3, [r3, #2]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d10c      	bne.n	800a716 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f910 	bl	800a92a <USBD_CtlSendStatus>
      }
      break;
 800a70a:	e004      	b.n	800a716 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f840 	bl	800a794 <USBD_CtlError>
      break;
 800a714:	e000      	b.n	800a718 <USBD_ClrFeature+0x3c>
      break;
 800a716:	bf00      	nop
  }
}
 800a718:	bf00      	nop
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	781a      	ldrb	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3301      	adds	r3, #1
 800a73a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	781a      	ldrb	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	3301      	adds	r3, #1
 800a748:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7ff fa92 	bl	8009c74 <SWAPBYTE>
 800a750:	4603      	mov	r3, r0
 800a752:	461a      	mov	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	3301      	adds	r3, #1
 800a75c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3301      	adds	r3, #1
 800a762:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f7ff fa85 	bl	8009c74 <SWAPBYTE>
 800a76a:	4603      	mov	r3, r0
 800a76c:	461a      	mov	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3301      	adds	r3, #1
 800a776:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3301      	adds	r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f7ff fa78 	bl	8009c74 <SWAPBYTE>
 800a784:	4603      	mov	r3, r0
 800a786:	461a      	mov	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	80da      	strh	r2, [r3, #6]
}
 800a78c:	bf00      	nop
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a79e:	2180      	movs	r1, #128	@ 0x80
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f003 fc75 	bl	800e090 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f003 fc71 	bl	800e090 <USBD_LL_StallEP>
}
 800a7ae:	bf00      	nop
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b086      	sub	sp, #24
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	60b9      	str	r1, [r7, #8]
 800a7c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d036      	beq.n	800a83a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a7d0:	6938      	ldr	r0, [r7, #16]
 800a7d2:	f000 f836 	bl	800a842 <USBD_GetLen>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	3301      	adds	r3, #1
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	7812      	ldrb	r2, [r2, #0]
 800a7ee:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	2203      	movs	r2, #3
 800a7fe:	701a      	strb	r2, [r3, #0]
  idx++;
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	3301      	adds	r3, #1
 800a804:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a806:	e013      	b.n	800a830 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	4413      	add	r3, r2
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	7812      	ldrb	r2, [r2, #0]
 800a812:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	3301      	adds	r3, #1
 800a818:	613b      	str	r3, [r7, #16]
    idx++;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
 800a81c:	3301      	adds	r3, #1
 800a81e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	4413      	add	r3, r2
 800a826:	2200      	movs	r2, #0
 800a828:	701a      	strb	r2, [r3, #0]
    idx++;
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	3301      	adds	r3, #1
 800a82e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1e7      	bne.n	800a808 <USBD_GetString+0x52>
 800a838:	e000      	b.n	800a83c <USBD_GetString+0x86>
    return;
 800a83a:	bf00      	nop
  }
}
 800a83c:	3718      	adds	r7, #24
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a842:	b480      	push	{r7}
 800a844:	b085      	sub	sp, #20
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a84a:	2300      	movs	r3, #0
 800a84c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a852:	e005      	b.n	800a860 <USBD_GetLen+0x1e>
  {
    len++;
 800a854:	7bfb      	ldrb	r3, [r7, #15]
 800a856:	3301      	adds	r3, #1
 800a858:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	3301      	adds	r3, #1
 800a85e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1f5      	bne.n	800a854 <USBD_GetLen+0x12>
  }

  return len;
 800a868:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b084      	sub	sp, #16
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	60f8      	str	r0, [r7, #12]
 800a87e:	60b9      	str	r1, [r7, #8]
 800a880:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2202      	movs	r2, #2
 800a886:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	2100      	movs	r1, #0
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f003 fc80 	bl	800e1a2 <USBD_LL_Transmit>

  return USBD_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	2100      	movs	r1, #0
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f003 fc6f 	bl	800e1a2 <USBD_LL_Transmit>

  return USBD_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	60f8      	str	r0, [r7, #12]
 800a8d6:	60b9      	str	r1, [r7, #8]
 800a8d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2203      	movs	r2, #3
 800a8de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f003 fc73 	bl	800e1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	2100      	movs	r1, #0
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f003 fc62 	bl	800e1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2204      	movs	r2, #4
 800a936:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a93a:	2300      	movs	r3, #0
 800a93c:	2200      	movs	r2, #0
 800a93e:	2100      	movs	r1, #0
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f003 fc2e 	bl	800e1a2 <USBD_LL_Transmit>

  return USBD_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2205      	movs	r2, #5
 800a95c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a960:	2300      	movs	r3, #0
 800a962:	2200      	movs	r2, #0
 800a964:	2100      	movs	r1, #0
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f003 fc3c 	bl	800e1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
	...

0800a978 <__NVIC_SetPriority>:
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	6039      	str	r1, [r7, #0]
 800a982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	db0a      	blt.n	800a9a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	490c      	ldr	r1, [pc, #48]	@ (800a9c4 <__NVIC_SetPriority+0x4c>)
 800a992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a996:	0112      	lsls	r2, r2, #4
 800a998:	b2d2      	uxtb	r2, r2
 800a99a:	440b      	add	r3, r1
 800a99c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a9a0:	e00a      	b.n	800a9b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	4908      	ldr	r1, [pc, #32]	@ (800a9c8 <__NVIC_SetPriority+0x50>)
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	f003 030f 	and.w	r3, r3, #15
 800a9ae:	3b04      	subs	r3, #4
 800a9b0:	0112      	lsls	r2, r2, #4
 800a9b2:	b2d2      	uxtb	r2, r2
 800a9b4:	440b      	add	r3, r1
 800a9b6:	761a      	strb	r2, [r3, #24]
}
 800a9b8:	bf00      	nop
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	e000e100 	.word	0xe000e100
 800a9c8:	e000ed00 	.word	0xe000ed00

0800a9cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a9d0:	4b05      	ldr	r3, [pc, #20]	@ (800a9e8 <SysTick_Handler+0x1c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a9d4:	f001 ff36 	bl	800c844 <xTaskGetSchedulerState>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d001      	beq.n	800a9e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a9de:	f002 fd2b 	bl	800d438 <xPortSysTickHandler>
  }
}
 800a9e2:	bf00      	nop
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	e000e010 	.word	0xe000e010

0800a9ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	f06f 0004 	mvn.w	r0, #4
 800a9f6:	f7ff ffbf 	bl	800a978 <__NVIC_SetPriority>
#endif
}
 800a9fa:	bf00      	nop
 800a9fc:	bd80      	pop	{r7, pc}
	...

0800aa00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa06:	f3ef 8305 	mrs	r3, IPSR
 800aa0a:	603b      	str	r3, [r7, #0]
  return(result);
 800aa0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d003      	beq.n	800aa1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aa12:	f06f 0305 	mvn.w	r3, #5
 800aa16:	607b      	str	r3, [r7, #4]
 800aa18:	e00c      	b.n	800aa34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aa1a:	4b0a      	ldr	r3, [pc, #40]	@ (800aa44 <osKernelInitialize+0x44>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d105      	bne.n	800aa2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aa22:	4b08      	ldr	r3, [pc, #32]	@ (800aa44 <osKernelInitialize+0x44>)
 800aa24:	2201      	movs	r2, #1
 800aa26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	607b      	str	r3, [r7, #4]
 800aa2c:	e002      	b.n	800aa34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aa2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa34:	687b      	ldr	r3, [r7, #4]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	20000538 	.word	0x20000538

0800aa48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa4e:	f3ef 8305 	mrs	r3, IPSR
 800aa52:	603b      	str	r3, [r7, #0]
  return(result);
 800aa54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <osKernelStart+0x1a>
    stat = osErrorISR;
 800aa5a:	f06f 0305 	mvn.w	r3, #5
 800aa5e:	607b      	str	r3, [r7, #4]
 800aa60:	e010      	b.n	800aa84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aa62:	4b0b      	ldr	r3, [pc, #44]	@ (800aa90 <osKernelStart+0x48>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d109      	bne.n	800aa7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aa6a:	f7ff ffbf 	bl	800a9ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aa6e:	4b08      	ldr	r3, [pc, #32]	@ (800aa90 <osKernelStart+0x48>)
 800aa70:	2202      	movs	r2, #2
 800aa72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aa74:	f001 fa82 	bl	800bf7c <vTaskStartScheduler>
      stat = osOK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	607b      	str	r3, [r7, #4]
 800aa7c:	e002      	b.n	800aa84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aa7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa84:	687b      	ldr	r3, [r7, #4]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20000538 	.word	0x20000538

0800aa94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b08e      	sub	sp, #56	@ 0x38
 800aa98:	af04      	add	r7, sp, #16
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaa4:	f3ef 8305 	mrs	r3, IPSR
 800aaa8:	617b      	str	r3, [r7, #20]
  return(result);
 800aaaa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d17f      	bne.n	800abb0 <osThreadNew+0x11c>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d07c      	beq.n	800abb0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800aab6:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800aaba:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aabc:	2318      	movs	r3, #24
 800aabe:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aac0:	2300      	movs	r3, #0
 800aac2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800aac4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aac8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d045      	beq.n	800ab5c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <osThreadNew+0x4a>
        name = attr->name;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d002      	beq.n	800aaec <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d008      	beq.n	800ab04 <osThreadNew+0x70>
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	2b38      	cmp	r3, #56	@ 0x38
 800aaf6:	d805      	bhi.n	800ab04 <osThreadNew+0x70>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <osThreadNew+0x74>
        return (NULL);
 800ab04:	2300      	movs	r3, #0
 800ab06:	e054      	b.n	800abb2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	695b      	ldr	r3, [r3, #20]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d003      	beq.n	800ab18 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	089b      	lsrs	r3, r3, #2
 800ab16:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00e      	beq.n	800ab3e <osThreadNew+0xaa>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	2ba7      	cmp	r3, #167	@ 0xa7
 800ab26:	d90a      	bls.n	800ab3e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d006      	beq.n	800ab3e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <osThreadNew+0xaa>
        mem = 1;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	61bb      	str	r3, [r7, #24]
 800ab3c:	e010      	b.n	800ab60 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d10c      	bne.n	800ab60 <osThreadNew+0xcc>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d108      	bne.n	800ab60 <osThreadNew+0xcc>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d104      	bne.n	800ab60 <osThreadNew+0xcc>
          mem = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	61bb      	str	r3, [r7, #24]
 800ab5a:	e001      	b.n	800ab60 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d110      	bne.n	800ab88 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab6e:	9202      	str	r2, [sp, #8]
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	6a3a      	ldr	r2, [r7, #32]
 800ab7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f001 f809 	bl	800bb94 <xTaskCreateStatic>
 800ab82:	4603      	mov	r3, r0
 800ab84:	613b      	str	r3, [r7, #16]
 800ab86:	e013      	b.n	800abb0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d110      	bne.n	800abb0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	f107 0310 	add.w	r3, r7, #16
 800ab96:	9301      	str	r3, [sp, #4]
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f001 f857 	bl	800bc54 <xTaskCreate>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d001      	beq.n	800abb0 <osThreadNew+0x11c>
            hTask = NULL;
 800abac:	2300      	movs	r3, #0
 800abae:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800abb0:	693b      	ldr	r3, [r7, #16]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3728      	adds	r7, #40	@ 0x28
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abc2:	f3ef 8305 	mrs	r3, IPSR
 800abc6:	60bb      	str	r3, [r7, #8]
  return(result);
 800abc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <osDelay+0x1c>
    stat = osErrorISR;
 800abce:	f06f 0305 	mvn.w	r3, #5
 800abd2:	60fb      	str	r3, [r7, #12]
 800abd4:	e007      	b.n	800abe6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f001 f995 	bl	800bf10 <vTaskDelay>
    }
  }

  return (stat);
 800abe6:	68fb      	ldr	r3, [r7, #12]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08a      	sub	sp, #40	@ 0x28
 800abf4:	af02      	add	r7, sp, #8
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac00:	f3ef 8305 	mrs	r3, IPSR
 800ac04:	613b      	str	r3, [r7, #16]
  return(result);
 800ac06:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d15f      	bne.n	800accc <osMessageQueueNew+0xdc>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d05c      	beq.n	800accc <osMessageQueueNew+0xdc>
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d059      	beq.n	800accc <osMessageQueueNew+0xdc>
    mem = -1;
 800ac18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac1c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d029      	beq.n	800ac78 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d012      	beq.n	800ac52 <osMessageQueueNew+0x62>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	2b4f      	cmp	r3, #79	@ 0x4f
 800ac32:	d90e      	bls.n	800ac52 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00a      	beq.n	800ac52 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	695a      	ldr	r2, [r3, #20]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	68b9      	ldr	r1, [r7, #8]
 800ac44:	fb01 f303 	mul.w	r3, r1, r3
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d302      	bcc.n	800ac52 <osMessageQueueNew+0x62>
        mem = 1;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	61bb      	str	r3, [r7, #24]
 800ac50:	e014      	b.n	800ac7c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d110      	bne.n	800ac7c <osMessageQueueNew+0x8c>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10c      	bne.n	800ac7c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d108      	bne.n	800ac7c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d104      	bne.n	800ac7c <osMessageQueueNew+0x8c>
          mem = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	61bb      	str	r3, [r7, #24]
 800ac76:	e001      	b.n	800ac7c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d10b      	bne.n	800ac9a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	691a      	ldr	r2, [r3, #16]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	9100      	str	r1, [sp, #0]
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 fa31 	bl	800b0f8 <xQueueGenericCreateStatic>
 800ac96:	61f8      	str	r0, [r7, #28]
 800ac98:	e008      	b.n	800acac <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d105      	bne.n	800acac <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800aca0:	2200      	movs	r2, #0
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 faa4 	bl	800b1f2 <xQueueGenericCreate>
 800acaa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00c      	beq.n	800accc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d003      	beq.n	800acc0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	617b      	str	r3, [r7, #20]
 800acbe:	e001      	b.n	800acc4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800acc0:	2300      	movs	r3, #0
 800acc2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800acc4:	6979      	ldr	r1, [r7, #20]
 800acc6:	69f8      	ldr	r0, [r7, #28]
 800acc8:	f000 ff06 	bl	800bad8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800accc:	69fb      	ldr	r3, [r7, #28]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3720      	adds	r7, #32
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
	...

0800acd8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	4613      	mov	r3, r2
 800ace6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800acec:	2300      	movs	r3, #0
 800acee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acf0:	f3ef 8305 	mrs	r3, IPSR
 800acf4:	617b      	str	r3, [r7, #20]
  return(result);
 800acf6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d028      	beq.n	800ad4e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d005      	beq.n	800ad0e <osMessageQueuePut+0x36>
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d002      	beq.n	800ad0e <osMessageQueuePut+0x36>
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ad0e:	f06f 0303 	mvn.w	r3, #3
 800ad12:	61fb      	str	r3, [r7, #28]
 800ad14:	e038      	b.n	800ad88 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ad1a:	f107 0210 	add.w	r2, r7, #16
 800ad1e:	2300      	movs	r3, #0
 800ad20:	68b9      	ldr	r1, [r7, #8]
 800ad22:	69b8      	ldr	r0, [r7, #24]
 800ad24:	f000 fbc6 	bl	800b4b4 <xQueueGenericSendFromISR>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d003      	beq.n	800ad36 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ad2e:	f06f 0302 	mvn.w	r3, #2
 800ad32:	61fb      	str	r3, [r7, #28]
 800ad34:	e028      	b.n	800ad88 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d025      	beq.n	800ad88 <osMessageQueuePut+0xb0>
 800ad3c:	4b15      	ldr	r3, [pc, #84]	@ (800ad94 <osMessageQueuePut+0xbc>)
 800ad3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	e01c      	b.n	800ad88 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d002      	beq.n	800ad5a <osMessageQueuePut+0x82>
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d103      	bne.n	800ad62 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ad5a:	f06f 0303 	mvn.w	r3, #3
 800ad5e:	61fb      	str	r3, [r7, #28]
 800ad60:	e012      	b.n	800ad88 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ad62:	2300      	movs	r3, #0
 800ad64:	683a      	ldr	r2, [r7, #0]
 800ad66:	68b9      	ldr	r1, [r7, #8]
 800ad68:	69b8      	ldr	r0, [r7, #24]
 800ad6a:	f000 faa1 	bl	800b2b0 <xQueueGenericSend>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d009      	beq.n	800ad88 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ad7a:	f06f 0301 	mvn.w	r3, #1
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	e002      	b.n	800ad88 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ad82:	f06f 0302 	mvn.w	r3, #2
 800ad86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ad88:	69fb      	ldr	r3, [r7, #28]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	e000ed04 	.word	0xe000ed04

0800ad98 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
 800ada4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800adaa:	2300      	movs	r3, #0
 800adac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adae:	f3ef 8305 	mrs	r3, IPSR
 800adb2:	617b      	str	r3, [r7, #20]
  return(result);
 800adb4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d028      	beq.n	800ae0c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d005      	beq.n	800adcc <osMessageQueueGet+0x34>
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d002      	beq.n	800adcc <osMessageQueueGet+0x34>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800adcc:	f06f 0303 	mvn.w	r3, #3
 800add0:	61fb      	str	r3, [r7, #28]
 800add2:	e037      	b.n	800ae44 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800add4:	2300      	movs	r3, #0
 800add6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800add8:	f107 0310 	add.w	r3, r7, #16
 800addc:	461a      	mov	r2, r3
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	69b8      	ldr	r0, [r7, #24]
 800ade2:	f000 fce7 	bl	800b7b4 <xQueueReceiveFromISR>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d003      	beq.n	800adf4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800adec:	f06f 0302 	mvn.w	r3, #2
 800adf0:	61fb      	str	r3, [r7, #28]
 800adf2:	e027      	b.n	800ae44 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d024      	beq.n	800ae44 <osMessageQueueGet+0xac>
 800adfa:	4b15      	ldr	r3, [pc, #84]	@ (800ae50 <osMessageQueueGet+0xb8>)
 800adfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae00:	601a      	str	r2, [r3, #0]
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	e01b      	b.n	800ae44 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <osMessageQueueGet+0x80>
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d103      	bne.n	800ae20 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ae18:	f06f 0303 	mvn.w	r3, #3
 800ae1c:	61fb      	str	r3, [r7, #28]
 800ae1e:	e011      	b.n	800ae44 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	68b9      	ldr	r1, [r7, #8]
 800ae24:	69b8      	ldr	r0, [r7, #24]
 800ae26:	f000 fbe3 	bl	800b5f0 <xQueueReceive>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d009      	beq.n	800ae44 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ae36:	f06f 0301 	mvn.w	r3, #1
 800ae3a:	61fb      	str	r3, [r7, #28]
 800ae3c:	e002      	b.n	800ae44 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ae3e:	f06f 0302 	mvn.w	r3, #2
 800ae42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ae44:	69fb      	ldr	r3, [r7, #28]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3720      	adds	r7, #32
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	e000ed04 	.word	0xe000ed04

0800ae54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4a07      	ldr	r2, [pc, #28]	@ (800ae80 <vApplicationGetIdleTaskMemory+0x2c>)
 800ae64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	4a06      	ldr	r2, [pc, #24]	@ (800ae84 <vApplicationGetIdleTaskMemory+0x30>)
 800ae6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800ae72:	601a      	str	r2, [r3, #0]
}
 800ae74:	bf00      	nop
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	2000053c 	.word	0x2000053c
 800ae84:	200005e4 	.word	0x200005e4

0800ae88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4a07      	ldr	r2, [pc, #28]	@ (800aeb4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ae98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	4a06      	ldr	r2, [pc, #24]	@ (800aeb8 <vApplicationGetTimerTaskMemory+0x30>)
 800ae9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 800aea6:	601a      	str	r2, [r3, #0]
}
 800aea8:	bf00      	nop
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	200010d4 	.word	0x200010d4
 800aeb8:	2000117c 	.word	0x2000117c

0800aebc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f103 0208 	add.w	r2, r3, #8
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aed4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f103 0208 	add.w	r2, r3, #8
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f103 0208 	add.w	r2, r3, #8
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af0a:	bf00      	nop
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af16:	b480      	push	{r7}
 800af18:	b085      	sub	sp, #20
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	689a      	ldr	r2, [r3, #8]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	601a      	str	r2, [r3, #0]
}
 800af52:	bf00      	nop
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af5e:	b480      	push	{r7}
 800af60:	b085      	sub	sp, #20
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af74:	d103      	bne.n	800af7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	e00c      	b.n	800af98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3308      	adds	r3, #8
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	e002      	b.n	800af8c <vListInsert+0x2e>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	429a      	cmp	r2, r3
 800af96:	d2f6      	bcs.n	800af86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	1c5a      	adds	r2, r3, #1
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	601a      	str	r2, [r3, #0]
}
 800afc4:	bf00      	nop
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	6892      	ldr	r2, [r2, #8]
 800afe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	6852      	ldr	r2, [r2, #4]
 800aff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d103      	bne.n	800b004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689a      	ldr	r2, [r3, #8]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	1e5a      	subs	r2, r3, #1
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10b      	bne.n	800b050 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b04a:	bf00      	nop
 800b04c:	bf00      	nop
 800b04e:	e7fd      	b.n	800b04c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b050:	f002 f962 	bl	800d318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b05c:	68f9      	ldr	r1, [r7, #12]
 800b05e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b060:	fb01 f303 	mul.w	r3, r1, r3
 800b064:	441a      	add	r2, r3
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b080:	3b01      	subs	r3, #1
 800b082:	68f9      	ldr	r1, [r7, #12]
 800b084:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b086:	fb01 f303 	mul.w	r3, r1, r3
 800b08a:	441a      	add	r2, r3
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	22ff      	movs	r2, #255	@ 0xff
 800b094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	22ff      	movs	r2, #255	@ 0xff
 800b09c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d114      	bne.n	800b0d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d01a      	beq.n	800b0e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3310      	adds	r3, #16
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f001 fa00 	bl	800c4b8 <xTaskRemoveFromEventList>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d012      	beq.n	800b0e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b0be:	4b0d      	ldr	r3, [pc, #52]	@ (800b0f4 <xQueueGenericReset+0xd0>)
 800b0c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	e009      	b.n	800b0e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3310      	adds	r3, #16
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff fef1 	bl	800aebc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	3324      	adds	r3, #36	@ 0x24
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7ff feec 	bl	800aebc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b0e4:	f002 f94a 	bl	800d37c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b0e8:	2301      	movs	r3, #1
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	e000ed04 	.word	0xe000ed04

0800b0f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08e      	sub	sp, #56	@ 0x38
 800b0fc:	af02      	add	r7, sp, #8
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
 800b104:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10b      	bne.n	800b124 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b11e:	bf00      	nop
 800b120:	bf00      	nop
 800b122:	e7fd      	b.n	800b120 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10b      	bne.n	800b142 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b13c:	bf00      	nop
 800b13e:	bf00      	nop
 800b140:	e7fd      	b.n	800b13e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <xQueueGenericCreateStatic+0x56>
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <xQueueGenericCreateStatic+0x5a>
 800b14e:	2301      	movs	r3, #1
 800b150:	e000      	b.n	800b154 <xQueueGenericCreateStatic+0x5c>
 800b152:	2300      	movs	r3, #0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10b      	bne.n	800b170 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	623b      	str	r3, [r7, #32]
}
 800b16a:	bf00      	nop
 800b16c:	bf00      	nop
 800b16e:	e7fd      	b.n	800b16c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d102      	bne.n	800b17c <xQueueGenericCreateStatic+0x84>
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d101      	bne.n	800b180 <xQueueGenericCreateStatic+0x88>
 800b17c:	2301      	movs	r3, #1
 800b17e:	e000      	b.n	800b182 <xQueueGenericCreateStatic+0x8a>
 800b180:	2300      	movs	r3, #0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10b      	bne.n	800b19e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	61fb      	str	r3, [r7, #28]
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	e7fd      	b.n	800b19a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b19e:	2350      	movs	r3, #80	@ 0x50
 800b1a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2b50      	cmp	r3, #80	@ 0x50
 800b1a6:	d00b      	beq.n	800b1c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ac:	f383 8811 	msr	BASEPRI, r3
 800b1b0:	f3bf 8f6f 	isb	sy
 800b1b4:	f3bf 8f4f 	dsb	sy
 800b1b8:	61bb      	str	r3, [r7, #24]
}
 800b1ba:	bf00      	nop
 800b1bc:	bf00      	nop
 800b1be:	e7fd      	b.n	800b1bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b1c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00d      	beq.n	800b1e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	68b9      	ldr	r1, [r7, #8]
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f000 f840 	bl	800b268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3730      	adds	r7, #48	@ 0x30
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b08a      	sub	sp, #40	@ 0x28
 800b1f6:	af02      	add	r7, sp, #8
 800b1f8:	60f8      	str	r0, [r7, #12]
 800b1fa:	60b9      	str	r1, [r7, #8]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10b      	bne.n	800b21e <xQueueGenericCreate+0x2c>
	__asm volatile
 800b206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b20a:	f383 8811 	msr	BASEPRI, r3
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	613b      	str	r3, [r7, #16]
}
 800b218:	bf00      	nop
 800b21a:	bf00      	nop
 800b21c:	e7fd      	b.n	800b21a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	fb02 f303 	mul.w	r3, r2, r3
 800b226:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	3350      	adds	r3, #80	@ 0x50
 800b22c:	4618      	mov	r0, r3
 800b22e:	f002 f995 	bl	800d55c <pvPortMalloc>
 800b232:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d011      	beq.n	800b25e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	3350      	adds	r3, #80	@ 0x50
 800b242:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b24c:	79fa      	ldrb	r2, [r7, #7]
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	4613      	mov	r3, r2
 800b254:	697a      	ldr	r2, [r7, #20]
 800b256:	68b9      	ldr	r1, [r7, #8]
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f000 f805 	bl	800b268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b25e:	69bb      	ldr	r3, [r7, #24]
	}
 800b260:	4618      	mov	r0, r3
 800b262:	3720      	adds	r7, #32
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d103      	bne.n	800b284 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	69ba      	ldr	r2, [r7, #24]
 800b280:	601a      	str	r2, [r3, #0]
 800b282:	e002      	b.n	800b28a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b296:	2101      	movs	r1, #1
 800b298:	69b8      	ldr	r0, [r7, #24]
 800b29a:	f7ff fec3 	bl	800b024 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	78fa      	ldrb	r2, [r7, #3]
 800b2a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b2a6:	bf00      	nop
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08e      	sub	sp, #56	@ 0x38
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
 800b2bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10b      	bne.n	800b2e4 <xQueueGenericSend+0x34>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b2de:	bf00      	nop
 800b2e0:	bf00      	nop
 800b2e2:	e7fd      	b.n	800b2e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d103      	bne.n	800b2f2 <xQueueGenericSend+0x42>
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <xQueueGenericSend+0x46>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <xQueueGenericSend+0x48>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10b      	bne.n	800b314 <xQueueGenericSend+0x64>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b30e:	bf00      	nop
 800b310:	bf00      	nop
 800b312:	e7fd      	b.n	800b310 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	2b02      	cmp	r3, #2
 800b318:	d103      	bne.n	800b322 <xQueueGenericSend+0x72>
 800b31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d101      	bne.n	800b326 <xQueueGenericSend+0x76>
 800b322:	2301      	movs	r3, #1
 800b324:	e000      	b.n	800b328 <xQueueGenericSend+0x78>
 800b326:	2300      	movs	r3, #0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10b      	bne.n	800b344 <xQueueGenericSend+0x94>
	__asm volatile
 800b32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	623b      	str	r3, [r7, #32]
}
 800b33e:	bf00      	nop
 800b340:	bf00      	nop
 800b342:	e7fd      	b.n	800b340 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b344:	f001 fa7e 	bl	800c844 <xTaskGetSchedulerState>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d102      	bne.n	800b354 <xQueueGenericSend+0xa4>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <xQueueGenericSend+0xa8>
 800b354:	2301      	movs	r3, #1
 800b356:	e000      	b.n	800b35a <xQueueGenericSend+0xaa>
 800b358:	2300      	movs	r3, #0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10b      	bne.n	800b376 <xQueueGenericSend+0xc6>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	61fb      	str	r3, [r7, #28]
}
 800b370:	bf00      	nop
 800b372:	bf00      	nop
 800b374:	e7fd      	b.n	800b372 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b376:	f001 ffcf 	bl	800d318 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b382:	429a      	cmp	r2, r3
 800b384:	d302      	bcc.n	800b38c <xQueueGenericSend+0xdc>
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	2b02      	cmp	r3, #2
 800b38a:	d129      	bne.n	800b3e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	68b9      	ldr	r1, [r7, #8]
 800b390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b392:	f000 fa91 	bl	800b8b8 <prvCopyDataToQueue>
 800b396:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d010      	beq.n	800b3c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a2:	3324      	adds	r3, #36	@ 0x24
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f001 f887 	bl	800c4b8 <xTaskRemoveFromEventList>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d013      	beq.n	800b3d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b3b0:	4b3f      	ldr	r3, [pc, #252]	@ (800b4b0 <xQueueGenericSend+0x200>)
 800b3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	e00a      	b.n	800b3d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d007      	beq.n	800b3d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b3c8:	4b39      	ldr	r3, [pc, #228]	@ (800b4b0 <xQueueGenericSend+0x200>)
 800b3ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3ce:	601a      	str	r2, [r3, #0]
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b3d8:	f001 ffd0 	bl	800d37c <vPortExitCritical>
				return pdPASS;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e063      	b.n	800b4a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d103      	bne.n	800b3ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3e6:	f001 ffc9 	bl	800d37c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e05c      	b.n	800b4a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d106      	bne.n	800b402 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3f4:	f107 0314 	add.w	r3, r7, #20
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f001 f8c1 	bl	800c580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3fe:	2301      	movs	r3, #1
 800b400:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b402:	f001 ffbb 	bl	800d37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b406:	f000 fe29 	bl	800c05c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b40a:	f001 ff85 	bl	800d318 <vPortEnterCritical>
 800b40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b410:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b414:	b25b      	sxtb	r3, r3
 800b416:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b41a:	d103      	bne.n	800b424 <xQueueGenericSend+0x174>
 800b41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b426:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b42a:	b25b      	sxtb	r3, r3
 800b42c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b430:	d103      	bne.n	800b43a <xQueueGenericSend+0x18a>
 800b432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b434:	2200      	movs	r2, #0
 800b436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b43a:	f001 ff9f 	bl	800d37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b43e:	1d3a      	adds	r2, r7, #4
 800b440:	f107 0314 	add.w	r3, r7, #20
 800b444:	4611      	mov	r1, r2
 800b446:	4618      	mov	r0, r3
 800b448:	f001 f8b0 	bl	800c5ac <xTaskCheckForTimeOut>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d124      	bne.n	800b49c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b452:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b454:	f000 fb28 	bl	800baa8 <prvIsQueueFull>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d018      	beq.n	800b490 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b460:	3310      	adds	r3, #16
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	4611      	mov	r1, r2
 800b466:	4618      	mov	r0, r3
 800b468:	f000 ffd4 	bl	800c414 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b46c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b46e:	f000 fab3 	bl	800b9d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b472:	f000 fe01 	bl	800c078 <xTaskResumeAll>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f47f af7c 	bne.w	800b376 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b47e:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b0 <xQueueGenericSend+0x200>)
 800b480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	e772      	b.n	800b376 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b492:	f000 faa1 	bl	800b9d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b496:	f000 fdef 	bl	800c078 <xTaskResumeAll>
 800b49a:	e76c      	b.n	800b376 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b49c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b49e:	f000 fa9b 	bl	800b9d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4a2:	f000 fde9 	bl	800c078 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b4a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3738      	adds	r7, #56	@ 0x38
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	e000ed04 	.word	0xe000ed04

0800b4b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b090      	sub	sp, #64	@ 0x40
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10b      	bne.n	800b4e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b4de:	bf00      	nop
 800b4e0:	bf00      	nop
 800b4e2:	e7fd      	b.n	800b4e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d103      	bne.n	800b4f2 <xQueueGenericSendFromISR+0x3e>
 800b4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d101      	bne.n	800b4f6 <xQueueGenericSendFromISR+0x42>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e000      	b.n	800b4f8 <xQueueGenericSendFromISR+0x44>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10b      	bne.n	800b514 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b50e:	bf00      	nop
 800b510:	bf00      	nop
 800b512:	e7fd      	b.n	800b510 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	2b02      	cmp	r3, #2
 800b518:	d103      	bne.n	800b522 <xQueueGenericSendFromISR+0x6e>
 800b51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d101      	bne.n	800b526 <xQueueGenericSendFromISR+0x72>
 800b522:	2301      	movs	r3, #1
 800b524:	e000      	b.n	800b528 <xQueueGenericSendFromISR+0x74>
 800b526:	2300      	movs	r3, #0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10b      	bne.n	800b544 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	623b      	str	r3, [r7, #32]
}
 800b53e:	bf00      	nop
 800b540:	bf00      	nop
 800b542:	e7fd      	b.n	800b540 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b544:	f001 ffc8 	bl	800d4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b548:	f3ef 8211 	mrs	r2, BASEPRI
 800b54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	61fa      	str	r2, [r7, #28]
 800b55e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b560:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b562:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d302      	bcc.n	800b576 <xQueueGenericSendFromISR+0xc2>
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2b02      	cmp	r3, #2
 800b574:	d12f      	bne.n	800b5d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b578:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b57c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b584:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	68b9      	ldr	r1, [r7, #8]
 800b58a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b58c:	f000 f994 	bl	800b8b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b590:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b598:	d112      	bne.n	800b5c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d016      	beq.n	800b5d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a4:	3324      	adds	r3, #36	@ 0x24
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 ff86 	bl	800c4b8 <xTaskRemoveFromEventList>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00e      	beq.n	800b5d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00b      	beq.n	800b5d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	e007      	b.n	800b5d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	b25a      	sxtb	r2, r3
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b5d4:	e001      	b.n	800b5da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b5e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3740      	adds	r7, #64	@ 0x40
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08c      	sub	sp, #48	@ 0x30
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10b      	bne.n	800b622 <xQueueReceive+0x32>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	623b      	str	r3, [r7, #32]
}
 800b61c:	bf00      	nop
 800b61e:	bf00      	nop
 800b620:	e7fd      	b.n	800b61e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d103      	bne.n	800b630 <xQueueReceive+0x40>
 800b628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <xQueueReceive+0x44>
 800b630:	2301      	movs	r3, #1
 800b632:	e000      	b.n	800b636 <xQueueReceive+0x46>
 800b634:	2300      	movs	r3, #0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10b      	bne.n	800b652 <xQueueReceive+0x62>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	61fb      	str	r3, [r7, #28]
}
 800b64c:	bf00      	nop
 800b64e:	bf00      	nop
 800b650:	e7fd      	b.n	800b64e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b652:	f001 f8f7 	bl	800c844 <xTaskGetSchedulerState>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d102      	bne.n	800b662 <xQueueReceive+0x72>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d101      	bne.n	800b666 <xQueueReceive+0x76>
 800b662:	2301      	movs	r3, #1
 800b664:	e000      	b.n	800b668 <xQueueReceive+0x78>
 800b666:	2300      	movs	r3, #0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10b      	bne.n	800b684 <xQueueReceive+0x94>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	61bb      	str	r3, [r7, #24]
}
 800b67e:	bf00      	nop
 800b680:	bf00      	nop
 800b682:	e7fd      	b.n	800b680 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b684:	f001 fe48 	bl	800d318 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b68c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	2b00      	cmp	r3, #0
 800b692:	d01f      	beq.n	800b6d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b694:	68b9      	ldr	r1, [r7, #8]
 800b696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b698:	f000 f978 	bl	800b98c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69e:	1e5a      	subs	r2, r3, #1
 800b6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00f      	beq.n	800b6cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ae:	3310      	adds	r3, #16
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f000 ff01 	bl	800c4b8 <xTaskRemoveFromEventList>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d007      	beq.n	800b6cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6bc:	4b3c      	ldr	r3, [pc, #240]	@ (800b7b0 <xQueueReceive+0x1c0>)
 800b6be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6cc:	f001 fe56 	bl	800d37c <vPortExitCritical>
				return pdPASS;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e069      	b.n	800b7a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d103      	bne.n	800b6e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6da:	f001 fe4f 	bl	800d37c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e062      	b.n	800b7a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d106      	bne.n	800b6f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6e8:	f107 0310 	add.w	r3, r7, #16
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 ff47 	bl	800c580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6f6:	f001 fe41 	bl	800d37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6fa:	f000 fcaf 	bl	800c05c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6fe:	f001 fe0b 	bl	800d318 <vPortEnterCritical>
 800b702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b704:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b708:	b25b      	sxtb	r3, r3
 800b70a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b70e:	d103      	bne.n	800b718 <xQueueReceive+0x128>
 800b710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b712:	2200      	movs	r2, #0
 800b714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b71e:	b25b      	sxtb	r3, r3
 800b720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b724:	d103      	bne.n	800b72e <xQueueReceive+0x13e>
 800b726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b72e:	f001 fe25 	bl	800d37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b732:	1d3a      	adds	r2, r7, #4
 800b734:	f107 0310 	add.w	r3, r7, #16
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 ff36 	bl	800c5ac <xTaskCheckForTimeOut>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d123      	bne.n	800b78e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b748:	f000 f998 	bl	800ba7c <prvIsQueueEmpty>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d017      	beq.n	800b782 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b754:	3324      	adds	r3, #36	@ 0x24
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	4611      	mov	r1, r2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 fe5a 	bl	800c414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b760:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b762:	f000 f939 	bl	800b9d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b766:	f000 fc87 	bl	800c078 <xTaskResumeAll>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d189      	bne.n	800b684 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b770:	4b0f      	ldr	r3, [pc, #60]	@ (800b7b0 <xQueueReceive+0x1c0>)
 800b772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	e780      	b.n	800b684 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b784:	f000 f928 	bl	800b9d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b788:	f000 fc76 	bl	800c078 <xTaskResumeAll>
 800b78c:	e77a      	b.n	800b684 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b78e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b790:	f000 f922 	bl	800b9d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b794:	f000 fc70 	bl	800c078 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b79a:	f000 f96f 	bl	800ba7c <prvIsQueueEmpty>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f43f af6f 	beq.w	800b684 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3730      	adds	r7, #48	@ 0x30
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	e000ed04 	.word	0xe000ed04

0800b7b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08e      	sub	sp, #56	@ 0x38
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10b      	bne.n	800b7e2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	623b      	str	r3, [r7, #32]
}
 800b7dc:	bf00      	nop
 800b7de:	bf00      	nop
 800b7e0:	e7fd      	b.n	800b7de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d103      	bne.n	800b7f0 <xQueueReceiveFromISR+0x3c>
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <xQueueReceiveFromISR+0x40>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e000      	b.n	800b7f6 <xQueueReceiveFromISR+0x42>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10b      	bne.n	800b812 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7fe:	f383 8811 	msr	BASEPRI, r3
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	61fb      	str	r3, [r7, #28]
}
 800b80c:	bf00      	nop
 800b80e:	bf00      	nop
 800b810:	e7fd      	b.n	800b80e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b812:	f001 fe61 	bl	800d4d8 <vPortValidateInterruptPriority>
	__asm volatile
 800b816:	f3ef 8211 	mrs	r2, BASEPRI
 800b81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	61ba      	str	r2, [r7, #24]
 800b82c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b82e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b830:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b836:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d02f      	beq.n	800b89e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b840:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b848:	68b9      	ldr	r1, [r7, #8]
 800b84a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b84c:	f000 f89e 	bl	800b98c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b852:	1e5a      	subs	r2, r3, #1
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b858:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b85c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b860:	d112      	bne.n	800b888 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d016      	beq.n	800b898 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b86c:	3310      	adds	r3, #16
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 fe22 	bl	800c4b8 <xTaskRemoveFromEventList>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00e      	beq.n	800b898 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00b      	beq.n	800b898 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	e007      	b.n	800b898 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b88c:	3301      	adds	r3, #1
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	b25a      	sxtb	r2, r3
 800b892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b898:	2301      	movs	r3, #1
 800b89a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b89c:	e001      	b.n	800b8a2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f383 8811 	msr	BASEPRI, r3
}
 800b8ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3738      	adds	r7, #56	@ 0x38
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10d      	bne.n	800b8f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d14d      	bne.n	800b97a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 ffcc 	bl	800c880 <xTaskPriorityDisinherit>
 800b8e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	609a      	str	r2, [r3, #8]
 800b8f0:	e043      	b.n	800b97a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d119      	bne.n	800b92c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6858      	ldr	r0, [r3, #4]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b900:	461a      	mov	r2, r3
 800b902:	68b9      	ldr	r1, [r7, #8]
 800b904:	f003 fb05 	bl	800ef12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b910:	441a      	add	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d32b      	bcc.n	800b97a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	605a      	str	r2, [r3, #4]
 800b92a:	e026      	b.n	800b97a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	68d8      	ldr	r0, [r3, #12]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b934:	461a      	mov	r2, r3
 800b936:	68b9      	ldr	r1, [r7, #8]
 800b938:	f003 faeb 	bl	800ef12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	68da      	ldr	r2, [r3, #12]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b944:	425b      	negs	r3, r3
 800b946:	441a      	add	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	68da      	ldr	r2, [r3, #12]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	429a      	cmp	r2, r3
 800b956:	d207      	bcs.n	800b968 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	689a      	ldr	r2, [r3, #8]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b960:	425b      	negs	r3, r3
 800b962:	441a      	add	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d105      	bne.n	800b97a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d002      	beq.n	800b97a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	3b01      	subs	r3, #1
 800b978:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	1c5a      	adds	r2, r3, #1
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b982:	697b      	ldr	r3, [r7, #20]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3718      	adds	r7, #24
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d018      	beq.n	800b9d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68da      	ldr	r2, [r3, #12]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9a6:	441a      	add	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68da      	ldr	r2, [r3, #12]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d303      	bcc.n	800b9c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	68d9      	ldr	r1, [r3, #12]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	6838      	ldr	r0, [r7, #0]
 800b9cc:	f003 faa1 	bl	800ef12 <memcpy>
	}
}
 800b9d0:	bf00      	nop
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b9e0:	f001 fc9a 	bl	800d318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9ec:	e011      	b.n	800ba12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d012      	beq.n	800ba1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	3324      	adds	r3, #36	@ 0x24
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 fd5c 	bl	800c4b8 <xTaskRemoveFromEventList>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba06:	f000 fe35 	bl	800c674 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	dce9      	bgt.n	800b9ee <prvUnlockQueue+0x16>
 800ba1a:	e000      	b.n	800ba1e <prvUnlockQueue+0x46>
					break;
 800ba1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	22ff      	movs	r2, #255	@ 0xff
 800ba22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ba26:	f001 fca9 	bl	800d37c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba2a:	f001 fc75 	bl	800d318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba36:	e011      	b.n	800ba5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d012      	beq.n	800ba66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	3310      	adds	r3, #16
 800ba44:	4618      	mov	r0, r3
 800ba46:	f000 fd37 	bl	800c4b8 <xTaskRemoveFromEventList>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba50:	f000 fe10 	bl	800c674 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba54:	7bbb      	ldrb	r3, [r7, #14]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	dce9      	bgt.n	800ba38 <prvUnlockQueue+0x60>
 800ba64:	e000      	b.n	800ba68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	22ff      	movs	r2, #255	@ 0xff
 800ba6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ba70:	f001 fc84 	bl	800d37c <vPortExitCritical>
}
 800ba74:	bf00      	nop
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba84:	f001 fc48 	bl	800d318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d102      	bne.n	800ba96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba90:	2301      	movs	r3, #1
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e001      	b.n	800ba9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba96:	2300      	movs	r3, #0
 800ba98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba9a:	f001 fc6f 	bl	800d37c <vPortExitCritical>

	return xReturn;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bab0:	f001 fc32 	bl	800d318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800babc:	429a      	cmp	r2, r3
 800babe:	d102      	bne.n	800bac6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bac0:	2301      	movs	r3, #1
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	e001      	b.n	800baca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bac6:	2300      	movs	r3, #0
 800bac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800baca:	f001 fc57 	bl	800d37c <vPortExitCritical>

	return xReturn;
 800bace:	68fb      	ldr	r3, [r7, #12]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bae2:	2300      	movs	r3, #0
 800bae4:	60fb      	str	r3, [r7, #12]
 800bae6:	e014      	b.n	800bb12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bae8:	4a0f      	ldr	r2, [pc, #60]	@ (800bb28 <vQueueAddToRegistry+0x50>)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10b      	bne.n	800bb0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800baf4:	490c      	ldr	r1, [pc, #48]	@ (800bb28 <vQueueAddToRegistry+0x50>)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bafe:	4a0a      	ldr	r2, [pc, #40]	@ (800bb28 <vQueueAddToRegistry+0x50>)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	00db      	lsls	r3, r3, #3
 800bb04:	4413      	add	r3, r2
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bb0a:	e006      	b.n	800bb1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	60fb      	str	r3, [r7, #12]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2b07      	cmp	r3, #7
 800bb16:	d9e7      	bls.n	800bae8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bb18:	bf00      	nop
 800bb1a:	bf00      	nop
 800bb1c:	3714      	adds	r7, #20
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	2000275c 	.word	0x2000275c

0800bb2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb3c:	f001 fbec 	bl	800d318 <vPortEnterCritical>
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb46:	b25b      	sxtb	r3, r3
 800bb48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb4c:	d103      	bne.n	800bb56 <vQueueWaitForMessageRestricted+0x2a>
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb5c:	b25b      	sxtb	r3, r3
 800bb5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb62:	d103      	bne.n	800bb6c <vQueueWaitForMessageRestricted+0x40>
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb6c:	f001 fc06 	bl	800d37c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d106      	bne.n	800bb86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	3324      	adds	r3, #36	@ 0x24
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	68b9      	ldr	r1, [r7, #8]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f000 fc6d 	bl	800c460 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb86:	6978      	ldr	r0, [r7, #20]
 800bb88:	f7ff ff26 	bl	800b9d8 <prvUnlockQueue>
	}
 800bb8c:	bf00      	nop
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b08e      	sub	sp, #56	@ 0x38
 800bb98:	af04      	add	r7, sp, #16
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
 800bba0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10b      	bne.n	800bbc0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	623b      	str	r3, [r7, #32]
}
 800bbba:	bf00      	nop
 800bbbc:	bf00      	nop
 800bbbe:	e7fd      	b.n	800bbbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10b      	bne.n	800bbde <xTaskCreateStatic+0x4a>
	__asm volatile
 800bbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	61fb      	str	r3, [r7, #28]
}
 800bbd8:	bf00      	nop
 800bbda:	bf00      	nop
 800bbdc:	e7fd      	b.n	800bbda <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bbde:	23a8      	movs	r3, #168	@ 0xa8
 800bbe0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	2ba8      	cmp	r3, #168	@ 0xa8
 800bbe6:	d00b      	beq.n	800bc00 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	61bb      	str	r3, [r7, #24]
}
 800bbfa:	bf00      	nop
 800bbfc:	bf00      	nop
 800bbfe:	e7fd      	b.n	800bbfc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d01e      	beq.n	800bc46 <xTaskCreateStatic+0xb2>
 800bc08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d01b      	beq.n	800bc46 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc10:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc16:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc20:	2300      	movs	r3, #0
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc26:	9302      	str	r3, [sp, #8]
 800bc28:	f107 0314 	add.w	r3, r7, #20
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	68b9      	ldr	r1, [r7, #8]
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f000 f851 	bl	800bce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc40:	f000 f8f6 	bl	800be30 <prvAddNewTaskToReadyList>
 800bc44:	e001      	b.n	800bc4a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bc46:	2300      	movs	r3, #0
 800bc48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc4a:	697b      	ldr	r3, [r7, #20]
	}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3728      	adds	r7, #40	@ 0x28
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b08c      	sub	sp, #48	@ 0x30
 800bc58:	af04      	add	r7, sp, #16
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	4613      	mov	r3, r2
 800bc62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc64:	88fb      	ldrh	r3, [r7, #6]
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f001 fc77 	bl	800d55c <pvPortMalloc>
 800bc6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00e      	beq.n	800bc94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc76:	20a8      	movs	r0, #168	@ 0xa8
 800bc78:	f001 fc70 	bl	800d55c <pvPortMalloc>
 800bc7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d003      	beq.n	800bc8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc8a:	e005      	b.n	800bc98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc8c:	6978      	ldr	r0, [r7, #20]
 800bc8e:	f001 fd33 	bl	800d6f8 <vPortFree>
 800bc92:	e001      	b.n	800bc98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc94:	2300      	movs	r3, #0
 800bc96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d017      	beq.n	800bcce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bca6:	88fa      	ldrh	r2, [r7, #6]
 800bca8:	2300      	movs	r3, #0
 800bcaa:	9303      	str	r3, [sp, #12]
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	9302      	str	r3, [sp, #8]
 800bcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb2:	9301      	str	r3, [sp, #4]
 800bcb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	68b9      	ldr	r1, [r7, #8]
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 f80f 	bl	800bce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcc2:	69f8      	ldr	r0, [r7, #28]
 800bcc4:	f000 f8b4 	bl	800be30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	61bb      	str	r3, [r7, #24]
 800bccc:	e002      	b.n	800bcd4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bcce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bcd4:	69bb      	ldr	r3, [r7, #24]
	}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3720      	adds	r7, #32
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
	...

0800bce0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	21a5      	movs	r1, #165	@ 0xa5
 800bcfa:	f003 f87b 	bl	800edf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	f023 0307 	bic.w	r3, r3, #7
 800bd16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	f003 0307 	and.w	r3, r3, #7
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00b      	beq.n	800bd3a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bd22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	617b      	str	r3, [r7, #20]
}
 800bd34:	bf00      	nop
 800bd36:	bf00      	nop
 800bd38:	e7fd      	b.n	800bd36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d01f      	beq.n	800bd80 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd40:	2300      	movs	r3, #0
 800bd42:	61fb      	str	r3, [r7, #28]
 800bd44:	e012      	b.n	800bd6c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	7819      	ldrb	r1, [r3, #0]
 800bd4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	4413      	add	r3, r2
 800bd54:	3334      	adds	r3, #52	@ 0x34
 800bd56:	460a      	mov	r2, r1
 800bd58:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	4413      	add	r3, r2
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d006      	beq.n	800bd74 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	61fb      	str	r3, [r7, #28]
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	2b0f      	cmp	r3, #15
 800bd70:	d9e9      	bls.n	800bd46 <prvInitialiseNewTask+0x66>
 800bd72:	e000      	b.n	800bd76 <prvInitialiseNewTask+0x96>
			{
				break;
 800bd74:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bd7e:	e003      	b.n	800bd88 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8a:	2b37      	cmp	r3, #55	@ 0x37
 800bd8c:	d901      	bls.n	800bd92 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd8e:	2337      	movs	r3, #55	@ 0x37
 800bd90:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd96:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd9c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda0:	2200      	movs	r2, #0
 800bda2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda6:	3304      	adds	r3, #4
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff f8a7 	bl	800aefc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb0:	3318      	adds	r3, #24
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff f8a2 	bl	800aefc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bdc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdcc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde0:	3354      	adds	r3, #84	@ 0x54
 800bde2:	224c      	movs	r2, #76	@ 0x4c
 800bde4:	2100      	movs	r1, #0
 800bde6:	4618      	mov	r0, r3
 800bde8:	f003 f804 	bl	800edf4 <memset>
 800bdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdee:	4a0d      	ldr	r2, [pc, #52]	@ (800be24 <prvInitialiseNewTask+0x144>)
 800bdf0:	659a      	str	r2, [r3, #88]	@ 0x58
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf4:	4a0c      	ldr	r2, [pc, #48]	@ (800be28 <prvInitialiseNewTask+0x148>)
 800bdf6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfa:	4a0c      	ldr	r2, [pc, #48]	@ (800be2c <prvInitialiseNewTask+0x14c>)
 800bdfc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	68f9      	ldr	r1, [r7, #12]
 800be02:	69b8      	ldr	r0, [r7, #24]
 800be04:	f001 f95a 	bl	800d0bc <pxPortInitialiseStack>
 800be08:	4602      	mov	r2, r0
 800be0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be1a:	bf00      	nop
 800be1c:	3720      	adds	r7, #32
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	2000769c 	.word	0x2000769c
 800be28:	20007704 	.word	0x20007704
 800be2c:	2000776c 	.word	0x2000776c

0800be30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be38:	f001 fa6e 	bl	800d318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be3c:	4b2d      	ldr	r3, [pc, #180]	@ (800bef4 <prvAddNewTaskToReadyList+0xc4>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3301      	adds	r3, #1
 800be42:	4a2c      	ldr	r2, [pc, #176]	@ (800bef4 <prvAddNewTaskToReadyList+0xc4>)
 800be44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be46:	4b2c      	ldr	r3, [pc, #176]	@ (800bef8 <prvAddNewTaskToReadyList+0xc8>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d109      	bne.n	800be62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be4e:	4a2a      	ldr	r2, [pc, #168]	@ (800bef8 <prvAddNewTaskToReadyList+0xc8>)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be54:	4b27      	ldr	r3, [pc, #156]	@ (800bef4 <prvAddNewTaskToReadyList+0xc4>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d110      	bne.n	800be7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be5c:	f000 fc2e 	bl	800c6bc <prvInitialiseTaskLists>
 800be60:	e00d      	b.n	800be7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be62:	4b26      	ldr	r3, [pc, #152]	@ (800befc <prvAddNewTaskToReadyList+0xcc>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d109      	bne.n	800be7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be6a:	4b23      	ldr	r3, [pc, #140]	@ (800bef8 <prvAddNewTaskToReadyList+0xc8>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be74:	429a      	cmp	r2, r3
 800be76:	d802      	bhi.n	800be7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be78:	4a1f      	ldr	r2, [pc, #124]	@ (800bef8 <prvAddNewTaskToReadyList+0xc8>)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be7e:	4b20      	ldr	r3, [pc, #128]	@ (800bf00 <prvAddNewTaskToReadyList+0xd0>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	3301      	adds	r3, #1
 800be84:	4a1e      	ldr	r2, [pc, #120]	@ (800bf00 <prvAddNewTaskToReadyList+0xd0>)
 800be86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be88:	4b1d      	ldr	r3, [pc, #116]	@ (800bf00 <prvAddNewTaskToReadyList+0xd0>)
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be94:	4b1b      	ldr	r3, [pc, #108]	@ (800bf04 <prvAddNewTaskToReadyList+0xd4>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d903      	bls.n	800bea4 <prvAddNewTaskToReadyList+0x74>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea0:	4a18      	ldr	r2, [pc, #96]	@ (800bf04 <prvAddNewTaskToReadyList+0xd4>)
 800bea2:	6013      	str	r3, [r2, #0]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bea8:	4613      	mov	r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	4a15      	ldr	r2, [pc, #84]	@ (800bf08 <prvAddNewTaskToReadyList+0xd8>)
 800beb2:	441a      	add	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	3304      	adds	r3, #4
 800beb8:	4619      	mov	r1, r3
 800beba:	4610      	mov	r0, r2
 800bebc:	f7ff f82b 	bl	800af16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bec0:	f001 fa5c 	bl	800d37c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bec4:	4b0d      	ldr	r3, [pc, #52]	@ (800befc <prvAddNewTaskToReadyList+0xcc>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00e      	beq.n	800beea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800becc:	4b0a      	ldr	r3, [pc, #40]	@ (800bef8 <prvAddNewTaskToReadyList+0xc8>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d207      	bcs.n	800beea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800beda:	4b0c      	ldr	r3, [pc, #48]	@ (800bf0c <prvAddNewTaskToReadyList+0xdc>)
 800bedc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bee0:	601a      	str	r2, [r3, #0]
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800beea:	bf00      	nop
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	20002c70 	.word	0x20002c70
 800bef8:	2000279c 	.word	0x2000279c
 800befc:	20002c7c 	.word	0x20002c7c
 800bf00:	20002c8c 	.word	0x20002c8c
 800bf04:	20002c78 	.word	0x20002c78
 800bf08:	200027a0 	.word	0x200027a0
 800bf0c:	e000ed04 	.word	0xe000ed04

0800bf10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d018      	beq.n	800bf54 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bf22:	4b14      	ldr	r3, [pc, #80]	@ (800bf74 <vTaskDelay+0x64>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00b      	beq.n	800bf42 <vTaskDelay+0x32>
	__asm volatile
 800bf2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf2e:	f383 8811 	msr	BASEPRI, r3
 800bf32:	f3bf 8f6f 	isb	sy
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	60bb      	str	r3, [r7, #8]
}
 800bf3c:	bf00      	nop
 800bf3e:	bf00      	nop
 800bf40:	e7fd      	b.n	800bf3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bf42:	f000 f88b 	bl	800c05c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bf46:	2100      	movs	r1, #0
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fd09 	bl	800c960 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bf4e:	f000 f893 	bl	800c078 <xTaskResumeAll>
 800bf52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d107      	bne.n	800bf6a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bf5a:	4b07      	ldr	r3, [pc, #28]	@ (800bf78 <vTaskDelay+0x68>)
 800bf5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf6a:	bf00      	nop
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	20002c98 	.word	0x20002c98
 800bf78:	e000ed04 	.word	0xe000ed04

0800bf7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b08a      	sub	sp, #40	@ 0x28
 800bf80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf82:	2300      	movs	r3, #0
 800bf84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf86:	2300      	movs	r3, #0
 800bf88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf8a:	463a      	mov	r2, r7
 800bf8c:	1d39      	adds	r1, r7, #4
 800bf8e:	f107 0308 	add.w	r3, r7, #8
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fe ff5e 	bl	800ae54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	9202      	str	r2, [sp, #8]
 800bfa0:	9301      	str	r3, [sp, #4]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	460a      	mov	r2, r1
 800bfaa:	4924      	ldr	r1, [pc, #144]	@ (800c03c <vTaskStartScheduler+0xc0>)
 800bfac:	4824      	ldr	r0, [pc, #144]	@ (800c040 <vTaskStartScheduler+0xc4>)
 800bfae:	f7ff fdf1 	bl	800bb94 <xTaskCreateStatic>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	4a23      	ldr	r2, [pc, #140]	@ (800c044 <vTaskStartScheduler+0xc8>)
 800bfb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bfb8:	4b22      	ldr	r3, [pc, #136]	@ (800c044 <vTaskStartScheduler+0xc8>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	617b      	str	r3, [r7, #20]
 800bfc4:	e001      	b.n	800bfca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d102      	bne.n	800bfd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bfd0:	f000 fd1a 	bl	800ca08 <xTimerCreateTimerTask>
 800bfd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d11b      	bne.n	800c014 <vTaskStartScheduler+0x98>
	__asm volatile
 800bfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	613b      	str	r3, [r7, #16]
}
 800bfee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bff0:	4b15      	ldr	r3, [pc, #84]	@ (800c048 <vTaskStartScheduler+0xcc>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3354      	adds	r3, #84	@ 0x54
 800bff6:	4a15      	ldr	r2, [pc, #84]	@ (800c04c <vTaskStartScheduler+0xd0>)
 800bff8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bffa:	4b15      	ldr	r3, [pc, #84]	@ (800c050 <vTaskStartScheduler+0xd4>)
 800bffc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c000:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c002:	4b14      	ldr	r3, [pc, #80]	@ (800c054 <vTaskStartScheduler+0xd8>)
 800c004:	2201      	movs	r2, #1
 800c006:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c008:	4b13      	ldr	r3, [pc, #76]	@ (800c058 <vTaskStartScheduler+0xdc>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c00e:	f001 f8df 	bl	800d1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c012:	e00f      	b.n	800c034 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c01a:	d10b      	bne.n	800c034 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	60fb      	str	r3, [r7, #12]
}
 800c02e:	bf00      	nop
 800c030:	bf00      	nop
 800c032:	e7fd      	b.n	800c030 <vTaskStartScheduler+0xb4>
}
 800c034:	bf00      	nop
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	080112dc 	.word	0x080112dc
 800c040:	0800c68d 	.word	0x0800c68d
 800c044:	20002c94 	.word	0x20002c94
 800c048:	2000279c 	.word	0x2000279c
 800c04c:	20000194 	.word	0x20000194
 800c050:	20002c90 	.word	0x20002c90
 800c054:	20002c7c 	.word	0x20002c7c
 800c058:	20002c74 	.word	0x20002c74

0800c05c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c05c:	b480      	push	{r7}
 800c05e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c060:	4b04      	ldr	r3, [pc, #16]	@ (800c074 <vTaskSuspendAll+0x18>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3301      	adds	r3, #1
 800c066:	4a03      	ldr	r2, [pc, #12]	@ (800c074 <vTaskSuspendAll+0x18>)
 800c068:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c06a:	bf00      	nop
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	20002c98 	.word	0x20002c98

0800c078 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c07e:	2300      	movs	r3, #0
 800c080:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c082:	2300      	movs	r3, #0
 800c084:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c086:	4b42      	ldr	r3, [pc, #264]	@ (800c190 <xTaskResumeAll+0x118>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10b      	bne.n	800c0a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	603b      	str	r3, [r7, #0]
}
 800c0a0:	bf00      	nop
 800c0a2:	bf00      	nop
 800c0a4:	e7fd      	b.n	800c0a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c0a6:	f001 f937 	bl	800d318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c0aa:	4b39      	ldr	r3, [pc, #228]	@ (800c190 <xTaskResumeAll+0x118>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	3b01      	subs	r3, #1
 800c0b0:	4a37      	ldr	r2, [pc, #220]	@ (800c190 <xTaskResumeAll+0x118>)
 800c0b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0b4:	4b36      	ldr	r3, [pc, #216]	@ (800c190 <xTaskResumeAll+0x118>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d162      	bne.n	800c182 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c0bc:	4b35      	ldr	r3, [pc, #212]	@ (800c194 <xTaskResumeAll+0x11c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d05e      	beq.n	800c182 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0c4:	e02f      	b.n	800c126 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0c6:	4b34      	ldr	r3, [pc, #208]	@ (800c198 <xTaskResumeAll+0x120>)
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3318      	adds	r3, #24
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fe ff7c 	bl	800afd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fe ff77 	bl	800afd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0e6:	4b2d      	ldr	r3, [pc, #180]	@ (800c19c <xTaskResumeAll+0x124>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d903      	bls.n	800c0f6 <xTaskResumeAll+0x7e>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f2:	4a2a      	ldr	r2, [pc, #168]	@ (800c19c <xTaskResumeAll+0x124>)
 800c0f4:	6013      	str	r3, [r2, #0]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	4413      	add	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4a27      	ldr	r2, [pc, #156]	@ (800c1a0 <xTaskResumeAll+0x128>)
 800c104:	441a      	add	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	3304      	adds	r3, #4
 800c10a:	4619      	mov	r1, r3
 800c10c:	4610      	mov	r0, r2
 800c10e:	f7fe ff02 	bl	800af16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c116:	4b23      	ldr	r3, [pc, #140]	@ (800c1a4 <xTaskResumeAll+0x12c>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d302      	bcc.n	800c126 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c120:	4b21      	ldr	r3, [pc, #132]	@ (800c1a8 <xTaskResumeAll+0x130>)
 800c122:	2201      	movs	r2, #1
 800c124:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c126:	4b1c      	ldr	r3, [pc, #112]	@ (800c198 <xTaskResumeAll+0x120>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1cb      	bne.n	800c0c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d001      	beq.n	800c138 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c134:	f000 fb66 	bl	800c804 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c138:	4b1c      	ldr	r3, [pc, #112]	@ (800c1ac <xTaskResumeAll+0x134>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d010      	beq.n	800c166 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c144:	f000 f846 	bl	800c1d4 <xTaskIncrementTick>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d002      	beq.n	800c154 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c14e:	4b16      	ldr	r3, [pc, #88]	@ (800c1a8 <xTaskResumeAll+0x130>)
 800c150:	2201      	movs	r2, #1
 800c152:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	3b01      	subs	r3, #1
 800c158:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1f1      	bne.n	800c144 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c160:	4b12      	ldr	r3, [pc, #72]	@ (800c1ac <xTaskResumeAll+0x134>)
 800c162:	2200      	movs	r2, #0
 800c164:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c166:	4b10      	ldr	r3, [pc, #64]	@ (800c1a8 <xTaskResumeAll+0x130>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d009      	beq.n	800c182 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c16e:	2301      	movs	r3, #1
 800c170:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c172:	4b0f      	ldr	r3, [pc, #60]	@ (800c1b0 <xTaskResumeAll+0x138>)
 800c174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c178:	601a      	str	r2, [r3, #0]
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c182:	f001 f8fb 	bl	800d37c <vPortExitCritical>

	return xAlreadyYielded;
 800c186:	68bb      	ldr	r3, [r7, #8]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	20002c98 	.word	0x20002c98
 800c194:	20002c70 	.word	0x20002c70
 800c198:	20002c30 	.word	0x20002c30
 800c19c:	20002c78 	.word	0x20002c78
 800c1a0:	200027a0 	.word	0x200027a0
 800c1a4:	2000279c 	.word	0x2000279c
 800c1a8:	20002c84 	.word	0x20002c84
 800c1ac:	20002c80 	.word	0x20002c80
 800c1b0:	e000ed04 	.word	0xe000ed04

0800c1b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c1ba:	4b05      	ldr	r3, [pc, #20]	@ (800c1d0 <xTaskGetTickCount+0x1c>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c1c0:	687b      	ldr	r3, [r7, #4]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	20002c74 	.word	0x20002c74

0800c1d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1de:	4b4f      	ldr	r3, [pc, #316]	@ (800c31c <xTaskIncrementTick+0x148>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f040 8090 	bne.w	800c308 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c1e8:	4b4d      	ldr	r3, [pc, #308]	@ (800c320 <xTaskIncrementTick+0x14c>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c1f0:	4a4b      	ldr	r2, [pc, #300]	@ (800c320 <xTaskIncrementTick+0x14c>)
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d121      	bne.n	800c240 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1fc:	4b49      	ldr	r3, [pc, #292]	@ (800c324 <xTaskIncrementTick+0x150>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00b      	beq.n	800c21e <xTaskIncrementTick+0x4a>
	__asm volatile
 800c206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c20a:	f383 8811 	msr	BASEPRI, r3
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	603b      	str	r3, [r7, #0]
}
 800c218:	bf00      	nop
 800c21a:	bf00      	nop
 800c21c:	e7fd      	b.n	800c21a <xTaskIncrementTick+0x46>
 800c21e:	4b41      	ldr	r3, [pc, #260]	@ (800c324 <xTaskIncrementTick+0x150>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	60fb      	str	r3, [r7, #12]
 800c224:	4b40      	ldr	r3, [pc, #256]	@ (800c328 <xTaskIncrementTick+0x154>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a3e      	ldr	r2, [pc, #248]	@ (800c324 <xTaskIncrementTick+0x150>)
 800c22a:	6013      	str	r3, [r2, #0]
 800c22c:	4a3e      	ldr	r2, [pc, #248]	@ (800c328 <xTaskIncrementTick+0x154>)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6013      	str	r3, [r2, #0]
 800c232:	4b3e      	ldr	r3, [pc, #248]	@ (800c32c <xTaskIncrementTick+0x158>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	3301      	adds	r3, #1
 800c238:	4a3c      	ldr	r2, [pc, #240]	@ (800c32c <xTaskIncrementTick+0x158>)
 800c23a:	6013      	str	r3, [r2, #0]
 800c23c:	f000 fae2 	bl	800c804 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c240:	4b3b      	ldr	r3, [pc, #236]	@ (800c330 <xTaskIncrementTick+0x15c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	429a      	cmp	r2, r3
 800c248:	d349      	bcc.n	800c2de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c24a:	4b36      	ldr	r3, [pc, #216]	@ (800c324 <xTaskIncrementTick+0x150>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d104      	bne.n	800c25e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c254:	4b36      	ldr	r3, [pc, #216]	@ (800c330 <xTaskIncrementTick+0x15c>)
 800c256:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c25a:	601a      	str	r2, [r3, #0]
					break;
 800c25c:	e03f      	b.n	800c2de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c25e:	4b31      	ldr	r3, [pc, #196]	@ (800c324 <xTaskIncrementTick+0x150>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	429a      	cmp	r2, r3
 800c274:	d203      	bcs.n	800c27e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c276:	4a2e      	ldr	r2, [pc, #184]	@ (800c330 <xTaskIncrementTick+0x15c>)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c27c:	e02f      	b.n	800c2de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	3304      	adds	r3, #4
 800c282:	4618      	mov	r0, r3
 800c284:	f7fe fea4 	bl	800afd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d004      	beq.n	800c29a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	3318      	adds	r3, #24
 800c294:	4618      	mov	r0, r3
 800c296:	f7fe fe9b 	bl	800afd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c29e:	4b25      	ldr	r3, [pc, #148]	@ (800c334 <xTaskIncrementTick+0x160>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d903      	bls.n	800c2ae <xTaskIncrementTick+0xda>
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2aa:	4a22      	ldr	r2, [pc, #136]	@ (800c334 <xTaskIncrementTick+0x160>)
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4413      	add	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4a1f      	ldr	r2, [pc, #124]	@ (800c338 <xTaskIncrementTick+0x164>)
 800c2bc:	441a      	add	r2, r3
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	f7fe fe26 	bl	800af16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ce:	4b1b      	ldr	r3, [pc, #108]	@ (800c33c <xTaskIncrementTick+0x168>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d3b8      	bcc.n	800c24a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2dc:	e7b5      	b.n	800c24a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c2de:	4b17      	ldr	r3, [pc, #92]	@ (800c33c <xTaskIncrementTick+0x168>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2e4:	4914      	ldr	r1, [pc, #80]	@ (800c338 <xTaskIncrementTick+0x164>)
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4413      	add	r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	440b      	add	r3, r1
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d901      	bls.n	800c2fa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c2fa:	4b11      	ldr	r3, [pc, #68]	@ (800c340 <xTaskIncrementTick+0x16c>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d007      	beq.n	800c312 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c302:	2301      	movs	r3, #1
 800c304:	617b      	str	r3, [r7, #20]
 800c306:	e004      	b.n	800c312 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c308:	4b0e      	ldr	r3, [pc, #56]	@ (800c344 <xTaskIncrementTick+0x170>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3301      	adds	r3, #1
 800c30e:	4a0d      	ldr	r2, [pc, #52]	@ (800c344 <xTaskIncrementTick+0x170>)
 800c310:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c312:	697b      	ldr	r3, [r7, #20]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	20002c98 	.word	0x20002c98
 800c320:	20002c74 	.word	0x20002c74
 800c324:	20002c28 	.word	0x20002c28
 800c328:	20002c2c 	.word	0x20002c2c
 800c32c:	20002c88 	.word	0x20002c88
 800c330:	20002c90 	.word	0x20002c90
 800c334:	20002c78 	.word	0x20002c78
 800c338:	200027a0 	.word	0x200027a0
 800c33c:	2000279c 	.word	0x2000279c
 800c340:	20002c84 	.word	0x20002c84
 800c344:	20002c80 	.word	0x20002c80

0800c348 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c34e:	4b2b      	ldr	r3, [pc, #172]	@ (800c3fc <vTaskSwitchContext+0xb4>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d003      	beq.n	800c35e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c356:	4b2a      	ldr	r3, [pc, #168]	@ (800c400 <vTaskSwitchContext+0xb8>)
 800c358:	2201      	movs	r2, #1
 800c35a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c35c:	e047      	b.n	800c3ee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c35e:	4b28      	ldr	r3, [pc, #160]	@ (800c400 <vTaskSwitchContext+0xb8>)
 800c360:	2200      	movs	r2, #0
 800c362:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c364:	4b27      	ldr	r3, [pc, #156]	@ (800c404 <vTaskSwitchContext+0xbc>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	60fb      	str	r3, [r7, #12]
 800c36a:	e011      	b.n	800c390 <vTaskSwitchContext+0x48>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10b      	bne.n	800c38a <vTaskSwitchContext+0x42>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	607b      	str	r3, [r7, #4]
}
 800c384:	bf00      	nop
 800c386:	bf00      	nop
 800c388:	e7fd      	b.n	800c386 <vTaskSwitchContext+0x3e>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	60fb      	str	r3, [r7, #12]
 800c390:	491d      	ldr	r1, [pc, #116]	@ (800c408 <vTaskSwitchContext+0xc0>)
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	4613      	mov	r3, r2
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	4413      	add	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	440b      	add	r3, r1
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d0e3      	beq.n	800c36c <vTaskSwitchContext+0x24>
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4413      	add	r3, r2
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	4a16      	ldr	r2, [pc, #88]	@ (800c408 <vTaskSwitchContext+0xc0>)
 800c3b0:	4413      	add	r3, r2
 800c3b2:	60bb      	str	r3, [r7, #8]
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	685a      	ldr	r2, [r3, #4]
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	605a      	str	r2, [r3, #4]
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	685a      	ldr	r2, [r3, #4]
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	3308      	adds	r3, #8
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d104      	bne.n	800c3d4 <vTaskSwitchContext+0x8c>
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	685a      	ldr	r2, [r3, #4]
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	605a      	str	r2, [r3, #4]
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	4a0c      	ldr	r2, [pc, #48]	@ (800c40c <vTaskSwitchContext+0xc4>)
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	4a09      	ldr	r2, [pc, #36]	@ (800c404 <vTaskSwitchContext+0xbc>)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3e4:	4b09      	ldr	r3, [pc, #36]	@ (800c40c <vTaskSwitchContext+0xc4>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3354      	adds	r3, #84	@ 0x54
 800c3ea:	4a09      	ldr	r2, [pc, #36]	@ (800c410 <vTaskSwitchContext+0xc8>)
 800c3ec:	6013      	str	r3, [r2, #0]
}
 800c3ee:	bf00      	nop
 800c3f0:	3714      	adds	r7, #20
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	20002c98 	.word	0x20002c98
 800c400:	20002c84 	.word	0x20002c84
 800c404:	20002c78 	.word	0x20002c78
 800c408:	200027a0 	.word	0x200027a0
 800c40c:	2000279c 	.word	0x2000279c
 800c410:	20000194 	.word	0x20000194

0800c414 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10b      	bne.n	800c43c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	60fb      	str	r3, [r7, #12]
}
 800c436:	bf00      	nop
 800c438:	bf00      	nop
 800c43a:	e7fd      	b.n	800c438 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c43c:	4b07      	ldr	r3, [pc, #28]	@ (800c45c <vTaskPlaceOnEventList+0x48>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3318      	adds	r3, #24
 800c442:	4619      	mov	r1, r3
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f7fe fd8a 	bl	800af5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c44a:	2101      	movs	r1, #1
 800c44c:	6838      	ldr	r0, [r7, #0]
 800c44e:	f000 fa87 	bl	800c960 <prvAddCurrentTaskToDelayedList>
}
 800c452:	bf00      	nop
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	2000279c 	.word	0x2000279c

0800c460 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10b      	bne.n	800c48a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	617b      	str	r3, [r7, #20]
}
 800c484:	bf00      	nop
 800c486:	bf00      	nop
 800c488:	e7fd      	b.n	800c486 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c48a:	4b0a      	ldr	r3, [pc, #40]	@ (800c4b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	3318      	adds	r3, #24
 800c490:	4619      	mov	r1, r3
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f7fe fd3f 	bl	800af16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c49e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c4a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c4a4:	6879      	ldr	r1, [r7, #4]
 800c4a6:	68b8      	ldr	r0, [r7, #8]
 800c4a8:	f000 fa5a 	bl	800c960 <prvAddCurrentTaskToDelayedList>
	}
 800c4ac:	bf00      	nop
 800c4ae:	3718      	adds	r7, #24
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	2000279c 	.word	0x2000279c

0800c4b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10b      	bne.n	800c4e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	60fb      	str	r3, [r7, #12]
}
 800c4e0:	bf00      	nop
 800c4e2:	bf00      	nop
 800c4e4:	e7fd      	b.n	800c4e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	3318      	adds	r3, #24
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fd70 	bl	800afd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4f0:	4b1d      	ldr	r3, [pc, #116]	@ (800c568 <xTaskRemoveFromEventList+0xb0>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d11d      	bne.n	800c534 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	3304      	adds	r3, #4
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7fe fd67 	bl	800afd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c506:	4b19      	ldr	r3, [pc, #100]	@ (800c56c <xTaskRemoveFromEventList+0xb4>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d903      	bls.n	800c516 <xTaskRemoveFromEventList+0x5e>
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c512:	4a16      	ldr	r2, [pc, #88]	@ (800c56c <xTaskRemoveFromEventList+0xb4>)
 800c514:	6013      	str	r3, [r2, #0]
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c51a:	4613      	mov	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4a13      	ldr	r2, [pc, #76]	@ (800c570 <xTaskRemoveFromEventList+0xb8>)
 800c524:	441a      	add	r2, r3
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	3304      	adds	r3, #4
 800c52a:	4619      	mov	r1, r3
 800c52c:	4610      	mov	r0, r2
 800c52e:	f7fe fcf2 	bl	800af16 <vListInsertEnd>
 800c532:	e005      	b.n	800c540 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	3318      	adds	r3, #24
 800c538:	4619      	mov	r1, r3
 800c53a:	480e      	ldr	r0, [pc, #56]	@ (800c574 <xTaskRemoveFromEventList+0xbc>)
 800c53c:	f7fe fceb 	bl	800af16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c544:	4b0c      	ldr	r3, [pc, #48]	@ (800c578 <xTaskRemoveFromEventList+0xc0>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d905      	bls.n	800c55a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c54e:	2301      	movs	r3, #1
 800c550:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c552:	4b0a      	ldr	r3, [pc, #40]	@ (800c57c <xTaskRemoveFromEventList+0xc4>)
 800c554:	2201      	movs	r2, #1
 800c556:	601a      	str	r2, [r3, #0]
 800c558:	e001      	b.n	800c55e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c55a:	2300      	movs	r3, #0
 800c55c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c55e:	697b      	ldr	r3, [r7, #20]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3718      	adds	r7, #24
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	20002c98 	.word	0x20002c98
 800c56c:	20002c78 	.word	0x20002c78
 800c570:	200027a0 	.word	0x200027a0
 800c574:	20002c30 	.word	0x20002c30
 800c578:	2000279c 	.word	0x2000279c
 800c57c:	20002c84 	.word	0x20002c84

0800c580 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c588:	4b06      	ldr	r3, [pc, #24]	@ (800c5a4 <vTaskInternalSetTimeOutState+0x24>)
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c590:	4b05      	ldr	r3, [pc, #20]	@ (800c5a8 <vTaskInternalSetTimeOutState+0x28>)
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	605a      	str	r2, [r3, #4]
}
 800c598:	bf00      	nop
 800c59a:	370c      	adds	r7, #12
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr
 800c5a4:	20002c88 	.word	0x20002c88
 800c5a8:	20002c74 	.word	0x20002c74

0800c5ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b088      	sub	sp, #32
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10b      	bne.n	800c5d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c0:	f383 8811 	msr	BASEPRI, r3
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	613b      	str	r3, [r7, #16]
}
 800c5ce:	bf00      	nop
 800c5d0:	bf00      	nop
 800c5d2:	e7fd      	b.n	800c5d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10b      	bne.n	800c5f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	60fb      	str	r3, [r7, #12]
}
 800c5ec:	bf00      	nop
 800c5ee:	bf00      	nop
 800c5f0:	e7fd      	b.n	800c5ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c5f2:	f000 fe91 	bl	800d318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c5f6:	4b1d      	ldr	r3, [pc, #116]	@ (800c66c <xTaskCheckForTimeOut+0xc0>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	69ba      	ldr	r2, [r7, #24]
 800c602:	1ad3      	subs	r3, r2, r3
 800c604:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c60e:	d102      	bne.n	800c616 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c610:	2300      	movs	r3, #0
 800c612:	61fb      	str	r3, [r7, #28]
 800c614:	e023      	b.n	800c65e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	4b15      	ldr	r3, [pc, #84]	@ (800c670 <xTaskCheckForTimeOut+0xc4>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d007      	beq.n	800c632 <xTaskCheckForTimeOut+0x86>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	69ba      	ldr	r2, [r7, #24]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d302      	bcc.n	800c632 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c62c:	2301      	movs	r3, #1
 800c62e:	61fb      	str	r3, [r7, #28]
 800c630:	e015      	b.n	800c65e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d20b      	bcs.n	800c654 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	1ad2      	subs	r2, r2, r3
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff ff99 	bl	800c580 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c64e:	2300      	movs	r3, #0
 800c650:	61fb      	str	r3, [r7, #28]
 800c652:	e004      	b.n	800c65e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	2200      	movs	r2, #0
 800c658:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c65a:	2301      	movs	r3, #1
 800c65c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c65e:	f000 fe8d 	bl	800d37c <vPortExitCritical>

	return xReturn;
 800c662:	69fb      	ldr	r3, [r7, #28]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3720      	adds	r7, #32
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20002c74 	.word	0x20002c74
 800c670:	20002c88 	.word	0x20002c88

0800c674 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c678:	4b03      	ldr	r3, [pc, #12]	@ (800c688 <vTaskMissedYield+0x14>)
 800c67a:	2201      	movs	r2, #1
 800c67c:	601a      	str	r2, [r3, #0]
}
 800c67e:	bf00      	nop
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	20002c84 	.word	0x20002c84

0800c68c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c694:	f000 f852 	bl	800c73c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c698:	4b06      	ldr	r3, [pc, #24]	@ (800c6b4 <prvIdleTask+0x28>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d9f9      	bls.n	800c694 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6a0:	4b05      	ldr	r3, [pc, #20]	@ (800c6b8 <prvIdleTask+0x2c>)
 800c6a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6a6:	601a      	str	r2, [r3, #0]
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c6b0:	e7f0      	b.n	800c694 <prvIdleTask+0x8>
 800c6b2:	bf00      	nop
 800c6b4:	200027a0 	.word	0x200027a0
 800c6b8:	e000ed04 	.word	0xe000ed04

0800c6bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	607b      	str	r3, [r7, #4]
 800c6c6:	e00c      	b.n	800c6e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	4413      	add	r3, r2
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4a12      	ldr	r2, [pc, #72]	@ (800c71c <prvInitialiseTaskLists+0x60>)
 800c6d4:	4413      	add	r3, r2
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fe fbf0 	bl	800aebc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	607b      	str	r3, [r7, #4]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2b37      	cmp	r3, #55	@ 0x37
 800c6e6:	d9ef      	bls.n	800c6c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6e8:	480d      	ldr	r0, [pc, #52]	@ (800c720 <prvInitialiseTaskLists+0x64>)
 800c6ea:	f7fe fbe7 	bl	800aebc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c6ee:	480d      	ldr	r0, [pc, #52]	@ (800c724 <prvInitialiseTaskLists+0x68>)
 800c6f0:	f7fe fbe4 	bl	800aebc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c6f4:	480c      	ldr	r0, [pc, #48]	@ (800c728 <prvInitialiseTaskLists+0x6c>)
 800c6f6:	f7fe fbe1 	bl	800aebc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c6fa:	480c      	ldr	r0, [pc, #48]	@ (800c72c <prvInitialiseTaskLists+0x70>)
 800c6fc:	f7fe fbde 	bl	800aebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c700:	480b      	ldr	r0, [pc, #44]	@ (800c730 <prvInitialiseTaskLists+0x74>)
 800c702:	f7fe fbdb 	bl	800aebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c706:	4b0b      	ldr	r3, [pc, #44]	@ (800c734 <prvInitialiseTaskLists+0x78>)
 800c708:	4a05      	ldr	r2, [pc, #20]	@ (800c720 <prvInitialiseTaskLists+0x64>)
 800c70a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c70c:	4b0a      	ldr	r3, [pc, #40]	@ (800c738 <prvInitialiseTaskLists+0x7c>)
 800c70e:	4a05      	ldr	r2, [pc, #20]	@ (800c724 <prvInitialiseTaskLists+0x68>)
 800c710:	601a      	str	r2, [r3, #0]
}
 800c712:	bf00      	nop
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	200027a0 	.word	0x200027a0
 800c720:	20002c00 	.word	0x20002c00
 800c724:	20002c14 	.word	0x20002c14
 800c728:	20002c30 	.word	0x20002c30
 800c72c:	20002c44 	.word	0x20002c44
 800c730:	20002c5c 	.word	0x20002c5c
 800c734:	20002c28 	.word	0x20002c28
 800c738:	20002c2c 	.word	0x20002c2c

0800c73c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c742:	e019      	b.n	800c778 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c744:	f000 fde8 	bl	800d318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c748:	4b10      	ldr	r3, [pc, #64]	@ (800c78c <prvCheckTasksWaitingTermination+0x50>)
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	3304      	adds	r3, #4
 800c754:	4618      	mov	r0, r3
 800c756:	f7fe fc3b 	bl	800afd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c75a:	4b0d      	ldr	r3, [pc, #52]	@ (800c790 <prvCheckTasksWaitingTermination+0x54>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	3b01      	subs	r3, #1
 800c760:	4a0b      	ldr	r2, [pc, #44]	@ (800c790 <prvCheckTasksWaitingTermination+0x54>)
 800c762:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c764:	4b0b      	ldr	r3, [pc, #44]	@ (800c794 <prvCheckTasksWaitingTermination+0x58>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	3b01      	subs	r3, #1
 800c76a:	4a0a      	ldr	r2, [pc, #40]	@ (800c794 <prvCheckTasksWaitingTermination+0x58>)
 800c76c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c76e:	f000 fe05 	bl	800d37c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f810 	bl	800c798 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c778:	4b06      	ldr	r3, [pc, #24]	@ (800c794 <prvCheckTasksWaitingTermination+0x58>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1e1      	bne.n	800c744 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c780:	bf00      	nop
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	20002c44 	.word	0x20002c44
 800c790:	20002c70 	.word	0x20002c70
 800c794:	20002c58 	.word	0x20002c58

0800c798 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3354      	adds	r3, #84	@ 0x54
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f002 fb31 	bl	800ee0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d108      	bne.n	800c7c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f000 ff9d 	bl	800d6f8 <vPortFree>
				vPortFree( pxTCB );
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 ff9a 	bl	800d6f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7c4:	e019      	b.n	800c7fa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d103      	bne.n	800c7d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 ff91 	bl	800d6f8 <vPortFree>
	}
 800c7d6:	e010      	b.n	800c7fa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d00b      	beq.n	800c7fa <prvDeleteTCB+0x62>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	60fb      	str	r3, [r7, #12]
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop
 800c7f8:	e7fd      	b.n	800c7f6 <prvDeleteTCB+0x5e>
	}
 800c7fa:	bf00      	nop
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
	...

0800c804 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c80a:	4b0c      	ldr	r3, [pc, #48]	@ (800c83c <prvResetNextTaskUnblockTime+0x38>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d104      	bne.n	800c81e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c814:	4b0a      	ldr	r3, [pc, #40]	@ (800c840 <prvResetNextTaskUnblockTime+0x3c>)
 800c816:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c81a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c81c:	e008      	b.n	800c830 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c81e:	4b07      	ldr	r3, [pc, #28]	@ (800c83c <prvResetNextTaskUnblockTime+0x38>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	4a04      	ldr	r2, [pc, #16]	@ (800c840 <prvResetNextTaskUnblockTime+0x3c>)
 800c82e:	6013      	str	r3, [r2, #0]
}
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	20002c28 	.word	0x20002c28
 800c840:	20002c90 	.word	0x20002c90

0800c844 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c84a:	4b0b      	ldr	r3, [pc, #44]	@ (800c878 <xTaskGetSchedulerState+0x34>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d102      	bne.n	800c858 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c852:	2301      	movs	r3, #1
 800c854:	607b      	str	r3, [r7, #4]
 800c856:	e008      	b.n	800c86a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c858:	4b08      	ldr	r3, [pc, #32]	@ (800c87c <xTaskGetSchedulerState+0x38>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d102      	bne.n	800c866 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c860:	2302      	movs	r3, #2
 800c862:	607b      	str	r3, [r7, #4]
 800c864:	e001      	b.n	800c86a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c866:	2300      	movs	r3, #0
 800c868:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c86a:	687b      	ldr	r3, [r7, #4]
	}
 800c86c:	4618      	mov	r0, r3
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	20002c7c 	.word	0x20002c7c
 800c87c:	20002c98 	.word	0x20002c98

0800c880 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c88c:	2300      	movs	r3, #0
 800c88e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d058      	beq.n	800c948 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c896:	4b2f      	ldr	r3, [pc, #188]	@ (800c954 <xTaskPriorityDisinherit+0xd4>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	693a      	ldr	r2, [r7, #16]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d00b      	beq.n	800c8b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a4:	f383 8811 	msr	BASEPRI, r3
 800c8a8:	f3bf 8f6f 	isb	sy
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	60fb      	str	r3, [r7, #12]
}
 800c8b2:	bf00      	nop
 800c8b4:	bf00      	nop
 800c8b6:	e7fd      	b.n	800c8b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10b      	bne.n	800c8d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	60bb      	str	r3, [r7, #8]
}
 800c8d2:	bf00      	nop
 800c8d4:	bf00      	nop
 800c8d6:	e7fd      	b.n	800c8d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8dc:	1e5a      	subs	r2, r3, #1
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d02c      	beq.n	800c948 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d128      	bne.n	800c948 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fe fb68 	bl	800afd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c90c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c918:	4b0f      	ldr	r3, [pc, #60]	@ (800c958 <xTaskPriorityDisinherit+0xd8>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d903      	bls.n	800c928 <xTaskPriorityDisinherit+0xa8>
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c924:	4a0c      	ldr	r2, [pc, #48]	@ (800c958 <xTaskPriorityDisinherit+0xd8>)
 800c926:	6013      	str	r3, [r2, #0]
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c92c:	4613      	mov	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4413      	add	r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	4a09      	ldr	r2, [pc, #36]	@ (800c95c <xTaskPriorityDisinherit+0xdc>)
 800c936:	441a      	add	r2, r3
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	3304      	adds	r3, #4
 800c93c:	4619      	mov	r1, r3
 800c93e:	4610      	mov	r0, r2
 800c940:	f7fe fae9 	bl	800af16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c944:	2301      	movs	r3, #1
 800c946:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c948:	697b      	ldr	r3, [r7, #20]
	}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3718      	adds	r7, #24
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	2000279c 	.word	0x2000279c
 800c958:	20002c78 	.word	0x20002c78
 800c95c:	200027a0 	.word	0x200027a0

0800c960 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c96a:	4b21      	ldr	r3, [pc, #132]	@ (800c9f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c970:	4b20      	ldr	r3, [pc, #128]	@ (800c9f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3304      	adds	r3, #4
 800c976:	4618      	mov	r0, r3
 800c978:	f7fe fb2a 	bl	800afd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c982:	d10a      	bne.n	800c99a <prvAddCurrentTaskToDelayedList+0x3a>
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d007      	beq.n	800c99a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c98a:	4b1a      	ldr	r3, [pc, #104]	@ (800c9f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	3304      	adds	r3, #4
 800c990:	4619      	mov	r1, r3
 800c992:	4819      	ldr	r0, [pc, #100]	@ (800c9f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c994:	f7fe fabf 	bl	800af16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c998:	e026      	b.n	800c9e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4413      	add	r3, r2
 800c9a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c9a2:	4b14      	ldr	r3, [pc, #80]	@ (800c9f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d209      	bcs.n	800c9c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9b2:	4b12      	ldr	r3, [pc, #72]	@ (800c9fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c9f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	3304      	adds	r3, #4
 800c9bc:	4619      	mov	r1, r3
 800c9be:	4610      	mov	r0, r2
 800c9c0:	f7fe facd 	bl	800af5e <vListInsert>
}
 800c9c4:	e010      	b.n	800c9e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9c6:	4b0e      	ldr	r3, [pc, #56]	@ (800ca00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	4b0a      	ldr	r3, [pc, #40]	@ (800c9f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	3304      	adds	r3, #4
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	4610      	mov	r0, r2
 800c9d4:	f7fe fac3 	bl	800af5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c9d8:	4b0a      	ldr	r3, [pc, #40]	@ (800ca04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d202      	bcs.n	800c9e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c9e2:	4a08      	ldr	r2, [pc, #32]	@ (800ca04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	6013      	str	r3, [r2, #0]
}
 800c9e8:	bf00      	nop
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	20002c74 	.word	0x20002c74
 800c9f4:	2000279c 	.word	0x2000279c
 800c9f8:	20002c5c 	.word	0x20002c5c
 800c9fc:	20002c2c 	.word	0x20002c2c
 800ca00:	20002c28 	.word	0x20002c28
 800ca04:	20002c90 	.word	0x20002c90

0800ca08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b08a      	sub	sp, #40	@ 0x28
 800ca0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ca12:	f000 fb13 	bl	800d03c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ca16:	4b1d      	ldr	r3, [pc, #116]	@ (800ca8c <xTimerCreateTimerTask+0x84>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d021      	beq.n	800ca62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ca22:	2300      	movs	r3, #0
 800ca24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ca26:	1d3a      	adds	r2, r7, #4
 800ca28:	f107 0108 	add.w	r1, r7, #8
 800ca2c:	f107 030c 	add.w	r3, r7, #12
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7fe fa29 	bl	800ae88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ca36:	6879      	ldr	r1, [r7, #4]
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	9202      	str	r2, [sp, #8]
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	2302      	movs	r3, #2
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	2300      	movs	r3, #0
 800ca46:	460a      	mov	r2, r1
 800ca48:	4911      	ldr	r1, [pc, #68]	@ (800ca90 <xTimerCreateTimerTask+0x88>)
 800ca4a:	4812      	ldr	r0, [pc, #72]	@ (800ca94 <xTimerCreateTimerTask+0x8c>)
 800ca4c:	f7ff f8a2 	bl	800bb94 <xTaskCreateStatic>
 800ca50:	4603      	mov	r3, r0
 800ca52:	4a11      	ldr	r2, [pc, #68]	@ (800ca98 <xTimerCreateTimerTask+0x90>)
 800ca54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca56:	4b10      	ldr	r3, [pc, #64]	@ (800ca98 <xTimerCreateTimerTask+0x90>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d001      	beq.n	800ca62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10b      	bne.n	800ca80 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	613b      	str	r3, [r7, #16]
}
 800ca7a:	bf00      	nop
 800ca7c:	bf00      	nop
 800ca7e:	e7fd      	b.n	800ca7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca80:	697b      	ldr	r3, [r7, #20]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3718      	adds	r7, #24
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20002ccc 	.word	0x20002ccc
 800ca90:	080112e4 	.word	0x080112e4
 800ca94:	0800cbd5 	.word	0x0800cbd5
 800ca98:	20002cd0 	.word	0x20002cd0

0800ca9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b08a      	sub	sp, #40	@ 0x28
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
 800caa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800caaa:	2300      	movs	r3, #0
 800caac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d10b      	bne.n	800cacc <xTimerGenericCommand+0x30>
	__asm volatile
 800cab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	623b      	str	r3, [r7, #32]
}
 800cac6:	bf00      	nop
 800cac8:	bf00      	nop
 800caca:	e7fd      	b.n	800cac8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cacc:	4b19      	ldr	r3, [pc, #100]	@ (800cb34 <xTimerGenericCommand+0x98>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d02a      	beq.n	800cb2a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	2b05      	cmp	r3, #5
 800cae4:	dc18      	bgt.n	800cb18 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cae6:	f7ff fead 	bl	800c844 <xTaskGetSchedulerState>
 800caea:	4603      	mov	r3, r0
 800caec:	2b02      	cmp	r3, #2
 800caee:	d109      	bne.n	800cb04 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800caf0:	4b10      	ldr	r3, [pc, #64]	@ (800cb34 <xTimerGenericCommand+0x98>)
 800caf2:	6818      	ldr	r0, [r3, #0]
 800caf4:	f107 0110 	add.w	r1, r7, #16
 800caf8:	2300      	movs	r3, #0
 800cafa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cafc:	f7fe fbd8 	bl	800b2b0 <xQueueGenericSend>
 800cb00:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb02:	e012      	b.n	800cb2a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cb04:	4b0b      	ldr	r3, [pc, #44]	@ (800cb34 <xTimerGenericCommand+0x98>)
 800cb06:	6818      	ldr	r0, [r3, #0]
 800cb08:	f107 0110 	add.w	r1, r7, #16
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f7fe fbce 	bl	800b2b0 <xQueueGenericSend>
 800cb14:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb16:	e008      	b.n	800cb2a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb18:	4b06      	ldr	r3, [pc, #24]	@ (800cb34 <xTimerGenericCommand+0x98>)
 800cb1a:	6818      	ldr	r0, [r3, #0]
 800cb1c:	f107 0110 	add.w	r1, r7, #16
 800cb20:	2300      	movs	r3, #0
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	f7fe fcc6 	bl	800b4b4 <xQueueGenericSendFromISR>
 800cb28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3728      	adds	r7, #40	@ 0x28
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	20002ccc 	.word	0x20002ccc

0800cb38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b088      	sub	sp, #32
 800cb3c:	af02      	add	r7, sp, #8
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb42:	4b23      	ldr	r3, [pc, #140]	@ (800cbd0 <prvProcessExpiredTimer+0x98>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	3304      	adds	r3, #4
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fe fa3d 	bl	800afd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb5c:	f003 0304 	and.w	r3, r3, #4
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d023      	beq.n	800cbac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	699a      	ldr	r2, [r3, #24]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	18d1      	adds	r1, r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	683a      	ldr	r2, [r7, #0]
 800cb70:	6978      	ldr	r0, [r7, #20]
 800cb72:	f000 f8d5 	bl	800cd20 <prvInsertTimerInActiveList>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d020      	beq.n	800cbbe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	2300      	movs	r3, #0
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	2100      	movs	r1, #0
 800cb86:	6978      	ldr	r0, [r7, #20]
 800cb88:	f7ff ff88 	bl	800ca9c <xTimerGenericCommand>
 800cb8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d114      	bne.n	800cbbe <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	60fb      	str	r3, [r7, #12]
}
 800cba6:	bf00      	nop
 800cba8:	bf00      	nop
 800cbaa:	e7fd      	b.n	800cba8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbb2:	f023 0301 	bic.w	r3, r3, #1
 800cbb6:	b2da      	uxtb	r2, r3
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	6a1b      	ldr	r3, [r3, #32]
 800cbc2:	6978      	ldr	r0, [r7, #20]
 800cbc4:	4798      	blx	r3
}
 800cbc6:	bf00      	nop
 800cbc8:	3718      	adds	r7, #24
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	20002cc4 	.word	0x20002cc4

0800cbd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbdc:	f107 0308 	add.w	r3, r7, #8
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f000 f859 	bl	800cc98 <prvGetNextExpireTime>
 800cbe6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	4619      	mov	r1, r3
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f000 f805 	bl	800cbfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cbf2:	f000 f8d7 	bl	800cda4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbf6:	bf00      	nop
 800cbf8:	e7f0      	b.n	800cbdc <prvTimerTask+0x8>
	...

0800cbfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cc06:	f7ff fa29 	bl	800c05c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc0a:	f107 0308 	add.w	r3, r7, #8
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f000 f866 	bl	800cce0 <prvSampleTimeNow>
 800cc14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d130      	bne.n	800cc7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10a      	bne.n	800cc38 <prvProcessTimerOrBlockTask+0x3c>
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d806      	bhi.n	800cc38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cc2a:	f7ff fa25 	bl	800c078 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cc2e:	68f9      	ldr	r1, [r7, #12]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7ff ff81 	bl	800cb38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cc36:	e024      	b.n	800cc82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d008      	beq.n	800cc50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cc3e:	4b13      	ldr	r3, [pc, #76]	@ (800cc8c <prvProcessTimerOrBlockTask+0x90>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d101      	bne.n	800cc4c <prvProcessTimerOrBlockTask+0x50>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e000      	b.n	800cc4e <prvProcessTimerOrBlockTask+0x52>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cc50:	4b0f      	ldr	r3, [pc, #60]	@ (800cc90 <prvProcessTimerOrBlockTask+0x94>)
 800cc52:	6818      	ldr	r0, [r3, #0]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	f7fe ff65 	bl	800bb2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc62:	f7ff fa09 	bl	800c078 <xTaskResumeAll>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d10a      	bne.n	800cc82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc6c:	4b09      	ldr	r3, [pc, #36]	@ (800cc94 <prvProcessTimerOrBlockTask+0x98>)
 800cc6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	f3bf 8f6f 	isb	sy
}
 800cc7c:	e001      	b.n	800cc82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc7e:	f7ff f9fb 	bl	800c078 <xTaskResumeAll>
}
 800cc82:	bf00      	nop
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	20002cc8 	.word	0x20002cc8
 800cc90:	20002ccc 	.word	0x20002ccc
 800cc94:	e000ed04 	.word	0xe000ed04

0800cc98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cca0:	4b0e      	ldr	r3, [pc, #56]	@ (800ccdc <prvGetNextExpireTime+0x44>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d101      	bne.n	800ccae <prvGetNextExpireTime+0x16>
 800ccaa:	2201      	movs	r2, #1
 800ccac:	e000      	b.n	800ccb0 <prvGetNextExpireTime+0x18>
 800ccae:	2200      	movs	r2, #0
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d105      	bne.n	800ccc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ccbc:	4b07      	ldr	r3, [pc, #28]	@ (800ccdc <prvGetNextExpireTime+0x44>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	60fb      	str	r3, [r7, #12]
 800ccc6:	e001      	b.n	800cccc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cccc:	68fb      	ldr	r3, [r7, #12]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3714      	adds	r7, #20
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	20002cc4 	.word	0x20002cc4

0800cce0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cce8:	f7ff fa64 	bl	800c1b4 <xTaskGetTickCount>
 800ccec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ccee:	4b0b      	ldr	r3, [pc, #44]	@ (800cd1c <prvSampleTimeNow+0x3c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d205      	bcs.n	800cd04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ccf8:	f000 f93a 	bl	800cf70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	601a      	str	r2, [r3, #0]
 800cd02:	e002      	b.n	800cd0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cd0a:	4a04      	ldr	r2, [pc, #16]	@ (800cd1c <prvSampleTimeNow+0x3c>)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cd10:	68fb      	ldr	r3, [r7, #12]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	20002cd4 	.word	0x20002cd4

0800cd20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
 800cd2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cd3e:	68ba      	ldr	r2, [r7, #8]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d812      	bhi.n	800cd6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	1ad2      	subs	r2, r2, r3
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	699b      	ldr	r3, [r3, #24]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d302      	bcc.n	800cd5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd54:	2301      	movs	r3, #1
 800cd56:	617b      	str	r3, [r7, #20]
 800cd58:	e01b      	b.n	800cd92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd5a:	4b10      	ldr	r3, [pc, #64]	@ (800cd9c <prvInsertTimerInActiveList+0x7c>)
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	3304      	adds	r3, #4
 800cd62:	4619      	mov	r1, r3
 800cd64:	4610      	mov	r0, r2
 800cd66:	f7fe f8fa 	bl	800af5e <vListInsert>
 800cd6a:	e012      	b.n	800cd92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d206      	bcs.n	800cd82 <prvInsertTimerInActiveList+0x62>
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d302      	bcc.n	800cd82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	617b      	str	r3, [r7, #20]
 800cd80:	e007      	b.n	800cd92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd82:	4b07      	ldr	r3, [pc, #28]	@ (800cda0 <prvInsertTimerInActiveList+0x80>)
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	3304      	adds	r3, #4
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	4610      	mov	r0, r2
 800cd8e:	f7fe f8e6 	bl	800af5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd92:	697b      	ldr	r3, [r7, #20]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3718      	adds	r7, #24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	20002cc8 	.word	0x20002cc8
 800cda0:	20002cc4 	.word	0x20002cc4

0800cda4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b08e      	sub	sp, #56	@ 0x38
 800cda8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cdaa:	e0ce      	b.n	800cf4a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	da19      	bge.n	800cde6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cdb2:	1d3b      	adds	r3, r7, #4
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cdb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d10b      	bne.n	800cdd6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc2:	f383 8811 	msr	BASEPRI, r3
 800cdc6:	f3bf 8f6f 	isb	sy
 800cdca:	f3bf 8f4f 	dsb	sy
 800cdce:	61fb      	str	r3, [r7, #28]
}
 800cdd0:	bf00      	nop
 800cdd2:	bf00      	nop
 800cdd4:	e7fd      	b.n	800cdd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cdd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cddc:	6850      	ldr	r0, [r2, #4]
 800cdde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cde0:	6892      	ldr	r2, [r2, #8]
 800cde2:	4611      	mov	r1, r2
 800cde4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f2c0 80ae 	blt.w	800cf4a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d004      	beq.n	800ce04 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fe f8e6 	bl	800afd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce04:	463b      	mov	r3, r7
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7ff ff6a 	bl	800cce0 <prvSampleTimeNow>
 800ce0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b09      	cmp	r3, #9
 800ce12:	f200 8097 	bhi.w	800cf44 <prvProcessReceivedCommands+0x1a0>
 800ce16:	a201      	add	r2, pc, #4	@ (adr r2, 800ce1c <prvProcessReceivedCommands+0x78>)
 800ce18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce1c:	0800ce45 	.word	0x0800ce45
 800ce20:	0800ce45 	.word	0x0800ce45
 800ce24:	0800ce45 	.word	0x0800ce45
 800ce28:	0800cebb 	.word	0x0800cebb
 800ce2c:	0800cecf 	.word	0x0800cecf
 800ce30:	0800cf1b 	.word	0x0800cf1b
 800ce34:	0800ce45 	.word	0x0800ce45
 800ce38:	0800ce45 	.word	0x0800ce45
 800ce3c:	0800cebb 	.word	0x0800cebb
 800ce40:	0800cecf 	.word	0x0800cecf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce4a:	f043 0301 	orr.w	r3, r3, #1
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce56:	68ba      	ldr	r2, [r7, #8]
 800ce58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	18d1      	adds	r1, r2, r3
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce64:	f7ff ff5c 	bl	800cd20 <prvInsertTimerInActiveList>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d06c      	beq.n	800cf48 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce70:	6a1b      	ldr	r3, [r3, #32]
 800ce72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce7c:	f003 0304 	and.w	r3, r3, #4
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d061      	beq.n	800cf48 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce84:	68ba      	ldr	r2, [r7, #8]
 800ce86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	441a      	add	r2, r3
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	2300      	movs	r3, #0
 800ce92:	2100      	movs	r1, #0
 800ce94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce96:	f7ff fe01 	bl	800ca9c <xTimerGenericCommand>
 800ce9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d152      	bne.n	800cf48 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea6:	f383 8811 	msr	BASEPRI, r3
 800ceaa:	f3bf 8f6f 	isb	sy
 800ceae:	f3bf 8f4f 	dsb	sy
 800ceb2:	61bb      	str	r3, [r7, #24]
}
 800ceb4:	bf00      	nop
 800ceb6:	bf00      	nop
 800ceb8:	e7fd      	b.n	800ceb6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ceba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cec0:	f023 0301 	bic.w	r3, r3, #1
 800cec4:	b2da      	uxtb	r2, r3
 800cec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cecc:	e03d      	b.n	800cf4a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ced4:	f043 0301 	orr.w	r3, r3, #1
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cedc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d10b      	bne.n	800cf06 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ceee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef2:	f383 8811 	msr	BASEPRI, r3
 800cef6:	f3bf 8f6f 	isb	sy
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	617b      	str	r3, [r7, #20]
}
 800cf00:	bf00      	nop
 800cf02:	bf00      	nop
 800cf04:	e7fd      	b.n	800cf02 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cf06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf08:	699a      	ldr	r2, [r3, #24]
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0c:	18d1      	adds	r1, r2, r3
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf14:	f7ff ff04 	bl	800cd20 <prvInsertTimerInActiveList>
					break;
 800cf18:	e017      	b.n	800cf4a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf20:	f003 0302 	and.w	r3, r3, #2
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d103      	bne.n	800cf30 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cf28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf2a:	f000 fbe5 	bl	800d6f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cf2e:	e00c      	b.n	800cf4a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf36:	f023 0301 	bic.w	r3, r3, #1
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cf42:	e002      	b.n	800cf4a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cf44:	bf00      	nop
 800cf46:	e000      	b.n	800cf4a <prvProcessReceivedCommands+0x1a6>
					break;
 800cf48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf4a:	4b08      	ldr	r3, [pc, #32]	@ (800cf6c <prvProcessReceivedCommands+0x1c8>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	1d39      	adds	r1, r7, #4
 800cf50:	2200      	movs	r2, #0
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7fe fb4c 	bl	800b5f0 <xQueueReceive>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f47f af26 	bne.w	800cdac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cf60:	bf00      	nop
 800cf62:	bf00      	nop
 800cf64:	3730      	adds	r7, #48	@ 0x30
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	20002ccc 	.word	0x20002ccc

0800cf70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b088      	sub	sp, #32
 800cf74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf76:	e049      	b.n	800d00c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf78:	4b2e      	ldr	r3, [pc, #184]	@ (800d034 <prvSwitchTimerLists+0xc4>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf82:	4b2c      	ldr	r3, [pc, #176]	@ (800d034 <prvSwitchTimerLists+0xc4>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	3304      	adds	r3, #4
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7fe f81d 	bl	800afd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6a1b      	ldr	r3, [r3, #32]
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d02f      	beq.n	800d00c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	699b      	ldr	r3, [r3, #24]
 800cfb0:	693a      	ldr	r2, [r7, #16]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cfb6:	68ba      	ldr	r2, [r7, #8]
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d90e      	bls.n	800cfdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	68ba      	ldr	r2, [r7, #8]
 800cfc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfca:	4b1a      	ldr	r3, [pc, #104]	@ (800d034 <prvSwitchTimerLists+0xc4>)
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	f7fd ffc2 	bl	800af5e <vListInsert>
 800cfda:	e017      	b.n	800d00c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfdc:	2300      	movs	r3, #0
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	693a      	ldr	r2, [r7, #16]
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f7ff fd58 	bl	800ca9c <xTimerGenericCommand>
 800cfec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10b      	bne.n	800d00c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	603b      	str	r3, [r7, #0]
}
 800d006:	bf00      	nop
 800d008:	bf00      	nop
 800d00a:	e7fd      	b.n	800d008 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d00c:	4b09      	ldr	r3, [pc, #36]	@ (800d034 <prvSwitchTimerLists+0xc4>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d1b0      	bne.n	800cf78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d016:	4b07      	ldr	r3, [pc, #28]	@ (800d034 <prvSwitchTimerLists+0xc4>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d01c:	4b06      	ldr	r3, [pc, #24]	@ (800d038 <prvSwitchTimerLists+0xc8>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a04      	ldr	r2, [pc, #16]	@ (800d034 <prvSwitchTimerLists+0xc4>)
 800d022:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d024:	4a04      	ldr	r2, [pc, #16]	@ (800d038 <prvSwitchTimerLists+0xc8>)
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	6013      	str	r3, [r2, #0]
}
 800d02a:	bf00      	nop
 800d02c:	3718      	adds	r7, #24
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	20002cc4 	.word	0x20002cc4
 800d038:	20002cc8 	.word	0x20002cc8

0800d03c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d042:	f000 f969 	bl	800d318 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d046:	4b15      	ldr	r3, [pc, #84]	@ (800d09c <prvCheckForValidListAndQueue+0x60>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d120      	bne.n	800d090 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d04e:	4814      	ldr	r0, [pc, #80]	@ (800d0a0 <prvCheckForValidListAndQueue+0x64>)
 800d050:	f7fd ff34 	bl	800aebc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d054:	4813      	ldr	r0, [pc, #76]	@ (800d0a4 <prvCheckForValidListAndQueue+0x68>)
 800d056:	f7fd ff31 	bl	800aebc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d05a:	4b13      	ldr	r3, [pc, #76]	@ (800d0a8 <prvCheckForValidListAndQueue+0x6c>)
 800d05c:	4a10      	ldr	r2, [pc, #64]	@ (800d0a0 <prvCheckForValidListAndQueue+0x64>)
 800d05e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d060:	4b12      	ldr	r3, [pc, #72]	@ (800d0ac <prvCheckForValidListAndQueue+0x70>)
 800d062:	4a10      	ldr	r2, [pc, #64]	@ (800d0a4 <prvCheckForValidListAndQueue+0x68>)
 800d064:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d066:	2300      	movs	r3, #0
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	4b11      	ldr	r3, [pc, #68]	@ (800d0b0 <prvCheckForValidListAndQueue+0x74>)
 800d06c:	4a11      	ldr	r2, [pc, #68]	@ (800d0b4 <prvCheckForValidListAndQueue+0x78>)
 800d06e:	2110      	movs	r1, #16
 800d070:	200a      	movs	r0, #10
 800d072:	f7fe f841 	bl	800b0f8 <xQueueGenericCreateStatic>
 800d076:	4603      	mov	r3, r0
 800d078:	4a08      	ldr	r2, [pc, #32]	@ (800d09c <prvCheckForValidListAndQueue+0x60>)
 800d07a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d07c:	4b07      	ldr	r3, [pc, #28]	@ (800d09c <prvCheckForValidListAndQueue+0x60>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d005      	beq.n	800d090 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d084:	4b05      	ldr	r3, [pc, #20]	@ (800d09c <prvCheckForValidListAndQueue+0x60>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	490b      	ldr	r1, [pc, #44]	@ (800d0b8 <prvCheckForValidListAndQueue+0x7c>)
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fe fd24 	bl	800bad8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d090:	f000 f974 	bl	800d37c <vPortExitCritical>
}
 800d094:	bf00      	nop
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	20002ccc 	.word	0x20002ccc
 800d0a0:	20002c9c 	.word	0x20002c9c
 800d0a4:	20002cb0 	.word	0x20002cb0
 800d0a8:	20002cc4 	.word	0x20002cc4
 800d0ac:	20002cc8 	.word	0x20002cc8
 800d0b0:	20002d78 	.word	0x20002d78
 800d0b4:	20002cd8 	.word	0x20002cd8
 800d0b8:	080112ec 	.word	0x080112ec

0800d0bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	3b04      	subs	r3, #4
 800d0cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d0d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	3b04      	subs	r3, #4
 800d0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	f023 0201 	bic.w	r2, r3, #1
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	3b04      	subs	r3, #4
 800d0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d0ec:	4a0c      	ldr	r2, [pc, #48]	@ (800d120 <pxPortInitialiseStack+0x64>)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	3b14      	subs	r3, #20
 800d0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3b04      	subs	r3, #4
 800d102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f06f 0202 	mvn.w	r2, #2
 800d10a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	3b20      	subs	r3, #32
 800d110:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d112:	68fb      	ldr	r3, [r7, #12]
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr
 800d120:	0800d125 	.word	0x0800d125

0800d124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d12a:	2300      	movs	r3, #0
 800d12c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d12e:	4b13      	ldr	r3, [pc, #76]	@ (800d17c <prvTaskExitError+0x58>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d136:	d00b      	beq.n	800d150 <prvTaskExitError+0x2c>
	__asm volatile
 800d138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d13c:	f383 8811 	msr	BASEPRI, r3
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	60fb      	str	r3, [r7, #12]
}
 800d14a:	bf00      	nop
 800d14c:	bf00      	nop
 800d14e:	e7fd      	b.n	800d14c <prvTaskExitError+0x28>
	__asm volatile
 800d150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d154:	f383 8811 	msr	BASEPRI, r3
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	60bb      	str	r3, [r7, #8]
}
 800d162:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d164:	bf00      	nop
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d0fc      	beq.n	800d166 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d16c:	bf00      	nop
 800d16e:	bf00      	nop
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	2000011c 	.word	0x2000011c

0800d180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d180:	4b07      	ldr	r3, [pc, #28]	@ (800d1a0 <pxCurrentTCBConst2>)
 800d182:	6819      	ldr	r1, [r3, #0]
 800d184:	6808      	ldr	r0, [r1, #0]
 800d186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18a:	f380 8809 	msr	PSP, r0
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f04f 0000 	mov.w	r0, #0
 800d196:	f380 8811 	msr	BASEPRI, r0
 800d19a:	4770      	bx	lr
 800d19c:	f3af 8000 	nop.w

0800d1a0 <pxCurrentTCBConst2>:
 800d1a0:	2000279c 	.word	0x2000279c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1a4:	bf00      	nop
 800d1a6:	bf00      	nop

0800d1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1a8:	4808      	ldr	r0, [pc, #32]	@ (800d1cc <prvPortStartFirstTask+0x24>)
 800d1aa:	6800      	ldr	r0, [r0, #0]
 800d1ac:	6800      	ldr	r0, [r0, #0]
 800d1ae:	f380 8808 	msr	MSP, r0
 800d1b2:	f04f 0000 	mov.w	r0, #0
 800d1b6:	f380 8814 	msr	CONTROL, r0
 800d1ba:	b662      	cpsie	i
 800d1bc:	b661      	cpsie	f
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	df00      	svc	0
 800d1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1ca:	bf00      	nop
 800d1cc:	e000ed08 	.word	0xe000ed08

0800d1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d1d6:	4b47      	ldr	r3, [pc, #284]	@ (800d2f4 <xPortStartScheduler+0x124>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a47      	ldr	r2, [pc, #284]	@ (800d2f8 <xPortStartScheduler+0x128>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d10b      	bne.n	800d1f8 <xPortStartScheduler+0x28>
	__asm volatile
 800d1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	613b      	str	r3, [r7, #16]
}
 800d1f2:	bf00      	nop
 800d1f4:	bf00      	nop
 800d1f6:	e7fd      	b.n	800d1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d1f8:	4b3e      	ldr	r3, [pc, #248]	@ (800d2f4 <xPortStartScheduler+0x124>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a3f      	ldr	r2, [pc, #252]	@ (800d2fc <xPortStartScheduler+0x12c>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d10b      	bne.n	800d21a <xPortStartScheduler+0x4a>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	60fb      	str	r3, [r7, #12]
}
 800d214:	bf00      	nop
 800d216:	bf00      	nop
 800d218:	e7fd      	b.n	800d216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d21a:	4b39      	ldr	r3, [pc, #228]	@ (800d300 <xPortStartScheduler+0x130>)
 800d21c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	b2db      	uxtb	r3, r3
 800d224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	22ff      	movs	r2, #255	@ 0xff
 800d22a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	b2db      	uxtb	r3, r3
 800d232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d234:	78fb      	ldrb	r3, [r7, #3]
 800d236:	b2db      	uxtb	r3, r3
 800d238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d23c:	b2da      	uxtb	r2, r3
 800d23e:	4b31      	ldr	r3, [pc, #196]	@ (800d304 <xPortStartScheduler+0x134>)
 800d240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d242:	4b31      	ldr	r3, [pc, #196]	@ (800d308 <xPortStartScheduler+0x138>)
 800d244:	2207      	movs	r2, #7
 800d246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d248:	e009      	b.n	800d25e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d24a:	4b2f      	ldr	r3, [pc, #188]	@ (800d308 <xPortStartScheduler+0x138>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3b01      	subs	r3, #1
 800d250:	4a2d      	ldr	r2, [pc, #180]	@ (800d308 <xPortStartScheduler+0x138>)
 800d252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d254:	78fb      	ldrb	r3, [r7, #3]
 800d256:	b2db      	uxtb	r3, r3
 800d258:	005b      	lsls	r3, r3, #1
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	b2db      	uxtb	r3, r3
 800d262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d266:	2b80      	cmp	r3, #128	@ 0x80
 800d268:	d0ef      	beq.n	800d24a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d26a:	4b27      	ldr	r3, [pc, #156]	@ (800d308 <xPortStartScheduler+0x138>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f1c3 0307 	rsb	r3, r3, #7
 800d272:	2b04      	cmp	r3, #4
 800d274:	d00b      	beq.n	800d28e <xPortStartScheduler+0xbe>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	60bb      	str	r3, [r7, #8]
}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	e7fd      	b.n	800d28a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d28e:	4b1e      	ldr	r3, [pc, #120]	@ (800d308 <xPortStartScheduler+0x138>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	021b      	lsls	r3, r3, #8
 800d294:	4a1c      	ldr	r2, [pc, #112]	@ (800d308 <xPortStartScheduler+0x138>)
 800d296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d298:	4b1b      	ldr	r3, [pc, #108]	@ (800d308 <xPortStartScheduler+0x138>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d2a0:	4a19      	ldr	r2, [pc, #100]	@ (800d308 <xPortStartScheduler+0x138>)
 800d2a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2ac:	4b17      	ldr	r3, [pc, #92]	@ (800d30c <xPortStartScheduler+0x13c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a16      	ldr	r2, [pc, #88]	@ (800d30c <xPortStartScheduler+0x13c>)
 800d2b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d2b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2b8:	4b14      	ldr	r3, [pc, #80]	@ (800d30c <xPortStartScheduler+0x13c>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a13      	ldr	r2, [pc, #76]	@ (800d30c <xPortStartScheduler+0x13c>)
 800d2be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d2c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2c4:	f000 f8da 	bl	800d47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2c8:	4b11      	ldr	r3, [pc, #68]	@ (800d310 <xPortStartScheduler+0x140>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2ce:	f000 f8f9 	bl	800d4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2d2:	4b10      	ldr	r3, [pc, #64]	@ (800d314 <xPortStartScheduler+0x144>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a0f      	ldr	r2, [pc, #60]	@ (800d314 <xPortStartScheduler+0x144>)
 800d2d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d2dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d2de:	f7ff ff63 	bl	800d1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d2e2:	f7ff f831 	bl	800c348 <vTaskSwitchContext>
	prvTaskExitError();
 800d2e6:	f7ff ff1d 	bl	800d124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3718      	adds	r7, #24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	e000ed00 	.word	0xe000ed00
 800d2f8:	410fc271 	.word	0x410fc271
 800d2fc:	410fc270 	.word	0x410fc270
 800d300:	e000e400 	.word	0xe000e400
 800d304:	20002dc8 	.word	0x20002dc8
 800d308:	20002dcc 	.word	0x20002dcc
 800d30c:	e000ed20 	.word	0xe000ed20
 800d310:	2000011c 	.word	0x2000011c
 800d314:	e000ef34 	.word	0xe000ef34

0800d318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
	__asm volatile
 800d31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	607b      	str	r3, [r7, #4]
}
 800d330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d332:	4b10      	ldr	r3, [pc, #64]	@ (800d374 <vPortEnterCritical+0x5c>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	3301      	adds	r3, #1
 800d338:	4a0e      	ldr	r2, [pc, #56]	@ (800d374 <vPortEnterCritical+0x5c>)
 800d33a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d33c:	4b0d      	ldr	r3, [pc, #52]	@ (800d374 <vPortEnterCritical+0x5c>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b01      	cmp	r3, #1
 800d342:	d110      	bne.n	800d366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d344:	4b0c      	ldr	r3, [pc, #48]	@ (800d378 <vPortEnterCritical+0x60>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00b      	beq.n	800d366 <vPortEnterCritical+0x4e>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	603b      	str	r3, [r7, #0]
}
 800d360:	bf00      	nop
 800d362:	bf00      	nop
 800d364:	e7fd      	b.n	800d362 <vPortEnterCritical+0x4a>
	}
}
 800d366:	bf00      	nop
 800d368:	370c      	adds	r7, #12
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	2000011c 	.word	0x2000011c
 800d378:	e000ed04 	.word	0xe000ed04

0800d37c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d382:	4b12      	ldr	r3, [pc, #72]	@ (800d3cc <vPortExitCritical+0x50>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10b      	bne.n	800d3a2 <vPortExitCritical+0x26>
	__asm volatile
 800d38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38e:	f383 8811 	msr	BASEPRI, r3
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	f3bf 8f4f 	dsb	sy
 800d39a:	607b      	str	r3, [r7, #4]
}
 800d39c:	bf00      	nop
 800d39e:	bf00      	nop
 800d3a0:	e7fd      	b.n	800d39e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d3cc <vPortExitCritical+0x50>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	4a08      	ldr	r2, [pc, #32]	@ (800d3cc <vPortExitCritical+0x50>)
 800d3aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3ac:	4b07      	ldr	r3, [pc, #28]	@ (800d3cc <vPortExitCritical+0x50>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d105      	bne.n	800d3c0 <vPortExitCritical+0x44>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	f383 8811 	msr	BASEPRI, r3
}
 800d3be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3c0:	bf00      	nop
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	2000011c 	.word	0x2000011c

0800d3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d3d0:	f3ef 8009 	mrs	r0, PSP
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	4b15      	ldr	r3, [pc, #84]	@ (800d430 <pxCurrentTCBConst>)
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	f01e 0f10 	tst.w	lr, #16
 800d3e0:	bf08      	it	eq
 800d3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ea:	6010      	str	r0, [r2, #0]
 800d3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d3f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d3f4:	f380 8811 	msr	BASEPRI, r0
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	f3bf 8f6f 	isb	sy
 800d400:	f7fe ffa2 	bl	800c348 <vTaskSwitchContext>
 800d404:	f04f 0000 	mov.w	r0, #0
 800d408:	f380 8811 	msr	BASEPRI, r0
 800d40c:	bc09      	pop	{r0, r3}
 800d40e:	6819      	ldr	r1, [r3, #0]
 800d410:	6808      	ldr	r0, [r1, #0]
 800d412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d416:	f01e 0f10 	tst.w	lr, #16
 800d41a:	bf08      	it	eq
 800d41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d420:	f380 8809 	msr	PSP, r0
 800d424:	f3bf 8f6f 	isb	sy
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	f3af 8000 	nop.w

0800d430 <pxCurrentTCBConst>:
 800d430:	2000279c 	.word	0x2000279c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d434:	bf00      	nop
 800d436:	bf00      	nop

0800d438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	607b      	str	r3, [r7, #4]
}
 800d450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d452:	f7fe febf 	bl	800c1d4 <xTaskIncrementTick>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d003      	beq.n	800d464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d45c:	4b06      	ldr	r3, [pc, #24]	@ (800d478 <xPortSysTickHandler+0x40>)
 800d45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d462:	601a      	str	r2, [r3, #0]
 800d464:	2300      	movs	r3, #0
 800d466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	f383 8811 	msr	BASEPRI, r3
}
 800d46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d470:	bf00      	nop
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	e000ed04 	.word	0xe000ed04

0800d47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d47c:	b480      	push	{r7}
 800d47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d480:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b0 <vPortSetupTimerInterrupt+0x34>)
 800d482:	2200      	movs	r2, #0
 800d484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d486:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b4 <vPortSetupTimerInterrupt+0x38>)
 800d488:	2200      	movs	r2, #0
 800d48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d48c:	4b0a      	ldr	r3, [pc, #40]	@ (800d4b8 <vPortSetupTimerInterrupt+0x3c>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a0a      	ldr	r2, [pc, #40]	@ (800d4bc <vPortSetupTimerInterrupt+0x40>)
 800d492:	fba2 2303 	umull	r2, r3, r2, r3
 800d496:	099b      	lsrs	r3, r3, #6
 800d498:	4a09      	ldr	r2, [pc, #36]	@ (800d4c0 <vPortSetupTimerInterrupt+0x44>)
 800d49a:	3b01      	subs	r3, #1
 800d49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d49e:	4b04      	ldr	r3, [pc, #16]	@ (800d4b0 <vPortSetupTimerInterrupt+0x34>)
 800d4a0:	2207      	movs	r2, #7
 800d4a2:	601a      	str	r2, [r3, #0]
}
 800d4a4:	bf00      	nop
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	e000e010 	.word	0xe000e010
 800d4b4:	e000e018 	.word	0xe000e018
 800d4b8:	20000000 	.word	0x20000000
 800d4bc:	10624dd3 	.word	0x10624dd3
 800d4c0:	e000e014 	.word	0xe000e014

0800d4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d4d4 <vPortEnableVFP+0x10>
 800d4c8:	6801      	ldr	r1, [r0, #0]
 800d4ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d4ce:	6001      	str	r1, [r0, #0]
 800d4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4d2:	bf00      	nop
 800d4d4:	e000ed88 	.word	0xe000ed88

0800d4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d4de:	f3ef 8305 	mrs	r3, IPSR
 800d4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2b0f      	cmp	r3, #15
 800d4e8:	d915      	bls.n	800d516 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d4ea:	4a18      	ldr	r2, [pc, #96]	@ (800d54c <vPortValidateInterruptPriority+0x74>)
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d4f4:	4b16      	ldr	r3, [pc, #88]	@ (800d550 <vPortValidateInterruptPriority+0x78>)
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	7afa      	ldrb	r2, [r7, #11]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d20b      	bcs.n	800d516 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	607b      	str	r3, [r7, #4]
}
 800d510:	bf00      	nop
 800d512:	bf00      	nop
 800d514:	e7fd      	b.n	800d512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d516:	4b0f      	ldr	r3, [pc, #60]	@ (800d554 <vPortValidateInterruptPriority+0x7c>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d51e:	4b0e      	ldr	r3, [pc, #56]	@ (800d558 <vPortValidateInterruptPriority+0x80>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	429a      	cmp	r2, r3
 800d524:	d90b      	bls.n	800d53e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	603b      	str	r3, [r7, #0]
}
 800d538:	bf00      	nop
 800d53a:	bf00      	nop
 800d53c:	e7fd      	b.n	800d53a <vPortValidateInterruptPriority+0x62>
	}
 800d53e:	bf00      	nop
 800d540:	3714      	adds	r7, #20
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	e000e3f0 	.word	0xe000e3f0
 800d550:	20002dc8 	.word	0x20002dc8
 800d554:	e000ed0c 	.word	0xe000ed0c
 800d558:	20002dcc 	.word	0x20002dcc

0800d55c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08a      	sub	sp, #40	@ 0x28
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d564:	2300      	movs	r3, #0
 800d566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d568:	f7fe fd78 	bl	800c05c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d56c:	4b5c      	ldr	r3, [pc, #368]	@ (800d6e0 <pvPortMalloc+0x184>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d101      	bne.n	800d578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d574:	f000 f924 	bl	800d7c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d578:	4b5a      	ldr	r3, [pc, #360]	@ (800d6e4 <pvPortMalloc+0x188>)
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4013      	ands	r3, r2
 800d580:	2b00      	cmp	r3, #0
 800d582:	f040 8095 	bne.w	800d6b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d01e      	beq.n	800d5ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d58c:	2208      	movs	r2, #8
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4413      	add	r3, r2
 800d592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f003 0307 	and.w	r3, r3, #7
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d015      	beq.n	800d5ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f023 0307 	bic.w	r3, r3, #7
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f003 0307 	and.w	r3, r3, #7
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00b      	beq.n	800d5ca <pvPortMalloc+0x6e>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	617b      	str	r3, [r7, #20]
}
 800d5c4:	bf00      	nop
 800d5c6:	bf00      	nop
 800d5c8:	e7fd      	b.n	800d5c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d06f      	beq.n	800d6b0 <pvPortMalloc+0x154>
 800d5d0:	4b45      	ldr	r3, [pc, #276]	@ (800d6e8 <pvPortMalloc+0x18c>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d86a      	bhi.n	800d6b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d5da:	4b44      	ldr	r3, [pc, #272]	@ (800d6ec <pvPortMalloc+0x190>)
 800d5dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d5de:	4b43      	ldr	r3, [pc, #268]	@ (800d6ec <pvPortMalloc+0x190>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5e4:	e004      	b.n	800d5f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d903      	bls.n	800d602 <pvPortMalloc+0xa6>
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1f1      	bne.n	800d5e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d602:	4b37      	ldr	r3, [pc, #220]	@ (800d6e0 <pvPortMalloc+0x184>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d608:	429a      	cmp	r2, r3
 800d60a:	d051      	beq.n	800d6b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2208      	movs	r2, #8
 800d612:	4413      	add	r3, r2
 800d614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	6a3b      	ldr	r3, [r7, #32]
 800d61c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	1ad2      	subs	r2, r2, r3
 800d626:	2308      	movs	r3, #8
 800d628:	005b      	lsls	r3, r3, #1
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d920      	bls.n	800d670 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4413      	add	r3, r2
 800d634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	f003 0307 	and.w	r3, r3, #7
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d00b      	beq.n	800d658 <pvPortMalloc+0xfc>
	__asm volatile
 800d640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d644:	f383 8811 	msr	BASEPRI, r3
 800d648:	f3bf 8f6f 	isb	sy
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	613b      	str	r3, [r7, #16]
}
 800d652:	bf00      	nop
 800d654:	bf00      	nop
 800d656:	e7fd      	b.n	800d654 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	1ad2      	subs	r2, r2, r3
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d66a:	69b8      	ldr	r0, [r7, #24]
 800d66c:	f000 f90a 	bl	800d884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d670:	4b1d      	ldr	r3, [pc, #116]	@ (800d6e8 <pvPortMalloc+0x18c>)
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	4a1b      	ldr	r2, [pc, #108]	@ (800d6e8 <pvPortMalloc+0x18c>)
 800d67c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d67e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6e8 <pvPortMalloc+0x18c>)
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	4b1b      	ldr	r3, [pc, #108]	@ (800d6f0 <pvPortMalloc+0x194>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	429a      	cmp	r2, r3
 800d688:	d203      	bcs.n	800d692 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d68a:	4b17      	ldr	r3, [pc, #92]	@ (800d6e8 <pvPortMalloc+0x18c>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a18      	ldr	r2, [pc, #96]	@ (800d6f0 <pvPortMalloc+0x194>)
 800d690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d694:	685a      	ldr	r2, [r3, #4]
 800d696:	4b13      	ldr	r3, [pc, #76]	@ (800d6e4 <pvPortMalloc+0x188>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	431a      	orrs	r2, r3
 800d69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d6a6:	4b13      	ldr	r3, [pc, #76]	@ (800d6f4 <pvPortMalloc+0x198>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	4a11      	ldr	r2, [pc, #68]	@ (800d6f4 <pvPortMalloc+0x198>)
 800d6ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6b0:	f7fe fce2 	bl	800c078 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	f003 0307 	and.w	r3, r3, #7
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00b      	beq.n	800d6d6 <pvPortMalloc+0x17a>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	60fb      	str	r3, [r7, #12]
}
 800d6d0:	bf00      	nop
 800d6d2:	bf00      	nop
 800d6d4:	e7fd      	b.n	800d6d2 <pvPortMalloc+0x176>
	return pvReturn;
 800d6d6:	69fb      	ldr	r3, [r7, #28]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3728      	adds	r7, #40	@ 0x28
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	20005cb8 	.word	0x20005cb8
 800d6e4:	20005ccc 	.word	0x20005ccc
 800d6e8:	20005cbc 	.word	0x20005cbc
 800d6ec:	20005cb0 	.word	0x20005cb0
 800d6f0:	20005cc0 	.word	0x20005cc0
 800d6f4:	20005cc4 	.word	0x20005cc4

0800d6f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d04f      	beq.n	800d7aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d70a:	2308      	movs	r3, #8
 800d70c:	425b      	negs	r3, r3
 800d70e:	697a      	ldr	r2, [r7, #20]
 800d710:	4413      	add	r3, r2
 800d712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	685a      	ldr	r2, [r3, #4]
 800d71c:	4b25      	ldr	r3, [pc, #148]	@ (800d7b4 <vPortFree+0xbc>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4013      	ands	r3, r2
 800d722:	2b00      	cmp	r3, #0
 800d724:	d10b      	bne.n	800d73e <vPortFree+0x46>
	__asm volatile
 800d726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	60fb      	str	r3, [r7, #12]
}
 800d738:	bf00      	nop
 800d73a:	bf00      	nop
 800d73c:	e7fd      	b.n	800d73a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d00b      	beq.n	800d75e <vPortFree+0x66>
	__asm volatile
 800d746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	60bb      	str	r3, [r7, #8]
}
 800d758:	bf00      	nop
 800d75a:	bf00      	nop
 800d75c:	e7fd      	b.n	800d75a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	685a      	ldr	r2, [r3, #4]
 800d762:	4b14      	ldr	r3, [pc, #80]	@ (800d7b4 <vPortFree+0xbc>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4013      	ands	r3, r2
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d01e      	beq.n	800d7aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d11a      	bne.n	800d7aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	685a      	ldr	r2, [r3, #4]
 800d778:	4b0e      	ldr	r3, [pc, #56]	@ (800d7b4 <vPortFree+0xbc>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	43db      	mvns	r3, r3
 800d77e:	401a      	ands	r2, r3
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d784:	f7fe fc6a 	bl	800c05c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	685a      	ldr	r2, [r3, #4]
 800d78c:	4b0a      	ldr	r3, [pc, #40]	@ (800d7b8 <vPortFree+0xc0>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4413      	add	r3, r2
 800d792:	4a09      	ldr	r2, [pc, #36]	@ (800d7b8 <vPortFree+0xc0>)
 800d794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d796:	6938      	ldr	r0, [r7, #16]
 800d798:	f000 f874 	bl	800d884 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d79c:	4b07      	ldr	r3, [pc, #28]	@ (800d7bc <vPortFree+0xc4>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	4a06      	ldr	r2, [pc, #24]	@ (800d7bc <vPortFree+0xc4>)
 800d7a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d7a6:	f7fe fc67 	bl	800c078 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d7aa:	bf00      	nop
 800d7ac:	3718      	adds	r7, #24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	20005ccc 	.word	0x20005ccc
 800d7b8:	20005cbc 	.word	0x20005cbc
 800d7bc:	20005cc8 	.word	0x20005cc8

0800d7c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7c6:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800d7ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7cc:	4b27      	ldr	r3, [pc, #156]	@ (800d86c <prvHeapInit+0xac>)
 800d7ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f003 0307 	and.w	r3, r3, #7
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00c      	beq.n	800d7f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	3307      	adds	r3, #7
 800d7de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f023 0307 	bic.w	r3, r3, #7
 800d7e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	1ad3      	subs	r3, r2, r3
 800d7ee:	4a1f      	ldr	r2, [pc, #124]	@ (800d86c <prvHeapInit+0xac>)
 800d7f0:	4413      	add	r3, r2
 800d7f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800d870 <prvHeapInit+0xb0>)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800d870 <prvHeapInit+0xb0>)
 800d800:	2200      	movs	r2, #0
 800d802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	4413      	add	r3, r2
 800d80a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d80c:	2208      	movs	r2, #8
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	1a9b      	subs	r3, r3, r2
 800d812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f023 0307 	bic.w	r3, r3, #7
 800d81a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	4a15      	ldr	r2, [pc, #84]	@ (800d874 <prvHeapInit+0xb4>)
 800d820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d822:	4b14      	ldr	r3, [pc, #80]	@ (800d874 <prvHeapInit+0xb4>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2200      	movs	r2, #0
 800d828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d82a:	4b12      	ldr	r3, [pc, #72]	@ (800d874 <prvHeapInit+0xb4>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2200      	movs	r2, #0
 800d830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	1ad2      	subs	r2, r2, r3
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d840:	4b0c      	ldr	r3, [pc, #48]	@ (800d874 <prvHeapInit+0xb4>)
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	4a0a      	ldr	r2, [pc, #40]	@ (800d878 <prvHeapInit+0xb8>)
 800d84e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	4a09      	ldr	r2, [pc, #36]	@ (800d87c <prvHeapInit+0xbc>)
 800d856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d858:	4b09      	ldr	r3, [pc, #36]	@ (800d880 <prvHeapInit+0xc0>)
 800d85a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d85e:	601a      	str	r2, [r3, #0]
}
 800d860:	bf00      	nop
 800d862:	3714      	adds	r7, #20
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	20002dd0 	.word	0x20002dd0
 800d870:	20005cb0 	.word	0x20005cb0
 800d874:	20005cb8 	.word	0x20005cb8
 800d878:	20005cc0 	.word	0x20005cc0
 800d87c:	20005cbc 	.word	0x20005cbc
 800d880:	20005ccc 	.word	0x20005ccc

0800d884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d88c:	4b28      	ldr	r3, [pc, #160]	@ (800d930 <prvInsertBlockIntoFreeList+0xac>)
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	e002      	b.n	800d898 <prvInsertBlockIntoFreeList+0x14>
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	60fb      	str	r3, [r7, #12]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d8f7      	bhi.n	800d892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d108      	bne.n	800d8c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	441a      	add	r2, r3
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	441a      	add	r2, r3
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d118      	bne.n	800d90c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	4b15      	ldr	r3, [pc, #84]	@ (800d934 <prvInsertBlockIntoFreeList+0xb0>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d00d      	beq.n	800d902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685a      	ldr	r2, [r3, #4]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	441a      	add	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	601a      	str	r2, [r3, #0]
 800d900:	e008      	b.n	800d914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d902:	4b0c      	ldr	r3, [pc, #48]	@ (800d934 <prvInsertBlockIntoFreeList+0xb0>)
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	e003      	b.n	800d914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d002      	beq.n	800d922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d922:	bf00      	nop
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	20005cb0 	.word	0x20005cb0
 800d934:	20005cb8 	.word	0x20005cb8

0800d938 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d93c:	2200      	movs	r2, #0
 800d93e:	4912      	ldr	r1, [pc, #72]	@ (800d988 <MX_USB_Device_Init+0x50>)
 800d940:	4812      	ldr	r0, [pc, #72]	@ (800d98c <MX_USB_Device_Init+0x54>)
 800d942:	f7fb fef9 	bl	8009738 <USBD_Init>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d94c:	f7f3 ffb4 	bl	80018b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d950:	490f      	ldr	r1, [pc, #60]	@ (800d990 <MX_USB_Device_Init+0x58>)
 800d952:	480e      	ldr	r0, [pc, #56]	@ (800d98c <MX_USB_Device_Init+0x54>)
 800d954:	f7fb ff20 	bl	8009798 <USBD_RegisterClass>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d001      	beq.n	800d962 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d95e:	f7f3 ffab 	bl	80018b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d962:	490c      	ldr	r1, [pc, #48]	@ (800d994 <MX_USB_Device_Init+0x5c>)
 800d964:	4809      	ldr	r0, [pc, #36]	@ (800d98c <MX_USB_Device_Init+0x54>)
 800d966:	f7fb fe41 	bl	80095ec <USBD_CDC_RegisterInterface>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d970:	f7f3 ffa2 	bl	80018b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d974:	4805      	ldr	r0, [pc, #20]	@ (800d98c <MX_USB_Device_Init+0x54>)
 800d976:	f7fb ff36 	bl	80097e6 <USBD_Start>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d001      	beq.n	800d984 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d980:	f7f3 ff9a 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d984:	bf00      	nop
 800d986:	bd80      	pop	{r7, pc}
 800d988:	20000134 	.word	0x20000134
 800d98c:	20005cd0 	.word	0x20005cd0
 800d990:	20000018 	.word	0x20000018
 800d994:	20000120 	.word	0x20000120

0800d998 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d99c:	2200      	movs	r2, #0
 800d99e:	4905      	ldr	r1, [pc, #20]	@ (800d9b4 <CDC_Init_FS+0x1c>)
 800d9a0:	4805      	ldr	r0, [pc, #20]	@ (800d9b8 <CDC_Init_FS+0x20>)
 800d9a2:	f7fb fe38 	bl	8009616 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d9a6:	4905      	ldr	r1, [pc, #20]	@ (800d9bc <CDC_Init_FS+0x24>)
 800d9a8:	4803      	ldr	r0, [pc, #12]	@ (800d9b8 <CDC_Init_FS+0x20>)
 800d9aa:	f7fb fe52 	bl	8009652 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d9ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	200067a0 	.word	0x200067a0
 800d9b8:	20005cd0 	.word	0x20005cd0
 800d9bc:	20005fa0 	.word	0x20005fa0

0800d9c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d9c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	6039      	str	r1, [r7, #0]
 800d9da:	71fb      	strb	r3, [r7, #7]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d9e0:	79fb      	ldrb	r3, [r7, #7]
 800d9e2:	2b23      	cmp	r3, #35	@ 0x23
 800d9e4:	d84a      	bhi.n	800da7c <CDC_Control_FS+0xac>
 800d9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9ec <CDC_Control_FS+0x1c>)
 800d9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ec:	0800da7d 	.word	0x0800da7d
 800d9f0:	0800da7d 	.word	0x0800da7d
 800d9f4:	0800da7d 	.word	0x0800da7d
 800d9f8:	0800da7d 	.word	0x0800da7d
 800d9fc:	0800da7d 	.word	0x0800da7d
 800da00:	0800da7d 	.word	0x0800da7d
 800da04:	0800da7d 	.word	0x0800da7d
 800da08:	0800da7d 	.word	0x0800da7d
 800da0c:	0800da7d 	.word	0x0800da7d
 800da10:	0800da7d 	.word	0x0800da7d
 800da14:	0800da7d 	.word	0x0800da7d
 800da18:	0800da7d 	.word	0x0800da7d
 800da1c:	0800da7d 	.word	0x0800da7d
 800da20:	0800da7d 	.word	0x0800da7d
 800da24:	0800da7d 	.word	0x0800da7d
 800da28:	0800da7d 	.word	0x0800da7d
 800da2c:	0800da7d 	.word	0x0800da7d
 800da30:	0800da7d 	.word	0x0800da7d
 800da34:	0800da7d 	.word	0x0800da7d
 800da38:	0800da7d 	.word	0x0800da7d
 800da3c:	0800da7d 	.word	0x0800da7d
 800da40:	0800da7d 	.word	0x0800da7d
 800da44:	0800da7d 	.word	0x0800da7d
 800da48:	0800da7d 	.word	0x0800da7d
 800da4c:	0800da7d 	.word	0x0800da7d
 800da50:	0800da7d 	.word	0x0800da7d
 800da54:	0800da7d 	.word	0x0800da7d
 800da58:	0800da7d 	.word	0x0800da7d
 800da5c:	0800da7d 	.word	0x0800da7d
 800da60:	0800da7d 	.word	0x0800da7d
 800da64:	0800da7d 	.word	0x0800da7d
 800da68:	0800da7d 	.word	0x0800da7d
 800da6c:	0800da7d 	.word	0x0800da7d
 800da70:	0800da7d 	.word	0x0800da7d
 800da74:	0800da7d 	.word	0x0800da7d
 800da78:	0800da7d 	.word	0x0800da7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800da7c:	bf00      	nop
  }

  return (USBD_OK);
 800da7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800da80:	4618      	mov	r0, r3
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800da96:	6879      	ldr	r1, [r7, #4]
 800da98:	4805      	ldr	r0, [pc, #20]	@ (800dab0 <CDC_Receive_FS+0x24>)
 800da9a:	f7fb fdda 	bl	8009652 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800da9e:	4804      	ldr	r0, [pc, #16]	@ (800dab0 <CDC_Receive_FS+0x24>)
 800daa0:	f7fb fe20 	bl	80096e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800daa4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3708      	adds	r7, #8
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	20005cd0 	.word	0x20005cd0

0800dab4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	460b      	mov	r3, r1
 800dabe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dac4:	4b0d      	ldr	r3, [pc, #52]	@ (800dafc <CDC_Transmit_FS+0x48>)
 800dac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800daca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d001      	beq.n	800dada <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dad6:	2301      	movs	r3, #1
 800dad8:	e00b      	b.n	800daf2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dada:	887b      	ldrh	r3, [r7, #2]
 800dadc:	461a      	mov	r2, r3
 800dade:	6879      	ldr	r1, [r7, #4]
 800dae0:	4806      	ldr	r0, [pc, #24]	@ (800dafc <CDC_Transmit_FS+0x48>)
 800dae2:	f7fb fd98 	bl	8009616 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dae6:	4805      	ldr	r0, [pc, #20]	@ (800dafc <CDC_Transmit_FS+0x48>)
 800dae8:	f7fb fdcc 	bl	8009684 <USBD_CDC_TransmitPacket>
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	20005cd0 	.word	0x20005cd0

0800db00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800db00:	b480      	push	{r7}
 800db02:	b087      	sub	sp, #28
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	4613      	mov	r3, r2
 800db0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800db12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db16:	4618      	mov	r0, r3
 800db18:	371c      	adds	r7, #28
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
	...

0800db24 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	4603      	mov	r3, r0
 800db2c:	6039      	str	r1, [r7, #0]
 800db2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	2212      	movs	r2, #18
 800db34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800db36:	4b03      	ldr	r3, [pc, #12]	@ (800db44 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800db38:	4618      	mov	r0, r3
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr
 800db44:	20000154 	.word	0x20000154

0800db48 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	4603      	mov	r3, r0
 800db50:	6039      	str	r1, [r7, #0]
 800db52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	2204      	movs	r2, #4
 800db58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db5a:	4b03      	ldr	r3, [pc, #12]	@ (800db68 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr
 800db68:	20000168 	.word	0x20000168

0800db6c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	4603      	mov	r3, r0
 800db74:	6039      	str	r1, [r7, #0]
 800db76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db78:	79fb      	ldrb	r3, [r7, #7]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d105      	bne.n	800db8a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800db7e:	683a      	ldr	r2, [r7, #0]
 800db80:	4907      	ldr	r1, [pc, #28]	@ (800dba0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800db82:	4808      	ldr	r0, [pc, #32]	@ (800dba4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800db84:	f7fc fe17 	bl	800a7b6 <USBD_GetString>
 800db88:	e004      	b.n	800db94 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800db8a:	683a      	ldr	r2, [r7, #0]
 800db8c:	4904      	ldr	r1, [pc, #16]	@ (800dba0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800db8e:	4805      	ldr	r0, [pc, #20]	@ (800dba4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800db90:	f7fc fe11 	bl	800a7b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db94:	4b02      	ldr	r3, [pc, #8]	@ (800dba0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800db96:	4618      	mov	r0, r3
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	20006fa0 	.word	0x20006fa0
 800dba4:	080112f4 	.word	0x080112f4

0800dba8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	4603      	mov	r3, r0
 800dbb0:	6039      	str	r1, [r7, #0]
 800dbb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dbb4:	683a      	ldr	r2, [r7, #0]
 800dbb6:	4904      	ldr	r1, [pc, #16]	@ (800dbc8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800dbb8:	4804      	ldr	r0, [pc, #16]	@ (800dbcc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800dbba:	f7fc fdfc 	bl	800a7b6 <USBD_GetString>
  return USBD_StrDesc;
 800dbbe:	4b02      	ldr	r3, [pc, #8]	@ (800dbc8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	20006fa0 	.word	0x20006fa0
 800dbcc:	0801130c 	.word	0x0801130c

0800dbd0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	6039      	str	r1, [r7, #0]
 800dbda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	221a      	movs	r2, #26
 800dbe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dbe2:	f000 f843 	bl	800dc6c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dbe6:	4b02      	ldr	r3, [pc, #8]	@ (800dbf0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3708      	adds	r7, #8
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	2000016c 	.word	0x2000016c

0800dbf4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	6039      	str	r1, [r7, #0]
 800dbfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc00:	79fb      	ldrb	r3, [r7, #7]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d105      	bne.n	800dc12 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	4907      	ldr	r1, [pc, #28]	@ (800dc28 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dc0a:	4808      	ldr	r0, [pc, #32]	@ (800dc2c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dc0c:	f7fc fdd3 	bl	800a7b6 <USBD_GetString>
 800dc10:	e004      	b.n	800dc1c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	4904      	ldr	r1, [pc, #16]	@ (800dc28 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dc16:	4805      	ldr	r0, [pc, #20]	@ (800dc2c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dc18:	f7fc fdcd 	bl	800a7b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc1c:	4b02      	ldr	r3, [pc, #8]	@ (800dc28 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	20006fa0 	.word	0x20006fa0
 800dc2c:	08011320 	.word	0x08011320

0800dc30 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	4603      	mov	r3, r0
 800dc38:	6039      	str	r1, [r7, #0]
 800dc3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc3c:	79fb      	ldrb	r3, [r7, #7]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d105      	bne.n	800dc4e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dc42:	683a      	ldr	r2, [r7, #0]
 800dc44:	4907      	ldr	r1, [pc, #28]	@ (800dc64 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dc46:	4808      	ldr	r0, [pc, #32]	@ (800dc68 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dc48:	f7fc fdb5 	bl	800a7b6 <USBD_GetString>
 800dc4c:	e004      	b.n	800dc58 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dc4e:	683a      	ldr	r2, [r7, #0]
 800dc50:	4904      	ldr	r1, [pc, #16]	@ (800dc64 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dc52:	4805      	ldr	r0, [pc, #20]	@ (800dc68 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dc54:	f7fc fdaf 	bl	800a7b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc58:	4b02      	ldr	r3, [pc, #8]	@ (800dc64 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	20006fa0 	.word	0x20006fa0
 800dc68:	0801132c 	.word	0x0801132c

0800dc6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dc72:	4b0f      	ldr	r3, [pc, #60]	@ (800dcb0 <Get_SerialNum+0x44>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dc78:	4b0e      	ldr	r3, [pc, #56]	@ (800dcb4 <Get_SerialNum+0x48>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dc7e:	4b0e      	ldr	r3, [pc, #56]	@ (800dcb8 <Get_SerialNum+0x4c>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4413      	add	r3, r2
 800dc8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d009      	beq.n	800dca6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dc92:	2208      	movs	r2, #8
 800dc94:	4909      	ldr	r1, [pc, #36]	@ (800dcbc <Get_SerialNum+0x50>)
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f000 f814 	bl	800dcc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dc9c:	2204      	movs	r2, #4
 800dc9e:	4908      	ldr	r1, [pc, #32]	@ (800dcc0 <Get_SerialNum+0x54>)
 800dca0:	68b8      	ldr	r0, [r7, #8]
 800dca2:	f000 f80f 	bl	800dcc4 <IntToUnicode>
  }
}
 800dca6:	bf00      	nop
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	1fff7590 	.word	0x1fff7590
 800dcb4:	1fff7594 	.word	0x1fff7594
 800dcb8:	1fff7598 	.word	0x1fff7598
 800dcbc:	2000016e 	.word	0x2000016e
 800dcc0:	2000017e 	.word	0x2000017e

0800dcc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b087      	sub	sp, #28
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	75fb      	strb	r3, [r7, #23]
 800dcda:	e027      	b.n	800dd2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	0f1b      	lsrs	r3, r3, #28
 800dce0:	2b09      	cmp	r3, #9
 800dce2:	d80b      	bhi.n	800dcfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	0f1b      	lsrs	r3, r3, #28
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	7dfb      	ldrb	r3, [r7, #23]
 800dcec:	005b      	lsls	r3, r3, #1
 800dcee:	4619      	mov	r1, r3
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	440b      	add	r3, r1
 800dcf4:	3230      	adds	r2, #48	@ 0x30
 800dcf6:	b2d2      	uxtb	r2, r2
 800dcf8:	701a      	strb	r2, [r3, #0]
 800dcfa:	e00a      	b.n	800dd12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	0f1b      	lsrs	r3, r3, #28
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	7dfb      	ldrb	r3, [r7, #23]
 800dd04:	005b      	lsls	r3, r3, #1
 800dd06:	4619      	mov	r1, r3
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	440b      	add	r3, r1
 800dd0c:	3237      	adds	r2, #55	@ 0x37
 800dd0e:	b2d2      	uxtb	r2, r2
 800dd10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	011b      	lsls	r3, r3, #4
 800dd16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd18:	7dfb      	ldrb	r3, [r7, #23]
 800dd1a:	005b      	lsls	r3, r3, #1
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	4413      	add	r3, r2
 800dd22:	2200      	movs	r2, #0
 800dd24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd26:	7dfb      	ldrb	r3, [r7, #23]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	75fb      	strb	r3, [r7, #23]
 800dd2c:	7dfa      	ldrb	r2, [r7, #23]
 800dd2e:	79fb      	ldrb	r3, [r7, #7]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d3d3      	bcc.n	800dcdc <IntToUnicode+0x18>
  }
}
 800dd34:	bf00      	nop
 800dd36:	bf00      	nop
 800dd38:	371c      	adds	r7, #28
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr
	...

0800dd44 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b098      	sub	sp, #96	@ 0x60
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dd4c:	f107 0310 	add.w	r3, r7, #16
 800dd50:	2250      	movs	r2, #80	@ 0x50
 800dd52:	2100      	movs	r1, #0
 800dd54:	4618      	mov	r0, r3
 800dd56:	f001 f84d 	bl	800edf4 <memset>
  if(pcdHandle->Instance==USB)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a15      	ldr	r2, [pc, #84]	@ (800ddb4 <HAL_PCD_MspInit+0x70>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d122      	bne.n	800ddaa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dd64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dd68:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dd6e:	f107 0310 	add.w	r3, r7, #16
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7f7 ff42 	bl	8005bfc <HAL_RCCEx_PeriphCLKConfig>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800dd7e:	f7f3 fd9b 	bl	80018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dd82:	4b0d      	ldr	r3, [pc, #52]	@ (800ddb8 <HAL_PCD_MspInit+0x74>)
 800dd84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd86:	4a0c      	ldr	r2, [pc, #48]	@ (800ddb8 <HAL_PCD_MspInit+0x74>)
 800dd88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dd8c:	6593      	str	r3, [r2, #88]	@ 0x58
 800dd8e:	4b0a      	ldr	r3, [pc, #40]	@ (800ddb8 <HAL_PCD_MspInit+0x74>)
 800dd90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd96:	60fb      	str	r3, [r7, #12]
 800dd98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	2105      	movs	r1, #5
 800dd9e:	2014      	movs	r0, #20
 800dda0:	f7f4 f974 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800dda4:	2014      	movs	r0, #20
 800dda6:	f7f4 f98b 	bl	80020c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ddaa:	bf00      	nop
 800ddac:	3760      	adds	r7, #96	@ 0x60
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	40005c00 	.word	0x40005c00
 800ddb8:	40021000 	.word	0x40021000

0800ddbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	4610      	mov	r0, r2
 800ddd4:	f7fb fd52 	bl	800987c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ddd8:	bf00      	nop
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	460b      	mov	r3, r1
 800ddea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ddf2:	78fa      	ldrb	r2, [r7, #3]
 800ddf4:	6879      	ldr	r1, [r7, #4]
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	4413      	add	r3, r2
 800ddfc:	00db      	lsls	r3, r3, #3
 800ddfe:	440b      	add	r3, r1
 800de00:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	78fb      	ldrb	r3, [r7, #3]
 800de08:	4619      	mov	r1, r3
 800de0a:	f7fb fd8c 	bl	8009926 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800de0e:	bf00      	nop
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b082      	sub	sp, #8
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	460b      	mov	r3, r1
 800de20:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800de28:	78fa      	ldrb	r2, [r7, #3]
 800de2a:	6879      	ldr	r1, [r7, #4]
 800de2c:	4613      	mov	r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	4413      	add	r3, r2
 800de32:	00db      	lsls	r3, r3, #3
 800de34:	440b      	add	r3, r1
 800de36:	3324      	adds	r3, #36	@ 0x24
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	78fb      	ldrb	r3, [r7, #3]
 800de3c:	4619      	mov	r1, r3
 800de3e:	f7fb fdd5 	bl	80099ec <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800de42:	bf00      	nop
 800de44:	3708      	adds	r7, #8
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b082      	sub	sp, #8
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fb fee9 	bl	8009c30 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800de5e:	bf00      	nop
 800de60:	3708      	adds	r7, #8
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de66:	b580      	push	{r7, lr}
 800de68:	b084      	sub	sp, #16
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800de6e:	2301      	movs	r3, #1
 800de70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	795b      	ldrb	r3, [r3, #5]
 800de76:	2b02      	cmp	r3, #2
 800de78:	d001      	beq.n	800de7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800de7a:	f7f3 fd1d 	bl	80018b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800de84:	7bfa      	ldrb	r2, [r7, #15]
 800de86:	4611      	mov	r1, r2
 800de88:	4618      	mov	r0, r3
 800de8a:	f7fb fe93 	bl	8009bb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800de94:	4618      	mov	r0, r3
 800de96:	f7fb fe3f 	bl	8009b18 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800de9a:	bf00      	nop
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
	...

0800dea4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fb fe8e 	bl	8009bd4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	7a5b      	ldrb	r3, [r3, #9]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d005      	beq.n	800decc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dec0:	4b04      	ldr	r3, [pc, #16]	@ (800ded4 <HAL_PCD_SuspendCallback+0x30>)
 800dec2:	691b      	ldr	r3, [r3, #16]
 800dec4:	4a03      	ldr	r2, [pc, #12]	@ (800ded4 <HAL_PCD_SuspendCallback+0x30>)
 800dec6:	f043 0306 	orr.w	r3, r3, #6
 800deca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800decc:	bf00      	nop
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	e000ed00 	.word	0xe000ed00

0800ded8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	7a5b      	ldrb	r3, [r3, #9]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d007      	beq.n	800def8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dee8:	4b08      	ldr	r3, [pc, #32]	@ (800df0c <HAL_PCD_ResumeCallback+0x34>)
 800deea:	691b      	ldr	r3, [r3, #16]
 800deec:	4a07      	ldr	r2, [pc, #28]	@ (800df0c <HAL_PCD_ResumeCallback+0x34>)
 800deee:	f023 0306 	bic.w	r3, r3, #6
 800def2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800def4:	f000 f9f8 	bl	800e2e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800defe:	4618      	mov	r0, r3
 800df00:	f7fb fe7e 	bl	8009c00 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800df04:	bf00      	nop
 800df06:	3708      	adds	r7, #8
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	e000ed00 	.word	0xe000ed00

0800df10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800df18:	4a2b      	ldr	r2, [pc, #172]	@ (800dfc8 <USBD_LL_Init+0xb8>)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	4a29      	ldr	r2, [pc, #164]	@ (800dfc8 <USBD_LL_Init+0xb8>)
 800df24:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800df28:	4b27      	ldr	r3, [pc, #156]	@ (800dfc8 <USBD_LL_Init+0xb8>)
 800df2a:	4a28      	ldr	r2, [pc, #160]	@ (800dfcc <USBD_LL_Init+0xbc>)
 800df2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800df2e:	4b26      	ldr	r3, [pc, #152]	@ (800dfc8 <USBD_LL_Init+0xb8>)
 800df30:	2208      	movs	r2, #8
 800df32:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800df34:	4b24      	ldr	r3, [pc, #144]	@ (800dfc8 <USBD_LL_Init+0xb8>)
 800df36:	2202      	movs	r2, #2
 800df38:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800df3a:	4b23      	ldr	r3, [pc, #140]	@ (800dfc8 <USBD_LL_Init+0xb8>)
 800df3c:	2202      	movs	r2, #2
 800df3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800df40:	4b21      	ldr	r3, [pc, #132]	@ (800dfc8 <USBD_LL_Init+0xb8>)
 800df42:	2200      	movs	r2, #0
 800df44:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800df46:	4b20      	ldr	r3, [pc, #128]	@ (800dfc8 <USBD_LL_Init+0xb8>)
 800df48:	2200      	movs	r2, #0
 800df4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800df4c:	4b1e      	ldr	r3, [pc, #120]	@ (800dfc8 <USBD_LL_Init+0xb8>)
 800df4e:	2200      	movs	r2, #0
 800df50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800df52:	4b1d      	ldr	r3, [pc, #116]	@ (800dfc8 <USBD_LL_Init+0xb8>)
 800df54:	2200      	movs	r2, #0
 800df56:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800df58:	481b      	ldr	r0, [pc, #108]	@ (800dfc8 <USBD_LL_Init+0xb8>)
 800df5a:	f7f5 fb3a 	bl	80035d2 <HAL_PCD_Init>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d001      	beq.n	800df68 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800df64:	f7f3 fca8 	bl	80018b8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800df6e:	2318      	movs	r3, #24
 800df70:	2200      	movs	r2, #0
 800df72:	2100      	movs	r1, #0
 800df74:	f7f6 ffc1 	bl	8004efa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800df7e:	2358      	movs	r3, #88	@ 0x58
 800df80:	2200      	movs	r2, #0
 800df82:	2180      	movs	r1, #128	@ 0x80
 800df84:	f7f6 ffb9 	bl	8004efa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800df8e:	23c0      	movs	r3, #192	@ 0xc0
 800df90:	2200      	movs	r2, #0
 800df92:	2181      	movs	r1, #129	@ 0x81
 800df94:	f7f6 ffb1 	bl	8004efa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800df9e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	2101      	movs	r1, #1
 800dfa6:	f7f6 ffa8 	bl	8004efa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dfb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	2182      	movs	r1, #130	@ 0x82
 800dfb8:	f7f6 ff9f 	bl	8004efa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dfbc:	2300      	movs	r3, #0
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3708      	adds	r7, #8
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	200071a0 	.word	0x200071a0
 800dfcc:	40005c00 	.word	0x40005c00

0800dfd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7f5 fbc1 	bl	800376e <HAL_PCD_Start>
 800dfec:	4603      	mov	r3, r0
 800dfee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
 800dff2:	4618      	mov	r0, r3
 800dff4:	f000 f97e 	bl	800e2f4 <USBD_Get_USB_Status>
 800dff8:	4603      	mov	r3, r0
 800dffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dffc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b084      	sub	sp, #16
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
 800e00e:	4608      	mov	r0, r1
 800e010:	4611      	mov	r1, r2
 800e012:	461a      	mov	r2, r3
 800e014:	4603      	mov	r3, r0
 800e016:	70fb      	strb	r3, [r7, #3]
 800e018:	460b      	mov	r3, r1
 800e01a:	70bb      	strb	r3, [r7, #2]
 800e01c:	4613      	mov	r3, r2
 800e01e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e024:	2300      	movs	r3, #0
 800e026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e02e:	78bb      	ldrb	r3, [r7, #2]
 800e030:	883a      	ldrh	r2, [r7, #0]
 800e032:	78f9      	ldrb	r1, [r7, #3]
 800e034:	f7f5 fd08 	bl	8003a48 <HAL_PCD_EP_Open>
 800e038:	4603      	mov	r3, r0
 800e03a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 f958 	bl	800e2f4 <USBD_Get_USB_Status>
 800e044:	4603      	mov	r3, r0
 800e046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e048:	7bbb      	ldrb	r3, [r7, #14]
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3710      	adds	r7, #16
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b084      	sub	sp, #16
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
 800e05a:	460b      	mov	r3, r1
 800e05c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e05e:	2300      	movs	r3, #0
 800e060:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e062:	2300      	movs	r3, #0
 800e064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e06c:	78fa      	ldrb	r2, [r7, #3]
 800e06e:	4611      	mov	r1, r2
 800e070:	4618      	mov	r0, r3
 800e072:	f7f5 fd48 	bl	8003b06 <HAL_PCD_EP_Close>
 800e076:	4603      	mov	r3, r0
 800e078:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e07a:	7bfb      	ldrb	r3, [r7, #15]
 800e07c:	4618      	mov	r0, r3
 800e07e:	f000 f939 	bl	800e2f4 <USBD_Get_USB_Status>
 800e082:	4603      	mov	r3, r0
 800e084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e086:	7bbb      	ldrb	r3, [r7, #14]
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3710      	adds	r7, #16
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	460b      	mov	r3, r1
 800e09a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e0aa:	78fa      	ldrb	r2, [r7, #3]
 800e0ac:	4611      	mov	r1, r2
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7f5 fdf1 	bl	8003c96 <HAL_PCD_EP_SetStall>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 f91a 	bl	800e2f4 <USBD_Get_USB_Status>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b084      	sub	sp, #16
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e0e8:	78fa      	ldrb	r2, [r7, #3]
 800e0ea:	4611      	mov	r1, r2
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7f5 fe24 	bl	8003d3a <HAL_PCD_EP_ClrStall>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f000 f8fb 	bl	800e2f4 <USBD_Get_USB_Status>
 800e0fe:	4603      	mov	r3, r0
 800e100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e102:	7bbb      	ldrb	r3, [r7, #14]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b085      	sub	sp, #20
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	460b      	mov	r3, r1
 800e116:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e11e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e124:	2b00      	cmp	r3, #0
 800e126:	da0b      	bge.n	800e140 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e128:	78fb      	ldrb	r3, [r7, #3]
 800e12a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e12e:	68f9      	ldr	r1, [r7, #12]
 800e130:	4613      	mov	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	440b      	add	r3, r1
 800e13a:	3312      	adds	r3, #18
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	e00b      	b.n	800e158 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e140:	78fb      	ldrb	r3, [r7, #3]
 800e142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e146:	68f9      	ldr	r1, [r7, #12]
 800e148:	4613      	mov	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	00db      	lsls	r3, r3, #3
 800e150:	440b      	add	r3, r1
 800e152:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e156:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3714      	adds	r7, #20
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	460b      	mov	r3, r1
 800e16e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e170:	2300      	movs	r3, #0
 800e172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e174:	2300      	movs	r3, #0
 800e176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e17e:	78fa      	ldrb	r2, [r7, #3]
 800e180:	4611      	mov	r1, r2
 800e182:	4618      	mov	r0, r3
 800e184:	f7f5 fc3c 	bl	8003a00 <HAL_PCD_SetAddress>
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e18c:	7bfb      	ldrb	r3, [r7, #15]
 800e18e:	4618      	mov	r0, r3
 800e190:	f000 f8b0 	bl	800e2f4 <USBD_Get_USB_Status>
 800e194:	4603      	mov	r3, r0
 800e196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e198:	7bbb      	ldrb	r3, [r7, #14]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b086      	sub	sp, #24
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	60f8      	str	r0, [r7, #12]
 800e1aa:	607a      	str	r2, [r7, #4]
 800e1ac:	603b      	str	r3, [r7, #0]
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e1c0:	7af9      	ldrb	r1, [r7, #11]
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	f7f5 fd2f 	bl	8003c28 <HAL_PCD_EP_Transmit>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1ce:	7dfb      	ldrb	r3, [r7, #23]
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f000 f88f 	bl	800e2f4 <USBD_Get_USB_Status>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e1da:	7dbb      	ldrb	r3, [r7, #22]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3718      	adds	r7, #24
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b086      	sub	sp, #24
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	607a      	str	r2, [r7, #4]
 800e1ee:	603b      	str	r3, [r7, #0]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e202:	7af9      	ldrb	r1, [r7, #11]
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	f7f5 fcc5 	bl	8003b96 <HAL_PCD_EP_Receive>
 800e20c:	4603      	mov	r3, r0
 800e20e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e210:	7dfb      	ldrb	r3, [r7, #23]
 800e212:	4618      	mov	r0, r3
 800e214:	f000 f86e 	bl	800e2f4 <USBD_Get_USB_Status>
 800e218:	4603      	mov	r3, r0
 800e21a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e21c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3718      	adds	r7, #24
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e226:	b580      	push	{r7, lr}
 800e228:	b082      	sub	sp, #8
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	460b      	mov	r3, r1
 800e230:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e238:	78fa      	ldrb	r2, [r7, #3]
 800e23a:	4611      	mov	r1, r2
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7f5 fcdb 	bl	8003bf8 <HAL_PCD_EP_GetRxCount>
 800e242:	4603      	mov	r3, r0
}
 800e244:	4618      	mov	r0, r3
 800e246:	3708      	adds	r7, #8
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	460b      	mov	r3, r1
 800e256:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e258:	78fb      	ldrb	r3, [r7, #3]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d002      	beq.n	800e264 <HAL_PCDEx_LPM_Callback+0x18>
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d013      	beq.n	800e28a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e262:	e023      	b.n	800e2ac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	7a5b      	ldrb	r3, [r3, #9]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d007      	beq.n	800e27c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e26c:	f000 f83c 	bl	800e2e8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e270:	4b10      	ldr	r3, [pc, #64]	@ (800e2b4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e272:	691b      	ldr	r3, [r3, #16]
 800e274:	4a0f      	ldr	r2, [pc, #60]	@ (800e2b4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e276:	f023 0306 	bic.w	r3, r3, #6
 800e27a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e282:	4618      	mov	r0, r3
 800e284:	f7fb fcbc 	bl	8009c00 <USBD_LL_Resume>
    break;
 800e288:	e010      	b.n	800e2ac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e290:	4618      	mov	r0, r3
 800e292:	f7fb fc9f 	bl	8009bd4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	7a5b      	ldrb	r3, [r3, #9]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d005      	beq.n	800e2aa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e29e:	4b05      	ldr	r3, [pc, #20]	@ (800e2b4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e2a0:	691b      	ldr	r3, [r3, #16]
 800e2a2:	4a04      	ldr	r2, [pc, #16]	@ (800e2b4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e2a4:	f043 0306 	orr.w	r3, r3, #6
 800e2a8:	6113      	str	r3, [r2, #16]
    break;
 800e2aa:	bf00      	nop
}
 800e2ac:	bf00      	nop
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	e000ed00 	.word	0xe000ed00

0800e2b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e2c0:	4b03      	ldr	r3, [pc, #12]	@ (800e2d0 <USBD_static_malloc+0x18>)
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	370c      	adds	r7, #12
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop
 800e2d0:	2000747c 	.word	0x2000747c

0800e2d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]

}
 800e2dc:	bf00      	nop
 800e2de:	370c      	adds	r7, #12
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e2ec:	f7f3 f8d4 	bl	8001498 <SystemClock_Config>
}
 800e2f0:	bf00      	nop
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e302:	79fb      	ldrb	r3, [r7, #7]
 800e304:	2b03      	cmp	r3, #3
 800e306:	d817      	bhi.n	800e338 <USBD_Get_USB_Status+0x44>
 800e308:	a201      	add	r2, pc, #4	@ (adr r2, 800e310 <USBD_Get_USB_Status+0x1c>)
 800e30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e30e:	bf00      	nop
 800e310:	0800e321 	.word	0x0800e321
 800e314:	0800e327 	.word	0x0800e327
 800e318:	0800e32d 	.word	0x0800e32d
 800e31c:	0800e333 	.word	0x0800e333
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	73fb      	strb	r3, [r7, #15]
    break;
 800e324:	e00b      	b.n	800e33e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e326:	2303      	movs	r3, #3
 800e328:	73fb      	strb	r3, [r7, #15]
    break;
 800e32a:	e008      	b.n	800e33e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e32c:	2301      	movs	r3, #1
 800e32e:	73fb      	strb	r3, [r7, #15]
    break;
 800e330:	e005      	b.n	800e33e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e332:	2303      	movs	r3, #3
 800e334:	73fb      	strb	r3, [r7, #15]
    break;
 800e336:	e002      	b.n	800e33e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e338:	2303      	movs	r3, #3
 800e33a:	73fb      	strb	r3, [r7, #15]
    break;
 800e33c:	bf00      	nop
  }
  return usb_status;
 800e33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3714      	adds	r7, #20
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <__cvt>:
 800e34c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e350:	ec57 6b10 	vmov	r6, r7, d0
 800e354:	2f00      	cmp	r7, #0
 800e356:	460c      	mov	r4, r1
 800e358:	4619      	mov	r1, r3
 800e35a:	463b      	mov	r3, r7
 800e35c:	bfbb      	ittet	lt
 800e35e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e362:	461f      	movlt	r7, r3
 800e364:	2300      	movge	r3, #0
 800e366:	232d      	movlt	r3, #45	@ 0x2d
 800e368:	700b      	strb	r3, [r1, #0]
 800e36a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e36c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e370:	4691      	mov	r9, r2
 800e372:	f023 0820 	bic.w	r8, r3, #32
 800e376:	bfbc      	itt	lt
 800e378:	4632      	movlt	r2, r6
 800e37a:	4616      	movlt	r6, r2
 800e37c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e380:	d005      	beq.n	800e38e <__cvt+0x42>
 800e382:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e386:	d100      	bne.n	800e38a <__cvt+0x3e>
 800e388:	3401      	adds	r4, #1
 800e38a:	2102      	movs	r1, #2
 800e38c:	e000      	b.n	800e390 <__cvt+0x44>
 800e38e:	2103      	movs	r1, #3
 800e390:	ab03      	add	r3, sp, #12
 800e392:	9301      	str	r3, [sp, #4]
 800e394:	ab02      	add	r3, sp, #8
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	ec47 6b10 	vmov	d0, r6, r7
 800e39c:	4653      	mov	r3, sl
 800e39e:	4622      	mov	r2, r4
 800e3a0:	f000 fe4e 	bl	800f040 <_dtoa_r>
 800e3a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e3a8:	4605      	mov	r5, r0
 800e3aa:	d119      	bne.n	800e3e0 <__cvt+0x94>
 800e3ac:	f019 0f01 	tst.w	r9, #1
 800e3b0:	d00e      	beq.n	800e3d0 <__cvt+0x84>
 800e3b2:	eb00 0904 	add.w	r9, r0, r4
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	4639      	mov	r1, r7
 800e3be:	f7f2 fbab 	bl	8000b18 <__aeabi_dcmpeq>
 800e3c2:	b108      	cbz	r0, 800e3c8 <__cvt+0x7c>
 800e3c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3c8:	2230      	movs	r2, #48	@ 0x30
 800e3ca:	9b03      	ldr	r3, [sp, #12]
 800e3cc:	454b      	cmp	r3, r9
 800e3ce:	d31e      	bcc.n	800e40e <__cvt+0xc2>
 800e3d0:	9b03      	ldr	r3, [sp, #12]
 800e3d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3d4:	1b5b      	subs	r3, r3, r5
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	6013      	str	r3, [r2, #0]
 800e3da:	b004      	add	sp, #16
 800e3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e3e4:	eb00 0904 	add.w	r9, r0, r4
 800e3e8:	d1e5      	bne.n	800e3b6 <__cvt+0x6a>
 800e3ea:	7803      	ldrb	r3, [r0, #0]
 800e3ec:	2b30      	cmp	r3, #48	@ 0x30
 800e3ee:	d10a      	bne.n	800e406 <__cvt+0xba>
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	4639      	mov	r1, r7
 800e3f8:	f7f2 fb8e 	bl	8000b18 <__aeabi_dcmpeq>
 800e3fc:	b918      	cbnz	r0, 800e406 <__cvt+0xba>
 800e3fe:	f1c4 0401 	rsb	r4, r4, #1
 800e402:	f8ca 4000 	str.w	r4, [sl]
 800e406:	f8da 3000 	ldr.w	r3, [sl]
 800e40a:	4499      	add	r9, r3
 800e40c:	e7d3      	b.n	800e3b6 <__cvt+0x6a>
 800e40e:	1c59      	adds	r1, r3, #1
 800e410:	9103      	str	r1, [sp, #12]
 800e412:	701a      	strb	r2, [r3, #0]
 800e414:	e7d9      	b.n	800e3ca <__cvt+0x7e>

0800e416 <__exponent>:
 800e416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e418:	2900      	cmp	r1, #0
 800e41a:	bfba      	itte	lt
 800e41c:	4249      	neglt	r1, r1
 800e41e:	232d      	movlt	r3, #45	@ 0x2d
 800e420:	232b      	movge	r3, #43	@ 0x2b
 800e422:	2909      	cmp	r1, #9
 800e424:	7002      	strb	r2, [r0, #0]
 800e426:	7043      	strb	r3, [r0, #1]
 800e428:	dd29      	ble.n	800e47e <__exponent+0x68>
 800e42a:	f10d 0307 	add.w	r3, sp, #7
 800e42e:	461d      	mov	r5, r3
 800e430:	270a      	movs	r7, #10
 800e432:	461a      	mov	r2, r3
 800e434:	fbb1 f6f7 	udiv	r6, r1, r7
 800e438:	fb07 1416 	mls	r4, r7, r6, r1
 800e43c:	3430      	adds	r4, #48	@ 0x30
 800e43e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e442:	460c      	mov	r4, r1
 800e444:	2c63      	cmp	r4, #99	@ 0x63
 800e446:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e44a:	4631      	mov	r1, r6
 800e44c:	dcf1      	bgt.n	800e432 <__exponent+0x1c>
 800e44e:	3130      	adds	r1, #48	@ 0x30
 800e450:	1e94      	subs	r4, r2, #2
 800e452:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e456:	1c41      	adds	r1, r0, #1
 800e458:	4623      	mov	r3, r4
 800e45a:	42ab      	cmp	r3, r5
 800e45c:	d30a      	bcc.n	800e474 <__exponent+0x5e>
 800e45e:	f10d 0309 	add.w	r3, sp, #9
 800e462:	1a9b      	subs	r3, r3, r2
 800e464:	42ac      	cmp	r4, r5
 800e466:	bf88      	it	hi
 800e468:	2300      	movhi	r3, #0
 800e46a:	3302      	adds	r3, #2
 800e46c:	4403      	add	r3, r0
 800e46e:	1a18      	subs	r0, r3, r0
 800e470:	b003      	add	sp, #12
 800e472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e474:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e478:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e47c:	e7ed      	b.n	800e45a <__exponent+0x44>
 800e47e:	2330      	movs	r3, #48	@ 0x30
 800e480:	3130      	adds	r1, #48	@ 0x30
 800e482:	7083      	strb	r3, [r0, #2]
 800e484:	70c1      	strb	r1, [r0, #3]
 800e486:	1d03      	adds	r3, r0, #4
 800e488:	e7f1      	b.n	800e46e <__exponent+0x58>
	...

0800e48c <_printf_float>:
 800e48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e490:	b08d      	sub	sp, #52	@ 0x34
 800e492:	460c      	mov	r4, r1
 800e494:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e498:	4616      	mov	r6, r2
 800e49a:	461f      	mov	r7, r3
 800e49c:	4605      	mov	r5, r0
 800e49e:	f000 fcb1 	bl	800ee04 <_localeconv_r>
 800e4a2:	6803      	ldr	r3, [r0, #0]
 800e4a4:	9304      	str	r3, [sp, #16]
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7f1 ff0a 	bl	80002c0 <strlen>
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b4:	9005      	str	r0, [sp, #20]
 800e4b6:	3307      	adds	r3, #7
 800e4b8:	f023 0307 	bic.w	r3, r3, #7
 800e4bc:	f103 0208 	add.w	r2, r3, #8
 800e4c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e4c4:	f8d4 b000 	ldr.w	fp, [r4]
 800e4c8:	f8c8 2000 	str.w	r2, [r8]
 800e4cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e4d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e4d4:	9307      	str	r3, [sp, #28]
 800e4d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e4de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4e2:	4b9c      	ldr	r3, [pc, #624]	@ (800e754 <_printf_float+0x2c8>)
 800e4e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e4e8:	f7f2 fb48 	bl	8000b7c <__aeabi_dcmpun>
 800e4ec:	bb70      	cbnz	r0, 800e54c <_printf_float+0xc0>
 800e4ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4f2:	4b98      	ldr	r3, [pc, #608]	@ (800e754 <_printf_float+0x2c8>)
 800e4f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e4f8:	f7f2 fb22 	bl	8000b40 <__aeabi_dcmple>
 800e4fc:	bb30      	cbnz	r0, 800e54c <_printf_float+0xc0>
 800e4fe:	2200      	movs	r2, #0
 800e500:	2300      	movs	r3, #0
 800e502:	4640      	mov	r0, r8
 800e504:	4649      	mov	r1, r9
 800e506:	f7f2 fb11 	bl	8000b2c <__aeabi_dcmplt>
 800e50a:	b110      	cbz	r0, 800e512 <_printf_float+0x86>
 800e50c:	232d      	movs	r3, #45	@ 0x2d
 800e50e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e512:	4a91      	ldr	r2, [pc, #580]	@ (800e758 <_printf_float+0x2cc>)
 800e514:	4b91      	ldr	r3, [pc, #580]	@ (800e75c <_printf_float+0x2d0>)
 800e516:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e51a:	bf94      	ite	ls
 800e51c:	4690      	movls	r8, r2
 800e51e:	4698      	movhi	r8, r3
 800e520:	2303      	movs	r3, #3
 800e522:	6123      	str	r3, [r4, #16]
 800e524:	f02b 0304 	bic.w	r3, fp, #4
 800e528:	6023      	str	r3, [r4, #0]
 800e52a:	f04f 0900 	mov.w	r9, #0
 800e52e:	9700      	str	r7, [sp, #0]
 800e530:	4633      	mov	r3, r6
 800e532:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e534:	4621      	mov	r1, r4
 800e536:	4628      	mov	r0, r5
 800e538:	f000 f9d2 	bl	800e8e0 <_printf_common>
 800e53c:	3001      	adds	r0, #1
 800e53e:	f040 808d 	bne.w	800e65c <_printf_float+0x1d0>
 800e542:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e546:	b00d      	add	sp, #52	@ 0x34
 800e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54c:	4642      	mov	r2, r8
 800e54e:	464b      	mov	r3, r9
 800e550:	4640      	mov	r0, r8
 800e552:	4649      	mov	r1, r9
 800e554:	f7f2 fb12 	bl	8000b7c <__aeabi_dcmpun>
 800e558:	b140      	cbz	r0, 800e56c <_printf_float+0xe0>
 800e55a:	464b      	mov	r3, r9
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	bfbc      	itt	lt
 800e560:	232d      	movlt	r3, #45	@ 0x2d
 800e562:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e566:	4a7e      	ldr	r2, [pc, #504]	@ (800e760 <_printf_float+0x2d4>)
 800e568:	4b7e      	ldr	r3, [pc, #504]	@ (800e764 <_printf_float+0x2d8>)
 800e56a:	e7d4      	b.n	800e516 <_printf_float+0x8a>
 800e56c:	6863      	ldr	r3, [r4, #4]
 800e56e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e572:	9206      	str	r2, [sp, #24]
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	d13b      	bne.n	800e5f0 <_printf_float+0x164>
 800e578:	2306      	movs	r3, #6
 800e57a:	6063      	str	r3, [r4, #4]
 800e57c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e580:	2300      	movs	r3, #0
 800e582:	6022      	str	r2, [r4, #0]
 800e584:	9303      	str	r3, [sp, #12]
 800e586:	ab0a      	add	r3, sp, #40	@ 0x28
 800e588:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e58c:	ab09      	add	r3, sp, #36	@ 0x24
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	6861      	ldr	r1, [r4, #4]
 800e592:	ec49 8b10 	vmov	d0, r8, r9
 800e596:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e59a:	4628      	mov	r0, r5
 800e59c:	f7ff fed6 	bl	800e34c <__cvt>
 800e5a0:	9b06      	ldr	r3, [sp, #24]
 800e5a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e5a4:	2b47      	cmp	r3, #71	@ 0x47
 800e5a6:	4680      	mov	r8, r0
 800e5a8:	d129      	bne.n	800e5fe <_printf_float+0x172>
 800e5aa:	1cc8      	adds	r0, r1, #3
 800e5ac:	db02      	blt.n	800e5b4 <_printf_float+0x128>
 800e5ae:	6863      	ldr	r3, [r4, #4]
 800e5b0:	4299      	cmp	r1, r3
 800e5b2:	dd41      	ble.n	800e638 <_printf_float+0x1ac>
 800e5b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800e5b8:	fa5f fa8a 	uxtb.w	sl, sl
 800e5bc:	3901      	subs	r1, #1
 800e5be:	4652      	mov	r2, sl
 800e5c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e5c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e5c6:	f7ff ff26 	bl	800e416 <__exponent>
 800e5ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5cc:	1813      	adds	r3, r2, r0
 800e5ce:	2a01      	cmp	r2, #1
 800e5d0:	4681      	mov	r9, r0
 800e5d2:	6123      	str	r3, [r4, #16]
 800e5d4:	dc02      	bgt.n	800e5dc <_printf_float+0x150>
 800e5d6:	6822      	ldr	r2, [r4, #0]
 800e5d8:	07d2      	lsls	r2, r2, #31
 800e5da:	d501      	bpl.n	800e5e0 <_printf_float+0x154>
 800e5dc:	3301      	adds	r3, #1
 800e5de:	6123      	str	r3, [r4, #16]
 800e5e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d0a2      	beq.n	800e52e <_printf_float+0xa2>
 800e5e8:	232d      	movs	r3, #45	@ 0x2d
 800e5ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5ee:	e79e      	b.n	800e52e <_printf_float+0xa2>
 800e5f0:	9a06      	ldr	r2, [sp, #24]
 800e5f2:	2a47      	cmp	r2, #71	@ 0x47
 800e5f4:	d1c2      	bne.n	800e57c <_printf_float+0xf0>
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d1c0      	bne.n	800e57c <_printf_float+0xf0>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e7bd      	b.n	800e57a <_printf_float+0xee>
 800e5fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e602:	d9db      	bls.n	800e5bc <_printf_float+0x130>
 800e604:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e608:	d118      	bne.n	800e63c <_printf_float+0x1b0>
 800e60a:	2900      	cmp	r1, #0
 800e60c:	6863      	ldr	r3, [r4, #4]
 800e60e:	dd0b      	ble.n	800e628 <_printf_float+0x19c>
 800e610:	6121      	str	r1, [r4, #16]
 800e612:	b913      	cbnz	r3, 800e61a <_printf_float+0x18e>
 800e614:	6822      	ldr	r2, [r4, #0]
 800e616:	07d0      	lsls	r0, r2, #31
 800e618:	d502      	bpl.n	800e620 <_printf_float+0x194>
 800e61a:	3301      	adds	r3, #1
 800e61c:	440b      	add	r3, r1
 800e61e:	6123      	str	r3, [r4, #16]
 800e620:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e622:	f04f 0900 	mov.w	r9, #0
 800e626:	e7db      	b.n	800e5e0 <_printf_float+0x154>
 800e628:	b913      	cbnz	r3, 800e630 <_printf_float+0x1a4>
 800e62a:	6822      	ldr	r2, [r4, #0]
 800e62c:	07d2      	lsls	r2, r2, #31
 800e62e:	d501      	bpl.n	800e634 <_printf_float+0x1a8>
 800e630:	3302      	adds	r3, #2
 800e632:	e7f4      	b.n	800e61e <_printf_float+0x192>
 800e634:	2301      	movs	r3, #1
 800e636:	e7f2      	b.n	800e61e <_printf_float+0x192>
 800e638:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e63c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e63e:	4299      	cmp	r1, r3
 800e640:	db05      	blt.n	800e64e <_printf_float+0x1c2>
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	6121      	str	r1, [r4, #16]
 800e646:	07d8      	lsls	r0, r3, #31
 800e648:	d5ea      	bpl.n	800e620 <_printf_float+0x194>
 800e64a:	1c4b      	adds	r3, r1, #1
 800e64c:	e7e7      	b.n	800e61e <_printf_float+0x192>
 800e64e:	2900      	cmp	r1, #0
 800e650:	bfd4      	ite	le
 800e652:	f1c1 0202 	rsble	r2, r1, #2
 800e656:	2201      	movgt	r2, #1
 800e658:	4413      	add	r3, r2
 800e65a:	e7e0      	b.n	800e61e <_printf_float+0x192>
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	055a      	lsls	r2, r3, #21
 800e660:	d407      	bmi.n	800e672 <_printf_float+0x1e6>
 800e662:	6923      	ldr	r3, [r4, #16]
 800e664:	4642      	mov	r2, r8
 800e666:	4631      	mov	r1, r6
 800e668:	4628      	mov	r0, r5
 800e66a:	47b8      	blx	r7
 800e66c:	3001      	adds	r0, #1
 800e66e:	d12b      	bne.n	800e6c8 <_printf_float+0x23c>
 800e670:	e767      	b.n	800e542 <_printf_float+0xb6>
 800e672:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e676:	f240 80dd 	bls.w	800e834 <_printf_float+0x3a8>
 800e67a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e67e:	2200      	movs	r2, #0
 800e680:	2300      	movs	r3, #0
 800e682:	f7f2 fa49 	bl	8000b18 <__aeabi_dcmpeq>
 800e686:	2800      	cmp	r0, #0
 800e688:	d033      	beq.n	800e6f2 <_printf_float+0x266>
 800e68a:	4a37      	ldr	r2, [pc, #220]	@ (800e768 <_printf_float+0x2dc>)
 800e68c:	2301      	movs	r3, #1
 800e68e:	4631      	mov	r1, r6
 800e690:	4628      	mov	r0, r5
 800e692:	47b8      	blx	r7
 800e694:	3001      	adds	r0, #1
 800e696:	f43f af54 	beq.w	800e542 <_printf_float+0xb6>
 800e69a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e69e:	4543      	cmp	r3, r8
 800e6a0:	db02      	blt.n	800e6a8 <_printf_float+0x21c>
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	07d8      	lsls	r0, r3, #31
 800e6a6:	d50f      	bpl.n	800e6c8 <_printf_float+0x23c>
 800e6a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6ac:	4631      	mov	r1, r6
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	47b8      	blx	r7
 800e6b2:	3001      	adds	r0, #1
 800e6b4:	f43f af45 	beq.w	800e542 <_printf_float+0xb6>
 800e6b8:	f04f 0900 	mov.w	r9, #0
 800e6bc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e6c0:	f104 0a1a 	add.w	sl, r4, #26
 800e6c4:	45c8      	cmp	r8, r9
 800e6c6:	dc09      	bgt.n	800e6dc <_printf_float+0x250>
 800e6c8:	6823      	ldr	r3, [r4, #0]
 800e6ca:	079b      	lsls	r3, r3, #30
 800e6cc:	f100 8103 	bmi.w	800e8d6 <_printf_float+0x44a>
 800e6d0:	68e0      	ldr	r0, [r4, #12]
 800e6d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6d4:	4298      	cmp	r0, r3
 800e6d6:	bfb8      	it	lt
 800e6d8:	4618      	movlt	r0, r3
 800e6da:	e734      	b.n	800e546 <_printf_float+0xba>
 800e6dc:	2301      	movs	r3, #1
 800e6de:	4652      	mov	r2, sl
 800e6e0:	4631      	mov	r1, r6
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	47b8      	blx	r7
 800e6e6:	3001      	adds	r0, #1
 800e6e8:	f43f af2b 	beq.w	800e542 <_printf_float+0xb6>
 800e6ec:	f109 0901 	add.w	r9, r9, #1
 800e6f0:	e7e8      	b.n	800e6c4 <_printf_float+0x238>
 800e6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	dc39      	bgt.n	800e76c <_printf_float+0x2e0>
 800e6f8:	4a1b      	ldr	r2, [pc, #108]	@ (800e768 <_printf_float+0x2dc>)
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	4631      	mov	r1, r6
 800e6fe:	4628      	mov	r0, r5
 800e700:	47b8      	blx	r7
 800e702:	3001      	adds	r0, #1
 800e704:	f43f af1d 	beq.w	800e542 <_printf_float+0xb6>
 800e708:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e70c:	ea59 0303 	orrs.w	r3, r9, r3
 800e710:	d102      	bne.n	800e718 <_printf_float+0x28c>
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	07d9      	lsls	r1, r3, #31
 800e716:	d5d7      	bpl.n	800e6c8 <_printf_float+0x23c>
 800e718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e71c:	4631      	mov	r1, r6
 800e71e:	4628      	mov	r0, r5
 800e720:	47b8      	blx	r7
 800e722:	3001      	adds	r0, #1
 800e724:	f43f af0d 	beq.w	800e542 <_printf_float+0xb6>
 800e728:	f04f 0a00 	mov.w	sl, #0
 800e72c:	f104 0b1a 	add.w	fp, r4, #26
 800e730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e732:	425b      	negs	r3, r3
 800e734:	4553      	cmp	r3, sl
 800e736:	dc01      	bgt.n	800e73c <_printf_float+0x2b0>
 800e738:	464b      	mov	r3, r9
 800e73a:	e793      	b.n	800e664 <_printf_float+0x1d8>
 800e73c:	2301      	movs	r3, #1
 800e73e:	465a      	mov	r2, fp
 800e740:	4631      	mov	r1, r6
 800e742:	4628      	mov	r0, r5
 800e744:	47b8      	blx	r7
 800e746:	3001      	adds	r0, #1
 800e748:	f43f aefb 	beq.w	800e542 <_printf_float+0xb6>
 800e74c:	f10a 0a01 	add.w	sl, sl, #1
 800e750:	e7ee      	b.n	800e730 <_printf_float+0x2a4>
 800e752:	bf00      	nop
 800e754:	7fefffff 	.word	0x7fefffff
 800e758:	08011420 	.word	0x08011420
 800e75c:	08011424 	.word	0x08011424
 800e760:	08011428 	.word	0x08011428
 800e764:	0801142c 	.word	0x0801142c
 800e768:	08011430 	.word	0x08011430
 800e76c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e76e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e772:	4553      	cmp	r3, sl
 800e774:	bfa8      	it	ge
 800e776:	4653      	movge	r3, sl
 800e778:	2b00      	cmp	r3, #0
 800e77a:	4699      	mov	r9, r3
 800e77c:	dc36      	bgt.n	800e7ec <_printf_float+0x360>
 800e77e:	f04f 0b00 	mov.w	fp, #0
 800e782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e786:	f104 021a 	add.w	r2, r4, #26
 800e78a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e78c:	9306      	str	r3, [sp, #24]
 800e78e:	eba3 0309 	sub.w	r3, r3, r9
 800e792:	455b      	cmp	r3, fp
 800e794:	dc31      	bgt.n	800e7fa <_printf_float+0x36e>
 800e796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e798:	459a      	cmp	sl, r3
 800e79a:	dc3a      	bgt.n	800e812 <_printf_float+0x386>
 800e79c:	6823      	ldr	r3, [r4, #0]
 800e79e:	07da      	lsls	r2, r3, #31
 800e7a0:	d437      	bmi.n	800e812 <_printf_float+0x386>
 800e7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7a4:	ebaa 0903 	sub.w	r9, sl, r3
 800e7a8:	9b06      	ldr	r3, [sp, #24]
 800e7aa:	ebaa 0303 	sub.w	r3, sl, r3
 800e7ae:	4599      	cmp	r9, r3
 800e7b0:	bfa8      	it	ge
 800e7b2:	4699      	movge	r9, r3
 800e7b4:	f1b9 0f00 	cmp.w	r9, #0
 800e7b8:	dc33      	bgt.n	800e822 <_printf_float+0x396>
 800e7ba:	f04f 0800 	mov.w	r8, #0
 800e7be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7c2:	f104 0b1a 	add.w	fp, r4, #26
 800e7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7c8:	ebaa 0303 	sub.w	r3, sl, r3
 800e7cc:	eba3 0309 	sub.w	r3, r3, r9
 800e7d0:	4543      	cmp	r3, r8
 800e7d2:	f77f af79 	ble.w	800e6c8 <_printf_float+0x23c>
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	465a      	mov	r2, fp
 800e7da:	4631      	mov	r1, r6
 800e7dc:	4628      	mov	r0, r5
 800e7de:	47b8      	blx	r7
 800e7e0:	3001      	adds	r0, #1
 800e7e2:	f43f aeae 	beq.w	800e542 <_printf_float+0xb6>
 800e7e6:	f108 0801 	add.w	r8, r8, #1
 800e7ea:	e7ec      	b.n	800e7c6 <_printf_float+0x33a>
 800e7ec:	4642      	mov	r2, r8
 800e7ee:	4631      	mov	r1, r6
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	47b8      	blx	r7
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	d1c2      	bne.n	800e77e <_printf_float+0x2f2>
 800e7f8:	e6a3      	b.n	800e542 <_printf_float+0xb6>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	4631      	mov	r1, r6
 800e7fe:	4628      	mov	r0, r5
 800e800:	9206      	str	r2, [sp, #24]
 800e802:	47b8      	blx	r7
 800e804:	3001      	adds	r0, #1
 800e806:	f43f ae9c 	beq.w	800e542 <_printf_float+0xb6>
 800e80a:	9a06      	ldr	r2, [sp, #24]
 800e80c:	f10b 0b01 	add.w	fp, fp, #1
 800e810:	e7bb      	b.n	800e78a <_printf_float+0x2fe>
 800e812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e816:	4631      	mov	r1, r6
 800e818:	4628      	mov	r0, r5
 800e81a:	47b8      	blx	r7
 800e81c:	3001      	adds	r0, #1
 800e81e:	d1c0      	bne.n	800e7a2 <_printf_float+0x316>
 800e820:	e68f      	b.n	800e542 <_printf_float+0xb6>
 800e822:	9a06      	ldr	r2, [sp, #24]
 800e824:	464b      	mov	r3, r9
 800e826:	4442      	add	r2, r8
 800e828:	4631      	mov	r1, r6
 800e82a:	4628      	mov	r0, r5
 800e82c:	47b8      	blx	r7
 800e82e:	3001      	adds	r0, #1
 800e830:	d1c3      	bne.n	800e7ba <_printf_float+0x32e>
 800e832:	e686      	b.n	800e542 <_printf_float+0xb6>
 800e834:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e838:	f1ba 0f01 	cmp.w	sl, #1
 800e83c:	dc01      	bgt.n	800e842 <_printf_float+0x3b6>
 800e83e:	07db      	lsls	r3, r3, #31
 800e840:	d536      	bpl.n	800e8b0 <_printf_float+0x424>
 800e842:	2301      	movs	r3, #1
 800e844:	4642      	mov	r2, r8
 800e846:	4631      	mov	r1, r6
 800e848:	4628      	mov	r0, r5
 800e84a:	47b8      	blx	r7
 800e84c:	3001      	adds	r0, #1
 800e84e:	f43f ae78 	beq.w	800e542 <_printf_float+0xb6>
 800e852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e856:	4631      	mov	r1, r6
 800e858:	4628      	mov	r0, r5
 800e85a:	47b8      	blx	r7
 800e85c:	3001      	adds	r0, #1
 800e85e:	f43f ae70 	beq.w	800e542 <_printf_float+0xb6>
 800e862:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e866:	2200      	movs	r2, #0
 800e868:	2300      	movs	r3, #0
 800e86a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e86e:	f7f2 f953 	bl	8000b18 <__aeabi_dcmpeq>
 800e872:	b9c0      	cbnz	r0, 800e8a6 <_printf_float+0x41a>
 800e874:	4653      	mov	r3, sl
 800e876:	f108 0201 	add.w	r2, r8, #1
 800e87a:	4631      	mov	r1, r6
 800e87c:	4628      	mov	r0, r5
 800e87e:	47b8      	blx	r7
 800e880:	3001      	adds	r0, #1
 800e882:	d10c      	bne.n	800e89e <_printf_float+0x412>
 800e884:	e65d      	b.n	800e542 <_printf_float+0xb6>
 800e886:	2301      	movs	r3, #1
 800e888:	465a      	mov	r2, fp
 800e88a:	4631      	mov	r1, r6
 800e88c:	4628      	mov	r0, r5
 800e88e:	47b8      	blx	r7
 800e890:	3001      	adds	r0, #1
 800e892:	f43f ae56 	beq.w	800e542 <_printf_float+0xb6>
 800e896:	f108 0801 	add.w	r8, r8, #1
 800e89a:	45d0      	cmp	r8, sl
 800e89c:	dbf3      	blt.n	800e886 <_printf_float+0x3fa>
 800e89e:	464b      	mov	r3, r9
 800e8a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e8a4:	e6df      	b.n	800e666 <_printf_float+0x1da>
 800e8a6:	f04f 0800 	mov.w	r8, #0
 800e8aa:	f104 0b1a 	add.w	fp, r4, #26
 800e8ae:	e7f4      	b.n	800e89a <_printf_float+0x40e>
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	4642      	mov	r2, r8
 800e8b4:	e7e1      	b.n	800e87a <_printf_float+0x3ee>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	464a      	mov	r2, r9
 800e8ba:	4631      	mov	r1, r6
 800e8bc:	4628      	mov	r0, r5
 800e8be:	47b8      	blx	r7
 800e8c0:	3001      	adds	r0, #1
 800e8c2:	f43f ae3e 	beq.w	800e542 <_printf_float+0xb6>
 800e8c6:	f108 0801 	add.w	r8, r8, #1
 800e8ca:	68e3      	ldr	r3, [r4, #12]
 800e8cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e8ce:	1a5b      	subs	r3, r3, r1
 800e8d0:	4543      	cmp	r3, r8
 800e8d2:	dcf0      	bgt.n	800e8b6 <_printf_float+0x42a>
 800e8d4:	e6fc      	b.n	800e6d0 <_printf_float+0x244>
 800e8d6:	f04f 0800 	mov.w	r8, #0
 800e8da:	f104 0919 	add.w	r9, r4, #25
 800e8de:	e7f4      	b.n	800e8ca <_printf_float+0x43e>

0800e8e0 <_printf_common>:
 800e8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e4:	4616      	mov	r6, r2
 800e8e6:	4698      	mov	r8, r3
 800e8e8:	688a      	ldr	r2, [r1, #8]
 800e8ea:	690b      	ldr	r3, [r1, #16]
 800e8ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	bfb8      	it	lt
 800e8f4:	4613      	movlt	r3, r2
 800e8f6:	6033      	str	r3, [r6, #0]
 800e8f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e8fc:	4607      	mov	r7, r0
 800e8fe:	460c      	mov	r4, r1
 800e900:	b10a      	cbz	r2, 800e906 <_printf_common+0x26>
 800e902:	3301      	adds	r3, #1
 800e904:	6033      	str	r3, [r6, #0]
 800e906:	6823      	ldr	r3, [r4, #0]
 800e908:	0699      	lsls	r1, r3, #26
 800e90a:	bf42      	ittt	mi
 800e90c:	6833      	ldrmi	r3, [r6, #0]
 800e90e:	3302      	addmi	r3, #2
 800e910:	6033      	strmi	r3, [r6, #0]
 800e912:	6825      	ldr	r5, [r4, #0]
 800e914:	f015 0506 	ands.w	r5, r5, #6
 800e918:	d106      	bne.n	800e928 <_printf_common+0x48>
 800e91a:	f104 0a19 	add.w	sl, r4, #25
 800e91e:	68e3      	ldr	r3, [r4, #12]
 800e920:	6832      	ldr	r2, [r6, #0]
 800e922:	1a9b      	subs	r3, r3, r2
 800e924:	42ab      	cmp	r3, r5
 800e926:	dc26      	bgt.n	800e976 <_printf_common+0x96>
 800e928:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e92c:	6822      	ldr	r2, [r4, #0]
 800e92e:	3b00      	subs	r3, #0
 800e930:	bf18      	it	ne
 800e932:	2301      	movne	r3, #1
 800e934:	0692      	lsls	r2, r2, #26
 800e936:	d42b      	bmi.n	800e990 <_printf_common+0xb0>
 800e938:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e93c:	4641      	mov	r1, r8
 800e93e:	4638      	mov	r0, r7
 800e940:	47c8      	blx	r9
 800e942:	3001      	adds	r0, #1
 800e944:	d01e      	beq.n	800e984 <_printf_common+0xa4>
 800e946:	6823      	ldr	r3, [r4, #0]
 800e948:	6922      	ldr	r2, [r4, #16]
 800e94a:	f003 0306 	and.w	r3, r3, #6
 800e94e:	2b04      	cmp	r3, #4
 800e950:	bf02      	ittt	eq
 800e952:	68e5      	ldreq	r5, [r4, #12]
 800e954:	6833      	ldreq	r3, [r6, #0]
 800e956:	1aed      	subeq	r5, r5, r3
 800e958:	68a3      	ldr	r3, [r4, #8]
 800e95a:	bf0c      	ite	eq
 800e95c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e960:	2500      	movne	r5, #0
 800e962:	4293      	cmp	r3, r2
 800e964:	bfc4      	itt	gt
 800e966:	1a9b      	subgt	r3, r3, r2
 800e968:	18ed      	addgt	r5, r5, r3
 800e96a:	2600      	movs	r6, #0
 800e96c:	341a      	adds	r4, #26
 800e96e:	42b5      	cmp	r5, r6
 800e970:	d11a      	bne.n	800e9a8 <_printf_common+0xc8>
 800e972:	2000      	movs	r0, #0
 800e974:	e008      	b.n	800e988 <_printf_common+0xa8>
 800e976:	2301      	movs	r3, #1
 800e978:	4652      	mov	r2, sl
 800e97a:	4641      	mov	r1, r8
 800e97c:	4638      	mov	r0, r7
 800e97e:	47c8      	blx	r9
 800e980:	3001      	adds	r0, #1
 800e982:	d103      	bne.n	800e98c <_printf_common+0xac>
 800e984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e98c:	3501      	adds	r5, #1
 800e98e:	e7c6      	b.n	800e91e <_printf_common+0x3e>
 800e990:	18e1      	adds	r1, r4, r3
 800e992:	1c5a      	adds	r2, r3, #1
 800e994:	2030      	movs	r0, #48	@ 0x30
 800e996:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e99a:	4422      	add	r2, r4
 800e99c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e9a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e9a4:	3302      	adds	r3, #2
 800e9a6:	e7c7      	b.n	800e938 <_printf_common+0x58>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	4622      	mov	r2, r4
 800e9ac:	4641      	mov	r1, r8
 800e9ae:	4638      	mov	r0, r7
 800e9b0:	47c8      	blx	r9
 800e9b2:	3001      	adds	r0, #1
 800e9b4:	d0e6      	beq.n	800e984 <_printf_common+0xa4>
 800e9b6:	3601      	adds	r6, #1
 800e9b8:	e7d9      	b.n	800e96e <_printf_common+0x8e>
	...

0800e9bc <_printf_i>:
 800e9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9c0:	7e0f      	ldrb	r7, [r1, #24]
 800e9c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e9c4:	2f78      	cmp	r7, #120	@ 0x78
 800e9c6:	4691      	mov	r9, r2
 800e9c8:	4680      	mov	r8, r0
 800e9ca:	460c      	mov	r4, r1
 800e9cc:	469a      	mov	sl, r3
 800e9ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9d2:	d807      	bhi.n	800e9e4 <_printf_i+0x28>
 800e9d4:	2f62      	cmp	r7, #98	@ 0x62
 800e9d6:	d80a      	bhi.n	800e9ee <_printf_i+0x32>
 800e9d8:	2f00      	cmp	r7, #0
 800e9da:	f000 80d2 	beq.w	800eb82 <_printf_i+0x1c6>
 800e9de:	2f58      	cmp	r7, #88	@ 0x58
 800e9e0:	f000 80b9 	beq.w	800eb56 <_printf_i+0x19a>
 800e9e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9ec:	e03a      	b.n	800ea64 <_printf_i+0xa8>
 800e9ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9f2:	2b15      	cmp	r3, #21
 800e9f4:	d8f6      	bhi.n	800e9e4 <_printf_i+0x28>
 800e9f6:	a101      	add	r1, pc, #4	@ (adr r1, 800e9fc <_printf_i+0x40>)
 800e9f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9fc:	0800ea55 	.word	0x0800ea55
 800ea00:	0800ea69 	.word	0x0800ea69
 800ea04:	0800e9e5 	.word	0x0800e9e5
 800ea08:	0800e9e5 	.word	0x0800e9e5
 800ea0c:	0800e9e5 	.word	0x0800e9e5
 800ea10:	0800e9e5 	.word	0x0800e9e5
 800ea14:	0800ea69 	.word	0x0800ea69
 800ea18:	0800e9e5 	.word	0x0800e9e5
 800ea1c:	0800e9e5 	.word	0x0800e9e5
 800ea20:	0800e9e5 	.word	0x0800e9e5
 800ea24:	0800e9e5 	.word	0x0800e9e5
 800ea28:	0800eb69 	.word	0x0800eb69
 800ea2c:	0800ea93 	.word	0x0800ea93
 800ea30:	0800eb23 	.word	0x0800eb23
 800ea34:	0800e9e5 	.word	0x0800e9e5
 800ea38:	0800e9e5 	.word	0x0800e9e5
 800ea3c:	0800eb8b 	.word	0x0800eb8b
 800ea40:	0800e9e5 	.word	0x0800e9e5
 800ea44:	0800ea93 	.word	0x0800ea93
 800ea48:	0800e9e5 	.word	0x0800e9e5
 800ea4c:	0800e9e5 	.word	0x0800e9e5
 800ea50:	0800eb2b 	.word	0x0800eb2b
 800ea54:	6833      	ldr	r3, [r6, #0]
 800ea56:	1d1a      	adds	r2, r3, #4
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	6032      	str	r2, [r6, #0]
 800ea5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea64:	2301      	movs	r3, #1
 800ea66:	e09d      	b.n	800eba4 <_printf_i+0x1e8>
 800ea68:	6833      	ldr	r3, [r6, #0]
 800ea6a:	6820      	ldr	r0, [r4, #0]
 800ea6c:	1d19      	adds	r1, r3, #4
 800ea6e:	6031      	str	r1, [r6, #0]
 800ea70:	0606      	lsls	r6, r0, #24
 800ea72:	d501      	bpl.n	800ea78 <_printf_i+0xbc>
 800ea74:	681d      	ldr	r5, [r3, #0]
 800ea76:	e003      	b.n	800ea80 <_printf_i+0xc4>
 800ea78:	0645      	lsls	r5, r0, #25
 800ea7a:	d5fb      	bpl.n	800ea74 <_printf_i+0xb8>
 800ea7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea80:	2d00      	cmp	r5, #0
 800ea82:	da03      	bge.n	800ea8c <_printf_i+0xd0>
 800ea84:	232d      	movs	r3, #45	@ 0x2d
 800ea86:	426d      	negs	r5, r5
 800ea88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea8c:	4859      	ldr	r0, [pc, #356]	@ (800ebf4 <_printf_i+0x238>)
 800ea8e:	230a      	movs	r3, #10
 800ea90:	e011      	b.n	800eab6 <_printf_i+0xfa>
 800ea92:	6821      	ldr	r1, [r4, #0]
 800ea94:	6833      	ldr	r3, [r6, #0]
 800ea96:	0608      	lsls	r0, r1, #24
 800ea98:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea9c:	d402      	bmi.n	800eaa4 <_printf_i+0xe8>
 800ea9e:	0649      	lsls	r1, r1, #25
 800eaa0:	bf48      	it	mi
 800eaa2:	b2ad      	uxthmi	r5, r5
 800eaa4:	2f6f      	cmp	r7, #111	@ 0x6f
 800eaa6:	4853      	ldr	r0, [pc, #332]	@ (800ebf4 <_printf_i+0x238>)
 800eaa8:	6033      	str	r3, [r6, #0]
 800eaaa:	bf14      	ite	ne
 800eaac:	230a      	movne	r3, #10
 800eaae:	2308      	moveq	r3, #8
 800eab0:	2100      	movs	r1, #0
 800eab2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eab6:	6866      	ldr	r6, [r4, #4]
 800eab8:	60a6      	str	r6, [r4, #8]
 800eaba:	2e00      	cmp	r6, #0
 800eabc:	bfa2      	ittt	ge
 800eabe:	6821      	ldrge	r1, [r4, #0]
 800eac0:	f021 0104 	bicge.w	r1, r1, #4
 800eac4:	6021      	strge	r1, [r4, #0]
 800eac6:	b90d      	cbnz	r5, 800eacc <_printf_i+0x110>
 800eac8:	2e00      	cmp	r6, #0
 800eaca:	d04b      	beq.n	800eb64 <_printf_i+0x1a8>
 800eacc:	4616      	mov	r6, r2
 800eace:	fbb5 f1f3 	udiv	r1, r5, r3
 800ead2:	fb03 5711 	mls	r7, r3, r1, r5
 800ead6:	5dc7      	ldrb	r7, [r0, r7]
 800ead8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eadc:	462f      	mov	r7, r5
 800eade:	42bb      	cmp	r3, r7
 800eae0:	460d      	mov	r5, r1
 800eae2:	d9f4      	bls.n	800eace <_printf_i+0x112>
 800eae4:	2b08      	cmp	r3, #8
 800eae6:	d10b      	bne.n	800eb00 <_printf_i+0x144>
 800eae8:	6823      	ldr	r3, [r4, #0]
 800eaea:	07df      	lsls	r7, r3, #31
 800eaec:	d508      	bpl.n	800eb00 <_printf_i+0x144>
 800eaee:	6923      	ldr	r3, [r4, #16]
 800eaf0:	6861      	ldr	r1, [r4, #4]
 800eaf2:	4299      	cmp	r1, r3
 800eaf4:	bfde      	ittt	le
 800eaf6:	2330      	movle	r3, #48	@ 0x30
 800eaf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eafc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800eb00:	1b92      	subs	r2, r2, r6
 800eb02:	6122      	str	r2, [r4, #16]
 800eb04:	f8cd a000 	str.w	sl, [sp]
 800eb08:	464b      	mov	r3, r9
 800eb0a:	aa03      	add	r2, sp, #12
 800eb0c:	4621      	mov	r1, r4
 800eb0e:	4640      	mov	r0, r8
 800eb10:	f7ff fee6 	bl	800e8e0 <_printf_common>
 800eb14:	3001      	adds	r0, #1
 800eb16:	d14a      	bne.n	800ebae <_printf_i+0x1f2>
 800eb18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb1c:	b004      	add	sp, #16
 800eb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb22:	6823      	ldr	r3, [r4, #0]
 800eb24:	f043 0320 	orr.w	r3, r3, #32
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	4833      	ldr	r0, [pc, #204]	@ (800ebf8 <_printf_i+0x23c>)
 800eb2c:	2778      	movs	r7, #120	@ 0x78
 800eb2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb32:	6823      	ldr	r3, [r4, #0]
 800eb34:	6831      	ldr	r1, [r6, #0]
 800eb36:	061f      	lsls	r7, r3, #24
 800eb38:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb3c:	d402      	bmi.n	800eb44 <_printf_i+0x188>
 800eb3e:	065f      	lsls	r7, r3, #25
 800eb40:	bf48      	it	mi
 800eb42:	b2ad      	uxthmi	r5, r5
 800eb44:	6031      	str	r1, [r6, #0]
 800eb46:	07d9      	lsls	r1, r3, #31
 800eb48:	bf44      	itt	mi
 800eb4a:	f043 0320 	orrmi.w	r3, r3, #32
 800eb4e:	6023      	strmi	r3, [r4, #0]
 800eb50:	b11d      	cbz	r5, 800eb5a <_printf_i+0x19e>
 800eb52:	2310      	movs	r3, #16
 800eb54:	e7ac      	b.n	800eab0 <_printf_i+0xf4>
 800eb56:	4827      	ldr	r0, [pc, #156]	@ (800ebf4 <_printf_i+0x238>)
 800eb58:	e7e9      	b.n	800eb2e <_printf_i+0x172>
 800eb5a:	6823      	ldr	r3, [r4, #0]
 800eb5c:	f023 0320 	bic.w	r3, r3, #32
 800eb60:	6023      	str	r3, [r4, #0]
 800eb62:	e7f6      	b.n	800eb52 <_printf_i+0x196>
 800eb64:	4616      	mov	r6, r2
 800eb66:	e7bd      	b.n	800eae4 <_printf_i+0x128>
 800eb68:	6833      	ldr	r3, [r6, #0]
 800eb6a:	6825      	ldr	r5, [r4, #0]
 800eb6c:	6961      	ldr	r1, [r4, #20]
 800eb6e:	1d18      	adds	r0, r3, #4
 800eb70:	6030      	str	r0, [r6, #0]
 800eb72:	062e      	lsls	r6, r5, #24
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	d501      	bpl.n	800eb7c <_printf_i+0x1c0>
 800eb78:	6019      	str	r1, [r3, #0]
 800eb7a:	e002      	b.n	800eb82 <_printf_i+0x1c6>
 800eb7c:	0668      	lsls	r0, r5, #25
 800eb7e:	d5fb      	bpl.n	800eb78 <_printf_i+0x1bc>
 800eb80:	8019      	strh	r1, [r3, #0]
 800eb82:	2300      	movs	r3, #0
 800eb84:	6123      	str	r3, [r4, #16]
 800eb86:	4616      	mov	r6, r2
 800eb88:	e7bc      	b.n	800eb04 <_printf_i+0x148>
 800eb8a:	6833      	ldr	r3, [r6, #0]
 800eb8c:	1d1a      	adds	r2, r3, #4
 800eb8e:	6032      	str	r2, [r6, #0]
 800eb90:	681e      	ldr	r6, [r3, #0]
 800eb92:	6862      	ldr	r2, [r4, #4]
 800eb94:	2100      	movs	r1, #0
 800eb96:	4630      	mov	r0, r6
 800eb98:	f7f1 fb42 	bl	8000220 <memchr>
 800eb9c:	b108      	cbz	r0, 800eba2 <_printf_i+0x1e6>
 800eb9e:	1b80      	subs	r0, r0, r6
 800eba0:	6060      	str	r0, [r4, #4]
 800eba2:	6863      	ldr	r3, [r4, #4]
 800eba4:	6123      	str	r3, [r4, #16]
 800eba6:	2300      	movs	r3, #0
 800eba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebac:	e7aa      	b.n	800eb04 <_printf_i+0x148>
 800ebae:	6923      	ldr	r3, [r4, #16]
 800ebb0:	4632      	mov	r2, r6
 800ebb2:	4649      	mov	r1, r9
 800ebb4:	4640      	mov	r0, r8
 800ebb6:	47d0      	blx	sl
 800ebb8:	3001      	adds	r0, #1
 800ebba:	d0ad      	beq.n	800eb18 <_printf_i+0x15c>
 800ebbc:	6823      	ldr	r3, [r4, #0]
 800ebbe:	079b      	lsls	r3, r3, #30
 800ebc0:	d413      	bmi.n	800ebea <_printf_i+0x22e>
 800ebc2:	68e0      	ldr	r0, [r4, #12]
 800ebc4:	9b03      	ldr	r3, [sp, #12]
 800ebc6:	4298      	cmp	r0, r3
 800ebc8:	bfb8      	it	lt
 800ebca:	4618      	movlt	r0, r3
 800ebcc:	e7a6      	b.n	800eb1c <_printf_i+0x160>
 800ebce:	2301      	movs	r3, #1
 800ebd0:	4632      	mov	r2, r6
 800ebd2:	4649      	mov	r1, r9
 800ebd4:	4640      	mov	r0, r8
 800ebd6:	47d0      	blx	sl
 800ebd8:	3001      	adds	r0, #1
 800ebda:	d09d      	beq.n	800eb18 <_printf_i+0x15c>
 800ebdc:	3501      	adds	r5, #1
 800ebde:	68e3      	ldr	r3, [r4, #12]
 800ebe0:	9903      	ldr	r1, [sp, #12]
 800ebe2:	1a5b      	subs	r3, r3, r1
 800ebe4:	42ab      	cmp	r3, r5
 800ebe6:	dcf2      	bgt.n	800ebce <_printf_i+0x212>
 800ebe8:	e7eb      	b.n	800ebc2 <_printf_i+0x206>
 800ebea:	2500      	movs	r5, #0
 800ebec:	f104 0619 	add.w	r6, r4, #25
 800ebf0:	e7f5      	b.n	800ebde <_printf_i+0x222>
 800ebf2:	bf00      	nop
 800ebf4:	08011432 	.word	0x08011432
 800ebf8:	08011443 	.word	0x08011443

0800ebfc <std>:
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	b510      	push	{r4, lr}
 800ec00:	4604      	mov	r4, r0
 800ec02:	e9c0 3300 	strd	r3, r3, [r0]
 800ec06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec0a:	6083      	str	r3, [r0, #8]
 800ec0c:	8181      	strh	r1, [r0, #12]
 800ec0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec10:	81c2      	strh	r2, [r0, #14]
 800ec12:	6183      	str	r3, [r0, #24]
 800ec14:	4619      	mov	r1, r3
 800ec16:	2208      	movs	r2, #8
 800ec18:	305c      	adds	r0, #92	@ 0x5c
 800ec1a:	f000 f8eb 	bl	800edf4 <memset>
 800ec1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec54 <std+0x58>)
 800ec20:	6263      	str	r3, [r4, #36]	@ 0x24
 800ec22:	4b0d      	ldr	r3, [pc, #52]	@ (800ec58 <std+0x5c>)
 800ec24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ec26:	4b0d      	ldr	r3, [pc, #52]	@ (800ec5c <std+0x60>)
 800ec28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ec2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ec60 <std+0x64>)
 800ec2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ec2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec64 <std+0x68>)
 800ec30:	6224      	str	r4, [r4, #32]
 800ec32:	429c      	cmp	r4, r3
 800ec34:	d006      	beq.n	800ec44 <std+0x48>
 800ec36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ec3a:	4294      	cmp	r4, r2
 800ec3c:	d002      	beq.n	800ec44 <std+0x48>
 800ec3e:	33d0      	adds	r3, #208	@ 0xd0
 800ec40:	429c      	cmp	r4, r3
 800ec42:	d105      	bne.n	800ec50 <std+0x54>
 800ec44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ec48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec4c:	f000 b95e 	b.w	800ef0c <__retarget_lock_init_recursive>
 800ec50:	bd10      	pop	{r4, pc}
 800ec52:	bf00      	nop
 800ec54:	080108d5 	.word	0x080108d5
 800ec58:	080108f7 	.word	0x080108f7
 800ec5c:	0801092f 	.word	0x0801092f
 800ec60:	08010953 	.word	0x08010953
 800ec64:	2000769c 	.word	0x2000769c

0800ec68 <stdio_exit_handler>:
 800ec68:	4a02      	ldr	r2, [pc, #8]	@ (800ec74 <stdio_exit_handler+0xc>)
 800ec6a:	4903      	ldr	r1, [pc, #12]	@ (800ec78 <stdio_exit_handler+0x10>)
 800ec6c:	4803      	ldr	r0, [pc, #12]	@ (800ec7c <stdio_exit_handler+0x14>)
 800ec6e:	f000 b869 	b.w	800ed44 <_fwalk_sglue>
 800ec72:	bf00      	nop
 800ec74:	20000188 	.word	0x20000188
 800ec78:	08010169 	.word	0x08010169
 800ec7c:	20000198 	.word	0x20000198

0800ec80 <cleanup_stdio>:
 800ec80:	6841      	ldr	r1, [r0, #4]
 800ec82:	4b0c      	ldr	r3, [pc, #48]	@ (800ecb4 <cleanup_stdio+0x34>)
 800ec84:	4299      	cmp	r1, r3
 800ec86:	b510      	push	{r4, lr}
 800ec88:	4604      	mov	r4, r0
 800ec8a:	d001      	beq.n	800ec90 <cleanup_stdio+0x10>
 800ec8c:	f001 fa6c 	bl	8010168 <_fflush_r>
 800ec90:	68a1      	ldr	r1, [r4, #8]
 800ec92:	4b09      	ldr	r3, [pc, #36]	@ (800ecb8 <cleanup_stdio+0x38>)
 800ec94:	4299      	cmp	r1, r3
 800ec96:	d002      	beq.n	800ec9e <cleanup_stdio+0x1e>
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f001 fa65 	bl	8010168 <_fflush_r>
 800ec9e:	68e1      	ldr	r1, [r4, #12]
 800eca0:	4b06      	ldr	r3, [pc, #24]	@ (800ecbc <cleanup_stdio+0x3c>)
 800eca2:	4299      	cmp	r1, r3
 800eca4:	d004      	beq.n	800ecb0 <cleanup_stdio+0x30>
 800eca6:	4620      	mov	r0, r4
 800eca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecac:	f001 ba5c 	b.w	8010168 <_fflush_r>
 800ecb0:	bd10      	pop	{r4, pc}
 800ecb2:	bf00      	nop
 800ecb4:	2000769c 	.word	0x2000769c
 800ecb8:	20007704 	.word	0x20007704
 800ecbc:	2000776c 	.word	0x2000776c

0800ecc0 <global_stdio_init.part.0>:
 800ecc0:	b510      	push	{r4, lr}
 800ecc2:	4b0b      	ldr	r3, [pc, #44]	@ (800ecf0 <global_stdio_init.part.0+0x30>)
 800ecc4:	4c0b      	ldr	r4, [pc, #44]	@ (800ecf4 <global_stdio_init.part.0+0x34>)
 800ecc6:	4a0c      	ldr	r2, [pc, #48]	@ (800ecf8 <global_stdio_init.part.0+0x38>)
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	4620      	mov	r0, r4
 800eccc:	2200      	movs	r2, #0
 800ecce:	2104      	movs	r1, #4
 800ecd0:	f7ff ff94 	bl	800ebfc <std>
 800ecd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ecd8:	2201      	movs	r2, #1
 800ecda:	2109      	movs	r1, #9
 800ecdc:	f7ff ff8e 	bl	800ebfc <std>
 800ece0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ece4:	2202      	movs	r2, #2
 800ece6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecea:	2112      	movs	r1, #18
 800ecec:	f7ff bf86 	b.w	800ebfc <std>
 800ecf0:	200077d4 	.word	0x200077d4
 800ecf4:	2000769c 	.word	0x2000769c
 800ecf8:	0800ec69 	.word	0x0800ec69

0800ecfc <__sfp_lock_acquire>:
 800ecfc:	4801      	ldr	r0, [pc, #4]	@ (800ed04 <__sfp_lock_acquire+0x8>)
 800ecfe:	f000 b906 	b.w	800ef0e <__retarget_lock_acquire_recursive>
 800ed02:	bf00      	nop
 800ed04:	200077dd 	.word	0x200077dd

0800ed08 <__sfp_lock_release>:
 800ed08:	4801      	ldr	r0, [pc, #4]	@ (800ed10 <__sfp_lock_release+0x8>)
 800ed0a:	f000 b901 	b.w	800ef10 <__retarget_lock_release_recursive>
 800ed0e:	bf00      	nop
 800ed10:	200077dd 	.word	0x200077dd

0800ed14 <__sinit>:
 800ed14:	b510      	push	{r4, lr}
 800ed16:	4604      	mov	r4, r0
 800ed18:	f7ff fff0 	bl	800ecfc <__sfp_lock_acquire>
 800ed1c:	6a23      	ldr	r3, [r4, #32]
 800ed1e:	b11b      	cbz	r3, 800ed28 <__sinit+0x14>
 800ed20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed24:	f7ff bff0 	b.w	800ed08 <__sfp_lock_release>
 800ed28:	4b04      	ldr	r3, [pc, #16]	@ (800ed3c <__sinit+0x28>)
 800ed2a:	6223      	str	r3, [r4, #32]
 800ed2c:	4b04      	ldr	r3, [pc, #16]	@ (800ed40 <__sinit+0x2c>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d1f5      	bne.n	800ed20 <__sinit+0xc>
 800ed34:	f7ff ffc4 	bl	800ecc0 <global_stdio_init.part.0>
 800ed38:	e7f2      	b.n	800ed20 <__sinit+0xc>
 800ed3a:	bf00      	nop
 800ed3c:	0800ec81 	.word	0x0800ec81
 800ed40:	200077d4 	.word	0x200077d4

0800ed44 <_fwalk_sglue>:
 800ed44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed48:	4607      	mov	r7, r0
 800ed4a:	4688      	mov	r8, r1
 800ed4c:	4614      	mov	r4, r2
 800ed4e:	2600      	movs	r6, #0
 800ed50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed54:	f1b9 0901 	subs.w	r9, r9, #1
 800ed58:	d505      	bpl.n	800ed66 <_fwalk_sglue+0x22>
 800ed5a:	6824      	ldr	r4, [r4, #0]
 800ed5c:	2c00      	cmp	r4, #0
 800ed5e:	d1f7      	bne.n	800ed50 <_fwalk_sglue+0xc>
 800ed60:	4630      	mov	r0, r6
 800ed62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed66:	89ab      	ldrh	r3, [r5, #12]
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d907      	bls.n	800ed7c <_fwalk_sglue+0x38>
 800ed6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed70:	3301      	adds	r3, #1
 800ed72:	d003      	beq.n	800ed7c <_fwalk_sglue+0x38>
 800ed74:	4629      	mov	r1, r5
 800ed76:	4638      	mov	r0, r7
 800ed78:	47c0      	blx	r8
 800ed7a:	4306      	orrs	r6, r0
 800ed7c:	3568      	adds	r5, #104	@ 0x68
 800ed7e:	e7e9      	b.n	800ed54 <_fwalk_sglue+0x10>

0800ed80 <_vsniprintf_r>:
 800ed80:	b530      	push	{r4, r5, lr}
 800ed82:	4614      	mov	r4, r2
 800ed84:	2c00      	cmp	r4, #0
 800ed86:	b09b      	sub	sp, #108	@ 0x6c
 800ed88:	4605      	mov	r5, r0
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	da05      	bge.n	800ed9a <_vsniprintf_r+0x1a>
 800ed8e:	238b      	movs	r3, #139	@ 0x8b
 800ed90:	6003      	str	r3, [r0, #0]
 800ed92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed96:	b01b      	add	sp, #108	@ 0x6c
 800ed98:	bd30      	pop	{r4, r5, pc}
 800ed9a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ed9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800eda2:	bf14      	ite	ne
 800eda4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800eda8:	4623      	moveq	r3, r4
 800edaa:	9302      	str	r3, [sp, #8]
 800edac:	9305      	str	r3, [sp, #20]
 800edae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800edb2:	9100      	str	r1, [sp, #0]
 800edb4:	9104      	str	r1, [sp, #16]
 800edb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800edba:	4669      	mov	r1, sp
 800edbc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800edbe:	f000 ffa9 	bl	800fd14 <_svfiprintf_r>
 800edc2:	1c43      	adds	r3, r0, #1
 800edc4:	bfbc      	itt	lt
 800edc6:	238b      	movlt	r3, #139	@ 0x8b
 800edc8:	602b      	strlt	r3, [r5, #0]
 800edca:	2c00      	cmp	r4, #0
 800edcc:	d0e3      	beq.n	800ed96 <_vsniprintf_r+0x16>
 800edce:	9b00      	ldr	r3, [sp, #0]
 800edd0:	2200      	movs	r2, #0
 800edd2:	701a      	strb	r2, [r3, #0]
 800edd4:	e7df      	b.n	800ed96 <_vsniprintf_r+0x16>
	...

0800edd8 <vsniprintf>:
 800edd8:	b507      	push	{r0, r1, r2, lr}
 800edda:	9300      	str	r3, [sp, #0]
 800eddc:	4613      	mov	r3, r2
 800edde:	460a      	mov	r2, r1
 800ede0:	4601      	mov	r1, r0
 800ede2:	4803      	ldr	r0, [pc, #12]	@ (800edf0 <vsniprintf+0x18>)
 800ede4:	6800      	ldr	r0, [r0, #0]
 800ede6:	f7ff ffcb 	bl	800ed80 <_vsniprintf_r>
 800edea:	b003      	add	sp, #12
 800edec:	f85d fb04 	ldr.w	pc, [sp], #4
 800edf0:	20000194 	.word	0x20000194

0800edf4 <memset>:
 800edf4:	4402      	add	r2, r0
 800edf6:	4603      	mov	r3, r0
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d100      	bne.n	800edfe <memset+0xa>
 800edfc:	4770      	bx	lr
 800edfe:	f803 1b01 	strb.w	r1, [r3], #1
 800ee02:	e7f9      	b.n	800edf8 <memset+0x4>

0800ee04 <_localeconv_r>:
 800ee04:	4800      	ldr	r0, [pc, #0]	@ (800ee08 <_localeconv_r+0x4>)
 800ee06:	4770      	bx	lr
 800ee08:	200002d4 	.word	0x200002d4

0800ee0c <_reclaim_reent>:
 800ee0c:	4b29      	ldr	r3, [pc, #164]	@ (800eeb4 <_reclaim_reent+0xa8>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4283      	cmp	r3, r0
 800ee12:	b570      	push	{r4, r5, r6, lr}
 800ee14:	4604      	mov	r4, r0
 800ee16:	d04b      	beq.n	800eeb0 <_reclaim_reent+0xa4>
 800ee18:	69c3      	ldr	r3, [r0, #28]
 800ee1a:	b1ab      	cbz	r3, 800ee48 <_reclaim_reent+0x3c>
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	b16b      	cbz	r3, 800ee3c <_reclaim_reent+0x30>
 800ee20:	2500      	movs	r5, #0
 800ee22:	69e3      	ldr	r3, [r4, #28]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	5959      	ldr	r1, [r3, r5]
 800ee28:	2900      	cmp	r1, #0
 800ee2a:	d13b      	bne.n	800eea4 <_reclaim_reent+0x98>
 800ee2c:	3504      	adds	r5, #4
 800ee2e:	2d80      	cmp	r5, #128	@ 0x80
 800ee30:	d1f7      	bne.n	800ee22 <_reclaim_reent+0x16>
 800ee32:	69e3      	ldr	r3, [r4, #28]
 800ee34:	4620      	mov	r0, r4
 800ee36:	68d9      	ldr	r1, [r3, #12]
 800ee38:	f000 fec6 	bl	800fbc8 <_free_r>
 800ee3c:	69e3      	ldr	r3, [r4, #28]
 800ee3e:	6819      	ldr	r1, [r3, #0]
 800ee40:	b111      	cbz	r1, 800ee48 <_reclaim_reent+0x3c>
 800ee42:	4620      	mov	r0, r4
 800ee44:	f000 fec0 	bl	800fbc8 <_free_r>
 800ee48:	6961      	ldr	r1, [r4, #20]
 800ee4a:	b111      	cbz	r1, 800ee52 <_reclaim_reent+0x46>
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f000 febb 	bl	800fbc8 <_free_r>
 800ee52:	69e1      	ldr	r1, [r4, #28]
 800ee54:	b111      	cbz	r1, 800ee5c <_reclaim_reent+0x50>
 800ee56:	4620      	mov	r0, r4
 800ee58:	f000 feb6 	bl	800fbc8 <_free_r>
 800ee5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ee5e:	b111      	cbz	r1, 800ee66 <_reclaim_reent+0x5a>
 800ee60:	4620      	mov	r0, r4
 800ee62:	f000 feb1 	bl	800fbc8 <_free_r>
 800ee66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee68:	b111      	cbz	r1, 800ee70 <_reclaim_reent+0x64>
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f000 feac 	bl	800fbc8 <_free_r>
 800ee70:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ee72:	b111      	cbz	r1, 800ee7a <_reclaim_reent+0x6e>
 800ee74:	4620      	mov	r0, r4
 800ee76:	f000 fea7 	bl	800fbc8 <_free_r>
 800ee7a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ee7c:	b111      	cbz	r1, 800ee84 <_reclaim_reent+0x78>
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f000 fea2 	bl	800fbc8 <_free_r>
 800ee84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ee86:	b111      	cbz	r1, 800ee8e <_reclaim_reent+0x82>
 800ee88:	4620      	mov	r0, r4
 800ee8a:	f000 fe9d 	bl	800fbc8 <_free_r>
 800ee8e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ee90:	b111      	cbz	r1, 800ee98 <_reclaim_reent+0x8c>
 800ee92:	4620      	mov	r0, r4
 800ee94:	f000 fe98 	bl	800fbc8 <_free_r>
 800ee98:	6a23      	ldr	r3, [r4, #32]
 800ee9a:	b14b      	cbz	r3, 800eeb0 <_reclaim_reent+0xa4>
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eea2:	4718      	bx	r3
 800eea4:	680e      	ldr	r6, [r1, #0]
 800eea6:	4620      	mov	r0, r4
 800eea8:	f000 fe8e 	bl	800fbc8 <_free_r>
 800eeac:	4631      	mov	r1, r6
 800eeae:	e7bb      	b.n	800ee28 <_reclaim_reent+0x1c>
 800eeb0:	bd70      	pop	{r4, r5, r6, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20000194 	.word	0x20000194

0800eeb8 <__errno>:
 800eeb8:	4b01      	ldr	r3, [pc, #4]	@ (800eec0 <__errno+0x8>)
 800eeba:	6818      	ldr	r0, [r3, #0]
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	20000194 	.word	0x20000194

0800eec4 <__libc_init_array>:
 800eec4:	b570      	push	{r4, r5, r6, lr}
 800eec6:	4d0d      	ldr	r5, [pc, #52]	@ (800eefc <__libc_init_array+0x38>)
 800eec8:	4c0d      	ldr	r4, [pc, #52]	@ (800ef00 <__libc_init_array+0x3c>)
 800eeca:	1b64      	subs	r4, r4, r5
 800eecc:	10a4      	asrs	r4, r4, #2
 800eece:	2600      	movs	r6, #0
 800eed0:	42a6      	cmp	r6, r4
 800eed2:	d109      	bne.n	800eee8 <__libc_init_array+0x24>
 800eed4:	4d0b      	ldr	r5, [pc, #44]	@ (800ef04 <__libc_init_array+0x40>)
 800eed6:	4c0c      	ldr	r4, [pc, #48]	@ (800ef08 <__libc_init_array+0x44>)
 800eed8:	f002 f8ee 	bl	80110b8 <_init>
 800eedc:	1b64      	subs	r4, r4, r5
 800eede:	10a4      	asrs	r4, r4, #2
 800eee0:	2600      	movs	r6, #0
 800eee2:	42a6      	cmp	r6, r4
 800eee4:	d105      	bne.n	800eef2 <__libc_init_array+0x2e>
 800eee6:	bd70      	pop	{r4, r5, r6, pc}
 800eee8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeec:	4798      	blx	r3
 800eeee:	3601      	adds	r6, #1
 800eef0:	e7ee      	b.n	800eed0 <__libc_init_array+0xc>
 800eef2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eef6:	4798      	blx	r3
 800eef8:	3601      	adds	r6, #1
 800eefa:	e7f2      	b.n	800eee2 <__libc_init_array+0x1e>
 800eefc:	08011798 	.word	0x08011798
 800ef00:	08011798 	.word	0x08011798
 800ef04:	08011798 	.word	0x08011798
 800ef08:	0801179c 	.word	0x0801179c

0800ef0c <__retarget_lock_init_recursive>:
 800ef0c:	4770      	bx	lr

0800ef0e <__retarget_lock_acquire_recursive>:
 800ef0e:	4770      	bx	lr

0800ef10 <__retarget_lock_release_recursive>:
 800ef10:	4770      	bx	lr

0800ef12 <memcpy>:
 800ef12:	440a      	add	r2, r1
 800ef14:	4291      	cmp	r1, r2
 800ef16:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ef1a:	d100      	bne.n	800ef1e <memcpy+0xc>
 800ef1c:	4770      	bx	lr
 800ef1e:	b510      	push	{r4, lr}
 800ef20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef28:	4291      	cmp	r1, r2
 800ef2a:	d1f9      	bne.n	800ef20 <memcpy+0xe>
 800ef2c:	bd10      	pop	{r4, pc}

0800ef2e <quorem>:
 800ef2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef32:	6903      	ldr	r3, [r0, #16]
 800ef34:	690c      	ldr	r4, [r1, #16]
 800ef36:	42a3      	cmp	r3, r4
 800ef38:	4607      	mov	r7, r0
 800ef3a:	db7e      	blt.n	800f03a <quorem+0x10c>
 800ef3c:	3c01      	subs	r4, #1
 800ef3e:	f101 0814 	add.w	r8, r1, #20
 800ef42:	00a3      	lsls	r3, r4, #2
 800ef44:	f100 0514 	add.w	r5, r0, #20
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef4e:	9301      	str	r3, [sp, #4]
 800ef50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef60:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef64:	d32e      	bcc.n	800efc4 <quorem+0x96>
 800ef66:	f04f 0a00 	mov.w	sl, #0
 800ef6a:	46c4      	mov	ip, r8
 800ef6c:	46ae      	mov	lr, r5
 800ef6e:	46d3      	mov	fp, sl
 800ef70:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef74:	b298      	uxth	r0, r3
 800ef76:	fb06 a000 	mla	r0, r6, r0, sl
 800ef7a:	0c02      	lsrs	r2, r0, #16
 800ef7c:	0c1b      	lsrs	r3, r3, #16
 800ef7e:	fb06 2303 	mla	r3, r6, r3, r2
 800ef82:	f8de 2000 	ldr.w	r2, [lr]
 800ef86:	b280      	uxth	r0, r0
 800ef88:	b292      	uxth	r2, r2
 800ef8a:	1a12      	subs	r2, r2, r0
 800ef8c:	445a      	add	r2, fp
 800ef8e:	f8de 0000 	ldr.w	r0, [lr]
 800ef92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ef9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800efa0:	b292      	uxth	r2, r2
 800efa2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800efa6:	45e1      	cmp	r9, ip
 800efa8:	f84e 2b04 	str.w	r2, [lr], #4
 800efac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800efb0:	d2de      	bcs.n	800ef70 <quorem+0x42>
 800efb2:	9b00      	ldr	r3, [sp, #0]
 800efb4:	58eb      	ldr	r3, [r5, r3]
 800efb6:	b92b      	cbnz	r3, 800efc4 <quorem+0x96>
 800efb8:	9b01      	ldr	r3, [sp, #4]
 800efba:	3b04      	subs	r3, #4
 800efbc:	429d      	cmp	r5, r3
 800efbe:	461a      	mov	r2, r3
 800efc0:	d32f      	bcc.n	800f022 <quorem+0xf4>
 800efc2:	613c      	str	r4, [r7, #16]
 800efc4:	4638      	mov	r0, r7
 800efc6:	f001 fb7d 	bl	80106c4 <__mcmp>
 800efca:	2800      	cmp	r0, #0
 800efcc:	db25      	blt.n	800f01a <quorem+0xec>
 800efce:	4629      	mov	r1, r5
 800efd0:	2000      	movs	r0, #0
 800efd2:	f858 2b04 	ldr.w	r2, [r8], #4
 800efd6:	f8d1 c000 	ldr.w	ip, [r1]
 800efda:	fa1f fe82 	uxth.w	lr, r2
 800efde:	fa1f f38c 	uxth.w	r3, ip
 800efe2:	eba3 030e 	sub.w	r3, r3, lr
 800efe6:	4403      	add	r3, r0
 800efe8:	0c12      	lsrs	r2, r2, #16
 800efea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800efee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eff8:	45c1      	cmp	r9, r8
 800effa:	f841 3b04 	str.w	r3, [r1], #4
 800effe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f002:	d2e6      	bcs.n	800efd2 <quorem+0xa4>
 800f004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f008:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f00c:	b922      	cbnz	r2, 800f018 <quorem+0xea>
 800f00e:	3b04      	subs	r3, #4
 800f010:	429d      	cmp	r5, r3
 800f012:	461a      	mov	r2, r3
 800f014:	d30b      	bcc.n	800f02e <quorem+0x100>
 800f016:	613c      	str	r4, [r7, #16]
 800f018:	3601      	adds	r6, #1
 800f01a:	4630      	mov	r0, r6
 800f01c:	b003      	add	sp, #12
 800f01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f022:	6812      	ldr	r2, [r2, #0]
 800f024:	3b04      	subs	r3, #4
 800f026:	2a00      	cmp	r2, #0
 800f028:	d1cb      	bne.n	800efc2 <quorem+0x94>
 800f02a:	3c01      	subs	r4, #1
 800f02c:	e7c6      	b.n	800efbc <quorem+0x8e>
 800f02e:	6812      	ldr	r2, [r2, #0]
 800f030:	3b04      	subs	r3, #4
 800f032:	2a00      	cmp	r2, #0
 800f034:	d1ef      	bne.n	800f016 <quorem+0xe8>
 800f036:	3c01      	subs	r4, #1
 800f038:	e7ea      	b.n	800f010 <quorem+0xe2>
 800f03a:	2000      	movs	r0, #0
 800f03c:	e7ee      	b.n	800f01c <quorem+0xee>
	...

0800f040 <_dtoa_r>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	69c7      	ldr	r7, [r0, #28]
 800f046:	b099      	sub	sp, #100	@ 0x64
 800f048:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f04c:	ec55 4b10 	vmov	r4, r5, d0
 800f050:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f052:	9109      	str	r1, [sp, #36]	@ 0x24
 800f054:	4683      	mov	fp, r0
 800f056:	920e      	str	r2, [sp, #56]	@ 0x38
 800f058:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f05a:	b97f      	cbnz	r7, 800f07c <_dtoa_r+0x3c>
 800f05c:	2010      	movs	r0, #16
 800f05e:	f000 ff55 	bl	800ff0c <malloc>
 800f062:	4602      	mov	r2, r0
 800f064:	f8cb 001c 	str.w	r0, [fp, #28]
 800f068:	b920      	cbnz	r0, 800f074 <_dtoa_r+0x34>
 800f06a:	4ba7      	ldr	r3, [pc, #668]	@ (800f308 <_dtoa_r+0x2c8>)
 800f06c:	21ef      	movs	r1, #239	@ 0xef
 800f06e:	48a7      	ldr	r0, [pc, #668]	@ (800f30c <_dtoa_r+0x2cc>)
 800f070:	f001 fd12 	bl	8010a98 <__assert_func>
 800f074:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f078:	6007      	str	r7, [r0, #0]
 800f07a:	60c7      	str	r7, [r0, #12]
 800f07c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f080:	6819      	ldr	r1, [r3, #0]
 800f082:	b159      	cbz	r1, 800f09c <_dtoa_r+0x5c>
 800f084:	685a      	ldr	r2, [r3, #4]
 800f086:	604a      	str	r2, [r1, #4]
 800f088:	2301      	movs	r3, #1
 800f08a:	4093      	lsls	r3, r2
 800f08c:	608b      	str	r3, [r1, #8]
 800f08e:	4658      	mov	r0, fp
 800f090:	f001 f8de 	bl	8010250 <_Bfree>
 800f094:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f098:	2200      	movs	r2, #0
 800f09a:	601a      	str	r2, [r3, #0]
 800f09c:	1e2b      	subs	r3, r5, #0
 800f09e:	bfb9      	ittee	lt
 800f0a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f0a4:	9303      	strlt	r3, [sp, #12]
 800f0a6:	2300      	movge	r3, #0
 800f0a8:	6033      	strge	r3, [r6, #0]
 800f0aa:	9f03      	ldr	r7, [sp, #12]
 800f0ac:	4b98      	ldr	r3, [pc, #608]	@ (800f310 <_dtoa_r+0x2d0>)
 800f0ae:	bfbc      	itt	lt
 800f0b0:	2201      	movlt	r2, #1
 800f0b2:	6032      	strlt	r2, [r6, #0]
 800f0b4:	43bb      	bics	r3, r7
 800f0b6:	d112      	bne.n	800f0de <_dtoa_r+0x9e>
 800f0b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f0ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f0be:	6013      	str	r3, [r2, #0]
 800f0c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f0c4:	4323      	orrs	r3, r4
 800f0c6:	f000 854d 	beq.w	800fb64 <_dtoa_r+0xb24>
 800f0ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f324 <_dtoa_r+0x2e4>
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f000 854f 	beq.w	800fb74 <_dtoa_r+0xb34>
 800f0d6:	f10a 0303 	add.w	r3, sl, #3
 800f0da:	f000 bd49 	b.w	800fb70 <_dtoa_r+0xb30>
 800f0de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	ec51 0b17 	vmov	r0, r1, d7
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f0ee:	f7f1 fd13 	bl	8000b18 <__aeabi_dcmpeq>
 800f0f2:	4680      	mov	r8, r0
 800f0f4:	b158      	cbz	r0, 800f10e <_dtoa_r+0xce>
 800f0f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	6013      	str	r3, [r2, #0]
 800f0fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0fe:	b113      	cbz	r3, 800f106 <_dtoa_r+0xc6>
 800f100:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f102:	4b84      	ldr	r3, [pc, #528]	@ (800f314 <_dtoa_r+0x2d4>)
 800f104:	6013      	str	r3, [r2, #0]
 800f106:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f328 <_dtoa_r+0x2e8>
 800f10a:	f000 bd33 	b.w	800fb74 <_dtoa_r+0xb34>
 800f10e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f112:	aa16      	add	r2, sp, #88	@ 0x58
 800f114:	a917      	add	r1, sp, #92	@ 0x5c
 800f116:	4658      	mov	r0, fp
 800f118:	f001 fb84 	bl	8010824 <__d2b>
 800f11c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f120:	4681      	mov	r9, r0
 800f122:	2e00      	cmp	r6, #0
 800f124:	d077      	beq.n	800f216 <_dtoa_r+0x1d6>
 800f126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f128:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f12c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f134:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f138:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f13c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f140:	4619      	mov	r1, r3
 800f142:	2200      	movs	r2, #0
 800f144:	4b74      	ldr	r3, [pc, #464]	@ (800f318 <_dtoa_r+0x2d8>)
 800f146:	f7f1 f8c7 	bl	80002d8 <__aeabi_dsub>
 800f14a:	a369      	add	r3, pc, #420	@ (adr r3, 800f2f0 <_dtoa_r+0x2b0>)
 800f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f150:	f7f1 fa7a 	bl	8000648 <__aeabi_dmul>
 800f154:	a368      	add	r3, pc, #416	@ (adr r3, 800f2f8 <_dtoa_r+0x2b8>)
 800f156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15a:	f7f1 f8bf 	bl	80002dc <__adddf3>
 800f15e:	4604      	mov	r4, r0
 800f160:	4630      	mov	r0, r6
 800f162:	460d      	mov	r5, r1
 800f164:	f7f1 fa06 	bl	8000574 <__aeabi_i2d>
 800f168:	a365      	add	r3, pc, #404	@ (adr r3, 800f300 <_dtoa_r+0x2c0>)
 800f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16e:	f7f1 fa6b 	bl	8000648 <__aeabi_dmul>
 800f172:	4602      	mov	r2, r0
 800f174:	460b      	mov	r3, r1
 800f176:	4620      	mov	r0, r4
 800f178:	4629      	mov	r1, r5
 800f17a:	f7f1 f8af 	bl	80002dc <__adddf3>
 800f17e:	4604      	mov	r4, r0
 800f180:	460d      	mov	r5, r1
 800f182:	f7f1 fd11 	bl	8000ba8 <__aeabi_d2iz>
 800f186:	2200      	movs	r2, #0
 800f188:	4607      	mov	r7, r0
 800f18a:	2300      	movs	r3, #0
 800f18c:	4620      	mov	r0, r4
 800f18e:	4629      	mov	r1, r5
 800f190:	f7f1 fccc 	bl	8000b2c <__aeabi_dcmplt>
 800f194:	b140      	cbz	r0, 800f1a8 <_dtoa_r+0x168>
 800f196:	4638      	mov	r0, r7
 800f198:	f7f1 f9ec 	bl	8000574 <__aeabi_i2d>
 800f19c:	4622      	mov	r2, r4
 800f19e:	462b      	mov	r3, r5
 800f1a0:	f7f1 fcba 	bl	8000b18 <__aeabi_dcmpeq>
 800f1a4:	b900      	cbnz	r0, 800f1a8 <_dtoa_r+0x168>
 800f1a6:	3f01      	subs	r7, #1
 800f1a8:	2f16      	cmp	r7, #22
 800f1aa:	d851      	bhi.n	800f250 <_dtoa_r+0x210>
 800f1ac:	4b5b      	ldr	r3, [pc, #364]	@ (800f31c <_dtoa_r+0x2dc>)
 800f1ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1ba:	f7f1 fcb7 	bl	8000b2c <__aeabi_dcmplt>
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	d048      	beq.n	800f254 <_dtoa_r+0x214>
 800f1c2:	3f01      	subs	r7, #1
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800f1c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f1ca:	1b9b      	subs	r3, r3, r6
 800f1cc:	1e5a      	subs	r2, r3, #1
 800f1ce:	bf44      	itt	mi
 800f1d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800f1d4:	2300      	movmi	r3, #0
 800f1d6:	9208      	str	r2, [sp, #32]
 800f1d8:	bf54      	ite	pl
 800f1da:	f04f 0800 	movpl.w	r8, #0
 800f1de:	9308      	strmi	r3, [sp, #32]
 800f1e0:	2f00      	cmp	r7, #0
 800f1e2:	db39      	blt.n	800f258 <_dtoa_r+0x218>
 800f1e4:	9b08      	ldr	r3, [sp, #32]
 800f1e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f1e8:	443b      	add	r3, r7
 800f1ea:	9308      	str	r3, [sp, #32]
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f2:	2b09      	cmp	r3, #9
 800f1f4:	d864      	bhi.n	800f2c0 <_dtoa_r+0x280>
 800f1f6:	2b05      	cmp	r3, #5
 800f1f8:	bfc4      	itt	gt
 800f1fa:	3b04      	subgt	r3, #4
 800f1fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f200:	f1a3 0302 	sub.w	r3, r3, #2
 800f204:	bfcc      	ite	gt
 800f206:	2400      	movgt	r4, #0
 800f208:	2401      	movle	r4, #1
 800f20a:	2b03      	cmp	r3, #3
 800f20c:	d863      	bhi.n	800f2d6 <_dtoa_r+0x296>
 800f20e:	e8df f003 	tbb	[pc, r3]
 800f212:	372a      	.short	0x372a
 800f214:	5535      	.short	0x5535
 800f216:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f21a:	441e      	add	r6, r3
 800f21c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f220:	2b20      	cmp	r3, #32
 800f222:	bfc1      	itttt	gt
 800f224:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f228:	409f      	lslgt	r7, r3
 800f22a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f22e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f232:	bfd6      	itet	le
 800f234:	f1c3 0320 	rsble	r3, r3, #32
 800f238:	ea47 0003 	orrgt.w	r0, r7, r3
 800f23c:	fa04 f003 	lslle.w	r0, r4, r3
 800f240:	f7f1 f988 	bl	8000554 <__aeabi_ui2d>
 800f244:	2201      	movs	r2, #1
 800f246:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f24a:	3e01      	subs	r6, #1
 800f24c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f24e:	e777      	b.n	800f140 <_dtoa_r+0x100>
 800f250:	2301      	movs	r3, #1
 800f252:	e7b8      	b.n	800f1c6 <_dtoa_r+0x186>
 800f254:	9012      	str	r0, [sp, #72]	@ 0x48
 800f256:	e7b7      	b.n	800f1c8 <_dtoa_r+0x188>
 800f258:	427b      	negs	r3, r7
 800f25a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f25c:	2300      	movs	r3, #0
 800f25e:	eba8 0807 	sub.w	r8, r8, r7
 800f262:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f264:	e7c4      	b.n	800f1f0 <_dtoa_r+0x1b0>
 800f266:	2300      	movs	r3, #0
 800f268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f26a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	dc35      	bgt.n	800f2dc <_dtoa_r+0x29c>
 800f270:	2301      	movs	r3, #1
 800f272:	9300      	str	r3, [sp, #0]
 800f274:	9307      	str	r3, [sp, #28]
 800f276:	461a      	mov	r2, r3
 800f278:	920e      	str	r2, [sp, #56]	@ 0x38
 800f27a:	e00b      	b.n	800f294 <_dtoa_r+0x254>
 800f27c:	2301      	movs	r3, #1
 800f27e:	e7f3      	b.n	800f268 <_dtoa_r+0x228>
 800f280:	2300      	movs	r3, #0
 800f282:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f286:	18fb      	adds	r3, r7, r3
 800f288:	9300      	str	r3, [sp, #0]
 800f28a:	3301      	adds	r3, #1
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	9307      	str	r3, [sp, #28]
 800f290:	bfb8      	it	lt
 800f292:	2301      	movlt	r3, #1
 800f294:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f298:	2100      	movs	r1, #0
 800f29a:	2204      	movs	r2, #4
 800f29c:	f102 0514 	add.w	r5, r2, #20
 800f2a0:	429d      	cmp	r5, r3
 800f2a2:	d91f      	bls.n	800f2e4 <_dtoa_r+0x2a4>
 800f2a4:	6041      	str	r1, [r0, #4]
 800f2a6:	4658      	mov	r0, fp
 800f2a8:	f000 ff92 	bl	80101d0 <_Balloc>
 800f2ac:	4682      	mov	sl, r0
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	d13c      	bne.n	800f32c <_dtoa_r+0x2ec>
 800f2b2:	4b1b      	ldr	r3, [pc, #108]	@ (800f320 <_dtoa_r+0x2e0>)
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800f2ba:	e6d8      	b.n	800f06e <_dtoa_r+0x2e>
 800f2bc:	2301      	movs	r3, #1
 800f2be:	e7e0      	b.n	800f282 <_dtoa_r+0x242>
 800f2c0:	2401      	movs	r4, #1
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f2c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f2cc:	9300      	str	r3, [sp, #0]
 800f2ce:	9307      	str	r3, [sp, #28]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	2312      	movs	r3, #18
 800f2d4:	e7d0      	b.n	800f278 <_dtoa_r+0x238>
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2da:	e7f5      	b.n	800f2c8 <_dtoa_r+0x288>
 800f2dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	9307      	str	r3, [sp, #28]
 800f2e2:	e7d7      	b.n	800f294 <_dtoa_r+0x254>
 800f2e4:	3101      	adds	r1, #1
 800f2e6:	0052      	lsls	r2, r2, #1
 800f2e8:	e7d8      	b.n	800f29c <_dtoa_r+0x25c>
 800f2ea:	bf00      	nop
 800f2ec:	f3af 8000 	nop.w
 800f2f0:	636f4361 	.word	0x636f4361
 800f2f4:	3fd287a7 	.word	0x3fd287a7
 800f2f8:	8b60c8b3 	.word	0x8b60c8b3
 800f2fc:	3fc68a28 	.word	0x3fc68a28
 800f300:	509f79fb 	.word	0x509f79fb
 800f304:	3fd34413 	.word	0x3fd34413
 800f308:	08011461 	.word	0x08011461
 800f30c:	08011478 	.word	0x08011478
 800f310:	7ff00000 	.word	0x7ff00000
 800f314:	08011431 	.word	0x08011431
 800f318:	3ff80000 	.word	0x3ff80000
 800f31c:	08011580 	.word	0x08011580
 800f320:	080114d0 	.word	0x080114d0
 800f324:	0801145d 	.word	0x0801145d
 800f328:	08011430 	.word	0x08011430
 800f32c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f330:	6018      	str	r0, [r3, #0]
 800f332:	9b07      	ldr	r3, [sp, #28]
 800f334:	2b0e      	cmp	r3, #14
 800f336:	f200 80a4 	bhi.w	800f482 <_dtoa_r+0x442>
 800f33a:	2c00      	cmp	r4, #0
 800f33c:	f000 80a1 	beq.w	800f482 <_dtoa_r+0x442>
 800f340:	2f00      	cmp	r7, #0
 800f342:	dd33      	ble.n	800f3ac <_dtoa_r+0x36c>
 800f344:	4bad      	ldr	r3, [pc, #692]	@ (800f5fc <_dtoa_r+0x5bc>)
 800f346:	f007 020f 	and.w	r2, r7, #15
 800f34a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f34e:	ed93 7b00 	vldr	d7, [r3]
 800f352:	05f8      	lsls	r0, r7, #23
 800f354:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f358:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f35c:	d516      	bpl.n	800f38c <_dtoa_r+0x34c>
 800f35e:	4ba8      	ldr	r3, [pc, #672]	@ (800f600 <_dtoa_r+0x5c0>)
 800f360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f368:	f7f1 fa98 	bl	800089c <__aeabi_ddiv>
 800f36c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f370:	f004 040f 	and.w	r4, r4, #15
 800f374:	2603      	movs	r6, #3
 800f376:	4da2      	ldr	r5, [pc, #648]	@ (800f600 <_dtoa_r+0x5c0>)
 800f378:	b954      	cbnz	r4, 800f390 <_dtoa_r+0x350>
 800f37a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f382:	f7f1 fa8b 	bl	800089c <__aeabi_ddiv>
 800f386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f38a:	e028      	b.n	800f3de <_dtoa_r+0x39e>
 800f38c:	2602      	movs	r6, #2
 800f38e:	e7f2      	b.n	800f376 <_dtoa_r+0x336>
 800f390:	07e1      	lsls	r1, r4, #31
 800f392:	d508      	bpl.n	800f3a6 <_dtoa_r+0x366>
 800f394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f398:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f39c:	f7f1 f954 	bl	8000648 <__aeabi_dmul>
 800f3a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3a4:	3601      	adds	r6, #1
 800f3a6:	1064      	asrs	r4, r4, #1
 800f3a8:	3508      	adds	r5, #8
 800f3aa:	e7e5      	b.n	800f378 <_dtoa_r+0x338>
 800f3ac:	f000 80d2 	beq.w	800f554 <_dtoa_r+0x514>
 800f3b0:	427c      	negs	r4, r7
 800f3b2:	4b92      	ldr	r3, [pc, #584]	@ (800f5fc <_dtoa_r+0x5bc>)
 800f3b4:	4d92      	ldr	r5, [pc, #584]	@ (800f600 <_dtoa_r+0x5c0>)
 800f3b6:	f004 020f 	and.w	r2, r4, #15
 800f3ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3c6:	f7f1 f93f 	bl	8000648 <__aeabi_dmul>
 800f3ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3ce:	1124      	asrs	r4, r4, #4
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	2602      	movs	r6, #2
 800f3d4:	2c00      	cmp	r4, #0
 800f3d6:	f040 80b2 	bne.w	800f53e <_dtoa_r+0x4fe>
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d1d3      	bne.n	800f386 <_dtoa_r+0x346>
 800f3de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f3e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	f000 80b7 	beq.w	800f558 <_dtoa_r+0x518>
 800f3ea:	4b86      	ldr	r3, [pc, #536]	@ (800f604 <_dtoa_r+0x5c4>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	4629      	mov	r1, r5
 800f3f2:	f7f1 fb9b 	bl	8000b2c <__aeabi_dcmplt>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	f000 80ae 	beq.w	800f558 <_dtoa_r+0x518>
 800f3fc:	9b07      	ldr	r3, [sp, #28]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	f000 80aa 	beq.w	800f558 <_dtoa_r+0x518>
 800f404:	9b00      	ldr	r3, [sp, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	dd37      	ble.n	800f47a <_dtoa_r+0x43a>
 800f40a:	1e7b      	subs	r3, r7, #1
 800f40c:	9304      	str	r3, [sp, #16]
 800f40e:	4620      	mov	r0, r4
 800f410:	4b7d      	ldr	r3, [pc, #500]	@ (800f608 <_dtoa_r+0x5c8>)
 800f412:	2200      	movs	r2, #0
 800f414:	4629      	mov	r1, r5
 800f416:	f7f1 f917 	bl	8000648 <__aeabi_dmul>
 800f41a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f41e:	9c00      	ldr	r4, [sp, #0]
 800f420:	3601      	adds	r6, #1
 800f422:	4630      	mov	r0, r6
 800f424:	f7f1 f8a6 	bl	8000574 <__aeabi_i2d>
 800f428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f42c:	f7f1 f90c 	bl	8000648 <__aeabi_dmul>
 800f430:	4b76      	ldr	r3, [pc, #472]	@ (800f60c <_dtoa_r+0x5cc>)
 800f432:	2200      	movs	r2, #0
 800f434:	f7f0 ff52 	bl	80002dc <__adddf3>
 800f438:	4605      	mov	r5, r0
 800f43a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f43e:	2c00      	cmp	r4, #0
 800f440:	f040 808d 	bne.w	800f55e <_dtoa_r+0x51e>
 800f444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f448:	4b71      	ldr	r3, [pc, #452]	@ (800f610 <_dtoa_r+0x5d0>)
 800f44a:	2200      	movs	r2, #0
 800f44c:	f7f0 ff44 	bl	80002d8 <__aeabi_dsub>
 800f450:	4602      	mov	r2, r0
 800f452:	460b      	mov	r3, r1
 800f454:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f458:	462a      	mov	r2, r5
 800f45a:	4633      	mov	r3, r6
 800f45c:	f7f1 fb84 	bl	8000b68 <__aeabi_dcmpgt>
 800f460:	2800      	cmp	r0, #0
 800f462:	f040 828b 	bne.w	800f97c <_dtoa_r+0x93c>
 800f466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f46a:	462a      	mov	r2, r5
 800f46c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f470:	f7f1 fb5c 	bl	8000b2c <__aeabi_dcmplt>
 800f474:	2800      	cmp	r0, #0
 800f476:	f040 8128 	bne.w	800f6ca <_dtoa_r+0x68a>
 800f47a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f47e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f482:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f484:	2b00      	cmp	r3, #0
 800f486:	f2c0 815a 	blt.w	800f73e <_dtoa_r+0x6fe>
 800f48a:	2f0e      	cmp	r7, #14
 800f48c:	f300 8157 	bgt.w	800f73e <_dtoa_r+0x6fe>
 800f490:	4b5a      	ldr	r3, [pc, #360]	@ (800f5fc <_dtoa_r+0x5bc>)
 800f492:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f496:	ed93 7b00 	vldr	d7, [r3]
 800f49a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	ed8d 7b00 	vstr	d7, [sp]
 800f4a2:	da03      	bge.n	800f4ac <_dtoa_r+0x46c>
 800f4a4:	9b07      	ldr	r3, [sp, #28]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f340 8101 	ble.w	800f6ae <_dtoa_r+0x66e>
 800f4ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f4b0:	4656      	mov	r6, sl
 800f4b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	4629      	mov	r1, r5
 800f4ba:	f7f1 f9ef 	bl	800089c <__aeabi_ddiv>
 800f4be:	f7f1 fb73 	bl	8000ba8 <__aeabi_d2iz>
 800f4c2:	4680      	mov	r8, r0
 800f4c4:	f7f1 f856 	bl	8000574 <__aeabi_i2d>
 800f4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4cc:	f7f1 f8bc 	bl	8000648 <__aeabi_dmul>
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	4629      	mov	r1, r5
 800f4d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f4dc:	f7f0 fefc 	bl	80002d8 <__aeabi_dsub>
 800f4e0:	f806 4b01 	strb.w	r4, [r6], #1
 800f4e4:	9d07      	ldr	r5, [sp, #28]
 800f4e6:	eba6 040a 	sub.w	r4, r6, sl
 800f4ea:	42a5      	cmp	r5, r4
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	f040 8117 	bne.w	800f722 <_dtoa_r+0x6e2>
 800f4f4:	f7f0 fef2 	bl	80002dc <__adddf3>
 800f4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	460d      	mov	r5, r1
 800f500:	f7f1 fb32 	bl	8000b68 <__aeabi_dcmpgt>
 800f504:	2800      	cmp	r0, #0
 800f506:	f040 80f9 	bne.w	800f6fc <_dtoa_r+0x6bc>
 800f50a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f50e:	4620      	mov	r0, r4
 800f510:	4629      	mov	r1, r5
 800f512:	f7f1 fb01 	bl	8000b18 <__aeabi_dcmpeq>
 800f516:	b118      	cbz	r0, 800f520 <_dtoa_r+0x4e0>
 800f518:	f018 0f01 	tst.w	r8, #1
 800f51c:	f040 80ee 	bne.w	800f6fc <_dtoa_r+0x6bc>
 800f520:	4649      	mov	r1, r9
 800f522:	4658      	mov	r0, fp
 800f524:	f000 fe94 	bl	8010250 <_Bfree>
 800f528:	2300      	movs	r3, #0
 800f52a:	7033      	strb	r3, [r6, #0]
 800f52c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f52e:	3701      	adds	r7, #1
 800f530:	601f      	str	r7, [r3, #0]
 800f532:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f534:	2b00      	cmp	r3, #0
 800f536:	f000 831d 	beq.w	800fb74 <_dtoa_r+0xb34>
 800f53a:	601e      	str	r6, [r3, #0]
 800f53c:	e31a      	b.n	800fb74 <_dtoa_r+0xb34>
 800f53e:	07e2      	lsls	r2, r4, #31
 800f540:	d505      	bpl.n	800f54e <_dtoa_r+0x50e>
 800f542:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f546:	f7f1 f87f 	bl	8000648 <__aeabi_dmul>
 800f54a:	3601      	adds	r6, #1
 800f54c:	2301      	movs	r3, #1
 800f54e:	1064      	asrs	r4, r4, #1
 800f550:	3508      	adds	r5, #8
 800f552:	e73f      	b.n	800f3d4 <_dtoa_r+0x394>
 800f554:	2602      	movs	r6, #2
 800f556:	e742      	b.n	800f3de <_dtoa_r+0x39e>
 800f558:	9c07      	ldr	r4, [sp, #28]
 800f55a:	9704      	str	r7, [sp, #16]
 800f55c:	e761      	b.n	800f422 <_dtoa_r+0x3e2>
 800f55e:	4b27      	ldr	r3, [pc, #156]	@ (800f5fc <_dtoa_r+0x5bc>)
 800f560:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f562:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f566:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f56a:	4454      	add	r4, sl
 800f56c:	2900      	cmp	r1, #0
 800f56e:	d053      	beq.n	800f618 <_dtoa_r+0x5d8>
 800f570:	4928      	ldr	r1, [pc, #160]	@ (800f614 <_dtoa_r+0x5d4>)
 800f572:	2000      	movs	r0, #0
 800f574:	f7f1 f992 	bl	800089c <__aeabi_ddiv>
 800f578:	4633      	mov	r3, r6
 800f57a:	462a      	mov	r2, r5
 800f57c:	f7f0 feac 	bl	80002d8 <__aeabi_dsub>
 800f580:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f584:	4656      	mov	r6, sl
 800f586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f58a:	f7f1 fb0d 	bl	8000ba8 <__aeabi_d2iz>
 800f58e:	4605      	mov	r5, r0
 800f590:	f7f0 fff0 	bl	8000574 <__aeabi_i2d>
 800f594:	4602      	mov	r2, r0
 800f596:	460b      	mov	r3, r1
 800f598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f59c:	f7f0 fe9c 	bl	80002d8 <__aeabi_dsub>
 800f5a0:	3530      	adds	r5, #48	@ 0x30
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f5aa:	f806 5b01 	strb.w	r5, [r6], #1
 800f5ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f5b2:	f7f1 fabb 	bl	8000b2c <__aeabi_dcmplt>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	d171      	bne.n	800f69e <_dtoa_r+0x65e>
 800f5ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5be:	4911      	ldr	r1, [pc, #68]	@ (800f604 <_dtoa_r+0x5c4>)
 800f5c0:	2000      	movs	r0, #0
 800f5c2:	f7f0 fe89 	bl	80002d8 <__aeabi_dsub>
 800f5c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f5ca:	f7f1 faaf 	bl	8000b2c <__aeabi_dcmplt>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	f040 8095 	bne.w	800f6fe <_dtoa_r+0x6be>
 800f5d4:	42a6      	cmp	r6, r4
 800f5d6:	f43f af50 	beq.w	800f47a <_dtoa_r+0x43a>
 800f5da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f5de:	4b0a      	ldr	r3, [pc, #40]	@ (800f608 <_dtoa_r+0x5c8>)
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	f7f1 f831 	bl	8000648 <__aeabi_dmul>
 800f5e6:	4b08      	ldr	r3, [pc, #32]	@ (800f608 <_dtoa_r+0x5c8>)
 800f5e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5f2:	f7f1 f829 	bl	8000648 <__aeabi_dmul>
 800f5f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5fa:	e7c4      	b.n	800f586 <_dtoa_r+0x546>
 800f5fc:	08011580 	.word	0x08011580
 800f600:	08011558 	.word	0x08011558
 800f604:	3ff00000 	.word	0x3ff00000
 800f608:	40240000 	.word	0x40240000
 800f60c:	401c0000 	.word	0x401c0000
 800f610:	40140000 	.word	0x40140000
 800f614:	3fe00000 	.word	0x3fe00000
 800f618:	4631      	mov	r1, r6
 800f61a:	4628      	mov	r0, r5
 800f61c:	f7f1 f814 	bl	8000648 <__aeabi_dmul>
 800f620:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f624:	9415      	str	r4, [sp, #84]	@ 0x54
 800f626:	4656      	mov	r6, sl
 800f628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f62c:	f7f1 fabc 	bl	8000ba8 <__aeabi_d2iz>
 800f630:	4605      	mov	r5, r0
 800f632:	f7f0 ff9f 	bl	8000574 <__aeabi_i2d>
 800f636:	4602      	mov	r2, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f63e:	f7f0 fe4b 	bl	80002d8 <__aeabi_dsub>
 800f642:	3530      	adds	r5, #48	@ 0x30
 800f644:	f806 5b01 	strb.w	r5, [r6], #1
 800f648:	4602      	mov	r2, r0
 800f64a:	460b      	mov	r3, r1
 800f64c:	42a6      	cmp	r6, r4
 800f64e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f652:	f04f 0200 	mov.w	r2, #0
 800f656:	d124      	bne.n	800f6a2 <_dtoa_r+0x662>
 800f658:	4bac      	ldr	r3, [pc, #688]	@ (800f90c <_dtoa_r+0x8cc>)
 800f65a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f65e:	f7f0 fe3d 	bl	80002dc <__adddf3>
 800f662:	4602      	mov	r2, r0
 800f664:	460b      	mov	r3, r1
 800f666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f66a:	f7f1 fa7d 	bl	8000b68 <__aeabi_dcmpgt>
 800f66e:	2800      	cmp	r0, #0
 800f670:	d145      	bne.n	800f6fe <_dtoa_r+0x6be>
 800f672:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f676:	49a5      	ldr	r1, [pc, #660]	@ (800f90c <_dtoa_r+0x8cc>)
 800f678:	2000      	movs	r0, #0
 800f67a:	f7f0 fe2d 	bl	80002d8 <__aeabi_dsub>
 800f67e:	4602      	mov	r2, r0
 800f680:	460b      	mov	r3, r1
 800f682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f686:	f7f1 fa51 	bl	8000b2c <__aeabi_dcmplt>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	f43f aef5 	beq.w	800f47a <_dtoa_r+0x43a>
 800f690:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f692:	1e73      	subs	r3, r6, #1
 800f694:	9315      	str	r3, [sp, #84]	@ 0x54
 800f696:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f69a:	2b30      	cmp	r3, #48	@ 0x30
 800f69c:	d0f8      	beq.n	800f690 <_dtoa_r+0x650>
 800f69e:	9f04      	ldr	r7, [sp, #16]
 800f6a0:	e73e      	b.n	800f520 <_dtoa_r+0x4e0>
 800f6a2:	4b9b      	ldr	r3, [pc, #620]	@ (800f910 <_dtoa_r+0x8d0>)
 800f6a4:	f7f0 ffd0 	bl	8000648 <__aeabi_dmul>
 800f6a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6ac:	e7bc      	b.n	800f628 <_dtoa_r+0x5e8>
 800f6ae:	d10c      	bne.n	800f6ca <_dtoa_r+0x68a>
 800f6b0:	4b98      	ldr	r3, [pc, #608]	@ (800f914 <_dtoa_r+0x8d4>)
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6b8:	f7f0 ffc6 	bl	8000648 <__aeabi_dmul>
 800f6bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6c0:	f7f1 fa48 	bl	8000b54 <__aeabi_dcmpge>
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	f000 8157 	beq.w	800f978 <_dtoa_r+0x938>
 800f6ca:	2400      	movs	r4, #0
 800f6cc:	4625      	mov	r5, r4
 800f6ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6d0:	43db      	mvns	r3, r3
 800f6d2:	9304      	str	r3, [sp, #16]
 800f6d4:	4656      	mov	r6, sl
 800f6d6:	2700      	movs	r7, #0
 800f6d8:	4621      	mov	r1, r4
 800f6da:	4658      	mov	r0, fp
 800f6dc:	f000 fdb8 	bl	8010250 <_Bfree>
 800f6e0:	2d00      	cmp	r5, #0
 800f6e2:	d0dc      	beq.n	800f69e <_dtoa_r+0x65e>
 800f6e4:	b12f      	cbz	r7, 800f6f2 <_dtoa_r+0x6b2>
 800f6e6:	42af      	cmp	r7, r5
 800f6e8:	d003      	beq.n	800f6f2 <_dtoa_r+0x6b2>
 800f6ea:	4639      	mov	r1, r7
 800f6ec:	4658      	mov	r0, fp
 800f6ee:	f000 fdaf 	bl	8010250 <_Bfree>
 800f6f2:	4629      	mov	r1, r5
 800f6f4:	4658      	mov	r0, fp
 800f6f6:	f000 fdab 	bl	8010250 <_Bfree>
 800f6fa:	e7d0      	b.n	800f69e <_dtoa_r+0x65e>
 800f6fc:	9704      	str	r7, [sp, #16]
 800f6fe:	4633      	mov	r3, r6
 800f700:	461e      	mov	r6, r3
 800f702:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f706:	2a39      	cmp	r2, #57	@ 0x39
 800f708:	d107      	bne.n	800f71a <_dtoa_r+0x6da>
 800f70a:	459a      	cmp	sl, r3
 800f70c:	d1f8      	bne.n	800f700 <_dtoa_r+0x6c0>
 800f70e:	9a04      	ldr	r2, [sp, #16]
 800f710:	3201      	adds	r2, #1
 800f712:	9204      	str	r2, [sp, #16]
 800f714:	2230      	movs	r2, #48	@ 0x30
 800f716:	f88a 2000 	strb.w	r2, [sl]
 800f71a:	781a      	ldrb	r2, [r3, #0]
 800f71c:	3201      	adds	r2, #1
 800f71e:	701a      	strb	r2, [r3, #0]
 800f720:	e7bd      	b.n	800f69e <_dtoa_r+0x65e>
 800f722:	4b7b      	ldr	r3, [pc, #492]	@ (800f910 <_dtoa_r+0x8d0>)
 800f724:	2200      	movs	r2, #0
 800f726:	f7f0 ff8f 	bl	8000648 <__aeabi_dmul>
 800f72a:	2200      	movs	r2, #0
 800f72c:	2300      	movs	r3, #0
 800f72e:	4604      	mov	r4, r0
 800f730:	460d      	mov	r5, r1
 800f732:	f7f1 f9f1 	bl	8000b18 <__aeabi_dcmpeq>
 800f736:	2800      	cmp	r0, #0
 800f738:	f43f aebb 	beq.w	800f4b2 <_dtoa_r+0x472>
 800f73c:	e6f0      	b.n	800f520 <_dtoa_r+0x4e0>
 800f73e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f740:	2a00      	cmp	r2, #0
 800f742:	f000 80db 	beq.w	800f8fc <_dtoa_r+0x8bc>
 800f746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f748:	2a01      	cmp	r2, #1
 800f74a:	f300 80bf 	bgt.w	800f8cc <_dtoa_r+0x88c>
 800f74e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f750:	2a00      	cmp	r2, #0
 800f752:	f000 80b7 	beq.w	800f8c4 <_dtoa_r+0x884>
 800f756:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f75a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f75c:	4646      	mov	r6, r8
 800f75e:	9a08      	ldr	r2, [sp, #32]
 800f760:	2101      	movs	r1, #1
 800f762:	441a      	add	r2, r3
 800f764:	4658      	mov	r0, fp
 800f766:	4498      	add	r8, r3
 800f768:	9208      	str	r2, [sp, #32]
 800f76a:	f000 fe25 	bl	80103b8 <__i2b>
 800f76e:	4605      	mov	r5, r0
 800f770:	b15e      	cbz	r6, 800f78a <_dtoa_r+0x74a>
 800f772:	9b08      	ldr	r3, [sp, #32]
 800f774:	2b00      	cmp	r3, #0
 800f776:	dd08      	ble.n	800f78a <_dtoa_r+0x74a>
 800f778:	42b3      	cmp	r3, r6
 800f77a:	9a08      	ldr	r2, [sp, #32]
 800f77c:	bfa8      	it	ge
 800f77e:	4633      	movge	r3, r6
 800f780:	eba8 0803 	sub.w	r8, r8, r3
 800f784:	1af6      	subs	r6, r6, r3
 800f786:	1ad3      	subs	r3, r2, r3
 800f788:	9308      	str	r3, [sp, #32]
 800f78a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f78c:	b1f3      	cbz	r3, 800f7cc <_dtoa_r+0x78c>
 800f78e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f790:	2b00      	cmp	r3, #0
 800f792:	f000 80b7 	beq.w	800f904 <_dtoa_r+0x8c4>
 800f796:	b18c      	cbz	r4, 800f7bc <_dtoa_r+0x77c>
 800f798:	4629      	mov	r1, r5
 800f79a:	4622      	mov	r2, r4
 800f79c:	4658      	mov	r0, fp
 800f79e:	f000 fecb 	bl	8010538 <__pow5mult>
 800f7a2:	464a      	mov	r2, r9
 800f7a4:	4601      	mov	r1, r0
 800f7a6:	4605      	mov	r5, r0
 800f7a8:	4658      	mov	r0, fp
 800f7aa:	f000 fe1b 	bl	80103e4 <__multiply>
 800f7ae:	4649      	mov	r1, r9
 800f7b0:	9004      	str	r0, [sp, #16]
 800f7b2:	4658      	mov	r0, fp
 800f7b4:	f000 fd4c 	bl	8010250 <_Bfree>
 800f7b8:	9b04      	ldr	r3, [sp, #16]
 800f7ba:	4699      	mov	r9, r3
 800f7bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7be:	1b1a      	subs	r2, r3, r4
 800f7c0:	d004      	beq.n	800f7cc <_dtoa_r+0x78c>
 800f7c2:	4649      	mov	r1, r9
 800f7c4:	4658      	mov	r0, fp
 800f7c6:	f000 feb7 	bl	8010538 <__pow5mult>
 800f7ca:	4681      	mov	r9, r0
 800f7cc:	2101      	movs	r1, #1
 800f7ce:	4658      	mov	r0, fp
 800f7d0:	f000 fdf2 	bl	80103b8 <__i2b>
 800f7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7d6:	4604      	mov	r4, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f000 81cf 	beq.w	800fb7c <_dtoa_r+0xb3c>
 800f7de:	461a      	mov	r2, r3
 800f7e0:	4601      	mov	r1, r0
 800f7e2:	4658      	mov	r0, fp
 800f7e4:	f000 fea8 	bl	8010538 <__pow5mult>
 800f7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	f300 8095 	bgt.w	800f91c <_dtoa_r+0x8dc>
 800f7f2:	9b02      	ldr	r3, [sp, #8]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f040 8087 	bne.w	800f908 <_dtoa_r+0x8c8>
 800f7fa:	9b03      	ldr	r3, [sp, #12]
 800f7fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f800:	2b00      	cmp	r3, #0
 800f802:	f040 8089 	bne.w	800f918 <_dtoa_r+0x8d8>
 800f806:	9b03      	ldr	r3, [sp, #12]
 800f808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f80c:	0d1b      	lsrs	r3, r3, #20
 800f80e:	051b      	lsls	r3, r3, #20
 800f810:	b12b      	cbz	r3, 800f81e <_dtoa_r+0x7de>
 800f812:	9b08      	ldr	r3, [sp, #32]
 800f814:	3301      	adds	r3, #1
 800f816:	9308      	str	r3, [sp, #32]
 800f818:	f108 0801 	add.w	r8, r8, #1
 800f81c:	2301      	movs	r3, #1
 800f81e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f822:	2b00      	cmp	r3, #0
 800f824:	f000 81b0 	beq.w	800fb88 <_dtoa_r+0xb48>
 800f828:	6923      	ldr	r3, [r4, #16]
 800f82a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f82e:	6918      	ldr	r0, [r3, #16]
 800f830:	f000 fd76 	bl	8010320 <__hi0bits>
 800f834:	f1c0 0020 	rsb	r0, r0, #32
 800f838:	9b08      	ldr	r3, [sp, #32]
 800f83a:	4418      	add	r0, r3
 800f83c:	f010 001f 	ands.w	r0, r0, #31
 800f840:	d077      	beq.n	800f932 <_dtoa_r+0x8f2>
 800f842:	f1c0 0320 	rsb	r3, r0, #32
 800f846:	2b04      	cmp	r3, #4
 800f848:	dd6b      	ble.n	800f922 <_dtoa_r+0x8e2>
 800f84a:	9b08      	ldr	r3, [sp, #32]
 800f84c:	f1c0 001c 	rsb	r0, r0, #28
 800f850:	4403      	add	r3, r0
 800f852:	4480      	add	r8, r0
 800f854:	4406      	add	r6, r0
 800f856:	9308      	str	r3, [sp, #32]
 800f858:	f1b8 0f00 	cmp.w	r8, #0
 800f85c:	dd05      	ble.n	800f86a <_dtoa_r+0x82a>
 800f85e:	4649      	mov	r1, r9
 800f860:	4642      	mov	r2, r8
 800f862:	4658      	mov	r0, fp
 800f864:	f000 fec2 	bl	80105ec <__lshift>
 800f868:	4681      	mov	r9, r0
 800f86a:	9b08      	ldr	r3, [sp, #32]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	dd05      	ble.n	800f87c <_dtoa_r+0x83c>
 800f870:	4621      	mov	r1, r4
 800f872:	461a      	mov	r2, r3
 800f874:	4658      	mov	r0, fp
 800f876:	f000 feb9 	bl	80105ec <__lshift>
 800f87a:	4604      	mov	r4, r0
 800f87c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d059      	beq.n	800f936 <_dtoa_r+0x8f6>
 800f882:	4621      	mov	r1, r4
 800f884:	4648      	mov	r0, r9
 800f886:	f000 ff1d 	bl	80106c4 <__mcmp>
 800f88a:	2800      	cmp	r0, #0
 800f88c:	da53      	bge.n	800f936 <_dtoa_r+0x8f6>
 800f88e:	1e7b      	subs	r3, r7, #1
 800f890:	9304      	str	r3, [sp, #16]
 800f892:	4649      	mov	r1, r9
 800f894:	2300      	movs	r3, #0
 800f896:	220a      	movs	r2, #10
 800f898:	4658      	mov	r0, fp
 800f89a:	f000 fcfb 	bl	8010294 <__multadd>
 800f89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8a0:	4681      	mov	r9, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f000 8172 	beq.w	800fb8c <_dtoa_r+0xb4c>
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	4629      	mov	r1, r5
 800f8ac:	220a      	movs	r2, #10
 800f8ae:	4658      	mov	r0, fp
 800f8b0:	f000 fcf0 	bl	8010294 <__multadd>
 800f8b4:	9b00      	ldr	r3, [sp, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	4605      	mov	r5, r0
 800f8ba:	dc67      	bgt.n	800f98c <_dtoa_r+0x94c>
 800f8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8be:	2b02      	cmp	r3, #2
 800f8c0:	dc41      	bgt.n	800f946 <_dtoa_r+0x906>
 800f8c2:	e063      	b.n	800f98c <_dtoa_r+0x94c>
 800f8c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f8c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f8ca:	e746      	b.n	800f75a <_dtoa_r+0x71a>
 800f8cc:	9b07      	ldr	r3, [sp, #28]
 800f8ce:	1e5c      	subs	r4, r3, #1
 800f8d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8d2:	42a3      	cmp	r3, r4
 800f8d4:	bfbf      	itttt	lt
 800f8d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f8d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f8da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f8dc:	1ae3      	sublt	r3, r4, r3
 800f8de:	bfb4      	ite	lt
 800f8e0:	18d2      	addlt	r2, r2, r3
 800f8e2:	1b1c      	subge	r4, r3, r4
 800f8e4:	9b07      	ldr	r3, [sp, #28]
 800f8e6:	bfbc      	itt	lt
 800f8e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f8ea:	2400      	movlt	r4, #0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	bfb5      	itete	lt
 800f8f0:	eba8 0603 	sublt.w	r6, r8, r3
 800f8f4:	9b07      	ldrge	r3, [sp, #28]
 800f8f6:	2300      	movlt	r3, #0
 800f8f8:	4646      	movge	r6, r8
 800f8fa:	e730      	b.n	800f75e <_dtoa_r+0x71e>
 800f8fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f8fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f900:	4646      	mov	r6, r8
 800f902:	e735      	b.n	800f770 <_dtoa_r+0x730>
 800f904:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f906:	e75c      	b.n	800f7c2 <_dtoa_r+0x782>
 800f908:	2300      	movs	r3, #0
 800f90a:	e788      	b.n	800f81e <_dtoa_r+0x7de>
 800f90c:	3fe00000 	.word	0x3fe00000
 800f910:	40240000 	.word	0x40240000
 800f914:	40140000 	.word	0x40140000
 800f918:	9b02      	ldr	r3, [sp, #8]
 800f91a:	e780      	b.n	800f81e <_dtoa_r+0x7de>
 800f91c:	2300      	movs	r3, #0
 800f91e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f920:	e782      	b.n	800f828 <_dtoa_r+0x7e8>
 800f922:	d099      	beq.n	800f858 <_dtoa_r+0x818>
 800f924:	9a08      	ldr	r2, [sp, #32]
 800f926:	331c      	adds	r3, #28
 800f928:	441a      	add	r2, r3
 800f92a:	4498      	add	r8, r3
 800f92c:	441e      	add	r6, r3
 800f92e:	9208      	str	r2, [sp, #32]
 800f930:	e792      	b.n	800f858 <_dtoa_r+0x818>
 800f932:	4603      	mov	r3, r0
 800f934:	e7f6      	b.n	800f924 <_dtoa_r+0x8e4>
 800f936:	9b07      	ldr	r3, [sp, #28]
 800f938:	9704      	str	r7, [sp, #16]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	dc20      	bgt.n	800f980 <_dtoa_r+0x940>
 800f93e:	9300      	str	r3, [sp, #0]
 800f940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f942:	2b02      	cmp	r3, #2
 800f944:	dd1e      	ble.n	800f984 <_dtoa_r+0x944>
 800f946:	9b00      	ldr	r3, [sp, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f47f aec0 	bne.w	800f6ce <_dtoa_r+0x68e>
 800f94e:	4621      	mov	r1, r4
 800f950:	2205      	movs	r2, #5
 800f952:	4658      	mov	r0, fp
 800f954:	f000 fc9e 	bl	8010294 <__multadd>
 800f958:	4601      	mov	r1, r0
 800f95a:	4604      	mov	r4, r0
 800f95c:	4648      	mov	r0, r9
 800f95e:	f000 feb1 	bl	80106c4 <__mcmp>
 800f962:	2800      	cmp	r0, #0
 800f964:	f77f aeb3 	ble.w	800f6ce <_dtoa_r+0x68e>
 800f968:	4656      	mov	r6, sl
 800f96a:	2331      	movs	r3, #49	@ 0x31
 800f96c:	f806 3b01 	strb.w	r3, [r6], #1
 800f970:	9b04      	ldr	r3, [sp, #16]
 800f972:	3301      	adds	r3, #1
 800f974:	9304      	str	r3, [sp, #16]
 800f976:	e6ae      	b.n	800f6d6 <_dtoa_r+0x696>
 800f978:	9c07      	ldr	r4, [sp, #28]
 800f97a:	9704      	str	r7, [sp, #16]
 800f97c:	4625      	mov	r5, r4
 800f97e:	e7f3      	b.n	800f968 <_dtoa_r+0x928>
 800f980:	9b07      	ldr	r3, [sp, #28]
 800f982:	9300      	str	r3, [sp, #0]
 800f984:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f986:	2b00      	cmp	r3, #0
 800f988:	f000 8104 	beq.w	800fb94 <_dtoa_r+0xb54>
 800f98c:	2e00      	cmp	r6, #0
 800f98e:	dd05      	ble.n	800f99c <_dtoa_r+0x95c>
 800f990:	4629      	mov	r1, r5
 800f992:	4632      	mov	r2, r6
 800f994:	4658      	mov	r0, fp
 800f996:	f000 fe29 	bl	80105ec <__lshift>
 800f99a:	4605      	mov	r5, r0
 800f99c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d05a      	beq.n	800fa58 <_dtoa_r+0xa18>
 800f9a2:	6869      	ldr	r1, [r5, #4]
 800f9a4:	4658      	mov	r0, fp
 800f9a6:	f000 fc13 	bl	80101d0 <_Balloc>
 800f9aa:	4606      	mov	r6, r0
 800f9ac:	b928      	cbnz	r0, 800f9ba <_dtoa_r+0x97a>
 800f9ae:	4b84      	ldr	r3, [pc, #528]	@ (800fbc0 <_dtoa_r+0xb80>)
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f9b6:	f7ff bb5a 	b.w	800f06e <_dtoa_r+0x2e>
 800f9ba:	692a      	ldr	r2, [r5, #16]
 800f9bc:	3202      	adds	r2, #2
 800f9be:	0092      	lsls	r2, r2, #2
 800f9c0:	f105 010c 	add.w	r1, r5, #12
 800f9c4:	300c      	adds	r0, #12
 800f9c6:	f7ff faa4 	bl	800ef12 <memcpy>
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	4631      	mov	r1, r6
 800f9ce:	4658      	mov	r0, fp
 800f9d0:	f000 fe0c 	bl	80105ec <__lshift>
 800f9d4:	f10a 0301 	add.w	r3, sl, #1
 800f9d8:	9307      	str	r3, [sp, #28]
 800f9da:	9b00      	ldr	r3, [sp, #0]
 800f9dc:	4453      	add	r3, sl
 800f9de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9e0:	9b02      	ldr	r3, [sp, #8]
 800f9e2:	f003 0301 	and.w	r3, r3, #1
 800f9e6:	462f      	mov	r7, r5
 800f9e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	9b07      	ldr	r3, [sp, #28]
 800f9ee:	4621      	mov	r1, r4
 800f9f0:	3b01      	subs	r3, #1
 800f9f2:	4648      	mov	r0, r9
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	f7ff fa9a 	bl	800ef2e <quorem>
 800f9fa:	4639      	mov	r1, r7
 800f9fc:	9002      	str	r0, [sp, #8]
 800f9fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fa02:	4648      	mov	r0, r9
 800fa04:	f000 fe5e 	bl	80106c4 <__mcmp>
 800fa08:	462a      	mov	r2, r5
 800fa0a:	9008      	str	r0, [sp, #32]
 800fa0c:	4621      	mov	r1, r4
 800fa0e:	4658      	mov	r0, fp
 800fa10:	f000 fe74 	bl	80106fc <__mdiff>
 800fa14:	68c2      	ldr	r2, [r0, #12]
 800fa16:	4606      	mov	r6, r0
 800fa18:	bb02      	cbnz	r2, 800fa5c <_dtoa_r+0xa1c>
 800fa1a:	4601      	mov	r1, r0
 800fa1c:	4648      	mov	r0, r9
 800fa1e:	f000 fe51 	bl	80106c4 <__mcmp>
 800fa22:	4602      	mov	r2, r0
 800fa24:	4631      	mov	r1, r6
 800fa26:	4658      	mov	r0, fp
 800fa28:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa2a:	f000 fc11 	bl	8010250 <_Bfree>
 800fa2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa32:	9e07      	ldr	r6, [sp, #28]
 800fa34:	ea43 0102 	orr.w	r1, r3, r2
 800fa38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa3a:	4319      	orrs	r1, r3
 800fa3c:	d110      	bne.n	800fa60 <_dtoa_r+0xa20>
 800fa3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa42:	d029      	beq.n	800fa98 <_dtoa_r+0xa58>
 800fa44:	9b08      	ldr	r3, [sp, #32]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	dd02      	ble.n	800fa50 <_dtoa_r+0xa10>
 800fa4a:	9b02      	ldr	r3, [sp, #8]
 800fa4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fa50:	9b00      	ldr	r3, [sp, #0]
 800fa52:	f883 8000 	strb.w	r8, [r3]
 800fa56:	e63f      	b.n	800f6d8 <_dtoa_r+0x698>
 800fa58:	4628      	mov	r0, r5
 800fa5a:	e7bb      	b.n	800f9d4 <_dtoa_r+0x994>
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	e7e1      	b.n	800fa24 <_dtoa_r+0x9e4>
 800fa60:	9b08      	ldr	r3, [sp, #32]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	db04      	blt.n	800fa70 <_dtoa_r+0xa30>
 800fa66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa68:	430b      	orrs	r3, r1
 800fa6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa6c:	430b      	orrs	r3, r1
 800fa6e:	d120      	bne.n	800fab2 <_dtoa_r+0xa72>
 800fa70:	2a00      	cmp	r2, #0
 800fa72:	dded      	ble.n	800fa50 <_dtoa_r+0xa10>
 800fa74:	4649      	mov	r1, r9
 800fa76:	2201      	movs	r2, #1
 800fa78:	4658      	mov	r0, fp
 800fa7a:	f000 fdb7 	bl	80105ec <__lshift>
 800fa7e:	4621      	mov	r1, r4
 800fa80:	4681      	mov	r9, r0
 800fa82:	f000 fe1f 	bl	80106c4 <__mcmp>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	dc03      	bgt.n	800fa92 <_dtoa_r+0xa52>
 800fa8a:	d1e1      	bne.n	800fa50 <_dtoa_r+0xa10>
 800fa8c:	f018 0f01 	tst.w	r8, #1
 800fa90:	d0de      	beq.n	800fa50 <_dtoa_r+0xa10>
 800fa92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa96:	d1d8      	bne.n	800fa4a <_dtoa_r+0xa0a>
 800fa98:	9a00      	ldr	r2, [sp, #0]
 800fa9a:	2339      	movs	r3, #57	@ 0x39
 800fa9c:	7013      	strb	r3, [r2, #0]
 800fa9e:	4633      	mov	r3, r6
 800faa0:	461e      	mov	r6, r3
 800faa2:	3b01      	subs	r3, #1
 800faa4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800faa8:	2a39      	cmp	r2, #57	@ 0x39
 800faaa:	d052      	beq.n	800fb52 <_dtoa_r+0xb12>
 800faac:	3201      	adds	r2, #1
 800faae:	701a      	strb	r2, [r3, #0]
 800fab0:	e612      	b.n	800f6d8 <_dtoa_r+0x698>
 800fab2:	2a00      	cmp	r2, #0
 800fab4:	dd07      	ble.n	800fac6 <_dtoa_r+0xa86>
 800fab6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800faba:	d0ed      	beq.n	800fa98 <_dtoa_r+0xa58>
 800fabc:	9a00      	ldr	r2, [sp, #0]
 800fabe:	f108 0301 	add.w	r3, r8, #1
 800fac2:	7013      	strb	r3, [r2, #0]
 800fac4:	e608      	b.n	800f6d8 <_dtoa_r+0x698>
 800fac6:	9b07      	ldr	r3, [sp, #28]
 800fac8:	9a07      	ldr	r2, [sp, #28]
 800faca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800face:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d028      	beq.n	800fb26 <_dtoa_r+0xae6>
 800fad4:	4649      	mov	r1, r9
 800fad6:	2300      	movs	r3, #0
 800fad8:	220a      	movs	r2, #10
 800fada:	4658      	mov	r0, fp
 800fadc:	f000 fbda 	bl	8010294 <__multadd>
 800fae0:	42af      	cmp	r7, r5
 800fae2:	4681      	mov	r9, r0
 800fae4:	f04f 0300 	mov.w	r3, #0
 800fae8:	f04f 020a 	mov.w	r2, #10
 800faec:	4639      	mov	r1, r7
 800faee:	4658      	mov	r0, fp
 800faf0:	d107      	bne.n	800fb02 <_dtoa_r+0xac2>
 800faf2:	f000 fbcf 	bl	8010294 <__multadd>
 800faf6:	4607      	mov	r7, r0
 800faf8:	4605      	mov	r5, r0
 800fafa:	9b07      	ldr	r3, [sp, #28]
 800fafc:	3301      	adds	r3, #1
 800fafe:	9307      	str	r3, [sp, #28]
 800fb00:	e774      	b.n	800f9ec <_dtoa_r+0x9ac>
 800fb02:	f000 fbc7 	bl	8010294 <__multadd>
 800fb06:	4629      	mov	r1, r5
 800fb08:	4607      	mov	r7, r0
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	220a      	movs	r2, #10
 800fb0e:	4658      	mov	r0, fp
 800fb10:	f000 fbc0 	bl	8010294 <__multadd>
 800fb14:	4605      	mov	r5, r0
 800fb16:	e7f0      	b.n	800fafa <_dtoa_r+0xaba>
 800fb18:	9b00      	ldr	r3, [sp, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	bfcc      	ite	gt
 800fb1e:	461e      	movgt	r6, r3
 800fb20:	2601      	movle	r6, #1
 800fb22:	4456      	add	r6, sl
 800fb24:	2700      	movs	r7, #0
 800fb26:	4649      	mov	r1, r9
 800fb28:	2201      	movs	r2, #1
 800fb2a:	4658      	mov	r0, fp
 800fb2c:	f000 fd5e 	bl	80105ec <__lshift>
 800fb30:	4621      	mov	r1, r4
 800fb32:	4681      	mov	r9, r0
 800fb34:	f000 fdc6 	bl	80106c4 <__mcmp>
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	dcb0      	bgt.n	800fa9e <_dtoa_r+0xa5e>
 800fb3c:	d102      	bne.n	800fb44 <_dtoa_r+0xb04>
 800fb3e:	f018 0f01 	tst.w	r8, #1
 800fb42:	d1ac      	bne.n	800fa9e <_dtoa_r+0xa5e>
 800fb44:	4633      	mov	r3, r6
 800fb46:	461e      	mov	r6, r3
 800fb48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb4c:	2a30      	cmp	r2, #48	@ 0x30
 800fb4e:	d0fa      	beq.n	800fb46 <_dtoa_r+0xb06>
 800fb50:	e5c2      	b.n	800f6d8 <_dtoa_r+0x698>
 800fb52:	459a      	cmp	sl, r3
 800fb54:	d1a4      	bne.n	800faa0 <_dtoa_r+0xa60>
 800fb56:	9b04      	ldr	r3, [sp, #16]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	9304      	str	r3, [sp, #16]
 800fb5c:	2331      	movs	r3, #49	@ 0x31
 800fb5e:	f88a 3000 	strb.w	r3, [sl]
 800fb62:	e5b9      	b.n	800f6d8 <_dtoa_r+0x698>
 800fb64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fbc4 <_dtoa_r+0xb84>
 800fb6a:	b11b      	cbz	r3, 800fb74 <_dtoa_r+0xb34>
 800fb6c:	f10a 0308 	add.w	r3, sl, #8
 800fb70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fb72:	6013      	str	r3, [r2, #0]
 800fb74:	4650      	mov	r0, sl
 800fb76:	b019      	add	sp, #100	@ 0x64
 800fb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	f77f ae37 	ble.w	800f7f2 <_dtoa_r+0x7b2>
 800fb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb86:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb88:	2001      	movs	r0, #1
 800fb8a:	e655      	b.n	800f838 <_dtoa_r+0x7f8>
 800fb8c:	9b00      	ldr	r3, [sp, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	f77f aed6 	ble.w	800f940 <_dtoa_r+0x900>
 800fb94:	4656      	mov	r6, sl
 800fb96:	4621      	mov	r1, r4
 800fb98:	4648      	mov	r0, r9
 800fb9a:	f7ff f9c8 	bl	800ef2e <quorem>
 800fb9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fba2:	f806 8b01 	strb.w	r8, [r6], #1
 800fba6:	9b00      	ldr	r3, [sp, #0]
 800fba8:	eba6 020a 	sub.w	r2, r6, sl
 800fbac:	4293      	cmp	r3, r2
 800fbae:	ddb3      	ble.n	800fb18 <_dtoa_r+0xad8>
 800fbb0:	4649      	mov	r1, r9
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	220a      	movs	r2, #10
 800fbb6:	4658      	mov	r0, fp
 800fbb8:	f000 fb6c 	bl	8010294 <__multadd>
 800fbbc:	4681      	mov	r9, r0
 800fbbe:	e7ea      	b.n	800fb96 <_dtoa_r+0xb56>
 800fbc0:	080114d0 	.word	0x080114d0
 800fbc4:	08011454 	.word	0x08011454

0800fbc8 <_free_r>:
 800fbc8:	b538      	push	{r3, r4, r5, lr}
 800fbca:	4605      	mov	r5, r0
 800fbcc:	2900      	cmp	r1, #0
 800fbce:	d041      	beq.n	800fc54 <_free_r+0x8c>
 800fbd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbd4:	1f0c      	subs	r4, r1, #4
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	bfb8      	it	lt
 800fbda:	18e4      	addlt	r4, r4, r3
 800fbdc:	f000 faec 	bl	80101b8 <__malloc_lock>
 800fbe0:	4a1d      	ldr	r2, [pc, #116]	@ (800fc58 <_free_r+0x90>)
 800fbe2:	6813      	ldr	r3, [r2, #0]
 800fbe4:	b933      	cbnz	r3, 800fbf4 <_free_r+0x2c>
 800fbe6:	6063      	str	r3, [r4, #4]
 800fbe8:	6014      	str	r4, [r2, #0]
 800fbea:	4628      	mov	r0, r5
 800fbec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbf0:	f000 bae8 	b.w	80101c4 <__malloc_unlock>
 800fbf4:	42a3      	cmp	r3, r4
 800fbf6:	d908      	bls.n	800fc0a <_free_r+0x42>
 800fbf8:	6820      	ldr	r0, [r4, #0]
 800fbfa:	1821      	adds	r1, r4, r0
 800fbfc:	428b      	cmp	r3, r1
 800fbfe:	bf01      	itttt	eq
 800fc00:	6819      	ldreq	r1, [r3, #0]
 800fc02:	685b      	ldreq	r3, [r3, #4]
 800fc04:	1809      	addeq	r1, r1, r0
 800fc06:	6021      	streq	r1, [r4, #0]
 800fc08:	e7ed      	b.n	800fbe6 <_free_r+0x1e>
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	b10b      	cbz	r3, 800fc14 <_free_r+0x4c>
 800fc10:	42a3      	cmp	r3, r4
 800fc12:	d9fa      	bls.n	800fc0a <_free_r+0x42>
 800fc14:	6811      	ldr	r1, [r2, #0]
 800fc16:	1850      	adds	r0, r2, r1
 800fc18:	42a0      	cmp	r0, r4
 800fc1a:	d10b      	bne.n	800fc34 <_free_r+0x6c>
 800fc1c:	6820      	ldr	r0, [r4, #0]
 800fc1e:	4401      	add	r1, r0
 800fc20:	1850      	adds	r0, r2, r1
 800fc22:	4283      	cmp	r3, r0
 800fc24:	6011      	str	r1, [r2, #0]
 800fc26:	d1e0      	bne.n	800fbea <_free_r+0x22>
 800fc28:	6818      	ldr	r0, [r3, #0]
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	6053      	str	r3, [r2, #4]
 800fc2e:	4408      	add	r0, r1
 800fc30:	6010      	str	r0, [r2, #0]
 800fc32:	e7da      	b.n	800fbea <_free_r+0x22>
 800fc34:	d902      	bls.n	800fc3c <_free_r+0x74>
 800fc36:	230c      	movs	r3, #12
 800fc38:	602b      	str	r3, [r5, #0]
 800fc3a:	e7d6      	b.n	800fbea <_free_r+0x22>
 800fc3c:	6820      	ldr	r0, [r4, #0]
 800fc3e:	1821      	adds	r1, r4, r0
 800fc40:	428b      	cmp	r3, r1
 800fc42:	bf04      	itt	eq
 800fc44:	6819      	ldreq	r1, [r3, #0]
 800fc46:	685b      	ldreq	r3, [r3, #4]
 800fc48:	6063      	str	r3, [r4, #4]
 800fc4a:	bf04      	itt	eq
 800fc4c:	1809      	addeq	r1, r1, r0
 800fc4e:	6021      	streq	r1, [r4, #0]
 800fc50:	6054      	str	r4, [r2, #4]
 800fc52:	e7ca      	b.n	800fbea <_free_r+0x22>
 800fc54:	bd38      	pop	{r3, r4, r5, pc}
 800fc56:	bf00      	nop
 800fc58:	200077e4 	.word	0x200077e4

0800fc5c <__ssputs_r>:
 800fc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc60:	688e      	ldr	r6, [r1, #8]
 800fc62:	461f      	mov	r7, r3
 800fc64:	42be      	cmp	r6, r7
 800fc66:	680b      	ldr	r3, [r1, #0]
 800fc68:	4682      	mov	sl, r0
 800fc6a:	460c      	mov	r4, r1
 800fc6c:	4690      	mov	r8, r2
 800fc6e:	d82d      	bhi.n	800fccc <__ssputs_r+0x70>
 800fc70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc78:	d026      	beq.n	800fcc8 <__ssputs_r+0x6c>
 800fc7a:	6965      	ldr	r5, [r4, #20]
 800fc7c:	6909      	ldr	r1, [r1, #16]
 800fc7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc82:	eba3 0901 	sub.w	r9, r3, r1
 800fc86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc8a:	1c7b      	adds	r3, r7, #1
 800fc8c:	444b      	add	r3, r9
 800fc8e:	106d      	asrs	r5, r5, #1
 800fc90:	429d      	cmp	r5, r3
 800fc92:	bf38      	it	cc
 800fc94:	461d      	movcc	r5, r3
 800fc96:	0553      	lsls	r3, r2, #21
 800fc98:	d527      	bpl.n	800fcea <__ssputs_r+0x8e>
 800fc9a:	4629      	mov	r1, r5
 800fc9c:	f000 f960 	bl	800ff60 <_malloc_r>
 800fca0:	4606      	mov	r6, r0
 800fca2:	b360      	cbz	r0, 800fcfe <__ssputs_r+0xa2>
 800fca4:	6921      	ldr	r1, [r4, #16]
 800fca6:	464a      	mov	r2, r9
 800fca8:	f7ff f933 	bl	800ef12 <memcpy>
 800fcac:	89a3      	ldrh	r3, [r4, #12]
 800fcae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fcb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcb6:	81a3      	strh	r3, [r4, #12]
 800fcb8:	6126      	str	r6, [r4, #16]
 800fcba:	6165      	str	r5, [r4, #20]
 800fcbc:	444e      	add	r6, r9
 800fcbe:	eba5 0509 	sub.w	r5, r5, r9
 800fcc2:	6026      	str	r6, [r4, #0]
 800fcc4:	60a5      	str	r5, [r4, #8]
 800fcc6:	463e      	mov	r6, r7
 800fcc8:	42be      	cmp	r6, r7
 800fcca:	d900      	bls.n	800fcce <__ssputs_r+0x72>
 800fccc:	463e      	mov	r6, r7
 800fcce:	6820      	ldr	r0, [r4, #0]
 800fcd0:	4632      	mov	r2, r6
 800fcd2:	4641      	mov	r1, r8
 800fcd4:	f000 fe6f 	bl	80109b6 <memmove>
 800fcd8:	68a3      	ldr	r3, [r4, #8]
 800fcda:	1b9b      	subs	r3, r3, r6
 800fcdc:	60a3      	str	r3, [r4, #8]
 800fcde:	6823      	ldr	r3, [r4, #0]
 800fce0:	4433      	add	r3, r6
 800fce2:	6023      	str	r3, [r4, #0]
 800fce4:	2000      	movs	r0, #0
 800fce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcea:	462a      	mov	r2, r5
 800fcec:	f000 fe35 	bl	801095a <_realloc_r>
 800fcf0:	4606      	mov	r6, r0
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	d1e0      	bne.n	800fcb8 <__ssputs_r+0x5c>
 800fcf6:	6921      	ldr	r1, [r4, #16]
 800fcf8:	4650      	mov	r0, sl
 800fcfa:	f7ff ff65 	bl	800fbc8 <_free_r>
 800fcfe:	230c      	movs	r3, #12
 800fd00:	f8ca 3000 	str.w	r3, [sl]
 800fd04:	89a3      	ldrh	r3, [r4, #12]
 800fd06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd0a:	81a3      	strh	r3, [r4, #12]
 800fd0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd10:	e7e9      	b.n	800fce6 <__ssputs_r+0x8a>
	...

0800fd14 <_svfiprintf_r>:
 800fd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd18:	4698      	mov	r8, r3
 800fd1a:	898b      	ldrh	r3, [r1, #12]
 800fd1c:	061b      	lsls	r3, r3, #24
 800fd1e:	b09d      	sub	sp, #116	@ 0x74
 800fd20:	4607      	mov	r7, r0
 800fd22:	460d      	mov	r5, r1
 800fd24:	4614      	mov	r4, r2
 800fd26:	d510      	bpl.n	800fd4a <_svfiprintf_r+0x36>
 800fd28:	690b      	ldr	r3, [r1, #16]
 800fd2a:	b973      	cbnz	r3, 800fd4a <_svfiprintf_r+0x36>
 800fd2c:	2140      	movs	r1, #64	@ 0x40
 800fd2e:	f000 f917 	bl	800ff60 <_malloc_r>
 800fd32:	6028      	str	r0, [r5, #0]
 800fd34:	6128      	str	r0, [r5, #16]
 800fd36:	b930      	cbnz	r0, 800fd46 <_svfiprintf_r+0x32>
 800fd38:	230c      	movs	r3, #12
 800fd3a:	603b      	str	r3, [r7, #0]
 800fd3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd40:	b01d      	add	sp, #116	@ 0x74
 800fd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd46:	2340      	movs	r3, #64	@ 0x40
 800fd48:	616b      	str	r3, [r5, #20]
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd4e:	2320      	movs	r3, #32
 800fd50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd54:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd58:	2330      	movs	r3, #48	@ 0x30
 800fd5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fef8 <_svfiprintf_r+0x1e4>
 800fd5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd62:	f04f 0901 	mov.w	r9, #1
 800fd66:	4623      	mov	r3, r4
 800fd68:	469a      	mov	sl, r3
 800fd6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd6e:	b10a      	cbz	r2, 800fd74 <_svfiprintf_r+0x60>
 800fd70:	2a25      	cmp	r2, #37	@ 0x25
 800fd72:	d1f9      	bne.n	800fd68 <_svfiprintf_r+0x54>
 800fd74:	ebba 0b04 	subs.w	fp, sl, r4
 800fd78:	d00b      	beq.n	800fd92 <_svfiprintf_r+0x7e>
 800fd7a:	465b      	mov	r3, fp
 800fd7c:	4622      	mov	r2, r4
 800fd7e:	4629      	mov	r1, r5
 800fd80:	4638      	mov	r0, r7
 800fd82:	f7ff ff6b 	bl	800fc5c <__ssputs_r>
 800fd86:	3001      	adds	r0, #1
 800fd88:	f000 80a7 	beq.w	800feda <_svfiprintf_r+0x1c6>
 800fd8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd8e:	445a      	add	r2, fp
 800fd90:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd92:	f89a 3000 	ldrb.w	r3, [sl]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	f000 809f 	beq.w	800feda <_svfiprintf_r+0x1c6>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fda2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fda6:	f10a 0a01 	add.w	sl, sl, #1
 800fdaa:	9304      	str	r3, [sp, #16]
 800fdac:	9307      	str	r3, [sp, #28]
 800fdae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fdb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800fdb4:	4654      	mov	r4, sl
 800fdb6:	2205      	movs	r2, #5
 800fdb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdbc:	484e      	ldr	r0, [pc, #312]	@ (800fef8 <_svfiprintf_r+0x1e4>)
 800fdbe:	f7f0 fa2f 	bl	8000220 <memchr>
 800fdc2:	9a04      	ldr	r2, [sp, #16]
 800fdc4:	b9d8      	cbnz	r0, 800fdfe <_svfiprintf_r+0xea>
 800fdc6:	06d0      	lsls	r0, r2, #27
 800fdc8:	bf44      	itt	mi
 800fdca:	2320      	movmi	r3, #32
 800fdcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdd0:	0711      	lsls	r1, r2, #28
 800fdd2:	bf44      	itt	mi
 800fdd4:	232b      	movmi	r3, #43	@ 0x2b
 800fdd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdda:	f89a 3000 	ldrb.w	r3, [sl]
 800fdde:	2b2a      	cmp	r3, #42	@ 0x2a
 800fde0:	d015      	beq.n	800fe0e <_svfiprintf_r+0xfa>
 800fde2:	9a07      	ldr	r2, [sp, #28]
 800fde4:	4654      	mov	r4, sl
 800fde6:	2000      	movs	r0, #0
 800fde8:	f04f 0c0a 	mov.w	ip, #10
 800fdec:	4621      	mov	r1, r4
 800fdee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdf2:	3b30      	subs	r3, #48	@ 0x30
 800fdf4:	2b09      	cmp	r3, #9
 800fdf6:	d94b      	bls.n	800fe90 <_svfiprintf_r+0x17c>
 800fdf8:	b1b0      	cbz	r0, 800fe28 <_svfiprintf_r+0x114>
 800fdfa:	9207      	str	r2, [sp, #28]
 800fdfc:	e014      	b.n	800fe28 <_svfiprintf_r+0x114>
 800fdfe:	eba0 0308 	sub.w	r3, r0, r8
 800fe02:	fa09 f303 	lsl.w	r3, r9, r3
 800fe06:	4313      	orrs	r3, r2
 800fe08:	9304      	str	r3, [sp, #16]
 800fe0a:	46a2      	mov	sl, r4
 800fe0c:	e7d2      	b.n	800fdb4 <_svfiprintf_r+0xa0>
 800fe0e:	9b03      	ldr	r3, [sp, #12]
 800fe10:	1d19      	adds	r1, r3, #4
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	9103      	str	r1, [sp, #12]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	bfbb      	ittet	lt
 800fe1a:	425b      	neglt	r3, r3
 800fe1c:	f042 0202 	orrlt.w	r2, r2, #2
 800fe20:	9307      	strge	r3, [sp, #28]
 800fe22:	9307      	strlt	r3, [sp, #28]
 800fe24:	bfb8      	it	lt
 800fe26:	9204      	strlt	r2, [sp, #16]
 800fe28:	7823      	ldrb	r3, [r4, #0]
 800fe2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe2c:	d10a      	bne.n	800fe44 <_svfiprintf_r+0x130>
 800fe2e:	7863      	ldrb	r3, [r4, #1]
 800fe30:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe32:	d132      	bne.n	800fe9a <_svfiprintf_r+0x186>
 800fe34:	9b03      	ldr	r3, [sp, #12]
 800fe36:	1d1a      	adds	r2, r3, #4
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	9203      	str	r2, [sp, #12]
 800fe3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe40:	3402      	adds	r4, #2
 800fe42:	9305      	str	r3, [sp, #20]
 800fe44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ff08 <_svfiprintf_r+0x1f4>
 800fe48:	7821      	ldrb	r1, [r4, #0]
 800fe4a:	2203      	movs	r2, #3
 800fe4c:	4650      	mov	r0, sl
 800fe4e:	f7f0 f9e7 	bl	8000220 <memchr>
 800fe52:	b138      	cbz	r0, 800fe64 <_svfiprintf_r+0x150>
 800fe54:	9b04      	ldr	r3, [sp, #16]
 800fe56:	eba0 000a 	sub.w	r0, r0, sl
 800fe5a:	2240      	movs	r2, #64	@ 0x40
 800fe5c:	4082      	lsls	r2, r0
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	3401      	adds	r4, #1
 800fe62:	9304      	str	r3, [sp, #16]
 800fe64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe68:	4824      	ldr	r0, [pc, #144]	@ (800fefc <_svfiprintf_r+0x1e8>)
 800fe6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe6e:	2206      	movs	r2, #6
 800fe70:	f7f0 f9d6 	bl	8000220 <memchr>
 800fe74:	2800      	cmp	r0, #0
 800fe76:	d036      	beq.n	800fee6 <_svfiprintf_r+0x1d2>
 800fe78:	4b21      	ldr	r3, [pc, #132]	@ (800ff00 <_svfiprintf_r+0x1ec>)
 800fe7a:	bb1b      	cbnz	r3, 800fec4 <_svfiprintf_r+0x1b0>
 800fe7c:	9b03      	ldr	r3, [sp, #12]
 800fe7e:	3307      	adds	r3, #7
 800fe80:	f023 0307 	bic.w	r3, r3, #7
 800fe84:	3308      	adds	r3, #8
 800fe86:	9303      	str	r3, [sp, #12]
 800fe88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe8a:	4433      	add	r3, r6
 800fe8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe8e:	e76a      	b.n	800fd66 <_svfiprintf_r+0x52>
 800fe90:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe94:	460c      	mov	r4, r1
 800fe96:	2001      	movs	r0, #1
 800fe98:	e7a8      	b.n	800fdec <_svfiprintf_r+0xd8>
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	3401      	adds	r4, #1
 800fe9e:	9305      	str	r3, [sp, #20]
 800fea0:	4619      	mov	r1, r3
 800fea2:	f04f 0c0a 	mov.w	ip, #10
 800fea6:	4620      	mov	r0, r4
 800fea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800feac:	3a30      	subs	r2, #48	@ 0x30
 800feae:	2a09      	cmp	r2, #9
 800feb0:	d903      	bls.n	800feba <_svfiprintf_r+0x1a6>
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d0c6      	beq.n	800fe44 <_svfiprintf_r+0x130>
 800feb6:	9105      	str	r1, [sp, #20]
 800feb8:	e7c4      	b.n	800fe44 <_svfiprintf_r+0x130>
 800feba:	fb0c 2101 	mla	r1, ip, r1, r2
 800febe:	4604      	mov	r4, r0
 800fec0:	2301      	movs	r3, #1
 800fec2:	e7f0      	b.n	800fea6 <_svfiprintf_r+0x192>
 800fec4:	ab03      	add	r3, sp, #12
 800fec6:	9300      	str	r3, [sp, #0]
 800fec8:	462a      	mov	r2, r5
 800feca:	4b0e      	ldr	r3, [pc, #56]	@ (800ff04 <_svfiprintf_r+0x1f0>)
 800fecc:	a904      	add	r1, sp, #16
 800fece:	4638      	mov	r0, r7
 800fed0:	f7fe fadc 	bl	800e48c <_printf_float>
 800fed4:	1c42      	adds	r2, r0, #1
 800fed6:	4606      	mov	r6, r0
 800fed8:	d1d6      	bne.n	800fe88 <_svfiprintf_r+0x174>
 800feda:	89ab      	ldrh	r3, [r5, #12]
 800fedc:	065b      	lsls	r3, r3, #25
 800fede:	f53f af2d 	bmi.w	800fd3c <_svfiprintf_r+0x28>
 800fee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fee4:	e72c      	b.n	800fd40 <_svfiprintf_r+0x2c>
 800fee6:	ab03      	add	r3, sp, #12
 800fee8:	9300      	str	r3, [sp, #0]
 800feea:	462a      	mov	r2, r5
 800feec:	4b05      	ldr	r3, [pc, #20]	@ (800ff04 <_svfiprintf_r+0x1f0>)
 800feee:	a904      	add	r1, sp, #16
 800fef0:	4638      	mov	r0, r7
 800fef2:	f7fe fd63 	bl	800e9bc <_printf_i>
 800fef6:	e7ed      	b.n	800fed4 <_svfiprintf_r+0x1c0>
 800fef8:	080114e1 	.word	0x080114e1
 800fefc:	080114eb 	.word	0x080114eb
 800ff00:	0800e48d 	.word	0x0800e48d
 800ff04:	0800fc5d 	.word	0x0800fc5d
 800ff08:	080114e7 	.word	0x080114e7

0800ff0c <malloc>:
 800ff0c:	4b02      	ldr	r3, [pc, #8]	@ (800ff18 <malloc+0xc>)
 800ff0e:	4601      	mov	r1, r0
 800ff10:	6818      	ldr	r0, [r3, #0]
 800ff12:	f000 b825 	b.w	800ff60 <_malloc_r>
 800ff16:	bf00      	nop
 800ff18:	20000194 	.word	0x20000194

0800ff1c <sbrk_aligned>:
 800ff1c:	b570      	push	{r4, r5, r6, lr}
 800ff1e:	4e0f      	ldr	r6, [pc, #60]	@ (800ff5c <sbrk_aligned+0x40>)
 800ff20:	460c      	mov	r4, r1
 800ff22:	6831      	ldr	r1, [r6, #0]
 800ff24:	4605      	mov	r5, r0
 800ff26:	b911      	cbnz	r1, 800ff2e <sbrk_aligned+0x12>
 800ff28:	f000 fd94 	bl	8010a54 <_sbrk_r>
 800ff2c:	6030      	str	r0, [r6, #0]
 800ff2e:	4621      	mov	r1, r4
 800ff30:	4628      	mov	r0, r5
 800ff32:	f000 fd8f 	bl	8010a54 <_sbrk_r>
 800ff36:	1c43      	adds	r3, r0, #1
 800ff38:	d103      	bne.n	800ff42 <sbrk_aligned+0x26>
 800ff3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ff3e:	4620      	mov	r0, r4
 800ff40:	bd70      	pop	{r4, r5, r6, pc}
 800ff42:	1cc4      	adds	r4, r0, #3
 800ff44:	f024 0403 	bic.w	r4, r4, #3
 800ff48:	42a0      	cmp	r0, r4
 800ff4a:	d0f8      	beq.n	800ff3e <sbrk_aligned+0x22>
 800ff4c:	1a21      	subs	r1, r4, r0
 800ff4e:	4628      	mov	r0, r5
 800ff50:	f000 fd80 	bl	8010a54 <_sbrk_r>
 800ff54:	3001      	adds	r0, #1
 800ff56:	d1f2      	bne.n	800ff3e <sbrk_aligned+0x22>
 800ff58:	e7ef      	b.n	800ff3a <sbrk_aligned+0x1e>
 800ff5a:	bf00      	nop
 800ff5c:	200077e0 	.word	0x200077e0

0800ff60 <_malloc_r>:
 800ff60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff64:	1ccd      	adds	r5, r1, #3
 800ff66:	f025 0503 	bic.w	r5, r5, #3
 800ff6a:	3508      	adds	r5, #8
 800ff6c:	2d0c      	cmp	r5, #12
 800ff6e:	bf38      	it	cc
 800ff70:	250c      	movcc	r5, #12
 800ff72:	2d00      	cmp	r5, #0
 800ff74:	4606      	mov	r6, r0
 800ff76:	db01      	blt.n	800ff7c <_malloc_r+0x1c>
 800ff78:	42a9      	cmp	r1, r5
 800ff7a:	d904      	bls.n	800ff86 <_malloc_r+0x26>
 800ff7c:	230c      	movs	r3, #12
 800ff7e:	6033      	str	r3, [r6, #0]
 800ff80:	2000      	movs	r0, #0
 800ff82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801005c <_malloc_r+0xfc>
 800ff8a:	f000 f915 	bl	80101b8 <__malloc_lock>
 800ff8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff92:	461c      	mov	r4, r3
 800ff94:	bb44      	cbnz	r4, 800ffe8 <_malloc_r+0x88>
 800ff96:	4629      	mov	r1, r5
 800ff98:	4630      	mov	r0, r6
 800ff9a:	f7ff ffbf 	bl	800ff1c <sbrk_aligned>
 800ff9e:	1c43      	adds	r3, r0, #1
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	d158      	bne.n	8010056 <_malloc_r+0xf6>
 800ffa4:	f8d8 4000 	ldr.w	r4, [r8]
 800ffa8:	4627      	mov	r7, r4
 800ffaa:	2f00      	cmp	r7, #0
 800ffac:	d143      	bne.n	8010036 <_malloc_r+0xd6>
 800ffae:	2c00      	cmp	r4, #0
 800ffb0:	d04b      	beq.n	801004a <_malloc_r+0xea>
 800ffb2:	6823      	ldr	r3, [r4, #0]
 800ffb4:	4639      	mov	r1, r7
 800ffb6:	4630      	mov	r0, r6
 800ffb8:	eb04 0903 	add.w	r9, r4, r3
 800ffbc:	f000 fd4a 	bl	8010a54 <_sbrk_r>
 800ffc0:	4581      	cmp	r9, r0
 800ffc2:	d142      	bne.n	801004a <_malloc_r+0xea>
 800ffc4:	6821      	ldr	r1, [r4, #0]
 800ffc6:	1a6d      	subs	r5, r5, r1
 800ffc8:	4629      	mov	r1, r5
 800ffca:	4630      	mov	r0, r6
 800ffcc:	f7ff ffa6 	bl	800ff1c <sbrk_aligned>
 800ffd0:	3001      	adds	r0, #1
 800ffd2:	d03a      	beq.n	801004a <_malloc_r+0xea>
 800ffd4:	6823      	ldr	r3, [r4, #0]
 800ffd6:	442b      	add	r3, r5
 800ffd8:	6023      	str	r3, [r4, #0]
 800ffda:	f8d8 3000 	ldr.w	r3, [r8]
 800ffde:	685a      	ldr	r2, [r3, #4]
 800ffe0:	bb62      	cbnz	r2, 801003c <_malloc_r+0xdc>
 800ffe2:	f8c8 7000 	str.w	r7, [r8]
 800ffe6:	e00f      	b.n	8010008 <_malloc_r+0xa8>
 800ffe8:	6822      	ldr	r2, [r4, #0]
 800ffea:	1b52      	subs	r2, r2, r5
 800ffec:	d420      	bmi.n	8010030 <_malloc_r+0xd0>
 800ffee:	2a0b      	cmp	r2, #11
 800fff0:	d917      	bls.n	8010022 <_malloc_r+0xc2>
 800fff2:	1961      	adds	r1, r4, r5
 800fff4:	42a3      	cmp	r3, r4
 800fff6:	6025      	str	r5, [r4, #0]
 800fff8:	bf18      	it	ne
 800fffa:	6059      	strne	r1, [r3, #4]
 800fffc:	6863      	ldr	r3, [r4, #4]
 800fffe:	bf08      	it	eq
 8010000:	f8c8 1000 	streq.w	r1, [r8]
 8010004:	5162      	str	r2, [r4, r5]
 8010006:	604b      	str	r3, [r1, #4]
 8010008:	4630      	mov	r0, r6
 801000a:	f000 f8db 	bl	80101c4 <__malloc_unlock>
 801000e:	f104 000b 	add.w	r0, r4, #11
 8010012:	1d23      	adds	r3, r4, #4
 8010014:	f020 0007 	bic.w	r0, r0, #7
 8010018:	1ac2      	subs	r2, r0, r3
 801001a:	bf1c      	itt	ne
 801001c:	1a1b      	subne	r3, r3, r0
 801001e:	50a3      	strne	r3, [r4, r2]
 8010020:	e7af      	b.n	800ff82 <_malloc_r+0x22>
 8010022:	6862      	ldr	r2, [r4, #4]
 8010024:	42a3      	cmp	r3, r4
 8010026:	bf0c      	ite	eq
 8010028:	f8c8 2000 	streq.w	r2, [r8]
 801002c:	605a      	strne	r2, [r3, #4]
 801002e:	e7eb      	b.n	8010008 <_malloc_r+0xa8>
 8010030:	4623      	mov	r3, r4
 8010032:	6864      	ldr	r4, [r4, #4]
 8010034:	e7ae      	b.n	800ff94 <_malloc_r+0x34>
 8010036:	463c      	mov	r4, r7
 8010038:	687f      	ldr	r7, [r7, #4]
 801003a:	e7b6      	b.n	800ffaa <_malloc_r+0x4a>
 801003c:	461a      	mov	r2, r3
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	42a3      	cmp	r3, r4
 8010042:	d1fb      	bne.n	801003c <_malloc_r+0xdc>
 8010044:	2300      	movs	r3, #0
 8010046:	6053      	str	r3, [r2, #4]
 8010048:	e7de      	b.n	8010008 <_malloc_r+0xa8>
 801004a:	230c      	movs	r3, #12
 801004c:	6033      	str	r3, [r6, #0]
 801004e:	4630      	mov	r0, r6
 8010050:	f000 f8b8 	bl	80101c4 <__malloc_unlock>
 8010054:	e794      	b.n	800ff80 <_malloc_r+0x20>
 8010056:	6005      	str	r5, [r0, #0]
 8010058:	e7d6      	b.n	8010008 <_malloc_r+0xa8>
 801005a:	bf00      	nop
 801005c:	200077e4 	.word	0x200077e4

08010060 <__sflush_r>:
 8010060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010068:	0716      	lsls	r6, r2, #28
 801006a:	4605      	mov	r5, r0
 801006c:	460c      	mov	r4, r1
 801006e:	d454      	bmi.n	801011a <__sflush_r+0xba>
 8010070:	684b      	ldr	r3, [r1, #4]
 8010072:	2b00      	cmp	r3, #0
 8010074:	dc02      	bgt.n	801007c <__sflush_r+0x1c>
 8010076:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010078:	2b00      	cmp	r3, #0
 801007a:	dd48      	ble.n	801010e <__sflush_r+0xae>
 801007c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801007e:	2e00      	cmp	r6, #0
 8010080:	d045      	beq.n	801010e <__sflush_r+0xae>
 8010082:	2300      	movs	r3, #0
 8010084:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010088:	682f      	ldr	r7, [r5, #0]
 801008a:	6a21      	ldr	r1, [r4, #32]
 801008c:	602b      	str	r3, [r5, #0]
 801008e:	d030      	beq.n	80100f2 <__sflush_r+0x92>
 8010090:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010092:	89a3      	ldrh	r3, [r4, #12]
 8010094:	0759      	lsls	r1, r3, #29
 8010096:	d505      	bpl.n	80100a4 <__sflush_r+0x44>
 8010098:	6863      	ldr	r3, [r4, #4]
 801009a:	1ad2      	subs	r2, r2, r3
 801009c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801009e:	b10b      	cbz	r3, 80100a4 <__sflush_r+0x44>
 80100a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80100a2:	1ad2      	subs	r2, r2, r3
 80100a4:	2300      	movs	r3, #0
 80100a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80100a8:	6a21      	ldr	r1, [r4, #32]
 80100aa:	4628      	mov	r0, r5
 80100ac:	47b0      	blx	r6
 80100ae:	1c43      	adds	r3, r0, #1
 80100b0:	89a3      	ldrh	r3, [r4, #12]
 80100b2:	d106      	bne.n	80100c2 <__sflush_r+0x62>
 80100b4:	6829      	ldr	r1, [r5, #0]
 80100b6:	291d      	cmp	r1, #29
 80100b8:	d82b      	bhi.n	8010112 <__sflush_r+0xb2>
 80100ba:	4a2a      	ldr	r2, [pc, #168]	@ (8010164 <__sflush_r+0x104>)
 80100bc:	410a      	asrs	r2, r1
 80100be:	07d6      	lsls	r6, r2, #31
 80100c0:	d427      	bmi.n	8010112 <__sflush_r+0xb2>
 80100c2:	2200      	movs	r2, #0
 80100c4:	6062      	str	r2, [r4, #4]
 80100c6:	04d9      	lsls	r1, r3, #19
 80100c8:	6922      	ldr	r2, [r4, #16]
 80100ca:	6022      	str	r2, [r4, #0]
 80100cc:	d504      	bpl.n	80100d8 <__sflush_r+0x78>
 80100ce:	1c42      	adds	r2, r0, #1
 80100d0:	d101      	bne.n	80100d6 <__sflush_r+0x76>
 80100d2:	682b      	ldr	r3, [r5, #0]
 80100d4:	b903      	cbnz	r3, 80100d8 <__sflush_r+0x78>
 80100d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80100d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80100da:	602f      	str	r7, [r5, #0]
 80100dc:	b1b9      	cbz	r1, 801010e <__sflush_r+0xae>
 80100de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80100e2:	4299      	cmp	r1, r3
 80100e4:	d002      	beq.n	80100ec <__sflush_r+0x8c>
 80100e6:	4628      	mov	r0, r5
 80100e8:	f7ff fd6e 	bl	800fbc8 <_free_r>
 80100ec:	2300      	movs	r3, #0
 80100ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80100f0:	e00d      	b.n	801010e <__sflush_r+0xae>
 80100f2:	2301      	movs	r3, #1
 80100f4:	4628      	mov	r0, r5
 80100f6:	47b0      	blx	r6
 80100f8:	4602      	mov	r2, r0
 80100fa:	1c50      	adds	r0, r2, #1
 80100fc:	d1c9      	bne.n	8010092 <__sflush_r+0x32>
 80100fe:	682b      	ldr	r3, [r5, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d0c6      	beq.n	8010092 <__sflush_r+0x32>
 8010104:	2b1d      	cmp	r3, #29
 8010106:	d001      	beq.n	801010c <__sflush_r+0xac>
 8010108:	2b16      	cmp	r3, #22
 801010a:	d11e      	bne.n	801014a <__sflush_r+0xea>
 801010c:	602f      	str	r7, [r5, #0]
 801010e:	2000      	movs	r0, #0
 8010110:	e022      	b.n	8010158 <__sflush_r+0xf8>
 8010112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010116:	b21b      	sxth	r3, r3
 8010118:	e01b      	b.n	8010152 <__sflush_r+0xf2>
 801011a:	690f      	ldr	r7, [r1, #16]
 801011c:	2f00      	cmp	r7, #0
 801011e:	d0f6      	beq.n	801010e <__sflush_r+0xae>
 8010120:	0793      	lsls	r3, r2, #30
 8010122:	680e      	ldr	r6, [r1, #0]
 8010124:	bf08      	it	eq
 8010126:	694b      	ldreq	r3, [r1, #20]
 8010128:	600f      	str	r7, [r1, #0]
 801012a:	bf18      	it	ne
 801012c:	2300      	movne	r3, #0
 801012e:	eba6 0807 	sub.w	r8, r6, r7
 8010132:	608b      	str	r3, [r1, #8]
 8010134:	f1b8 0f00 	cmp.w	r8, #0
 8010138:	dde9      	ble.n	801010e <__sflush_r+0xae>
 801013a:	6a21      	ldr	r1, [r4, #32]
 801013c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801013e:	4643      	mov	r3, r8
 8010140:	463a      	mov	r2, r7
 8010142:	4628      	mov	r0, r5
 8010144:	47b0      	blx	r6
 8010146:	2800      	cmp	r0, #0
 8010148:	dc08      	bgt.n	801015c <__sflush_r+0xfc>
 801014a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801014e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010152:	81a3      	strh	r3, [r4, #12]
 8010154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801015c:	4407      	add	r7, r0
 801015e:	eba8 0800 	sub.w	r8, r8, r0
 8010162:	e7e7      	b.n	8010134 <__sflush_r+0xd4>
 8010164:	dfbffffe 	.word	0xdfbffffe

08010168 <_fflush_r>:
 8010168:	b538      	push	{r3, r4, r5, lr}
 801016a:	690b      	ldr	r3, [r1, #16]
 801016c:	4605      	mov	r5, r0
 801016e:	460c      	mov	r4, r1
 8010170:	b913      	cbnz	r3, 8010178 <_fflush_r+0x10>
 8010172:	2500      	movs	r5, #0
 8010174:	4628      	mov	r0, r5
 8010176:	bd38      	pop	{r3, r4, r5, pc}
 8010178:	b118      	cbz	r0, 8010182 <_fflush_r+0x1a>
 801017a:	6a03      	ldr	r3, [r0, #32]
 801017c:	b90b      	cbnz	r3, 8010182 <_fflush_r+0x1a>
 801017e:	f7fe fdc9 	bl	800ed14 <__sinit>
 8010182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d0f3      	beq.n	8010172 <_fflush_r+0xa>
 801018a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801018c:	07d0      	lsls	r0, r2, #31
 801018e:	d404      	bmi.n	801019a <_fflush_r+0x32>
 8010190:	0599      	lsls	r1, r3, #22
 8010192:	d402      	bmi.n	801019a <_fflush_r+0x32>
 8010194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010196:	f7fe feba 	bl	800ef0e <__retarget_lock_acquire_recursive>
 801019a:	4628      	mov	r0, r5
 801019c:	4621      	mov	r1, r4
 801019e:	f7ff ff5f 	bl	8010060 <__sflush_r>
 80101a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80101a4:	07da      	lsls	r2, r3, #31
 80101a6:	4605      	mov	r5, r0
 80101a8:	d4e4      	bmi.n	8010174 <_fflush_r+0xc>
 80101aa:	89a3      	ldrh	r3, [r4, #12]
 80101ac:	059b      	lsls	r3, r3, #22
 80101ae:	d4e1      	bmi.n	8010174 <_fflush_r+0xc>
 80101b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101b2:	f7fe fead 	bl	800ef10 <__retarget_lock_release_recursive>
 80101b6:	e7dd      	b.n	8010174 <_fflush_r+0xc>

080101b8 <__malloc_lock>:
 80101b8:	4801      	ldr	r0, [pc, #4]	@ (80101c0 <__malloc_lock+0x8>)
 80101ba:	f7fe bea8 	b.w	800ef0e <__retarget_lock_acquire_recursive>
 80101be:	bf00      	nop
 80101c0:	200077dc 	.word	0x200077dc

080101c4 <__malloc_unlock>:
 80101c4:	4801      	ldr	r0, [pc, #4]	@ (80101cc <__malloc_unlock+0x8>)
 80101c6:	f7fe bea3 	b.w	800ef10 <__retarget_lock_release_recursive>
 80101ca:	bf00      	nop
 80101cc:	200077dc 	.word	0x200077dc

080101d0 <_Balloc>:
 80101d0:	b570      	push	{r4, r5, r6, lr}
 80101d2:	69c6      	ldr	r6, [r0, #28]
 80101d4:	4604      	mov	r4, r0
 80101d6:	460d      	mov	r5, r1
 80101d8:	b976      	cbnz	r6, 80101f8 <_Balloc+0x28>
 80101da:	2010      	movs	r0, #16
 80101dc:	f7ff fe96 	bl	800ff0c <malloc>
 80101e0:	4602      	mov	r2, r0
 80101e2:	61e0      	str	r0, [r4, #28]
 80101e4:	b920      	cbnz	r0, 80101f0 <_Balloc+0x20>
 80101e6:	4b18      	ldr	r3, [pc, #96]	@ (8010248 <_Balloc+0x78>)
 80101e8:	4818      	ldr	r0, [pc, #96]	@ (801024c <_Balloc+0x7c>)
 80101ea:	216b      	movs	r1, #107	@ 0x6b
 80101ec:	f000 fc54 	bl	8010a98 <__assert_func>
 80101f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101f4:	6006      	str	r6, [r0, #0]
 80101f6:	60c6      	str	r6, [r0, #12]
 80101f8:	69e6      	ldr	r6, [r4, #28]
 80101fa:	68f3      	ldr	r3, [r6, #12]
 80101fc:	b183      	cbz	r3, 8010220 <_Balloc+0x50>
 80101fe:	69e3      	ldr	r3, [r4, #28]
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010206:	b9b8      	cbnz	r0, 8010238 <_Balloc+0x68>
 8010208:	2101      	movs	r1, #1
 801020a:	fa01 f605 	lsl.w	r6, r1, r5
 801020e:	1d72      	adds	r2, r6, #5
 8010210:	0092      	lsls	r2, r2, #2
 8010212:	4620      	mov	r0, r4
 8010214:	f000 fc5e 	bl	8010ad4 <_calloc_r>
 8010218:	b160      	cbz	r0, 8010234 <_Balloc+0x64>
 801021a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801021e:	e00e      	b.n	801023e <_Balloc+0x6e>
 8010220:	2221      	movs	r2, #33	@ 0x21
 8010222:	2104      	movs	r1, #4
 8010224:	4620      	mov	r0, r4
 8010226:	f000 fc55 	bl	8010ad4 <_calloc_r>
 801022a:	69e3      	ldr	r3, [r4, #28]
 801022c:	60f0      	str	r0, [r6, #12]
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d1e4      	bne.n	80101fe <_Balloc+0x2e>
 8010234:	2000      	movs	r0, #0
 8010236:	bd70      	pop	{r4, r5, r6, pc}
 8010238:	6802      	ldr	r2, [r0, #0]
 801023a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801023e:	2300      	movs	r3, #0
 8010240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010244:	e7f7      	b.n	8010236 <_Balloc+0x66>
 8010246:	bf00      	nop
 8010248:	08011461 	.word	0x08011461
 801024c:	080114f2 	.word	0x080114f2

08010250 <_Bfree>:
 8010250:	b570      	push	{r4, r5, r6, lr}
 8010252:	69c6      	ldr	r6, [r0, #28]
 8010254:	4605      	mov	r5, r0
 8010256:	460c      	mov	r4, r1
 8010258:	b976      	cbnz	r6, 8010278 <_Bfree+0x28>
 801025a:	2010      	movs	r0, #16
 801025c:	f7ff fe56 	bl	800ff0c <malloc>
 8010260:	4602      	mov	r2, r0
 8010262:	61e8      	str	r0, [r5, #28]
 8010264:	b920      	cbnz	r0, 8010270 <_Bfree+0x20>
 8010266:	4b09      	ldr	r3, [pc, #36]	@ (801028c <_Bfree+0x3c>)
 8010268:	4809      	ldr	r0, [pc, #36]	@ (8010290 <_Bfree+0x40>)
 801026a:	218f      	movs	r1, #143	@ 0x8f
 801026c:	f000 fc14 	bl	8010a98 <__assert_func>
 8010270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010274:	6006      	str	r6, [r0, #0]
 8010276:	60c6      	str	r6, [r0, #12]
 8010278:	b13c      	cbz	r4, 801028a <_Bfree+0x3a>
 801027a:	69eb      	ldr	r3, [r5, #28]
 801027c:	6862      	ldr	r2, [r4, #4]
 801027e:	68db      	ldr	r3, [r3, #12]
 8010280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010284:	6021      	str	r1, [r4, #0]
 8010286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801028a:	bd70      	pop	{r4, r5, r6, pc}
 801028c:	08011461 	.word	0x08011461
 8010290:	080114f2 	.word	0x080114f2

08010294 <__multadd>:
 8010294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010298:	690d      	ldr	r5, [r1, #16]
 801029a:	4607      	mov	r7, r0
 801029c:	460c      	mov	r4, r1
 801029e:	461e      	mov	r6, r3
 80102a0:	f101 0c14 	add.w	ip, r1, #20
 80102a4:	2000      	movs	r0, #0
 80102a6:	f8dc 3000 	ldr.w	r3, [ip]
 80102aa:	b299      	uxth	r1, r3
 80102ac:	fb02 6101 	mla	r1, r2, r1, r6
 80102b0:	0c1e      	lsrs	r6, r3, #16
 80102b2:	0c0b      	lsrs	r3, r1, #16
 80102b4:	fb02 3306 	mla	r3, r2, r6, r3
 80102b8:	b289      	uxth	r1, r1
 80102ba:	3001      	adds	r0, #1
 80102bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80102c0:	4285      	cmp	r5, r0
 80102c2:	f84c 1b04 	str.w	r1, [ip], #4
 80102c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80102ca:	dcec      	bgt.n	80102a6 <__multadd+0x12>
 80102cc:	b30e      	cbz	r6, 8010312 <__multadd+0x7e>
 80102ce:	68a3      	ldr	r3, [r4, #8]
 80102d0:	42ab      	cmp	r3, r5
 80102d2:	dc19      	bgt.n	8010308 <__multadd+0x74>
 80102d4:	6861      	ldr	r1, [r4, #4]
 80102d6:	4638      	mov	r0, r7
 80102d8:	3101      	adds	r1, #1
 80102da:	f7ff ff79 	bl	80101d0 <_Balloc>
 80102de:	4680      	mov	r8, r0
 80102e0:	b928      	cbnz	r0, 80102ee <__multadd+0x5a>
 80102e2:	4602      	mov	r2, r0
 80102e4:	4b0c      	ldr	r3, [pc, #48]	@ (8010318 <__multadd+0x84>)
 80102e6:	480d      	ldr	r0, [pc, #52]	@ (801031c <__multadd+0x88>)
 80102e8:	21ba      	movs	r1, #186	@ 0xba
 80102ea:	f000 fbd5 	bl	8010a98 <__assert_func>
 80102ee:	6922      	ldr	r2, [r4, #16]
 80102f0:	3202      	adds	r2, #2
 80102f2:	f104 010c 	add.w	r1, r4, #12
 80102f6:	0092      	lsls	r2, r2, #2
 80102f8:	300c      	adds	r0, #12
 80102fa:	f7fe fe0a 	bl	800ef12 <memcpy>
 80102fe:	4621      	mov	r1, r4
 8010300:	4638      	mov	r0, r7
 8010302:	f7ff ffa5 	bl	8010250 <_Bfree>
 8010306:	4644      	mov	r4, r8
 8010308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801030c:	3501      	adds	r5, #1
 801030e:	615e      	str	r6, [r3, #20]
 8010310:	6125      	str	r5, [r4, #16]
 8010312:	4620      	mov	r0, r4
 8010314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010318:	080114d0 	.word	0x080114d0
 801031c:	080114f2 	.word	0x080114f2

08010320 <__hi0bits>:
 8010320:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010324:	4603      	mov	r3, r0
 8010326:	bf36      	itet	cc
 8010328:	0403      	lslcc	r3, r0, #16
 801032a:	2000      	movcs	r0, #0
 801032c:	2010      	movcc	r0, #16
 801032e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010332:	bf3c      	itt	cc
 8010334:	021b      	lslcc	r3, r3, #8
 8010336:	3008      	addcc	r0, #8
 8010338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801033c:	bf3c      	itt	cc
 801033e:	011b      	lslcc	r3, r3, #4
 8010340:	3004      	addcc	r0, #4
 8010342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010346:	bf3c      	itt	cc
 8010348:	009b      	lslcc	r3, r3, #2
 801034a:	3002      	addcc	r0, #2
 801034c:	2b00      	cmp	r3, #0
 801034e:	db05      	blt.n	801035c <__hi0bits+0x3c>
 8010350:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010354:	f100 0001 	add.w	r0, r0, #1
 8010358:	bf08      	it	eq
 801035a:	2020      	moveq	r0, #32
 801035c:	4770      	bx	lr

0801035e <__lo0bits>:
 801035e:	6803      	ldr	r3, [r0, #0]
 8010360:	4602      	mov	r2, r0
 8010362:	f013 0007 	ands.w	r0, r3, #7
 8010366:	d00b      	beq.n	8010380 <__lo0bits+0x22>
 8010368:	07d9      	lsls	r1, r3, #31
 801036a:	d421      	bmi.n	80103b0 <__lo0bits+0x52>
 801036c:	0798      	lsls	r0, r3, #30
 801036e:	bf49      	itett	mi
 8010370:	085b      	lsrmi	r3, r3, #1
 8010372:	089b      	lsrpl	r3, r3, #2
 8010374:	2001      	movmi	r0, #1
 8010376:	6013      	strmi	r3, [r2, #0]
 8010378:	bf5c      	itt	pl
 801037a:	6013      	strpl	r3, [r2, #0]
 801037c:	2002      	movpl	r0, #2
 801037e:	4770      	bx	lr
 8010380:	b299      	uxth	r1, r3
 8010382:	b909      	cbnz	r1, 8010388 <__lo0bits+0x2a>
 8010384:	0c1b      	lsrs	r3, r3, #16
 8010386:	2010      	movs	r0, #16
 8010388:	b2d9      	uxtb	r1, r3
 801038a:	b909      	cbnz	r1, 8010390 <__lo0bits+0x32>
 801038c:	3008      	adds	r0, #8
 801038e:	0a1b      	lsrs	r3, r3, #8
 8010390:	0719      	lsls	r1, r3, #28
 8010392:	bf04      	itt	eq
 8010394:	091b      	lsreq	r3, r3, #4
 8010396:	3004      	addeq	r0, #4
 8010398:	0799      	lsls	r1, r3, #30
 801039a:	bf04      	itt	eq
 801039c:	089b      	lsreq	r3, r3, #2
 801039e:	3002      	addeq	r0, #2
 80103a0:	07d9      	lsls	r1, r3, #31
 80103a2:	d403      	bmi.n	80103ac <__lo0bits+0x4e>
 80103a4:	085b      	lsrs	r3, r3, #1
 80103a6:	f100 0001 	add.w	r0, r0, #1
 80103aa:	d003      	beq.n	80103b4 <__lo0bits+0x56>
 80103ac:	6013      	str	r3, [r2, #0]
 80103ae:	4770      	bx	lr
 80103b0:	2000      	movs	r0, #0
 80103b2:	4770      	bx	lr
 80103b4:	2020      	movs	r0, #32
 80103b6:	4770      	bx	lr

080103b8 <__i2b>:
 80103b8:	b510      	push	{r4, lr}
 80103ba:	460c      	mov	r4, r1
 80103bc:	2101      	movs	r1, #1
 80103be:	f7ff ff07 	bl	80101d0 <_Balloc>
 80103c2:	4602      	mov	r2, r0
 80103c4:	b928      	cbnz	r0, 80103d2 <__i2b+0x1a>
 80103c6:	4b05      	ldr	r3, [pc, #20]	@ (80103dc <__i2b+0x24>)
 80103c8:	4805      	ldr	r0, [pc, #20]	@ (80103e0 <__i2b+0x28>)
 80103ca:	f240 1145 	movw	r1, #325	@ 0x145
 80103ce:	f000 fb63 	bl	8010a98 <__assert_func>
 80103d2:	2301      	movs	r3, #1
 80103d4:	6144      	str	r4, [r0, #20]
 80103d6:	6103      	str	r3, [r0, #16]
 80103d8:	bd10      	pop	{r4, pc}
 80103da:	bf00      	nop
 80103dc:	080114d0 	.word	0x080114d0
 80103e0:	080114f2 	.word	0x080114f2

080103e4 <__multiply>:
 80103e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e8:	4614      	mov	r4, r2
 80103ea:	690a      	ldr	r2, [r1, #16]
 80103ec:	6923      	ldr	r3, [r4, #16]
 80103ee:	429a      	cmp	r2, r3
 80103f0:	bfa8      	it	ge
 80103f2:	4623      	movge	r3, r4
 80103f4:	460f      	mov	r7, r1
 80103f6:	bfa4      	itt	ge
 80103f8:	460c      	movge	r4, r1
 80103fa:	461f      	movge	r7, r3
 80103fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010400:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010404:	68a3      	ldr	r3, [r4, #8]
 8010406:	6861      	ldr	r1, [r4, #4]
 8010408:	eb0a 0609 	add.w	r6, sl, r9
 801040c:	42b3      	cmp	r3, r6
 801040e:	b085      	sub	sp, #20
 8010410:	bfb8      	it	lt
 8010412:	3101      	addlt	r1, #1
 8010414:	f7ff fedc 	bl	80101d0 <_Balloc>
 8010418:	b930      	cbnz	r0, 8010428 <__multiply+0x44>
 801041a:	4602      	mov	r2, r0
 801041c:	4b44      	ldr	r3, [pc, #272]	@ (8010530 <__multiply+0x14c>)
 801041e:	4845      	ldr	r0, [pc, #276]	@ (8010534 <__multiply+0x150>)
 8010420:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010424:	f000 fb38 	bl	8010a98 <__assert_func>
 8010428:	f100 0514 	add.w	r5, r0, #20
 801042c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010430:	462b      	mov	r3, r5
 8010432:	2200      	movs	r2, #0
 8010434:	4543      	cmp	r3, r8
 8010436:	d321      	bcc.n	801047c <__multiply+0x98>
 8010438:	f107 0114 	add.w	r1, r7, #20
 801043c:	f104 0214 	add.w	r2, r4, #20
 8010440:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010444:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010448:	9302      	str	r3, [sp, #8]
 801044a:	1b13      	subs	r3, r2, r4
 801044c:	3b15      	subs	r3, #21
 801044e:	f023 0303 	bic.w	r3, r3, #3
 8010452:	3304      	adds	r3, #4
 8010454:	f104 0715 	add.w	r7, r4, #21
 8010458:	42ba      	cmp	r2, r7
 801045a:	bf38      	it	cc
 801045c:	2304      	movcc	r3, #4
 801045e:	9301      	str	r3, [sp, #4]
 8010460:	9b02      	ldr	r3, [sp, #8]
 8010462:	9103      	str	r1, [sp, #12]
 8010464:	428b      	cmp	r3, r1
 8010466:	d80c      	bhi.n	8010482 <__multiply+0x9e>
 8010468:	2e00      	cmp	r6, #0
 801046a:	dd03      	ble.n	8010474 <__multiply+0x90>
 801046c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010470:	2b00      	cmp	r3, #0
 8010472:	d05b      	beq.n	801052c <__multiply+0x148>
 8010474:	6106      	str	r6, [r0, #16]
 8010476:	b005      	add	sp, #20
 8010478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801047c:	f843 2b04 	str.w	r2, [r3], #4
 8010480:	e7d8      	b.n	8010434 <__multiply+0x50>
 8010482:	f8b1 a000 	ldrh.w	sl, [r1]
 8010486:	f1ba 0f00 	cmp.w	sl, #0
 801048a:	d024      	beq.n	80104d6 <__multiply+0xf2>
 801048c:	f104 0e14 	add.w	lr, r4, #20
 8010490:	46a9      	mov	r9, r5
 8010492:	f04f 0c00 	mov.w	ip, #0
 8010496:	f85e 7b04 	ldr.w	r7, [lr], #4
 801049a:	f8d9 3000 	ldr.w	r3, [r9]
 801049e:	fa1f fb87 	uxth.w	fp, r7
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80104a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80104ac:	f8d9 7000 	ldr.w	r7, [r9]
 80104b0:	4463      	add	r3, ip
 80104b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104b6:	fb0a c70b 	mla	r7, sl, fp, ip
 80104ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80104be:	b29b      	uxth	r3, r3
 80104c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80104c4:	4572      	cmp	r2, lr
 80104c6:	f849 3b04 	str.w	r3, [r9], #4
 80104ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104ce:	d8e2      	bhi.n	8010496 <__multiply+0xb2>
 80104d0:	9b01      	ldr	r3, [sp, #4]
 80104d2:	f845 c003 	str.w	ip, [r5, r3]
 80104d6:	9b03      	ldr	r3, [sp, #12]
 80104d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80104dc:	3104      	adds	r1, #4
 80104de:	f1b9 0f00 	cmp.w	r9, #0
 80104e2:	d021      	beq.n	8010528 <__multiply+0x144>
 80104e4:	682b      	ldr	r3, [r5, #0]
 80104e6:	f104 0c14 	add.w	ip, r4, #20
 80104ea:	46ae      	mov	lr, r5
 80104ec:	f04f 0a00 	mov.w	sl, #0
 80104f0:	f8bc b000 	ldrh.w	fp, [ip]
 80104f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80104f8:	fb09 770b 	mla	r7, r9, fp, r7
 80104fc:	4457      	add	r7, sl
 80104fe:	b29b      	uxth	r3, r3
 8010500:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010504:	f84e 3b04 	str.w	r3, [lr], #4
 8010508:	f85c 3b04 	ldr.w	r3, [ip], #4
 801050c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010510:	f8be 3000 	ldrh.w	r3, [lr]
 8010514:	fb09 330a 	mla	r3, r9, sl, r3
 8010518:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801051c:	4562      	cmp	r2, ip
 801051e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010522:	d8e5      	bhi.n	80104f0 <__multiply+0x10c>
 8010524:	9f01      	ldr	r7, [sp, #4]
 8010526:	51eb      	str	r3, [r5, r7]
 8010528:	3504      	adds	r5, #4
 801052a:	e799      	b.n	8010460 <__multiply+0x7c>
 801052c:	3e01      	subs	r6, #1
 801052e:	e79b      	b.n	8010468 <__multiply+0x84>
 8010530:	080114d0 	.word	0x080114d0
 8010534:	080114f2 	.word	0x080114f2

08010538 <__pow5mult>:
 8010538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801053c:	4615      	mov	r5, r2
 801053e:	f012 0203 	ands.w	r2, r2, #3
 8010542:	4607      	mov	r7, r0
 8010544:	460e      	mov	r6, r1
 8010546:	d007      	beq.n	8010558 <__pow5mult+0x20>
 8010548:	4c25      	ldr	r4, [pc, #148]	@ (80105e0 <__pow5mult+0xa8>)
 801054a:	3a01      	subs	r2, #1
 801054c:	2300      	movs	r3, #0
 801054e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010552:	f7ff fe9f 	bl	8010294 <__multadd>
 8010556:	4606      	mov	r6, r0
 8010558:	10ad      	asrs	r5, r5, #2
 801055a:	d03d      	beq.n	80105d8 <__pow5mult+0xa0>
 801055c:	69fc      	ldr	r4, [r7, #28]
 801055e:	b97c      	cbnz	r4, 8010580 <__pow5mult+0x48>
 8010560:	2010      	movs	r0, #16
 8010562:	f7ff fcd3 	bl	800ff0c <malloc>
 8010566:	4602      	mov	r2, r0
 8010568:	61f8      	str	r0, [r7, #28]
 801056a:	b928      	cbnz	r0, 8010578 <__pow5mult+0x40>
 801056c:	4b1d      	ldr	r3, [pc, #116]	@ (80105e4 <__pow5mult+0xac>)
 801056e:	481e      	ldr	r0, [pc, #120]	@ (80105e8 <__pow5mult+0xb0>)
 8010570:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010574:	f000 fa90 	bl	8010a98 <__assert_func>
 8010578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801057c:	6004      	str	r4, [r0, #0]
 801057e:	60c4      	str	r4, [r0, #12]
 8010580:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010588:	b94c      	cbnz	r4, 801059e <__pow5mult+0x66>
 801058a:	f240 2171 	movw	r1, #625	@ 0x271
 801058e:	4638      	mov	r0, r7
 8010590:	f7ff ff12 	bl	80103b8 <__i2b>
 8010594:	2300      	movs	r3, #0
 8010596:	f8c8 0008 	str.w	r0, [r8, #8]
 801059a:	4604      	mov	r4, r0
 801059c:	6003      	str	r3, [r0, #0]
 801059e:	f04f 0900 	mov.w	r9, #0
 80105a2:	07eb      	lsls	r3, r5, #31
 80105a4:	d50a      	bpl.n	80105bc <__pow5mult+0x84>
 80105a6:	4631      	mov	r1, r6
 80105a8:	4622      	mov	r2, r4
 80105aa:	4638      	mov	r0, r7
 80105ac:	f7ff ff1a 	bl	80103e4 <__multiply>
 80105b0:	4631      	mov	r1, r6
 80105b2:	4680      	mov	r8, r0
 80105b4:	4638      	mov	r0, r7
 80105b6:	f7ff fe4b 	bl	8010250 <_Bfree>
 80105ba:	4646      	mov	r6, r8
 80105bc:	106d      	asrs	r5, r5, #1
 80105be:	d00b      	beq.n	80105d8 <__pow5mult+0xa0>
 80105c0:	6820      	ldr	r0, [r4, #0]
 80105c2:	b938      	cbnz	r0, 80105d4 <__pow5mult+0x9c>
 80105c4:	4622      	mov	r2, r4
 80105c6:	4621      	mov	r1, r4
 80105c8:	4638      	mov	r0, r7
 80105ca:	f7ff ff0b 	bl	80103e4 <__multiply>
 80105ce:	6020      	str	r0, [r4, #0]
 80105d0:	f8c0 9000 	str.w	r9, [r0]
 80105d4:	4604      	mov	r4, r0
 80105d6:	e7e4      	b.n	80105a2 <__pow5mult+0x6a>
 80105d8:	4630      	mov	r0, r6
 80105da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105de:	bf00      	nop
 80105e0:	0801154c 	.word	0x0801154c
 80105e4:	08011461 	.word	0x08011461
 80105e8:	080114f2 	.word	0x080114f2

080105ec <__lshift>:
 80105ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105f0:	460c      	mov	r4, r1
 80105f2:	6849      	ldr	r1, [r1, #4]
 80105f4:	6923      	ldr	r3, [r4, #16]
 80105f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80105fa:	68a3      	ldr	r3, [r4, #8]
 80105fc:	4607      	mov	r7, r0
 80105fe:	4691      	mov	r9, r2
 8010600:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010604:	f108 0601 	add.w	r6, r8, #1
 8010608:	42b3      	cmp	r3, r6
 801060a:	db0b      	blt.n	8010624 <__lshift+0x38>
 801060c:	4638      	mov	r0, r7
 801060e:	f7ff fddf 	bl	80101d0 <_Balloc>
 8010612:	4605      	mov	r5, r0
 8010614:	b948      	cbnz	r0, 801062a <__lshift+0x3e>
 8010616:	4602      	mov	r2, r0
 8010618:	4b28      	ldr	r3, [pc, #160]	@ (80106bc <__lshift+0xd0>)
 801061a:	4829      	ldr	r0, [pc, #164]	@ (80106c0 <__lshift+0xd4>)
 801061c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010620:	f000 fa3a 	bl	8010a98 <__assert_func>
 8010624:	3101      	adds	r1, #1
 8010626:	005b      	lsls	r3, r3, #1
 8010628:	e7ee      	b.n	8010608 <__lshift+0x1c>
 801062a:	2300      	movs	r3, #0
 801062c:	f100 0114 	add.w	r1, r0, #20
 8010630:	f100 0210 	add.w	r2, r0, #16
 8010634:	4618      	mov	r0, r3
 8010636:	4553      	cmp	r3, sl
 8010638:	db33      	blt.n	80106a2 <__lshift+0xb6>
 801063a:	6920      	ldr	r0, [r4, #16]
 801063c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010640:	f104 0314 	add.w	r3, r4, #20
 8010644:	f019 091f 	ands.w	r9, r9, #31
 8010648:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801064c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010650:	d02b      	beq.n	80106aa <__lshift+0xbe>
 8010652:	f1c9 0e20 	rsb	lr, r9, #32
 8010656:	468a      	mov	sl, r1
 8010658:	2200      	movs	r2, #0
 801065a:	6818      	ldr	r0, [r3, #0]
 801065c:	fa00 f009 	lsl.w	r0, r0, r9
 8010660:	4310      	orrs	r0, r2
 8010662:	f84a 0b04 	str.w	r0, [sl], #4
 8010666:	f853 2b04 	ldr.w	r2, [r3], #4
 801066a:	459c      	cmp	ip, r3
 801066c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010670:	d8f3      	bhi.n	801065a <__lshift+0x6e>
 8010672:	ebac 0304 	sub.w	r3, ip, r4
 8010676:	3b15      	subs	r3, #21
 8010678:	f023 0303 	bic.w	r3, r3, #3
 801067c:	3304      	adds	r3, #4
 801067e:	f104 0015 	add.w	r0, r4, #21
 8010682:	4584      	cmp	ip, r0
 8010684:	bf38      	it	cc
 8010686:	2304      	movcc	r3, #4
 8010688:	50ca      	str	r2, [r1, r3]
 801068a:	b10a      	cbz	r2, 8010690 <__lshift+0xa4>
 801068c:	f108 0602 	add.w	r6, r8, #2
 8010690:	3e01      	subs	r6, #1
 8010692:	4638      	mov	r0, r7
 8010694:	612e      	str	r6, [r5, #16]
 8010696:	4621      	mov	r1, r4
 8010698:	f7ff fdda 	bl	8010250 <_Bfree>
 801069c:	4628      	mov	r0, r5
 801069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80106a6:	3301      	adds	r3, #1
 80106a8:	e7c5      	b.n	8010636 <__lshift+0x4a>
 80106aa:	3904      	subs	r1, #4
 80106ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80106b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80106b4:	459c      	cmp	ip, r3
 80106b6:	d8f9      	bhi.n	80106ac <__lshift+0xc0>
 80106b8:	e7ea      	b.n	8010690 <__lshift+0xa4>
 80106ba:	bf00      	nop
 80106bc:	080114d0 	.word	0x080114d0
 80106c0:	080114f2 	.word	0x080114f2

080106c4 <__mcmp>:
 80106c4:	690a      	ldr	r2, [r1, #16]
 80106c6:	4603      	mov	r3, r0
 80106c8:	6900      	ldr	r0, [r0, #16]
 80106ca:	1a80      	subs	r0, r0, r2
 80106cc:	b530      	push	{r4, r5, lr}
 80106ce:	d10e      	bne.n	80106ee <__mcmp+0x2a>
 80106d0:	3314      	adds	r3, #20
 80106d2:	3114      	adds	r1, #20
 80106d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80106d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80106dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80106e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80106e4:	4295      	cmp	r5, r2
 80106e6:	d003      	beq.n	80106f0 <__mcmp+0x2c>
 80106e8:	d205      	bcs.n	80106f6 <__mcmp+0x32>
 80106ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80106ee:	bd30      	pop	{r4, r5, pc}
 80106f0:	42a3      	cmp	r3, r4
 80106f2:	d3f3      	bcc.n	80106dc <__mcmp+0x18>
 80106f4:	e7fb      	b.n	80106ee <__mcmp+0x2a>
 80106f6:	2001      	movs	r0, #1
 80106f8:	e7f9      	b.n	80106ee <__mcmp+0x2a>
	...

080106fc <__mdiff>:
 80106fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010700:	4689      	mov	r9, r1
 8010702:	4606      	mov	r6, r0
 8010704:	4611      	mov	r1, r2
 8010706:	4648      	mov	r0, r9
 8010708:	4614      	mov	r4, r2
 801070a:	f7ff ffdb 	bl	80106c4 <__mcmp>
 801070e:	1e05      	subs	r5, r0, #0
 8010710:	d112      	bne.n	8010738 <__mdiff+0x3c>
 8010712:	4629      	mov	r1, r5
 8010714:	4630      	mov	r0, r6
 8010716:	f7ff fd5b 	bl	80101d0 <_Balloc>
 801071a:	4602      	mov	r2, r0
 801071c:	b928      	cbnz	r0, 801072a <__mdiff+0x2e>
 801071e:	4b3f      	ldr	r3, [pc, #252]	@ (801081c <__mdiff+0x120>)
 8010720:	f240 2137 	movw	r1, #567	@ 0x237
 8010724:	483e      	ldr	r0, [pc, #248]	@ (8010820 <__mdiff+0x124>)
 8010726:	f000 f9b7 	bl	8010a98 <__assert_func>
 801072a:	2301      	movs	r3, #1
 801072c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010730:	4610      	mov	r0, r2
 8010732:	b003      	add	sp, #12
 8010734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010738:	bfbc      	itt	lt
 801073a:	464b      	movlt	r3, r9
 801073c:	46a1      	movlt	r9, r4
 801073e:	4630      	mov	r0, r6
 8010740:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010744:	bfba      	itte	lt
 8010746:	461c      	movlt	r4, r3
 8010748:	2501      	movlt	r5, #1
 801074a:	2500      	movge	r5, #0
 801074c:	f7ff fd40 	bl	80101d0 <_Balloc>
 8010750:	4602      	mov	r2, r0
 8010752:	b918      	cbnz	r0, 801075c <__mdiff+0x60>
 8010754:	4b31      	ldr	r3, [pc, #196]	@ (801081c <__mdiff+0x120>)
 8010756:	f240 2145 	movw	r1, #581	@ 0x245
 801075a:	e7e3      	b.n	8010724 <__mdiff+0x28>
 801075c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010760:	6926      	ldr	r6, [r4, #16]
 8010762:	60c5      	str	r5, [r0, #12]
 8010764:	f109 0310 	add.w	r3, r9, #16
 8010768:	f109 0514 	add.w	r5, r9, #20
 801076c:	f104 0e14 	add.w	lr, r4, #20
 8010770:	f100 0b14 	add.w	fp, r0, #20
 8010774:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010778:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801077c:	9301      	str	r3, [sp, #4]
 801077e:	46d9      	mov	r9, fp
 8010780:	f04f 0c00 	mov.w	ip, #0
 8010784:	9b01      	ldr	r3, [sp, #4]
 8010786:	f85e 0b04 	ldr.w	r0, [lr], #4
 801078a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801078e:	9301      	str	r3, [sp, #4]
 8010790:	fa1f f38a 	uxth.w	r3, sl
 8010794:	4619      	mov	r1, r3
 8010796:	b283      	uxth	r3, r0
 8010798:	1acb      	subs	r3, r1, r3
 801079a:	0c00      	lsrs	r0, r0, #16
 801079c:	4463      	add	r3, ip
 801079e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80107a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80107ac:	4576      	cmp	r6, lr
 80107ae:	f849 3b04 	str.w	r3, [r9], #4
 80107b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80107b6:	d8e5      	bhi.n	8010784 <__mdiff+0x88>
 80107b8:	1b33      	subs	r3, r6, r4
 80107ba:	3b15      	subs	r3, #21
 80107bc:	f023 0303 	bic.w	r3, r3, #3
 80107c0:	3415      	adds	r4, #21
 80107c2:	3304      	adds	r3, #4
 80107c4:	42a6      	cmp	r6, r4
 80107c6:	bf38      	it	cc
 80107c8:	2304      	movcc	r3, #4
 80107ca:	441d      	add	r5, r3
 80107cc:	445b      	add	r3, fp
 80107ce:	461e      	mov	r6, r3
 80107d0:	462c      	mov	r4, r5
 80107d2:	4544      	cmp	r4, r8
 80107d4:	d30e      	bcc.n	80107f4 <__mdiff+0xf8>
 80107d6:	f108 0103 	add.w	r1, r8, #3
 80107da:	1b49      	subs	r1, r1, r5
 80107dc:	f021 0103 	bic.w	r1, r1, #3
 80107e0:	3d03      	subs	r5, #3
 80107e2:	45a8      	cmp	r8, r5
 80107e4:	bf38      	it	cc
 80107e6:	2100      	movcc	r1, #0
 80107e8:	440b      	add	r3, r1
 80107ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107ee:	b191      	cbz	r1, 8010816 <__mdiff+0x11a>
 80107f0:	6117      	str	r7, [r2, #16]
 80107f2:	e79d      	b.n	8010730 <__mdiff+0x34>
 80107f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80107f8:	46e6      	mov	lr, ip
 80107fa:	0c08      	lsrs	r0, r1, #16
 80107fc:	fa1c fc81 	uxtah	ip, ip, r1
 8010800:	4471      	add	r1, lr
 8010802:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010806:	b289      	uxth	r1, r1
 8010808:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801080c:	f846 1b04 	str.w	r1, [r6], #4
 8010810:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010814:	e7dd      	b.n	80107d2 <__mdiff+0xd6>
 8010816:	3f01      	subs	r7, #1
 8010818:	e7e7      	b.n	80107ea <__mdiff+0xee>
 801081a:	bf00      	nop
 801081c:	080114d0 	.word	0x080114d0
 8010820:	080114f2 	.word	0x080114f2

08010824 <__d2b>:
 8010824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010828:	460f      	mov	r7, r1
 801082a:	2101      	movs	r1, #1
 801082c:	ec59 8b10 	vmov	r8, r9, d0
 8010830:	4616      	mov	r6, r2
 8010832:	f7ff fccd 	bl	80101d0 <_Balloc>
 8010836:	4604      	mov	r4, r0
 8010838:	b930      	cbnz	r0, 8010848 <__d2b+0x24>
 801083a:	4602      	mov	r2, r0
 801083c:	4b23      	ldr	r3, [pc, #140]	@ (80108cc <__d2b+0xa8>)
 801083e:	4824      	ldr	r0, [pc, #144]	@ (80108d0 <__d2b+0xac>)
 8010840:	f240 310f 	movw	r1, #783	@ 0x30f
 8010844:	f000 f928 	bl	8010a98 <__assert_func>
 8010848:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801084c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010850:	b10d      	cbz	r5, 8010856 <__d2b+0x32>
 8010852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010856:	9301      	str	r3, [sp, #4]
 8010858:	f1b8 0300 	subs.w	r3, r8, #0
 801085c:	d023      	beq.n	80108a6 <__d2b+0x82>
 801085e:	4668      	mov	r0, sp
 8010860:	9300      	str	r3, [sp, #0]
 8010862:	f7ff fd7c 	bl	801035e <__lo0bits>
 8010866:	e9dd 1200 	ldrd	r1, r2, [sp]
 801086a:	b1d0      	cbz	r0, 80108a2 <__d2b+0x7e>
 801086c:	f1c0 0320 	rsb	r3, r0, #32
 8010870:	fa02 f303 	lsl.w	r3, r2, r3
 8010874:	430b      	orrs	r3, r1
 8010876:	40c2      	lsrs	r2, r0
 8010878:	6163      	str	r3, [r4, #20]
 801087a:	9201      	str	r2, [sp, #4]
 801087c:	9b01      	ldr	r3, [sp, #4]
 801087e:	61a3      	str	r3, [r4, #24]
 8010880:	2b00      	cmp	r3, #0
 8010882:	bf0c      	ite	eq
 8010884:	2201      	moveq	r2, #1
 8010886:	2202      	movne	r2, #2
 8010888:	6122      	str	r2, [r4, #16]
 801088a:	b1a5      	cbz	r5, 80108b6 <__d2b+0x92>
 801088c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010890:	4405      	add	r5, r0
 8010892:	603d      	str	r5, [r7, #0]
 8010894:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010898:	6030      	str	r0, [r6, #0]
 801089a:	4620      	mov	r0, r4
 801089c:	b003      	add	sp, #12
 801089e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108a2:	6161      	str	r1, [r4, #20]
 80108a4:	e7ea      	b.n	801087c <__d2b+0x58>
 80108a6:	a801      	add	r0, sp, #4
 80108a8:	f7ff fd59 	bl	801035e <__lo0bits>
 80108ac:	9b01      	ldr	r3, [sp, #4]
 80108ae:	6163      	str	r3, [r4, #20]
 80108b0:	3020      	adds	r0, #32
 80108b2:	2201      	movs	r2, #1
 80108b4:	e7e8      	b.n	8010888 <__d2b+0x64>
 80108b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80108ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80108be:	6038      	str	r0, [r7, #0]
 80108c0:	6918      	ldr	r0, [r3, #16]
 80108c2:	f7ff fd2d 	bl	8010320 <__hi0bits>
 80108c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80108ca:	e7e5      	b.n	8010898 <__d2b+0x74>
 80108cc:	080114d0 	.word	0x080114d0
 80108d0:	080114f2 	.word	0x080114f2

080108d4 <__sread>:
 80108d4:	b510      	push	{r4, lr}
 80108d6:	460c      	mov	r4, r1
 80108d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108dc:	f000 f8a8 	bl	8010a30 <_read_r>
 80108e0:	2800      	cmp	r0, #0
 80108e2:	bfab      	itete	ge
 80108e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80108e6:	89a3      	ldrhlt	r3, [r4, #12]
 80108e8:	181b      	addge	r3, r3, r0
 80108ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80108ee:	bfac      	ite	ge
 80108f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80108f2:	81a3      	strhlt	r3, [r4, #12]
 80108f4:	bd10      	pop	{r4, pc}

080108f6 <__swrite>:
 80108f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108fa:	461f      	mov	r7, r3
 80108fc:	898b      	ldrh	r3, [r1, #12]
 80108fe:	05db      	lsls	r3, r3, #23
 8010900:	4605      	mov	r5, r0
 8010902:	460c      	mov	r4, r1
 8010904:	4616      	mov	r6, r2
 8010906:	d505      	bpl.n	8010914 <__swrite+0x1e>
 8010908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801090c:	2302      	movs	r3, #2
 801090e:	2200      	movs	r2, #0
 8010910:	f000 f87c 	bl	8010a0c <_lseek_r>
 8010914:	89a3      	ldrh	r3, [r4, #12]
 8010916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801091a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801091e:	81a3      	strh	r3, [r4, #12]
 8010920:	4632      	mov	r2, r6
 8010922:	463b      	mov	r3, r7
 8010924:	4628      	mov	r0, r5
 8010926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801092a:	f000 b8a3 	b.w	8010a74 <_write_r>

0801092e <__sseek>:
 801092e:	b510      	push	{r4, lr}
 8010930:	460c      	mov	r4, r1
 8010932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010936:	f000 f869 	bl	8010a0c <_lseek_r>
 801093a:	1c43      	adds	r3, r0, #1
 801093c:	89a3      	ldrh	r3, [r4, #12]
 801093e:	bf15      	itete	ne
 8010940:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010942:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010946:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801094a:	81a3      	strheq	r3, [r4, #12]
 801094c:	bf18      	it	ne
 801094e:	81a3      	strhne	r3, [r4, #12]
 8010950:	bd10      	pop	{r4, pc}

08010952 <__sclose>:
 8010952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010956:	f000 b849 	b.w	80109ec <_close_r>

0801095a <_realloc_r>:
 801095a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801095e:	4680      	mov	r8, r0
 8010960:	4615      	mov	r5, r2
 8010962:	460c      	mov	r4, r1
 8010964:	b921      	cbnz	r1, 8010970 <_realloc_r+0x16>
 8010966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801096a:	4611      	mov	r1, r2
 801096c:	f7ff baf8 	b.w	800ff60 <_malloc_r>
 8010970:	b92a      	cbnz	r2, 801097e <_realloc_r+0x24>
 8010972:	f7ff f929 	bl	800fbc8 <_free_r>
 8010976:	2400      	movs	r4, #0
 8010978:	4620      	mov	r0, r4
 801097a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801097e:	f000 f8cf 	bl	8010b20 <_malloc_usable_size_r>
 8010982:	4285      	cmp	r5, r0
 8010984:	4606      	mov	r6, r0
 8010986:	d802      	bhi.n	801098e <_realloc_r+0x34>
 8010988:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801098c:	d8f4      	bhi.n	8010978 <_realloc_r+0x1e>
 801098e:	4629      	mov	r1, r5
 8010990:	4640      	mov	r0, r8
 8010992:	f7ff fae5 	bl	800ff60 <_malloc_r>
 8010996:	4607      	mov	r7, r0
 8010998:	2800      	cmp	r0, #0
 801099a:	d0ec      	beq.n	8010976 <_realloc_r+0x1c>
 801099c:	42b5      	cmp	r5, r6
 801099e:	462a      	mov	r2, r5
 80109a0:	4621      	mov	r1, r4
 80109a2:	bf28      	it	cs
 80109a4:	4632      	movcs	r2, r6
 80109a6:	f7fe fab4 	bl	800ef12 <memcpy>
 80109aa:	4621      	mov	r1, r4
 80109ac:	4640      	mov	r0, r8
 80109ae:	f7ff f90b 	bl	800fbc8 <_free_r>
 80109b2:	463c      	mov	r4, r7
 80109b4:	e7e0      	b.n	8010978 <_realloc_r+0x1e>

080109b6 <memmove>:
 80109b6:	4288      	cmp	r0, r1
 80109b8:	b510      	push	{r4, lr}
 80109ba:	eb01 0402 	add.w	r4, r1, r2
 80109be:	d902      	bls.n	80109c6 <memmove+0x10>
 80109c0:	4284      	cmp	r4, r0
 80109c2:	4623      	mov	r3, r4
 80109c4:	d807      	bhi.n	80109d6 <memmove+0x20>
 80109c6:	1e43      	subs	r3, r0, #1
 80109c8:	42a1      	cmp	r1, r4
 80109ca:	d008      	beq.n	80109de <memmove+0x28>
 80109cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109d4:	e7f8      	b.n	80109c8 <memmove+0x12>
 80109d6:	4402      	add	r2, r0
 80109d8:	4601      	mov	r1, r0
 80109da:	428a      	cmp	r2, r1
 80109dc:	d100      	bne.n	80109e0 <memmove+0x2a>
 80109de:	bd10      	pop	{r4, pc}
 80109e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109e8:	e7f7      	b.n	80109da <memmove+0x24>
	...

080109ec <_close_r>:
 80109ec:	b538      	push	{r3, r4, r5, lr}
 80109ee:	4d06      	ldr	r5, [pc, #24]	@ (8010a08 <_close_r+0x1c>)
 80109f0:	2300      	movs	r3, #0
 80109f2:	4604      	mov	r4, r0
 80109f4:	4608      	mov	r0, r1
 80109f6:	602b      	str	r3, [r5, #0]
 80109f8:	f7f1 f992 	bl	8001d20 <_close>
 80109fc:	1c43      	adds	r3, r0, #1
 80109fe:	d102      	bne.n	8010a06 <_close_r+0x1a>
 8010a00:	682b      	ldr	r3, [r5, #0]
 8010a02:	b103      	cbz	r3, 8010a06 <_close_r+0x1a>
 8010a04:	6023      	str	r3, [r4, #0]
 8010a06:	bd38      	pop	{r3, r4, r5, pc}
 8010a08:	200077d8 	.word	0x200077d8

08010a0c <_lseek_r>:
 8010a0c:	b538      	push	{r3, r4, r5, lr}
 8010a0e:	4d07      	ldr	r5, [pc, #28]	@ (8010a2c <_lseek_r+0x20>)
 8010a10:	4604      	mov	r4, r0
 8010a12:	4608      	mov	r0, r1
 8010a14:	4611      	mov	r1, r2
 8010a16:	2200      	movs	r2, #0
 8010a18:	602a      	str	r2, [r5, #0]
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	f7f1 f9a7 	bl	8001d6e <_lseek>
 8010a20:	1c43      	adds	r3, r0, #1
 8010a22:	d102      	bne.n	8010a2a <_lseek_r+0x1e>
 8010a24:	682b      	ldr	r3, [r5, #0]
 8010a26:	b103      	cbz	r3, 8010a2a <_lseek_r+0x1e>
 8010a28:	6023      	str	r3, [r4, #0]
 8010a2a:	bd38      	pop	{r3, r4, r5, pc}
 8010a2c:	200077d8 	.word	0x200077d8

08010a30 <_read_r>:
 8010a30:	b538      	push	{r3, r4, r5, lr}
 8010a32:	4d07      	ldr	r5, [pc, #28]	@ (8010a50 <_read_r+0x20>)
 8010a34:	4604      	mov	r4, r0
 8010a36:	4608      	mov	r0, r1
 8010a38:	4611      	mov	r1, r2
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	602a      	str	r2, [r5, #0]
 8010a3e:	461a      	mov	r2, r3
 8010a40:	f7f1 f935 	bl	8001cae <_read>
 8010a44:	1c43      	adds	r3, r0, #1
 8010a46:	d102      	bne.n	8010a4e <_read_r+0x1e>
 8010a48:	682b      	ldr	r3, [r5, #0]
 8010a4a:	b103      	cbz	r3, 8010a4e <_read_r+0x1e>
 8010a4c:	6023      	str	r3, [r4, #0]
 8010a4e:	bd38      	pop	{r3, r4, r5, pc}
 8010a50:	200077d8 	.word	0x200077d8

08010a54 <_sbrk_r>:
 8010a54:	b538      	push	{r3, r4, r5, lr}
 8010a56:	4d06      	ldr	r5, [pc, #24]	@ (8010a70 <_sbrk_r+0x1c>)
 8010a58:	2300      	movs	r3, #0
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	4608      	mov	r0, r1
 8010a5e:	602b      	str	r3, [r5, #0]
 8010a60:	f7f1 f992 	bl	8001d88 <_sbrk>
 8010a64:	1c43      	adds	r3, r0, #1
 8010a66:	d102      	bne.n	8010a6e <_sbrk_r+0x1a>
 8010a68:	682b      	ldr	r3, [r5, #0]
 8010a6a:	b103      	cbz	r3, 8010a6e <_sbrk_r+0x1a>
 8010a6c:	6023      	str	r3, [r4, #0]
 8010a6e:	bd38      	pop	{r3, r4, r5, pc}
 8010a70:	200077d8 	.word	0x200077d8

08010a74 <_write_r>:
 8010a74:	b538      	push	{r3, r4, r5, lr}
 8010a76:	4d07      	ldr	r5, [pc, #28]	@ (8010a94 <_write_r+0x20>)
 8010a78:	4604      	mov	r4, r0
 8010a7a:	4608      	mov	r0, r1
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	2200      	movs	r2, #0
 8010a80:	602a      	str	r2, [r5, #0]
 8010a82:	461a      	mov	r2, r3
 8010a84:	f7f1 f930 	bl	8001ce8 <_write>
 8010a88:	1c43      	adds	r3, r0, #1
 8010a8a:	d102      	bne.n	8010a92 <_write_r+0x1e>
 8010a8c:	682b      	ldr	r3, [r5, #0]
 8010a8e:	b103      	cbz	r3, 8010a92 <_write_r+0x1e>
 8010a90:	6023      	str	r3, [r4, #0]
 8010a92:	bd38      	pop	{r3, r4, r5, pc}
 8010a94:	200077d8 	.word	0x200077d8

08010a98 <__assert_func>:
 8010a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a9a:	4614      	mov	r4, r2
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	4b09      	ldr	r3, [pc, #36]	@ (8010ac4 <__assert_func+0x2c>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4605      	mov	r5, r0
 8010aa4:	68d8      	ldr	r0, [r3, #12]
 8010aa6:	b954      	cbnz	r4, 8010abe <__assert_func+0x26>
 8010aa8:	4b07      	ldr	r3, [pc, #28]	@ (8010ac8 <__assert_func+0x30>)
 8010aaa:	461c      	mov	r4, r3
 8010aac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ab0:	9100      	str	r1, [sp, #0]
 8010ab2:	462b      	mov	r3, r5
 8010ab4:	4905      	ldr	r1, [pc, #20]	@ (8010acc <__assert_func+0x34>)
 8010ab6:	f000 f83b 	bl	8010b30 <fiprintf>
 8010aba:	f000 f858 	bl	8010b6e <abort>
 8010abe:	4b04      	ldr	r3, [pc, #16]	@ (8010ad0 <__assert_func+0x38>)
 8010ac0:	e7f4      	b.n	8010aac <__assert_func+0x14>
 8010ac2:	bf00      	nop
 8010ac4:	20000194 	.word	0x20000194
 8010ac8:	0801178e 	.word	0x0801178e
 8010acc:	08011760 	.word	0x08011760
 8010ad0:	08011753 	.word	0x08011753

08010ad4 <_calloc_r>:
 8010ad4:	b570      	push	{r4, r5, r6, lr}
 8010ad6:	fba1 5402 	umull	r5, r4, r1, r2
 8010ada:	b93c      	cbnz	r4, 8010aec <_calloc_r+0x18>
 8010adc:	4629      	mov	r1, r5
 8010ade:	f7ff fa3f 	bl	800ff60 <_malloc_r>
 8010ae2:	4606      	mov	r6, r0
 8010ae4:	b928      	cbnz	r0, 8010af2 <_calloc_r+0x1e>
 8010ae6:	2600      	movs	r6, #0
 8010ae8:	4630      	mov	r0, r6
 8010aea:	bd70      	pop	{r4, r5, r6, pc}
 8010aec:	220c      	movs	r2, #12
 8010aee:	6002      	str	r2, [r0, #0]
 8010af0:	e7f9      	b.n	8010ae6 <_calloc_r+0x12>
 8010af2:	462a      	mov	r2, r5
 8010af4:	4621      	mov	r1, r4
 8010af6:	f7fe f97d 	bl	800edf4 <memset>
 8010afa:	e7f5      	b.n	8010ae8 <_calloc_r+0x14>

08010afc <__ascii_mbtowc>:
 8010afc:	b082      	sub	sp, #8
 8010afe:	b901      	cbnz	r1, 8010b02 <__ascii_mbtowc+0x6>
 8010b00:	a901      	add	r1, sp, #4
 8010b02:	b142      	cbz	r2, 8010b16 <__ascii_mbtowc+0x1a>
 8010b04:	b14b      	cbz	r3, 8010b1a <__ascii_mbtowc+0x1e>
 8010b06:	7813      	ldrb	r3, [r2, #0]
 8010b08:	600b      	str	r3, [r1, #0]
 8010b0a:	7812      	ldrb	r2, [r2, #0]
 8010b0c:	1e10      	subs	r0, r2, #0
 8010b0e:	bf18      	it	ne
 8010b10:	2001      	movne	r0, #1
 8010b12:	b002      	add	sp, #8
 8010b14:	4770      	bx	lr
 8010b16:	4610      	mov	r0, r2
 8010b18:	e7fb      	b.n	8010b12 <__ascii_mbtowc+0x16>
 8010b1a:	f06f 0001 	mvn.w	r0, #1
 8010b1e:	e7f8      	b.n	8010b12 <__ascii_mbtowc+0x16>

08010b20 <_malloc_usable_size_r>:
 8010b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b24:	1f18      	subs	r0, r3, #4
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	bfbc      	itt	lt
 8010b2a:	580b      	ldrlt	r3, [r1, r0]
 8010b2c:	18c0      	addlt	r0, r0, r3
 8010b2e:	4770      	bx	lr

08010b30 <fiprintf>:
 8010b30:	b40e      	push	{r1, r2, r3}
 8010b32:	b503      	push	{r0, r1, lr}
 8010b34:	4601      	mov	r1, r0
 8010b36:	ab03      	add	r3, sp, #12
 8010b38:	4805      	ldr	r0, [pc, #20]	@ (8010b50 <fiprintf+0x20>)
 8010b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b3e:	6800      	ldr	r0, [r0, #0]
 8010b40:	9301      	str	r3, [sp, #4]
 8010b42:	f000 f845 	bl	8010bd0 <_vfiprintf_r>
 8010b46:	b002      	add	sp, #8
 8010b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b4c:	b003      	add	sp, #12
 8010b4e:	4770      	bx	lr
 8010b50:	20000194 	.word	0x20000194

08010b54 <__ascii_wctomb>:
 8010b54:	4603      	mov	r3, r0
 8010b56:	4608      	mov	r0, r1
 8010b58:	b141      	cbz	r1, 8010b6c <__ascii_wctomb+0x18>
 8010b5a:	2aff      	cmp	r2, #255	@ 0xff
 8010b5c:	d904      	bls.n	8010b68 <__ascii_wctomb+0x14>
 8010b5e:	228a      	movs	r2, #138	@ 0x8a
 8010b60:	601a      	str	r2, [r3, #0]
 8010b62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b66:	4770      	bx	lr
 8010b68:	700a      	strb	r2, [r1, #0]
 8010b6a:	2001      	movs	r0, #1
 8010b6c:	4770      	bx	lr

08010b6e <abort>:
 8010b6e:	b508      	push	{r3, lr}
 8010b70:	2006      	movs	r0, #6
 8010b72:	f000 fa85 	bl	8011080 <raise>
 8010b76:	2001      	movs	r0, #1
 8010b78:	f7f1 f88e 	bl	8001c98 <_exit>

08010b7c <__sfputc_r>:
 8010b7c:	6893      	ldr	r3, [r2, #8]
 8010b7e:	3b01      	subs	r3, #1
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	b410      	push	{r4}
 8010b84:	6093      	str	r3, [r2, #8]
 8010b86:	da08      	bge.n	8010b9a <__sfputc_r+0x1e>
 8010b88:	6994      	ldr	r4, [r2, #24]
 8010b8a:	42a3      	cmp	r3, r4
 8010b8c:	db01      	blt.n	8010b92 <__sfputc_r+0x16>
 8010b8e:	290a      	cmp	r1, #10
 8010b90:	d103      	bne.n	8010b9a <__sfputc_r+0x1e>
 8010b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b96:	f000 b933 	b.w	8010e00 <__swbuf_r>
 8010b9a:	6813      	ldr	r3, [r2, #0]
 8010b9c:	1c58      	adds	r0, r3, #1
 8010b9e:	6010      	str	r0, [r2, #0]
 8010ba0:	7019      	strb	r1, [r3, #0]
 8010ba2:	4608      	mov	r0, r1
 8010ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ba8:	4770      	bx	lr

08010baa <__sfputs_r>:
 8010baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bac:	4606      	mov	r6, r0
 8010bae:	460f      	mov	r7, r1
 8010bb0:	4614      	mov	r4, r2
 8010bb2:	18d5      	adds	r5, r2, r3
 8010bb4:	42ac      	cmp	r4, r5
 8010bb6:	d101      	bne.n	8010bbc <__sfputs_r+0x12>
 8010bb8:	2000      	movs	r0, #0
 8010bba:	e007      	b.n	8010bcc <__sfputs_r+0x22>
 8010bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bc0:	463a      	mov	r2, r7
 8010bc2:	4630      	mov	r0, r6
 8010bc4:	f7ff ffda 	bl	8010b7c <__sfputc_r>
 8010bc8:	1c43      	adds	r3, r0, #1
 8010bca:	d1f3      	bne.n	8010bb4 <__sfputs_r+0xa>
 8010bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010bd0 <_vfiprintf_r>:
 8010bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd4:	460d      	mov	r5, r1
 8010bd6:	b09d      	sub	sp, #116	@ 0x74
 8010bd8:	4614      	mov	r4, r2
 8010bda:	4698      	mov	r8, r3
 8010bdc:	4606      	mov	r6, r0
 8010bde:	b118      	cbz	r0, 8010be8 <_vfiprintf_r+0x18>
 8010be0:	6a03      	ldr	r3, [r0, #32]
 8010be2:	b90b      	cbnz	r3, 8010be8 <_vfiprintf_r+0x18>
 8010be4:	f7fe f896 	bl	800ed14 <__sinit>
 8010be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010bea:	07d9      	lsls	r1, r3, #31
 8010bec:	d405      	bmi.n	8010bfa <_vfiprintf_r+0x2a>
 8010bee:	89ab      	ldrh	r3, [r5, #12]
 8010bf0:	059a      	lsls	r2, r3, #22
 8010bf2:	d402      	bmi.n	8010bfa <_vfiprintf_r+0x2a>
 8010bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010bf6:	f7fe f98a 	bl	800ef0e <__retarget_lock_acquire_recursive>
 8010bfa:	89ab      	ldrh	r3, [r5, #12]
 8010bfc:	071b      	lsls	r3, r3, #28
 8010bfe:	d501      	bpl.n	8010c04 <_vfiprintf_r+0x34>
 8010c00:	692b      	ldr	r3, [r5, #16]
 8010c02:	b99b      	cbnz	r3, 8010c2c <_vfiprintf_r+0x5c>
 8010c04:	4629      	mov	r1, r5
 8010c06:	4630      	mov	r0, r6
 8010c08:	f000 f938 	bl	8010e7c <__swsetup_r>
 8010c0c:	b170      	cbz	r0, 8010c2c <_vfiprintf_r+0x5c>
 8010c0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c10:	07dc      	lsls	r4, r3, #31
 8010c12:	d504      	bpl.n	8010c1e <_vfiprintf_r+0x4e>
 8010c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c18:	b01d      	add	sp, #116	@ 0x74
 8010c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c1e:	89ab      	ldrh	r3, [r5, #12]
 8010c20:	0598      	lsls	r0, r3, #22
 8010c22:	d4f7      	bmi.n	8010c14 <_vfiprintf_r+0x44>
 8010c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c26:	f7fe f973 	bl	800ef10 <__retarget_lock_release_recursive>
 8010c2a:	e7f3      	b.n	8010c14 <_vfiprintf_r+0x44>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c30:	2320      	movs	r3, #32
 8010c32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c3a:	2330      	movs	r3, #48	@ 0x30
 8010c3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010dec <_vfiprintf_r+0x21c>
 8010c40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010c44:	f04f 0901 	mov.w	r9, #1
 8010c48:	4623      	mov	r3, r4
 8010c4a:	469a      	mov	sl, r3
 8010c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c50:	b10a      	cbz	r2, 8010c56 <_vfiprintf_r+0x86>
 8010c52:	2a25      	cmp	r2, #37	@ 0x25
 8010c54:	d1f9      	bne.n	8010c4a <_vfiprintf_r+0x7a>
 8010c56:	ebba 0b04 	subs.w	fp, sl, r4
 8010c5a:	d00b      	beq.n	8010c74 <_vfiprintf_r+0xa4>
 8010c5c:	465b      	mov	r3, fp
 8010c5e:	4622      	mov	r2, r4
 8010c60:	4629      	mov	r1, r5
 8010c62:	4630      	mov	r0, r6
 8010c64:	f7ff ffa1 	bl	8010baa <__sfputs_r>
 8010c68:	3001      	adds	r0, #1
 8010c6a:	f000 80a7 	beq.w	8010dbc <_vfiprintf_r+0x1ec>
 8010c6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c70:	445a      	add	r2, fp
 8010c72:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c74:	f89a 3000 	ldrb.w	r3, [sl]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	f000 809f 	beq.w	8010dbc <_vfiprintf_r+0x1ec>
 8010c7e:	2300      	movs	r3, #0
 8010c80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c88:	f10a 0a01 	add.w	sl, sl, #1
 8010c8c:	9304      	str	r3, [sp, #16]
 8010c8e:	9307      	str	r3, [sp, #28]
 8010c90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010c94:	931a      	str	r3, [sp, #104]	@ 0x68
 8010c96:	4654      	mov	r4, sl
 8010c98:	2205      	movs	r2, #5
 8010c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c9e:	4853      	ldr	r0, [pc, #332]	@ (8010dec <_vfiprintf_r+0x21c>)
 8010ca0:	f7ef fabe 	bl	8000220 <memchr>
 8010ca4:	9a04      	ldr	r2, [sp, #16]
 8010ca6:	b9d8      	cbnz	r0, 8010ce0 <_vfiprintf_r+0x110>
 8010ca8:	06d1      	lsls	r1, r2, #27
 8010caa:	bf44      	itt	mi
 8010cac:	2320      	movmi	r3, #32
 8010cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010cb2:	0713      	lsls	r3, r2, #28
 8010cb4:	bf44      	itt	mi
 8010cb6:	232b      	movmi	r3, #43	@ 0x2b
 8010cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8010cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010cc2:	d015      	beq.n	8010cf0 <_vfiprintf_r+0x120>
 8010cc4:	9a07      	ldr	r2, [sp, #28]
 8010cc6:	4654      	mov	r4, sl
 8010cc8:	2000      	movs	r0, #0
 8010cca:	f04f 0c0a 	mov.w	ip, #10
 8010cce:	4621      	mov	r1, r4
 8010cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cd4:	3b30      	subs	r3, #48	@ 0x30
 8010cd6:	2b09      	cmp	r3, #9
 8010cd8:	d94b      	bls.n	8010d72 <_vfiprintf_r+0x1a2>
 8010cda:	b1b0      	cbz	r0, 8010d0a <_vfiprintf_r+0x13a>
 8010cdc:	9207      	str	r2, [sp, #28]
 8010cde:	e014      	b.n	8010d0a <_vfiprintf_r+0x13a>
 8010ce0:	eba0 0308 	sub.w	r3, r0, r8
 8010ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	9304      	str	r3, [sp, #16]
 8010cec:	46a2      	mov	sl, r4
 8010cee:	e7d2      	b.n	8010c96 <_vfiprintf_r+0xc6>
 8010cf0:	9b03      	ldr	r3, [sp, #12]
 8010cf2:	1d19      	adds	r1, r3, #4
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	9103      	str	r1, [sp, #12]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	bfbb      	ittet	lt
 8010cfc:	425b      	neglt	r3, r3
 8010cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8010d02:	9307      	strge	r3, [sp, #28]
 8010d04:	9307      	strlt	r3, [sp, #28]
 8010d06:	bfb8      	it	lt
 8010d08:	9204      	strlt	r2, [sp, #16]
 8010d0a:	7823      	ldrb	r3, [r4, #0]
 8010d0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d0e:	d10a      	bne.n	8010d26 <_vfiprintf_r+0x156>
 8010d10:	7863      	ldrb	r3, [r4, #1]
 8010d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d14:	d132      	bne.n	8010d7c <_vfiprintf_r+0x1ac>
 8010d16:	9b03      	ldr	r3, [sp, #12]
 8010d18:	1d1a      	adds	r2, r3, #4
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	9203      	str	r2, [sp, #12]
 8010d1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d22:	3402      	adds	r4, #2
 8010d24:	9305      	str	r3, [sp, #20]
 8010d26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010dfc <_vfiprintf_r+0x22c>
 8010d2a:	7821      	ldrb	r1, [r4, #0]
 8010d2c:	2203      	movs	r2, #3
 8010d2e:	4650      	mov	r0, sl
 8010d30:	f7ef fa76 	bl	8000220 <memchr>
 8010d34:	b138      	cbz	r0, 8010d46 <_vfiprintf_r+0x176>
 8010d36:	9b04      	ldr	r3, [sp, #16]
 8010d38:	eba0 000a 	sub.w	r0, r0, sl
 8010d3c:	2240      	movs	r2, #64	@ 0x40
 8010d3e:	4082      	lsls	r2, r0
 8010d40:	4313      	orrs	r3, r2
 8010d42:	3401      	adds	r4, #1
 8010d44:	9304      	str	r3, [sp, #16]
 8010d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d4a:	4829      	ldr	r0, [pc, #164]	@ (8010df0 <_vfiprintf_r+0x220>)
 8010d4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010d50:	2206      	movs	r2, #6
 8010d52:	f7ef fa65 	bl	8000220 <memchr>
 8010d56:	2800      	cmp	r0, #0
 8010d58:	d03f      	beq.n	8010dda <_vfiprintf_r+0x20a>
 8010d5a:	4b26      	ldr	r3, [pc, #152]	@ (8010df4 <_vfiprintf_r+0x224>)
 8010d5c:	bb1b      	cbnz	r3, 8010da6 <_vfiprintf_r+0x1d6>
 8010d5e:	9b03      	ldr	r3, [sp, #12]
 8010d60:	3307      	adds	r3, #7
 8010d62:	f023 0307 	bic.w	r3, r3, #7
 8010d66:	3308      	adds	r3, #8
 8010d68:	9303      	str	r3, [sp, #12]
 8010d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d6c:	443b      	add	r3, r7
 8010d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d70:	e76a      	b.n	8010c48 <_vfiprintf_r+0x78>
 8010d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d76:	460c      	mov	r4, r1
 8010d78:	2001      	movs	r0, #1
 8010d7a:	e7a8      	b.n	8010cce <_vfiprintf_r+0xfe>
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	3401      	adds	r4, #1
 8010d80:	9305      	str	r3, [sp, #20]
 8010d82:	4619      	mov	r1, r3
 8010d84:	f04f 0c0a 	mov.w	ip, #10
 8010d88:	4620      	mov	r0, r4
 8010d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d8e:	3a30      	subs	r2, #48	@ 0x30
 8010d90:	2a09      	cmp	r2, #9
 8010d92:	d903      	bls.n	8010d9c <_vfiprintf_r+0x1cc>
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d0c6      	beq.n	8010d26 <_vfiprintf_r+0x156>
 8010d98:	9105      	str	r1, [sp, #20]
 8010d9a:	e7c4      	b.n	8010d26 <_vfiprintf_r+0x156>
 8010d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010da0:	4604      	mov	r4, r0
 8010da2:	2301      	movs	r3, #1
 8010da4:	e7f0      	b.n	8010d88 <_vfiprintf_r+0x1b8>
 8010da6:	ab03      	add	r3, sp, #12
 8010da8:	9300      	str	r3, [sp, #0]
 8010daa:	462a      	mov	r2, r5
 8010dac:	4b12      	ldr	r3, [pc, #72]	@ (8010df8 <_vfiprintf_r+0x228>)
 8010dae:	a904      	add	r1, sp, #16
 8010db0:	4630      	mov	r0, r6
 8010db2:	f7fd fb6b 	bl	800e48c <_printf_float>
 8010db6:	4607      	mov	r7, r0
 8010db8:	1c78      	adds	r0, r7, #1
 8010dba:	d1d6      	bne.n	8010d6a <_vfiprintf_r+0x19a>
 8010dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dbe:	07d9      	lsls	r1, r3, #31
 8010dc0:	d405      	bmi.n	8010dce <_vfiprintf_r+0x1fe>
 8010dc2:	89ab      	ldrh	r3, [r5, #12]
 8010dc4:	059a      	lsls	r2, r3, #22
 8010dc6:	d402      	bmi.n	8010dce <_vfiprintf_r+0x1fe>
 8010dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010dca:	f7fe f8a1 	bl	800ef10 <__retarget_lock_release_recursive>
 8010dce:	89ab      	ldrh	r3, [r5, #12]
 8010dd0:	065b      	lsls	r3, r3, #25
 8010dd2:	f53f af1f 	bmi.w	8010c14 <_vfiprintf_r+0x44>
 8010dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010dd8:	e71e      	b.n	8010c18 <_vfiprintf_r+0x48>
 8010dda:	ab03      	add	r3, sp, #12
 8010ddc:	9300      	str	r3, [sp, #0]
 8010dde:	462a      	mov	r2, r5
 8010de0:	4b05      	ldr	r3, [pc, #20]	@ (8010df8 <_vfiprintf_r+0x228>)
 8010de2:	a904      	add	r1, sp, #16
 8010de4:	4630      	mov	r0, r6
 8010de6:	f7fd fde9 	bl	800e9bc <_printf_i>
 8010dea:	e7e4      	b.n	8010db6 <_vfiprintf_r+0x1e6>
 8010dec:	080114e1 	.word	0x080114e1
 8010df0:	080114eb 	.word	0x080114eb
 8010df4:	0800e48d 	.word	0x0800e48d
 8010df8:	08010bab 	.word	0x08010bab
 8010dfc:	080114e7 	.word	0x080114e7

08010e00 <__swbuf_r>:
 8010e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e02:	460e      	mov	r6, r1
 8010e04:	4614      	mov	r4, r2
 8010e06:	4605      	mov	r5, r0
 8010e08:	b118      	cbz	r0, 8010e12 <__swbuf_r+0x12>
 8010e0a:	6a03      	ldr	r3, [r0, #32]
 8010e0c:	b90b      	cbnz	r3, 8010e12 <__swbuf_r+0x12>
 8010e0e:	f7fd ff81 	bl	800ed14 <__sinit>
 8010e12:	69a3      	ldr	r3, [r4, #24]
 8010e14:	60a3      	str	r3, [r4, #8]
 8010e16:	89a3      	ldrh	r3, [r4, #12]
 8010e18:	071a      	lsls	r2, r3, #28
 8010e1a:	d501      	bpl.n	8010e20 <__swbuf_r+0x20>
 8010e1c:	6923      	ldr	r3, [r4, #16]
 8010e1e:	b943      	cbnz	r3, 8010e32 <__swbuf_r+0x32>
 8010e20:	4621      	mov	r1, r4
 8010e22:	4628      	mov	r0, r5
 8010e24:	f000 f82a 	bl	8010e7c <__swsetup_r>
 8010e28:	b118      	cbz	r0, 8010e32 <__swbuf_r+0x32>
 8010e2a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010e2e:	4638      	mov	r0, r7
 8010e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e32:	6823      	ldr	r3, [r4, #0]
 8010e34:	6922      	ldr	r2, [r4, #16]
 8010e36:	1a98      	subs	r0, r3, r2
 8010e38:	6963      	ldr	r3, [r4, #20]
 8010e3a:	b2f6      	uxtb	r6, r6
 8010e3c:	4283      	cmp	r3, r0
 8010e3e:	4637      	mov	r7, r6
 8010e40:	dc05      	bgt.n	8010e4e <__swbuf_r+0x4e>
 8010e42:	4621      	mov	r1, r4
 8010e44:	4628      	mov	r0, r5
 8010e46:	f7ff f98f 	bl	8010168 <_fflush_r>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	d1ed      	bne.n	8010e2a <__swbuf_r+0x2a>
 8010e4e:	68a3      	ldr	r3, [r4, #8]
 8010e50:	3b01      	subs	r3, #1
 8010e52:	60a3      	str	r3, [r4, #8]
 8010e54:	6823      	ldr	r3, [r4, #0]
 8010e56:	1c5a      	adds	r2, r3, #1
 8010e58:	6022      	str	r2, [r4, #0]
 8010e5a:	701e      	strb	r6, [r3, #0]
 8010e5c:	6962      	ldr	r2, [r4, #20]
 8010e5e:	1c43      	adds	r3, r0, #1
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d004      	beq.n	8010e6e <__swbuf_r+0x6e>
 8010e64:	89a3      	ldrh	r3, [r4, #12]
 8010e66:	07db      	lsls	r3, r3, #31
 8010e68:	d5e1      	bpl.n	8010e2e <__swbuf_r+0x2e>
 8010e6a:	2e0a      	cmp	r6, #10
 8010e6c:	d1df      	bne.n	8010e2e <__swbuf_r+0x2e>
 8010e6e:	4621      	mov	r1, r4
 8010e70:	4628      	mov	r0, r5
 8010e72:	f7ff f979 	bl	8010168 <_fflush_r>
 8010e76:	2800      	cmp	r0, #0
 8010e78:	d0d9      	beq.n	8010e2e <__swbuf_r+0x2e>
 8010e7a:	e7d6      	b.n	8010e2a <__swbuf_r+0x2a>

08010e7c <__swsetup_r>:
 8010e7c:	b538      	push	{r3, r4, r5, lr}
 8010e7e:	4b29      	ldr	r3, [pc, #164]	@ (8010f24 <__swsetup_r+0xa8>)
 8010e80:	4605      	mov	r5, r0
 8010e82:	6818      	ldr	r0, [r3, #0]
 8010e84:	460c      	mov	r4, r1
 8010e86:	b118      	cbz	r0, 8010e90 <__swsetup_r+0x14>
 8010e88:	6a03      	ldr	r3, [r0, #32]
 8010e8a:	b90b      	cbnz	r3, 8010e90 <__swsetup_r+0x14>
 8010e8c:	f7fd ff42 	bl	800ed14 <__sinit>
 8010e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e94:	0719      	lsls	r1, r3, #28
 8010e96:	d422      	bmi.n	8010ede <__swsetup_r+0x62>
 8010e98:	06da      	lsls	r2, r3, #27
 8010e9a:	d407      	bmi.n	8010eac <__swsetup_r+0x30>
 8010e9c:	2209      	movs	r2, #9
 8010e9e:	602a      	str	r2, [r5, #0]
 8010ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ea4:	81a3      	strh	r3, [r4, #12]
 8010ea6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010eaa:	e033      	b.n	8010f14 <__swsetup_r+0x98>
 8010eac:	0758      	lsls	r0, r3, #29
 8010eae:	d512      	bpl.n	8010ed6 <__swsetup_r+0x5a>
 8010eb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010eb2:	b141      	cbz	r1, 8010ec6 <__swsetup_r+0x4a>
 8010eb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010eb8:	4299      	cmp	r1, r3
 8010eba:	d002      	beq.n	8010ec2 <__swsetup_r+0x46>
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	f7fe fe83 	bl	800fbc8 <_free_r>
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ec6:	89a3      	ldrh	r3, [r4, #12]
 8010ec8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010ecc:	81a3      	strh	r3, [r4, #12]
 8010ece:	2300      	movs	r3, #0
 8010ed0:	6063      	str	r3, [r4, #4]
 8010ed2:	6923      	ldr	r3, [r4, #16]
 8010ed4:	6023      	str	r3, [r4, #0]
 8010ed6:	89a3      	ldrh	r3, [r4, #12]
 8010ed8:	f043 0308 	orr.w	r3, r3, #8
 8010edc:	81a3      	strh	r3, [r4, #12]
 8010ede:	6923      	ldr	r3, [r4, #16]
 8010ee0:	b94b      	cbnz	r3, 8010ef6 <__swsetup_r+0x7a>
 8010ee2:	89a3      	ldrh	r3, [r4, #12]
 8010ee4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010eec:	d003      	beq.n	8010ef6 <__swsetup_r+0x7a>
 8010eee:	4621      	mov	r1, r4
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	f000 f83f 	bl	8010f74 <__smakebuf_r>
 8010ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010efa:	f013 0201 	ands.w	r2, r3, #1
 8010efe:	d00a      	beq.n	8010f16 <__swsetup_r+0x9a>
 8010f00:	2200      	movs	r2, #0
 8010f02:	60a2      	str	r2, [r4, #8]
 8010f04:	6962      	ldr	r2, [r4, #20]
 8010f06:	4252      	negs	r2, r2
 8010f08:	61a2      	str	r2, [r4, #24]
 8010f0a:	6922      	ldr	r2, [r4, #16]
 8010f0c:	b942      	cbnz	r2, 8010f20 <__swsetup_r+0xa4>
 8010f0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010f12:	d1c5      	bne.n	8010ea0 <__swsetup_r+0x24>
 8010f14:	bd38      	pop	{r3, r4, r5, pc}
 8010f16:	0799      	lsls	r1, r3, #30
 8010f18:	bf58      	it	pl
 8010f1a:	6962      	ldrpl	r2, [r4, #20]
 8010f1c:	60a2      	str	r2, [r4, #8]
 8010f1e:	e7f4      	b.n	8010f0a <__swsetup_r+0x8e>
 8010f20:	2000      	movs	r0, #0
 8010f22:	e7f7      	b.n	8010f14 <__swsetup_r+0x98>
 8010f24:	20000194 	.word	0x20000194

08010f28 <__swhatbuf_r>:
 8010f28:	b570      	push	{r4, r5, r6, lr}
 8010f2a:	460c      	mov	r4, r1
 8010f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f30:	2900      	cmp	r1, #0
 8010f32:	b096      	sub	sp, #88	@ 0x58
 8010f34:	4615      	mov	r5, r2
 8010f36:	461e      	mov	r6, r3
 8010f38:	da0d      	bge.n	8010f56 <__swhatbuf_r+0x2e>
 8010f3a:	89a3      	ldrh	r3, [r4, #12]
 8010f3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010f40:	f04f 0100 	mov.w	r1, #0
 8010f44:	bf14      	ite	ne
 8010f46:	2340      	movne	r3, #64	@ 0x40
 8010f48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	6031      	str	r1, [r6, #0]
 8010f50:	602b      	str	r3, [r5, #0]
 8010f52:	b016      	add	sp, #88	@ 0x58
 8010f54:	bd70      	pop	{r4, r5, r6, pc}
 8010f56:	466a      	mov	r2, sp
 8010f58:	f000 f848 	bl	8010fec <_fstat_r>
 8010f5c:	2800      	cmp	r0, #0
 8010f5e:	dbec      	blt.n	8010f3a <__swhatbuf_r+0x12>
 8010f60:	9901      	ldr	r1, [sp, #4]
 8010f62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010f66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010f6a:	4259      	negs	r1, r3
 8010f6c:	4159      	adcs	r1, r3
 8010f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f72:	e7eb      	b.n	8010f4c <__swhatbuf_r+0x24>

08010f74 <__smakebuf_r>:
 8010f74:	898b      	ldrh	r3, [r1, #12]
 8010f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f78:	079d      	lsls	r5, r3, #30
 8010f7a:	4606      	mov	r6, r0
 8010f7c:	460c      	mov	r4, r1
 8010f7e:	d507      	bpl.n	8010f90 <__smakebuf_r+0x1c>
 8010f80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010f84:	6023      	str	r3, [r4, #0]
 8010f86:	6123      	str	r3, [r4, #16]
 8010f88:	2301      	movs	r3, #1
 8010f8a:	6163      	str	r3, [r4, #20]
 8010f8c:	b003      	add	sp, #12
 8010f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f90:	ab01      	add	r3, sp, #4
 8010f92:	466a      	mov	r2, sp
 8010f94:	f7ff ffc8 	bl	8010f28 <__swhatbuf_r>
 8010f98:	9f00      	ldr	r7, [sp, #0]
 8010f9a:	4605      	mov	r5, r0
 8010f9c:	4639      	mov	r1, r7
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	f7fe ffde 	bl	800ff60 <_malloc_r>
 8010fa4:	b948      	cbnz	r0, 8010fba <__smakebuf_r+0x46>
 8010fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010faa:	059a      	lsls	r2, r3, #22
 8010fac:	d4ee      	bmi.n	8010f8c <__smakebuf_r+0x18>
 8010fae:	f023 0303 	bic.w	r3, r3, #3
 8010fb2:	f043 0302 	orr.w	r3, r3, #2
 8010fb6:	81a3      	strh	r3, [r4, #12]
 8010fb8:	e7e2      	b.n	8010f80 <__smakebuf_r+0xc>
 8010fba:	89a3      	ldrh	r3, [r4, #12]
 8010fbc:	6020      	str	r0, [r4, #0]
 8010fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fc2:	81a3      	strh	r3, [r4, #12]
 8010fc4:	9b01      	ldr	r3, [sp, #4]
 8010fc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010fca:	b15b      	cbz	r3, 8010fe4 <__smakebuf_r+0x70>
 8010fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	f000 f81d 	bl	8011010 <_isatty_r>
 8010fd6:	b128      	cbz	r0, 8010fe4 <__smakebuf_r+0x70>
 8010fd8:	89a3      	ldrh	r3, [r4, #12]
 8010fda:	f023 0303 	bic.w	r3, r3, #3
 8010fde:	f043 0301 	orr.w	r3, r3, #1
 8010fe2:	81a3      	strh	r3, [r4, #12]
 8010fe4:	89a3      	ldrh	r3, [r4, #12]
 8010fe6:	431d      	orrs	r5, r3
 8010fe8:	81a5      	strh	r5, [r4, #12]
 8010fea:	e7cf      	b.n	8010f8c <__smakebuf_r+0x18>

08010fec <_fstat_r>:
 8010fec:	b538      	push	{r3, r4, r5, lr}
 8010fee:	4d07      	ldr	r5, [pc, #28]	@ (801100c <_fstat_r+0x20>)
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	4608      	mov	r0, r1
 8010ff6:	4611      	mov	r1, r2
 8010ff8:	602b      	str	r3, [r5, #0]
 8010ffa:	f7f0 fe9d 	bl	8001d38 <_fstat>
 8010ffe:	1c43      	adds	r3, r0, #1
 8011000:	d102      	bne.n	8011008 <_fstat_r+0x1c>
 8011002:	682b      	ldr	r3, [r5, #0]
 8011004:	b103      	cbz	r3, 8011008 <_fstat_r+0x1c>
 8011006:	6023      	str	r3, [r4, #0]
 8011008:	bd38      	pop	{r3, r4, r5, pc}
 801100a:	bf00      	nop
 801100c:	200077d8 	.word	0x200077d8

08011010 <_isatty_r>:
 8011010:	b538      	push	{r3, r4, r5, lr}
 8011012:	4d06      	ldr	r5, [pc, #24]	@ (801102c <_isatty_r+0x1c>)
 8011014:	2300      	movs	r3, #0
 8011016:	4604      	mov	r4, r0
 8011018:	4608      	mov	r0, r1
 801101a:	602b      	str	r3, [r5, #0]
 801101c:	f7f0 fe9c 	bl	8001d58 <_isatty>
 8011020:	1c43      	adds	r3, r0, #1
 8011022:	d102      	bne.n	801102a <_isatty_r+0x1a>
 8011024:	682b      	ldr	r3, [r5, #0]
 8011026:	b103      	cbz	r3, 801102a <_isatty_r+0x1a>
 8011028:	6023      	str	r3, [r4, #0]
 801102a:	bd38      	pop	{r3, r4, r5, pc}
 801102c:	200077d8 	.word	0x200077d8

08011030 <_raise_r>:
 8011030:	291f      	cmp	r1, #31
 8011032:	b538      	push	{r3, r4, r5, lr}
 8011034:	4605      	mov	r5, r0
 8011036:	460c      	mov	r4, r1
 8011038:	d904      	bls.n	8011044 <_raise_r+0x14>
 801103a:	2316      	movs	r3, #22
 801103c:	6003      	str	r3, [r0, #0]
 801103e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011042:	bd38      	pop	{r3, r4, r5, pc}
 8011044:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011046:	b112      	cbz	r2, 801104e <_raise_r+0x1e>
 8011048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801104c:	b94b      	cbnz	r3, 8011062 <_raise_r+0x32>
 801104e:	4628      	mov	r0, r5
 8011050:	f000 f830 	bl	80110b4 <_getpid_r>
 8011054:	4622      	mov	r2, r4
 8011056:	4601      	mov	r1, r0
 8011058:	4628      	mov	r0, r5
 801105a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801105e:	f000 b817 	b.w	8011090 <_kill_r>
 8011062:	2b01      	cmp	r3, #1
 8011064:	d00a      	beq.n	801107c <_raise_r+0x4c>
 8011066:	1c59      	adds	r1, r3, #1
 8011068:	d103      	bne.n	8011072 <_raise_r+0x42>
 801106a:	2316      	movs	r3, #22
 801106c:	6003      	str	r3, [r0, #0]
 801106e:	2001      	movs	r0, #1
 8011070:	e7e7      	b.n	8011042 <_raise_r+0x12>
 8011072:	2100      	movs	r1, #0
 8011074:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011078:	4620      	mov	r0, r4
 801107a:	4798      	blx	r3
 801107c:	2000      	movs	r0, #0
 801107e:	e7e0      	b.n	8011042 <_raise_r+0x12>

08011080 <raise>:
 8011080:	4b02      	ldr	r3, [pc, #8]	@ (801108c <raise+0xc>)
 8011082:	4601      	mov	r1, r0
 8011084:	6818      	ldr	r0, [r3, #0]
 8011086:	f7ff bfd3 	b.w	8011030 <_raise_r>
 801108a:	bf00      	nop
 801108c:	20000194 	.word	0x20000194

08011090 <_kill_r>:
 8011090:	b538      	push	{r3, r4, r5, lr}
 8011092:	4d07      	ldr	r5, [pc, #28]	@ (80110b0 <_kill_r+0x20>)
 8011094:	2300      	movs	r3, #0
 8011096:	4604      	mov	r4, r0
 8011098:	4608      	mov	r0, r1
 801109a:	4611      	mov	r1, r2
 801109c:	602b      	str	r3, [r5, #0]
 801109e:	f7f0 fdeb 	bl	8001c78 <_kill>
 80110a2:	1c43      	adds	r3, r0, #1
 80110a4:	d102      	bne.n	80110ac <_kill_r+0x1c>
 80110a6:	682b      	ldr	r3, [r5, #0]
 80110a8:	b103      	cbz	r3, 80110ac <_kill_r+0x1c>
 80110aa:	6023      	str	r3, [r4, #0]
 80110ac:	bd38      	pop	{r3, r4, r5, pc}
 80110ae:	bf00      	nop
 80110b0:	200077d8 	.word	0x200077d8

080110b4 <_getpid_r>:
 80110b4:	f7f0 bdd8 	b.w	8001c68 <_getpid>

080110b8 <_init>:
 80110b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ba:	bf00      	nop
 80110bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110be:	bc08      	pop	{r3}
 80110c0:	469e      	mov	lr, r3
 80110c2:	4770      	bx	lr

080110c4 <_fini>:
 80110c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110c6:	bf00      	nop
 80110c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ca:	bc08      	pop	{r3}
 80110cc:	469e      	mov	lr, r3
 80110ce:	4770      	bx	lr
