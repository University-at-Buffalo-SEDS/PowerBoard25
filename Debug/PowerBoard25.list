
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008838  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08008a18  08008a18  00009a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b30  08008b30  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b30  08008b30  00009b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b38  08008b38  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b38  08008b38  00009b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b3c  08008b3c  00009b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008b40  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c5c  200001d4  08008d14  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e30  08008d14  0000ae30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d22  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000370d  00000000  00000000  0001ef26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00022638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  00023848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c5e  00000000  00000000  000245da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e9f  00000000  00000000  00029238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c41ae  00000000  00000000  000400d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb8  00000000  00000000  001042c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00109180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008a00 	.word	0x08008a00

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08008a00 	.word	0x08008a00

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <CDC_Transmit_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CDC_Transmit_Print(const char * format, ...) {
 80002c0:	b40f      	push	{r0, r1, r2, r3}
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b09c      	sub	sp, #112	@ 0x70
 80002c6:	af00      	add	r7, sp, #0
	char buf[PRINT_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
 80002c8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80002cc:	607b      	str	r3, [r7, #4]
	int n = vsprintf(buf, format, args);
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80002d6:	4618      	mov	r0, r3
 80002d8:	f007 ff08 	bl	80080ec <vsiprintf>
 80002dc:	66f8      	str	r0, [r7, #108]	@ 0x6c
	va_end(args);
	CDC_Transmit_FS(buf, n);
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80002e4:	4618      	mov	r0, r3
 80002e6:	f007 fa9f 	bl	8007828 <CDC_Transmit_FS>
}
 80002ea:	bf00      	nop
 80002ec:	3770      	adds	r7, #112	@ 0x70
 80002ee:	46bd      	mov	sp, r7
 80002f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002f4:	b004      	add	sp, #16
 80002f6:	4770      	bx	lr

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fe:	f000 fae4 	bl	80008ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000302:	f000 f83b 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000306:	f000 f901 	bl	800050c <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800030a:	f000 f879 	bl	8000400 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 800030e:	f000 f8bd 	bl	800048c <MX_I2C2_Init>
  MX_USB_Device_Init();
 8000312:	f007 f9cb 	bl	80076ac <MX_USB_Device_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan2, FDCAN_RX_FIFO0) > 0) {
 8000316:	2140      	movs	r1, #64	@ 0x40
 8000318:	4811      	ldr	r0, [pc, #68]	@ (8000360 <main+0x68>)
 800031a:	f000 feb9 	bl	8001090 <HAL_FDCAN_GetRxFifoFillLevel>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d018      	beq.n	8000356 <main+0x5e>
	  		  CDC_Transmit_Print("There are some messages in the buffer!\n"); //Data to send
 8000324:	480f      	ldr	r0, [pc, #60]	@ (8000364 <main+0x6c>)
 8000326:	f7ff ffcb 	bl	80002c0 <CDC_Transmit_Print>
	  		  //Recieve data
	  		  HAL_StatusTypeDef err = HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader, RxData);
 800032a:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <main+0x70>)
 800032c:	4a0f      	ldr	r2, [pc, #60]	@ (800036c <main+0x74>)
 800032e:	2140      	movs	r1, #64	@ 0x40
 8000330:	480b      	ldr	r0, [pc, #44]	@ (8000360 <main+0x68>)
 8000332:	f000 fda5 	bl	8000e80 <HAL_FDCAN_GetRxMessage>
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	  		  if (err != HAL_OK)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d005      	beq.n	800034c <main+0x54>
	  		  {
	  			 // n = sprintf(printBuffer, );
	  			  CDC_Transmit_Print("Error recieving message: 0x%02x\n", err);
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4619      	mov	r1, r3
 8000344:	480a      	ldr	r0, [pc, #40]	@ (8000370 <main+0x78>)
 8000346:	f7ff ffbb 	bl	80002c0 <CDC_Transmit_Print>
 800034a:	e7e4      	b.n	8000316 <main+0x1e>
	  		  } else {
	  			  //n = sprintf(printBuffer, "Recieved message: %s", RxData);
	  			  //CDC_Transmit_FS(printBuffer, n);
	  			  CDC_Transmit_Print("Recieved message: %s\n", RxData);
 800034c:	4906      	ldr	r1, [pc, #24]	@ (8000368 <main+0x70>)
 800034e:	4809      	ldr	r0, [pc, #36]	@ (8000374 <main+0x7c>)
 8000350:	f7ff ffb6 	bl	80002c0 <CDC_Transmit_Print>
 8000354:	e7df      	b.n	8000316 <main+0x1e>
	  		  }
	  	  } else {
	  		  CDC_Transmit_Print("NO MESSAGES IN FIFO0\n"); //Data to send
 8000356:	4808      	ldr	r0, [pc, #32]	@ (8000378 <main+0x80>)
 8000358:	f7ff ffb2 	bl	80002c0 <CDC_Transmit_Print>
	  if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan2, FDCAN_RX_FIFO0) > 0) {
 800035c:	e7db      	b.n	8000316 <main+0x1e>
 800035e:	bf00      	nop
 8000360:	200001f0 	.word	0x200001f0
 8000364:	08008a18 	.word	0x08008a18
 8000368:	200002d0 	.word	0x200002d0
 800036c:	200002a8 	.word	0x200002a8
 8000370:	08008a40 	.word	0x08008a40
 8000374:	08008a64 	.word	0x08008a64
 8000378:	08008a7c 	.word	0x08008a7c

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b094      	sub	sp, #80	@ 0x50
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0318 	add.w	r3, r7, #24
 8000386:	2238      	movs	r2, #56	@ 0x38
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f007 feb8 	bl	8008100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800039e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003a2:	f002 fec3 	bl	800312c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80003a6:	2322      	movs	r3, #34	@ 0x22
 80003a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b0:	2340      	movs	r3, #64	@ 0x40
 80003b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003b4:	2301      	movs	r3, #1
 80003b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003bc:	f107 0318 	add.w	r3, r7, #24
 80003c0:	4618      	mov	r0, r3
 80003c2:	f002 ff67 	bl	8003294 <HAL_RCC_OscConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80003cc:	f000 f8f4 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	230f      	movs	r3, #15
 80003d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d4:	2301      	movs	r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f003 fa65 	bl	80038b8 <HAL_RCC_ClockConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80003f4:	f000 f8e0 	bl	80005b8 <Error_Handler>
  }
}
 80003f8:	bf00      	nop
 80003fa:	3750      	adds	r7, #80	@ 0x50
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000404:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000406:	4a20      	ldr	r2, [pc, #128]	@ (8000488 <MX_FDCAN2_Init+0x88>)
 8000408:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800040a:	4b1e      	ldr	r3, [pc, #120]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 800040c:	2200      	movs	r2, #0
 800040e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000410:	4b1c      	ldr	r3, [pc, #112]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000416:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800041c:	4b19      	ldr	r3, [pc, #100]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 800041e:	2200      	movs	r2, #0
 8000420:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000422:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000424:	2200      	movs	r2, #0
 8000426:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000428:	4b16      	ldr	r3, [pc, #88]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 800042a:	2200      	movs	r2, #0
 800042c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800042e:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000430:	2201      	movs	r2, #1
 8000432:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 8000434:	4b13      	ldr	r3, [pc, #76]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000436:	2210      	movs	r2, #16
 8000438:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 800043a:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 800043c:	223f      	movs	r2, #63	@ 0x3f
 800043e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 8000440:	4b10      	ldr	r3, [pc, #64]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000442:	2210      	movs	r2, #16
 8000444:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000446:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000448:	2201      	movs	r2, #1
 800044a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 800044c:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 800044e:	2204      	movs	r2, #4
 8000450:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 8000452:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000454:	220d      	movs	r2, #13
 8000456:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8000458:	4b0a      	ldr	r3, [pc, #40]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 800045a:	2202      	movs	r2, #2
 800045c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000460:	2201      	movs	r2, #1
 8000462:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000464:	4b07      	ldr	r3, [pc, #28]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000466:	2201      	movs	r2, #1
 8000468:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 800046c:	2200      	movs	r2, #0
 800046e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000470:	4804      	ldr	r0, [pc, #16]	@ (8000484 <MX_FDCAN2_Init+0x84>)
 8000472:	f000 fbab 	bl	8000bcc <HAL_FDCAN_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800047c:	f000 f89c 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200001f0 	.word	0x200001f0
 8000488:	40006800 	.word	0x40006800

0800048c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <MX_I2C2_Init+0x74>)
 8000492:	4a1c      	ldr	r2, [pc, #112]	@ (8000504 <MX_I2C2_Init+0x78>)
 8000494:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000496:	4b1a      	ldr	r3, [pc, #104]	@ (8000500 <MX_I2C2_Init+0x74>)
 8000498:	4a1b      	ldr	r2, [pc, #108]	@ (8000508 <MX_I2C2_Init+0x7c>)
 800049a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800049c:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <MX_I2C2_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a2:	4b17      	ldr	r3, [pc, #92]	@ (8000500 <MX_I2C2_Init+0x74>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a8:	4b15      	ldr	r3, [pc, #84]	@ (8000500 <MX_I2C2_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80004ae:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <MX_I2C2_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004b4:	4b12      	ldr	r3, [pc, #72]	@ (8000500 <MX_I2C2_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ba:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <MX_I2C2_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_I2C2_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004c6:	480e      	ldr	r0, [pc, #56]	@ (8000500 <MX_I2C2_Init+0x74>)
 80004c8:	f000 fffc 	bl	80014c4 <HAL_I2C_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80004d2:	f000 f871 	bl	80005b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004d6:	2100      	movs	r1, #0
 80004d8:	4809      	ldr	r0, [pc, #36]	@ (8000500 <MX_I2C2_Init+0x74>)
 80004da:	f001 f88e 	bl	80015fa <HAL_I2CEx_ConfigAnalogFilter>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004e4:	f000 f868 	bl	80005b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004e8:	2100      	movs	r1, #0
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_I2C2_Init+0x74>)
 80004ec:	f001 f8d0 	bl	8001690 <HAL_I2CEx_ConfigDigitalFilter>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004f6:	f000 f85f 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000254 	.word	0x20000254
 8000504:	40005800 	.word	0x40005800
 8000508:	00503d58 	.word	0x00503d58

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	@ 0x28
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b23      	ldr	r3, [pc, #140]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a22      	ldr	r2, [pc, #136]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b20      	ldr	r3, [pc, #128]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053a:	4b1d      	ldr	r3, [pc, #116]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a1c      	ldr	r2, [pc, #112]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000540:	f043 0320 	orr.w	r3, r3, #32
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b1a      	ldr	r3, [pc, #104]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0320 	and.w	r3, r3, #32
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b17      	ldr	r3, [pc, #92]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a16      	ldr	r2, [pc, #88]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b14      	ldr	r3, [pc, #80]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a10      	ldr	r2, [pc, #64]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <MX_GPIO_Init+0xa4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2120      	movs	r1, #32
 8000586:	480b      	ldr	r0, [pc, #44]	@ (80005b4 <MX_GPIO_Init+0xa8>)
 8000588:	f000 ff84 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800058c:	2320      	movs	r3, #32
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <MX_GPIO_Init+0xa8>)
 80005a4:	f000 fdf4 	bl	8001190 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005a8:	bf00      	nop
 80005aa:	3728      	adds	r7, #40	@ 0x28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000400 	.word	0x48000400

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <Error_Handler+0x8>

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <HAL_MspInit+0x44>)
 80005cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <HAL_MspInit+0x44>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <HAL_MspInit+0x44>)
 80005d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <HAL_MspInit+0x44>)
 80005e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005e6:	4a08      	ldr	r2, [pc, #32]	@ (8000608 <HAL_MspInit+0x44>)
 80005e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80005ee:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <HAL_MspInit+0x44>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005fa:	f002 fe3b 	bl	8003274 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000

0800060c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b09e      	sub	sp, #120	@ 0x78
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	2250      	movs	r2, #80	@ 0x50
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f007 fd67 	bl	8008100 <memset>
  if(hfdcan->Instance==FDCAN2)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <HAL_FDCAN_MspInit+0xac>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d138      	bne.n	80006ae <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800063c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000640:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000642:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fb17 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000658:	f7ff ffae 	bl	80005b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800065c:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <HAL_FDCAN_MspInit+0xb0>)
 800065e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000660:	4a16      	ldr	r2, [pc, #88]	@ (80006bc <HAL_FDCAN_MspInit+0xb0>)
 8000662:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000666:	6593      	str	r3, [r2, #88]	@ 0x58
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <HAL_FDCAN_MspInit+0xb0>)
 800066a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <HAL_FDCAN_MspInit+0xb0>)
 8000676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000678:	4a10      	ldr	r2, [pc, #64]	@ (80006bc <HAL_FDCAN_MspInit+0xb0>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000680:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <HAL_FDCAN_MspInit+0xb0>)
 8000682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800068c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000690:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800069e:	2309      	movs	r3, #9
 80006a0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <HAL_FDCAN_MspInit+0xb4>)
 80006aa:	f000 fd71 	bl	8001190 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 80006ae:	bf00      	nop
 80006b0:	3778      	adds	r7, #120	@ 0x78
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40006800 	.word	0x40006800
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48000400 	.word	0x48000400

080006c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09e      	sub	sp, #120	@ 0x78
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	2250      	movs	r2, #80	@ 0x50
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f007 fd0b 	bl	8008100 <memset>
  if(hi2c->Instance==I2C2)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a1f      	ldr	r2, [pc, #124]	@ (800076c <HAL_I2C_MspInit+0xa8>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d137      	bne.n	8000764 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006f4:	2380      	movs	r3, #128	@ 0x80
 80006f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4618      	mov	r0, r3
 8000702:	f003 fabd 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800070c:	f7ff ff54 	bl	80005b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <HAL_I2C_MspInit+0xac>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000714:	4a16      	ldr	r2, [pc, #88]	@ (8000770 <HAL_I2C_MspInit+0xac>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <HAL_I2C_MspInit+0xac>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000728:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800072c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072e:	2312      	movs	r3, #18
 8000730:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800073a:	2304      	movs	r3, #4
 800073c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000742:	4619      	mov	r1, r3
 8000744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000748:	f000 fd22 	bl	8001190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <HAL_I2C_MspInit+0xac>)
 800074e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000750:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <HAL_I2C_MspInit+0xac>)
 8000752:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000756:	6593      	str	r3, [r2, #88]	@ 0x58
 8000758:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <HAL_I2C_MspInit+0xac>)
 800075a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000764:	bf00      	nop
 8000766:	3778      	adds	r7, #120	@ 0x78
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40005800 	.word	0x40005800
 8000770:	40021000 	.word	0x40021000

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <NMI_Handler+0x4>

0800077c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <MemManage_Handler+0x4>

0800078c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <UsageFault_Handler+0x4>

0800079c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ca:	f000 f8d1 	bl	8000970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007d8:	4802      	ldr	r0, [pc, #8]	@ (80007e4 <USB_LP_IRQHandler+0x10>)
 80007da:	f001 f895 	bl	8001908 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200017ec 	.word	0x200017ec

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	@ (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	@ (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f007 fc7a 	bl	8008110 <__errno>
 800081c:	4603      	mov	r3, r0
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	@ (800084c <_sbrk+0x64>)
 8000838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2001c000 	.word	0x2001c000
 8000848:	00000400 	.word	0x00000400
 800084c:	20000310 	.word	0x20000310
 8000850:	20001e30 	.word	0x20001e30

08000854 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	@ (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000878:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800087c:	f7ff ffea 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	@ (80008b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	@ (80008b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <LoopForever+0xe>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	@ (80008c4 <LoopForever+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f007 fc39 	bl	800811c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008aa:	f7ff fd25 	bl	80002f8 <main>

080008ae <LoopForever>:

LoopForever:
    b LoopForever
 80008ae:	e7fe      	b.n	80008ae <LoopForever>
  ldr   r0, =_estack
 80008b0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80008bc:	08008b40 	.word	0x08008b40
  ldr r2, =_sbss
 80008c0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80008c4:	20001e30 	.word	0x20001e30

080008c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_2_IRQHandler>

080008ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 f939 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 f80e 	bl	80008fc <HAL_InitTick>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	e001      	b.n	80008f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ec:	f7ff fe6a 	bl	80005c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f0:	79fb      	ldrb	r3, [r7, #7]

}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <HAL_InitTick+0x68>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d022      	beq.n	8000956 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <HAL_InitTick+0x6c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <HAL_InitTick+0x68>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800091c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000920:	fbb2 f3f3 	udiv	r3, r2, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f944 	bl	8000bb2 <HAL_SYSTICK_Config>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10f      	bne.n	8000950 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b0f      	cmp	r3, #15
 8000934:	d809      	bhi.n	800094a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000936:	2200      	movs	r2, #0
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	f04f 30ff 	mov.w	r0, #4294967295
 800093e:	f000 f910 	bl	8000b62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <HAL_InitTick+0x70>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	e007      	b.n	800095a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	e004      	b.n	800095a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e001      	b.n	800095a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800095a:	7bfb      	ldrb	r3, [r7, #15]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000008 	.word	0x20000008
 8000968:	20000000 	.word	0x20000000
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <HAL_IncTick+0x1c>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <HAL_IncTick+0x20>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4413      	add	r3, r2
 800097e:	4a03      	ldr	r2, [pc, #12]	@ (800098c <HAL_IncTick+0x1c>)
 8000980:	6013      	str	r3, [r2, #0]
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	20000314 	.word	0x20000314
 8000990:	20000008 	.word	0x20000008

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000314 	.word	0x20000314

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4907      	ldr	r1, [pc, #28]	@ (8000a48 <__NVIC_EnableIRQ+0x38>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	@ (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	@ 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f7ff ff8e 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff29 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff40 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff90 	bl	8000aa0 <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5f 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff33 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffa4 	bl	8000b08 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e147      	b.n	8000e6e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d106      	bne.n	8000bf8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff fd0a 	bl	800060c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	699a      	ldr	r2, [r3, #24]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0210 	bic.w	r2, r2, #16
 8000c06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c08:	f7ff fec4 	bl	8000994 <HAL_GetTick>
 8000c0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c0e:	e012      	b.n	8000c36 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c10:	f7ff fec0 	bl	8000994 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b0a      	cmp	r3, #10
 8000c1c:	d90b      	bls.n	8000c36 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c22:	f043 0201 	orr.w	r2, r3, #1
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e11b      	b.n	8000e6e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	2b08      	cmp	r3, #8
 8000c42:	d0e5      	beq.n	8000c10 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	699a      	ldr	r2, [r3, #24]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f042 0201 	orr.w	r2, r2, #1
 8000c52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c54:	f7ff fe9e 	bl	8000994 <HAL_GetTick>
 8000c58:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c5a:	e012      	b.n	8000c82 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c5c:	f7ff fe9a 	bl	8000994 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b0a      	cmp	r3, #10
 8000c68:	d90b      	bls.n	8000c82 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c6e:	f043 0201 	orr.w	r2, r3, #1
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e0f5      	b.n	8000e6e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0e5      	beq.n	8000c5c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	699a      	ldr	r2, [r3, #24]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f042 0202 	orr.w	r2, r2, #2
 8000c9e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a74      	ldr	r2, [pc, #464]	@ (8000e78 <HAL_FDCAN_Init+0x2ac>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d103      	bne.n	8000cb2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000caa:	4a74      	ldr	r2, [pc, #464]	@ (8000e7c <HAL_FDCAN_Init+0x2b0>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7c1b      	ldrb	r3, [r3, #16]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d108      	bne.n	8000ccc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	699a      	ldr	r2, [r3, #24]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000cc8:	619a      	str	r2, [r3, #24]
 8000cca:	e007      	b.n	8000cdc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	699a      	ldr	r2, [r3, #24]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000cda:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7c5b      	ldrb	r3, [r3, #17]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d108      	bne.n	8000cf6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	699a      	ldr	r2, [r3, #24]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000cf2:	619a      	str	r2, [r3, #24]
 8000cf4:	e007      	b.n	8000d06 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	699a      	ldr	r2, [r3, #24]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000d04:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7c9b      	ldrb	r3, [r3, #18]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d108      	bne.n	8000d20 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	699a      	ldr	r2, [r3, #24]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000d1c:	619a      	str	r2, [r3, #24]
 8000d1e:	e007      	b.n	8000d30 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d2e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	699a      	ldr	r2, [r3, #24]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000d54:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0210 	bic.w	r2, r2, #16
 8000d64:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d108      	bne.n	8000d80 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	699a      	ldr	r2, [r3, #24]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f042 0204 	orr.w	r2, r2, #4
 8000d7c:	619a      	str	r2, [r3, #24]
 8000d7e:	e02c      	b.n	8000dda <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d028      	beq.n	8000dda <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d01c      	beq.n	8000dca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	699a      	ldr	r2, [r3, #24]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d9e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0210 	orr.w	r2, r2, #16
 8000dae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	d110      	bne.n	8000dda <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	699a      	ldr	r2, [r3, #24]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0220 	orr.w	r2, r2, #32
 8000dc6:	619a      	str	r2, [r3, #24]
 8000dc8:	e007      	b.n	8000dda <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	699a      	ldr	r2, [r3, #24]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f042 0220 	orr.w	r2, r2, #32
 8000dd8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000dea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000df2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e02:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e04:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000e0e:	d115      	bne.n	8000e3c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e14:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e1e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	3b01      	subs	r3, #1
 8000e26:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e28:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e30:	3b01      	subs	r3, #1
 8000e32:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000e38:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e3a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f93a 	bl	80010cc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40006400 	.word	0x40006400
 8000e7c:	40006500 	.word	0x40006500

08000e80 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b08b      	sub	sp, #44	@ 0x2c
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000e98:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000e9a:	7efb      	ldrb	r3, [r7, #27]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	f040 80e8 	bne.w	8001072 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	2b40      	cmp	r3, #64	@ 0x40
 8000ea6:	d137      	bne.n	8000f18 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000eb0:	f003 030f 	and.w	r3, r3, #15
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d107      	bne.n	8000ec8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ebc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e0db      	b.n	8001080 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ed0:	0e1b      	lsrs	r3, r3, #24
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d10a      	bne.n	8000ef0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee2:	0a5b      	lsrs	r3, r3, #9
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	4413      	add	r3, r2
 8000f02:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f16:	e036      	b.n	8000f86 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d107      	bne.n	8000f38 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0a3      	b.n	8001080 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f40:	0e1b      	lsrs	r3, r3, #24
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d10a      	bne.n	8000f60 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f52:	0a1b      	lsrs	r3, r3, #8
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	4413      	add	r3, r2
 8000f72:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	440b      	add	r3, r1
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d107      	bne.n	8000faa <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	0c9b      	lsrs	r3, r3, #18
 8000fa0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e005      	b.n	8000fb6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8000fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8000fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	0c1b      	lsrs	r3, r3, #16
 8000fe4:	f003 020f 	and.w	r2, r3, #15
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	0e1b      	lsrs	r3, r3, #24
 800100a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	0fda      	lsrs	r2, r3, #31
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101e:	3304      	adds	r3, #4
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
 800102a:	e00a      	b.n	8001042 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	441a      	add	r2, r3
 8001032:	6839      	ldr	r1, [r7, #0]
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	440b      	add	r3, r1
 8001038:	7812      	ldrb	r2, [r2, #0]
 800103a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	3301      	adds	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	4a11      	ldr	r2, [pc, #68]	@ (800108c <HAL_FDCAN_GetRxMessage+0x20c>)
 8001048:	5cd3      	ldrb	r3, [r2, r3]
 800104a:	461a      	mov	r2, r3
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	4293      	cmp	r3, r2
 8001050:	d3ec      	bcc.n	800102c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b40      	cmp	r3, #64	@ 0x40
 8001056:	d105      	bne.n	8001064 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001062:	e004      	b.n	800106e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e006      	b.n	8001080 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001076:	f043 0208 	orr.w	r2, r3, #8
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
  }
}
 8001080:	4618      	mov	r0, r3
 8001082:	372c      	adds	r7, #44	@ 0x2c
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	08008aec 	.word	0x08008aec

08001090 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	2b40      	cmp	r3, #64	@ 0x40
 800109e:	d107      	bne.n	80010b0 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010a8:	f003 030f 	and.w	r3, r3, #15
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	e006      	b.n	80010be <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80010d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80010d6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a2b      	ldr	r2, [pc, #172]	@ (800118c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d103      	bne.n	80010ea <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80010e8:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010f8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800111e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001126:	061a      	lsls	r2, r3, #24
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e005      	b.n	800116c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3304      	adds	r3, #4
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3f3      	bcc.n	8001160 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	4000a400 	.word	0x4000a400
 800118c:	40006800 	.word	0x40006800

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800119e:	e15a      	b.n	8001456 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 814c 	beq.w	8001450 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d005      	beq.n	80011d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d130      	bne.n	8001232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001206:	2201      	movs	r2, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f003 0201 	and.w	r2, r3, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b03      	cmp	r3, #3
 800123c:	d017      	beq.n	800126e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d123      	bne.n	80012c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	6939      	ldr	r1, [r7, #16]
 80012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0203 	and.w	r2, r3, #3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 80a6 	beq.w	8001450 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001304:	4b5b      	ldr	r3, [pc, #364]	@ (8001474 <HAL_GPIO_Init+0x2e4>)
 8001306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001308:	4a5a      	ldr	r2, [pc, #360]	@ (8001474 <HAL_GPIO_Init+0x2e4>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001310:	4b58      	ldr	r3, [pc, #352]	@ (8001474 <HAL_GPIO_Init+0x2e4>)
 8001312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131c:	4a56      	ldr	r2, [pc, #344]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	220f      	movs	r2, #15
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001346:	d01f      	beq.n	8001388 <HAL_GPIO_Init+0x1f8>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a4c      	ldr	r2, [pc, #304]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d019      	beq.n	8001384 <HAL_GPIO_Init+0x1f4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a4b      	ldr	r2, [pc, #300]	@ (8001480 <HAL_GPIO_Init+0x2f0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d013      	beq.n	8001380 <HAL_GPIO_Init+0x1f0>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a4a      	ldr	r2, [pc, #296]	@ (8001484 <HAL_GPIO_Init+0x2f4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d00d      	beq.n	800137c <HAL_GPIO_Init+0x1ec>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a49      	ldr	r2, [pc, #292]	@ (8001488 <HAL_GPIO_Init+0x2f8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d007      	beq.n	8001378 <HAL_GPIO_Init+0x1e8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a48      	ldr	r2, [pc, #288]	@ (800148c <HAL_GPIO_Init+0x2fc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_GPIO_Init+0x1e4>
 8001370:	2305      	movs	r3, #5
 8001372:	e00a      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 8001374:	2306      	movs	r3, #6
 8001376:	e008      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 8001378:	2304      	movs	r3, #4
 800137a:	e006      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 800137c:	2303      	movs	r3, #3
 800137e:	e004      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 8001380:	2302      	movs	r3, #2
 8001382:	e002      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_GPIO_Init+0x1fa>
 8001388:	2300      	movs	r3, #0
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	f002 0203 	and.w	r2, r2, #3
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	4093      	lsls	r3, r2
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139a:	4937      	ldr	r1, [pc, #220]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013a8:	4b39      	ldr	r3, [pc, #228]	@ (8001490 <HAL_GPIO_Init+0x300>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013cc:	4a30      	ldr	r2, [pc, #192]	@ (8001490 <HAL_GPIO_Init+0x300>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <HAL_GPIO_Init+0x300>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013f6:	4a26      	ldr	r2, [pc, #152]	@ (8001490 <HAL_GPIO_Init+0x300>)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013fc:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_GPIO_Init+0x300>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001420:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <HAL_GPIO_Init+0x300>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_GPIO_Init+0x300>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800144a:	4a11      	ldr	r2, [pc, #68]	@ (8001490 <HAL_GPIO_Init+0x300>)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3301      	adds	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	f47f ae9d 	bne.w	80011a0 <HAL_GPIO_Init+0x10>
  }
}
 8001466:	bf00      	nop
 8001468:	bf00      	nop
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	48000400 	.word	0x48000400
 8001480:	48000800 	.word	0x48000800
 8001484:	48000c00 	.word	0x48000c00
 8001488:	48001000 	.word	0x48001000
 800148c:	48001400 	.word	0x48001400
 8001490:	40010400 	.word	0x40010400

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e08d      	b.n	80015f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff f8ea 	bl	80006c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2224      	movs	r2, #36	@ 0x24
 80014f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001514:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001524:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d107      	bne.n	800153e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	e006      	b.n	800154c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800154a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d108      	bne.n	8001566 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	e007      	b.n	8001576 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001574:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001584:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001588:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691a      	ldr	r2, [r3, #16]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69d9      	ldr	r1, [r3, #28]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1a      	ldr	r2, [r3, #32]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2220      	movs	r2, #32
 80015de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b20      	cmp	r3, #32
 800160e:	d138      	bne.n	8001682 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800161a:	2302      	movs	r3, #2
 800161c:	e032      	b.n	8001684 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2224      	movs	r2, #36	@ 0x24
 800162a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800164c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2220      	movs	r2, #32
 8001672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001682:	2302      	movs	r3, #2
  }
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d139      	bne.n	800171a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e033      	b.n	800171c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2224      	movs	r2, #36	@ 0x24
 80016c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2220      	movs	r2, #32
 800170a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800171a:	2302      	movs	r3, #2
  }
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0c0      	b.n	80018bc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f006 f9b2 	bl	8007ab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2203      	movs	r2, #3
 8001758:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f002 fce0 	bl	8004126 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e03e      	b.n	80017ea <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	3311      	adds	r3, #17
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3310      	adds	r3, #16
 8001790:	7bfa      	ldrb	r2, [r7, #15]
 8001792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	3313      	adds	r3, #19
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	3320      	adds	r3, #32
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	3324      	adds	r3, #36	@ 0x24
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	3301      	adds	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	791b      	ldrb	r3, [r3, #4]
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d3bb      	bcc.n	800176c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e044      	b.n	8001884 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	3301      	adds	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	791b      	ldrb	r3, [r3, #4]
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	429a      	cmp	r2, r3
 800188c:	d3b5      	bcc.n	80017fa <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3304      	adds	r3, #4
 8001896:	e893 0006 	ldmia.w	r3, {r1, r2}
 800189a:	f002 fc5f 	bl	800415c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7a9b      	ldrb	r3, [r3, #10]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d102      	bne.n	80018ba <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f001 fc0e 	bl	80030d6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_PCD_Start+0x16>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e012      	b.n	8001900 <HAL_PCD_Start+0x3c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fc06 	bl	80040f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 f9e3 	bl	8005cbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f004 f9e8 	bl	8005cea <USB_ReadInterrupts>
 800191a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fb06 	bl	8001f38 <PCD_EP_ISR_Handler>

    return;
 800192c:	e110      	b.n	8001b50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001940:	b29a      	uxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800194a:	b292      	uxth	r2, r2
 800194c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f006 f942 	bl	8007bda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001956:	2100      	movs	r1, #0
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f8fc 	bl	8001b56 <HAL_PCD_SetAddress>

    return;
 800195e:	e0f7      	b.n	8001b50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00c      	beq.n	8001984 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001972:	b29a      	uxth	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800197c:	b292      	uxth	r2, r2
 800197e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001982:	e0e5      	b.n	8001b50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00c      	beq.n	80019a8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001996:	b29a      	uxth	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019a0:	b292      	uxth	r2, r2
 80019a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019a6:	e0d3      	b.n	8001b50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d034      	beq.n	8001a1c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0204 	bic.w	r2, r2, #4
 80019c4:	b292      	uxth	r2, r2
 80019c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0208 	bic.w	r2, r2, #8
 80019dc:	b292      	uxth	r2, r2
 80019de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019f4:	2100      	movs	r1, #0
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f006 fae2 	bl	8007fc0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f006 f925 	bl	8007c4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a14:	b292      	uxth	r2, r2
 8001a16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a1a:	e099      	b.n	8001b50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d027      	beq.n	8001a76 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0208 	orr.w	r2, r2, #8
 8001a38:	b292      	uxth	r2, r2
 8001a3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a50:	b292      	uxth	r2, r2
 8001a52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0204 	orr.w	r2, r2, #4
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f006 f8d2 	bl	8007c18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a74:	e06c      	b.n	8001b50 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d040      	beq.n	8001b02 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a92:	b292      	uxth	r2, r2
 8001a94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d12b      	bne.n	8001afa <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0204 	orr.w	r2, r2, #4
 8001ab4:	b292      	uxth	r2, r2
 8001ab6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0208 	orr.w	r2, r2, #8
 8001acc:	b292      	uxth	r2, r2
 8001ace:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001af0:	2101      	movs	r1, #1
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f006 fa64 	bl	8007fc0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001af8:	e02a      	b.n	8001b50 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f006 f88c 	bl	8007c18 <HAL_PCD_SuspendCallback>
    return;
 8001b00:	e026      	b.n	8001b50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00f      	beq.n	8001b2c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b1e:	b292      	uxth	r2, r2
 8001b20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f006 f84a 	bl	8007bbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b2a:	e011      	b.n	8001b50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00c      	beq.n	8001b50 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b48:	b292      	uxth	r2, r2
 8001b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b4e:	bf00      	nop
  }
}
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_PCD_SetAddress+0x1a>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e012      	b.n	8001b96 <HAL_PCD_SetAddress+0x40>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	78fa      	ldrb	r2, [r7, #3]
 8001b7c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	78fa      	ldrb	r2, [r7, #3]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 f884 	bl	8005c94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	4608      	mov	r0, r1
 8001ba8:	4611      	mov	r1, r2
 8001baa:	461a      	mov	r2, r3
 8001bac:	4603      	mov	r3, r0
 8001bae:	70fb      	strb	r3, [r7, #3]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	803b      	strh	r3, [r7, #0]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da0e      	bge.n	8001be2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 0207 	and.w	r2, r3, #7
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	3310      	adds	r3, #16
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	705a      	strb	r2, [r3, #1]
 8001be0:	e00e      	b.n	8001c00 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 0207 	and.w	r2, r3, #7
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c0c:	883b      	ldrh	r3, [r7, #0]
 8001c0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	78ba      	ldrb	r2, [r7, #2]
 8001c1a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c1c:	78bb      	ldrb	r3, [r7, #2]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d102      	bne.n	8001c28 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_PCD_EP_Open+0x98>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e00e      	b.n	8001c54 <HAL_PCD_EP_Open+0xb6>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 faa7 	bl	8004198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001c52:	7afb      	ldrb	r3, [r7, #11]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da0e      	bge.n	8001c8e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	f003 0207 	and.w	r2, r3, #7
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	3310      	adds	r3, #16
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	705a      	strb	r2, [r3, #1]
 8001c8c:	e00e      	b.n	8001cac <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	f003 0207 	and.w	r2, r3, #7
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_PCD_EP_Close+0x6a>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e00e      	b.n	8001ce4 <HAL_PCD_EP_Close+0x88>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68f9      	ldr	r1, [r7, #12]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 ff47 	bl	8004b68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfc:	7afb      	ldrb	r3, [r7, #11]
 8001cfe:	f003 0207 	and.w	r2, r3, #7
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4413      	add	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6979      	ldr	r1, [r7, #20]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 f8ff 	bl	8004f42 <USB_EPStartXfer>

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 0207 	and.w	r2, r3, #7
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001d70:	681b      	ldr	r3, [r3, #0]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8e:	7afb      	ldrb	r3, [r7, #11]
 8001d90:	f003 0207 	and.w	r2, r3, #7
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	3310      	adds	r3, #16
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6979      	ldr	r1, [r7, #20]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 f8b0 	bl	8004f42 <USB_EPStartXfer>

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	7912      	ldrb	r2, [r2, #4]
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e03e      	b.n	8001e88 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	da0e      	bge.n	8001e30 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 0207 	and.w	r2, r3, #7
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	3310      	adds	r3, #16
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	705a      	strb	r2, [r3, #1]
 8001e2e:	e00c      	b.n	8001e4a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_PCD_EP_SetStall+0x7e>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e00e      	b.n	8001e88 <HAL_PCD_EP_SetStall+0x9c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68f9      	ldr	r1, [r7, #12]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fe11 	bl	8005aa0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	7912      	ldrb	r2, [r2, #4]
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e040      	b.n	8001f30 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	da0e      	bge.n	8001ed4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	f003 0207 	and.w	r2, r3, #7
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	3310      	adds	r3, #16
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	705a      	strb	r2, [r3, #1]
 8001ed2:	e00e      	b.n	8001ef2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	f003 0207 	and.w	r2, r3, #7
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_EP_ClrStall+0x82>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e00e      	b.n	8001f30 <HAL_PCD_EP_ClrStall+0xa0>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68f9      	ldr	r1, [r7, #12]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 fe0e 	bl	8005b42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b092      	sub	sp, #72	@ 0x48
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f40:	e333      	b.n	80025aa <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f4a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001f58:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 8108 	bne.w	8002172 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d14c      	bne.n	8002006 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f7c:	813b      	strh	r3, [r7, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	893b      	ldrh	r3, [r7, #8]
 8001f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3310      	adds	r3, #16
 8001f94:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	441a      	add	r2, r3
 8001fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001fcc:	2100      	movs	r1, #0
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f005 fddb 	bl	8007b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7b1b      	ldrb	r3, [r3, #12]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 82e5 	beq.w	80025aa <PCD_EP_ISR_Handler+0x672>
 8001fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 82e0 	bne.w	80025aa <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7b1b      	ldrb	r3, [r3, #12]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	731a      	strb	r2, [r3, #12]
 8002004:	e2d1      	b.n	80025aa <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800200c:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002016:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800201c:	2b00      	cmp	r3, #0
 800201e:	d032      	beq.n	8002086 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	4413      	add	r3, r2
 800203a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002046:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002054:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002058:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800205a:	b29b      	uxth	r3, r3
 800205c:	f003 fe97 	bl	8005d8e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29a      	uxth	r2, r3
 8002068:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800206c:	4013      	ands	r3, r2
 800206e:	817b      	strh	r3, [r7, #10]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	897a      	ldrh	r2, [r7, #10]
 8002076:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800207a:	b292      	uxth	r2, r2
 800207c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f005 fd56 	bl	8007b30 <HAL_PCD_SetupStageCallback>
 8002084:	e291      	b.n	80025aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002086:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800208a:	2b00      	cmp	r3, #0
 800208c:	f280 828d 	bge.w	80025aa <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	b29a      	uxth	r2, r3
 8002098:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800209c:	4013      	ands	r3, r2
 800209e:	81fb      	strh	r3, [r7, #14]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	89fa      	ldrh	r2, [r7, #14]
 80020a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020aa:	b292      	uxth	r2, r2
 80020ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d019      	beq.n	8002112 <PCD_EP_ISR_Handler+0x1da>
 80020de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d015      	beq.n	8002112 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ec:	6959      	ldr	r1, [r3, #20]
 80020ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f003 fe49 	bl	8005d8e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	441a      	add	r2, r3
 8002106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002108:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800210a:	2100      	movs	r1, #0
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f005 fd21 	bl	8007b54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800211a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800211c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002120:	2b00      	cmp	r3, #0
 8002122:	f040 8242 	bne.w	80025aa <PCD_EP_ISR_Handler+0x672>
 8002126:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002128:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800212c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002130:	f000 823b 	beq.w	80025aa <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002144:	81bb      	strh	r3, [r7, #12]
 8002146:	89bb      	ldrh	r3, [r7, #12]
 8002148:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800214c:	81bb      	strh	r3, [r7, #12]
 800214e:	89bb      	ldrh	r3, [r7, #12]
 8002150:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002154:	81bb      	strh	r3, [r7, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	89bb      	ldrh	r3, [r7, #12]
 800215c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800216c:	b29b      	uxth	r3, r3
 800216e:	8013      	strh	r3, [r2, #0]
 8002170:	e21b      	b.n	80025aa <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002184:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002188:	2b00      	cmp	r3, #0
 800218a:	f280 80f1 	bge.w	8002370 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80021a4:	4013      	ands	r3, r2
 80021a6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80021b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021bc:	b292      	uxth	r2, r2
 80021be:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021c0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d8:	7b1b      	ldrb	r3, [r3, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d123      	bne.n	8002226 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002202:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8002206:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 808b 	beq.w	8002326 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002216:	6959      	ldr	r1, [r3, #20]
 8002218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800221a:	88da      	ldrh	r2, [r3, #6]
 800221c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002220:	f003 fdb5 	bl	8005d8e <USB_ReadPMA>
 8002224:	e07f      	b.n	8002326 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002228:	78db      	ldrb	r3, [r3, #3]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d109      	bne.n	8002242 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800222e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002230:	461a      	mov	r2, r3
 8002232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f9c6 	bl	80025c6 <HAL_PCD_EP_DB_Receive>
 800223a:	4603      	mov	r3, r0
 800223c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002240:	e071      	b.n	8002326 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800225c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	441a      	add	r2, r3
 800226c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800226e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002272:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800227a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800227e:	b29b      	uxth	r3, r3
 8002280:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d022      	beq.n	80022e2 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	4413      	add	r3, r2
 80022b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80022c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d02c      	beq.n	8002326 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d2:	6959      	ldr	r1, [r3, #20]
 80022d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d6:	891a      	ldrh	r2, [r3, #8]
 80022d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80022dc:	f003 fd57 	bl	8005d8e <USB_ReadPMA>
 80022e0:	e021      	b.n	8002326 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002306:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800230a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002318:	6959      	ldr	r1, [r3, #20]
 800231a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800231c:	895a      	ldrh	r2, [r3, #10]
 800231e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002322:	f003 fd34 	bl	8005d8e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800232e:	441a      	add	r2, r3
 8002330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002332:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800233c:	441a      	add	r2, r3
 800233e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002340:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <PCD_EP_ISR_Handler+0x41e>
 800234a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800234e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	429a      	cmp	r2, r3
 8002354:	d206      	bcs.n	8002364 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f005 fbf9 	bl	8007b54 <HAL_PCD_DataOutStageCallback>
 8002362:	e005      	b.n	8002370 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800236a:	4618      	mov	r0, r3
 800236c:	f002 fde9 	bl	8004f42 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002370:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8117 	beq.w	80025aa <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800237c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	3310      	adds	r3, #16
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80023a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	441a      	add	r2, r3
 80023ba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80023bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80023c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ca:	78db      	ldrb	r3, [r3, #3]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 80a1 	bne.w	8002514 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80023d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023da:	7b1b      	ldrb	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8092 	beq.w	8002506 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80023e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d046      	beq.n	800247a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d126      	bne.n	8002442 <PCD_EP_ISR_Handler+0x50a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002402:	b29b      	uxth	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	4413      	add	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	00da      	lsls	r2, r3, #3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4413      	add	r3, r2
 8002416:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002426:	b29a      	uxth	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	801a      	strh	r2, [r3, #0]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800243a:	b29a      	uxth	r2, r3
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	801a      	strh	r2, [r3, #0]
 8002440:	e061      	b.n	8002506 <PCD_EP_ISR_Handler+0x5ce>
 8002442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d15d      	bne.n	8002506 <PCD_EP_ISR_Handler+0x5ce>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4413      	add	r3, r2
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	00da      	lsls	r2, r3, #3
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4413      	add	r3, r2
 800246c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2200      	movs	r2, #0
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	e045      	b.n	8002506 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002482:	785b      	ldrb	r3, [r3, #1]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d126      	bne.n	80024d6 <PCD_EP_ISR_Handler+0x59e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002496:	b29b      	uxth	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	4413      	add	r3, r2
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	00da      	lsls	r2, r3, #3
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	4413      	add	r3, r2
 80024aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	801a      	strh	r2, [r3, #0]
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	e017      	b.n	8002506 <PCD_EP_ISR_Handler+0x5ce>
 80024d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024d8:	785b      	ldrb	r3, [r3, #1]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d113      	bne.n	8002506 <PCD_EP_ISR_Handler+0x5ce>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ec:	4413      	add	r3, r2
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	00da      	lsls	r2, r3, #3
 80024f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f8:	4413      	add	r3, r2
 80024fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002502:	2200      	movs	r2, #0
 8002504:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	4619      	mov	r1, r3
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f005 fb3c 	bl	8007b8a <HAL_PCD_DataInStageCallback>
 8002512:	e04a      	b.n	80025aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002514:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d13f      	bne.n	800259e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	4413      	add	r3, r2
 8002538:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002542:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8002544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800254a:	429a      	cmp	r2, r3
 800254c:	d906      	bls.n	800255c <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800254e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002554:	1ad2      	subs	r2, r2, r3
 8002556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002558:	619a      	str	r2, [r3, #24]
 800255a:	e002      	b.n	8002562 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800255c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800255e:	2200      	movs	r2, #0
 8002560:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800256a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f005 fb0a 	bl	8007b8a <HAL_PCD_DataInStageCallback>
 8002576:	e018      	b.n	80025aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800257e:	441a      	add	r2, r3
 8002580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002582:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800258a:	441a      	add	r2, r3
 800258c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800258e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fcd3 	bl	8004f42 <USB_EPStartXfer>
 800259c:	e005      	b.n	80025aa <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800259e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80025a0:	461a      	mov	r2, r3
 80025a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f917 	bl	80027d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f6ff acc3 	blt.w	8001f42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3748      	adds	r7, #72	@ 0x48
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b088      	sub	sp, #32
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	4613      	mov	r3, r2
 80025d2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d07c      	beq.n	80026d8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002602:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	8b7b      	ldrh	r3, [r7, #26]
 800260a:	429a      	cmp	r2, r3
 800260c:	d306      	bcc.n	800261c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	8b7b      	ldrh	r3, [r7, #26]
 8002614:	1ad2      	subs	r2, r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	619a      	str	r2, [r3, #24]
 800261a:	e002      	b.n	8002622 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d123      	bne.n	8002672 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002644:	833b      	strh	r3, [r7, #24]
 8002646:	8b3b      	ldrh	r3, [r7, #24]
 8002648:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800264c:	833b      	strh	r3, [r7, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	441a      	add	r2, r3
 800265c:	8b3b      	ldrh	r3, [r7, #24]
 800265e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800266a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800266e:	b29b      	uxth	r3, r3
 8002670:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01f      	beq.n	80026bc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002696:	82fb      	strh	r3, [r7, #22]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	441a      	add	r2, r3
 80026a6:	8afb      	ldrh	r3, [r7, #22]
 80026a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026bc:	8b7b      	ldrh	r3, [r7, #26]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8085 	beq.w	80027ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	6959      	ldr	r1, [r3, #20]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	891a      	ldrh	r2, [r3, #8]
 80026d0:	8b7b      	ldrh	r3, [r7, #26]
 80026d2:	f003 fb5c 	bl	8005d8e <USB_ReadPMA>
 80026d6:	e07a      	b.n	80027ce <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	8b7b      	ldrh	r3, [r7, #26]
 8002704:	429a      	cmp	r2, r3
 8002706:	d306      	bcc.n	8002716 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	699a      	ldr	r2, [r3, #24]
 800270c:	8b7b      	ldrh	r3, [r7, #26]
 800270e:	1ad2      	subs	r2, r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	619a      	str	r2, [r3, #24]
 8002714:	e002      	b.n	800271c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d123      	bne.n	800276c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800273a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800273e:	83fb      	strh	r3, [r7, #30]
 8002740:	8bfb      	ldrh	r3, [r7, #30]
 8002742:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002746:	83fb      	strh	r3, [r7, #30]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	441a      	add	r2, r3
 8002756:	8bfb      	ldrh	r3, [r7, #30]
 8002758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800275c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002768:	b29b      	uxth	r3, r3
 800276a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d11f      	bne.n	80027b6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800278c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002790:	83bb      	strh	r3, [r7, #28]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	441a      	add	r2, r3
 80027a0:	8bbb      	ldrh	r3, [r7, #28]
 80027a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027b6:	8b7b      	ldrh	r3, [r7, #26]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	6959      	ldr	r1, [r3, #20]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	895a      	ldrh	r2, [r3, #10]
 80027c8:	8b7b      	ldrh	r3, [r7, #26]
 80027ca:	f003 fae0 	bl	8005d8e <USB_ReadPMA>
    }
  }

  return count;
 80027ce:	8b7b      	ldrh	r3, [r7, #26]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b0a6      	sub	sp, #152	@ 0x98
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 81f7 	beq.w	8002be0 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	4413      	add	r3, r2
 800280c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002816:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002822:	429a      	cmp	r2, r3
 8002824:	d907      	bls.n	8002836 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	619a      	str	r2, [r3, #24]
 8002834:	e002      	b.n	800283c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 80e1 	bne.w	8002a08 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	785b      	ldrb	r3, [r3, #1]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d126      	bne.n	800289c <HAL_PCD_EP_DB_Transmit+0xc4>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	633b      	str	r3, [r7, #48]	@ 0x30
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800285c:	b29b      	uxth	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002862:	4413      	add	r3, r2
 8002864:	633b      	str	r3, [r7, #48]	@ 0x30
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	00da      	lsls	r2, r3, #3
 800286c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286e:	4413      	add	r3, r2
 8002870:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002880:	b29a      	uxth	r2, r3
 8002882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002894:	b29a      	uxth	r2, r3
 8002896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	e01a      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	785b      	ldrb	r3, [r3, #1]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d116      	bne.n	80028d2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b8:	4413      	add	r3, r2
 80028ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	00da      	lsls	r2, r3, #3
 80028c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c4:	4413      	add	r3, r2
 80028c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80028cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ce:	2200      	movs	r2, #0
 80028d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	785b      	ldrb	r3, [r3, #1]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d126      	bne.n	800292e <HAL_PCD_EP_DB_Transmit+0x156>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	623b      	str	r3, [r7, #32]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	4413      	add	r3, r2
 80028f6:	623b      	str	r3, [r7, #32]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	00da      	lsls	r2, r3, #3
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	4413      	add	r3, r2
 8002902:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002912:	b29a      	uxth	r2, r3
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	801a      	strh	r2, [r3, #0]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002926:	b29a      	uxth	r2, r3
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	801a      	strh	r2, [r3, #0]
 800292c:	e017      	b.n	800295e <HAL_PCD_EP_DB_Transmit+0x186>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d113      	bne.n	800295e <HAL_PCD_EP_DB_Transmit+0x186>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800293e:	b29b      	uxth	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002944:	4413      	add	r3, r2
 8002946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	00da      	lsls	r2, r3, #3
 800294e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002950:	4413      	add	r3, r2
 8002952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	2200      	movs	r2, #0
 800295c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	78db      	ldrb	r3, [r3, #3]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d123      	bne.n	80029ae <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800297c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002980:	837b      	strh	r3, [r7, #26]
 8002982:	8b7b      	ldrh	r3, [r7, #26]
 8002984:	f083 0320 	eor.w	r3, r3, #32
 8002988:	837b      	strh	r3, [r7, #26]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	441a      	add	r2, r3
 8002998:	8b7b      	ldrh	r3, [r7, #26]
 800299a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800299e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4619      	mov	r1, r3
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f005 f8e8 	bl	8007b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01f      	beq.n	8002a04 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029de:	833b      	strh	r3, [r7, #24]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	441a      	add	r2, r3
 80029ee:	8b3b      	ldrh	r3, [r7, #24]
 80029f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e31f      	b.n	8003048 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d021      	beq.n	8002a56 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a2c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	441a      	add	r2, r3
 8002a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	f040 82ca 	bne.w	8002ff6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002a78:	441a      	add	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	6a1a      	ldr	r2, [r3, #32]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d309      	bcc.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6a1a      	ldr	r2, [r3, #32]
 8002a94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a96:	1ad2      	subs	r2, r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	621a      	str	r2, [r3, #32]
 8002a9c:	e015      	b.n	8002aca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8002aa6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ab4:	e009      	b.n	8002aca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d15f      	bne.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae6:	4413      	add	r3, r2
 8002ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	00da      	lsls	r2, r3, #3
 8002af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af2:	4413      	add	r3, r2
 8002af4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <HAL_PCD_EP_DB_Transmit+0x34e>
 8002b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b22:	801a      	strh	r2, [r3, #0]
 8002b24:	e051      	b.n	8002bca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b28:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b2a:	d816      	bhi.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x382>
 8002b2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b3e:	3301      	adds	r3, #1
 8002b40:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	029b      	lsls	r3, r3, #10
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b56:	801a      	strh	r2, [r3, #0]
 8002b58:	e037      	b.n	8002bca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_PCD_EP_DB_Transmit+0x398>
 8002b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	e01b      	b.n	8002bca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d117      	bne.n	8002bca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bae:	4413      	add	r3, r2
 8002bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	00da      	lsls	r2, r3, #3
 8002bb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bba:	4413      	add	r3, r2
 8002bbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bc8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	6959      	ldr	r1, [r3, #20]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	891a      	ldrh	r2, [r3, #8]
 8002bd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	f003 f896 	bl	8005d0a <USB_WritePMA>
 8002bde:	e20a      	b.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c04:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d307      	bcc.n	8002c24 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002c1c:	1ad2      	subs	r2, r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	619a      	str	r2, [r3, #24]
 8002c22:	e002      	b.n	8002c2a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 80f6 	bne.w	8002e20 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d126      	bne.n	8002c8a <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c50:	4413      	add	r3, r2
 8002c52:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	00da      	lsls	r2, r3, #3
 8002c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c62:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c72:	801a      	strh	r2, [r3, #0]
 8002c74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c86:	801a      	strh	r2, [r3, #0]
 8002c88:	e01a      	b.n	8002cc0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	785b      	ldrb	r3, [r3, #1]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d116      	bne.n	8002cc0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ca6:	4413      	add	r3, r2
 8002ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	00da      	lsls	r2, r3, #3
 8002cb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002cb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d12f      	bne.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x558>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce8:	4413      	add	r3, r2
 8002cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	00da      	lsls	r2, r3, #3
 8002cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002cfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d14:	801a      	strh	r2, [r3, #0]
 8002d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d2c:	801a      	strh	r2, [r3, #0]
 8002d2e:	e01c      	b.n	8002d6a <HAL_PCD_EP_DB_Transmit+0x592>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	785b      	ldrb	r3, [r3, #1]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d118      	bne.n	8002d6a <HAL_PCD_EP_DB_Transmit+0x592>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d48:	4413      	add	r3, r2
 8002d4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	00da      	lsls	r2, r3, #3
 8002d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d58:	4413      	add	r3, r2
 8002d5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002d5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d66:	2200      	movs	r2, #0
 8002d68:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	78db      	ldrb	r3, [r3, #3]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d127      	bne.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d8c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002d90:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002d94:	f083 0320 	eor.w	r3, r3, #32
 8002d98:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	441a      	add	r2, r3
 8002daa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002dae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002db2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f004 fede 	bl	8007b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d121      	bne.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	441a      	add	r2, r3
 8002e04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e113      	b.n	8003048 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d121      	bne.n	8002e6e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e44:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	f040 80be 	bne.w	8002ff6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002e82:	441a      	add	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002e90:	441a      	add	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	6a1a      	ldr	r2, [r3, #32]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d309      	bcc.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	6a1a      	ldr	r2, [r3, #32]
 8002eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eae:	1ad2      	subs	r2, r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	621a      	str	r2, [r3, #32]
 8002eb4:	e015      	b.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d107      	bne.n	8002ece <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8002ebe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ecc:	e009      	b.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	785b      	ldrb	r3, [r3, #1]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d15f      	bne.n	8002fb0 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f04:	4413      	add	r3, r2
 8002f06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	00da      	lsls	r2, r3, #3
 8002f0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f10:	4413      	add	r3, r2
 8002f12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f16:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_PCD_EP_DB_Transmit+0x76c>
 8002f2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f40:	801a      	strh	r2, [r3, #0]
 8002f42:	e04e      	b.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002f44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f46:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f48:	d816      	bhi.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002f4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f4c:	085b      	lsrs	r3, r3, #1
 8002f4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_PCD_EP_DB_Transmit+0x788>
 8002f5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	029b      	lsls	r3, r3, #10
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f74:	801a      	strh	r2, [r3, #0]
 8002f76:	e034      	b.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002f78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_PCD_EP_DB_Transmit+0x7b6>
 8002f88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	029b      	lsls	r3, r3, #10
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fac:	801a      	strh	r2, [r3, #0]
 8002fae:	e018      	b.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	785b      	ldrb	r3, [r3, #1]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d114      	bne.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fc6:	4413      	add	r3, r2
 8002fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	00da      	lsls	r2, r3, #3
 8002fd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fe0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	6959      	ldr	r1, [r3, #20]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	895a      	ldrh	r2, [r3, #10]
 8002fee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f002 fe8a 	bl	8005d0a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800300c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003010:	82fb      	strh	r3, [r7, #22]
 8003012:	8afb      	ldrh	r3, [r7, #22]
 8003014:	f083 0310 	eor.w	r3, r3, #16
 8003018:	82fb      	strh	r3, [r7, #22]
 800301a:	8afb      	ldrh	r3, [r7, #22]
 800301c:	f083 0320 	eor.w	r3, r3, #32
 8003020:	82fb      	strh	r3, [r7, #22]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	441a      	add	r2, r3
 8003030:	8afb      	ldrh	r3, [r7, #22]
 8003032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800303a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800303e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003042:	b29b      	uxth	r3, r3
 8003044:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3798      	adds	r7, #152	@ 0x98
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	817b      	strh	r3, [r7, #10]
 800305e:	4613      	mov	r3, r2
 8003060:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003062:	897b      	ldrh	r3, [r7, #10]
 8003064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306e:	897b      	ldrh	r3, [r7, #10]
 8003070:	f003 0207 	and.w	r2, r3, #7
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	3310      	adds	r3, #16
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e009      	b.n	800309a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003086:	897a      	ldrh	r2, [r7, #10]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800309a:	893b      	ldrh	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2200      	movs	r2, #0
 80030a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	80da      	strh	r2, [r3, #6]
 80030ae:	e00b      	b.n	80030c8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2201      	movs	r2, #1
 80030b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800310e:	b29b      	uxth	r3, r3
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d141      	bne.n	80031be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800313a:	4b4b      	ldr	r3, [pc, #300]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003146:	d131      	bne.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003148:	4b47      	ldr	r3, [pc, #284]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800314e:	4a46      	ldr	r2, [pc, #280]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003154:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003158:	4b43      	ldr	r3, [pc, #268]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003160:	4a41      	ldr	r2, [pc, #260]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003166:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003168:	4b40      	ldr	r3, [pc, #256]	@ (800326c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2232      	movs	r2, #50	@ 0x32
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	4a3f      	ldr	r2, [pc, #252]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	0c9b      	lsrs	r3, r3, #18
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800317e:	e002      	b.n	8003186 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3b01      	subs	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003186:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003192:	d102      	bne.n	800319a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f2      	bne.n	8003180 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800319a:	4b33      	ldr	r3, [pc, #204]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a6:	d158      	bne.n	800325a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e057      	b.n	800325c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031bc:	e04d      	b.n	800325a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c4:	d141      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c6:	4b28      	ldr	r3, [pc, #160]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d2:	d131      	bne.n	8003238 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d4:	4b24      	ldr	r3, [pc, #144]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031da:	4a23      	ldr	r2, [pc, #140]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e4:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2232      	movs	r2, #50	@ 0x32
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	0c9b      	lsrs	r3, r3, #18
 8003206:	3301      	adds	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320a:	e002      	b.n	8003212 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3b01      	subs	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003212:	4b15      	ldr	r3, [pc, #84]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321e:	d102      	bne.n	8003226 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f2      	bne.n	800320c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003226:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003232:	d112      	bne.n	800325a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e011      	b.n	800325c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003238:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800323e:	4a0a      	ldr	r2, [pc, #40]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003244:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003248:	e007      	b.n	800325a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800324a:	4b07      	ldr	r3, [pc, #28]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003252:	4a05      	ldr	r2, [pc, #20]	@ (8003268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003254:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003258:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40007000 	.word	0x40007000
 800326c:	20000000 	.word	0x20000000
 8003270:	431bde83 	.word	0x431bde83

08003274 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a04      	ldr	r2, [pc, #16]	@ (8003290 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800327e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003282:	6093      	str	r3, [r2, #8]
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40007000 	.word	0x40007000

08003294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e2fe      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d075      	beq.n	800339e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b2:	4b97      	ldr	r3, [pc, #604]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032bc:	4b94      	ldr	r3, [pc, #592]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	d102      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3e>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_OscConfig+0x44>
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d05b      	beq.n	800339c <HAL_RCC_OscConfig+0x108>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d157      	bne.n	800339c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e2d9      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_OscConfig+0x74>
 80032fa:	4b85      	ldr	r3, [pc, #532]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a84      	ldr	r2, [pc, #528]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xb0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x98>
 8003312:	4b7f      	ldr	r3, [pc, #508]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7e      	ldr	r2, [pc, #504]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b7c      	ldr	r3, [pc, #496]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7b      	ldr	r2, [pc, #492]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xb0>
 800332c:	4b78      	ldr	r3, [pc, #480]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a77      	ldr	r2, [pc, #476]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b75      	ldr	r3, [pc, #468]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a74      	ldr	r2, [pc, #464]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fd fb22 	bl	8000994 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003354:	f7fd fb1e 	bl	8000994 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	@ 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e29e      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003366:	4b6a      	ldr	r3, [pc, #424]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xc0>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fd fb0e 	bl	8000994 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337c:	f7fd fb0a 	bl	8000994 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	@ 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e28a      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800338e:	4b60      	ldr	r3, [pc, #384]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0xe8>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d075      	beq.n	8003496 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033aa:	4b59      	ldr	r3, [pc, #356]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b4:	4b56      	ldr	r3, [pc, #344]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	d102      	bne.n	80033ca <HAL_RCC_OscConfig+0x136>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_OscConfig+0x13c>
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d11f      	bne.n	8003410 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_OscConfig+0x154>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e25d      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e8:	4b49      	ldr	r3, [pc, #292]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	4946      	ldr	r1, [pc, #280]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033fc:	4b45      	ldr	r3, [pc, #276]	@ (8003514 <HAL_RCC_OscConfig+0x280>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd fa7b 	bl	80008fc <HAL_InitTick>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d043      	beq.n	8003494 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e249      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d023      	beq.n	8003460 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003418:	4b3d      	ldr	r3, [pc, #244]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3c      	ldr	r2, [pc, #240]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fd fab6 	bl	8000994 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342c:	f7fd fab2 	bl	8000994 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e232      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343e:	4b34      	ldr	r3, [pc, #208]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344a:	4b31      	ldr	r3, [pc, #196]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	061b      	lsls	r3, r3, #24
 8003458:	492d      	ldr	r1, [pc, #180]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
 800345e:	e01a      	b.n	8003496 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003460:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a2a      	ldr	r2, [pc, #168]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003466:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800346a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fd fa92 	bl	8000994 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003474:	f7fd fa8e 	bl	8000994 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e20e      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003486:	4b22      	ldr	r3, [pc, #136]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x1e0>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d041      	beq.n	8003526 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d01c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034aa:	4b19      	ldr	r3, [pc, #100]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80034ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b0:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fd fa6b 	bl	8000994 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c2:	f7fd fa67 	bl	8000994 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e1e7      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ef      	beq.n	80034c2 <HAL_RCC_OscConfig+0x22e>
 80034e2:	e020      	b.n	8003526 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80034e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ea:	4a09      	ldr	r2, [pc, #36]	@ (8003510 <HAL_RCC_OscConfig+0x27c>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fd fa4e 	bl	8000994 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034fa:	e00d      	b.n	8003518 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fd fa4a 	bl	8000994 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d906      	bls.n	8003518 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e1ca      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003518:	4b8c      	ldr	r3, [pc, #560]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800351a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1ea      	bne.n	80034fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80a6 	beq.w	8003680 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003534:	2300      	movs	r3, #0
 8003536:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003538:	4b84      	ldr	r3, [pc, #528]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_OscConfig+0x2b4>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x2b6>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	4b7f      	ldr	r3, [pc, #508]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003552:	4a7e      	ldr	r2, [pc, #504]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003558:	6593      	str	r3, [r2, #88]	@ 0x58
 800355a:	4b7c      	ldr	r3, [pc, #496]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800355c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003566:	2301      	movs	r3, #1
 8003568:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356a:	4b79      	ldr	r3, [pc, #484]	@ (8003750 <HAL_RCC_OscConfig+0x4bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d118      	bne.n	80035a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003576:	4b76      	ldr	r3, [pc, #472]	@ (8003750 <HAL_RCC_OscConfig+0x4bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a75      	ldr	r2, [pc, #468]	@ (8003750 <HAL_RCC_OscConfig+0x4bc>)
 800357c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003582:	f7fd fa07 	bl	8000994 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358a:	f7fd fa03 	bl	8000994 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e183      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359c:	4b6c      	ldr	r3, [pc, #432]	@ (8003750 <HAL_RCC_OscConfig+0x4bc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d108      	bne.n	80035c2 <HAL_RCC_OscConfig+0x32e>
 80035b0:	4b66      	ldr	r3, [pc, #408]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b6:	4a65      	ldr	r2, [pc, #404]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035c0:	e024      	b.n	800360c <HAL_RCC_OscConfig+0x378>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b05      	cmp	r3, #5
 80035c8:	d110      	bne.n	80035ec <HAL_RCC_OscConfig+0x358>
 80035ca:	4b60      	ldr	r3, [pc, #384]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d0:	4a5e      	ldr	r2, [pc, #376]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035d2:	f043 0304 	orr.w	r3, r3, #4
 80035d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035da:	4b5c      	ldr	r3, [pc, #368]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e0:	4a5a      	ldr	r2, [pc, #360]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ea:	e00f      	b.n	800360c <HAL_RCC_OscConfig+0x378>
 80035ec:	4b57      	ldr	r3, [pc, #348]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f2:	4a56      	ldr	r2, [pc, #344]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035fc:	4b53      	ldr	r3, [pc, #332]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003602:	4a52      	ldr	r2, [pc, #328]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d016      	beq.n	8003642 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fd f9be 	bl	8000994 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361a:	e00a      	b.n	8003632 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fd f9ba 	bl	8000994 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e138      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003632:	4b46      	ldr	r3, [pc, #280]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ed      	beq.n	800361c <HAL_RCC_OscConfig+0x388>
 8003640:	e015      	b.n	800366e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fd f9a7 	bl	8000994 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fd f9a3 	bl	8000994 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e121      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003660:	4b3a      	ldr	r3, [pc, #232]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1ed      	bne.n	800364a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800366e:	7ffb      	ldrb	r3, [r7, #31]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003674:	4b35      	ldr	r3, [pc, #212]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003678:	4a34      	ldr	r2, [pc, #208]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800367a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800367e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03c      	beq.n	8003706 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01c      	beq.n	80036ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003694:	4b2d      	ldr	r3, [pc, #180]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003696:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800369a:	4a2c      	ldr	r2, [pc, #176]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fd f976 	bl	8000994 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ac:	f7fd f972 	bl	8000994 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0f2      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036be:	4b23      	ldr	r3, [pc, #140]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80036c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ef      	beq.n	80036ac <HAL_RCC_OscConfig+0x418>
 80036cc:	e01b      	b.n	8003706 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036ce:	4b1f      	ldr	r3, [pc, #124]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80036d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036d4:	4a1d      	ldr	r2, [pc, #116]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036de:	f7fd f959 	bl	8000994 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e6:	f7fd f955 	bl	8000994 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e0d5      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f8:	4b14      	ldr	r3, [pc, #80]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 80036fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1ef      	bne.n	80036e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80c9 	beq.w	80038a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003710:	4b0e      	ldr	r3, [pc, #56]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	2b0c      	cmp	r3, #12
 800371a:	f000 8083 	beq.w	8003824 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d15e      	bne.n	80037e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b09      	ldr	r3, [pc, #36]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a08      	ldr	r2, [pc, #32]	@ (800374c <HAL_RCC_OscConfig+0x4b8>)
 800372c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fd f92f 	bl	8000994 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003738:	e00c      	b.n	8003754 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7fd f92b 	bl	8000994 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d905      	bls.n	8003754 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e0ab      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
 800374c:	40021000 	.word	0x40021000
 8003750:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003754:	4b55      	ldr	r3, [pc, #340]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ec      	bne.n	800373a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003760:	4b52      	ldr	r3, [pc, #328]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	4b52      	ldr	r3, [pc, #328]	@ (80038b0 <HAL_RCC_OscConfig+0x61c>)
 8003766:	4013      	ands	r3, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6a11      	ldr	r1, [r2, #32]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003770:	3a01      	subs	r2, #1
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800377a:	0212      	lsls	r2, r2, #8
 800377c:	4311      	orrs	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003782:	0852      	lsrs	r2, r2, #1
 8003784:	3a01      	subs	r2, #1
 8003786:	0552      	lsls	r2, r2, #21
 8003788:	4311      	orrs	r1, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800378e:	0852      	lsrs	r2, r2, #1
 8003790:	3a01      	subs	r2, #1
 8003792:	0652      	lsls	r2, r2, #25
 8003794:	4311      	orrs	r1, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800379a:	06d2      	lsls	r2, r2, #27
 800379c:	430a      	orrs	r2, r1
 800379e:	4943      	ldr	r1, [pc, #268]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a4:	4b41      	ldr	r3, [pc, #260]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a40      	ldr	r2, [pc, #256]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b0:	4b3e      	ldr	r3, [pc, #248]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a3d      	ldr	r2, [pc, #244]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fd f8ea 	bl	8000994 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fd f8e6 	bl	8000994 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e066      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d6:	4b35      	ldr	r3, [pc, #212]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x530>
 80037e2:	e05e      	b.n	80038a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e4:	4b31      	ldr	r3, [pc, #196]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a30      	ldr	r2, [pc, #192]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fd f8d0 	bl	8000994 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fd f8cc 	bl	8000994 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e04c      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800380a:	4b28      	ldr	r3, [pc, #160]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003816:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	4924      	ldr	r1, [pc, #144]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800381c:	4b25      	ldr	r3, [pc, #148]	@ (80038b4 <HAL_RCC_OscConfig+0x620>)
 800381e:	4013      	ands	r3, r2
 8003820:	60cb      	str	r3, [r1, #12]
 8003822:	e03e      	b.n	80038a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e039      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003830:	4b1e      	ldr	r3, [pc, #120]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	429a      	cmp	r2, r3
 8003842:	d12c      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	3b01      	subs	r3, #1
 8003850:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d123      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003860:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d11b      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d113      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	3b01      	subs	r3, #1
 8003884:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d109      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	3b01      	subs	r3, #1
 8003898:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	019f800c 	.word	0x019f800c
 80038b4:	feeefffc 	.word	0xfeeefffc

080038b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e11e      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b91      	ldr	r3, [pc, #580]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d910      	bls.n	8003900 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b8e      	ldr	r3, [pc, #568]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 020f 	bic.w	r2, r3, #15
 80038e6:	498c      	ldr	r1, [pc, #560]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e106      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d073      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d129      	bne.n	8003968 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003914:	4b81      	ldr	r3, [pc, #516]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0f4      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003924:	f000 f966 	bl	8003bf4 <RCC_GetSysClockFreqFromPLLSource>
 8003928:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4a7c      	ldr	r2, [pc, #496]	@ (8003b20 <HAL_RCC_ClockConfig+0x268>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d93f      	bls.n	80039b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003932:	4b7a      	ldr	r3, [pc, #488]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003946:	2b00      	cmp	r3, #0
 8003948:	d033      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800394e:	2b00      	cmp	r3, #0
 8003950:	d12f      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003952:	4b72      	ldr	r3, [pc, #456]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800395a:	4a70      	ldr	r2, [pc, #448]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 800395c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003960:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e024      	b.n	80039b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d107      	bne.n	8003980 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003970:	4b6a      	ldr	r3, [pc, #424]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0c6      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003980:	4b66      	ldr	r3, [pc, #408]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0be      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003990:	f000 f8ce 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003994:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4a61      	ldr	r2, [pc, #388]	@ (8003b20 <HAL_RCC_ClockConfig+0x268>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d909      	bls.n	80039b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800399e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039a6:	4a5d      	ldr	r2, [pc, #372]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 80039a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039ae:	2380      	movs	r3, #128	@ 0x80
 80039b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b5a      	ldr	r3, [pc, #360]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4957      	ldr	r1, [pc, #348]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fc ffe6 	bl	8000994 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7fc ffe2 	bl	8000994 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e095      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b4e      	ldr	r3, [pc, #312]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d023      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a0c:	4b43      	ldr	r3, [pc, #268]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a42      	ldr	r2, [pc, #264]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a24:	4b3d      	ldr	r3, [pc, #244]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a2c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4936      	ldr	r1, [pc, #216]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b80      	cmp	r3, #128	@ 0x80
 8003a4c:	d105      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a4e:	4b33      	ldr	r3, [pc, #204]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	4a32      	ldr	r2, [pc, #200]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003a54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d21d      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a68:	4b2b      	ldr	r3, [pc, #172]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 020f 	bic.w	r2, r3, #15
 8003a70:	4929      	ldr	r1, [pc, #164]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a78:	f7fc ff8c 	bl	8000994 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fc ff88 	bl	8000994 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e03b      	b.n	8003b0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b20      	ldr	r3, [pc, #128]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d1ed      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4917      	ldr	r1, [pc, #92]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ace:	4b13      	ldr	r3, [pc, #76]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	490f      	ldr	r1, [pc, #60]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ae2:	f000 f825 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	490c      	ldr	r1, [pc, #48]	@ (8003b24 <HAL_RCC_ClockConfig+0x26c>)
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	4a0a      	ldr	r2, [pc, #40]	@ (8003b28 <HAL_RCC_ClockConfig+0x270>)
 8003b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_RCC_ClockConfig+0x274>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fc fef8 	bl	80008fc <HAL_InitTick>
 8003b0c:	4603      	mov	r3, r0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40022000 	.word	0x40022000
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	04c4b400 	.word	0x04c4b400
 8003b24:	08008adc 	.word	0x08008adc
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	20000004 	.word	0x20000004

08003b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b36:	4b2c      	ldr	r3, [pc, #176]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d102      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b42:	4b2a      	ldr	r3, [pc, #168]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e047      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b48:	4b27      	ldr	r3, [pc, #156]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d102      	bne.n	8003b5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b54:	4b26      	ldr	r3, [pc, #152]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e03e      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b5a:	4b23      	ldr	r3, [pc, #140]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d136      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b66:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b84:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	4a16      	ldr	r2, [pc, #88]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b8e:	68d2      	ldr	r2, [r2, #12]
 8003b90:	0a12      	lsrs	r2, r2, #8
 8003b92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	617b      	str	r3, [r7, #20]
      break;
 8003b9c:	e00c      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b9e:	4a13      	ldr	r2, [pc, #76]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	4a10      	ldr	r2, [pc, #64]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba8:	68d2      	ldr	r2, [r2, #12]
 8003baa:	0a12      	lsrs	r2, r2, #8
 8003bac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bb0:	fb02 f303 	mul.w	r3, r2, r3
 8003bb4:	617b      	str	r3, [r7, #20]
      break;
 8003bb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	0e5b      	lsrs	r3, r3, #25
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e001      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bd8:	693b      	ldr	r3, [r7, #16]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	007a1200 	.word	0x007a1200

08003bf4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c04:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d10c      	bne.n	8003c32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c18:	4a17      	ldr	r2, [pc, #92]	@ (8003c78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	4a14      	ldr	r2, [pc, #80]	@ (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c22:	68d2      	ldr	r2, [r2, #12]
 8003c24:	0a12      	lsrs	r2, r2, #8
 8003c26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	617b      	str	r3, [r7, #20]
    break;
 8003c30:	e00c      	b.n	8003c4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c32:	4a12      	ldr	r2, [pc, #72]	@ (8003c7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c3c:	68d2      	ldr	r2, [r2, #12]
 8003c3e:	0a12      	lsrs	r2, r2, #8
 8003c40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	617b      	str	r3, [r7, #20]
    break;
 8003c4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c4c:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0e5b      	lsrs	r3, r3, #25
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	3301      	adds	r3, #1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c66:	687b      	ldr	r3, [r7, #4]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40021000 	.word	0x40021000
 8003c78:	007a1200 	.word	0x007a1200
 8003c7c:	00f42400 	.word	0x00f42400

08003c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c88:	2300      	movs	r3, #0
 8003c8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8098 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca2:	4b43      	ldr	r3, [pc, #268]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10d      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	4b40      	ldr	r3, [pc, #256]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cba:	4b3d      	ldr	r3, [pc, #244]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cca:	4b3a      	ldr	r3, [pc, #232]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a39      	ldr	r2, [pc, #228]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd6:	f7fc fe5d 	bl	8000994 <HAL_GetTick>
 8003cda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cdc:	e009      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cde:	f7fc fe59 	bl	8000994 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d902      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	74fb      	strb	r3, [r7, #19]
        break;
 8003cf0:	e005      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf2:	4b30      	ldr	r3, [pc, #192]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0ef      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d159      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d04:	4b2a      	ldr	r3, [pc, #168]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01e      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d019      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d20:	4b23      	ldr	r3, [pc, #140]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d2c:	4b20      	ldr	r3, [pc, #128]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	4a1f      	ldr	r2, [pc, #124]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	4a1b      	ldr	r2, [pc, #108]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d4c:	4a18      	ldr	r2, [pc, #96]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fc fe19 	bl	8000994 <HAL_GetTick>
 8003d62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d64:	e00b      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fc fe15 	bl	8000994 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d902      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d7c:	e006      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0ec      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d92:	4b07      	ldr	r3, [pc, #28]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da0:	4903      	ldr	r1, [pc, #12]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003da8:	e008      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	74bb      	strb	r3, [r7, #18]
 8003dae:	e005      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbc:	7c7b      	ldrb	r3, [r7, #17]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4ba7      	ldr	r3, [pc, #668]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc6:	4aa6      	ldr	r2, [pc, #664]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dda:	4ba1      	ldr	r3, [pc, #644]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de0:	f023 0203 	bic.w	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	499d      	ldr	r1, [pc, #628]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dfc:	4b98      	ldr	r3, [pc, #608]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e02:	f023 020c 	bic.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4995      	ldr	r1, [pc, #596]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e1e:	4b90      	ldr	r3, [pc, #576]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	498c      	ldr	r1, [pc, #560]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e40:	4b87      	ldr	r3, [pc, #540]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	4984      	ldr	r1, [pc, #528]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e62:	4b7f      	ldr	r3, [pc, #508]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	497b      	ldr	r1, [pc, #492]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e84:	4b76      	ldr	r3, [pc, #472]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	4973      	ldr	r1, [pc, #460]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ea6:	4b6e      	ldr	r3, [pc, #440]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	496a      	ldr	r1, [pc, #424]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ec8:	4b65      	ldr	r3, [pc, #404]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ece:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	4962      	ldr	r1, [pc, #392]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eea:	4b5d      	ldr	r3, [pc, #372]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	4959      	ldr	r1, [pc, #356]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f0c:	4b54      	ldr	r3, [pc, #336]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f12:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1a:	4951      	ldr	r1, [pc, #324]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d015      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f2e:	4b4c      	ldr	r3, [pc, #304]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f34:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3c:	4948      	ldr	r1, [pc, #288]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f4c:	d105      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f4e:	4b44      	ldr	r3, [pc, #272]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	4a43      	ldr	r2, [pc, #268]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f58:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d015      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f66:	4b3e      	ldr	r3, [pc, #248]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f74:	493a      	ldr	r1, [pc, #232]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f84:	d105      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f86:	4b36      	ldr	r3, [pc, #216]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	4a35      	ldr	r2, [pc, #212]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f90:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d015      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f9e:	4b30      	ldr	r3, [pc, #192]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fac:	492c      	ldr	r1, [pc, #176]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fbc:	d105      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fbe:	4b28      	ldr	r3, [pc, #160]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	4a27      	ldr	r2, [pc, #156]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fc8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d015      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fd6:	4b22      	ldr	r3, [pc, #136]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fdc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe4:	491e      	ldr	r1, [pc, #120]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ff4:	d105      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	4a19      	ldr	r2, [pc, #100]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004000:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d015      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800400e:	4b14      	ldr	r3, [pc, #80]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004014:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401c:	4910      	ldr	r1, [pc, #64]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004028:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800402c:	d105      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402e:	4b0c      	ldr	r3, [pc, #48]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	4a0b      	ldr	r2, [pc, #44]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004034:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004038:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d018      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004046:	4b06      	ldr	r3, [pc, #24]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	4902      	ldr	r1, [pc, #8]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	e001      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004060:	40021000 	.word	0x40021000
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800406c:	4b21      	ldr	r3, [pc, #132]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a20      	ldr	r2, [pc, #128]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004076:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d015      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004084:	4b1b      	ldr	r3, [pc, #108]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	4918      	ldr	r1, [pc, #96]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a2:	d105      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040a4:	4b13      	ldr	r3, [pc, #76]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a12      	ldr	r2, [pc, #72]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80040aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d015      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040bc:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80040be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ca:	490a      	ldr	r1, [pc, #40]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040da:	d105      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80040e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000

080040f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004108:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800410c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800412e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004132:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	b29b      	uxth	r3, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	b29b      	uxth	r3, r3
 8004144:	4013      	ands	r3, r2
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	1d3b      	adds	r3, r7, #4
 8004166:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004198:	b480      	push	{r7}
 800419a:	b0a7      	sub	sp, #156	@ 0x9c
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	78db      	ldrb	r3, [r3, #3]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d81f      	bhi.n	800420a <USB_ActivateEndpoint+0x72>
 80041ca:	a201      	add	r2, pc, #4	@ (adr r2, 80041d0 <USB_ActivateEndpoint+0x38>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041fd 	.word	0x080041fd
 80041d8:	08004213 	.word	0x08004213
 80041dc:	080041ef 	.word	0x080041ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80041e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80041e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80041ec:	e012      	b.n	8004214 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80041ee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80041f2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80041f6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80041fa:	e00b      	b.n	8004214 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041fc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004200:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004204:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004208:	e004      	b.n	8004214 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8004210:	e000      	b.n	8004214 <USB_ActivateEndpoint+0x7c>
      break;
 8004212:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800422e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	b21b      	sxth	r3, r3
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800424a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424e:	b21a      	sxth	r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	b21b      	sxth	r3, r3
 8004256:	4313      	orrs	r3, r2
 8004258:	b21b      	sxth	r3, r3
 800425a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800426c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004270:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800427c:	b29b      	uxth	r3, r3
 800427e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	7b1b      	ldrb	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 8180 	bne.w	800458a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8084 	beq.w	800439c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800429e:	b29b      	uxth	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	4413      	add	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	00da      	lsls	r2, r3, #3
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	88db      	ldrh	r3, [r3, #6]
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	b29b      	uxth	r3, r3
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	827b      	strh	r3, [r7, #18]
 80042d6:	8a7b      	ldrh	r3, [r7, #18]
 80042d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01b      	beq.n	8004318 <USB_ActivateEndpoint+0x180>
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f6:	823b      	strh	r3, [r7, #16]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	8a3b      	ldrh	r3, [r7, #16]
 8004304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800430c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004310:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004314:	b29b      	uxth	r3, r3
 8004316:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	78db      	ldrb	r3, [r3, #3]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d020      	beq.n	8004362 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	b29b      	uxth	r3, r3
 800432e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004336:	81bb      	strh	r3, [r7, #12]
 8004338:	89bb      	ldrh	r3, [r7, #12]
 800433a:	f083 0320 	eor.w	r3, r3, #32
 800433e:	81bb      	strh	r3, [r7, #12]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	441a      	add	r2, r3
 800434a:	89bb      	ldrh	r3, [r7, #12]
 800434c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800435c:	b29b      	uxth	r3, r3
 800435e:	8013      	strh	r3, [r2, #0]
 8004360:	e3f9      	b.n	8004b56 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004378:	81fb      	strh	r3, [r7, #14]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	441a      	add	r2, r3
 8004384:	89fb      	ldrh	r3, [r7, #14]
 8004386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800438a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800438e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004396:	b29b      	uxth	r3, r3
 8004398:	8013      	strh	r3, [r2, #0]
 800439a:	e3dc      	b.n	8004b56 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	4413      	add	r3, r2
 80043ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	00da      	lsls	r2, r3, #3
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	4413      	add	r3, r2
 80043ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	88db      	ldrh	r3, [r3, #6]
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ce:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043da:	b29b      	uxth	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	4413      	add	r3, r2
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	00da      	lsls	r2, r3, #3
 80043ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ec:	4413      	add	r3, r2
 80043ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043fe:	b29a      	uxth	r2, r3
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	801a      	strh	r2, [r3, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <USB_ActivateEndpoint+0x28a>
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	b29b      	uxth	r3, r3
 8004412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441a:	b29a      	uxth	r2, r3
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	801a      	strh	r2, [r3, #0]
 8004420:	e041      	b.n	80044a6 <USB_ActivateEndpoint+0x30e>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b3e      	cmp	r3, #62	@ 0x3e
 8004428:	d81c      	bhi.n	8004464 <USB_ActivateEndpoint+0x2cc>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <USB_ActivateEndpoint+0x2b2>
 8004440:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004444:	3301      	adds	r3, #1
 8004446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b29a      	uxth	r2, r3
 8004450:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004454:	b29b      	uxth	r3, r3
 8004456:	029b      	lsls	r3, r3, #10
 8004458:	b29b      	uxth	r3, r3
 800445a:	4313      	orrs	r3, r2
 800445c:	b29a      	uxth	r2, r3
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	801a      	strh	r2, [r3, #0]
 8004462:	e020      	b.n	80044a6 <USB_ActivateEndpoint+0x30e>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <USB_ActivateEndpoint+0x2ec>
 800447a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800447e:	3b01      	subs	r3, #1
 8004480:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29a      	uxth	r2, r3
 800448a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800448e:	b29b      	uxth	r3, r3
 8004490:	029b      	lsls	r3, r3, #10
 8004492:	b29b      	uxth	r3, r3
 8004494:	4313      	orrs	r3, r2
 8004496:	b29b      	uxth	r3, r3
 8004498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80044b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80044b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01b      	beq.n	80044f6 <USB_ActivateEndpoint+0x35e>
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d4:	843b      	strh	r3, [r7, #32]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	8c3b      	ldrh	r3, [r7, #32]
 80044e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d124      	bne.n	8004548 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004514:	83bb      	strh	r3, [r7, #28]
 8004516:	8bbb      	ldrh	r3, [r7, #28]
 8004518:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800451c:	83bb      	strh	r3, [r7, #28]
 800451e:	8bbb      	ldrh	r3, [r7, #28]
 8004520:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004524:	83bb      	strh	r3, [r7, #28]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	441a      	add	r2, r3
 8004530:	8bbb      	ldrh	r3, [r7, #28]
 8004532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800453a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800453e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004542:	b29b      	uxth	r3, r3
 8004544:	8013      	strh	r3, [r2, #0]
 8004546:	e306      	b.n	8004b56 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800455a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455e:	83fb      	strh	r3, [r7, #30]
 8004560:	8bfb      	ldrh	r3, [r7, #30]
 8004562:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004566:	83fb      	strh	r3, [r7, #30]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	441a      	add	r2, r3
 8004572:	8bfb      	ldrh	r3, [r7, #30]
 8004574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800457c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004584:	b29b      	uxth	r3, r3
 8004586:	8013      	strh	r3, [r2, #0]
 8004588:	e2e5      	b.n	8004b56 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	78db      	ldrb	r3, [r3, #3]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d11e      	bne.n	80045d0 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80045ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045c2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80045c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8013      	strh	r3, [r2, #0]
 80045ce:	e01d      	b.n	800460c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80045e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80045f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004600:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004608:	b29b      	uxth	r3, r3
 800460a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004616:	b29b      	uxth	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800461c:	4413      	add	r3, r2
 800461e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	00da      	lsls	r2, r3, #3
 8004626:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004628:	4413      	add	r3, r2
 800462a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800462e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	891b      	ldrh	r3, [r3, #8]
 8004634:	085b      	lsrs	r3, r3, #1
 8004636:	b29b      	uxth	r3, r3
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	677b      	str	r3, [r7, #116]	@ 0x74
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800464a:	b29b      	uxth	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004650:	4413      	add	r3, r2
 8004652:	677b      	str	r3, [r7, #116]	@ 0x74
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	00da      	lsls	r2, r3, #3
 800465a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800465c:	4413      	add	r3, r2
 800465e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004662:	673b      	str	r3, [r7, #112]	@ 0x70
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	895b      	ldrh	r3, [r3, #10]
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	b29b      	uxth	r3, r3
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004672:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 81af 	bne.w	80049dc <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800468e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8004692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01d      	beq.n	80046d6 <USB_ActivateEndpoint+0x53e>
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80046c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80046e6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80046ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01d      	beq.n	800472e <USB_ActivateEndpoint+0x596>
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004708:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004726:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d16b      	bne.n	800480e <USB_ActivateEndpoint+0x676>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004740:	b29b      	uxth	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004746:	4413      	add	r3, r2
 8004748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	00da      	lsls	r2, r3, #3
 8004750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004752:	4413      	add	r3, r2
 8004754:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800475a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004764:	b29a      	uxth	r2, r3
 8004766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004768:	801a      	strh	r2, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <USB_ActivateEndpoint+0x5f0>
 8004772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800477c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004780:	b29a      	uxth	r2, r3
 8004782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004784:	801a      	strh	r2, [r3, #0]
 8004786:	e05d      	b.n	8004844 <USB_ActivateEndpoint+0x6ac>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b3e      	cmp	r3, #62	@ 0x3e
 800478e:	d81c      	bhi.n	80047ca <USB_ActivateEndpoint+0x632>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d004      	beq.n	80047b0 <USB_ActivateEndpoint+0x618>
 80047a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047aa:	3301      	adds	r3, #1
 80047ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80047b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	029b      	lsls	r3, r3, #10
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4313      	orrs	r3, r2
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c6:	801a      	strh	r2, [r3, #0]
 80047c8:	e03c      	b.n	8004844 <USB_ActivateEndpoint+0x6ac>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <USB_ActivateEndpoint+0x652>
 80047e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047e4:	3b01      	subs	r3, #1
 80047e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80047ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	029b      	lsls	r3, r3, #10
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	4313      	orrs	r3, r2
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004806:	b29a      	uxth	r2, r3
 8004808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800480a:	801a      	strh	r2, [r3, #0]
 800480c:	e01a      	b.n	8004844 <USB_ActivateEndpoint+0x6ac>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	785b      	ldrb	r3, [r3, #1]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d116      	bne.n	8004844 <USB_ActivateEndpoint+0x6ac>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	657b      	str	r3, [r7, #84]	@ 0x54
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004820:	b29b      	uxth	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004826:	4413      	add	r3, r2
 8004828:	657b      	str	r3, [r7, #84]	@ 0x54
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	00da      	lsls	r2, r3, #3
 8004830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004832:	4413      	add	r3, r2
 8004834:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004838:	653b      	str	r3, [r7, #80]	@ 0x50
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	b29a      	uxth	r2, r3
 8004840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004842:	801a      	strh	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	647b      	str	r3, [r7, #68]	@ 0x44
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d16b      	bne.n	8004928 <USB_ActivateEndpoint+0x790>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800485a:	b29b      	uxth	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004860:	4413      	add	r3, r2
 8004862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	00da      	lsls	r2, r3, #3
 800486a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486c:	4413      	add	r3, r2
 800486e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004872:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29b      	uxth	r3, r3
 800487a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800487e:	b29a      	uxth	r2, r3
 8004880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <USB_ActivateEndpoint+0x70a>
 800488c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489a:	b29a      	uxth	r2, r3
 800489c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	e05b      	b.n	800495a <USB_ActivateEndpoint+0x7c2>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80048a8:	d81c      	bhi.n	80048e4 <USB_ActivateEndpoint+0x74c>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d004      	beq.n	80048ca <USB_ActivateEndpoint+0x732>
 80048c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048c4:	3301      	adds	r3, #1
 80048c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	029b      	lsls	r3, r3, #10
 80048d8:	b29b      	uxth	r3, r3
 80048da:	4313      	orrs	r3, r2
 80048dc:	b29a      	uxth	r2, r3
 80048de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e0:	801a      	strh	r2, [r3, #0]
 80048e2:	e03a      	b.n	800495a <USB_ActivateEndpoint+0x7c2>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <USB_ActivateEndpoint+0x76c>
 80048fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048fe:	3b01      	subs	r3, #1
 8004900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29a      	uxth	r2, r3
 800490a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800490e:	b29b      	uxth	r3, r3
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	b29b      	uxth	r3, r3
 8004914:	4313      	orrs	r3, r2
 8004916:	b29b      	uxth	r3, r3
 8004918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800491c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004920:	b29a      	uxth	r2, r3
 8004922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	e018      	b.n	800495a <USB_ActivateEndpoint+0x7c2>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d114      	bne.n	800495a <USB_ActivateEndpoint+0x7c2>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004936:	b29b      	uxth	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800493c:	4413      	add	r3, r2
 800493e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	00da      	lsls	r2, r3, #3
 8004946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004948:	4413      	add	r3, r2
 800494a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800494e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	b29a      	uxth	r2, r3
 8004956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004958:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800496c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004970:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004972:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004974:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004978:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800497a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800497c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004980:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	441a      	add	r2, r3
 800498c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800498e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800499a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049b8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	441a      	add	r2, r3
 80049c4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80049c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	8013      	strh	r3, [r2, #0]
 80049da:	e0bc      	b.n	8004b56 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80049ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80049f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01d      	beq.n	8004a34 <USB_ActivateEndpoint+0x89c>
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	441a      	add	r2, r3
 8004a1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8004a44:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8004a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01d      	beq.n	8004a8c <USB_ActivateEndpoint+0x8f4>
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a66:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8004a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	78db      	ldrb	r3, [r3, #3]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d024      	beq.n	8004ade <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aaa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004aae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004ab2:	f083 0320 	eor.w	r3, r3, #32
 8004ab6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	8013      	strh	r3, [r2, #0]
 8004adc:	e01d      	b.n	8004b1a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004af4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b30:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	441a      	add	r2, r3
 8004b3e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004b56:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	379c      	adds	r7, #156	@ 0x9c
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop

08004b68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b08d      	sub	sp, #52	@ 0x34
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	7b1b      	ldrb	r3, [r3, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 808e 	bne.w	8004c98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d044      	beq.n	8004c0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	81bb      	strh	r3, [r7, #12]
 8004b92:	89bb      	ldrh	r3, [r7, #12]
 8004b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01b      	beq.n	8004bd4 <USB_DeactivateEndpoint+0x6c>
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb2:	817b      	strh	r3, [r7, #10]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	441a      	add	r2, r3
 8004bbe:	897b      	ldrh	r3, [r7, #10]
 8004bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004be6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bea:	813b      	strh	r3, [r7, #8]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	441a      	add	r2, r3
 8004bf6:	893b      	ldrh	r3, [r7, #8]
 8004bf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	8013      	strh	r3, [r2, #0]
 8004c0c:	e192      	b.n	8004f34 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	827b      	strh	r3, [r7, #18]
 8004c1c:	8a7b      	ldrh	r3, [r7, #18]
 8004c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01b      	beq.n	8004c5e <USB_DeactivateEndpoint+0xf6>
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c3c:	823b      	strh	r3, [r7, #16]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	441a      	add	r2, r3
 8004c48:	8a3b      	ldrh	r3, [r7, #16]
 8004c4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c74:	81fb      	strh	r3, [r7, #14]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	441a      	add	r2, r3
 8004c80:	89fb      	ldrh	r3, [r7, #14]
 8004c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8013      	strh	r3, [r2, #0]
 8004c96:	e14d      	b.n	8004f34 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	785b      	ldrb	r3, [r3, #1]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f040 80a5 	bne.w	8004dec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	843b      	strh	r3, [r7, #32]
 8004cb0:	8c3b      	ldrh	r3, [r7, #32]
 8004cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01b      	beq.n	8004cf2 <USB_DeactivateEndpoint+0x18a>
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd0:	83fb      	strh	r3, [r7, #30]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	441a      	add	r2, r3
 8004cdc:	8bfb      	ldrh	r3, [r7, #30]
 8004cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ce6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	83bb      	strh	r3, [r7, #28]
 8004d00:	8bbb      	ldrh	r3, [r7, #28]
 8004d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01b      	beq.n	8004d42 <USB_DeactivateEndpoint+0x1da>
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d20:	837b      	strh	r3, [r7, #26]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	8b7b      	ldrh	r3, [r7, #26]
 8004d2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d58:	833b      	strh	r3, [r7, #24]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	441a      	add	r2, r3
 8004d64:	8b3b      	ldrh	r3, [r7, #24]
 8004d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d90:	82fb      	strh	r3, [r7, #22]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	441a      	add	r2, r3
 8004d9c:	8afb      	ldrh	r3, [r7, #22]
 8004d9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004da2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dc8:	82bb      	strh	r3, [r7, #20]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	8abb      	ldrh	r3, [r7, #20]
 8004dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]
 8004dea:	e0a3      	b.n	8004f34 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004dfa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01b      	beq.n	8004e3c <USB_DeactivateEndpoint+0x2d4>
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	441a      	add	r2, r3
 8004e26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004e4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01b      	beq.n	8004e8c <USB_DeactivateEndpoint+0x324>
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	441a      	add	r2, r3
 8004eae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004eb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eda:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	441a      	add	r2, r3
 8004ee6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f12:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3734      	adds	r7, #52	@ 0x34
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b0ac      	sub	sp, #176	@ 0xb0
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	f040 84ca 	bne.w	80058ea <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d904      	bls.n	8004f6c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f6a:	e003      	b.n	8004f74 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	7b1b      	ldrb	r3, [r3, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d122      	bne.n	8004fc2 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	6959      	ldr	r1, [r3, #20]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	88da      	ldrh	r2, [r3, #6]
 8004f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 febd 	bl	8005d0a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	00da      	lsls	r2, r3, #3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4413      	add	r3, r2
 8004fae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	f000 bc6f 	b.w	80058a0 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	78db      	ldrb	r3, [r3, #3]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	f040 831e 	bne.w	8005608 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	f240 82cf 	bls.w	8005578 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	441a      	add	r2, r3
 8004ffe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005002:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005006:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800500a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800500e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005012:	b29b      	uxth	r3, r3
 8005014:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6a1a      	ldr	r2, [r3, #32]
 800501a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800501e:	1ad2      	subs	r2, r2, r3
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 814f 	beq.w	80052da <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d16b      	bne.n	8005120 <USB_EPStartXfer+0x1de>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005052:	b29b      	uxth	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005058:	4413      	add	r3, r2
 800505a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	00da      	lsls	r2, r3, #3
 8005062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005064:	4413      	add	r3, r2
 8005066:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005076:	b29a      	uxth	r2, r3
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <USB_EPStartXfer+0x158>
 8005084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005092:	b29a      	uxth	r2, r3
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	e05b      	b.n	8005152 <USB_EPStartXfer+0x210>
 800509a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800509e:	2b3e      	cmp	r3, #62	@ 0x3e
 80050a0:	d81c      	bhi.n	80050dc <USB_EPStartXfer+0x19a>
 80050a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050a6:	085b      	lsrs	r3, r3, #1
 80050a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d004      	beq.n	80050c2 <USB_EPStartXfer+0x180>
 80050b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050bc:	3301      	adds	r3, #1
 80050be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	029b      	lsls	r3, r3, #10
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	4313      	orrs	r3, r2
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	801a      	strh	r2, [r3, #0]
 80050da:	e03a      	b.n	8005152 <USB_EPStartXfer+0x210>
 80050dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <USB_EPStartXfer+0x1ba>
 80050f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050f6:	3b01      	subs	r3, #1
 80050f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29a      	uxth	r2, r3
 8005102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005106:	b29b      	uxth	r3, r3
 8005108:	029b      	lsls	r3, r3, #10
 800510a:	b29b      	uxth	r3, r3
 800510c:	4313      	orrs	r3, r2
 800510e:	b29b      	uxth	r3, r3
 8005110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005118:	b29a      	uxth	r2, r3
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	e018      	b.n	8005152 <USB_EPStartXfer+0x210>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d114      	bne.n	8005152 <USB_EPStartXfer+0x210>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800512e:	b29b      	uxth	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005134:	4413      	add	r3, r2
 8005136:	633b      	str	r3, [r7, #48]	@ 0x30
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	00da      	lsls	r2, r3, #3
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	4413      	add	r3, r2
 8005142:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800514c:	b29a      	uxth	r2, r3
 800514e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005150:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	895b      	ldrh	r3, [r3, #10]
 8005156:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6959      	ldr	r1, [r3, #20]
 800515e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005162:	b29b      	uxth	r3, r3
 8005164:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fdce 	bl	8005d0a <USB_WritePMA>
            ep->xfer_buff += len;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005176:	441a      	add	r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6a1a      	ldr	r2, [r3, #32]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	429a      	cmp	r2, r3
 8005186:	d907      	bls.n	8005198 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	6a1a      	ldr	r2, [r3, #32]
 800518c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005190:	1ad2      	subs	r2, r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	621a      	str	r2, [r3, #32]
 8005196:	e006      	b.n	80051a6 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2200      	movs	r2, #0
 80051a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d16b      	bne.n	8005286 <USB_EPStartXfer+0x344>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	461a      	mov	r2, r3
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	4413      	add	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	00da      	lsls	r2, r3, #3
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	4413      	add	r3, r2
 80051cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051dc:	b29a      	uxth	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <USB_EPStartXfer+0x2be>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	801a      	strh	r2, [r3, #0]
 80051fe:	e05d      	b.n	80052bc <USB_EPStartXfer+0x37a>
 8005200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005204:	2b3e      	cmp	r3, #62	@ 0x3e
 8005206:	d81c      	bhi.n	8005242 <USB_EPStartXfer+0x300>
 8005208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800520c:	085b      	lsrs	r3, r3, #1
 800520e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <USB_EPStartXfer+0x2e6>
 800521e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005222:	3301      	adds	r3, #1
 8005224:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29a      	uxth	r2, r3
 800522e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005232:	b29b      	uxth	r3, r3
 8005234:	029b      	lsls	r3, r3, #10
 8005236:	b29b      	uxth	r3, r3
 8005238:	4313      	orrs	r3, r2
 800523a:	b29a      	uxth	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	e03c      	b.n	80052bc <USB_EPStartXfer+0x37a>
 8005242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800524c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <USB_EPStartXfer+0x320>
 8005258:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800525c:	3b01      	subs	r3, #1
 800525e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29a      	uxth	r2, r3
 8005268:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800526c:	b29b      	uxth	r3, r3
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	b29b      	uxth	r3, r3
 8005272:	4313      	orrs	r3, r2
 8005274:	b29b      	uxth	r3, r3
 8005276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527e:	b29a      	uxth	r2, r3
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	801a      	strh	r2, [r3, #0]
 8005284:	e01a      	b.n	80052bc <USB_EPStartXfer+0x37a>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d116      	bne.n	80052bc <USB_EPStartXfer+0x37a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005298:	b29b      	uxth	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	4413      	add	r3, r2
 80052a0:	623b      	str	r3, [r7, #32]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	00da      	lsls	r2, r3, #3
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	4413      	add	r3, r2
 80052ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052b0:	61fb      	str	r3, [r7, #28]
 80052b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	891b      	ldrh	r3, [r3, #8]
 80052c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6959      	ldr	r1, [r3, #20]
 80052c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fd19 	bl	8005d0a <USB_WritePMA>
 80052d8:	e2e2      	b.n	80058a0 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d16b      	bne.n	80053ba <USB_EPStartXfer+0x478>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f2:	4413      	add	r3, r2
 80052f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	00da      	lsls	r2, r3, #3
 80052fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052fe:	4413      	add	r3, r2
 8005300:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005304:	647b      	str	r3, [r7, #68]	@ 0x44
 8005306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005310:	b29a      	uxth	r2, r3
 8005312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005314:	801a      	strh	r2, [r3, #0]
 8005316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <USB_EPStartXfer+0x3f2>
 800531e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532c:	b29a      	uxth	r2, r3
 800532e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e05d      	b.n	80053f0 <USB_EPStartXfer+0x4ae>
 8005334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005338:	2b3e      	cmp	r3, #62	@ 0x3e
 800533a:	d81c      	bhi.n	8005376 <USB_EPStartXfer+0x434>
 800533c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <USB_EPStartXfer+0x41a>
 8005352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005356:	3301      	adds	r3, #1
 8005358:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800535c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29a      	uxth	r2, r3
 8005362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005366:	b29b      	uxth	r3, r3
 8005368:	029b      	lsls	r3, r3, #10
 800536a:	b29b      	uxth	r3, r3
 800536c:	4313      	orrs	r3, r2
 800536e:	b29a      	uxth	r2, r3
 8005370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	e03c      	b.n	80053f0 <USB_EPStartXfer+0x4ae>
 8005376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005380:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	2b00      	cmp	r3, #0
 800538a:	d104      	bne.n	8005396 <USB_EPStartXfer+0x454>
 800538c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005390:	3b01      	subs	r3, #1
 8005392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29a      	uxth	r2, r3
 800539c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	029b      	lsls	r3, r3, #10
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	4313      	orrs	r3, r2
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	e01a      	b.n	80053f0 <USB_EPStartXfer+0x4ae>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d116      	bne.n	80053f0 <USB_EPStartXfer+0x4ae>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d2:	4413      	add	r3, r2
 80053d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	00da      	lsls	r2, r3, #3
 80053dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053de:	4413      	add	r3, r2
 80053e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	891b      	ldrh	r3, [r3, #8]
 80053f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	6959      	ldr	r1, [r3, #20]
 80053fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005400:	b29b      	uxth	r3, r3
 8005402:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fc7f 	bl	8005d0a <USB_WritePMA>
            ep->xfer_buff += len;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005414:	441a      	add	r2, r3
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6a1a      	ldr	r2, [r3, #32]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	429a      	cmp	r2, r3
 8005424:	d907      	bls.n	8005436 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6a1a      	ldr	r2, [r3, #32]
 800542a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	621a      	str	r2, [r3, #32]
 8005434:	e006      	b.n	8005444 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2200      	movs	r2, #0
 8005442:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	643b      	str	r3, [r7, #64]	@ 0x40
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d16b      	bne.n	8005528 <USB_EPStartXfer+0x5e6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800545a:	b29b      	uxth	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005460:	4413      	add	r3, r2
 8005462:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	00da      	lsls	r2, r3, #3
 800546a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546c:	4413      	add	r3, r2
 800546e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005472:	637b      	str	r3, [r7, #52]	@ 0x34
 8005474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800547e:	b29a      	uxth	r2, r3
 8005480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <USB_EPStartXfer+0x560>
 800548c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800549a:	b29a      	uxth	r2, r3
 800549c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549e:	801a      	strh	r2, [r3, #0]
 80054a0:	e05b      	b.n	800555a <USB_EPStartXfer+0x618>
 80054a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80054a8:	d81c      	bhi.n	80054e4 <USB_EPStartXfer+0x5a2>
 80054aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <USB_EPStartXfer+0x588>
 80054c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054c4:	3301      	adds	r3, #1
 80054c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	029b      	lsls	r3, r3, #10
 80054d8:	b29b      	uxth	r3, r3
 80054da:	4313      	orrs	r3, r2
 80054dc:	b29a      	uxth	r2, r3
 80054de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	e03a      	b.n	800555a <USB_EPStartXfer+0x618>
 80054e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d104      	bne.n	8005504 <USB_EPStartXfer+0x5c2>
 80054fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054fe:	3b01      	subs	r3, #1
 8005500:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	b29a      	uxth	r2, r3
 800550a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800550e:	b29b      	uxth	r3, r3
 8005510:	029b      	lsls	r3, r3, #10
 8005512:	b29b      	uxth	r3, r3
 8005514:	4313      	orrs	r3, r2
 8005516:	b29b      	uxth	r3, r3
 8005518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800551c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005520:	b29a      	uxth	r2, r3
 8005522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	e018      	b.n	800555a <USB_EPStartXfer+0x618>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d114      	bne.n	800555a <USB_EPStartXfer+0x618>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005536:	b29b      	uxth	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800553c:	4413      	add	r3, r2
 800553e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	00da      	lsls	r2, r3, #3
 8005546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005548:	4413      	add	r3, r2
 800554a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800554e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005554:	b29a      	uxth	r2, r3
 8005556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005558:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	895b      	ldrh	r3, [r3, #10]
 800555e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6959      	ldr	r1, [r3, #20]
 8005566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800556a:	b29b      	uxth	r3, r3
 800556c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fbca 	bl	8005d0a <USB_WritePMA>
 8005576:	e193      	b.n	80058a0 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005596:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	441a      	add	r2, r3
 80055a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80055a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055cc:	4413      	add	r3, r2
 80055ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	00da      	lsls	r2, r3, #3
 80055d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055d8:	4413      	add	r3, r2
 80055da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	891b      	ldrh	r3, [r3, #8]
 80055ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6959      	ldr	r1, [r3, #20]
 80055f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fb82 	bl	8005d0a <USB_WritePMA>
 8005606:	e14b      	b.n	80058a0 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	6a1a      	ldr	r2, [r3, #32]
 800560c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005610:	1ad2      	subs	r2, r2, r3
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 809a 	beq.w	8005762 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	673b      	str	r3, [r7, #112]	@ 0x70
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	785b      	ldrb	r3, [r3, #1]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d16b      	bne.n	8005712 <USB_EPStartXfer+0x7d0>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005644:	b29b      	uxth	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800564a:	4413      	add	r3, r2
 800564c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	00da      	lsls	r2, r3, #3
 8005654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005656:	4413      	add	r3, r2
 8005658:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800565c:	667b      	str	r3, [r7, #100]	@ 0x64
 800565e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005668:	b29a      	uxth	r2, r3
 800566a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10a      	bne.n	800568c <USB_EPStartXfer+0x74a>
 8005676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005684:	b29a      	uxth	r2, r3
 8005686:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005688:	801a      	strh	r2, [r3, #0]
 800568a:	e05b      	b.n	8005744 <USB_EPStartXfer+0x802>
 800568c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005690:	2b3e      	cmp	r3, #62	@ 0x3e
 8005692:	d81c      	bhi.n	80056ce <USB_EPStartXfer+0x78c>
 8005694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800569e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <USB_EPStartXfer+0x772>
 80056aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056ae:	3301      	adds	r3, #1
 80056b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056be:	b29b      	uxth	r3, r3
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	4313      	orrs	r3, r2
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	e03a      	b.n	8005744 <USB_EPStartXfer+0x802>
 80056ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <USB_EPStartXfer+0x7ac>
 80056e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056e8:	3b01      	subs	r3, #1
 80056ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	029b      	lsls	r3, r3, #10
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	4313      	orrs	r3, r2
 8005700:	b29b      	uxth	r3, r3
 8005702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570a:	b29a      	uxth	r2, r3
 800570c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800570e:	801a      	strh	r2, [r3, #0]
 8005710:	e018      	b.n	8005744 <USB_EPStartXfer+0x802>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d114      	bne.n	8005744 <USB_EPStartXfer+0x802>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005720:	b29b      	uxth	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005726:	4413      	add	r3, r2
 8005728:	673b      	str	r3, [r7, #112]	@ 0x70
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	00da      	lsls	r2, r3, #3
 8005730:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005732:	4413      	add	r3, r2
 8005734:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005738:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800573a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800573e:	b29a      	uxth	r2, r3
 8005740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005742:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	895b      	ldrh	r3, [r3, #10]
 8005748:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	6959      	ldr	r1, [r3, #20]
 8005750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005754:	b29b      	uxth	r3, r3
 8005756:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fad5 	bl	8005d0a <USB_WritePMA>
 8005760:	e09e      	b.n	80058a0 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d16b      	bne.n	8005842 <USB_EPStartXfer+0x900>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005774:	b29b      	uxth	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800577a:	4413      	add	r3, r2
 800577c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	00da      	lsls	r2, r3, #3
 8005784:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005786:	4413      	add	r3, r2
 8005788:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800578c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800578e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005798:	b29a      	uxth	r2, r3
 800579a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <USB_EPStartXfer+0x87a>
 80057a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057b8:	801a      	strh	r2, [r3, #0]
 80057ba:	e063      	b.n	8005884 <USB_EPStartXfer+0x942>
 80057bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80057c2:	d81c      	bhi.n	80057fe <USB_EPStartXfer+0x8bc>
 80057c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <USB_EPStartXfer+0x8a2>
 80057da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057de:	3301      	adds	r3, #1
 80057e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	029b      	lsls	r3, r3, #10
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	4313      	orrs	r3, r2
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057fa:	801a      	strh	r2, [r3, #0]
 80057fc:	e042      	b.n	8005884 <USB_EPStartXfer+0x942>
 80057fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2b00      	cmp	r3, #0
 8005812:	d104      	bne.n	800581e <USB_EPStartXfer+0x8dc>
 8005814:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005818:	3b01      	subs	r3, #1
 800581a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800581e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	b29a      	uxth	r2, r3
 8005824:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005828:	b29b      	uxth	r3, r3
 800582a:	029b      	lsls	r3, r3, #10
 800582c:	b29b      	uxth	r3, r3
 800582e:	4313      	orrs	r3, r2
 8005830:	b29b      	uxth	r3, r3
 8005832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583a:	b29a      	uxth	r2, r3
 800583c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800583e:	801a      	strh	r2, [r3, #0]
 8005840:	e020      	b.n	8005884 <USB_EPStartXfer+0x942>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	785b      	ldrb	r3, [r3, #1]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d11c      	bne.n	8005884 <USB_EPStartXfer+0x942>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005856:	b29b      	uxth	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800585e:	4413      	add	r3, r2
 8005860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	00da      	lsls	r2, r3, #3
 800586a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800586e:	4413      	add	r3, r2
 8005870:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005874:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800587c:	b29a      	uxth	r2, r3
 800587e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005882:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	891b      	ldrh	r3, [r3, #8]
 8005888:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6959      	ldr	r1, [r3, #20]
 8005890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005894:	b29b      	uxth	r3, r3
 8005896:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fa35 	bl	8005d0a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b6:	817b      	strh	r3, [r7, #10]
 80058b8:	897b      	ldrh	r3, [r7, #10]
 80058ba:	f083 0310 	eor.w	r3, r3, #16
 80058be:	817b      	strh	r3, [r7, #10]
 80058c0:	897b      	ldrh	r3, [r7, #10]
 80058c2:	f083 0320 	eor.w	r3, r3, #32
 80058c6:	817b      	strh	r3, [r7, #10]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	897b      	ldrh	r3, [r7, #10]
 80058d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	8013      	strh	r3, [r2, #0]
 80058e8:	e0d5      	b.n	8005a96 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	7b1b      	ldrb	r3, [r3, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d156      	bne.n	80059a0 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d122      	bne.n	8005940 <USB_EPStartXfer+0x9fe>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	78db      	ldrb	r3, [r3, #3]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d11e      	bne.n	8005940 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005918:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	441a      	add	r2, r3
 8005926:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800592a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800592e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005932:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800593a:	b29b      	uxth	r3, r3
 800593c:	8013      	strh	r3, [r2, #0]
 800593e:	e01d      	b.n	800597c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005956:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	441a      	add	r2, r3
 8005964:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8005968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800596c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005978:	b29b      	uxth	r3, r3
 800597a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	429a      	cmp	r2, r3
 8005986:	d907      	bls.n	8005998 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	699a      	ldr	r2, [r3, #24]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	1ad2      	subs	r2, r2, r3
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	619a      	str	r2, [r3, #24]
 8005996:	e054      	b.n	8005a42 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	619a      	str	r2, [r3, #24]
 800599e:	e050      	b.n	8005a42 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	78db      	ldrb	r3, [r3, #3]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d142      	bne.n	8005a2e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d048      	beq.n	8005a42 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059c0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80059c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <USB_EPStartXfer+0xa96>
 80059cc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80059d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80059d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80059dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d12e      	bne.n	8005a42 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80059e4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80059e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d128      	bne.n	8005a42 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a06:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	441a      	add	r2, r3
 8005a14:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]
 8005a2c:	e009      	b.n	8005a42 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	78db      	ldrb	r3, [r3, #3]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d103      	bne.n	8005a3e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	619a      	str	r2, [r3, #24]
 8005a3c:	e001      	b.n	8005a42 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e02a      	b.n	8005a98 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005a5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005a60:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005a64:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005a68:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005a6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a70:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	441a      	add	r2, r3
 8005a7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	37b0      	adds	r7, #176	@ 0xb0
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	785b      	ldrb	r3, [r3, #1]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d020      	beq.n	8005af4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ac8:	81bb      	strh	r3, [r7, #12]
 8005aca:	89bb      	ldrh	r3, [r7, #12]
 8005acc:	f083 0310 	eor.w	r3, r3, #16
 8005ad0:	81bb      	strh	r3, [r7, #12]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	441a      	add	r2, r3
 8005adc:	89bb      	ldrh	r3, [r7, #12]
 8005ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	8013      	strh	r3, [r2, #0]
 8005af2:	e01f      	b.n	8005b34 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b0a:	81fb      	strh	r3, [r7, #14]
 8005b0c:	89fb      	ldrh	r3, [r7, #14]
 8005b0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b12:	81fb      	strh	r3, [r7, #14]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	89fb      	ldrh	r3, [r7, #14]
 8005b20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d04c      	beq.n	8005bee <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	823b      	strh	r3, [r7, #16]
 8005b62:	8a3b      	ldrh	r3, [r7, #16]
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01b      	beq.n	8005ba4 <USB_EPClearStall+0x62>
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b82:	81fb      	strh	r3, [r7, #14]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	89fb      	ldrh	r3, [r7, #14]
 8005b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	78db      	ldrb	r3, [r3, #3]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d06c      	beq.n	8005c86 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc2:	81bb      	strh	r3, [r7, #12]
 8005bc4:	89bb      	ldrh	r3, [r7, #12]
 8005bc6:	f083 0320 	eor.w	r3, r3, #32
 8005bca:	81bb      	strh	r3, [r7, #12]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	441a      	add	r2, r3
 8005bd6:	89bb      	ldrh	r3, [r7, #12]
 8005bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	8013      	strh	r3, [r2, #0]
 8005bec:	e04b      	b.n	8005c86 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	82fb      	strh	r3, [r7, #22]
 8005bfc:	8afb      	ldrh	r3, [r7, #22]
 8005bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d01b      	beq.n	8005c3e <USB_EPClearStall+0xfc>
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1c:	82bb      	strh	r3, [r7, #20]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	441a      	add	r2, r3
 8005c28:	8abb      	ldrh	r3, [r7, #20]
 8005c2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c54:	827b      	strh	r3, [r7, #18]
 8005c56:	8a7b      	ldrh	r3, [r7, #18]
 8005c58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c5c:	827b      	strh	r3, [r7, #18]
 8005c5e:	8a7b      	ldrh	r3, [r7, #18]
 8005c60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c64:	827b      	strh	r3, [r7, #18]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	8a7b      	ldrh	r3, [r7, #18]
 8005c72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2280      	movs	r2, #128	@ 0x80
 8005caa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b08b      	sub	sp, #44	@ 0x2c
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	4611      	mov	r1, r2
 8005d16:	461a      	mov	r2, r3
 8005d18:	460b      	mov	r3, r1
 8005d1a:	80fb      	strh	r3, [r7, #6]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d20:	88bb      	ldrh	r3, [r7, #4]
 8005d22:	3301      	adds	r3, #1
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d30:	88fa      	ldrh	r2, [r7, #6]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d3a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d40:	e01b      	b.n	8005d7a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	b21a      	sxth	r2, r3
 8005d52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	b21b      	sxth	r3, r3
 8005d5a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	8a7a      	ldrh	r2, [r7, #18]
 8005d60:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	3302      	adds	r3, #2
 8005d66:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	3301      	adds	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	3b01      	subs	r3, #1
 8005d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e0      	bne.n	8005d42 <USB_WritePMA+0x38>
  }
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	372c      	adds	r7, #44	@ 0x2c
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b08b      	sub	sp, #44	@ 0x2c
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	4611      	mov	r1, r2
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	80fb      	strh	r3, [r7, #6]
 8005da0:	4613      	mov	r3, r2
 8005da2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005da4:	88bb      	ldrh	r3, [r7, #4]
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005db4:	88fa      	ldrh	r2, [r7, #6]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dbe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dc4:	e018      	b.n	8005df8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	0a1b      	lsrs	r3, r3, #8
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	3301      	adds	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	3b01      	subs	r3, #1
 8005df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e3      	bne.n	8005dc6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005dfe:	88bb      	ldrh	r3, [r7, #4]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	701a      	strb	r2, [r3, #0]
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	372c      	adds	r7, #44	@ 0x2c
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e32:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005e36:	f002 f8f9 	bl	800802c <USBD_static_malloc>
 8005e3a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d105      	bne.n	8005e4e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e066      	b.n	8005f1c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	7c1b      	ldrb	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d119      	bne.n	8005e92 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e62:	2202      	movs	r2, #2
 8005e64:	2181      	movs	r1, #129	@ 0x81
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f001 ff87 	bl	8007d7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e76:	2202      	movs	r2, #2
 8005e78:	2101      	movs	r1, #1
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 ff7d 	bl	8007d7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8005e90:	e016      	b.n	8005ec0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e92:	2340      	movs	r3, #64	@ 0x40
 8005e94:	2202      	movs	r2, #2
 8005e96:	2181      	movs	r1, #129	@ 0x81
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 ff6e 	bl	8007d7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ea4:	2340      	movs	r3, #64	@ 0x40
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 ff65 	bl	8007d7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2210      	movs	r2, #16
 8005ebc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	2203      	movs	r2, #3
 8005ec4:	2182      	movs	r1, #130	@ 0x82
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 ff57 	bl	8007d7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	7c1b      	ldrb	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005efc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f00:	2101      	movs	r1, #1
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f002 f828 	bl	8007f58 <USBD_LL_PrepareReceive>
 8005f08:	e007      	b.n	8005f1a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f10:	2340      	movs	r3, #64	@ 0x40
 8005f12:	2101      	movs	r1, #1
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f002 f81f 	bl	8007f58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f30:	2181      	movs	r1, #129	@ 0x81
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 ff47 	bl	8007dc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f3e:	2101      	movs	r1, #1
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f001 ff40 	bl	8007dc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f4e:	2182      	movs	r1, #130	@ 0x82
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 ff38 	bl	8007dc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00e      	beq.n	8005f8e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f80:	4618      	mov	r0, r3
 8005f82:	f002 f861 	bl	8008048 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005fa8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e0af      	b.n	8006120 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d03f      	beq.n	800604c <USBD_CDC_Setup+0xb4>
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	f040 809f 	bne.w	8006110 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	88db      	ldrh	r3, [r3, #6]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d02e      	beq.n	8006038 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	b25b      	sxtb	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	da16      	bge.n	8006012 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005ff0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	88d2      	ldrh	r2, [r2, #6]
 8005ff6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	88db      	ldrh	r3, [r3, #6]
 8005ffc:	2b07      	cmp	r3, #7
 8005ffe:	bf28      	it	cs
 8006000:	2307      	movcs	r3, #7
 8006002:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	89fa      	ldrh	r2, [r7, #14]
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f001 facd 	bl	80075aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006010:	e085      	b.n	800611e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	785a      	ldrb	r2, [r3, #1]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	88db      	ldrh	r3, [r3, #6]
 8006020:	b2da      	uxtb	r2, r3
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006028:	6939      	ldr	r1, [r7, #16]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	88db      	ldrh	r3, [r3, #6]
 800602e:	461a      	mov	r2, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 fae6 	bl	8007602 <USBD_CtlPrepareRx>
      break;
 8006036:	e072      	b.n	800611e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	7850      	ldrb	r0, [r2, #1]
 8006044:	2200      	movs	r2, #0
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	4798      	blx	r3
      break;
 800604a:	e068      	b.n	800611e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b0b      	cmp	r3, #11
 8006052:	d852      	bhi.n	80060fa <USBD_CDC_Setup+0x162>
 8006054:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <USBD_CDC_Setup+0xc4>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	0800608d 	.word	0x0800608d
 8006060:	08006109 	.word	0x08006109
 8006064:	080060fb 	.word	0x080060fb
 8006068:	080060fb 	.word	0x080060fb
 800606c:	080060fb 	.word	0x080060fb
 8006070:	080060fb 	.word	0x080060fb
 8006074:	080060fb 	.word	0x080060fb
 8006078:	080060fb 	.word	0x080060fb
 800607c:	080060fb 	.word	0x080060fb
 8006080:	080060fb 	.word	0x080060fb
 8006084:	080060b7 	.word	0x080060b7
 8006088:	080060e1 	.word	0x080060e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b03      	cmp	r3, #3
 8006096:	d107      	bne.n	80060a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006098:	f107 030a 	add.w	r3, r7, #10
 800609c:	2202      	movs	r2, #2
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 fa82 	bl	80075aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060a6:	e032      	b.n	800610e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 fa0c 	bl	80074c8 <USBD_CtlError>
            ret = USBD_FAIL;
 80060b0:	2303      	movs	r3, #3
 80060b2:	75fb      	strb	r3, [r7, #23]
          break;
 80060b4:	e02b      	b.n	800610e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d107      	bne.n	80060d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060c2:	f107 030d 	add.w	r3, r7, #13
 80060c6:	2201      	movs	r2, #1
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f001 fa6d 	bl	80075aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060d0:	e01d      	b.n	800610e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 f9f7 	bl	80074c8 <USBD_CtlError>
            ret = USBD_FAIL;
 80060da:	2303      	movs	r3, #3
 80060dc:	75fb      	strb	r3, [r7, #23]
          break;
 80060de:	e016      	b.n	800610e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d00f      	beq.n	800610c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 f9ea 	bl	80074c8 <USBD_CtlError>
            ret = USBD_FAIL;
 80060f4:	2303      	movs	r3, #3
 80060f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060f8:	e008      	b.n	800610c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 f9e3 	bl	80074c8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006102:	2303      	movs	r3, #3
 8006104:	75fb      	strb	r3, [r7, #23]
          break;
 8006106:	e002      	b.n	800610e <USBD_CDC_Setup+0x176>
          break;
 8006108:	bf00      	nop
 800610a:	e008      	b.n	800611e <USBD_CDC_Setup+0x186>
          break;
 800610c:	bf00      	nop
      }
      break;
 800610e:	e006      	b.n	800611e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 f9d8 	bl	80074c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006118:	2303      	movs	r3, #3
 800611a:	75fb      	strb	r3, [r7, #23]
      break;
 800611c:	bf00      	nop
  }

  return (uint8_t)ret;
 800611e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800613a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006146:	2303      	movs	r3, #3
 8006148:	e04f      	b.n	80061ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006150:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006152:	78fa      	ldrb	r2, [r7, #3]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	3318      	adds	r3, #24
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d029      	beq.n	80061bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006168:	78fa      	ldrb	r2, [r7, #3]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	3318      	adds	r3, #24
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	78f9      	ldrb	r1, [r7, #3]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	460b      	mov	r3, r1
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4403      	add	r3, r0
 8006188:	3320      	adds	r3, #32
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006196:	2b00      	cmp	r3, #0
 8006198:	d110      	bne.n	80061bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800619a:	78fa      	ldrb	r2, [r7, #3]
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	3318      	adds	r3, #24
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061ae:	78f9      	ldrb	r1, [r7, #3]
 80061b0:	2300      	movs	r3, #0
 80061b2:	2200      	movs	r2, #0
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 feae 	bl	8007f16 <USBD_LL_Transmit>
 80061ba:	e015      	b.n	80061e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80061e4:	78fa      	ldrb	r2, [r7, #3]
 80061e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	460b      	mov	r3, r1
 80061fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006204:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006210:	2303      	movs	r3, #3
 8006212:	e015      	b.n	8006240 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 febe 	bl	8007f9a <USBD_LL_GetRxDataSize>
 800621e:	4602      	mov	r2, r0
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800623a:	4611      	mov	r1, r2
 800623c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006256:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800625e:	2303      	movs	r3, #3
 8006260:	e01a      	b.n	8006298 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d014      	beq.n	8006296 <USBD_CDC_EP0_RxReady+0x4e>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006272:	2bff      	cmp	r3, #255	@ 0xff
 8006274:	d00f      	beq.n	8006296 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8006284:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800628c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	22ff      	movs	r2, #255	@ 0xff
 8006292:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2243      	movs	r2, #67	@ 0x43
 80062ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80062ae:	4b03      	ldr	r3, [pc, #12]	@ (80062bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	20000094 	.word	0x20000094

080062c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2243      	movs	r2, #67	@ 0x43
 80062cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80062ce:	4b03      	ldr	r3, [pc, #12]	@ (80062dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	20000050 	.word	0x20000050

080062e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2243      	movs	r2, #67	@ 0x43
 80062ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80062ee:	4b03      	ldr	r3, [pc, #12]	@ (80062fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	200000d8 	.word	0x200000d8

08006300 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	220a      	movs	r2, #10
 800630c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800630e:	4b03      	ldr	r3, [pc, #12]	@ (800631c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	2000000c 	.word	0x2000000c

08006320 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006330:	2303      	movs	r3, #3
 8006332:	e004      	b.n	800633e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800634a:	b480      	push	{r7}
 800634c:	b087      	sub	sp, #28
 800634e:	af00      	add	r7, sp, #0
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800635c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006364:	2303      	movs	r3, #3
 8006366:	e008      	b.n	800637a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006396:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800639e:	2303      	movs	r3, #3
 80063a0:	e004      	b.n	80063ac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80063c6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e01a      	b.n	8006410 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d114      	bne.n	800640e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006402:	2181      	movs	r1, #129	@ 0x81
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 fd86 	bl	8007f16 <USBD_LL_Transmit>

    ret = USBD_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006426:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006432:	2303      	movs	r3, #3
 8006434:	e016      	b.n	8006464 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	7c1b      	ldrb	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006444:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006448:	2101      	movs	r1, #1
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fd84 	bl	8007f58 <USBD_LL_PrepareReceive>
 8006450:	e007      	b.n	8006462 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006458:	2340      	movs	r3, #64	@ 0x40
 800645a:	2101      	movs	r1, #1
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fd7b 	bl	8007f58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	4613      	mov	r3, r2
 8006478:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006480:	2303      	movs	r3, #3
 8006482:	e01f      	b.n	80064c4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	79fa      	ldrb	r2, [r7, #7]
 80064b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f001 fbe3 	bl	8007c84 <USBD_LL_Init>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e016      	b.n	8006512 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006500:	f107 020e 	add.w	r2, r7, #14
 8006504:	4610      	mov	r0, r2
 8006506:	4798      	blx	r3
 8006508:	4602      	mov	r2, r0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 fc0e 	bl	8007d44 <USBD_LL_Start>
 8006528:	4603      	mov	r3, r0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006554:	2303      	movs	r3, #3
 8006556:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	78fa      	ldrb	r2, [r7, #3]
 800656c:	4611      	mov	r1, r2
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
 8006572:	4603      	mov	r3, r0
 8006574:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006576:	7bfb      	ldrb	r3, [r7, #15]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	78fa      	ldrb	r2, [r7, #3]
 80065a0:	4611      	mov	r1, r2
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
  }

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 ff46 	bl	8007454 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80065d6:	461a      	mov	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d01a      	beq.n	8006622 <USBD_LL_SetupStage+0x72>
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d822      	bhi.n	8006636 <USBD_LL_SetupStage+0x86>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <USBD_LL_SetupStage+0x4a>
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d00a      	beq.n	800660e <USBD_LL_SetupStage+0x5e>
 80065f8:	e01d      	b.n	8006636 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f9ee 	bl	80069e4 <USBD_StdDevReq>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]
      break;
 800660c:	e020      	b.n	8006650 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa52 	bl	8006ac0 <USBD_StdItfReq>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
      break;
 8006620:	e016      	b.n	8006650 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fa91 	bl	8006b52 <USBD_StdEPReq>
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]
      break;
 8006634:	e00c      	b.n	8006650 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800663c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006640:	b2db      	uxtb	r3, r3
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fbdd 	bl	8007e04 <USBD_LL_StallEP>
 800664a:	4603      	mov	r3, r0
 800664c:	73fb      	strb	r3, [r7, #15]
      break;
 800664e:	bf00      	nop
  }

  return ret;
 8006650:	7bfb      	ldrb	r3, [r7, #15]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b086      	sub	sp, #24
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	460b      	mov	r3, r1
 8006664:	607a      	str	r2, [r7, #4]
 8006666:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006668:	7afb      	ldrb	r3, [r7, #11]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d138      	bne.n	80066e0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006674:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800667c:	2b03      	cmp	r3, #3
 800667e:	d14a      	bne.n	8006716 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	429a      	cmp	r2, r3
 800668a:	d913      	bls.n	80066b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	1ad2      	subs	r2, r2, r3
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	4293      	cmp	r3, r2
 80066a4:	bf28      	it	cs
 80066a6:	4613      	movcs	r3, r2
 80066a8:	461a      	mov	r2, r3
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 ffc5 	bl	800763c <USBD_CtlContinueRx>
 80066b2:	e030      	b.n	8006716 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d10b      	bne.n	80066d8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 ffc0 	bl	800765e <USBD_CtlSendStatus>
 80066de:	e01a      	b.n	8006716 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d114      	bne.n	8006716 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	7afa      	ldrb	r2, [r7, #11]
 8006702:	4611      	mov	r1, r2
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	4798      	blx	r3
 8006708:	4603      	mov	r3, r0
 800670a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	e000      	b.n	8006718 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	460b      	mov	r3, r1
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d16b      	bne.n	800680c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3314      	adds	r3, #20
 8006738:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006740:	2b02      	cmp	r3, #2
 8006742:	d156      	bne.n	80067f2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	429a      	cmp	r2, r3
 800674e:	d914      	bls.n	800677a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	1ad2      	subs	r2, r2, r3
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	461a      	mov	r2, r3
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 ff3a 	bl	80075e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800676c:	2300      	movs	r3, #0
 800676e:	2200      	movs	r2, #0
 8006770:	2100      	movs	r1, #0
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f001 fbf0 	bl	8007f58 <USBD_LL_PrepareReceive>
 8006778:	e03b      	b.n	80067f2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	429a      	cmp	r2, r3
 8006784:	d11c      	bne.n	80067c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800678e:	429a      	cmp	r2, r3
 8006790:	d316      	bcc.n	80067c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800679c:	429a      	cmp	r2, r3
 800679e:	d20f      	bcs.n	80067c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067a0:	2200      	movs	r2, #0
 80067a2:	2100      	movs	r1, #0
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 ff1b 	bl	80075e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067b2:	2300      	movs	r3, #0
 80067b4:	2200      	movs	r2, #0
 80067b6:	2100      	movs	r1, #0
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f001 fbcd 	bl	8007f58 <USBD_LL_PrepareReceive>
 80067be:	e018      	b.n	80067f2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d10b      	bne.n	80067e4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d005      	beq.n	80067e4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067e4:	2180      	movs	r1, #128	@ 0x80
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f001 fb0c 	bl	8007e04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 ff49 	bl	8007684 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d122      	bne.n	8006842 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff fe98 	bl	8006532 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800680a:	e01a      	b.n	8006842 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b03      	cmp	r3, #3
 8006816:	d114      	bne.n	8006842 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00e      	beq.n	8006842 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	7afa      	ldrb	r2, [r7, #11]
 800682e:	4611      	mov	r1, r2
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	4798      	blx	r3
 8006834:	4603      	mov	r3, r0
 8006836:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	e000      	b.n	8006844 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800687c:	2303      	movs	r3, #3
 800687e:	e02f      	b.n	80068e0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00f      	beq.n	80068aa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6852      	ldr	r2, [r2, #4]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	4611      	mov	r1, r2
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068aa:	2340      	movs	r3, #64	@ 0x40
 80068ac:	2200      	movs	r2, #0
 80068ae:	2100      	movs	r1, #0
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 fa62 	bl	8007d7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2240      	movs	r2, #64	@ 0x40
 80068c2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068c6:	2340      	movs	r3, #64	@ 0x40
 80068c8:	2200      	movs	r2, #0
 80068ca:	2180      	movs	r1, #128	@ 0x80
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fa54 	bl	8007d7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2240      	movs	r2, #64	@ 0x40
 80068dc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006916:	b2da      	uxtb	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2204      	movs	r2, #4
 8006922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b04      	cmp	r3, #4
 8006946:	d106      	bne.n	8006956 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800694e:	b2da      	uxtb	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006976:	2303      	movs	r3, #3
 8006978:	e012      	b.n	80069a0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b03      	cmp	r3, #3
 8006984:	d10b      	bne.n	800699e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	3301      	adds	r3, #1
 80069be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069c6:	8a3b      	ldrh	r3, [r7, #16]
 80069c8:	021b      	lsls	r3, r3, #8
 80069ca:	b21a      	sxth	r2, r3
 80069cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	b21b      	sxth	r3, r3
 80069d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069d6:	89fb      	ldrh	r3, [r7, #14]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	371c      	adds	r7, #28
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069fa:	2b40      	cmp	r3, #64	@ 0x40
 80069fc:	d005      	beq.n	8006a0a <USBD_StdDevReq+0x26>
 80069fe:	2b40      	cmp	r3, #64	@ 0x40
 8006a00:	d853      	bhi.n	8006aaa <USBD_StdDevReq+0xc6>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <USBD_StdDevReq+0x3a>
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d14f      	bne.n	8006aaa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4798      	blx	r3
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a1c:	e04a      	b.n	8006ab4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	2b09      	cmp	r3, #9
 8006a24:	d83b      	bhi.n	8006a9e <USBD_StdDevReq+0xba>
 8006a26:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <USBD_StdDevReq+0x48>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a81 	.word	0x08006a81
 8006a30:	08006a95 	.word	0x08006a95
 8006a34:	08006a9f 	.word	0x08006a9f
 8006a38:	08006a8b 	.word	0x08006a8b
 8006a3c:	08006a9f 	.word	0x08006a9f
 8006a40:	08006a5f 	.word	0x08006a5f
 8006a44:	08006a55 	.word	0x08006a55
 8006a48:	08006a9f 	.word	0x08006a9f
 8006a4c:	08006a77 	.word	0x08006a77
 8006a50:	08006a69 	.word	0x08006a69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f9de 	bl	8006e18 <USBD_GetDescriptor>
          break;
 8006a5c:	e024      	b.n	8006aa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fb6d 	bl	8007140 <USBD_SetAddress>
          break;
 8006a66:	e01f      	b.n	8006aa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fbac 	bl	80071c8 <USBD_SetConfig>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]
          break;
 8006a74:	e018      	b.n	8006aa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fc4b 	bl	8007314 <USBD_GetConfig>
          break;
 8006a7e:	e013      	b.n	8006aa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fc7c 	bl	8007380 <USBD_GetStatus>
          break;
 8006a88:	e00e      	b.n	8006aa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fcab 	bl	80073e8 <USBD_SetFeature>
          break;
 8006a92:	e009      	b.n	8006aa8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fcba 	bl	8007410 <USBD_ClrFeature>
          break;
 8006a9c:	e004      	b.n	8006aa8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fd11 	bl	80074c8 <USBD_CtlError>
          break;
 8006aa6:	bf00      	nop
      }
      break;
 8006aa8:	e004      	b.n	8006ab4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fd0b 	bl	80074c8 <USBD_CtlError>
      break;
 8006ab2:	bf00      	nop
  }

  return ret;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop

08006ac0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ad6:	2b40      	cmp	r3, #64	@ 0x40
 8006ad8:	d005      	beq.n	8006ae6 <USBD_StdItfReq+0x26>
 8006ada:	2b40      	cmp	r3, #64	@ 0x40
 8006adc:	d82f      	bhi.n	8006b3e <USBD_StdItfReq+0x7e>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <USBD_StdItfReq+0x26>
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	d12b      	bne.n	8006b3e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d81d      	bhi.n	8006b30 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	889b      	ldrh	r3, [r3, #4]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d813      	bhi.n	8006b26 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	88db      	ldrh	r3, [r3, #6]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d110      	bne.n	8006b3a <USBD_StdItfReq+0x7a>
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fd9d 	bl	800765e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b24:	e009      	b.n	8006b3a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fccd 	bl	80074c8 <USBD_CtlError>
          break;
 8006b2e:	e004      	b.n	8006b3a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fcc8 	bl	80074c8 <USBD_CtlError>
          break;
 8006b38:	e000      	b.n	8006b3c <USBD_StdItfReq+0x7c>
          break;
 8006b3a:	bf00      	nop
      }
      break;
 8006b3c:	e004      	b.n	8006b48 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fcc1 	bl	80074c8 <USBD_CtlError>
      break;
 8006b46:	bf00      	nop
  }

  return ret;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	889b      	ldrh	r3, [r3, #4]
 8006b64:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b6e:	2b40      	cmp	r3, #64	@ 0x40
 8006b70:	d007      	beq.n	8006b82 <USBD_StdEPReq+0x30>
 8006b72:	2b40      	cmp	r3, #64	@ 0x40
 8006b74:	f200 8145 	bhi.w	8006e02 <USBD_StdEPReq+0x2b0>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00c      	beq.n	8006b96 <USBD_StdEPReq+0x44>
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	f040 8140 	bne.w	8006e02 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	4798      	blx	r3
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]
      break;
 8006b94:	e13a      	b.n	8006e0c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d007      	beq.n	8006bae <USBD_StdEPReq+0x5c>
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	f300 8129 	bgt.w	8006df6 <USBD_StdEPReq+0x2a4>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d07f      	beq.n	8006ca8 <USBD_StdEPReq+0x156>
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d03c      	beq.n	8006c26 <USBD_StdEPReq+0xd4>
 8006bac:	e123      	b.n	8006df6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d002      	beq.n	8006bc0 <USBD_StdEPReq+0x6e>
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d016      	beq.n	8006bec <USBD_StdEPReq+0x9a>
 8006bbe:	e02c      	b.n	8006c1a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00d      	beq.n	8006be2 <USBD_StdEPReq+0x90>
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	2b80      	cmp	r3, #128	@ 0x80
 8006bca:	d00a      	beq.n	8006be2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 f917 	bl	8007e04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bd6:	2180      	movs	r1, #128	@ 0x80
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 f913 	bl	8007e04 <USBD_LL_StallEP>
 8006bde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006be0:	e020      	b.n	8006c24 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fc6f 	bl	80074c8 <USBD_CtlError>
              break;
 8006bea:	e01b      	b.n	8006c24 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	885b      	ldrh	r3, [r3, #2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10e      	bne.n	8006c12 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <USBD_StdEPReq+0xc0>
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	2b80      	cmp	r3, #128	@ 0x80
 8006bfe:	d008      	beq.n	8006c12 <USBD_StdEPReq+0xc0>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	88db      	ldrh	r3, [r3, #6]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f8f9 	bl	8007e04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fd23 	bl	800765e <USBD_CtlSendStatus>

              break;
 8006c18:	e004      	b.n	8006c24 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fc53 	bl	80074c8 <USBD_CtlError>
              break;
 8006c22:	bf00      	nop
          }
          break;
 8006c24:	e0ec      	b.n	8006e00 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d002      	beq.n	8006c38 <USBD_StdEPReq+0xe6>
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d016      	beq.n	8006c64 <USBD_StdEPReq+0x112>
 8006c36:	e030      	b.n	8006c9a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00d      	beq.n	8006c5a <USBD_StdEPReq+0x108>
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	2b80      	cmp	r3, #128	@ 0x80
 8006c42:	d00a      	beq.n	8006c5a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 f8db 	bl	8007e04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c4e:	2180      	movs	r1, #128	@ 0x80
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 f8d7 	bl	8007e04 <USBD_LL_StallEP>
 8006c56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c58:	e025      	b.n	8006ca6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fc33 	bl	80074c8 <USBD_CtlError>
              break;
 8006c62:	e020      	b.n	8006ca6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	885b      	ldrh	r3, [r3, #2]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d11b      	bne.n	8006ca4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d004      	beq.n	8006c80 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 f8e1 	bl	8007e42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fcec 	bl	800765e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006c98:	e004      	b.n	8006ca4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fc13 	bl	80074c8 <USBD_CtlError>
              break;
 8006ca2:	e000      	b.n	8006ca6 <USBD_StdEPReq+0x154>
              break;
 8006ca4:	bf00      	nop
          }
          break;
 8006ca6:	e0ab      	b.n	8006e00 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d002      	beq.n	8006cba <USBD_StdEPReq+0x168>
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d032      	beq.n	8006d1e <USBD_StdEPReq+0x1cc>
 8006cb8:	e097      	b.n	8006dea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <USBD_StdEPReq+0x17e>
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	2b80      	cmp	r3, #128	@ 0x80
 8006cc4:	d004      	beq.n	8006cd0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fbfd 	bl	80074c8 <USBD_CtlError>
                break;
 8006cce:	e091      	b.n	8006df4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	da0b      	bge.n	8006cf0 <USBD_StdEPReq+0x19e>
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	3310      	adds	r3, #16
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	4413      	add	r3, r2
 8006cec:	3304      	adds	r3, #4
 8006cee:	e00b      	b.n	8006d08 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	4413      	add	r3, r2
 8006d06:	3304      	adds	r3, #4
 8006d08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2202      	movs	r2, #2
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fc47 	bl	80075aa <USBD_CtlSendData>
              break;
 8006d1c:	e06a      	b.n	8006df4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	da11      	bge.n	8006d4a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	3324      	adds	r3, #36	@ 0x24
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d117      	bne.n	8006d70 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fbc0 	bl	80074c8 <USBD_CtlError>
                  break;
 8006d48:	e054      	b.n	8006df4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	f003 020f 	and.w	r2, r3, #15
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	440b      	add	r3, r1
 8006d5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fbad 	bl	80074c8 <USBD_CtlError>
                  break;
 8006d6e:	e041      	b.n	8006df4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	da0b      	bge.n	8006d90 <USBD_StdEPReq+0x23e>
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	3310      	adds	r3, #16
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	e00b      	b.n	8006da8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	4413      	add	r3, r2
 8006da6:	3304      	adds	r3, #4
 8006da8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <USBD_StdEPReq+0x264>
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b80      	cmp	r3, #128	@ 0x80
 8006db4:	d103      	bne.n	8006dbe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e00e      	b.n	8006ddc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 f85c 	bl	8007e80 <USBD_LL_IsStallEP>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	e002      	b.n	8006ddc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2202      	movs	r2, #2
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fbe1 	bl	80075aa <USBD_CtlSendData>
              break;
 8006de8:	e004      	b.n	8006df4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fb6b 	bl	80074c8 <USBD_CtlError>
              break;
 8006df2:	bf00      	nop
          }
          break;
 8006df4:	e004      	b.n	8006e00 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fb65 	bl	80074c8 <USBD_CtlError>
          break;
 8006dfe:	bf00      	nop
      }
      break;
 8006e00:	e004      	b.n	8006e0c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fb5f 	bl	80074c8 <USBD_CtlError>
      break;
 8006e0a:	bf00      	nop
  }

  return ret;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	885b      	ldrh	r3, [r3, #2]
 8006e32:	0a1b      	lsrs	r3, r3, #8
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	2b0e      	cmp	r3, #14
 8006e3a:	f200 8152 	bhi.w	80070e2 <USBD_GetDescriptor+0x2ca>
 8006e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e44 <USBD_GetDescriptor+0x2c>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006eb5 	.word	0x08006eb5
 8006e48:	08006ecd 	.word	0x08006ecd
 8006e4c:	08006f0d 	.word	0x08006f0d
 8006e50:	080070e3 	.word	0x080070e3
 8006e54:	080070e3 	.word	0x080070e3
 8006e58:	08007083 	.word	0x08007083
 8006e5c:	080070af 	.word	0x080070af
 8006e60:	080070e3 	.word	0x080070e3
 8006e64:	080070e3 	.word	0x080070e3
 8006e68:	080070e3 	.word	0x080070e3
 8006e6c:	080070e3 	.word	0x080070e3
 8006e70:	080070e3 	.word	0x080070e3
 8006e74:	080070e3 	.word	0x080070e3
 8006e78:	080070e3 	.word	0x080070e3
 8006e7c:	08006e81 	.word	0x08006e81
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	7c12      	ldrb	r2, [r2, #16]
 8006e98:	f107 0108 	add.w	r1, r7, #8
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
 8006ea0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ea2:	e126      	b.n	80070f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fb0e 	bl	80074c8 <USBD_CtlError>
        err++;
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	72fb      	strb	r3, [r7, #11]
      break;
 8006eb2:	e11e      	b.n	80070f2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	7c12      	ldrb	r2, [r2, #16]
 8006ec0:	f107 0108 	add.w	r1, r7, #8
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
 8006ec8:	60f8      	str	r0, [r7, #12]
      break;
 8006eca:	e112      	b.n	80070f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7c1b      	ldrb	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10d      	bne.n	8006ef0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006edc:	f107 0208 	add.w	r2, r7, #8
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
 8006ee4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	2202      	movs	r2, #2
 8006eec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006eee:	e100      	b.n	80070f2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef8:	f107 0208 	add.w	r2, r7, #8
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3301      	adds	r3, #1
 8006f06:	2202      	movs	r2, #2
 8006f08:	701a      	strb	r2, [r3, #0]
      break;
 8006f0a:	e0f2      	b.n	80070f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	885b      	ldrh	r3, [r3, #2]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b05      	cmp	r3, #5
 8006f14:	f200 80ac 	bhi.w	8007070 <USBD_GetDescriptor+0x258>
 8006f18:	a201      	add	r2, pc, #4	@ (adr r2, 8006f20 <USBD_GetDescriptor+0x108>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f39 	.word	0x08006f39
 8006f24:	08006f6d 	.word	0x08006f6d
 8006f28:	08006fa1 	.word	0x08006fa1
 8006f2c:	08006fd5 	.word	0x08006fd5
 8006f30:	08007009 	.word	0x08007009
 8006f34:	0800703d 	.word	0x0800703d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	7c12      	ldrb	r2, [r2, #16]
 8006f50:	f107 0108 	add.w	r1, r7, #8
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f5a:	e091      	b.n	8007080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fab2 	bl	80074c8 <USBD_CtlError>
            err++;
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	3301      	adds	r3, #1
 8006f68:	72fb      	strb	r3, [r7, #11]
          break;
 8006f6a:	e089      	b.n	8007080 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	7c12      	ldrb	r2, [r2, #16]
 8006f84:	f107 0108 	add.w	r1, r7, #8
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4798      	blx	r3
 8006f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f8e:	e077      	b.n	8007080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa98 	bl	80074c8 <USBD_CtlError>
            err++;
 8006f98:	7afb      	ldrb	r3, [r7, #11]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f9e:	e06f      	b.n	8007080 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	7c12      	ldrb	r2, [r2, #16]
 8006fb8:	f107 0108 	add.w	r1, r7, #8
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
 8006fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fc2:	e05d      	b.n	8007080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa7e 	bl	80074c8 <USBD_CtlError>
            err++;
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fd2:	e055      	b.n	8007080 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	7c12      	ldrb	r2, [r2, #16]
 8006fec:	f107 0108 	add.w	r1, r7, #8
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
 8006ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ff6:	e043      	b.n	8007080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa64 	bl	80074c8 <USBD_CtlError>
            err++;
 8007000:	7afb      	ldrb	r3, [r7, #11]
 8007002:	3301      	adds	r3, #1
 8007004:	72fb      	strb	r3, [r7, #11]
          break;
 8007006:	e03b      	b.n	8007080 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	7c12      	ldrb	r2, [r2, #16]
 8007020:	f107 0108 	add.w	r1, r7, #8
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
 8007028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800702a:	e029      	b.n	8007080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa4a 	bl	80074c8 <USBD_CtlError>
            err++;
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	3301      	adds	r3, #1
 8007038:	72fb      	strb	r3, [r7, #11]
          break;
 800703a:	e021      	b.n	8007080 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	7c12      	ldrb	r2, [r2, #16]
 8007054:	f107 0108 	add.w	r1, r7, #8
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
 800705c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800705e:	e00f      	b.n	8007080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa30 	bl	80074c8 <USBD_CtlError>
            err++;
 8007068:	7afb      	ldrb	r3, [r7, #11]
 800706a:	3301      	adds	r3, #1
 800706c:	72fb      	strb	r3, [r7, #11]
          break;
 800706e:	e007      	b.n	8007080 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fa28 	bl	80074c8 <USBD_CtlError>
          err++;
 8007078:	7afb      	ldrb	r3, [r7, #11]
 800707a:	3301      	adds	r3, #1
 800707c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800707e:	bf00      	nop
      }
      break;
 8007080:	e037      	b.n	80070f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7c1b      	ldrb	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007092:	f107 0208 	add.w	r2, r7, #8
 8007096:	4610      	mov	r0, r2
 8007098:	4798      	blx	r3
 800709a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800709c:	e029      	b.n	80070f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fa11 	bl	80074c8 <USBD_CtlError>
        err++;
 80070a6:	7afb      	ldrb	r3, [r7, #11]
 80070a8:	3301      	adds	r3, #1
 80070aa:	72fb      	strb	r3, [r7, #11]
      break;
 80070ac:	e021      	b.n	80070f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	7c1b      	ldrb	r3, [r3, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10d      	bne.n	80070d2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070be:	f107 0208 	add.w	r2, r7, #8
 80070c2:	4610      	mov	r0, r2
 80070c4:	4798      	blx	r3
 80070c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	2207      	movs	r2, #7
 80070ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070d0:	e00f      	b.n	80070f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f9f7 	bl	80074c8 <USBD_CtlError>
        err++;
 80070da:	7afb      	ldrb	r3, [r7, #11]
 80070dc:	3301      	adds	r3, #1
 80070de:	72fb      	strb	r3, [r7, #11]
      break;
 80070e0:	e007      	b.n	80070f2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f9ef 	bl	80074c8 <USBD_CtlError>
      err++;
 80070ea:	7afb      	ldrb	r3, [r7, #11]
 80070ec:	3301      	adds	r3, #1
 80070ee:	72fb      	strb	r3, [r7, #11]
      break;
 80070f0:	bf00      	nop
  }

  if (err != 0U)
 80070f2:	7afb      	ldrb	r3, [r7, #11]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d11e      	bne.n	8007136 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	88db      	ldrh	r3, [r3, #6]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d016      	beq.n	800712e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007100:	893b      	ldrh	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00e      	beq.n	8007124 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	88da      	ldrh	r2, [r3, #6]
 800710a:	893b      	ldrh	r3, [r7, #8]
 800710c:	4293      	cmp	r3, r2
 800710e:	bf28      	it	cs
 8007110:	4613      	movcs	r3, r2
 8007112:	b29b      	uxth	r3, r3
 8007114:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007116:	893b      	ldrh	r3, [r7, #8]
 8007118:	461a      	mov	r2, r3
 800711a:	68f9      	ldr	r1, [r7, #12]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fa44 	bl	80075aa <USBD_CtlSendData>
 8007122:	e009      	b.n	8007138 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f9ce 	bl	80074c8 <USBD_CtlError>
 800712c:	e004      	b.n	8007138 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fa95 	bl	800765e <USBD_CtlSendStatus>
 8007134:	e000      	b.n	8007138 <USBD_GetDescriptor+0x320>
    return;
 8007136:	bf00      	nop
  }
}
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop

08007140 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	889b      	ldrh	r3, [r3, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d131      	bne.n	80071b6 <USBD_SetAddress+0x76>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	88db      	ldrh	r3, [r3, #6]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d12d      	bne.n	80071b6 <USBD_SetAddress+0x76>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	885b      	ldrh	r3, [r3, #2]
 800715e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007160:	d829      	bhi.n	80071b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	885b      	ldrh	r3, [r3, #2]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800716c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b03      	cmp	r3, #3
 8007178:	d104      	bne.n	8007184 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f9a3 	bl	80074c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007182:	e01d      	b.n	80071c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	7bfa      	ldrb	r2, [r7, #15]
 8007188:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fea1 	bl	8007ed8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa61 	bl	800765e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071aa:	e009      	b.n	80071c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b4:	e004      	b.n	80071c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f985 	bl	80074c8 <USBD_CtlError>
  }
}
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	885b      	ldrh	r3, [r3, #2]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	4b4c      	ldr	r3, [pc, #304]	@ (8007310 <USBD_SetConfig+0x148>)
 80071de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071e0:	4b4b      	ldr	r3, [pc, #300]	@ (8007310 <USBD_SetConfig+0x148>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d905      	bls.n	80071f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f96c 	bl	80074c8 <USBD_CtlError>
    return USBD_FAIL;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e088      	b.n	8007306 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d002      	beq.n	8007206 <USBD_SetConfig+0x3e>
 8007200:	2b03      	cmp	r3, #3
 8007202:	d025      	beq.n	8007250 <USBD_SetConfig+0x88>
 8007204:	e071      	b.n	80072ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007206:	4b42      	ldr	r3, [pc, #264]	@ (8007310 <USBD_SetConfig+0x148>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01c      	beq.n	8007248 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800720e:	4b40      	ldr	r3, [pc, #256]	@ (8007310 <USBD_SetConfig+0x148>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007218:	4b3d      	ldr	r3, [pc, #244]	@ (8007310 <USBD_SetConfig+0x148>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff f992 	bl	8006548 <USBD_SetClassConfig>
 8007224:	4603      	mov	r3, r0
 8007226:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f949 	bl	80074c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007236:	e065      	b.n	8007304 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fa10 	bl	800765e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2203      	movs	r2, #3
 8007242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007246:	e05d      	b.n	8007304 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fa08 	bl	800765e <USBD_CtlSendStatus>
      break;
 800724e:	e059      	b.n	8007304 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007250:	4b2f      	ldr	r3, [pc, #188]	@ (8007310 <USBD_SetConfig+0x148>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d112      	bne.n	800727e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007260:	4b2b      	ldr	r3, [pc, #172]	@ (8007310 <USBD_SetConfig+0x148>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800726a:	4b29      	ldr	r3, [pc, #164]	@ (8007310 <USBD_SetConfig+0x148>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff f985 	bl	8006580 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f9f1 	bl	800765e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800727c:	e042      	b.n	8007304 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800727e:	4b24      	ldr	r3, [pc, #144]	@ (8007310 <USBD_SetConfig+0x148>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	429a      	cmp	r2, r3
 800728a:	d02a      	beq.n	80072e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff f973 	bl	8006580 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800729a:	4b1d      	ldr	r3, [pc, #116]	@ (8007310 <USBD_SetConfig+0x148>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007310 <USBD_SetConfig+0x148>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff f94c 	bl	8006548 <USBD_SetClassConfig>
 80072b0:	4603      	mov	r3, r0
 80072b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00f      	beq.n	80072da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f903 	bl	80074c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff f958 	bl	8006580 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80072d8:	e014      	b.n	8007304 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9bf 	bl	800765e <USBD_CtlSendStatus>
      break;
 80072e0:	e010      	b.n	8007304 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9bb 	bl	800765e <USBD_CtlSendStatus>
      break;
 80072e8:	e00c      	b.n	8007304 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f8eb 	bl	80074c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072f2:	4b07      	ldr	r3, [pc, #28]	@ (8007310 <USBD_SetConfig+0x148>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff f941 	bl	8006580 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80072fe:	2303      	movs	r3, #3
 8007300:	73fb      	strb	r3, [r7, #15]
      break;
 8007302:	bf00      	nop
  }

  return ret;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000318 	.word	0x20000318

08007314 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	88db      	ldrh	r3, [r3, #6]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d004      	beq.n	8007330 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f8cd 	bl	80074c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800732e:	e023      	b.n	8007378 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	dc02      	bgt.n	8007342 <USBD_GetConfig+0x2e>
 800733c:	2b00      	cmp	r3, #0
 800733e:	dc03      	bgt.n	8007348 <USBD_GetConfig+0x34>
 8007340:	e015      	b.n	800736e <USBD_GetConfig+0x5a>
 8007342:	2b03      	cmp	r3, #3
 8007344:	d00b      	beq.n	800735e <USBD_GetConfig+0x4a>
 8007346:	e012      	b.n	800736e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3308      	adds	r3, #8
 8007352:	2201      	movs	r2, #1
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f927 	bl	80075aa <USBD_CtlSendData>
        break;
 800735c:	e00c      	b.n	8007378 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3304      	adds	r3, #4
 8007362:	2201      	movs	r2, #1
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f91f 	bl	80075aa <USBD_CtlSendData>
        break;
 800736c:	e004      	b.n	8007378 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f8a9 	bl	80074c8 <USBD_CtlError>
        break;
 8007376:	bf00      	nop
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007390:	b2db      	uxtb	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	2b02      	cmp	r3, #2
 8007396:	d81e      	bhi.n	80073d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	88db      	ldrh	r3, [r3, #6]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d004      	beq.n	80073aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f890 	bl	80074c8 <USBD_CtlError>
        break;
 80073a8:	e01a      	b.n	80073e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d005      	beq.n	80073c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f043 0202 	orr.w	r2, r3, #2
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	330c      	adds	r3, #12
 80073ca:	2202      	movs	r2, #2
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f8eb 	bl	80075aa <USBD_CtlSendData>
      break;
 80073d4:	e004      	b.n	80073e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f875 	bl	80074c8 <USBD_CtlError>
      break;
 80073de:	bf00      	nop
  }
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	885b      	ldrh	r3, [r3, #2]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d106      	bne.n	8007408 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f92b 	bl	800765e <USBD_CtlSendStatus>
  }
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007420:	b2db      	uxtb	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	2b02      	cmp	r3, #2
 8007426:	d80b      	bhi.n	8007440 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	885b      	ldrh	r3, [r3, #2]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d10c      	bne.n	800744a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f910 	bl	800765e <USBD_CtlSendStatus>
      }
      break;
 800743e:	e004      	b.n	800744a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f840 	bl	80074c8 <USBD_CtlError>
      break;
 8007448:	e000      	b.n	800744c <USBD_ClrFeature+0x3c>
      break;
 800744a:	bf00      	nop
  }
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3301      	adds	r3, #1
 800746e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3301      	adds	r3, #1
 800747c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f7ff fa92 	bl	80069a8 <SWAPBYTE>
 8007484:	4603      	mov	r3, r0
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3301      	adds	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3301      	adds	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f7ff fa85 	bl	80069a8 <SWAPBYTE>
 800749e:	4603      	mov	r3, r0
 80074a0:	461a      	mov	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3301      	adds	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff fa78 	bl	80069a8 <SWAPBYTE>
 80074b8:	4603      	mov	r3, r0
 80074ba:	461a      	mov	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	80da      	strh	r2, [r3, #6]
}
 80074c0:	bf00      	nop
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80074d2:	2180      	movs	r1, #128	@ 0x80
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fc95 	bl	8007e04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80074da:	2100      	movs	r1, #0
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fc91 	bl	8007e04 <USBD_LL_StallEP>
}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d036      	beq.n	800756e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007504:	6938      	ldr	r0, [r7, #16]
 8007506:	f000 f836 	bl	8007576 <USBD_GetLen>
 800750a:	4603      	mov	r3, r0
 800750c:	3301      	adds	r3, #1
 800750e:	b29b      	uxth	r3, r3
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	4413      	add	r3, r2
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	7812      	ldrb	r2, [r2, #0]
 8007522:	701a      	strb	r2, [r3, #0]
  idx++;
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	3301      	adds	r3, #1
 8007528:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	4413      	add	r3, r2
 8007530:	2203      	movs	r2, #3
 8007532:	701a      	strb	r2, [r3, #0]
  idx++;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	3301      	adds	r3, #1
 8007538:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800753a:	e013      	b.n	8007564 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	4413      	add	r3, r2
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	7812      	ldrb	r2, [r2, #0]
 8007546:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	3301      	adds	r3, #1
 800754c:	613b      	str	r3, [r7, #16]
    idx++;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	3301      	adds	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	4413      	add	r3, r2
 800755a:	2200      	movs	r2, #0
 800755c:	701a      	strb	r2, [r3, #0]
    idx++;
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	3301      	adds	r3, #1
 8007562:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e7      	bne.n	800753c <USBD_GetString+0x52>
 800756c:	e000      	b.n	8007570 <USBD_GetString+0x86>
    return;
 800756e:	bf00      	nop
  }
}
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007576:	b480      	push	{r7}
 8007578:	b085      	sub	sp, #20
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007586:	e005      	b.n	8007594 <USBD_GetLen+0x1e>
  {
    len++;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	3301      	adds	r3, #1
 800758c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	3301      	adds	r3, #1
 8007592:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1f5      	bne.n	8007588 <USBD_GetLen+0x12>
  }

  return len;
 800759c:	7bfb      	ldrb	r3, [r7, #15]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2202      	movs	r2, #2
 80075ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	2100      	movs	r1, #0
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 fca0 	bl	8007f16 <USBD_LL_Transmit>

  return USBD_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	2100      	movs	r1, #0
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 fc8f 	bl	8007f16 <USBD_LL_Transmit>

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2203      	movs	r2, #3
 8007612:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	2100      	movs	r1, #0
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 fc93 	bl	8007f58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	2100      	movs	r1, #0
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fc82 	bl	8007f58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2204      	movs	r2, #4
 800766a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800766e:	2300      	movs	r3, #0
 8007670:	2200      	movs	r2, #0
 8007672:	2100      	movs	r1, #0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fc4e 	bl	8007f16 <USBD_LL_Transmit>

  return USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2205      	movs	r2, #5
 8007690:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007694:	2300      	movs	r3, #0
 8007696:	2200      	movs	r2, #0
 8007698:	2100      	movs	r1, #0
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fc5c 	bl	8007f58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80076b0:	2200      	movs	r2, #0
 80076b2:	4912      	ldr	r1, [pc, #72]	@ (80076fc <MX_USB_Device_Init+0x50>)
 80076b4:	4812      	ldr	r0, [pc, #72]	@ (8007700 <MX_USB_Device_Init+0x54>)
 80076b6:	f7fe fed9 	bl	800646c <USBD_Init>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80076c0:	f7f8 ff7a 	bl	80005b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80076c4:	490f      	ldr	r1, [pc, #60]	@ (8007704 <MX_USB_Device_Init+0x58>)
 80076c6:	480e      	ldr	r0, [pc, #56]	@ (8007700 <MX_USB_Device_Init+0x54>)
 80076c8:	f7fe ff00 	bl	80064cc <USBD_RegisterClass>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80076d2:	f7f8 ff71 	bl	80005b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80076d6:	490c      	ldr	r1, [pc, #48]	@ (8007708 <MX_USB_Device_Init+0x5c>)
 80076d8:	4809      	ldr	r0, [pc, #36]	@ (8007700 <MX_USB_Device_Init+0x54>)
 80076da:	f7fe fe21 	bl	8006320 <USBD_CDC_RegisterInterface>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80076e4:	f7f8 ff68 	bl	80005b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80076e8:	4805      	ldr	r0, [pc, #20]	@ (8007700 <MX_USB_Device_Init+0x54>)
 80076ea:	f7fe ff16 	bl	800651a <USBD_Start>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80076f4:	f7f8 ff60 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80076f8:	bf00      	nop
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000130 	.word	0x20000130
 8007700:	2000031c 	.word	0x2000031c
 8007704:	20000018 	.word	0x20000018
 8007708:	2000011c 	.word	0x2000011c

0800770c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007710:	2200      	movs	r2, #0
 8007712:	4905      	ldr	r1, [pc, #20]	@ (8007728 <CDC_Init_FS+0x1c>)
 8007714:	4805      	ldr	r0, [pc, #20]	@ (800772c <CDC_Init_FS+0x20>)
 8007716:	f7fe fe18 	bl	800634a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800771a:	4905      	ldr	r1, [pc, #20]	@ (8007730 <CDC_Init_FS+0x24>)
 800771c:	4803      	ldr	r0, [pc, #12]	@ (800772c <CDC_Init_FS+0x20>)
 800771e:	f7fe fe32 	bl	8006386 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007722:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007724:	4618      	mov	r0, r3
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000dec 	.word	0x20000dec
 800772c:	2000031c 	.word	0x2000031c
 8007730:	200005ec 	.word	0x200005ec

08007734 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007734:	b480      	push	{r7}
 8007736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007738:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800773a:	4618      	mov	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	4603      	mov	r3, r0
 800774c:	6039      	str	r1, [r7, #0]
 800774e:	71fb      	strb	r3, [r7, #7]
 8007750:	4613      	mov	r3, r2
 8007752:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	2b23      	cmp	r3, #35	@ 0x23
 8007758:	d84a      	bhi.n	80077f0 <CDC_Control_FS+0xac>
 800775a:	a201      	add	r2, pc, #4	@ (adr r2, 8007760 <CDC_Control_FS+0x1c>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	080077f1 	.word	0x080077f1
 8007764:	080077f1 	.word	0x080077f1
 8007768:	080077f1 	.word	0x080077f1
 800776c:	080077f1 	.word	0x080077f1
 8007770:	080077f1 	.word	0x080077f1
 8007774:	080077f1 	.word	0x080077f1
 8007778:	080077f1 	.word	0x080077f1
 800777c:	080077f1 	.word	0x080077f1
 8007780:	080077f1 	.word	0x080077f1
 8007784:	080077f1 	.word	0x080077f1
 8007788:	080077f1 	.word	0x080077f1
 800778c:	080077f1 	.word	0x080077f1
 8007790:	080077f1 	.word	0x080077f1
 8007794:	080077f1 	.word	0x080077f1
 8007798:	080077f1 	.word	0x080077f1
 800779c:	080077f1 	.word	0x080077f1
 80077a0:	080077f1 	.word	0x080077f1
 80077a4:	080077f1 	.word	0x080077f1
 80077a8:	080077f1 	.word	0x080077f1
 80077ac:	080077f1 	.word	0x080077f1
 80077b0:	080077f1 	.word	0x080077f1
 80077b4:	080077f1 	.word	0x080077f1
 80077b8:	080077f1 	.word	0x080077f1
 80077bc:	080077f1 	.word	0x080077f1
 80077c0:	080077f1 	.word	0x080077f1
 80077c4:	080077f1 	.word	0x080077f1
 80077c8:	080077f1 	.word	0x080077f1
 80077cc:	080077f1 	.word	0x080077f1
 80077d0:	080077f1 	.word	0x080077f1
 80077d4:	080077f1 	.word	0x080077f1
 80077d8:	080077f1 	.word	0x080077f1
 80077dc:	080077f1 	.word	0x080077f1
 80077e0:	080077f1 	.word	0x080077f1
 80077e4:	080077f1 	.word	0x080077f1
 80077e8:	080077f1 	.word	0x080077f1
 80077ec:	080077f1 	.word	0x080077f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077f0:	bf00      	nop
  }

  return (USBD_OK);
 80077f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	4805      	ldr	r0, [pc, #20]	@ (8007824 <CDC_Receive_FS+0x24>)
 800780e:	f7fe fdba 	bl	8006386 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007812:	4804      	ldr	r0, [pc, #16]	@ (8007824 <CDC_Receive_FS+0x24>)
 8007814:	f7fe fe00 	bl	8006418 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007818:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2000031c 	.word	0x2000031c

08007828 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007838:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <CDC_Transmit_FS+0x48>)
 800783a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800783e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800784a:	2301      	movs	r3, #1
 800784c:	e00b      	b.n	8007866 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800784e:	887b      	ldrh	r3, [r7, #2]
 8007850:	461a      	mov	r2, r3
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	4806      	ldr	r0, [pc, #24]	@ (8007870 <CDC_Transmit_FS+0x48>)
 8007856:	f7fe fd78 	bl	800634a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800785a:	4805      	ldr	r0, [pc, #20]	@ (8007870 <CDC_Transmit_FS+0x48>)
 800785c:	f7fe fdac 	bl	80063b8 <USBD_CDC_TransmitPacket>
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	2000031c 	.word	0x2000031c

08007874 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800788a:	4618      	mov	r0, r3
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
	...

08007898 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	6039      	str	r1, [r7, #0]
 80078a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2212      	movs	r2, #18
 80078a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80078aa:	4b03      	ldr	r3, [pc, #12]	@ (80078b8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	20000150 	.word	0x20000150

080078bc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	6039      	str	r1, [r7, #0]
 80078c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2204      	movs	r2, #4
 80078cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078ce:	4b03      	ldr	r3, [pc, #12]	@ (80078dc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	20000164 	.word	0x20000164

080078e0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	6039      	str	r1, [r7, #0]
 80078ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d105      	bne.n	80078fe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	4907      	ldr	r1, [pc, #28]	@ (8007914 <USBD_CDC_ProductStrDescriptor+0x34>)
 80078f6:	4808      	ldr	r0, [pc, #32]	@ (8007918 <USBD_CDC_ProductStrDescriptor+0x38>)
 80078f8:	f7ff fdf7 	bl	80074ea <USBD_GetString>
 80078fc:	e004      	b.n	8007908 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	4904      	ldr	r1, [pc, #16]	@ (8007914 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007902:	4805      	ldr	r0, [pc, #20]	@ (8007918 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007904:	f7ff fdf1 	bl	80074ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8007908:	4b02      	ldr	r3, [pc, #8]	@ (8007914 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	200015ec 	.word	0x200015ec
 8007918:	08008a94 	.word	0x08008a94

0800791c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	4904      	ldr	r1, [pc, #16]	@ (800793c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800792c:	4804      	ldr	r0, [pc, #16]	@ (8007940 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800792e:	f7ff fddc 	bl	80074ea <USBD_GetString>
  return USBD_StrDesc;
 8007932:	4b02      	ldr	r3, [pc, #8]	@ (800793c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	200015ec 	.word	0x200015ec
 8007940:	08008aac 	.word	0x08008aac

08007944 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	221a      	movs	r2, #26
 8007954:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007956:	f000 f843 	bl	80079e0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800795a:	4b02      	ldr	r3, [pc, #8]	@ (8007964 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000168 	.word	0x20000168

08007968 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	6039      	str	r1, [r7, #0]
 8007972:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d105      	bne.n	8007986 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4907      	ldr	r1, [pc, #28]	@ (800799c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800797e:	4808      	ldr	r0, [pc, #32]	@ (80079a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007980:	f7ff fdb3 	bl	80074ea <USBD_GetString>
 8007984:	e004      	b.n	8007990 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	4904      	ldr	r1, [pc, #16]	@ (800799c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800798a:	4805      	ldr	r0, [pc, #20]	@ (80079a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800798c:	f7ff fdad 	bl	80074ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8007990:	4b02      	ldr	r3, [pc, #8]	@ (800799c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	200015ec 	.word	0x200015ec
 80079a0:	08008ac0 	.word	0x08008ac0

080079a4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	6039      	str	r1, [r7, #0]
 80079ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	4907      	ldr	r1, [pc, #28]	@ (80079d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80079ba:	4808      	ldr	r0, [pc, #32]	@ (80079dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80079bc:	f7ff fd95 	bl	80074ea <USBD_GetString>
 80079c0:	e004      	b.n	80079cc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	4904      	ldr	r1, [pc, #16]	@ (80079d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80079c6:	4805      	ldr	r0, [pc, #20]	@ (80079dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80079c8:	f7ff fd8f 	bl	80074ea <USBD_GetString>
  }
  return USBD_StrDesc;
 80079cc:	4b02      	ldr	r3, [pc, #8]	@ (80079d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	200015ec 	.word	0x200015ec
 80079dc:	08008acc 	.word	0x08008acc

080079e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a24 <Get_SerialNum+0x44>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007a28 <Get_SerialNum+0x48>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079f2:	4b0e      	ldr	r3, [pc, #56]	@ (8007a2c <Get_SerialNum+0x4c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4413      	add	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a06:	2208      	movs	r2, #8
 8007a08:	4909      	ldr	r1, [pc, #36]	@ (8007a30 <Get_SerialNum+0x50>)
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 f814 	bl	8007a38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a10:	2204      	movs	r2, #4
 8007a12:	4908      	ldr	r1, [pc, #32]	@ (8007a34 <Get_SerialNum+0x54>)
 8007a14:	68b8      	ldr	r0, [r7, #8]
 8007a16:	f000 f80f 	bl	8007a38 <IntToUnicode>
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	1fff7590 	.word	0x1fff7590
 8007a28:	1fff7594 	.word	0x1fff7594
 8007a2c:	1fff7598 	.word	0x1fff7598
 8007a30:	2000016a 	.word	0x2000016a
 8007a34:	2000017a 	.word	0x2000017a

08007a38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]
 8007a4e:	e027      	b.n	8007aa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	0f1b      	lsrs	r3, r3, #28
 8007a54:	2b09      	cmp	r3, #9
 8007a56:	d80b      	bhi.n	8007a70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	0f1b      	lsrs	r3, r3, #28
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	4619      	mov	r1, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	440b      	add	r3, r1
 8007a68:	3230      	adds	r2, #48	@ 0x30
 8007a6a:	b2d2      	uxtb	r2, r2
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	e00a      	b.n	8007a86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	0f1b      	lsrs	r3, r3, #28
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	440b      	add	r3, r1
 8007a80:	3237      	adds	r2, #55	@ 0x37
 8007a82:	b2d2      	uxtb	r2, r2
 8007a84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	011b      	lsls	r3, r3, #4
 8007a8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	3301      	adds	r3, #1
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	4413      	add	r3, r2
 8007a96:	2200      	movs	r2, #0
 8007a98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	75fb      	strb	r3, [r7, #23]
 8007aa0:	7dfa      	ldrb	r2, [r7, #23]
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d3d3      	bcc.n	8007a50 <IntToUnicode+0x18>
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	371c      	adds	r7, #28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b098      	sub	sp, #96	@ 0x60
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ac0:	f107 0310 	add.w	r3, r7, #16
 8007ac4:	2250      	movs	r2, #80	@ 0x50
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 fb19 	bl	8008100 <memset>
  if(pcdHandle->Instance==USB)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a15      	ldr	r2, [pc, #84]	@ (8007b28 <HAL_PCD_MspInit+0x70>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d122      	bne.n	8007b1e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007adc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ae2:	f107 0310 	add.w	r3, r7, #16
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fc f8ca 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8007af2:	f7f8 fd61 	bl	80005b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007af6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b2c <HAL_PCD_MspInit+0x74>)
 8007af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007afa:	4a0c      	ldr	r2, [pc, #48]	@ (8007b2c <HAL_PCD_MspInit+0x74>)
 8007afc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b02:	4b0a      	ldr	r3, [pc, #40]	@ (8007b2c <HAL_PCD_MspInit+0x74>)
 8007b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007b0e:	2200      	movs	r2, #0
 8007b10:	2100      	movs	r1, #0
 8007b12:	2014      	movs	r0, #20
 8007b14:	f7f9 f825 	bl	8000b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007b18:	2014      	movs	r0, #20
 8007b1a:	f7f9 f83c 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007b1e:	bf00      	nop
 8007b20:	3760      	adds	r7, #96	@ 0x60
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	40005c00 	.word	0x40005c00
 8007b2c:	40021000 	.word	0x40021000

08007b30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f7fe fd32 	bl	80065b0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8007b66:	78fa      	ldrb	r2, [r7, #3]
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	440b      	add	r3, r1
 8007b74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	f7fe fd6c 	bl	800665a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	440b      	add	r3, r1
 8007baa:	3324      	adds	r3, #36	@ 0x24
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	f7fe fdb5 	bl	8006720 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe fec9 	bl	8006964 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	795b      	ldrb	r3, [r3, #5]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d001      	beq.n	8007bf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007bee:	f7f8 fce3 	bl	80005b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007bf8:	7bfa      	ldrb	r2, [r7, #15]
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe fe73 	bl	80068e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe fe1f 	bl	800684c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe fe6e 	bl	8006908 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	7a5b      	ldrb	r3, [r3, #9]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d005      	beq.n	8007c40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c34:	4b04      	ldr	r3, [pc, #16]	@ (8007c48 <HAL_PCD_SuspendCallback+0x30>)
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	4a03      	ldr	r2, [pc, #12]	@ (8007c48 <HAL_PCD_SuspendCallback+0x30>)
 8007c3a:	f043 0306 	orr.w	r3, r3, #6
 8007c3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	e000ed00 	.word	0xe000ed00

08007c4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	7a5b      	ldrb	r3, [r3, #9]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c5c:	4b08      	ldr	r3, [pc, #32]	@ (8007c80 <HAL_PCD_ResumeCallback+0x34>)
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	4a07      	ldr	r2, [pc, #28]	@ (8007c80 <HAL_PCD_ResumeCallback+0x34>)
 8007c62:	f023 0306 	bic.w	r3, r3, #6
 8007c66:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007c68:	f000 f9f8 	bl	800805c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fe5e 	bl	8006934 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	e000ed00 	.word	0xe000ed00

08007c84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8007d3c <USBD_LL_Init+0xb8>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a29      	ldr	r2, [pc, #164]	@ (8007d3c <USBD_LL_Init+0xb8>)
 8007c98:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8007c9c:	4b27      	ldr	r3, [pc, #156]	@ (8007d3c <USBD_LL_Init+0xb8>)
 8007c9e:	4a28      	ldr	r2, [pc, #160]	@ (8007d40 <USBD_LL_Init+0xbc>)
 8007ca0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007ca2:	4b26      	ldr	r3, [pc, #152]	@ (8007d3c <USBD_LL_Init+0xb8>)
 8007ca4:	2208      	movs	r2, #8
 8007ca6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ca8:	4b24      	ldr	r3, [pc, #144]	@ (8007d3c <USBD_LL_Init+0xb8>)
 8007caa:	2202      	movs	r2, #2
 8007cac:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cae:	4b23      	ldr	r3, [pc, #140]	@ (8007d3c <USBD_LL_Init+0xb8>)
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007cb4:	4b21      	ldr	r3, [pc, #132]	@ (8007d3c <USBD_LL_Init+0xb8>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007cba:	4b20      	ldr	r3, [pc, #128]	@ (8007d3c <USBD_LL_Init+0xb8>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8007d3c <USBD_LL_Init+0xb8>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d3c <USBD_LL_Init+0xb8>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007ccc:	481b      	ldr	r0, [pc, #108]	@ (8007d3c <USBD_LL_Init+0xb8>)
 8007cce:	f7f9 fd2b 	bl	8001728 <HAL_PCD_Init>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007cd8:	f7f8 fc6e 	bl	80005b8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007ce2:	2318      	movs	r3, #24
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	f7fb f9b2 	bl	8003050 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007cf2:	2358      	movs	r3, #88	@ 0x58
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2180      	movs	r1, #128	@ 0x80
 8007cf8:	f7fb f9aa 	bl	8003050 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007d02:	23c0      	movs	r3, #192	@ 0xc0
 8007d04:	2200      	movs	r2, #0
 8007d06:	2181      	movs	r1, #129	@ 0x81
 8007d08:	f7fb f9a2 	bl	8003050 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007d12:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007d16:	2200      	movs	r2, #0
 8007d18:	2101      	movs	r1, #1
 8007d1a:	f7fb f999 	bl	8003050 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007d24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2182      	movs	r1, #130	@ 0x82
 8007d2c:	f7fb f990 	bl	8003050 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	200017ec 	.word	0x200017ec
 8007d40:	40005c00 	.word	0x40005c00

08007d44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7f9 fdb2 	bl	80018c4 <HAL_PCD_Start>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 f97e 	bl	8008068 <USBD_Get_USB_Status>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	4608      	mov	r0, r1
 8007d84:	4611      	mov	r1, r2
 8007d86:	461a      	mov	r2, r3
 8007d88:	4603      	mov	r3, r0
 8007d8a:	70fb      	strb	r3, [r7, #3]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	70bb      	strb	r3, [r7, #2]
 8007d90:	4613      	mov	r3, r2
 8007d92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007da2:	78bb      	ldrb	r3, [r7, #2]
 8007da4:	883a      	ldrh	r2, [r7, #0]
 8007da6:	78f9      	ldrb	r1, [r7, #3]
 8007da8:	f7f9 fef9 	bl	8001b9e <HAL_PCD_EP_Open>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 f958 	bl	8008068 <USBD_Get_USB_Status>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007de0:	78fa      	ldrb	r2, [r7, #3]
 8007de2:	4611      	mov	r1, r2
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7f9 ff39 	bl	8001c5c <HAL_PCD_EP_Close>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 f939 	bl	8008068 <USBD_Get_USB_Status>
 8007df6:	4603      	mov	r3, r0
 8007df8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007e1e:	78fa      	ldrb	r2, [r7, #3]
 8007e20:	4611      	mov	r1, r2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7f9 ffe2 	bl	8001dec <HAL_PCD_EP_SetStall>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f91a 	bl	8008068 <USBD_Get_USB_Status>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fa f815 	bl	8001e90 <HAL_PCD_EP_ClrStall>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 f8fb 	bl	8008068 <USBD_Get_USB_Status>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007e92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	da0b      	bge.n	8007eb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	440b      	add	r3, r1
 8007eae:	3312      	adds	r3, #18
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	e00b      	b.n	8007ecc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	440b      	add	r3, r1
 8007ec6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8007eca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007ef2:	78fa      	ldrb	r2, [r7, #3]
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7f9 fe2d 	bl	8001b56 <HAL_PCD_SetAddress>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 f8b0 	bl	8008068 <USBD_Get_USB_Status>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b086      	sub	sp, #24
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	603b      	str	r3, [r7, #0]
 8007f22:	460b      	mov	r3, r1
 8007f24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007f34:	7af9      	ldrb	r1, [r7, #11]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	f7f9 ff20 	bl	8001d7e <HAL_PCD_EP_Transmit>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 f88f 	bl	8008068 <USBD_Get_USB_Status>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	607a      	str	r2, [r7, #4]
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	460b      	mov	r3, r1
 8007f66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8007f76:	7af9      	ldrb	r1, [r7, #11]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	f7f9 feb6 	bl	8001cec <HAL_PCD_EP_Receive>
 8007f80:	4603      	mov	r3, r0
 8007f82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f86e 	bl	8008068 <USBD_Get_USB_Status>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f90:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007fac:	78fa      	ldrb	r2, [r7, #3]
 8007fae:	4611      	mov	r1, r2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7f9 fecc 	bl	8001d4e <HAL_PCD_EP_GetRxCount>
 8007fb6:	4603      	mov	r3, r0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <HAL_PCDEx_LPM_Callback+0x18>
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d013      	beq.n	8007ffe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8007fd6:	e023      	b.n	8008020 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	7a5b      	ldrb	r3, [r3, #9]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d007      	beq.n	8007ff0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007fe0:	f000 f83c 	bl	800805c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fe4:	4b10      	ldr	r3, [pc, #64]	@ (8008028 <HAL_PCDEx_LPM_Callback+0x68>)
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8008028 <HAL_PCDEx_LPM_Callback+0x68>)
 8007fea:	f023 0306 	bic.w	r3, r3, #6
 8007fee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe fc9c 	bl	8006934 <USBD_LL_Resume>
    break;
 8007ffc:	e010      	b.n	8008020 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008004:	4618      	mov	r0, r3
 8008006:	f7fe fc7f 	bl	8006908 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	7a5b      	ldrb	r3, [r3, #9]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d005      	beq.n	800801e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008012:	4b05      	ldr	r3, [pc, #20]	@ (8008028 <HAL_PCDEx_LPM_Callback+0x68>)
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	4a04      	ldr	r2, [pc, #16]	@ (8008028 <HAL_PCDEx_LPM_Callback+0x68>)
 8008018:	f043 0306 	orr.w	r3, r3, #6
 800801c:	6113      	str	r3, [r2, #16]
    break;
 800801e:	bf00      	nop
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	e000ed00 	.word	0xe000ed00

0800802c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008034:	4b03      	ldr	r3, [pc, #12]	@ (8008044 <USBD_static_malloc+0x18>)
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	20001ac8 	.word	0x20001ac8

08008048 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]

}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008060:	f7f8 f98c 	bl	800037c <SystemClock_Config>
}
 8008064:	bf00      	nop
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d817      	bhi.n	80080ac <USBD_Get_USB_Status+0x44>
 800807c:	a201      	add	r2, pc, #4	@ (adr r2, 8008084 <USBD_Get_USB_Status+0x1c>)
 800807e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008082:	bf00      	nop
 8008084:	08008095 	.word	0x08008095
 8008088:	0800809b 	.word	0x0800809b
 800808c:	080080a1 	.word	0x080080a1
 8008090:	080080a7 	.word	0x080080a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]
    break;
 8008098:	e00b      	b.n	80080b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800809a:	2303      	movs	r3, #3
 800809c:	73fb      	strb	r3, [r7, #15]
    break;
 800809e:	e008      	b.n	80080b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080a0:	2301      	movs	r3, #1
 80080a2:	73fb      	strb	r3, [r7, #15]
    break;
 80080a4:	e005      	b.n	80080b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080a6:	2303      	movs	r3, #3
 80080a8:	73fb      	strb	r3, [r7, #15]
    break;
 80080aa:	e002      	b.n	80080b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080ac:	2303      	movs	r3, #3
 80080ae:	73fb      	strb	r3, [r7, #15]
    break;
 80080b0:	bf00      	nop
  }
  return usb_status;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <_vsiprintf_r>:
 80080c0:	b500      	push	{lr}
 80080c2:	b09b      	sub	sp, #108	@ 0x6c
 80080c4:	9100      	str	r1, [sp, #0]
 80080c6:	9104      	str	r1, [sp, #16]
 80080c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80080cc:	9105      	str	r1, [sp, #20]
 80080ce:	9102      	str	r1, [sp, #8]
 80080d0:	4905      	ldr	r1, [pc, #20]	@ (80080e8 <_vsiprintf_r+0x28>)
 80080d2:	9103      	str	r1, [sp, #12]
 80080d4:	4669      	mov	r1, sp
 80080d6:	f000 f99b 	bl	8008410 <_svfiprintf_r>
 80080da:	9b00      	ldr	r3, [sp, #0]
 80080dc:	2200      	movs	r2, #0
 80080de:	701a      	strb	r2, [r3, #0]
 80080e0:	b01b      	add	sp, #108	@ 0x6c
 80080e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80080e6:	bf00      	nop
 80080e8:	ffff0208 	.word	0xffff0208

080080ec <vsiprintf>:
 80080ec:	4613      	mov	r3, r2
 80080ee:	460a      	mov	r2, r1
 80080f0:	4601      	mov	r1, r0
 80080f2:	4802      	ldr	r0, [pc, #8]	@ (80080fc <vsiprintf+0x10>)
 80080f4:	6800      	ldr	r0, [r0, #0]
 80080f6:	f7ff bfe3 	b.w	80080c0 <_vsiprintf_r>
 80080fa:	bf00      	nop
 80080fc:	20000184 	.word	0x20000184

08008100 <memset>:
 8008100:	4402      	add	r2, r0
 8008102:	4603      	mov	r3, r0
 8008104:	4293      	cmp	r3, r2
 8008106:	d100      	bne.n	800810a <memset+0xa>
 8008108:	4770      	bx	lr
 800810a:	f803 1b01 	strb.w	r1, [r3], #1
 800810e:	e7f9      	b.n	8008104 <memset+0x4>

08008110 <__errno>:
 8008110:	4b01      	ldr	r3, [pc, #4]	@ (8008118 <__errno+0x8>)
 8008112:	6818      	ldr	r0, [r3, #0]
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	20000184 	.word	0x20000184

0800811c <__libc_init_array>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	4d0d      	ldr	r5, [pc, #52]	@ (8008154 <__libc_init_array+0x38>)
 8008120:	4c0d      	ldr	r4, [pc, #52]	@ (8008158 <__libc_init_array+0x3c>)
 8008122:	1b64      	subs	r4, r4, r5
 8008124:	10a4      	asrs	r4, r4, #2
 8008126:	2600      	movs	r6, #0
 8008128:	42a6      	cmp	r6, r4
 800812a:	d109      	bne.n	8008140 <__libc_init_array+0x24>
 800812c:	4d0b      	ldr	r5, [pc, #44]	@ (800815c <__libc_init_array+0x40>)
 800812e:	4c0c      	ldr	r4, [pc, #48]	@ (8008160 <__libc_init_array+0x44>)
 8008130:	f000 fc66 	bl	8008a00 <_init>
 8008134:	1b64      	subs	r4, r4, r5
 8008136:	10a4      	asrs	r4, r4, #2
 8008138:	2600      	movs	r6, #0
 800813a:	42a6      	cmp	r6, r4
 800813c:	d105      	bne.n	800814a <__libc_init_array+0x2e>
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	f855 3b04 	ldr.w	r3, [r5], #4
 8008144:	4798      	blx	r3
 8008146:	3601      	adds	r6, #1
 8008148:	e7ee      	b.n	8008128 <__libc_init_array+0xc>
 800814a:	f855 3b04 	ldr.w	r3, [r5], #4
 800814e:	4798      	blx	r3
 8008150:	3601      	adds	r6, #1
 8008152:	e7f2      	b.n	800813a <__libc_init_array+0x1e>
 8008154:	08008b38 	.word	0x08008b38
 8008158:	08008b38 	.word	0x08008b38
 800815c:	08008b38 	.word	0x08008b38
 8008160:	08008b3c 	.word	0x08008b3c

08008164 <__retarget_lock_acquire_recursive>:
 8008164:	4770      	bx	lr

08008166 <__retarget_lock_release_recursive>:
 8008166:	4770      	bx	lr

08008168 <_free_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4605      	mov	r5, r0
 800816c:	2900      	cmp	r1, #0
 800816e:	d041      	beq.n	80081f4 <_free_r+0x8c>
 8008170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008174:	1f0c      	subs	r4, r1, #4
 8008176:	2b00      	cmp	r3, #0
 8008178:	bfb8      	it	lt
 800817a:	18e4      	addlt	r4, r4, r3
 800817c:	f000 f8e0 	bl	8008340 <__malloc_lock>
 8008180:	4a1d      	ldr	r2, [pc, #116]	@ (80081f8 <_free_r+0x90>)
 8008182:	6813      	ldr	r3, [r2, #0]
 8008184:	b933      	cbnz	r3, 8008194 <_free_r+0x2c>
 8008186:	6063      	str	r3, [r4, #4]
 8008188:	6014      	str	r4, [r2, #0]
 800818a:	4628      	mov	r0, r5
 800818c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008190:	f000 b8dc 	b.w	800834c <__malloc_unlock>
 8008194:	42a3      	cmp	r3, r4
 8008196:	d908      	bls.n	80081aa <_free_r+0x42>
 8008198:	6820      	ldr	r0, [r4, #0]
 800819a:	1821      	adds	r1, r4, r0
 800819c:	428b      	cmp	r3, r1
 800819e:	bf01      	itttt	eq
 80081a0:	6819      	ldreq	r1, [r3, #0]
 80081a2:	685b      	ldreq	r3, [r3, #4]
 80081a4:	1809      	addeq	r1, r1, r0
 80081a6:	6021      	streq	r1, [r4, #0]
 80081a8:	e7ed      	b.n	8008186 <_free_r+0x1e>
 80081aa:	461a      	mov	r2, r3
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	b10b      	cbz	r3, 80081b4 <_free_r+0x4c>
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	d9fa      	bls.n	80081aa <_free_r+0x42>
 80081b4:	6811      	ldr	r1, [r2, #0]
 80081b6:	1850      	adds	r0, r2, r1
 80081b8:	42a0      	cmp	r0, r4
 80081ba:	d10b      	bne.n	80081d4 <_free_r+0x6c>
 80081bc:	6820      	ldr	r0, [r4, #0]
 80081be:	4401      	add	r1, r0
 80081c0:	1850      	adds	r0, r2, r1
 80081c2:	4283      	cmp	r3, r0
 80081c4:	6011      	str	r1, [r2, #0]
 80081c6:	d1e0      	bne.n	800818a <_free_r+0x22>
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	6053      	str	r3, [r2, #4]
 80081ce:	4408      	add	r0, r1
 80081d0:	6010      	str	r0, [r2, #0]
 80081d2:	e7da      	b.n	800818a <_free_r+0x22>
 80081d4:	d902      	bls.n	80081dc <_free_r+0x74>
 80081d6:	230c      	movs	r3, #12
 80081d8:	602b      	str	r3, [r5, #0]
 80081da:	e7d6      	b.n	800818a <_free_r+0x22>
 80081dc:	6820      	ldr	r0, [r4, #0]
 80081de:	1821      	adds	r1, r4, r0
 80081e0:	428b      	cmp	r3, r1
 80081e2:	bf04      	itt	eq
 80081e4:	6819      	ldreq	r1, [r3, #0]
 80081e6:	685b      	ldreq	r3, [r3, #4]
 80081e8:	6063      	str	r3, [r4, #4]
 80081ea:	bf04      	itt	eq
 80081ec:	1809      	addeq	r1, r1, r0
 80081ee:	6021      	streq	r1, [r4, #0]
 80081f0:	6054      	str	r4, [r2, #4]
 80081f2:	e7ca      	b.n	800818a <_free_r+0x22>
 80081f4:	bd38      	pop	{r3, r4, r5, pc}
 80081f6:	bf00      	nop
 80081f8:	20001e2c 	.word	0x20001e2c

080081fc <sbrk_aligned>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	4e0f      	ldr	r6, [pc, #60]	@ (800823c <sbrk_aligned+0x40>)
 8008200:	460c      	mov	r4, r1
 8008202:	6831      	ldr	r1, [r6, #0]
 8008204:	4605      	mov	r5, r0
 8008206:	b911      	cbnz	r1, 800820e <sbrk_aligned+0x12>
 8008208:	f000 fba6 	bl	8008958 <_sbrk_r>
 800820c:	6030      	str	r0, [r6, #0]
 800820e:	4621      	mov	r1, r4
 8008210:	4628      	mov	r0, r5
 8008212:	f000 fba1 	bl	8008958 <_sbrk_r>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d103      	bne.n	8008222 <sbrk_aligned+0x26>
 800821a:	f04f 34ff 	mov.w	r4, #4294967295
 800821e:	4620      	mov	r0, r4
 8008220:	bd70      	pop	{r4, r5, r6, pc}
 8008222:	1cc4      	adds	r4, r0, #3
 8008224:	f024 0403 	bic.w	r4, r4, #3
 8008228:	42a0      	cmp	r0, r4
 800822a:	d0f8      	beq.n	800821e <sbrk_aligned+0x22>
 800822c:	1a21      	subs	r1, r4, r0
 800822e:	4628      	mov	r0, r5
 8008230:	f000 fb92 	bl	8008958 <_sbrk_r>
 8008234:	3001      	adds	r0, #1
 8008236:	d1f2      	bne.n	800821e <sbrk_aligned+0x22>
 8008238:	e7ef      	b.n	800821a <sbrk_aligned+0x1e>
 800823a:	bf00      	nop
 800823c:	20001e28 	.word	0x20001e28

08008240 <_malloc_r>:
 8008240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008244:	1ccd      	adds	r5, r1, #3
 8008246:	f025 0503 	bic.w	r5, r5, #3
 800824a:	3508      	adds	r5, #8
 800824c:	2d0c      	cmp	r5, #12
 800824e:	bf38      	it	cc
 8008250:	250c      	movcc	r5, #12
 8008252:	2d00      	cmp	r5, #0
 8008254:	4606      	mov	r6, r0
 8008256:	db01      	blt.n	800825c <_malloc_r+0x1c>
 8008258:	42a9      	cmp	r1, r5
 800825a:	d904      	bls.n	8008266 <_malloc_r+0x26>
 800825c:	230c      	movs	r3, #12
 800825e:	6033      	str	r3, [r6, #0]
 8008260:	2000      	movs	r0, #0
 8008262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008266:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800833c <_malloc_r+0xfc>
 800826a:	f000 f869 	bl	8008340 <__malloc_lock>
 800826e:	f8d8 3000 	ldr.w	r3, [r8]
 8008272:	461c      	mov	r4, r3
 8008274:	bb44      	cbnz	r4, 80082c8 <_malloc_r+0x88>
 8008276:	4629      	mov	r1, r5
 8008278:	4630      	mov	r0, r6
 800827a:	f7ff ffbf 	bl	80081fc <sbrk_aligned>
 800827e:	1c43      	adds	r3, r0, #1
 8008280:	4604      	mov	r4, r0
 8008282:	d158      	bne.n	8008336 <_malloc_r+0xf6>
 8008284:	f8d8 4000 	ldr.w	r4, [r8]
 8008288:	4627      	mov	r7, r4
 800828a:	2f00      	cmp	r7, #0
 800828c:	d143      	bne.n	8008316 <_malloc_r+0xd6>
 800828e:	2c00      	cmp	r4, #0
 8008290:	d04b      	beq.n	800832a <_malloc_r+0xea>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	4639      	mov	r1, r7
 8008296:	4630      	mov	r0, r6
 8008298:	eb04 0903 	add.w	r9, r4, r3
 800829c:	f000 fb5c 	bl	8008958 <_sbrk_r>
 80082a0:	4581      	cmp	r9, r0
 80082a2:	d142      	bne.n	800832a <_malloc_r+0xea>
 80082a4:	6821      	ldr	r1, [r4, #0]
 80082a6:	1a6d      	subs	r5, r5, r1
 80082a8:	4629      	mov	r1, r5
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7ff ffa6 	bl	80081fc <sbrk_aligned>
 80082b0:	3001      	adds	r0, #1
 80082b2:	d03a      	beq.n	800832a <_malloc_r+0xea>
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	442b      	add	r3, r5
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	f8d8 3000 	ldr.w	r3, [r8]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	bb62      	cbnz	r2, 800831c <_malloc_r+0xdc>
 80082c2:	f8c8 7000 	str.w	r7, [r8]
 80082c6:	e00f      	b.n	80082e8 <_malloc_r+0xa8>
 80082c8:	6822      	ldr	r2, [r4, #0]
 80082ca:	1b52      	subs	r2, r2, r5
 80082cc:	d420      	bmi.n	8008310 <_malloc_r+0xd0>
 80082ce:	2a0b      	cmp	r2, #11
 80082d0:	d917      	bls.n	8008302 <_malloc_r+0xc2>
 80082d2:	1961      	adds	r1, r4, r5
 80082d4:	42a3      	cmp	r3, r4
 80082d6:	6025      	str	r5, [r4, #0]
 80082d8:	bf18      	it	ne
 80082da:	6059      	strne	r1, [r3, #4]
 80082dc:	6863      	ldr	r3, [r4, #4]
 80082de:	bf08      	it	eq
 80082e0:	f8c8 1000 	streq.w	r1, [r8]
 80082e4:	5162      	str	r2, [r4, r5]
 80082e6:	604b      	str	r3, [r1, #4]
 80082e8:	4630      	mov	r0, r6
 80082ea:	f000 f82f 	bl	800834c <__malloc_unlock>
 80082ee:	f104 000b 	add.w	r0, r4, #11
 80082f2:	1d23      	adds	r3, r4, #4
 80082f4:	f020 0007 	bic.w	r0, r0, #7
 80082f8:	1ac2      	subs	r2, r0, r3
 80082fa:	bf1c      	itt	ne
 80082fc:	1a1b      	subne	r3, r3, r0
 80082fe:	50a3      	strne	r3, [r4, r2]
 8008300:	e7af      	b.n	8008262 <_malloc_r+0x22>
 8008302:	6862      	ldr	r2, [r4, #4]
 8008304:	42a3      	cmp	r3, r4
 8008306:	bf0c      	ite	eq
 8008308:	f8c8 2000 	streq.w	r2, [r8]
 800830c:	605a      	strne	r2, [r3, #4]
 800830e:	e7eb      	b.n	80082e8 <_malloc_r+0xa8>
 8008310:	4623      	mov	r3, r4
 8008312:	6864      	ldr	r4, [r4, #4]
 8008314:	e7ae      	b.n	8008274 <_malloc_r+0x34>
 8008316:	463c      	mov	r4, r7
 8008318:	687f      	ldr	r7, [r7, #4]
 800831a:	e7b6      	b.n	800828a <_malloc_r+0x4a>
 800831c:	461a      	mov	r2, r3
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	42a3      	cmp	r3, r4
 8008322:	d1fb      	bne.n	800831c <_malloc_r+0xdc>
 8008324:	2300      	movs	r3, #0
 8008326:	6053      	str	r3, [r2, #4]
 8008328:	e7de      	b.n	80082e8 <_malloc_r+0xa8>
 800832a:	230c      	movs	r3, #12
 800832c:	6033      	str	r3, [r6, #0]
 800832e:	4630      	mov	r0, r6
 8008330:	f000 f80c 	bl	800834c <__malloc_unlock>
 8008334:	e794      	b.n	8008260 <_malloc_r+0x20>
 8008336:	6005      	str	r5, [r0, #0]
 8008338:	e7d6      	b.n	80082e8 <_malloc_r+0xa8>
 800833a:	bf00      	nop
 800833c:	20001e2c 	.word	0x20001e2c

08008340 <__malloc_lock>:
 8008340:	4801      	ldr	r0, [pc, #4]	@ (8008348 <__malloc_lock+0x8>)
 8008342:	f7ff bf0f 	b.w	8008164 <__retarget_lock_acquire_recursive>
 8008346:	bf00      	nop
 8008348:	20001e24 	.word	0x20001e24

0800834c <__malloc_unlock>:
 800834c:	4801      	ldr	r0, [pc, #4]	@ (8008354 <__malloc_unlock+0x8>)
 800834e:	f7ff bf0a 	b.w	8008166 <__retarget_lock_release_recursive>
 8008352:	bf00      	nop
 8008354:	20001e24 	.word	0x20001e24

08008358 <__ssputs_r>:
 8008358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800835c:	688e      	ldr	r6, [r1, #8]
 800835e:	461f      	mov	r7, r3
 8008360:	42be      	cmp	r6, r7
 8008362:	680b      	ldr	r3, [r1, #0]
 8008364:	4682      	mov	sl, r0
 8008366:	460c      	mov	r4, r1
 8008368:	4690      	mov	r8, r2
 800836a:	d82d      	bhi.n	80083c8 <__ssputs_r+0x70>
 800836c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008370:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008374:	d026      	beq.n	80083c4 <__ssputs_r+0x6c>
 8008376:	6965      	ldr	r5, [r4, #20]
 8008378:	6909      	ldr	r1, [r1, #16]
 800837a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800837e:	eba3 0901 	sub.w	r9, r3, r1
 8008382:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008386:	1c7b      	adds	r3, r7, #1
 8008388:	444b      	add	r3, r9
 800838a:	106d      	asrs	r5, r5, #1
 800838c:	429d      	cmp	r5, r3
 800838e:	bf38      	it	cc
 8008390:	461d      	movcc	r5, r3
 8008392:	0553      	lsls	r3, r2, #21
 8008394:	d527      	bpl.n	80083e6 <__ssputs_r+0x8e>
 8008396:	4629      	mov	r1, r5
 8008398:	f7ff ff52 	bl	8008240 <_malloc_r>
 800839c:	4606      	mov	r6, r0
 800839e:	b360      	cbz	r0, 80083fa <__ssputs_r+0xa2>
 80083a0:	6921      	ldr	r1, [r4, #16]
 80083a2:	464a      	mov	r2, r9
 80083a4:	f000 fae8 	bl	8008978 <memcpy>
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083b2:	81a3      	strh	r3, [r4, #12]
 80083b4:	6126      	str	r6, [r4, #16]
 80083b6:	6165      	str	r5, [r4, #20]
 80083b8:	444e      	add	r6, r9
 80083ba:	eba5 0509 	sub.w	r5, r5, r9
 80083be:	6026      	str	r6, [r4, #0]
 80083c0:	60a5      	str	r5, [r4, #8]
 80083c2:	463e      	mov	r6, r7
 80083c4:	42be      	cmp	r6, r7
 80083c6:	d900      	bls.n	80083ca <__ssputs_r+0x72>
 80083c8:	463e      	mov	r6, r7
 80083ca:	6820      	ldr	r0, [r4, #0]
 80083cc:	4632      	mov	r2, r6
 80083ce:	4641      	mov	r1, r8
 80083d0:	f000 faa8 	bl	8008924 <memmove>
 80083d4:	68a3      	ldr	r3, [r4, #8]
 80083d6:	1b9b      	subs	r3, r3, r6
 80083d8:	60a3      	str	r3, [r4, #8]
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	4433      	add	r3, r6
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	2000      	movs	r0, #0
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	462a      	mov	r2, r5
 80083e8:	f000 fad4 	bl	8008994 <_realloc_r>
 80083ec:	4606      	mov	r6, r0
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d1e0      	bne.n	80083b4 <__ssputs_r+0x5c>
 80083f2:	6921      	ldr	r1, [r4, #16]
 80083f4:	4650      	mov	r0, sl
 80083f6:	f7ff feb7 	bl	8008168 <_free_r>
 80083fa:	230c      	movs	r3, #12
 80083fc:	f8ca 3000 	str.w	r3, [sl]
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008406:	81a3      	strh	r3, [r4, #12]
 8008408:	f04f 30ff 	mov.w	r0, #4294967295
 800840c:	e7e9      	b.n	80083e2 <__ssputs_r+0x8a>
	...

08008410 <_svfiprintf_r>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	4698      	mov	r8, r3
 8008416:	898b      	ldrh	r3, [r1, #12]
 8008418:	061b      	lsls	r3, r3, #24
 800841a:	b09d      	sub	sp, #116	@ 0x74
 800841c:	4607      	mov	r7, r0
 800841e:	460d      	mov	r5, r1
 8008420:	4614      	mov	r4, r2
 8008422:	d510      	bpl.n	8008446 <_svfiprintf_r+0x36>
 8008424:	690b      	ldr	r3, [r1, #16]
 8008426:	b973      	cbnz	r3, 8008446 <_svfiprintf_r+0x36>
 8008428:	2140      	movs	r1, #64	@ 0x40
 800842a:	f7ff ff09 	bl	8008240 <_malloc_r>
 800842e:	6028      	str	r0, [r5, #0]
 8008430:	6128      	str	r0, [r5, #16]
 8008432:	b930      	cbnz	r0, 8008442 <_svfiprintf_r+0x32>
 8008434:	230c      	movs	r3, #12
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	b01d      	add	sp, #116	@ 0x74
 800843e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008442:	2340      	movs	r3, #64	@ 0x40
 8008444:	616b      	str	r3, [r5, #20]
 8008446:	2300      	movs	r3, #0
 8008448:	9309      	str	r3, [sp, #36]	@ 0x24
 800844a:	2320      	movs	r3, #32
 800844c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008450:	f8cd 800c 	str.w	r8, [sp, #12]
 8008454:	2330      	movs	r3, #48	@ 0x30
 8008456:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085f4 <_svfiprintf_r+0x1e4>
 800845a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800845e:	f04f 0901 	mov.w	r9, #1
 8008462:	4623      	mov	r3, r4
 8008464:	469a      	mov	sl, r3
 8008466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800846a:	b10a      	cbz	r2, 8008470 <_svfiprintf_r+0x60>
 800846c:	2a25      	cmp	r2, #37	@ 0x25
 800846e:	d1f9      	bne.n	8008464 <_svfiprintf_r+0x54>
 8008470:	ebba 0b04 	subs.w	fp, sl, r4
 8008474:	d00b      	beq.n	800848e <_svfiprintf_r+0x7e>
 8008476:	465b      	mov	r3, fp
 8008478:	4622      	mov	r2, r4
 800847a:	4629      	mov	r1, r5
 800847c:	4638      	mov	r0, r7
 800847e:	f7ff ff6b 	bl	8008358 <__ssputs_r>
 8008482:	3001      	adds	r0, #1
 8008484:	f000 80a7 	beq.w	80085d6 <_svfiprintf_r+0x1c6>
 8008488:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800848a:	445a      	add	r2, fp
 800848c:	9209      	str	r2, [sp, #36]	@ 0x24
 800848e:	f89a 3000 	ldrb.w	r3, [sl]
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 809f 	beq.w	80085d6 <_svfiprintf_r+0x1c6>
 8008498:	2300      	movs	r3, #0
 800849a:	f04f 32ff 	mov.w	r2, #4294967295
 800849e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084a2:	f10a 0a01 	add.w	sl, sl, #1
 80084a6:	9304      	str	r3, [sp, #16]
 80084a8:	9307      	str	r3, [sp, #28]
 80084aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80084b0:	4654      	mov	r4, sl
 80084b2:	2205      	movs	r2, #5
 80084b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b8:	484e      	ldr	r0, [pc, #312]	@ (80085f4 <_svfiprintf_r+0x1e4>)
 80084ba:	f7f7 feb1 	bl	8000220 <memchr>
 80084be:	9a04      	ldr	r2, [sp, #16]
 80084c0:	b9d8      	cbnz	r0, 80084fa <_svfiprintf_r+0xea>
 80084c2:	06d0      	lsls	r0, r2, #27
 80084c4:	bf44      	itt	mi
 80084c6:	2320      	movmi	r3, #32
 80084c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084cc:	0711      	lsls	r1, r2, #28
 80084ce:	bf44      	itt	mi
 80084d0:	232b      	movmi	r3, #43	@ 0x2b
 80084d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084d6:	f89a 3000 	ldrb.w	r3, [sl]
 80084da:	2b2a      	cmp	r3, #42	@ 0x2a
 80084dc:	d015      	beq.n	800850a <_svfiprintf_r+0xfa>
 80084de:	9a07      	ldr	r2, [sp, #28]
 80084e0:	4654      	mov	r4, sl
 80084e2:	2000      	movs	r0, #0
 80084e4:	f04f 0c0a 	mov.w	ip, #10
 80084e8:	4621      	mov	r1, r4
 80084ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ee:	3b30      	subs	r3, #48	@ 0x30
 80084f0:	2b09      	cmp	r3, #9
 80084f2:	d94b      	bls.n	800858c <_svfiprintf_r+0x17c>
 80084f4:	b1b0      	cbz	r0, 8008524 <_svfiprintf_r+0x114>
 80084f6:	9207      	str	r2, [sp, #28]
 80084f8:	e014      	b.n	8008524 <_svfiprintf_r+0x114>
 80084fa:	eba0 0308 	sub.w	r3, r0, r8
 80084fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008502:	4313      	orrs	r3, r2
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	46a2      	mov	sl, r4
 8008508:	e7d2      	b.n	80084b0 <_svfiprintf_r+0xa0>
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	1d19      	adds	r1, r3, #4
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	9103      	str	r1, [sp, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	bfbb      	ittet	lt
 8008516:	425b      	neglt	r3, r3
 8008518:	f042 0202 	orrlt.w	r2, r2, #2
 800851c:	9307      	strge	r3, [sp, #28]
 800851e:	9307      	strlt	r3, [sp, #28]
 8008520:	bfb8      	it	lt
 8008522:	9204      	strlt	r2, [sp, #16]
 8008524:	7823      	ldrb	r3, [r4, #0]
 8008526:	2b2e      	cmp	r3, #46	@ 0x2e
 8008528:	d10a      	bne.n	8008540 <_svfiprintf_r+0x130>
 800852a:	7863      	ldrb	r3, [r4, #1]
 800852c:	2b2a      	cmp	r3, #42	@ 0x2a
 800852e:	d132      	bne.n	8008596 <_svfiprintf_r+0x186>
 8008530:	9b03      	ldr	r3, [sp, #12]
 8008532:	1d1a      	adds	r2, r3, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	9203      	str	r2, [sp, #12]
 8008538:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800853c:	3402      	adds	r4, #2
 800853e:	9305      	str	r3, [sp, #20]
 8008540:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008604 <_svfiprintf_r+0x1f4>
 8008544:	7821      	ldrb	r1, [r4, #0]
 8008546:	2203      	movs	r2, #3
 8008548:	4650      	mov	r0, sl
 800854a:	f7f7 fe69 	bl	8000220 <memchr>
 800854e:	b138      	cbz	r0, 8008560 <_svfiprintf_r+0x150>
 8008550:	9b04      	ldr	r3, [sp, #16]
 8008552:	eba0 000a 	sub.w	r0, r0, sl
 8008556:	2240      	movs	r2, #64	@ 0x40
 8008558:	4082      	lsls	r2, r0
 800855a:	4313      	orrs	r3, r2
 800855c:	3401      	adds	r4, #1
 800855e:	9304      	str	r3, [sp, #16]
 8008560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008564:	4824      	ldr	r0, [pc, #144]	@ (80085f8 <_svfiprintf_r+0x1e8>)
 8008566:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800856a:	2206      	movs	r2, #6
 800856c:	f7f7 fe58 	bl	8000220 <memchr>
 8008570:	2800      	cmp	r0, #0
 8008572:	d036      	beq.n	80085e2 <_svfiprintf_r+0x1d2>
 8008574:	4b21      	ldr	r3, [pc, #132]	@ (80085fc <_svfiprintf_r+0x1ec>)
 8008576:	bb1b      	cbnz	r3, 80085c0 <_svfiprintf_r+0x1b0>
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	3307      	adds	r3, #7
 800857c:	f023 0307 	bic.w	r3, r3, #7
 8008580:	3308      	adds	r3, #8
 8008582:	9303      	str	r3, [sp, #12]
 8008584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008586:	4433      	add	r3, r6
 8008588:	9309      	str	r3, [sp, #36]	@ 0x24
 800858a:	e76a      	b.n	8008462 <_svfiprintf_r+0x52>
 800858c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008590:	460c      	mov	r4, r1
 8008592:	2001      	movs	r0, #1
 8008594:	e7a8      	b.n	80084e8 <_svfiprintf_r+0xd8>
 8008596:	2300      	movs	r3, #0
 8008598:	3401      	adds	r4, #1
 800859a:	9305      	str	r3, [sp, #20]
 800859c:	4619      	mov	r1, r3
 800859e:	f04f 0c0a 	mov.w	ip, #10
 80085a2:	4620      	mov	r0, r4
 80085a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085a8:	3a30      	subs	r2, #48	@ 0x30
 80085aa:	2a09      	cmp	r2, #9
 80085ac:	d903      	bls.n	80085b6 <_svfiprintf_r+0x1a6>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0c6      	beq.n	8008540 <_svfiprintf_r+0x130>
 80085b2:	9105      	str	r1, [sp, #20]
 80085b4:	e7c4      	b.n	8008540 <_svfiprintf_r+0x130>
 80085b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ba:	4604      	mov	r4, r0
 80085bc:	2301      	movs	r3, #1
 80085be:	e7f0      	b.n	80085a2 <_svfiprintf_r+0x192>
 80085c0:	ab03      	add	r3, sp, #12
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	462a      	mov	r2, r5
 80085c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008600 <_svfiprintf_r+0x1f0>)
 80085c8:	a904      	add	r1, sp, #16
 80085ca:	4638      	mov	r0, r7
 80085cc:	f3af 8000 	nop.w
 80085d0:	1c42      	adds	r2, r0, #1
 80085d2:	4606      	mov	r6, r0
 80085d4:	d1d6      	bne.n	8008584 <_svfiprintf_r+0x174>
 80085d6:	89ab      	ldrh	r3, [r5, #12]
 80085d8:	065b      	lsls	r3, r3, #25
 80085da:	f53f af2d 	bmi.w	8008438 <_svfiprintf_r+0x28>
 80085de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085e0:	e72c      	b.n	800843c <_svfiprintf_r+0x2c>
 80085e2:	ab03      	add	r3, sp, #12
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	462a      	mov	r2, r5
 80085e8:	4b05      	ldr	r3, [pc, #20]	@ (8008600 <_svfiprintf_r+0x1f0>)
 80085ea:	a904      	add	r1, sp, #16
 80085ec:	4638      	mov	r0, r7
 80085ee:	f000 f879 	bl	80086e4 <_printf_i>
 80085f2:	e7ed      	b.n	80085d0 <_svfiprintf_r+0x1c0>
 80085f4:	08008afc 	.word	0x08008afc
 80085f8:	08008b06 	.word	0x08008b06
 80085fc:	00000000 	.word	0x00000000
 8008600:	08008359 	.word	0x08008359
 8008604:	08008b02 	.word	0x08008b02

08008608 <_printf_common>:
 8008608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800860c:	4616      	mov	r6, r2
 800860e:	4698      	mov	r8, r3
 8008610:	688a      	ldr	r2, [r1, #8]
 8008612:	690b      	ldr	r3, [r1, #16]
 8008614:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008618:	4293      	cmp	r3, r2
 800861a:	bfb8      	it	lt
 800861c:	4613      	movlt	r3, r2
 800861e:	6033      	str	r3, [r6, #0]
 8008620:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008624:	4607      	mov	r7, r0
 8008626:	460c      	mov	r4, r1
 8008628:	b10a      	cbz	r2, 800862e <_printf_common+0x26>
 800862a:	3301      	adds	r3, #1
 800862c:	6033      	str	r3, [r6, #0]
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	0699      	lsls	r1, r3, #26
 8008632:	bf42      	ittt	mi
 8008634:	6833      	ldrmi	r3, [r6, #0]
 8008636:	3302      	addmi	r3, #2
 8008638:	6033      	strmi	r3, [r6, #0]
 800863a:	6825      	ldr	r5, [r4, #0]
 800863c:	f015 0506 	ands.w	r5, r5, #6
 8008640:	d106      	bne.n	8008650 <_printf_common+0x48>
 8008642:	f104 0a19 	add.w	sl, r4, #25
 8008646:	68e3      	ldr	r3, [r4, #12]
 8008648:	6832      	ldr	r2, [r6, #0]
 800864a:	1a9b      	subs	r3, r3, r2
 800864c:	42ab      	cmp	r3, r5
 800864e:	dc26      	bgt.n	800869e <_printf_common+0x96>
 8008650:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008654:	6822      	ldr	r2, [r4, #0]
 8008656:	3b00      	subs	r3, #0
 8008658:	bf18      	it	ne
 800865a:	2301      	movne	r3, #1
 800865c:	0692      	lsls	r2, r2, #26
 800865e:	d42b      	bmi.n	80086b8 <_printf_common+0xb0>
 8008660:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008664:	4641      	mov	r1, r8
 8008666:	4638      	mov	r0, r7
 8008668:	47c8      	blx	r9
 800866a:	3001      	adds	r0, #1
 800866c:	d01e      	beq.n	80086ac <_printf_common+0xa4>
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	6922      	ldr	r2, [r4, #16]
 8008672:	f003 0306 	and.w	r3, r3, #6
 8008676:	2b04      	cmp	r3, #4
 8008678:	bf02      	ittt	eq
 800867a:	68e5      	ldreq	r5, [r4, #12]
 800867c:	6833      	ldreq	r3, [r6, #0]
 800867e:	1aed      	subeq	r5, r5, r3
 8008680:	68a3      	ldr	r3, [r4, #8]
 8008682:	bf0c      	ite	eq
 8008684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008688:	2500      	movne	r5, #0
 800868a:	4293      	cmp	r3, r2
 800868c:	bfc4      	itt	gt
 800868e:	1a9b      	subgt	r3, r3, r2
 8008690:	18ed      	addgt	r5, r5, r3
 8008692:	2600      	movs	r6, #0
 8008694:	341a      	adds	r4, #26
 8008696:	42b5      	cmp	r5, r6
 8008698:	d11a      	bne.n	80086d0 <_printf_common+0xc8>
 800869a:	2000      	movs	r0, #0
 800869c:	e008      	b.n	80086b0 <_printf_common+0xa8>
 800869e:	2301      	movs	r3, #1
 80086a0:	4652      	mov	r2, sl
 80086a2:	4641      	mov	r1, r8
 80086a4:	4638      	mov	r0, r7
 80086a6:	47c8      	blx	r9
 80086a8:	3001      	adds	r0, #1
 80086aa:	d103      	bne.n	80086b4 <_printf_common+0xac>
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b4:	3501      	adds	r5, #1
 80086b6:	e7c6      	b.n	8008646 <_printf_common+0x3e>
 80086b8:	18e1      	adds	r1, r4, r3
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	2030      	movs	r0, #48	@ 0x30
 80086be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086c2:	4422      	add	r2, r4
 80086c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086cc:	3302      	adds	r3, #2
 80086ce:	e7c7      	b.n	8008660 <_printf_common+0x58>
 80086d0:	2301      	movs	r3, #1
 80086d2:	4622      	mov	r2, r4
 80086d4:	4641      	mov	r1, r8
 80086d6:	4638      	mov	r0, r7
 80086d8:	47c8      	blx	r9
 80086da:	3001      	adds	r0, #1
 80086dc:	d0e6      	beq.n	80086ac <_printf_common+0xa4>
 80086de:	3601      	adds	r6, #1
 80086e0:	e7d9      	b.n	8008696 <_printf_common+0x8e>
	...

080086e4 <_printf_i>:
 80086e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086e8:	7e0f      	ldrb	r7, [r1, #24]
 80086ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086ec:	2f78      	cmp	r7, #120	@ 0x78
 80086ee:	4691      	mov	r9, r2
 80086f0:	4680      	mov	r8, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	469a      	mov	sl, r3
 80086f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086fa:	d807      	bhi.n	800870c <_printf_i+0x28>
 80086fc:	2f62      	cmp	r7, #98	@ 0x62
 80086fe:	d80a      	bhi.n	8008716 <_printf_i+0x32>
 8008700:	2f00      	cmp	r7, #0
 8008702:	f000 80d2 	beq.w	80088aa <_printf_i+0x1c6>
 8008706:	2f58      	cmp	r7, #88	@ 0x58
 8008708:	f000 80b9 	beq.w	800887e <_printf_i+0x19a>
 800870c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008714:	e03a      	b.n	800878c <_printf_i+0xa8>
 8008716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800871a:	2b15      	cmp	r3, #21
 800871c:	d8f6      	bhi.n	800870c <_printf_i+0x28>
 800871e:	a101      	add	r1, pc, #4	@ (adr r1, 8008724 <_printf_i+0x40>)
 8008720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008724:	0800877d 	.word	0x0800877d
 8008728:	08008791 	.word	0x08008791
 800872c:	0800870d 	.word	0x0800870d
 8008730:	0800870d 	.word	0x0800870d
 8008734:	0800870d 	.word	0x0800870d
 8008738:	0800870d 	.word	0x0800870d
 800873c:	08008791 	.word	0x08008791
 8008740:	0800870d 	.word	0x0800870d
 8008744:	0800870d 	.word	0x0800870d
 8008748:	0800870d 	.word	0x0800870d
 800874c:	0800870d 	.word	0x0800870d
 8008750:	08008891 	.word	0x08008891
 8008754:	080087bb 	.word	0x080087bb
 8008758:	0800884b 	.word	0x0800884b
 800875c:	0800870d 	.word	0x0800870d
 8008760:	0800870d 	.word	0x0800870d
 8008764:	080088b3 	.word	0x080088b3
 8008768:	0800870d 	.word	0x0800870d
 800876c:	080087bb 	.word	0x080087bb
 8008770:	0800870d 	.word	0x0800870d
 8008774:	0800870d 	.word	0x0800870d
 8008778:	08008853 	.word	0x08008853
 800877c:	6833      	ldr	r3, [r6, #0]
 800877e:	1d1a      	adds	r2, r3, #4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6032      	str	r2, [r6, #0]
 8008784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800878c:	2301      	movs	r3, #1
 800878e:	e09d      	b.n	80088cc <_printf_i+0x1e8>
 8008790:	6833      	ldr	r3, [r6, #0]
 8008792:	6820      	ldr	r0, [r4, #0]
 8008794:	1d19      	adds	r1, r3, #4
 8008796:	6031      	str	r1, [r6, #0]
 8008798:	0606      	lsls	r6, r0, #24
 800879a:	d501      	bpl.n	80087a0 <_printf_i+0xbc>
 800879c:	681d      	ldr	r5, [r3, #0]
 800879e:	e003      	b.n	80087a8 <_printf_i+0xc4>
 80087a0:	0645      	lsls	r5, r0, #25
 80087a2:	d5fb      	bpl.n	800879c <_printf_i+0xb8>
 80087a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80087a8:	2d00      	cmp	r5, #0
 80087aa:	da03      	bge.n	80087b4 <_printf_i+0xd0>
 80087ac:	232d      	movs	r3, #45	@ 0x2d
 80087ae:	426d      	negs	r5, r5
 80087b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087b4:	4859      	ldr	r0, [pc, #356]	@ (800891c <_printf_i+0x238>)
 80087b6:	230a      	movs	r3, #10
 80087b8:	e011      	b.n	80087de <_printf_i+0xfa>
 80087ba:	6821      	ldr	r1, [r4, #0]
 80087bc:	6833      	ldr	r3, [r6, #0]
 80087be:	0608      	lsls	r0, r1, #24
 80087c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80087c4:	d402      	bmi.n	80087cc <_printf_i+0xe8>
 80087c6:	0649      	lsls	r1, r1, #25
 80087c8:	bf48      	it	mi
 80087ca:	b2ad      	uxthmi	r5, r5
 80087cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80087ce:	4853      	ldr	r0, [pc, #332]	@ (800891c <_printf_i+0x238>)
 80087d0:	6033      	str	r3, [r6, #0]
 80087d2:	bf14      	ite	ne
 80087d4:	230a      	movne	r3, #10
 80087d6:	2308      	moveq	r3, #8
 80087d8:	2100      	movs	r1, #0
 80087da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80087de:	6866      	ldr	r6, [r4, #4]
 80087e0:	60a6      	str	r6, [r4, #8]
 80087e2:	2e00      	cmp	r6, #0
 80087e4:	bfa2      	ittt	ge
 80087e6:	6821      	ldrge	r1, [r4, #0]
 80087e8:	f021 0104 	bicge.w	r1, r1, #4
 80087ec:	6021      	strge	r1, [r4, #0]
 80087ee:	b90d      	cbnz	r5, 80087f4 <_printf_i+0x110>
 80087f0:	2e00      	cmp	r6, #0
 80087f2:	d04b      	beq.n	800888c <_printf_i+0x1a8>
 80087f4:	4616      	mov	r6, r2
 80087f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80087fa:	fb03 5711 	mls	r7, r3, r1, r5
 80087fe:	5dc7      	ldrb	r7, [r0, r7]
 8008800:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008804:	462f      	mov	r7, r5
 8008806:	42bb      	cmp	r3, r7
 8008808:	460d      	mov	r5, r1
 800880a:	d9f4      	bls.n	80087f6 <_printf_i+0x112>
 800880c:	2b08      	cmp	r3, #8
 800880e:	d10b      	bne.n	8008828 <_printf_i+0x144>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	07df      	lsls	r7, r3, #31
 8008814:	d508      	bpl.n	8008828 <_printf_i+0x144>
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	6861      	ldr	r1, [r4, #4]
 800881a:	4299      	cmp	r1, r3
 800881c:	bfde      	ittt	le
 800881e:	2330      	movle	r3, #48	@ 0x30
 8008820:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008824:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008828:	1b92      	subs	r2, r2, r6
 800882a:	6122      	str	r2, [r4, #16]
 800882c:	f8cd a000 	str.w	sl, [sp]
 8008830:	464b      	mov	r3, r9
 8008832:	aa03      	add	r2, sp, #12
 8008834:	4621      	mov	r1, r4
 8008836:	4640      	mov	r0, r8
 8008838:	f7ff fee6 	bl	8008608 <_printf_common>
 800883c:	3001      	adds	r0, #1
 800883e:	d14a      	bne.n	80088d6 <_printf_i+0x1f2>
 8008840:	f04f 30ff 	mov.w	r0, #4294967295
 8008844:	b004      	add	sp, #16
 8008846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	f043 0320 	orr.w	r3, r3, #32
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	4833      	ldr	r0, [pc, #204]	@ (8008920 <_printf_i+0x23c>)
 8008854:	2778      	movs	r7, #120	@ 0x78
 8008856:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	6831      	ldr	r1, [r6, #0]
 800885e:	061f      	lsls	r7, r3, #24
 8008860:	f851 5b04 	ldr.w	r5, [r1], #4
 8008864:	d402      	bmi.n	800886c <_printf_i+0x188>
 8008866:	065f      	lsls	r7, r3, #25
 8008868:	bf48      	it	mi
 800886a:	b2ad      	uxthmi	r5, r5
 800886c:	6031      	str	r1, [r6, #0]
 800886e:	07d9      	lsls	r1, r3, #31
 8008870:	bf44      	itt	mi
 8008872:	f043 0320 	orrmi.w	r3, r3, #32
 8008876:	6023      	strmi	r3, [r4, #0]
 8008878:	b11d      	cbz	r5, 8008882 <_printf_i+0x19e>
 800887a:	2310      	movs	r3, #16
 800887c:	e7ac      	b.n	80087d8 <_printf_i+0xf4>
 800887e:	4827      	ldr	r0, [pc, #156]	@ (800891c <_printf_i+0x238>)
 8008880:	e7e9      	b.n	8008856 <_printf_i+0x172>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	f023 0320 	bic.w	r3, r3, #32
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	e7f6      	b.n	800887a <_printf_i+0x196>
 800888c:	4616      	mov	r6, r2
 800888e:	e7bd      	b.n	800880c <_printf_i+0x128>
 8008890:	6833      	ldr	r3, [r6, #0]
 8008892:	6825      	ldr	r5, [r4, #0]
 8008894:	6961      	ldr	r1, [r4, #20]
 8008896:	1d18      	adds	r0, r3, #4
 8008898:	6030      	str	r0, [r6, #0]
 800889a:	062e      	lsls	r6, r5, #24
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	d501      	bpl.n	80088a4 <_printf_i+0x1c0>
 80088a0:	6019      	str	r1, [r3, #0]
 80088a2:	e002      	b.n	80088aa <_printf_i+0x1c6>
 80088a4:	0668      	lsls	r0, r5, #25
 80088a6:	d5fb      	bpl.n	80088a0 <_printf_i+0x1bc>
 80088a8:	8019      	strh	r1, [r3, #0]
 80088aa:	2300      	movs	r3, #0
 80088ac:	6123      	str	r3, [r4, #16]
 80088ae:	4616      	mov	r6, r2
 80088b0:	e7bc      	b.n	800882c <_printf_i+0x148>
 80088b2:	6833      	ldr	r3, [r6, #0]
 80088b4:	1d1a      	adds	r2, r3, #4
 80088b6:	6032      	str	r2, [r6, #0]
 80088b8:	681e      	ldr	r6, [r3, #0]
 80088ba:	6862      	ldr	r2, [r4, #4]
 80088bc:	2100      	movs	r1, #0
 80088be:	4630      	mov	r0, r6
 80088c0:	f7f7 fcae 	bl	8000220 <memchr>
 80088c4:	b108      	cbz	r0, 80088ca <_printf_i+0x1e6>
 80088c6:	1b80      	subs	r0, r0, r6
 80088c8:	6060      	str	r0, [r4, #4]
 80088ca:	6863      	ldr	r3, [r4, #4]
 80088cc:	6123      	str	r3, [r4, #16]
 80088ce:	2300      	movs	r3, #0
 80088d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088d4:	e7aa      	b.n	800882c <_printf_i+0x148>
 80088d6:	6923      	ldr	r3, [r4, #16]
 80088d8:	4632      	mov	r2, r6
 80088da:	4649      	mov	r1, r9
 80088dc:	4640      	mov	r0, r8
 80088de:	47d0      	blx	sl
 80088e0:	3001      	adds	r0, #1
 80088e2:	d0ad      	beq.n	8008840 <_printf_i+0x15c>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	079b      	lsls	r3, r3, #30
 80088e8:	d413      	bmi.n	8008912 <_printf_i+0x22e>
 80088ea:	68e0      	ldr	r0, [r4, #12]
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	4298      	cmp	r0, r3
 80088f0:	bfb8      	it	lt
 80088f2:	4618      	movlt	r0, r3
 80088f4:	e7a6      	b.n	8008844 <_printf_i+0x160>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4632      	mov	r2, r6
 80088fa:	4649      	mov	r1, r9
 80088fc:	4640      	mov	r0, r8
 80088fe:	47d0      	blx	sl
 8008900:	3001      	adds	r0, #1
 8008902:	d09d      	beq.n	8008840 <_printf_i+0x15c>
 8008904:	3501      	adds	r5, #1
 8008906:	68e3      	ldr	r3, [r4, #12]
 8008908:	9903      	ldr	r1, [sp, #12]
 800890a:	1a5b      	subs	r3, r3, r1
 800890c:	42ab      	cmp	r3, r5
 800890e:	dcf2      	bgt.n	80088f6 <_printf_i+0x212>
 8008910:	e7eb      	b.n	80088ea <_printf_i+0x206>
 8008912:	2500      	movs	r5, #0
 8008914:	f104 0619 	add.w	r6, r4, #25
 8008918:	e7f5      	b.n	8008906 <_printf_i+0x222>
 800891a:	bf00      	nop
 800891c:	08008b0d 	.word	0x08008b0d
 8008920:	08008b1e 	.word	0x08008b1e

08008924 <memmove>:
 8008924:	4288      	cmp	r0, r1
 8008926:	b510      	push	{r4, lr}
 8008928:	eb01 0402 	add.w	r4, r1, r2
 800892c:	d902      	bls.n	8008934 <memmove+0x10>
 800892e:	4284      	cmp	r4, r0
 8008930:	4623      	mov	r3, r4
 8008932:	d807      	bhi.n	8008944 <memmove+0x20>
 8008934:	1e43      	subs	r3, r0, #1
 8008936:	42a1      	cmp	r1, r4
 8008938:	d008      	beq.n	800894c <memmove+0x28>
 800893a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800893e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008942:	e7f8      	b.n	8008936 <memmove+0x12>
 8008944:	4402      	add	r2, r0
 8008946:	4601      	mov	r1, r0
 8008948:	428a      	cmp	r2, r1
 800894a:	d100      	bne.n	800894e <memmove+0x2a>
 800894c:	bd10      	pop	{r4, pc}
 800894e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008956:	e7f7      	b.n	8008948 <memmove+0x24>

08008958 <_sbrk_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d06      	ldr	r5, [pc, #24]	@ (8008974 <_sbrk_r+0x1c>)
 800895c:	2300      	movs	r3, #0
 800895e:	4604      	mov	r4, r0
 8008960:	4608      	mov	r0, r1
 8008962:	602b      	str	r3, [r5, #0]
 8008964:	f7f7 ff40 	bl	80007e8 <_sbrk>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_sbrk_r+0x1a>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_sbrk_r+0x1a>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	20001e20 	.word	0x20001e20

08008978 <memcpy>:
 8008978:	440a      	add	r2, r1
 800897a:	4291      	cmp	r1, r2
 800897c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008980:	d100      	bne.n	8008984 <memcpy+0xc>
 8008982:	4770      	bx	lr
 8008984:	b510      	push	{r4, lr}
 8008986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800898a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800898e:	4291      	cmp	r1, r2
 8008990:	d1f9      	bne.n	8008986 <memcpy+0xe>
 8008992:	bd10      	pop	{r4, pc}

08008994 <_realloc_r>:
 8008994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008998:	4680      	mov	r8, r0
 800899a:	4615      	mov	r5, r2
 800899c:	460c      	mov	r4, r1
 800899e:	b921      	cbnz	r1, 80089aa <_realloc_r+0x16>
 80089a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089a4:	4611      	mov	r1, r2
 80089a6:	f7ff bc4b 	b.w	8008240 <_malloc_r>
 80089aa:	b92a      	cbnz	r2, 80089b8 <_realloc_r+0x24>
 80089ac:	f7ff fbdc 	bl	8008168 <_free_r>
 80089b0:	2400      	movs	r4, #0
 80089b2:	4620      	mov	r0, r4
 80089b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b8:	f000 f81a 	bl	80089f0 <_malloc_usable_size_r>
 80089bc:	4285      	cmp	r5, r0
 80089be:	4606      	mov	r6, r0
 80089c0:	d802      	bhi.n	80089c8 <_realloc_r+0x34>
 80089c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80089c6:	d8f4      	bhi.n	80089b2 <_realloc_r+0x1e>
 80089c8:	4629      	mov	r1, r5
 80089ca:	4640      	mov	r0, r8
 80089cc:	f7ff fc38 	bl	8008240 <_malloc_r>
 80089d0:	4607      	mov	r7, r0
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d0ec      	beq.n	80089b0 <_realloc_r+0x1c>
 80089d6:	42b5      	cmp	r5, r6
 80089d8:	462a      	mov	r2, r5
 80089da:	4621      	mov	r1, r4
 80089dc:	bf28      	it	cs
 80089de:	4632      	movcs	r2, r6
 80089e0:	f7ff ffca 	bl	8008978 <memcpy>
 80089e4:	4621      	mov	r1, r4
 80089e6:	4640      	mov	r0, r8
 80089e8:	f7ff fbbe 	bl	8008168 <_free_r>
 80089ec:	463c      	mov	r4, r7
 80089ee:	e7e0      	b.n	80089b2 <_realloc_r+0x1e>

080089f0 <_malloc_usable_size_r>:
 80089f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089f4:	1f18      	subs	r0, r3, #4
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	bfbc      	itt	lt
 80089fa:	580b      	ldrlt	r3, [r1, r0]
 80089fc:	18c0      	addlt	r0, r0, r3
 80089fe:	4770      	bx	lr

08008a00 <_init>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	bf00      	nop
 8008a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a06:	bc08      	pop	{r3}
 8008a08:	469e      	mov	lr, r3
 8008a0a:	4770      	bx	lr

08008a0c <_fini>:
 8008a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0e:	bf00      	nop
 8008a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a12:	bc08      	pop	{r3}
 8008a14:	469e      	mov	lr, r3
 8008a16:	4770      	bx	lr
